// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobsetting"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ScheduledJobSettingUpdate is the builder for updating ScheduledJobSetting entities.
type ScheduledJobSettingUpdate struct {
	config
	hooks     []Hook
	mutation  *ScheduledJobSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScheduledJobSettingUpdate builder.
func (sjsu *ScheduledJobSettingUpdate) Where(ps ...predicate.ScheduledJobSetting) *ScheduledJobSettingUpdate {
	sjsu.mutation.Where(ps...)
	return sjsu
}

// SetUpdatedAt sets the "updated_at" field.
func (sjsu *ScheduledJobSettingUpdate) SetUpdatedAt(t time.Time) *ScheduledJobSettingUpdate {
	sjsu.mutation.SetUpdatedAt(t)
	return sjsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sjsu *ScheduledJobSettingUpdate) ClearUpdatedAt() *ScheduledJobSettingUpdate {
	sjsu.mutation.ClearUpdatedAt()
	return sjsu
}

// SetUpdatedBy sets the "updated_by" field.
func (sjsu *ScheduledJobSettingUpdate) SetUpdatedBy(s string) *ScheduledJobSettingUpdate {
	sjsu.mutation.SetUpdatedBy(s)
	return sjsu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sjsu *ScheduledJobSettingUpdate) SetNillableUpdatedBy(s *string) *ScheduledJobSettingUpdate {
	if s != nil {
		sjsu.SetUpdatedBy(*s)
	}
	return sjsu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sjsu *ScheduledJobSettingUpdate) ClearUpdatedBy() *ScheduledJobSettingUpdate {
	sjsu.mutation.ClearUpdatedBy()
	return sjsu
}

// SetDeletedAt sets the "deleted_at" field.
func (sjsu *ScheduledJobSettingUpdate) SetDeletedAt(t time.Time) *ScheduledJobSettingUpdate {
	sjsu.mutation.SetDeletedAt(t)
	return sjsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sjsu *ScheduledJobSettingUpdate) SetNillableDeletedAt(t *time.Time) *ScheduledJobSettingUpdate {
	if t != nil {
		sjsu.SetDeletedAt(*t)
	}
	return sjsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sjsu *ScheduledJobSettingUpdate) ClearDeletedAt() *ScheduledJobSettingUpdate {
	sjsu.mutation.ClearDeletedAt()
	return sjsu
}

// SetDeletedBy sets the "deleted_by" field.
func (sjsu *ScheduledJobSettingUpdate) SetDeletedBy(s string) *ScheduledJobSettingUpdate {
	sjsu.mutation.SetDeletedBy(s)
	return sjsu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sjsu *ScheduledJobSettingUpdate) SetNillableDeletedBy(s *string) *ScheduledJobSettingUpdate {
	if s != nil {
		sjsu.SetDeletedBy(*s)
	}
	return sjsu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (sjsu *ScheduledJobSettingUpdate) ClearDeletedBy() *ScheduledJobSettingUpdate {
	sjsu.mutation.ClearDeletedBy()
	return sjsu
}

// SetTags sets the "tags" field.
func (sjsu *ScheduledJobSettingUpdate) SetTags(s []string) *ScheduledJobSettingUpdate {
	sjsu.mutation.SetTags(s)
	return sjsu
}

// AppendTags appends s to the "tags" field.
func (sjsu *ScheduledJobSettingUpdate) AppendTags(s []string) *ScheduledJobSettingUpdate {
	sjsu.mutation.AppendTags(s)
	return sjsu
}

// ClearTags clears the value of the "tags" field.
func (sjsu *ScheduledJobSettingUpdate) ClearTags() *ScheduledJobSettingUpdate {
	sjsu.mutation.ClearTags()
	return sjsu
}

// SetScheduledJobID sets the "scheduled_job_id" field.
func (sjsu *ScheduledJobSettingUpdate) SetScheduledJobID(s string) *ScheduledJobSettingUpdate {
	sjsu.mutation.SetScheduledJobID(s)
	return sjsu
}

// SetNillableScheduledJobID sets the "scheduled_job_id" field if the given value is not nil.
func (sjsu *ScheduledJobSettingUpdate) SetNillableScheduledJobID(s *string) *ScheduledJobSettingUpdate {
	if s != nil {
		sjsu.SetScheduledJobID(*s)
	}
	return sjsu
}

// ClearScheduledJobID clears the value of the "scheduled_job_id" field.
func (sjsu *ScheduledJobSettingUpdate) ClearScheduledJobID() *ScheduledJobSettingUpdate {
	sjsu.mutation.ClearScheduledJobID()
	return sjsu
}

// SetConfiguration sets the "configuration" field.
func (sjsu *ScheduledJobSettingUpdate) SetConfiguration(mc models.JobConfiguration) *ScheduledJobSettingUpdate {
	sjsu.mutation.SetConfiguration(mc)
	return sjsu
}

// SetNillableConfiguration sets the "configuration" field if the given value is not nil.
func (sjsu *ScheduledJobSettingUpdate) SetNillableConfiguration(mc *models.JobConfiguration) *ScheduledJobSettingUpdate {
	if mc != nil {
		sjsu.SetConfiguration(*mc)
	}
	return sjsu
}

// SetCadence sets the "cadence" field.
func (sjsu *ScheduledJobSettingUpdate) SetCadence(mc models.JobCadence) *ScheduledJobSettingUpdate {
	sjsu.mutation.SetCadence(mc)
	return sjsu
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (sjsu *ScheduledJobSettingUpdate) SetNillableCadence(mc *models.JobCadence) *ScheduledJobSettingUpdate {
	if mc != nil {
		sjsu.SetCadence(*mc)
	}
	return sjsu
}

// ClearCadence clears the value of the "cadence" field.
func (sjsu *ScheduledJobSettingUpdate) ClearCadence() *ScheduledJobSettingUpdate {
	sjsu.mutation.ClearCadence()
	return sjsu
}

// SetCron sets the "cron" field.
func (sjsu *ScheduledJobSettingUpdate) SetCron(s string) *ScheduledJobSettingUpdate {
	sjsu.mutation.SetCron(s)
	return sjsu
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (sjsu *ScheduledJobSettingUpdate) SetNillableCron(s *string) *ScheduledJobSettingUpdate {
	if s != nil {
		sjsu.SetCron(*s)
	}
	return sjsu
}

// ClearCron clears the value of the "cron" field.
func (sjsu *ScheduledJobSettingUpdate) ClearCron() *ScheduledJobSettingUpdate {
	sjsu.mutation.ClearCron()
	return sjsu
}

// SetScheduledJob sets the "scheduled_job" edge to the ScheduledJob entity.
func (sjsu *ScheduledJobSettingUpdate) SetScheduledJob(s *ScheduledJob) *ScheduledJobSettingUpdate {
	return sjsu.SetScheduledJobID(s.ID)
}

// Mutation returns the ScheduledJobSettingMutation object of the builder.
func (sjsu *ScheduledJobSettingUpdate) Mutation() *ScheduledJobSettingMutation {
	return sjsu.mutation
}

// ClearScheduledJob clears the "scheduled_job" edge to the ScheduledJob entity.
func (sjsu *ScheduledJobSettingUpdate) ClearScheduledJob() *ScheduledJobSettingUpdate {
	sjsu.mutation.ClearScheduledJob()
	return sjsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sjsu *ScheduledJobSettingUpdate) Save(ctx context.Context) (int, error) {
	if err := sjsu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, sjsu.sqlSave, sjsu.mutation, sjsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sjsu *ScheduledJobSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := sjsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sjsu *ScheduledJobSettingUpdate) Exec(ctx context.Context) error {
	_, err := sjsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjsu *ScheduledJobSettingUpdate) ExecX(ctx context.Context) {
	if err := sjsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjsu *ScheduledJobSettingUpdate) defaults() error {
	if _, ok := sjsu.mutation.UpdatedAt(); !ok && !sjsu.mutation.UpdatedAtCleared() {
		if scheduledjobsetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scheduledjobsetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scheduledjobsetting.UpdateDefaultUpdatedAt()
		sjsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sjsu *ScheduledJobSettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScheduledJobSettingUpdate {
	sjsu.modifiers = append(sjsu.modifiers, modifiers...)
	return sjsu
}

func (sjsu *ScheduledJobSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scheduledjobsetting.Table, scheduledjobsetting.Columns, sqlgraph.NewFieldSpec(scheduledjobsetting.FieldID, field.TypeString))
	if ps := sjsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sjsu.mutation.CreatedAtCleared() {
		_spec.ClearField(scheduledjobsetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sjsu.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledjobsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if sjsu.mutation.UpdatedAtCleared() {
		_spec.ClearField(scheduledjobsetting.FieldUpdatedAt, field.TypeTime)
	}
	if sjsu.mutation.CreatedByCleared() {
		_spec.ClearField(scheduledjobsetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sjsu.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledjobsetting.FieldUpdatedBy, field.TypeString, value)
	}
	if sjsu.mutation.UpdatedByCleared() {
		_spec.ClearField(scheduledjobsetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := sjsu.mutation.DeletedAt(); ok {
		_spec.SetField(scheduledjobsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if sjsu.mutation.DeletedAtCleared() {
		_spec.ClearField(scheduledjobsetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sjsu.mutation.DeletedBy(); ok {
		_spec.SetField(scheduledjobsetting.FieldDeletedBy, field.TypeString, value)
	}
	if sjsu.mutation.DeletedByCleared() {
		_spec.ClearField(scheduledjobsetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := sjsu.mutation.Tags(); ok {
		_spec.SetField(scheduledjobsetting.FieldTags, field.TypeJSON, value)
	}
	if value, ok := sjsu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scheduledjobsetting.FieldTags, value)
		})
	}
	if sjsu.mutation.TagsCleared() {
		_spec.ClearField(scheduledjobsetting.FieldTags, field.TypeJSON)
	}
	if value, ok := sjsu.mutation.Configuration(); ok {
		_spec.SetField(scheduledjobsetting.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := sjsu.mutation.Cadence(); ok {
		_spec.SetField(scheduledjobsetting.FieldCadence, field.TypeJSON, value)
	}
	if sjsu.mutation.CadenceCleared() {
		_spec.ClearField(scheduledjobsetting.FieldCadence, field.TypeJSON)
	}
	if value, ok := sjsu.mutation.Cron(); ok {
		_spec.SetField(scheduledjobsetting.FieldCron, field.TypeString, value)
	}
	if sjsu.mutation.CronCleared() {
		_spec.ClearField(scheduledjobsetting.FieldCron, field.TypeString)
	}
	if sjsu.mutation.ScheduledJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   scheduledjobsetting.ScheduledJobTable,
			Columns: []string{scheduledjobsetting.ScheduledJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjsu.schemaConfig.ScheduledJobSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjsu.mutation.ScheduledJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   scheduledjobsetting.ScheduledJobTable,
			Columns: []string{scheduledjobsetting.ScheduledJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjsu.schemaConfig.ScheduledJobSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = sjsu.schemaConfig.ScheduledJobSetting
	ctx = internal.NewSchemaConfigContext(ctx, sjsu.schemaConfig)
	_spec.AddModifiers(sjsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sjsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduledjobsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sjsu.mutation.done = true
	return n, nil
}

// ScheduledJobSettingUpdateOne is the builder for updating a single ScheduledJobSetting entity.
type ScheduledJobSettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScheduledJobSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sjsuo *ScheduledJobSettingUpdateOne) SetUpdatedAt(t time.Time) *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.SetUpdatedAt(t)
	return sjsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sjsuo *ScheduledJobSettingUpdateOne) ClearUpdatedAt() *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.ClearUpdatedAt()
	return sjsuo
}

// SetUpdatedBy sets the "updated_by" field.
func (sjsuo *ScheduledJobSettingUpdateOne) SetUpdatedBy(s string) *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.SetUpdatedBy(s)
	return sjsuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sjsuo *ScheduledJobSettingUpdateOne) SetNillableUpdatedBy(s *string) *ScheduledJobSettingUpdateOne {
	if s != nil {
		sjsuo.SetUpdatedBy(*s)
	}
	return sjsuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sjsuo *ScheduledJobSettingUpdateOne) ClearUpdatedBy() *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.ClearUpdatedBy()
	return sjsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (sjsuo *ScheduledJobSettingUpdateOne) SetDeletedAt(t time.Time) *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.SetDeletedAt(t)
	return sjsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sjsuo *ScheduledJobSettingUpdateOne) SetNillableDeletedAt(t *time.Time) *ScheduledJobSettingUpdateOne {
	if t != nil {
		sjsuo.SetDeletedAt(*t)
	}
	return sjsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sjsuo *ScheduledJobSettingUpdateOne) ClearDeletedAt() *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.ClearDeletedAt()
	return sjsuo
}

// SetDeletedBy sets the "deleted_by" field.
func (sjsuo *ScheduledJobSettingUpdateOne) SetDeletedBy(s string) *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.SetDeletedBy(s)
	return sjsuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sjsuo *ScheduledJobSettingUpdateOne) SetNillableDeletedBy(s *string) *ScheduledJobSettingUpdateOne {
	if s != nil {
		sjsuo.SetDeletedBy(*s)
	}
	return sjsuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (sjsuo *ScheduledJobSettingUpdateOne) ClearDeletedBy() *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.ClearDeletedBy()
	return sjsuo
}

// SetTags sets the "tags" field.
func (sjsuo *ScheduledJobSettingUpdateOne) SetTags(s []string) *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.SetTags(s)
	return sjsuo
}

// AppendTags appends s to the "tags" field.
func (sjsuo *ScheduledJobSettingUpdateOne) AppendTags(s []string) *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.AppendTags(s)
	return sjsuo
}

// ClearTags clears the value of the "tags" field.
func (sjsuo *ScheduledJobSettingUpdateOne) ClearTags() *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.ClearTags()
	return sjsuo
}

// SetScheduledJobID sets the "scheduled_job_id" field.
func (sjsuo *ScheduledJobSettingUpdateOne) SetScheduledJobID(s string) *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.SetScheduledJobID(s)
	return sjsuo
}

// SetNillableScheduledJobID sets the "scheduled_job_id" field if the given value is not nil.
func (sjsuo *ScheduledJobSettingUpdateOne) SetNillableScheduledJobID(s *string) *ScheduledJobSettingUpdateOne {
	if s != nil {
		sjsuo.SetScheduledJobID(*s)
	}
	return sjsuo
}

// ClearScheduledJobID clears the value of the "scheduled_job_id" field.
func (sjsuo *ScheduledJobSettingUpdateOne) ClearScheduledJobID() *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.ClearScheduledJobID()
	return sjsuo
}

// SetConfiguration sets the "configuration" field.
func (sjsuo *ScheduledJobSettingUpdateOne) SetConfiguration(mc models.JobConfiguration) *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.SetConfiguration(mc)
	return sjsuo
}

// SetNillableConfiguration sets the "configuration" field if the given value is not nil.
func (sjsuo *ScheduledJobSettingUpdateOne) SetNillableConfiguration(mc *models.JobConfiguration) *ScheduledJobSettingUpdateOne {
	if mc != nil {
		sjsuo.SetConfiguration(*mc)
	}
	return sjsuo
}

// SetCadence sets the "cadence" field.
func (sjsuo *ScheduledJobSettingUpdateOne) SetCadence(mc models.JobCadence) *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.SetCadence(mc)
	return sjsuo
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (sjsuo *ScheduledJobSettingUpdateOne) SetNillableCadence(mc *models.JobCadence) *ScheduledJobSettingUpdateOne {
	if mc != nil {
		sjsuo.SetCadence(*mc)
	}
	return sjsuo
}

// ClearCadence clears the value of the "cadence" field.
func (sjsuo *ScheduledJobSettingUpdateOne) ClearCadence() *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.ClearCadence()
	return sjsuo
}

// SetCron sets the "cron" field.
func (sjsuo *ScheduledJobSettingUpdateOne) SetCron(s string) *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.SetCron(s)
	return sjsuo
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (sjsuo *ScheduledJobSettingUpdateOne) SetNillableCron(s *string) *ScheduledJobSettingUpdateOne {
	if s != nil {
		sjsuo.SetCron(*s)
	}
	return sjsuo
}

// ClearCron clears the value of the "cron" field.
func (sjsuo *ScheduledJobSettingUpdateOne) ClearCron() *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.ClearCron()
	return sjsuo
}

// SetScheduledJob sets the "scheduled_job" edge to the ScheduledJob entity.
func (sjsuo *ScheduledJobSettingUpdateOne) SetScheduledJob(s *ScheduledJob) *ScheduledJobSettingUpdateOne {
	return sjsuo.SetScheduledJobID(s.ID)
}

// Mutation returns the ScheduledJobSettingMutation object of the builder.
func (sjsuo *ScheduledJobSettingUpdateOne) Mutation() *ScheduledJobSettingMutation {
	return sjsuo.mutation
}

// ClearScheduledJob clears the "scheduled_job" edge to the ScheduledJob entity.
func (sjsuo *ScheduledJobSettingUpdateOne) ClearScheduledJob() *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.ClearScheduledJob()
	return sjsuo
}

// Where appends a list predicates to the ScheduledJobSettingUpdate builder.
func (sjsuo *ScheduledJobSettingUpdateOne) Where(ps ...predicate.ScheduledJobSetting) *ScheduledJobSettingUpdateOne {
	sjsuo.mutation.Where(ps...)
	return sjsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sjsuo *ScheduledJobSettingUpdateOne) Select(field string, fields ...string) *ScheduledJobSettingUpdateOne {
	sjsuo.fields = append([]string{field}, fields...)
	return sjsuo
}

// Save executes the query and returns the updated ScheduledJobSetting entity.
func (sjsuo *ScheduledJobSettingUpdateOne) Save(ctx context.Context) (*ScheduledJobSetting, error) {
	if err := sjsuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sjsuo.sqlSave, sjsuo.mutation, sjsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sjsuo *ScheduledJobSettingUpdateOne) SaveX(ctx context.Context) *ScheduledJobSetting {
	node, err := sjsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sjsuo *ScheduledJobSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := sjsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjsuo *ScheduledJobSettingUpdateOne) ExecX(ctx context.Context) {
	if err := sjsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjsuo *ScheduledJobSettingUpdateOne) defaults() error {
	if _, ok := sjsuo.mutation.UpdatedAt(); !ok && !sjsuo.mutation.UpdatedAtCleared() {
		if scheduledjobsetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scheduledjobsetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scheduledjobsetting.UpdateDefaultUpdatedAt()
		sjsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sjsuo *ScheduledJobSettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScheduledJobSettingUpdateOne {
	sjsuo.modifiers = append(sjsuo.modifiers, modifiers...)
	return sjsuo
}

func (sjsuo *ScheduledJobSettingUpdateOne) sqlSave(ctx context.Context) (_node *ScheduledJobSetting, err error) {
	_spec := sqlgraph.NewUpdateSpec(scheduledjobsetting.Table, scheduledjobsetting.Columns, sqlgraph.NewFieldSpec(scheduledjobsetting.FieldID, field.TypeString))
	id, ok := sjsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ScheduledJobSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sjsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scheduledjobsetting.FieldID)
		for _, f := range fields {
			if !scheduledjobsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != scheduledjobsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sjsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sjsuo.mutation.CreatedAtCleared() {
		_spec.ClearField(scheduledjobsetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sjsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledjobsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if sjsuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(scheduledjobsetting.FieldUpdatedAt, field.TypeTime)
	}
	if sjsuo.mutation.CreatedByCleared() {
		_spec.ClearField(scheduledjobsetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sjsuo.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledjobsetting.FieldUpdatedBy, field.TypeString, value)
	}
	if sjsuo.mutation.UpdatedByCleared() {
		_spec.ClearField(scheduledjobsetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := sjsuo.mutation.DeletedAt(); ok {
		_spec.SetField(scheduledjobsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if sjsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(scheduledjobsetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sjsuo.mutation.DeletedBy(); ok {
		_spec.SetField(scheduledjobsetting.FieldDeletedBy, field.TypeString, value)
	}
	if sjsuo.mutation.DeletedByCleared() {
		_spec.ClearField(scheduledjobsetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := sjsuo.mutation.Tags(); ok {
		_spec.SetField(scheduledjobsetting.FieldTags, field.TypeJSON, value)
	}
	if value, ok := sjsuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scheduledjobsetting.FieldTags, value)
		})
	}
	if sjsuo.mutation.TagsCleared() {
		_spec.ClearField(scheduledjobsetting.FieldTags, field.TypeJSON)
	}
	if value, ok := sjsuo.mutation.Configuration(); ok {
		_spec.SetField(scheduledjobsetting.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := sjsuo.mutation.Cadence(); ok {
		_spec.SetField(scheduledjobsetting.FieldCadence, field.TypeJSON, value)
	}
	if sjsuo.mutation.CadenceCleared() {
		_spec.ClearField(scheduledjobsetting.FieldCadence, field.TypeJSON)
	}
	if value, ok := sjsuo.mutation.Cron(); ok {
		_spec.SetField(scheduledjobsetting.FieldCron, field.TypeString, value)
	}
	if sjsuo.mutation.CronCleared() {
		_spec.ClearField(scheduledjobsetting.FieldCron, field.TypeString)
	}
	if sjsuo.mutation.ScheduledJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   scheduledjobsetting.ScheduledJobTable,
			Columns: []string{scheduledjobsetting.ScheduledJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjsuo.schemaConfig.ScheduledJobSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjsuo.mutation.ScheduledJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   scheduledjobsetting.ScheduledJobTable,
			Columns: []string{scheduledjobsetting.ScheduledJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjsuo.schemaConfig.ScheduledJobSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = sjsuo.schemaConfig.ScheduledJobSetting
	ctx = internal.NewSchemaConfigContext(ctx, sjsuo.schemaConfig)
	_spec.AddModifiers(sjsuo.modifiers...)
	_node = &ScheduledJobSetting{config: sjsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sjsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduledjobsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sjsuo.mutation.done = true
	return _node, nil
}
