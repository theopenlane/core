// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/assethistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// AssetHistoryUpdate is the builder for updating AssetHistory entities.
type AssetHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetHistoryUpdate builder.
func (ahu *AssetHistoryUpdate) Where(ps ...predicate.AssetHistory) *AssetHistoryUpdate {
	ahu.mutation.Where(ps...)
	return ahu
}

// SetUpdatedAt sets the "updated_at" field.
func (ahu *AssetHistoryUpdate) SetUpdatedAt(t time.Time) *AssetHistoryUpdate {
	ahu.mutation.SetUpdatedAt(t)
	return ahu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ahu *AssetHistoryUpdate) ClearUpdatedAt() *AssetHistoryUpdate {
	ahu.mutation.ClearUpdatedAt()
	return ahu
}

// SetUpdatedBy sets the "updated_by" field.
func (ahu *AssetHistoryUpdate) SetUpdatedBy(s string) *AssetHistoryUpdate {
	ahu.mutation.SetUpdatedBy(s)
	return ahu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableUpdatedBy(s *string) *AssetHistoryUpdate {
	if s != nil {
		ahu.SetUpdatedBy(*s)
	}
	return ahu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ahu *AssetHistoryUpdate) ClearUpdatedBy() *AssetHistoryUpdate {
	ahu.mutation.ClearUpdatedBy()
	return ahu
}

// SetDeletedAt sets the "deleted_at" field.
func (ahu *AssetHistoryUpdate) SetDeletedAt(t time.Time) *AssetHistoryUpdate {
	ahu.mutation.SetDeletedAt(t)
	return ahu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableDeletedAt(t *time.Time) *AssetHistoryUpdate {
	if t != nil {
		ahu.SetDeletedAt(*t)
	}
	return ahu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ahu *AssetHistoryUpdate) ClearDeletedAt() *AssetHistoryUpdate {
	ahu.mutation.ClearDeletedAt()
	return ahu
}

// SetDeletedBy sets the "deleted_by" field.
func (ahu *AssetHistoryUpdate) SetDeletedBy(s string) *AssetHistoryUpdate {
	ahu.mutation.SetDeletedBy(s)
	return ahu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableDeletedBy(s *string) *AssetHistoryUpdate {
	if s != nil {
		ahu.SetDeletedBy(*s)
	}
	return ahu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ahu *AssetHistoryUpdate) ClearDeletedBy() *AssetHistoryUpdate {
	ahu.mutation.ClearDeletedBy()
	return ahu
}

// SetTags sets the "tags" field.
func (ahu *AssetHistoryUpdate) SetTags(s []string) *AssetHistoryUpdate {
	ahu.mutation.SetTags(s)
	return ahu
}

// AppendTags appends s to the "tags" field.
func (ahu *AssetHistoryUpdate) AppendTags(s []string) *AssetHistoryUpdate {
	ahu.mutation.AppendTags(s)
	return ahu
}

// ClearTags clears the value of the "tags" field.
func (ahu *AssetHistoryUpdate) ClearTags() *AssetHistoryUpdate {
	ahu.mutation.ClearTags()
	return ahu
}

// SetOwnerID sets the "owner_id" field.
func (ahu *AssetHistoryUpdate) SetOwnerID(s string) *AssetHistoryUpdate {
	ahu.mutation.SetOwnerID(s)
	return ahu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableOwnerID(s *string) *AssetHistoryUpdate {
	if s != nil {
		ahu.SetOwnerID(*s)
	}
	return ahu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (ahu *AssetHistoryUpdate) ClearOwnerID() *AssetHistoryUpdate {
	ahu.mutation.ClearOwnerID()
	return ahu
}

// SetAssetType sets the "asset_type" field.
func (ahu *AssetHistoryUpdate) SetAssetType(et enums.AssetType) *AssetHistoryUpdate {
	ahu.mutation.SetAssetType(et)
	return ahu
}

// SetNillableAssetType sets the "asset_type" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableAssetType(et *enums.AssetType) *AssetHistoryUpdate {
	if et != nil {
		ahu.SetAssetType(*et)
	}
	return ahu
}

// SetName sets the "name" field.
func (ahu *AssetHistoryUpdate) SetName(s string) *AssetHistoryUpdate {
	ahu.mutation.SetName(s)
	return ahu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableName(s *string) *AssetHistoryUpdate {
	if s != nil {
		ahu.SetName(*s)
	}
	return ahu
}

// SetDescription sets the "description" field.
func (ahu *AssetHistoryUpdate) SetDescription(s string) *AssetHistoryUpdate {
	ahu.mutation.SetDescription(s)
	return ahu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableDescription(s *string) *AssetHistoryUpdate {
	if s != nil {
		ahu.SetDescription(*s)
	}
	return ahu
}

// ClearDescription clears the value of the "description" field.
func (ahu *AssetHistoryUpdate) ClearDescription() *AssetHistoryUpdate {
	ahu.mutation.ClearDescription()
	return ahu
}

// SetIdentifier sets the "identifier" field.
func (ahu *AssetHistoryUpdate) SetIdentifier(s string) *AssetHistoryUpdate {
	ahu.mutation.SetIdentifier(s)
	return ahu
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableIdentifier(s *string) *AssetHistoryUpdate {
	if s != nil {
		ahu.SetIdentifier(*s)
	}
	return ahu
}

// ClearIdentifier clears the value of the "identifier" field.
func (ahu *AssetHistoryUpdate) ClearIdentifier() *AssetHistoryUpdate {
	ahu.mutation.ClearIdentifier()
	return ahu
}

// SetWebsite sets the "website" field.
func (ahu *AssetHistoryUpdate) SetWebsite(s string) *AssetHistoryUpdate {
	ahu.mutation.SetWebsite(s)
	return ahu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableWebsite(s *string) *AssetHistoryUpdate {
	if s != nil {
		ahu.SetWebsite(*s)
	}
	return ahu
}

// ClearWebsite clears the value of the "website" field.
func (ahu *AssetHistoryUpdate) ClearWebsite() *AssetHistoryUpdate {
	ahu.mutation.ClearWebsite()
	return ahu
}

// SetCpe sets the "cpe" field.
func (ahu *AssetHistoryUpdate) SetCpe(s string) *AssetHistoryUpdate {
	ahu.mutation.SetCpe(s)
	return ahu
}

// SetNillableCpe sets the "cpe" field if the given value is not nil.
func (ahu *AssetHistoryUpdate) SetNillableCpe(s *string) *AssetHistoryUpdate {
	if s != nil {
		ahu.SetCpe(*s)
	}
	return ahu
}

// ClearCpe clears the value of the "cpe" field.
func (ahu *AssetHistoryUpdate) ClearCpe() *AssetHistoryUpdate {
	ahu.mutation.ClearCpe()
	return ahu
}

// SetCategories sets the "categories" field.
func (ahu *AssetHistoryUpdate) SetCategories(s []string) *AssetHistoryUpdate {
	ahu.mutation.SetCategories(s)
	return ahu
}

// AppendCategories appends s to the "categories" field.
func (ahu *AssetHistoryUpdate) AppendCategories(s []string) *AssetHistoryUpdate {
	ahu.mutation.AppendCategories(s)
	return ahu
}

// ClearCategories clears the value of the "categories" field.
func (ahu *AssetHistoryUpdate) ClearCategories() *AssetHistoryUpdate {
	ahu.mutation.ClearCategories()
	return ahu
}

// Mutation returns the AssetHistoryMutation object of the builder.
func (ahu *AssetHistoryUpdate) Mutation() *AssetHistoryMutation {
	return ahu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ahu *AssetHistoryUpdate) Save(ctx context.Context) (int, error) {
	ahu.defaults()
	return withHooks(ctx, ahu.sqlSave, ahu.mutation, ahu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahu *AssetHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ahu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ahu *AssetHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ahu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahu *AssetHistoryUpdate) ExecX(ctx context.Context) {
	if err := ahu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahu *AssetHistoryUpdate) defaults() {
	if _, ok := ahu.mutation.UpdatedAt(); !ok && !ahu.mutation.UpdatedAtCleared() {
		v := assethistory.UpdateDefaultUpdatedAt()
		ahu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ahu *AssetHistoryUpdate) check() error {
	if v, ok := ahu.mutation.AssetType(); ok {
		if err := assethistory.AssetTypeValidator(v); err != nil {
			return &ValidationError{Name: "asset_type", err: fmt.Errorf(`generated: validator failed for field "AssetHistory.asset_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ahu *AssetHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetHistoryUpdate {
	ahu.modifiers = append(ahu.modifiers, modifiers...)
	return ahu
}

func (ahu *AssetHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ahu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(assethistory.Table, assethistory.Columns, sqlgraph.NewFieldSpec(assethistory.FieldID, field.TypeString))
	if ps := ahu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ahu.mutation.RefCleared() {
		_spec.ClearField(assethistory.FieldRef, field.TypeString)
	}
	if ahu.mutation.CreatedAtCleared() {
		_spec.ClearField(assethistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ahu.mutation.UpdatedAt(); ok {
		_spec.SetField(assethistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if ahu.mutation.UpdatedAtCleared() {
		_spec.ClearField(assethistory.FieldUpdatedAt, field.TypeTime)
	}
	if ahu.mutation.CreatedByCleared() {
		_spec.ClearField(assethistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ahu.mutation.UpdatedBy(); ok {
		_spec.SetField(assethistory.FieldUpdatedBy, field.TypeString, value)
	}
	if ahu.mutation.UpdatedByCleared() {
		_spec.ClearField(assethistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ahu.mutation.DeletedAt(); ok {
		_spec.SetField(assethistory.FieldDeletedAt, field.TypeTime, value)
	}
	if ahu.mutation.DeletedAtCleared() {
		_spec.ClearField(assethistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ahu.mutation.DeletedBy(); ok {
		_spec.SetField(assethistory.FieldDeletedBy, field.TypeString, value)
	}
	if ahu.mutation.DeletedByCleared() {
		_spec.ClearField(assethistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ahu.mutation.Tags(); ok {
		_spec.SetField(assethistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ahu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assethistory.FieldTags, value)
		})
	}
	if ahu.mutation.TagsCleared() {
		_spec.ClearField(assethistory.FieldTags, field.TypeJSON)
	}
	if value, ok := ahu.mutation.OwnerID(); ok {
		_spec.SetField(assethistory.FieldOwnerID, field.TypeString, value)
	}
	if ahu.mutation.OwnerIDCleared() {
		_spec.ClearField(assethistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := ahu.mutation.AssetType(); ok {
		_spec.SetField(assethistory.FieldAssetType, field.TypeEnum, value)
	}
	if value, ok := ahu.mutation.Name(); ok {
		_spec.SetField(assethistory.FieldName, field.TypeString, value)
	}
	if value, ok := ahu.mutation.Description(); ok {
		_spec.SetField(assethistory.FieldDescription, field.TypeString, value)
	}
	if ahu.mutation.DescriptionCleared() {
		_spec.ClearField(assethistory.FieldDescription, field.TypeString)
	}
	if value, ok := ahu.mutation.Identifier(); ok {
		_spec.SetField(assethistory.FieldIdentifier, field.TypeString, value)
	}
	if ahu.mutation.IdentifierCleared() {
		_spec.ClearField(assethistory.FieldIdentifier, field.TypeString)
	}
	if value, ok := ahu.mutation.Website(); ok {
		_spec.SetField(assethistory.FieldWebsite, field.TypeString, value)
	}
	if ahu.mutation.WebsiteCleared() {
		_spec.ClearField(assethistory.FieldWebsite, field.TypeString)
	}
	if value, ok := ahu.mutation.Cpe(); ok {
		_spec.SetField(assethistory.FieldCpe, field.TypeString, value)
	}
	if ahu.mutation.CpeCleared() {
		_spec.ClearField(assethistory.FieldCpe, field.TypeString)
	}
	if value, ok := ahu.mutation.Categories(); ok {
		_spec.SetField(assethistory.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := ahu.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assethistory.FieldCategories, value)
		})
	}
	if ahu.mutation.CategoriesCleared() {
		_spec.ClearField(assethistory.FieldCategories, field.TypeJSON)
	}
	_spec.Node.Schema = ahu.schemaConfig.AssetHistory
	ctx = internal.NewSchemaConfigContext(ctx, ahu.schemaConfig)
	_spec.AddModifiers(ahu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ahu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assethistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ahu.mutation.done = true
	return n, nil
}

// AssetHistoryUpdateOne is the builder for updating a single AssetHistory entity.
type AssetHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ahuo *AssetHistoryUpdateOne) SetUpdatedAt(t time.Time) *AssetHistoryUpdateOne {
	ahuo.mutation.SetUpdatedAt(t)
	return ahuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ahuo *AssetHistoryUpdateOne) ClearUpdatedAt() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearUpdatedAt()
	return ahuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ahuo *AssetHistoryUpdateOne) SetUpdatedBy(s string) *AssetHistoryUpdateOne {
	ahuo.mutation.SetUpdatedBy(s)
	return ahuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableUpdatedBy(s *string) *AssetHistoryUpdateOne {
	if s != nil {
		ahuo.SetUpdatedBy(*s)
	}
	return ahuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ahuo *AssetHistoryUpdateOne) ClearUpdatedBy() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearUpdatedBy()
	return ahuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ahuo *AssetHistoryUpdateOne) SetDeletedAt(t time.Time) *AssetHistoryUpdateOne {
	ahuo.mutation.SetDeletedAt(t)
	return ahuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetHistoryUpdateOne {
	if t != nil {
		ahuo.SetDeletedAt(*t)
	}
	return ahuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ahuo *AssetHistoryUpdateOne) ClearDeletedAt() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearDeletedAt()
	return ahuo
}

// SetDeletedBy sets the "deleted_by" field.
func (ahuo *AssetHistoryUpdateOne) SetDeletedBy(s string) *AssetHistoryUpdateOne {
	ahuo.mutation.SetDeletedBy(s)
	return ahuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableDeletedBy(s *string) *AssetHistoryUpdateOne {
	if s != nil {
		ahuo.SetDeletedBy(*s)
	}
	return ahuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ahuo *AssetHistoryUpdateOne) ClearDeletedBy() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearDeletedBy()
	return ahuo
}

// SetTags sets the "tags" field.
func (ahuo *AssetHistoryUpdateOne) SetTags(s []string) *AssetHistoryUpdateOne {
	ahuo.mutation.SetTags(s)
	return ahuo
}

// AppendTags appends s to the "tags" field.
func (ahuo *AssetHistoryUpdateOne) AppendTags(s []string) *AssetHistoryUpdateOne {
	ahuo.mutation.AppendTags(s)
	return ahuo
}

// ClearTags clears the value of the "tags" field.
func (ahuo *AssetHistoryUpdateOne) ClearTags() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearTags()
	return ahuo
}

// SetOwnerID sets the "owner_id" field.
func (ahuo *AssetHistoryUpdateOne) SetOwnerID(s string) *AssetHistoryUpdateOne {
	ahuo.mutation.SetOwnerID(s)
	return ahuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableOwnerID(s *string) *AssetHistoryUpdateOne {
	if s != nil {
		ahuo.SetOwnerID(*s)
	}
	return ahuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (ahuo *AssetHistoryUpdateOne) ClearOwnerID() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearOwnerID()
	return ahuo
}

// SetAssetType sets the "asset_type" field.
func (ahuo *AssetHistoryUpdateOne) SetAssetType(et enums.AssetType) *AssetHistoryUpdateOne {
	ahuo.mutation.SetAssetType(et)
	return ahuo
}

// SetNillableAssetType sets the "asset_type" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableAssetType(et *enums.AssetType) *AssetHistoryUpdateOne {
	if et != nil {
		ahuo.SetAssetType(*et)
	}
	return ahuo
}

// SetName sets the "name" field.
func (ahuo *AssetHistoryUpdateOne) SetName(s string) *AssetHistoryUpdateOne {
	ahuo.mutation.SetName(s)
	return ahuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableName(s *string) *AssetHistoryUpdateOne {
	if s != nil {
		ahuo.SetName(*s)
	}
	return ahuo
}

// SetDescription sets the "description" field.
func (ahuo *AssetHistoryUpdateOne) SetDescription(s string) *AssetHistoryUpdateOne {
	ahuo.mutation.SetDescription(s)
	return ahuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableDescription(s *string) *AssetHistoryUpdateOne {
	if s != nil {
		ahuo.SetDescription(*s)
	}
	return ahuo
}

// ClearDescription clears the value of the "description" field.
func (ahuo *AssetHistoryUpdateOne) ClearDescription() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearDescription()
	return ahuo
}

// SetIdentifier sets the "identifier" field.
func (ahuo *AssetHistoryUpdateOne) SetIdentifier(s string) *AssetHistoryUpdateOne {
	ahuo.mutation.SetIdentifier(s)
	return ahuo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableIdentifier(s *string) *AssetHistoryUpdateOne {
	if s != nil {
		ahuo.SetIdentifier(*s)
	}
	return ahuo
}

// ClearIdentifier clears the value of the "identifier" field.
func (ahuo *AssetHistoryUpdateOne) ClearIdentifier() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearIdentifier()
	return ahuo
}

// SetWebsite sets the "website" field.
func (ahuo *AssetHistoryUpdateOne) SetWebsite(s string) *AssetHistoryUpdateOne {
	ahuo.mutation.SetWebsite(s)
	return ahuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableWebsite(s *string) *AssetHistoryUpdateOne {
	if s != nil {
		ahuo.SetWebsite(*s)
	}
	return ahuo
}

// ClearWebsite clears the value of the "website" field.
func (ahuo *AssetHistoryUpdateOne) ClearWebsite() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearWebsite()
	return ahuo
}

// SetCpe sets the "cpe" field.
func (ahuo *AssetHistoryUpdateOne) SetCpe(s string) *AssetHistoryUpdateOne {
	ahuo.mutation.SetCpe(s)
	return ahuo
}

// SetNillableCpe sets the "cpe" field if the given value is not nil.
func (ahuo *AssetHistoryUpdateOne) SetNillableCpe(s *string) *AssetHistoryUpdateOne {
	if s != nil {
		ahuo.SetCpe(*s)
	}
	return ahuo
}

// ClearCpe clears the value of the "cpe" field.
func (ahuo *AssetHistoryUpdateOne) ClearCpe() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearCpe()
	return ahuo
}

// SetCategories sets the "categories" field.
func (ahuo *AssetHistoryUpdateOne) SetCategories(s []string) *AssetHistoryUpdateOne {
	ahuo.mutation.SetCategories(s)
	return ahuo
}

// AppendCategories appends s to the "categories" field.
func (ahuo *AssetHistoryUpdateOne) AppendCategories(s []string) *AssetHistoryUpdateOne {
	ahuo.mutation.AppendCategories(s)
	return ahuo
}

// ClearCategories clears the value of the "categories" field.
func (ahuo *AssetHistoryUpdateOne) ClearCategories() *AssetHistoryUpdateOne {
	ahuo.mutation.ClearCategories()
	return ahuo
}

// Mutation returns the AssetHistoryMutation object of the builder.
func (ahuo *AssetHistoryUpdateOne) Mutation() *AssetHistoryMutation {
	return ahuo.mutation
}

// Where appends a list predicates to the AssetHistoryUpdate builder.
func (ahuo *AssetHistoryUpdateOne) Where(ps ...predicate.AssetHistory) *AssetHistoryUpdateOne {
	ahuo.mutation.Where(ps...)
	return ahuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ahuo *AssetHistoryUpdateOne) Select(field string, fields ...string) *AssetHistoryUpdateOne {
	ahuo.fields = append([]string{field}, fields...)
	return ahuo
}

// Save executes the query and returns the updated AssetHistory entity.
func (ahuo *AssetHistoryUpdateOne) Save(ctx context.Context) (*AssetHistory, error) {
	ahuo.defaults()
	return withHooks(ctx, ahuo.sqlSave, ahuo.mutation, ahuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ahuo *AssetHistoryUpdateOne) SaveX(ctx context.Context) *AssetHistory {
	node, err := ahuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ahuo *AssetHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ahuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ahuo *AssetHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ahuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ahuo *AssetHistoryUpdateOne) defaults() {
	if _, ok := ahuo.mutation.UpdatedAt(); !ok && !ahuo.mutation.UpdatedAtCleared() {
		v := assethistory.UpdateDefaultUpdatedAt()
		ahuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ahuo *AssetHistoryUpdateOne) check() error {
	if v, ok := ahuo.mutation.AssetType(); ok {
		if err := assethistory.AssetTypeValidator(v); err != nil {
			return &ValidationError{Name: "asset_type", err: fmt.Errorf(`generated: validator failed for field "AssetHistory.asset_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ahuo *AssetHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetHistoryUpdateOne {
	ahuo.modifiers = append(ahuo.modifiers, modifiers...)
	return ahuo
}

func (ahuo *AssetHistoryUpdateOne) sqlSave(ctx context.Context) (_node *AssetHistory, err error) {
	if err := ahuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assethistory.Table, assethistory.Columns, sqlgraph.NewFieldSpec(assethistory.FieldID, field.TypeString))
	id, ok := ahuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AssetHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ahuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assethistory.FieldID)
		for _, f := range fields {
			if !assethistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != assethistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ahuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ahuo.mutation.RefCleared() {
		_spec.ClearField(assethistory.FieldRef, field.TypeString)
	}
	if ahuo.mutation.CreatedAtCleared() {
		_spec.ClearField(assethistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ahuo.mutation.UpdatedAt(); ok {
		_spec.SetField(assethistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if ahuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(assethistory.FieldUpdatedAt, field.TypeTime)
	}
	if ahuo.mutation.CreatedByCleared() {
		_spec.ClearField(assethistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ahuo.mutation.UpdatedBy(); ok {
		_spec.SetField(assethistory.FieldUpdatedBy, field.TypeString, value)
	}
	if ahuo.mutation.UpdatedByCleared() {
		_spec.ClearField(assethistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ahuo.mutation.DeletedAt(); ok {
		_spec.SetField(assethistory.FieldDeletedAt, field.TypeTime, value)
	}
	if ahuo.mutation.DeletedAtCleared() {
		_spec.ClearField(assethistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ahuo.mutation.DeletedBy(); ok {
		_spec.SetField(assethistory.FieldDeletedBy, field.TypeString, value)
	}
	if ahuo.mutation.DeletedByCleared() {
		_spec.ClearField(assethistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ahuo.mutation.Tags(); ok {
		_spec.SetField(assethistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ahuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assethistory.FieldTags, value)
		})
	}
	if ahuo.mutation.TagsCleared() {
		_spec.ClearField(assethistory.FieldTags, field.TypeJSON)
	}
	if value, ok := ahuo.mutation.OwnerID(); ok {
		_spec.SetField(assethistory.FieldOwnerID, field.TypeString, value)
	}
	if ahuo.mutation.OwnerIDCleared() {
		_spec.ClearField(assethistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := ahuo.mutation.AssetType(); ok {
		_spec.SetField(assethistory.FieldAssetType, field.TypeEnum, value)
	}
	if value, ok := ahuo.mutation.Name(); ok {
		_spec.SetField(assethistory.FieldName, field.TypeString, value)
	}
	if value, ok := ahuo.mutation.Description(); ok {
		_spec.SetField(assethistory.FieldDescription, field.TypeString, value)
	}
	if ahuo.mutation.DescriptionCleared() {
		_spec.ClearField(assethistory.FieldDescription, field.TypeString)
	}
	if value, ok := ahuo.mutation.Identifier(); ok {
		_spec.SetField(assethistory.FieldIdentifier, field.TypeString, value)
	}
	if ahuo.mutation.IdentifierCleared() {
		_spec.ClearField(assethistory.FieldIdentifier, field.TypeString)
	}
	if value, ok := ahuo.mutation.Website(); ok {
		_spec.SetField(assethistory.FieldWebsite, field.TypeString, value)
	}
	if ahuo.mutation.WebsiteCleared() {
		_spec.ClearField(assethistory.FieldWebsite, field.TypeString)
	}
	if value, ok := ahuo.mutation.Cpe(); ok {
		_spec.SetField(assethistory.FieldCpe, field.TypeString, value)
	}
	if ahuo.mutation.CpeCleared() {
		_spec.ClearField(assethistory.FieldCpe, field.TypeString)
	}
	if value, ok := ahuo.mutation.Categories(); ok {
		_spec.SetField(assethistory.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := ahuo.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assethistory.FieldCategories, value)
		})
	}
	if ahuo.mutation.CategoriesCleared() {
		_spec.ClearField(assethistory.FieldCategories, field.TypeJSON)
	}
	_spec.Node.Schema = ahuo.schemaConfig.AssetHistory
	ctx = internal.NewSchemaConfigContext(ctx, ahuo.schemaConfig)
	_spec.AddModifiers(ahuo.modifiers...)
	_node = &AssetHistory{config: ahuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ahuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assethistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ahuo.mutation.done = true
	return _node, nil
}
