// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/filedownloadtoken"
	"github.com/theopenlane/core/internal/ent/generated/user"
)

// FileDownloadToken is the model entity for the FileDownloadToken schema.
type FileDownloadToken struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// The user id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the reset token sent to the user via email which should only be provided to the /forgot-password endpoint + handler
	Token string `json:"token,omitempty"`
	// the ttl of the reset token which defaults to 15 minutes
	TTL *time.Time `json:"ttl,omitempty"`
	// the email used as input to generate the reset token; this is used to verify that the token when regenerated within the server matches the token
	UserID *string `json:"user_id,omitempty"`
	// the email used as input to generate the reset token; this is used to verify that the token when regenerated within the server matches the token
	OrganizationID *string `json:"organization_id,omitempty"`
	// the email used as input to generate the reset token; this is used to verify that the token when regenerated within the server matches the token
	FileID *string `json:"file_id,omitempty"`
	// the comparison secret to verify the token's signature
	Secret *[]byte `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FileDownloadTokenQuery when eager-loading is set.
	Edges        FileDownloadTokenEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FileDownloadTokenEdges holds the relations/edges for other nodes in the graph.
type FileDownloadTokenEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FileDownloadTokenEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileDownloadToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filedownloadtoken.FieldSecret:
			values[i] = new([]byte)
		case filedownloadtoken.FieldID, filedownloadtoken.FieldCreatedBy, filedownloadtoken.FieldUpdatedBy, filedownloadtoken.FieldDeletedBy, filedownloadtoken.FieldOwnerID, filedownloadtoken.FieldToken, filedownloadtoken.FieldUserID, filedownloadtoken.FieldOrganizationID, filedownloadtoken.FieldFileID:
			values[i] = new(sql.NullString)
		case filedownloadtoken.FieldCreatedAt, filedownloadtoken.FieldUpdatedAt, filedownloadtoken.FieldDeletedAt, filedownloadtoken.FieldTTL:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileDownloadToken fields.
func (_m *FileDownloadToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filedownloadtoken.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case filedownloadtoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case filedownloadtoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case filedownloadtoken.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case filedownloadtoken.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case filedownloadtoken.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case filedownloadtoken.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case filedownloadtoken.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case filedownloadtoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				_m.Token = value.String
			}
		case filedownloadtoken.FieldTTL:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ttl", values[i])
			} else if value.Valid {
				_m.TTL = new(time.Time)
				*_m.TTL = value.Time
			}
		case filedownloadtoken.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = new(string)
				*_m.UserID = value.String
			}
		case filedownloadtoken.FieldOrganizationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value.Valid {
				_m.OrganizationID = new(string)
				*_m.OrganizationID = value.String
			}
		case filedownloadtoken.FieldFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_id", values[i])
			} else if value.Valid {
				_m.FileID = new(string)
				*_m.FileID = value.String
			}
		case filedownloadtoken.FieldSecret:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value != nil {
				_m.Secret = value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileDownloadToken.
// This includes values selected through modifiers, order, etc.
func (_m *FileDownloadToken) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the FileDownloadToken entity.
func (_m *FileDownloadToken) QueryOwner() *UserQuery {
	return NewFileDownloadTokenClient(_m.config).QueryOwner(_m)
}

// Update returns a builder for updating this FileDownloadToken.
// Note that you need to call FileDownloadToken.Unwrap() before calling this method if this FileDownloadToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *FileDownloadToken) Update() *FileDownloadTokenUpdateOne {
	return NewFileDownloadTokenClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the FileDownloadToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *FileDownloadToken) Unwrap() *FileDownloadToken {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: FileDownloadToken is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *FileDownloadToken) String() string {
	var builder strings.Builder
	builder.WriteString("FileDownloadToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(_m.Token)
	builder.WriteString(", ")
	if v := _m.TTL; v != nil {
		builder.WriteString("ttl=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := _m.UserID; v != nil {
		builder.WriteString("user_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.OrganizationID; v != nil {
		builder.WriteString("organization_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.FileID; v != nil {
		builder.WriteString("file_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("secret=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// FileDownloadTokens is a parsable slice of FileDownloadToken.
type FileDownloadTokens []*FileDownloadToken
