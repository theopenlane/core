// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/webauthn"
)

// WebauthnUpdate is the builder for updating Webauthn entities.
type WebauthnUpdate struct {
	config
	hooks     []Hook
	mutation  *WebauthnMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WebauthnUpdate builder.
func (wu *WebauthnUpdate) Where(ps ...predicate.Webauthn) *WebauthnUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WebauthnUpdate) SetUpdatedAt(t time.Time) *WebauthnUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (wu *WebauthnUpdate) ClearUpdatedAt() *WebauthnUpdate {
	wu.mutation.ClearUpdatedAt()
	return wu
}

// SetUpdatedBy sets the "updated_by" field.
func (wu *WebauthnUpdate) SetUpdatedBy(s string) *WebauthnUpdate {
	wu.mutation.SetUpdatedBy(s)
	return wu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wu *WebauthnUpdate) SetNillableUpdatedBy(s *string) *WebauthnUpdate {
	if s != nil {
		wu.SetUpdatedBy(*s)
	}
	return wu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (wu *WebauthnUpdate) ClearUpdatedBy() *WebauthnUpdate {
	wu.mutation.ClearUpdatedBy()
	return wu
}

// SetTags sets the "tags" field.
func (wu *WebauthnUpdate) SetTags(s []string) *WebauthnUpdate {
	wu.mutation.SetTags(s)
	return wu
}

// AppendTags appends s to the "tags" field.
func (wu *WebauthnUpdate) AppendTags(s []string) *WebauthnUpdate {
	wu.mutation.AppendTags(s)
	return wu
}

// ClearTags clears the value of the "tags" field.
func (wu *WebauthnUpdate) ClearTags() *WebauthnUpdate {
	wu.mutation.ClearTags()
	return wu
}

// SetOwnerID sets the "owner_id" field.
func (wu *WebauthnUpdate) SetOwnerID(s string) *WebauthnUpdate {
	wu.mutation.SetOwnerID(s)
	return wu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (wu *WebauthnUpdate) SetNillableOwnerID(s *string) *WebauthnUpdate {
	if s != nil {
		wu.SetOwnerID(*s)
	}
	return wu
}

// SetCredentialID sets the "credential_id" field.
func (wu *WebauthnUpdate) SetCredentialID(b []byte) *WebauthnUpdate {
	wu.mutation.SetCredentialID(b)
	return wu
}

// ClearCredentialID clears the value of the "credential_id" field.
func (wu *WebauthnUpdate) ClearCredentialID() *WebauthnUpdate {
	wu.mutation.ClearCredentialID()
	return wu
}

// SetPublicKey sets the "public_key" field.
func (wu *WebauthnUpdate) SetPublicKey(b []byte) *WebauthnUpdate {
	wu.mutation.SetPublicKey(b)
	return wu
}

// ClearPublicKey clears the value of the "public_key" field.
func (wu *WebauthnUpdate) ClearPublicKey() *WebauthnUpdate {
	wu.mutation.ClearPublicKey()
	return wu
}

// SetAttestationType sets the "attestation_type" field.
func (wu *WebauthnUpdate) SetAttestationType(s string) *WebauthnUpdate {
	wu.mutation.SetAttestationType(s)
	return wu
}

// SetNillableAttestationType sets the "attestation_type" field if the given value is not nil.
func (wu *WebauthnUpdate) SetNillableAttestationType(s *string) *WebauthnUpdate {
	if s != nil {
		wu.SetAttestationType(*s)
	}
	return wu
}

// ClearAttestationType clears the value of the "attestation_type" field.
func (wu *WebauthnUpdate) ClearAttestationType() *WebauthnUpdate {
	wu.mutation.ClearAttestationType()
	return wu
}

// SetSignCount sets the "sign_count" field.
func (wu *WebauthnUpdate) SetSignCount(i int32) *WebauthnUpdate {
	wu.mutation.ResetSignCount()
	wu.mutation.SetSignCount(i)
	return wu
}

// SetNillableSignCount sets the "sign_count" field if the given value is not nil.
func (wu *WebauthnUpdate) SetNillableSignCount(i *int32) *WebauthnUpdate {
	if i != nil {
		wu.SetSignCount(*i)
	}
	return wu
}

// AddSignCount adds i to the "sign_count" field.
func (wu *WebauthnUpdate) AddSignCount(i int32) *WebauthnUpdate {
	wu.mutation.AddSignCount(i)
	return wu
}

// SetTransports sets the "transports" field.
func (wu *WebauthnUpdate) SetTransports(s []string) *WebauthnUpdate {
	wu.mutation.SetTransports(s)
	return wu
}

// AppendTransports appends s to the "transports" field.
func (wu *WebauthnUpdate) AppendTransports(s []string) *WebauthnUpdate {
	wu.mutation.AppendTransports(s)
	return wu
}

// SetBackupState sets the "backup_state" field.
func (wu *WebauthnUpdate) SetBackupState(b bool) *WebauthnUpdate {
	wu.mutation.SetBackupState(b)
	return wu
}

// SetNillableBackupState sets the "backup_state" field if the given value is not nil.
func (wu *WebauthnUpdate) SetNillableBackupState(b *bool) *WebauthnUpdate {
	if b != nil {
		wu.SetBackupState(*b)
	}
	return wu
}

// SetUserPresent sets the "user_present" field.
func (wu *WebauthnUpdate) SetUserPresent(b bool) *WebauthnUpdate {
	wu.mutation.SetUserPresent(b)
	return wu
}

// SetNillableUserPresent sets the "user_present" field if the given value is not nil.
func (wu *WebauthnUpdate) SetNillableUserPresent(b *bool) *WebauthnUpdate {
	if b != nil {
		wu.SetUserPresent(*b)
	}
	return wu
}

// SetUserVerified sets the "user_verified" field.
func (wu *WebauthnUpdate) SetUserVerified(b bool) *WebauthnUpdate {
	wu.mutation.SetUserVerified(b)
	return wu
}

// SetNillableUserVerified sets the "user_verified" field if the given value is not nil.
func (wu *WebauthnUpdate) SetNillableUserVerified(b *bool) *WebauthnUpdate {
	if b != nil {
		wu.SetUserVerified(*b)
	}
	return wu
}

// SetOwner sets the "owner" edge to the User entity.
func (wu *WebauthnUpdate) SetOwner(u *User) *WebauthnUpdate {
	return wu.SetOwnerID(u.ID)
}

// Mutation returns the WebauthnMutation object of the builder.
func (wu *WebauthnUpdate) Mutation() *WebauthnMutation {
	return wu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (wu *WebauthnUpdate) ClearOwner() *WebauthnUpdate {
	wu.mutation.ClearOwner()
	return wu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WebauthnUpdate) Save(ctx context.Context) (int, error) {
	if err := wu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WebauthnUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WebauthnUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WebauthnUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WebauthnUpdate) defaults() error {
	if _, ok := wu.mutation.UpdatedAt(); !ok && !wu.mutation.UpdatedAtCleared() {
		if webauthn.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized webauthn.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := webauthn.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wu *WebauthnUpdate) check() error {
	if wu.mutation.OwnerCleared() && len(wu.mutation.OwnerIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Webauthn.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WebauthnUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WebauthnUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WebauthnUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(webauthn.Table, webauthn.Columns, sqlgraph.NewFieldSpec(webauthn.FieldID, field.TypeString))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if wu.mutation.CreatedAtCleared() {
		_spec.ClearField(webauthn.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(webauthn.FieldUpdatedAt, field.TypeTime, value)
	}
	if wu.mutation.UpdatedAtCleared() {
		_spec.ClearField(webauthn.FieldUpdatedAt, field.TypeTime)
	}
	if wu.mutation.CreatedByCleared() {
		_spec.ClearField(webauthn.FieldCreatedBy, field.TypeString)
	}
	if value, ok := wu.mutation.UpdatedBy(); ok {
		_spec.SetField(webauthn.FieldUpdatedBy, field.TypeString, value)
	}
	if wu.mutation.UpdatedByCleared() {
		_spec.ClearField(webauthn.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := wu.mutation.Tags(); ok {
		_spec.SetField(webauthn.FieldTags, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, webauthn.FieldTags, value)
		})
	}
	if wu.mutation.TagsCleared() {
		_spec.ClearField(webauthn.FieldTags, field.TypeJSON)
	}
	if value, ok := wu.mutation.CredentialID(); ok {
		_spec.SetField(webauthn.FieldCredentialID, field.TypeBytes, value)
	}
	if wu.mutation.CredentialIDCleared() {
		_spec.ClearField(webauthn.FieldCredentialID, field.TypeBytes)
	}
	if value, ok := wu.mutation.PublicKey(); ok {
		_spec.SetField(webauthn.FieldPublicKey, field.TypeBytes, value)
	}
	if wu.mutation.PublicKeyCleared() {
		_spec.ClearField(webauthn.FieldPublicKey, field.TypeBytes)
	}
	if value, ok := wu.mutation.AttestationType(); ok {
		_spec.SetField(webauthn.FieldAttestationType, field.TypeString, value)
	}
	if wu.mutation.AttestationTypeCleared() {
		_spec.ClearField(webauthn.FieldAttestationType, field.TypeString)
	}
	if value, ok := wu.mutation.SignCount(); ok {
		_spec.SetField(webauthn.FieldSignCount, field.TypeInt32, value)
	}
	if value, ok := wu.mutation.AddedSignCount(); ok {
		_spec.AddField(webauthn.FieldSignCount, field.TypeInt32, value)
	}
	if value, ok := wu.mutation.Transports(); ok {
		_spec.SetField(webauthn.FieldTransports, field.TypeJSON, value)
	}
	if value, ok := wu.mutation.AppendedTransports(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, webauthn.FieldTransports, value)
		})
	}
	if value, ok := wu.mutation.BackupState(); ok {
		_spec.SetField(webauthn.FieldBackupState, field.TypeBool, value)
	}
	if value, ok := wu.mutation.UserPresent(); ok {
		_spec.SetField(webauthn.FieldUserPresent, field.TypeBool, value)
	}
	if value, ok := wu.mutation.UserVerified(); ok {
		_spec.SetField(webauthn.FieldUserVerified, field.TypeBool, value)
	}
	if wu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthn.OwnerTable,
			Columns: []string{webauthn.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.Webauthn
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthn.OwnerTable,
			Columns: []string{webauthn.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = wu.schemaConfig.Webauthn
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = wu.schemaConfig.Webauthn
	ctx = internal.NewSchemaConfigContext(ctx, wu.schemaConfig)
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webauthn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WebauthnUpdateOne is the builder for updating a single Webauthn entity.
type WebauthnUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WebauthnMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WebauthnUpdateOne) SetUpdatedAt(t time.Time) *WebauthnUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (wuo *WebauthnUpdateOne) ClearUpdatedAt() *WebauthnUpdateOne {
	wuo.mutation.ClearUpdatedAt()
	return wuo
}

// SetUpdatedBy sets the "updated_by" field.
func (wuo *WebauthnUpdateOne) SetUpdatedBy(s string) *WebauthnUpdateOne {
	wuo.mutation.SetUpdatedBy(s)
	return wuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (wuo *WebauthnUpdateOne) SetNillableUpdatedBy(s *string) *WebauthnUpdateOne {
	if s != nil {
		wuo.SetUpdatedBy(*s)
	}
	return wuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (wuo *WebauthnUpdateOne) ClearUpdatedBy() *WebauthnUpdateOne {
	wuo.mutation.ClearUpdatedBy()
	return wuo
}

// SetTags sets the "tags" field.
func (wuo *WebauthnUpdateOne) SetTags(s []string) *WebauthnUpdateOne {
	wuo.mutation.SetTags(s)
	return wuo
}

// AppendTags appends s to the "tags" field.
func (wuo *WebauthnUpdateOne) AppendTags(s []string) *WebauthnUpdateOne {
	wuo.mutation.AppendTags(s)
	return wuo
}

// ClearTags clears the value of the "tags" field.
func (wuo *WebauthnUpdateOne) ClearTags() *WebauthnUpdateOne {
	wuo.mutation.ClearTags()
	return wuo
}

// SetOwnerID sets the "owner_id" field.
func (wuo *WebauthnUpdateOne) SetOwnerID(s string) *WebauthnUpdateOne {
	wuo.mutation.SetOwnerID(s)
	return wuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (wuo *WebauthnUpdateOne) SetNillableOwnerID(s *string) *WebauthnUpdateOne {
	if s != nil {
		wuo.SetOwnerID(*s)
	}
	return wuo
}

// SetCredentialID sets the "credential_id" field.
func (wuo *WebauthnUpdateOne) SetCredentialID(b []byte) *WebauthnUpdateOne {
	wuo.mutation.SetCredentialID(b)
	return wuo
}

// ClearCredentialID clears the value of the "credential_id" field.
func (wuo *WebauthnUpdateOne) ClearCredentialID() *WebauthnUpdateOne {
	wuo.mutation.ClearCredentialID()
	return wuo
}

// SetPublicKey sets the "public_key" field.
func (wuo *WebauthnUpdateOne) SetPublicKey(b []byte) *WebauthnUpdateOne {
	wuo.mutation.SetPublicKey(b)
	return wuo
}

// ClearPublicKey clears the value of the "public_key" field.
func (wuo *WebauthnUpdateOne) ClearPublicKey() *WebauthnUpdateOne {
	wuo.mutation.ClearPublicKey()
	return wuo
}

// SetAttestationType sets the "attestation_type" field.
func (wuo *WebauthnUpdateOne) SetAttestationType(s string) *WebauthnUpdateOne {
	wuo.mutation.SetAttestationType(s)
	return wuo
}

// SetNillableAttestationType sets the "attestation_type" field if the given value is not nil.
func (wuo *WebauthnUpdateOne) SetNillableAttestationType(s *string) *WebauthnUpdateOne {
	if s != nil {
		wuo.SetAttestationType(*s)
	}
	return wuo
}

// ClearAttestationType clears the value of the "attestation_type" field.
func (wuo *WebauthnUpdateOne) ClearAttestationType() *WebauthnUpdateOne {
	wuo.mutation.ClearAttestationType()
	return wuo
}

// SetSignCount sets the "sign_count" field.
func (wuo *WebauthnUpdateOne) SetSignCount(i int32) *WebauthnUpdateOne {
	wuo.mutation.ResetSignCount()
	wuo.mutation.SetSignCount(i)
	return wuo
}

// SetNillableSignCount sets the "sign_count" field if the given value is not nil.
func (wuo *WebauthnUpdateOne) SetNillableSignCount(i *int32) *WebauthnUpdateOne {
	if i != nil {
		wuo.SetSignCount(*i)
	}
	return wuo
}

// AddSignCount adds i to the "sign_count" field.
func (wuo *WebauthnUpdateOne) AddSignCount(i int32) *WebauthnUpdateOne {
	wuo.mutation.AddSignCount(i)
	return wuo
}

// SetTransports sets the "transports" field.
func (wuo *WebauthnUpdateOne) SetTransports(s []string) *WebauthnUpdateOne {
	wuo.mutation.SetTransports(s)
	return wuo
}

// AppendTransports appends s to the "transports" field.
func (wuo *WebauthnUpdateOne) AppendTransports(s []string) *WebauthnUpdateOne {
	wuo.mutation.AppendTransports(s)
	return wuo
}

// SetBackupState sets the "backup_state" field.
func (wuo *WebauthnUpdateOne) SetBackupState(b bool) *WebauthnUpdateOne {
	wuo.mutation.SetBackupState(b)
	return wuo
}

// SetNillableBackupState sets the "backup_state" field if the given value is not nil.
func (wuo *WebauthnUpdateOne) SetNillableBackupState(b *bool) *WebauthnUpdateOne {
	if b != nil {
		wuo.SetBackupState(*b)
	}
	return wuo
}

// SetUserPresent sets the "user_present" field.
func (wuo *WebauthnUpdateOne) SetUserPresent(b bool) *WebauthnUpdateOne {
	wuo.mutation.SetUserPresent(b)
	return wuo
}

// SetNillableUserPresent sets the "user_present" field if the given value is not nil.
func (wuo *WebauthnUpdateOne) SetNillableUserPresent(b *bool) *WebauthnUpdateOne {
	if b != nil {
		wuo.SetUserPresent(*b)
	}
	return wuo
}

// SetUserVerified sets the "user_verified" field.
func (wuo *WebauthnUpdateOne) SetUserVerified(b bool) *WebauthnUpdateOne {
	wuo.mutation.SetUserVerified(b)
	return wuo
}

// SetNillableUserVerified sets the "user_verified" field if the given value is not nil.
func (wuo *WebauthnUpdateOne) SetNillableUserVerified(b *bool) *WebauthnUpdateOne {
	if b != nil {
		wuo.SetUserVerified(*b)
	}
	return wuo
}

// SetOwner sets the "owner" edge to the User entity.
func (wuo *WebauthnUpdateOne) SetOwner(u *User) *WebauthnUpdateOne {
	return wuo.SetOwnerID(u.ID)
}

// Mutation returns the WebauthnMutation object of the builder.
func (wuo *WebauthnUpdateOne) Mutation() *WebauthnMutation {
	return wuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (wuo *WebauthnUpdateOne) ClearOwner() *WebauthnUpdateOne {
	wuo.mutation.ClearOwner()
	return wuo
}

// Where appends a list predicates to the WebauthnUpdate builder.
func (wuo *WebauthnUpdateOne) Where(ps ...predicate.Webauthn) *WebauthnUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WebauthnUpdateOne) Select(field string, fields ...string) *WebauthnUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Webauthn entity.
func (wuo *WebauthnUpdateOne) Save(ctx context.Context) (*Webauthn, error) {
	if err := wuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WebauthnUpdateOne) SaveX(ctx context.Context) *Webauthn {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WebauthnUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WebauthnUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WebauthnUpdateOne) defaults() error {
	if _, ok := wuo.mutation.UpdatedAt(); !ok && !wuo.mutation.UpdatedAtCleared() {
		if webauthn.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized webauthn.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := webauthn.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (wuo *WebauthnUpdateOne) check() error {
	if wuo.mutation.OwnerCleared() && len(wuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Webauthn.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WebauthnUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WebauthnUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WebauthnUpdateOne) sqlSave(ctx context.Context) (_node *Webauthn, err error) {
	if err := wuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(webauthn.Table, webauthn.Columns, sqlgraph.NewFieldSpec(webauthn.FieldID, field.TypeString))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Webauthn.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, webauthn.FieldID)
		for _, f := range fields {
			if !webauthn.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != webauthn.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if wuo.mutation.CreatedAtCleared() {
		_spec.ClearField(webauthn.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(webauthn.FieldUpdatedAt, field.TypeTime, value)
	}
	if wuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(webauthn.FieldUpdatedAt, field.TypeTime)
	}
	if wuo.mutation.CreatedByCleared() {
		_spec.ClearField(webauthn.FieldCreatedBy, field.TypeString)
	}
	if value, ok := wuo.mutation.UpdatedBy(); ok {
		_spec.SetField(webauthn.FieldUpdatedBy, field.TypeString, value)
	}
	if wuo.mutation.UpdatedByCleared() {
		_spec.ClearField(webauthn.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := wuo.mutation.Tags(); ok {
		_spec.SetField(webauthn.FieldTags, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, webauthn.FieldTags, value)
		})
	}
	if wuo.mutation.TagsCleared() {
		_spec.ClearField(webauthn.FieldTags, field.TypeJSON)
	}
	if value, ok := wuo.mutation.CredentialID(); ok {
		_spec.SetField(webauthn.FieldCredentialID, field.TypeBytes, value)
	}
	if wuo.mutation.CredentialIDCleared() {
		_spec.ClearField(webauthn.FieldCredentialID, field.TypeBytes)
	}
	if value, ok := wuo.mutation.PublicKey(); ok {
		_spec.SetField(webauthn.FieldPublicKey, field.TypeBytes, value)
	}
	if wuo.mutation.PublicKeyCleared() {
		_spec.ClearField(webauthn.FieldPublicKey, field.TypeBytes)
	}
	if value, ok := wuo.mutation.AttestationType(); ok {
		_spec.SetField(webauthn.FieldAttestationType, field.TypeString, value)
	}
	if wuo.mutation.AttestationTypeCleared() {
		_spec.ClearField(webauthn.FieldAttestationType, field.TypeString)
	}
	if value, ok := wuo.mutation.SignCount(); ok {
		_spec.SetField(webauthn.FieldSignCount, field.TypeInt32, value)
	}
	if value, ok := wuo.mutation.AddedSignCount(); ok {
		_spec.AddField(webauthn.FieldSignCount, field.TypeInt32, value)
	}
	if value, ok := wuo.mutation.Transports(); ok {
		_spec.SetField(webauthn.FieldTransports, field.TypeJSON, value)
	}
	if value, ok := wuo.mutation.AppendedTransports(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, webauthn.FieldTransports, value)
		})
	}
	if value, ok := wuo.mutation.BackupState(); ok {
		_spec.SetField(webauthn.FieldBackupState, field.TypeBool, value)
	}
	if value, ok := wuo.mutation.UserPresent(); ok {
		_spec.SetField(webauthn.FieldUserPresent, field.TypeBool, value)
	}
	if value, ok := wuo.mutation.UserVerified(); ok {
		_spec.SetField(webauthn.FieldUserVerified, field.TypeBool, value)
	}
	if wuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthn.OwnerTable,
			Columns: []string{webauthn.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.Webauthn
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthn.OwnerTable,
			Columns: []string{webauthn.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = wuo.schemaConfig.Webauthn
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = wuo.schemaConfig.Webauthn
	ctx = internal.NewSchemaConfigContext(ctx, wuo.schemaConfig)
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Webauthn{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webauthn.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
