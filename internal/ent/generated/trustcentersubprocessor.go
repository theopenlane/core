// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessor"
)

// TrustCenterSubprocessor is the model entity for the TrustCenterSubprocessor schema.
type TrustCenterSubprocessor struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// ID of the subprocessor
	SubprocessorID string `json:"subprocessor_id,omitempty"`
	// ID of the trust center
	TrustCenterID string `json:"trust_center_id,omitempty"`
	// country codes or country where the subprocessor is located
	Countries []string `json:"countries,omitempty"`
	// Category of the subprocessor, e.g. 'Data Warehouse' or 'Infrastructure Hosting'
	Category string `json:"category,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrustCenterSubprocessorQuery when eager-loading is set.
	Edges        TrustCenterSubprocessorEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrustCenterSubprocessorEdges holds the relations/edges for other nodes in the graph.
type TrustCenterSubprocessorEdges struct {
	// TrustCenter holds the value of the trust_center edge.
	TrustCenter *TrustCenter `json:"trust_center,omitempty"`
	// Subprocessor holds the value of the subprocessor edge.
	Subprocessor *Subprocessor `json:"subprocessor,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TrustCenterOrErr returns the TrustCenter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterSubprocessorEdges) TrustCenterOrErr() (*TrustCenter, error) {
	if e.TrustCenter != nil {
		return e.TrustCenter, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: trustcenter.Label}
	}
	return nil, &NotLoadedError{edge: "trust_center"}
}

// SubprocessorOrErr returns the Subprocessor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterSubprocessorEdges) SubprocessorOrErr() (*Subprocessor, error) {
	if e.Subprocessor != nil {
		return e.Subprocessor, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: subprocessor.Label}
	}
	return nil, &NotLoadedError{edge: "subprocessor"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrustCenterSubprocessor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trustcentersubprocessor.FieldCountries:
			values[i] = new([]byte)
		case trustcentersubprocessor.FieldID, trustcentersubprocessor.FieldCreatedBy, trustcentersubprocessor.FieldUpdatedBy, trustcentersubprocessor.FieldDeletedBy, trustcentersubprocessor.FieldSubprocessorID, trustcentersubprocessor.FieldTrustCenterID, trustcentersubprocessor.FieldCategory:
			values[i] = new(sql.NullString)
		case trustcentersubprocessor.FieldCreatedAt, trustcentersubprocessor.FieldUpdatedAt, trustcentersubprocessor.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrustCenterSubprocessor fields.
func (tcs *TrustCenterSubprocessor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trustcentersubprocessor.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tcs.ID = value.String
			}
		case trustcentersubprocessor.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tcs.CreatedAt = value.Time
			}
		case trustcentersubprocessor.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tcs.UpdatedAt = value.Time
			}
		case trustcentersubprocessor.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tcs.CreatedBy = value.String
			}
		case trustcentersubprocessor.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				tcs.UpdatedBy = value.String
			}
		case trustcentersubprocessor.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tcs.DeletedAt = value.Time
			}
		case trustcentersubprocessor.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				tcs.DeletedBy = value.String
			}
		case trustcentersubprocessor.FieldSubprocessorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subprocessor_id", values[i])
			} else if value.Valid {
				tcs.SubprocessorID = value.String
			}
		case trustcentersubprocessor.FieldTrustCenterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trust_center_id", values[i])
			} else if value.Valid {
				tcs.TrustCenterID = value.String
			}
		case trustcentersubprocessor.FieldCountries:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field countries", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tcs.Countries); err != nil {
					return fmt.Errorf("unmarshal field countries: %w", err)
				}
			}
		case trustcentersubprocessor.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				tcs.Category = value.String
			}
		default:
			tcs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrustCenterSubprocessor.
// This includes values selected through modifiers, order, etc.
func (tcs *TrustCenterSubprocessor) Value(name string) (ent.Value, error) {
	return tcs.selectValues.Get(name)
}

// QueryTrustCenter queries the "trust_center" edge of the TrustCenterSubprocessor entity.
func (tcs *TrustCenterSubprocessor) QueryTrustCenter() *TrustCenterQuery {
	return NewTrustCenterSubprocessorClient(tcs.config).QueryTrustCenter(tcs)
}

// QuerySubprocessor queries the "subprocessor" edge of the TrustCenterSubprocessor entity.
func (tcs *TrustCenterSubprocessor) QuerySubprocessor() *SubprocessorQuery {
	return NewTrustCenterSubprocessorClient(tcs.config).QuerySubprocessor(tcs)
}

// Update returns a builder for updating this TrustCenterSubprocessor.
// Note that you need to call TrustCenterSubprocessor.Unwrap() before calling this method if this TrustCenterSubprocessor
// was returned from a transaction, and the transaction was committed or rolled back.
func (tcs *TrustCenterSubprocessor) Update() *TrustCenterSubprocessorUpdateOne {
	return NewTrustCenterSubprocessorClient(tcs.config).UpdateOne(tcs)
}

// Unwrap unwraps the TrustCenterSubprocessor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tcs *TrustCenterSubprocessor) Unwrap() *TrustCenterSubprocessor {
	_tx, ok := tcs.config.driver.(*txDriver)
	if !ok {
		panic("generated: TrustCenterSubprocessor is not a transactional entity")
	}
	tcs.config.driver = _tx.drv
	return tcs
}

// String implements the fmt.Stringer.
func (tcs *TrustCenterSubprocessor) String() string {
	var builder strings.Builder
	builder.WriteString("TrustCenterSubprocessor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tcs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tcs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tcs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(tcs.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(tcs.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(tcs.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(tcs.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("subprocessor_id=")
	builder.WriteString(tcs.SubprocessorID)
	builder.WriteString(", ")
	builder.WriteString("trust_center_id=")
	builder.WriteString(tcs.TrustCenterID)
	builder.WriteString(", ")
	builder.WriteString("countries=")
	builder.WriteString(fmt.Sprintf("%v", tcs.Countries))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(tcs.Category)
	builder.WriteByte(')')
	return builder.String()
}

// TrustCenterSubprocessors is a parsable slice of TrustCenterSubprocessor.
type TrustCenterSubprocessors []*TrustCenterSubprocessor
