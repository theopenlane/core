// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks     []Hook
	mutation  *FileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FileUpdate builder.
func (fu *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetUpdatedAt sets the "updated_at" field.
func (fu *FileUpdate) SetUpdatedAt(t time.Time) *FileUpdate {
	fu.mutation.SetUpdatedAt(t)
	return fu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fu *FileUpdate) ClearUpdatedAt() *FileUpdate {
	fu.mutation.ClearUpdatedAt()
	return fu
}

// SetUpdatedBy sets the "updated_by" field.
func (fu *FileUpdate) SetUpdatedBy(s string) *FileUpdate {
	fu.mutation.SetUpdatedBy(s)
	return fu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fu *FileUpdate) SetNillableUpdatedBy(s *string) *FileUpdate {
	if s != nil {
		fu.SetUpdatedBy(*s)
	}
	return fu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fu *FileUpdate) ClearUpdatedBy() *FileUpdate {
	fu.mutation.ClearUpdatedBy()
	return fu
}

// SetDeletedAt sets the "deleted_at" field.
func (fu *FileUpdate) SetDeletedAt(t time.Time) *FileUpdate {
	fu.mutation.SetDeletedAt(t)
	return fu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fu *FileUpdate) SetNillableDeletedAt(t *time.Time) *FileUpdate {
	if t != nil {
		fu.SetDeletedAt(*t)
	}
	return fu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fu *FileUpdate) ClearDeletedAt() *FileUpdate {
	fu.mutation.ClearDeletedAt()
	return fu
}

// SetDeletedBy sets the "deleted_by" field.
func (fu *FileUpdate) SetDeletedBy(s string) *FileUpdate {
	fu.mutation.SetDeletedBy(s)
	return fu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fu *FileUpdate) SetNillableDeletedBy(s *string) *FileUpdate {
	if s != nil {
		fu.SetDeletedBy(*s)
	}
	return fu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (fu *FileUpdate) ClearDeletedBy() *FileUpdate {
	fu.mutation.ClearDeletedBy()
	return fu
}

// SetTags sets the "tags" field.
func (fu *FileUpdate) SetTags(s []string) *FileUpdate {
	fu.mutation.SetTags(s)
	return fu
}

// AppendTags appends s to the "tags" field.
func (fu *FileUpdate) AppendTags(s []string) *FileUpdate {
	fu.mutation.AppendTags(s)
	return fu
}

// ClearTags clears the value of the "tags" field.
func (fu *FileUpdate) ClearTags() *FileUpdate {
	fu.mutation.ClearTags()
	return fu
}

// SetProvidedFileName sets the "provided_file_name" field.
func (fu *FileUpdate) SetProvidedFileName(s string) *FileUpdate {
	fu.mutation.SetProvidedFileName(s)
	return fu
}

// SetNillableProvidedFileName sets the "provided_file_name" field if the given value is not nil.
func (fu *FileUpdate) SetNillableProvidedFileName(s *string) *FileUpdate {
	if s != nil {
		fu.SetProvidedFileName(*s)
	}
	return fu
}

// SetProvidedFileExtension sets the "provided_file_extension" field.
func (fu *FileUpdate) SetProvidedFileExtension(s string) *FileUpdate {
	fu.mutation.SetProvidedFileExtension(s)
	return fu
}

// SetNillableProvidedFileExtension sets the "provided_file_extension" field if the given value is not nil.
func (fu *FileUpdate) SetNillableProvidedFileExtension(s *string) *FileUpdate {
	if s != nil {
		fu.SetProvidedFileExtension(*s)
	}
	return fu
}

// SetProvidedFileSize sets the "provided_file_size" field.
func (fu *FileUpdate) SetProvidedFileSize(i int64) *FileUpdate {
	fu.mutation.ResetProvidedFileSize()
	fu.mutation.SetProvidedFileSize(i)
	return fu
}

// SetNillableProvidedFileSize sets the "provided_file_size" field if the given value is not nil.
func (fu *FileUpdate) SetNillableProvidedFileSize(i *int64) *FileUpdate {
	if i != nil {
		fu.SetProvidedFileSize(*i)
	}
	return fu
}

// AddProvidedFileSize adds i to the "provided_file_size" field.
func (fu *FileUpdate) AddProvidedFileSize(i int64) *FileUpdate {
	fu.mutation.AddProvidedFileSize(i)
	return fu
}

// ClearProvidedFileSize clears the value of the "provided_file_size" field.
func (fu *FileUpdate) ClearProvidedFileSize() *FileUpdate {
	fu.mutation.ClearProvidedFileSize()
	return fu
}

// SetPersistedFileSize sets the "persisted_file_size" field.
func (fu *FileUpdate) SetPersistedFileSize(i int64) *FileUpdate {
	fu.mutation.ResetPersistedFileSize()
	fu.mutation.SetPersistedFileSize(i)
	return fu
}

// SetNillablePersistedFileSize sets the "persisted_file_size" field if the given value is not nil.
func (fu *FileUpdate) SetNillablePersistedFileSize(i *int64) *FileUpdate {
	if i != nil {
		fu.SetPersistedFileSize(*i)
	}
	return fu
}

// AddPersistedFileSize adds i to the "persisted_file_size" field.
func (fu *FileUpdate) AddPersistedFileSize(i int64) *FileUpdate {
	fu.mutation.AddPersistedFileSize(i)
	return fu
}

// ClearPersistedFileSize clears the value of the "persisted_file_size" field.
func (fu *FileUpdate) ClearPersistedFileSize() *FileUpdate {
	fu.mutation.ClearPersistedFileSize()
	return fu
}

// SetDetectedMimeType sets the "detected_mime_type" field.
func (fu *FileUpdate) SetDetectedMimeType(s string) *FileUpdate {
	fu.mutation.SetDetectedMimeType(s)
	return fu
}

// SetNillableDetectedMimeType sets the "detected_mime_type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableDetectedMimeType(s *string) *FileUpdate {
	if s != nil {
		fu.SetDetectedMimeType(*s)
	}
	return fu
}

// ClearDetectedMimeType clears the value of the "detected_mime_type" field.
func (fu *FileUpdate) ClearDetectedMimeType() *FileUpdate {
	fu.mutation.ClearDetectedMimeType()
	return fu
}

// SetMd5Hash sets the "md5_hash" field.
func (fu *FileUpdate) SetMd5Hash(s string) *FileUpdate {
	fu.mutation.SetMd5Hash(s)
	return fu
}

// SetNillableMd5Hash sets the "md5_hash" field if the given value is not nil.
func (fu *FileUpdate) SetNillableMd5Hash(s *string) *FileUpdate {
	if s != nil {
		fu.SetMd5Hash(*s)
	}
	return fu
}

// ClearMd5Hash clears the value of the "md5_hash" field.
func (fu *FileUpdate) ClearMd5Hash() *FileUpdate {
	fu.mutation.ClearMd5Hash()
	return fu
}

// SetDetectedContentType sets the "detected_content_type" field.
func (fu *FileUpdate) SetDetectedContentType(s string) *FileUpdate {
	fu.mutation.SetDetectedContentType(s)
	return fu
}

// SetNillableDetectedContentType sets the "detected_content_type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableDetectedContentType(s *string) *FileUpdate {
	if s != nil {
		fu.SetDetectedContentType(*s)
	}
	return fu
}

// SetStoreKey sets the "store_key" field.
func (fu *FileUpdate) SetStoreKey(s string) *FileUpdate {
	fu.mutation.SetStoreKey(s)
	return fu
}

// SetNillableStoreKey sets the "store_key" field if the given value is not nil.
func (fu *FileUpdate) SetNillableStoreKey(s *string) *FileUpdate {
	if s != nil {
		fu.SetStoreKey(*s)
	}
	return fu
}

// ClearStoreKey clears the value of the "store_key" field.
func (fu *FileUpdate) ClearStoreKey() *FileUpdate {
	fu.mutation.ClearStoreKey()
	return fu
}

// SetCategoryType sets the "category_type" field.
func (fu *FileUpdate) SetCategoryType(s string) *FileUpdate {
	fu.mutation.SetCategoryType(s)
	return fu
}

// SetNillableCategoryType sets the "category_type" field if the given value is not nil.
func (fu *FileUpdate) SetNillableCategoryType(s *string) *FileUpdate {
	if s != nil {
		fu.SetCategoryType(*s)
	}
	return fu
}

// ClearCategoryType clears the value of the "category_type" field.
func (fu *FileUpdate) ClearCategoryType() *FileUpdate {
	fu.mutation.ClearCategoryType()
	return fu
}

// SetURI sets the "uri" field.
func (fu *FileUpdate) SetURI(s string) *FileUpdate {
	fu.mutation.SetURI(s)
	return fu
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (fu *FileUpdate) SetNillableURI(s *string) *FileUpdate {
	if s != nil {
		fu.SetURI(*s)
	}
	return fu
}

// ClearURI clears the value of the "uri" field.
func (fu *FileUpdate) ClearURI() *FileUpdate {
	fu.mutation.ClearURI()
	return fu
}

// SetStorageScheme sets the "storage_scheme" field.
func (fu *FileUpdate) SetStorageScheme(s string) *FileUpdate {
	fu.mutation.SetStorageScheme(s)
	return fu
}

// SetNillableStorageScheme sets the "storage_scheme" field if the given value is not nil.
func (fu *FileUpdate) SetNillableStorageScheme(s *string) *FileUpdate {
	if s != nil {
		fu.SetStorageScheme(*s)
	}
	return fu
}

// ClearStorageScheme clears the value of the "storage_scheme" field.
func (fu *FileUpdate) ClearStorageScheme() *FileUpdate {
	fu.mutation.ClearStorageScheme()
	return fu
}

// SetStorageVolume sets the "storage_volume" field.
func (fu *FileUpdate) SetStorageVolume(s string) *FileUpdate {
	fu.mutation.SetStorageVolume(s)
	return fu
}

// SetNillableStorageVolume sets the "storage_volume" field if the given value is not nil.
func (fu *FileUpdate) SetNillableStorageVolume(s *string) *FileUpdate {
	if s != nil {
		fu.SetStorageVolume(*s)
	}
	return fu
}

// ClearStorageVolume clears the value of the "storage_volume" field.
func (fu *FileUpdate) ClearStorageVolume() *FileUpdate {
	fu.mutation.ClearStorageVolume()
	return fu
}

// SetStoragePath sets the "storage_path" field.
func (fu *FileUpdate) SetStoragePath(s string) *FileUpdate {
	fu.mutation.SetStoragePath(s)
	return fu
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (fu *FileUpdate) SetNillableStoragePath(s *string) *FileUpdate {
	if s != nil {
		fu.SetStoragePath(*s)
	}
	return fu
}

// ClearStoragePath clears the value of the "storage_path" field.
func (fu *FileUpdate) ClearStoragePath() *FileUpdate {
	fu.mutation.ClearStoragePath()
	return fu
}

// SetFileContents sets the "file_contents" field.
func (fu *FileUpdate) SetFileContents(b []byte) *FileUpdate {
	fu.mutation.SetFileContents(b)
	return fu
}

// ClearFileContents clears the value of the "file_contents" field.
func (fu *FileUpdate) ClearFileContents() *FileUpdate {
	fu.mutation.ClearFileContents()
	return fu
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (fu *FileUpdate) AddUserIDs(ids ...string) *FileUpdate {
	fu.mutation.AddUserIDs(ids...)
	return fu
}

// AddUser adds the "user" edges to the User entity.
func (fu *FileUpdate) AddUser(u ...*User) *FileUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.AddUserIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (fu *FileUpdate) AddOrganizationIDs(ids ...string) *FileUpdate {
	fu.mutation.AddOrganizationIDs(ids...)
	return fu
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (fu *FileUpdate) AddOrganization(o ...*Organization) *FileUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return fu.AddOrganizationIDs(ids...)
}

// AddGroupIDs adds the "group" edge to the Group entity by IDs.
func (fu *FileUpdate) AddGroupIDs(ids ...string) *FileUpdate {
	fu.mutation.AddGroupIDs(ids...)
	return fu
}

// AddGroup adds the "group" edges to the Group entity.
func (fu *FileUpdate) AddGroup(g ...*Group) *FileUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return fu.AddGroupIDs(ids...)
}

// AddContactIDs adds the "contact" edge to the Contact entity by IDs.
func (fu *FileUpdate) AddContactIDs(ids ...string) *FileUpdate {
	fu.mutation.AddContactIDs(ids...)
	return fu
}

// AddContact adds the "contact" edges to the Contact entity.
func (fu *FileUpdate) AddContact(c ...*Contact) *FileUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fu.AddContactIDs(ids...)
}

// AddEntityIDs adds the "entity" edge to the Entity entity by IDs.
func (fu *FileUpdate) AddEntityIDs(ids ...string) *FileUpdate {
	fu.mutation.AddEntityIDs(ids...)
	return fu
}

// AddEntity adds the "entity" edges to the Entity entity.
func (fu *FileUpdate) AddEntity(e ...*Entity) *FileUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.AddEntityIDs(ids...)
}

// AddUsersettingIDs adds the "usersetting" edge to the UserSetting entity by IDs.
func (fu *FileUpdate) AddUsersettingIDs(ids ...string) *FileUpdate {
	fu.mutation.AddUsersettingIDs(ids...)
	return fu
}

// AddUsersetting adds the "usersetting" edges to the UserSetting entity.
func (fu *FileUpdate) AddUsersetting(u ...*UserSetting) *FileUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.AddUsersettingIDs(ids...)
}

// AddOrganizationsettingIDs adds the "organizationsetting" edge to the OrganizationSetting entity by IDs.
func (fu *FileUpdate) AddOrganizationsettingIDs(ids ...string) *FileUpdate {
	fu.mutation.AddOrganizationsettingIDs(ids...)
	return fu
}

// AddOrganizationsetting adds the "organizationsetting" edges to the OrganizationSetting entity.
func (fu *FileUpdate) AddOrganizationsetting(o ...*OrganizationSetting) *FileUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return fu.AddOrganizationsettingIDs(ids...)
}

// AddTemplateIDs adds the "template" edge to the Template entity by IDs.
func (fu *FileUpdate) AddTemplateIDs(ids ...string) *FileUpdate {
	fu.mutation.AddTemplateIDs(ids...)
	return fu
}

// AddTemplate adds the "template" edges to the Template entity.
func (fu *FileUpdate) AddTemplate(t ...*Template) *FileUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fu.AddTemplateIDs(ids...)
}

// AddDocumentdatumIDs adds the "documentdata" edge to the DocumentData entity by IDs.
func (fu *FileUpdate) AddDocumentdatumIDs(ids ...string) *FileUpdate {
	fu.mutation.AddDocumentdatumIDs(ids...)
	return fu
}

// AddDocumentdata adds the "documentdata" edges to the DocumentData entity.
func (fu *FileUpdate) AddDocumentdata(d ...*DocumentData) *FileUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return fu.AddDocumentdatumIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (fu *FileUpdate) AddEventIDs(ids ...string) *FileUpdate {
	fu.mutation.AddEventIDs(ids...)
	return fu
}

// AddEvents adds the "events" edges to the Event entity.
func (fu *FileUpdate) AddEvents(e ...*Event) *FileUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.AddEventIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (fu *FileUpdate) AddProgramIDs(ids ...string) *FileUpdate {
	fu.mutation.AddProgramIDs(ids...)
	return fu
}

// AddProgram adds the "program" edges to the Program entity.
func (fu *FileUpdate) AddProgram(p ...*Program) *FileUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.AddProgramIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (fu *FileUpdate) Mutation() *FileMutation {
	return fu.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (fu *FileUpdate) ClearUser() *FileUpdate {
	fu.mutation.ClearUser()
	return fu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (fu *FileUpdate) RemoveUserIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveUserIDs(ids...)
	return fu
}

// RemoveUser removes "user" edges to User entities.
func (fu *FileUpdate) RemoveUser(u ...*User) *FileUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.RemoveUserIDs(ids...)
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (fu *FileUpdate) ClearOrganization() *FileUpdate {
	fu.mutation.ClearOrganization()
	return fu
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (fu *FileUpdate) RemoveOrganizationIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveOrganizationIDs(ids...)
	return fu
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (fu *FileUpdate) RemoveOrganization(o ...*Organization) *FileUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return fu.RemoveOrganizationIDs(ids...)
}

// ClearGroup clears all "group" edges to the Group entity.
func (fu *FileUpdate) ClearGroup() *FileUpdate {
	fu.mutation.ClearGroup()
	return fu
}

// RemoveGroupIDs removes the "group" edge to Group entities by IDs.
func (fu *FileUpdate) RemoveGroupIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveGroupIDs(ids...)
	return fu
}

// RemoveGroup removes "group" edges to Group entities.
func (fu *FileUpdate) RemoveGroup(g ...*Group) *FileUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return fu.RemoveGroupIDs(ids...)
}

// ClearContact clears all "contact" edges to the Contact entity.
func (fu *FileUpdate) ClearContact() *FileUpdate {
	fu.mutation.ClearContact()
	return fu
}

// RemoveContactIDs removes the "contact" edge to Contact entities by IDs.
func (fu *FileUpdate) RemoveContactIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveContactIDs(ids...)
	return fu
}

// RemoveContact removes "contact" edges to Contact entities.
func (fu *FileUpdate) RemoveContact(c ...*Contact) *FileUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fu.RemoveContactIDs(ids...)
}

// ClearEntity clears all "entity" edges to the Entity entity.
func (fu *FileUpdate) ClearEntity() *FileUpdate {
	fu.mutation.ClearEntity()
	return fu
}

// RemoveEntityIDs removes the "entity" edge to Entity entities by IDs.
func (fu *FileUpdate) RemoveEntityIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveEntityIDs(ids...)
	return fu
}

// RemoveEntity removes "entity" edges to Entity entities.
func (fu *FileUpdate) RemoveEntity(e ...*Entity) *FileUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.RemoveEntityIDs(ids...)
}

// ClearUsersetting clears all "usersetting" edges to the UserSetting entity.
func (fu *FileUpdate) ClearUsersetting() *FileUpdate {
	fu.mutation.ClearUsersetting()
	return fu
}

// RemoveUsersettingIDs removes the "usersetting" edge to UserSetting entities by IDs.
func (fu *FileUpdate) RemoveUsersettingIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveUsersettingIDs(ids...)
	return fu
}

// RemoveUsersetting removes "usersetting" edges to UserSetting entities.
func (fu *FileUpdate) RemoveUsersetting(u ...*UserSetting) *FileUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fu.RemoveUsersettingIDs(ids...)
}

// ClearOrganizationsetting clears all "organizationsetting" edges to the OrganizationSetting entity.
func (fu *FileUpdate) ClearOrganizationsetting() *FileUpdate {
	fu.mutation.ClearOrganizationsetting()
	return fu
}

// RemoveOrganizationsettingIDs removes the "organizationsetting" edge to OrganizationSetting entities by IDs.
func (fu *FileUpdate) RemoveOrganizationsettingIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveOrganizationsettingIDs(ids...)
	return fu
}

// RemoveOrganizationsetting removes "organizationsetting" edges to OrganizationSetting entities.
func (fu *FileUpdate) RemoveOrganizationsetting(o ...*OrganizationSetting) *FileUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return fu.RemoveOrganizationsettingIDs(ids...)
}

// ClearTemplate clears all "template" edges to the Template entity.
func (fu *FileUpdate) ClearTemplate() *FileUpdate {
	fu.mutation.ClearTemplate()
	return fu
}

// RemoveTemplateIDs removes the "template" edge to Template entities by IDs.
func (fu *FileUpdate) RemoveTemplateIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveTemplateIDs(ids...)
	return fu
}

// RemoveTemplate removes "template" edges to Template entities.
func (fu *FileUpdate) RemoveTemplate(t ...*Template) *FileUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fu.RemoveTemplateIDs(ids...)
}

// ClearDocumentdata clears all "documentdata" edges to the DocumentData entity.
func (fu *FileUpdate) ClearDocumentdata() *FileUpdate {
	fu.mutation.ClearDocumentdata()
	return fu
}

// RemoveDocumentdatumIDs removes the "documentdata" edge to DocumentData entities by IDs.
func (fu *FileUpdate) RemoveDocumentdatumIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveDocumentdatumIDs(ids...)
	return fu
}

// RemoveDocumentdata removes "documentdata" edges to DocumentData entities.
func (fu *FileUpdate) RemoveDocumentdata(d ...*DocumentData) *FileUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return fu.RemoveDocumentdatumIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (fu *FileUpdate) ClearEvents() *FileUpdate {
	fu.mutation.ClearEvents()
	return fu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (fu *FileUpdate) RemoveEventIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveEventIDs(ids...)
	return fu
}

// RemoveEvents removes "events" edges to Event entities.
func (fu *FileUpdate) RemoveEvents(e ...*Event) *FileUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fu.RemoveEventIDs(ids...)
}

// ClearProgram clears all "program" edges to the Program entity.
func (fu *FileUpdate) ClearProgram() *FileUpdate {
	fu.mutation.ClearProgram()
	return fu
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (fu *FileUpdate) RemoveProgramIDs(ids ...string) *FileUpdate {
	fu.mutation.RemoveProgramIDs(ids...)
	return fu
}

// RemoveProgram removes "program" edges to Program entities.
func (fu *FileUpdate) RemoveProgram(p ...*Program) *FileUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fu.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FileUpdate) Save(ctx context.Context) (int, error) {
	if err := fu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FileUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FileUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FileUpdate) defaults() error {
	if _, ok := fu.mutation.UpdatedAt(); !ok && !fu.mutation.UpdatedAtCleared() {
		if file.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized file.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := file.UpdateDefaultUpdatedAt()
		fu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fu *FileUpdate) check() error {
	if v, ok := fu.mutation.ProvidedFileSize(); ok {
		if err := file.ProvidedFileSizeValidator(v); err != nil {
			return &ValidationError{Name: "provided_file_size", err: fmt.Errorf(`generated: validator failed for field "File.provided_file_size": %w`, err)}
		}
	}
	if v, ok := fu.mutation.PersistedFileSize(); ok {
		if err := file.PersistedFileSizeValidator(v); err != nil {
			return &ValidationError{Name: "persisted_file_size", err: fmt.Errorf(`generated: validator failed for field "File.persisted_file_size": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fu *FileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUpdate {
	fu.modifiers = append(fu.modifiers, modifiers...)
	return fu
}

func (fu *FileUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fu.mutation.CreatedAtCleared() {
		_spec.ClearField(file.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fu.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if fu.mutation.UpdatedAtCleared() {
		_spec.ClearField(file.FieldUpdatedAt, field.TypeTime)
	}
	if fu.mutation.CreatedByCleared() {
		_spec.ClearField(file.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fu.mutation.UpdatedBy(); ok {
		_spec.SetField(file.FieldUpdatedBy, field.TypeString, value)
	}
	if fu.mutation.UpdatedByCleared() {
		_spec.ClearField(file.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := fu.mutation.DeletedAt(); ok {
		_spec.SetField(file.FieldDeletedAt, field.TypeTime, value)
	}
	if fu.mutation.DeletedAtCleared() {
		_spec.ClearField(file.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fu.mutation.DeletedBy(); ok {
		_spec.SetField(file.FieldDeletedBy, field.TypeString, value)
	}
	if fu.mutation.DeletedByCleared() {
		_spec.ClearField(file.FieldDeletedBy, field.TypeString)
	}
	if value, ok := fu.mutation.Tags(); ok {
		_spec.SetField(file.FieldTags, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, file.FieldTags, value)
		})
	}
	if fu.mutation.TagsCleared() {
		_spec.ClearField(file.FieldTags, field.TypeJSON)
	}
	if value, ok := fu.mutation.ProvidedFileName(); ok {
		_spec.SetField(file.FieldProvidedFileName, field.TypeString, value)
	}
	if value, ok := fu.mutation.ProvidedFileExtension(); ok {
		_spec.SetField(file.FieldProvidedFileExtension, field.TypeString, value)
	}
	if value, ok := fu.mutation.ProvidedFileSize(); ok {
		_spec.SetField(file.FieldProvidedFileSize, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedProvidedFileSize(); ok {
		_spec.AddField(file.FieldProvidedFileSize, field.TypeInt64, value)
	}
	if fu.mutation.ProvidedFileSizeCleared() {
		_spec.ClearField(file.FieldProvidedFileSize, field.TypeInt64)
	}
	if value, ok := fu.mutation.PersistedFileSize(); ok {
		_spec.SetField(file.FieldPersistedFileSize, field.TypeInt64, value)
	}
	if value, ok := fu.mutation.AddedPersistedFileSize(); ok {
		_spec.AddField(file.FieldPersistedFileSize, field.TypeInt64, value)
	}
	if fu.mutation.PersistedFileSizeCleared() {
		_spec.ClearField(file.FieldPersistedFileSize, field.TypeInt64)
	}
	if value, ok := fu.mutation.DetectedMimeType(); ok {
		_spec.SetField(file.FieldDetectedMimeType, field.TypeString, value)
	}
	if fu.mutation.DetectedMimeTypeCleared() {
		_spec.ClearField(file.FieldDetectedMimeType, field.TypeString)
	}
	if value, ok := fu.mutation.Md5Hash(); ok {
		_spec.SetField(file.FieldMd5Hash, field.TypeString, value)
	}
	if fu.mutation.Md5HashCleared() {
		_spec.ClearField(file.FieldMd5Hash, field.TypeString)
	}
	if value, ok := fu.mutation.DetectedContentType(); ok {
		_spec.SetField(file.FieldDetectedContentType, field.TypeString, value)
	}
	if value, ok := fu.mutation.StoreKey(); ok {
		_spec.SetField(file.FieldStoreKey, field.TypeString, value)
	}
	if fu.mutation.StoreKeyCleared() {
		_spec.ClearField(file.FieldStoreKey, field.TypeString)
	}
	if value, ok := fu.mutation.CategoryType(); ok {
		_spec.SetField(file.FieldCategoryType, field.TypeString, value)
	}
	if fu.mutation.CategoryTypeCleared() {
		_spec.ClearField(file.FieldCategoryType, field.TypeString)
	}
	if value, ok := fu.mutation.URI(); ok {
		_spec.SetField(file.FieldURI, field.TypeString, value)
	}
	if fu.mutation.URICleared() {
		_spec.ClearField(file.FieldURI, field.TypeString)
	}
	if value, ok := fu.mutation.StorageScheme(); ok {
		_spec.SetField(file.FieldStorageScheme, field.TypeString, value)
	}
	if fu.mutation.StorageSchemeCleared() {
		_spec.ClearField(file.FieldStorageScheme, field.TypeString)
	}
	if value, ok := fu.mutation.StorageVolume(); ok {
		_spec.SetField(file.FieldStorageVolume, field.TypeString, value)
	}
	if fu.mutation.StorageVolumeCleared() {
		_spec.ClearField(file.FieldStorageVolume, field.TypeString)
	}
	if value, ok := fu.mutation.StoragePath(); ok {
		_spec.SetField(file.FieldStoragePath, field.TypeString, value)
	}
	if fu.mutation.StoragePathCleared() {
		_spec.ClearField(file.FieldStoragePath, field.TypeString)
	}
	if value, ok := fu.mutation.FileContents(); ok {
		_spec.SetField(file.FieldFileContents, field.TypeBytes, value)
	}
	if fu.mutation.FileContentsCleared() {
		_spec.ClearField(file.FieldFileContents, field.TypeBytes)
	}
	if fu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.UserFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedUserIDs(); len(nodes) > 0 && !fu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.UserFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.UserFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.OrganizationFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !fu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupTable,
			Columns: file.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.GroupFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedGroupIDs(); len(nodes) > 0 && !fu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupTable,
			Columns: file.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupTable,
			Columns: file.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.ContactFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedContactIDs(); len(nodes) > 0 && !fu.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.EntityFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedEntityIDs(); len(nodes) > 0 && !fu.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.UsersettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UsersettingTable,
			Columns: file.UsersettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.UserSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedUsersettingIDs(); len(nodes) > 0 && !fu.mutation.UsersettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UsersettingTable,
			Columns: file.UsersettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.UsersettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UsersettingTable,
			Columns: file.UsersettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.OrganizationsettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationsettingTable,
			Columns: file.OrganizationsettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.OrganizationSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedOrganizationsettingIDs(); len(nodes) > 0 && !fu.mutation.OrganizationsettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationsettingTable,
			Columns: file.OrganizationsettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.OrganizationsettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationsettingTable,
			Columns: file.OrganizationsettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.TemplateFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedTemplateIDs(); len(nodes) > 0 && !fu.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.TemplateFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.TemplateFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.DocumentdataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentdataTable,
			Columns: file.DocumentdataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.DocumentDataFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedDocumentdataIDs(); len(nodes) > 0 && !fu.mutation.DocumentdataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentdataTable,
			Columns: file.DocumentdataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.DocumentDataFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.DocumentdataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentdataTable,
			Columns: file.DocumentdataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.DocumentDataFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.FileEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !fu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.ProgramFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedProgramIDs(); len(nodes) > 0 && !fu.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = fu.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = fu.schemaConfig.File
	ctx = internal.NewSchemaConfigContext(ctx, fu.schemaConfig)
	_spec.AddModifiers(fu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (fuo *FileUpdateOne) SetUpdatedAt(t time.Time) *FileUpdateOne {
	fuo.mutation.SetUpdatedAt(t)
	return fuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fuo *FileUpdateOne) ClearUpdatedAt() *FileUpdateOne {
	fuo.mutation.ClearUpdatedAt()
	return fuo
}

// SetUpdatedBy sets the "updated_by" field.
func (fuo *FileUpdateOne) SetUpdatedBy(s string) *FileUpdateOne {
	fuo.mutation.SetUpdatedBy(s)
	return fuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableUpdatedBy(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetUpdatedBy(*s)
	}
	return fuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fuo *FileUpdateOne) ClearUpdatedBy() *FileUpdateOne {
	fuo.mutation.ClearUpdatedBy()
	return fuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fuo *FileUpdateOne) SetDeletedAt(t time.Time) *FileUpdateOne {
	fuo.mutation.SetDeletedAt(t)
	return fuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableDeletedAt(t *time.Time) *FileUpdateOne {
	if t != nil {
		fuo.SetDeletedAt(*t)
	}
	return fuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fuo *FileUpdateOne) ClearDeletedAt() *FileUpdateOne {
	fuo.mutation.ClearDeletedAt()
	return fuo
}

// SetDeletedBy sets the "deleted_by" field.
func (fuo *FileUpdateOne) SetDeletedBy(s string) *FileUpdateOne {
	fuo.mutation.SetDeletedBy(s)
	return fuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableDeletedBy(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetDeletedBy(*s)
	}
	return fuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (fuo *FileUpdateOne) ClearDeletedBy() *FileUpdateOne {
	fuo.mutation.ClearDeletedBy()
	return fuo
}

// SetTags sets the "tags" field.
func (fuo *FileUpdateOne) SetTags(s []string) *FileUpdateOne {
	fuo.mutation.SetTags(s)
	return fuo
}

// AppendTags appends s to the "tags" field.
func (fuo *FileUpdateOne) AppendTags(s []string) *FileUpdateOne {
	fuo.mutation.AppendTags(s)
	return fuo
}

// ClearTags clears the value of the "tags" field.
func (fuo *FileUpdateOne) ClearTags() *FileUpdateOne {
	fuo.mutation.ClearTags()
	return fuo
}

// SetProvidedFileName sets the "provided_file_name" field.
func (fuo *FileUpdateOne) SetProvidedFileName(s string) *FileUpdateOne {
	fuo.mutation.SetProvidedFileName(s)
	return fuo
}

// SetNillableProvidedFileName sets the "provided_file_name" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableProvidedFileName(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetProvidedFileName(*s)
	}
	return fuo
}

// SetProvidedFileExtension sets the "provided_file_extension" field.
func (fuo *FileUpdateOne) SetProvidedFileExtension(s string) *FileUpdateOne {
	fuo.mutation.SetProvidedFileExtension(s)
	return fuo
}

// SetNillableProvidedFileExtension sets the "provided_file_extension" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableProvidedFileExtension(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetProvidedFileExtension(*s)
	}
	return fuo
}

// SetProvidedFileSize sets the "provided_file_size" field.
func (fuo *FileUpdateOne) SetProvidedFileSize(i int64) *FileUpdateOne {
	fuo.mutation.ResetProvidedFileSize()
	fuo.mutation.SetProvidedFileSize(i)
	return fuo
}

// SetNillableProvidedFileSize sets the "provided_file_size" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableProvidedFileSize(i *int64) *FileUpdateOne {
	if i != nil {
		fuo.SetProvidedFileSize(*i)
	}
	return fuo
}

// AddProvidedFileSize adds i to the "provided_file_size" field.
func (fuo *FileUpdateOne) AddProvidedFileSize(i int64) *FileUpdateOne {
	fuo.mutation.AddProvidedFileSize(i)
	return fuo
}

// ClearProvidedFileSize clears the value of the "provided_file_size" field.
func (fuo *FileUpdateOne) ClearProvidedFileSize() *FileUpdateOne {
	fuo.mutation.ClearProvidedFileSize()
	return fuo
}

// SetPersistedFileSize sets the "persisted_file_size" field.
func (fuo *FileUpdateOne) SetPersistedFileSize(i int64) *FileUpdateOne {
	fuo.mutation.ResetPersistedFileSize()
	fuo.mutation.SetPersistedFileSize(i)
	return fuo
}

// SetNillablePersistedFileSize sets the "persisted_file_size" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillablePersistedFileSize(i *int64) *FileUpdateOne {
	if i != nil {
		fuo.SetPersistedFileSize(*i)
	}
	return fuo
}

// AddPersistedFileSize adds i to the "persisted_file_size" field.
func (fuo *FileUpdateOne) AddPersistedFileSize(i int64) *FileUpdateOne {
	fuo.mutation.AddPersistedFileSize(i)
	return fuo
}

// ClearPersistedFileSize clears the value of the "persisted_file_size" field.
func (fuo *FileUpdateOne) ClearPersistedFileSize() *FileUpdateOne {
	fuo.mutation.ClearPersistedFileSize()
	return fuo
}

// SetDetectedMimeType sets the "detected_mime_type" field.
func (fuo *FileUpdateOne) SetDetectedMimeType(s string) *FileUpdateOne {
	fuo.mutation.SetDetectedMimeType(s)
	return fuo
}

// SetNillableDetectedMimeType sets the "detected_mime_type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableDetectedMimeType(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetDetectedMimeType(*s)
	}
	return fuo
}

// ClearDetectedMimeType clears the value of the "detected_mime_type" field.
func (fuo *FileUpdateOne) ClearDetectedMimeType() *FileUpdateOne {
	fuo.mutation.ClearDetectedMimeType()
	return fuo
}

// SetMd5Hash sets the "md5_hash" field.
func (fuo *FileUpdateOne) SetMd5Hash(s string) *FileUpdateOne {
	fuo.mutation.SetMd5Hash(s)
	return fuo
}

// SetNillableMd5Hash sets the "md5_hash" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableMd5Hash(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetMd5Hash(*s)
	}
	return fuo
}

// ClearMd5Hash clears the value of the "md5_hash" field.
func (fuo *FileUpdateOne) ClearMd5Hash() *FileUpdateOne {
	fuo.mutation.ClearMd5Hash()
	return fuo
}

// SetDetectedContentType sets the "detected_content_type" field.
func (fuo *FileUpdateOne) SetDetectedContentType(s string) *FileUpdateOne {
	fuo.mutation.SetDetectedContentType(s)
	return fuo
}

// SetNillableDetectedContentType sets the "detected_content_type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableDetectedContentType(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetDetectedContentType(*s)
	}
	return fuo
}

// SetStoreKey sets the "store_key" field.
func (fuo *FileUpdateOne) SetStoreKey(s string) *FileUpdateOne {
	fuo.mutation.SetStoreKey(s)
	return fuo
}

// SetNillableStoreKey sets the "store_key" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableStoreKey(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetStoreKey(*s)
	}
	return fuo
}

// ClearStoreKey clears the value of the "store_key" field.
func (fuo *FileUpdateOne) ClearStoreKey() *FileUpdateOne {
	fuo.mutation.ClearStoreKey()
	return fuo
}

// SetCategoryType sets the "category_type" field.
func (fuo *FileUpdateOne) SetCategoryType(s string) *FileUpdateOne {
	fuo.mutation.SetCategoryType(s)
	return fuo
}

// SetNillableCategoryType sets the "category_type" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableCategoryType(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetCategoryType(*s)
	}
	return fuo
}

// ClearCategoryType clears the value of the "category_type" field.
func (fuo *FileUpdateOne) ClearCategoryType() *FileUpdateOne {
	fuo.mutation.ClearCategoryType()
	return fuo
}

// SetURI sets the "uri" field.
func (fuo *FileUpdateOne) SetURI(s string) *FileUpdateOne {
	fuo.mutation.SetURI(s)
	return fuo
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableURI(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetURI(*s)
	}
	return fuo
}

// ClearURI clears the value of the "uri" field.
func (fuo *FileUpdateOne) ClearURI() *FileUpdateOne {
	fuo.mutation.ClearURI()
	return fuo
}

// SetStorageScheme sets the "storage_scheme" field.
func (fuo *FileUpdateOne) SetStorageScheme(s string) *FileUpdateOne {
	fuo.mutation.SetStorageScheme(s)
	return fuo
}

// SetNillableStorageScheme sets the "storage_scheme" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableStorageScheme(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetStorageScheme(*s)
	}
	return fuo
}

// ClearStorageScheme clears the value of the "storage_scheme" field.
func (fuo *FileUpdateOne) ClearStorageScheme() *FileUpdateOne {
	fuo.mutation.ClearStorageScheme()
	return fuo
}

// SetStorageVolume sets the "storage_volume" field.
func (fuo *FileUpdateOne) SetStorageVolume(s string) *FileUpdateOne {
	fuo.mutation.SetStorageVolume(s)
	return fuo
}

// SetNillableStorageVolume sets the "storage_volume" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableStorageVolume(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetStorageVolume(*s)
	}
	return fuo
}

// ClearStorageVolume clears the value of the "storage_volume" field.
func (fuo *FileUpdateOne) ClearStorageVolume() *FileUpdateOne {
	fuo.mutation.ClearStorageVolume()
	return fuo
}

// SetStoragePath sets the "storage_path" field.
func (fuo *FileUpdateOne) SetStoragePath(s string) *FileUpdateOne {
	fuo.mutation.SetStoragePath(s)
	return fuo
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (fuo *FileUpdateOne) SetNillableStoragePath(s *string) *FileUpdateOne {
	if s != nil {
		fuo.SetStoragePath(*s)
	}
	return fuo
}

// ClearStoragePath clears the value of the "storage_path" field.
func (fuo *FileUpdateOne) ClearStoragePath() *FileUpdateOne {
	fuo.mutation.ClearStoragePath()
	return fuo
}

// SetFileContents sets the "file_contents" field.
func (fuo *FileUpdateOne) SetFileContents(b []byte) *FileUpdateOne {
	fuo.mutation.SetFileContents(b)
	return fuo
}

// ClearFileContents clears the value of the "file_contents" field.
func (fuo *FileUpdateOne) ClearFileContents() *FileUpdateOne {
	fuo.mutation.ClearFileContents()
	return fuo
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (fuo *FileUpdateOne) AddUserIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddUserIDs(ids...)
	return fuo
}

// AddUser adds the "user" edges to the User entity.
func (fuo *FileUpdateOne) AddUser(u ...*User) *FileUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.AddUserIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (fuo *FileUpdateOne) AddOrganizationIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddOrganizationIDs(ids...)
	return fuo
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (fuo *FileUpdateOne) AddOrganization(o ...*Organization) *FileUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return fuo.AddOrganizationIDs(ids...)
}

// AddGroupIDs adds the "group" edge to the Group entity by IDs.
func (fuo *FileUpdateOne) AddGroupIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddGroupIDs(ids...)
	return fuo
}

// AddGroup adds the "group" edges to the Group entity.
func (fuo *FileUpdateOne) AddGroup(g ...*Group) *FileUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return fuo.AddGroupIDs(ids...)
}

// AddContactIDs adds the "contact" edge to the Contact entity by IDs.
func (fuo *FileUpdateOne) AddContactIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddContactIDs(ids...)
	return fuo
}

// AddContact adds the "contact" edges to the Contact entity.
func (fuo *FileUpdateOne) AddContact(c ...*Contact) *FileUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fuo.AddContactIDs(ids...)
}

// AddEntityIDs adds the "entity" edge to the Entity entity by IDs.
func (fuo *FileUpdateOne) AddEntityIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddEntityIDs(ids...)
	return fuo
}

// AddEntity adds the "entity" edges to the Entity entity.
func (fuo *FileUpdateOne) AddEntity(e ...*Entity) *FileUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.AddEntityIDs(ids...)
}

// AddUsersettingIDs adds the "usersetting" edge to the UserSetting entity by IDs.
func (fuo *FileUpdateOne) AddUsersettingIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddUsersettingIDs(ids...)
	return fuo
}

// AddUsersetting adds the "usersetting" edges to the UserSetting entity.
func (fuo *FileUpdateOne) AddUsersetting(u ...*UserSetting) *FileUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.AddUsersettingIDs(ids...)
}

// AddOrganizationsettingIDs adds the "organizationsetting" edge to the OrganizationSetting entity by IDs.
func (fuo *FileUpdateOne) AddOrganizationsettingIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddOrganizationsettingIDs(ids...)
	return fuo
}

// AddOrganizationsetting adds the "organizationsetting" edges to the OrganizationSetting entity.
func (fuo *FileUpdateOne) AddOrganizationsetting(o ...*OrganizationSetting) *FileUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return fuo.AddOrganizationsettingIDs(ids...)
}

// AddTemplateIDs adds the "template" edge to the Template entity by IDs.
func (fuo *FileUpdateOne) AddTemplateIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddTemplateIDs(ids...)
	return fuo
}

// AddTemplate adds the "template" edges to the Template entity.
func (fuo *FileUpdateOne) AddTemplate(t ...*Template) *FileUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fuo.AddTemplateIDs(ids...)
}

// AddDocumentdatumIDs adds the "documentdata" edge to the DocumentData entity by IDs.
func (fuo *FileUpdateOne) AddDocumentdatumIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddDocumentdatumIDs(ids...)
	return fuo
}

// AddDocumentdata adds the "documentdata" edges to the DocumentData entity.
func (fuo *FileUpdateOne) AddDocumentdata(d ...*DocumentData) *FileUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return fuo.AddDocumentdatumIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (fuo *FileUpdateOne) AddEventIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddEventIDs(ids...)
	return fuo
}

// AddEvents adds the "events" edges to the Event entity.
func (fuo *FileUpdateOne) AddEvents(e ...*Event) *FileUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.AddEventIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (fuo *FileUpdateOne) AddProgramIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.AddProgramIDs(ids...)
	return fuo
}

// AddProgram adds the "program" edges to the Program entity.
func (fuo *FileUpdateOne) AddProgram(p ...*Program) *FileUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.AddProgramIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (fuo *FileUpdateOne) Mutation() *FileMutation {
	return fuo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (fuo *FileUpdateOne) ClearUser() *FileUpdateOne {
	fuo.mutation.ClearUser()
	return fuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (fuo *FileUpdateOne) RemoveUserIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveUserIDs(ids...)
	return fuo
}

// RemoveUser removes "user" edges to User entities.
func (fuo *FileUpdateOne) RemoveUser(u ...*User) *FileUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.RemoveUserIDs(ids...)
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (fuo *FileUpdateOne) ClearOrganization() *FileUpdateOne {
	fuo.mutation.ClearOrganization()
	return fuo
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (fuo *FileUpdateOne) RemoveOrganizationIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveOrganizationIDs(ids...)
	return fuo
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (fuo *FileUpdateOne) RemoveOrganization(o ...*Organization) *FileUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return fuo.RemoveOrganizationIDs(ids...)
}

// ClearGroup clears all "group" edges to the Group entity.
func (fuo *FileUpdateOne) ClearGroup() *FileUpdateOne {
	fuo.mutation.ClearGroup()
	return fuo
}

// RemoveGroupIDs removes the "group" edge to Group entities by IDs.
func (fuo *FileUpdateOne) RemoveGroupIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveGroupIDs(ids...)
	return fuo
}

// RemoveGroup removes "group" edges to Group entities.
func (fuo *FileUpdateOne) RemoveGroup(g ...*Group) *FileUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return fuo.RemoveGroupIDs(ids...)
}

// ClearContact clears all "contact" edges to the Contact entity.
func (fuo *FileUpdateOne) ClearContact() *FileUpdateOne {
	fuo.mutation.ClearContact()
	return fuo
}

// RemoveContactIDs removes the "contact" edge to Contact entities by IDs.
func (fuo *FileUpdateOne) RemoveContactIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveContactIDs(ids...)
	return fuo
}

// RemoveContact removes "contact" edges to Contact entities.
func (fuo *FileUpdateOne) RemoveContact(c ...*Contact) *FileUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fuo.RemoveContactIDs(ids...)
}

// ClearEntity clears all "entity" edges to the Entity entity.
func (fuo *FileUpdateOne) ClearEntity() *FileUpdateOne {
	fuo.mutation.ClearEntity()
	return fuo
}

// RemoveEntityIDs removes the "entity" edge to Entity entities by IDs.
func (fuo *FileUpdateOne) RemoveEntityIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveEntityIDs(ids...)
	return fuo
}

// RemoveEntity removes "entity" edges to Entity entities.
func (fuo *FileUpdateOne) RemoveEntity(e ...*Entity) *FileUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.RemoveEntityIDs(ids...)
}

// ClearUsersetting clears all "usersetting" edges to the UserSetting entity.
func (fuo *FileUpdateOne) ClearUsersetting() *FileUpdateOne {
	fuo.mutation.ClearUsersetting()
	return fuo
}

// RemoveUsersettingIDs removes the "usersetting" edge to UserSetting entities by IDs.
func (fuo *FileUpdateOne) RemoveUsersettingIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveUsersettingIDs(ids...)
	return fuo
}

// RemoveUsersetting removes "usersetting" edges to UserSetting entities.
func (fuo *FileUpdateOne) RemoveUsersetting(u ...*UserSetting) *FileUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return fuo.RemoveUsersettingIDs(ids...)
}

// ClearOrganizationsetting clears all "organizationsetting" edges to the OrganizationSetting entity.
func (fuo *FileUpdateOne) ClearOrganizationsetting() *FileUpdateOne {
	fuo.mutation.ClearOrganizationsetting()
	return fuo
}

// RemoveOrganizationsettingIDs removes the "organizationsetting" edge to OrganizationSetting entities by IDs.
func (fuo *FileUpdateOne) RemoveOrganizationsettingIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveOrganizationsettingIDs(ids...)
	return fuo
}

// RemoveOrganizationsetting removes "organizationsetting" edges to OrganizationSetting entities.
func (fuo *FileUpdateOne) RemoveOrganizationsetting(o ...*OrganizationSetting) *FileUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return fuo.RemoveOrganizationsettingIDs(ids...)
}

// ClearTemplate clears all "template" edges to the Template entity.
func (fuo *FileUpdateOne) ClearTemplate() *FileUpdateOne {
	fuo.mutation.ClearTemplate()
	return fuo
}

// RemoveTemplateIDs removes the "template" edge to Template entities by IDs.
func (fuo *FileUpdateOne) RemoveTemplateIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveTemplateIDs(ids...)
	return fuo
}

// RemoveTemplate removes "template" edges to Template entities.
func (fuo *FileUpdateOne) RemoveTemplate(t ...*Template) *FileUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return fuo.RemoveTemplateIDs(ids...)
}

// ClearDocumentdata clears all "documentdata" edges to the DocumentData entity.
func (fuo *FileUpdateOne) ClearDocumentdata() *FileUpdateOne {
	fuo.mutation.ClearDocumentdata()
	return fuo
}

// RemoveDocumentdatumIDs removes the "documentdata" edge to DocumentData entities by IDs.
func (fuo *FileUpdateOne) RemoveDocumentdatumIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveDocumentdatumIDs(ids...)
	return fuo
}

// RemoveDocumentdata removes "documentdata" edges to DocumentData entities.
func (fuo *FileUpdateOne) RemoveDocumentdata(d ...*DocumentData) *FileUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return fuo.RemoveDocumentdatumIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (fuo *FileUpdateOne) ClearEvents() *FileUpdateOne {
	fuo.mutation.ClearEvents()
	return fuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (fuo *FileUpdateOne) RemoveEventIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveEventIDs(ids...)
	return fuo
}

// RemoveEvents removes "events" edges to Event entities.
func (fuo *FileUpdateOne) RemoveEvents(e ...*Event) *FileUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return fuo.RemoveEventIDs(ids...)
}

// ClearProgram clears all "program" edges to the Program entity.
func (fuo *FileUpdateOne) ClearProgram() *FileUpdateOne {
	fuo.mutation.ClearProgram()
	return fuo
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (fuo *FileUpdateOne) RemoveProgramIDs(ids ...string) *FileUpdateOne {
	fuo.mutation.RemoveProgramIDs(ids...)
	return fuo
}

// RemoveProgram removes "program" edges to Program entities.
func (fuo *FileUpdateOne) RemoveProgram(p ...*Program) *FileUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fuo.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the FileUpdate builder.
func (fuo *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated File entity.
func (fuo *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	if err := fuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FileUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FileUpdateOne) defaults() error {
	if _, ok := fuo.mutation.UpdatedAt(); !ok && !fuo.mutation.UpdatedAtCleared() {
		if file.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized file.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := file.UpdateDefaultUpdatedAt()
		fuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FileUpdateOne) check() error {
	if v, ok := fuo.mutation.ProvidedFileSize(); ok {
		if err := file.ProvidedFileSizeValidator(v); err != nil {
			return &ValidationError{Name: "provided_file_size", err: fmt.Errorf(`generated: validator failed for field "File.provided_file_size": %w`, err)}
		}
	}
	if v, ok := fuo.mutation.PersistedFileSize(); ok {
		if err := file.PersistedFileSizeValidator(v); err != nil {
			return &ValidationError{Name: "persisted_file_size", err: fmt.Errorf(`generated: validator failed for field "File.persisted_file_size": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (fuo *FileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUpdateOne {
	fuo.modifiers = append(fuo.modifiers, modifiers...)
	return fuo
}

func (fuo *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fuo.mutation.CreatedAtCleared() {
		_spec.ClearField(file.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fuo.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if fuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(file.FieldUpdatedAt, field.TypeTime)
	}
	if fuo.mutation.CreatedByCleared() {
		_spec.ClearField(file.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fuo.mutation.UpdatedBy(); ok {
		_spec.SetField(file.FieldUpdatedBy, field.TypeString, value)
	}
	if fuo.mutation.UpdatedByCleared() {
		_spec.ClearField(file.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := fuo.mutation.DeletedAt(); ok {
		_spec.SetField(file.FieldDeletedAt, field.TypeTime, value)
	}
	if fuo.mutation.DeletedAtCleared() {
		_spec.ClearField(file.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fuo.mutation.DeletedBy(); ok {
		_spec.SetField(file.FieldDeletedBy, field.TypeString, value)
	}
	if fuo.mutation.DeletedByCleared() {
		_spec.ClearField(file.FieldDeletedBy, field.TypeString)
	}
	if value, ok := fuo.mutation.Tags(); ok {
		_spec.SetField(file.FieldTags, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, file.FieldTags, value)
		})
	}
	if fuo.mutation.TagsCleared() {
		_spec.ClearField(file.FieldTags, field.TypeJSON)
	}
	if value, ok := fuo.mutation.ProvidedFileName(); ok {
		_spec.SetField(file.FieldProvidedFileName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ProvidedFileExtension(); ok {
		_spec.SetField(file.FieldProvidedFileExtension, field.TypeString, value)
	}
	if value, ok := fuo.mutation.ProvidedFileSize(); ok {
		_spec.SetField(file.FieldProvidedFileSize, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedProvidedFileSize(); ok {
		_spec.AddField(file.FieldProvidedFileSize, field.TypeInt64, value)
	}
	if fuo.mutation.ProvidedFileSizeCleared() {
		_spec.ClearField(file.FieldProvidedFileSize, field.TypeInt64)
	}
	if value, ok := fuo.mutation.PersistedFileSize(); ok {
		_spec.SetField(file.FieldPersistedFileSize, field.TypeInt64, value)
	}
	if value, ok := fuo.mutation.AddedPersistedFileSize(); ok {
		_spec.AddField(file.FieldPersistedFileSize, field.TypeInt64, value)
	}
	if fuo.mutation.PersistedFileSizeCleared() {
		_spec.ClearField(file.FieldPersistedFileSize, field.TypeInt64)
	}
	if value, ok := fuo.mutation.DetectedMimeType(); ok {
		_spec.SetField(file.FieldDetectedMimeType, field.TypeString, value)
	}
	if fuo.mutation.DetectedMimeTypeCleared() {
		_spec.ClearField(file.FieldDetectedMimeType, field.TypeString)
	}
	if value, ok := fuo.mutation.Md5Hash(); ok {
		_spec.SetField(file.FieldMd5Hash, field.TypeString, value)
	}
	if fuo.mutation.Md5HashCleared() {
		_spec.ClearField(file.FieldMd5Hash, field.TypeString)
	}
	if value, ok := fuo.mutation.DetectedContentType(); ok {
		_spec.SetField(file.FieldDetectedContentType, field.TypeString, value)
	}
	if value, ok := fuo.mutation.StoreKey(); ok {
		_spec.SetField(file.FieldStoreKey, field.TypeString, value)
	}
	if fuo.mutation.StoreKeyCleared() {
		_spec.ClearField(file.FieldStoreKey, field.TypeString)
	}
	if value, ok := fuo.mutation.CategoryType(); ok {
		_spec.SetField(file.FieldCategoryType, field.TypeString, value)
	}
	if fuo.mutation.CategoryTypeCleared() {
		_spec.ClearField(file.FieldCategoryType, field.TypeString)
	}
	if value, ok := fuo.mutation.URI(); ok {
		_spec.SetField(file.FieldURI, field.TypeString, value)
	}
	if fuo.mutation.URICleared() {
		_spec.ClearField(file.FieldURI, field.TypeString)
	}
	if value, ok := fuo.mutation.StorageScheme(); ok {
		_spec.SetField(file.FieldStorageScheme, field.TypeString, value)
	}
	if fuo.mutation.StorageSchemeCleared() {
		_spec.ClearField(file.FieldStorageScheme, field.TypeString)
	}
	if value, ok := fuo.mutation.StorageVolume(); ok {
		_spec.SetField(file.FieldStorageVolume, field.TypeString, value)
	}
	if fuo.mutation.StorageVolumeCleared() {
		_spec.ClearField(file.FieldStorageVolume, field.TypeString)
	}
	if value, ok := fuo.mutation.StoragePath(); ok {
		_spec.SetField(file.FieldStoragePath, field.TypeString, value)
	}
	if fuo.mutation.StoragePathCleared() {
		_spec.ClearField(file.FieldStoragePath, field.TypeString)
	}
	if value, ok := fuo.mutation.FileContents(); ok {
		_spec.SetField(file.FieldFileContents, field.TypeBytes, value)
	}
	if fuo.mutation.FileContentsCleared() {
		_spec.ClearField(file.FieldFileContents, field.TypeBytes)
	}
	if fuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.UserFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !fuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.UserFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.UserFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.OrganizationFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !fuo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupTable,
			Columns: file.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.GroupFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedGroupIDs(); len(nodes) > 0 && !fuo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupTable,
			Columns: file.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupTable,
			Columns: file.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.ContactFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedContactIDs(); len(nodes) > 0 && !fuo.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.EntityFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedEntityIDs(); len(nodes) > 0 && !fuo.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.UsersettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UsersettingTable,
			Columns: file.UsersettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.UserSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedUsersettingIDs(); len(nodes) > 0 && !fuo.mutation.UsersettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UsersettingTable,
			Columns: file.UsersettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.UsersettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UsersettingTable,
			Columns: file.UsersettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.OrganizationsettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationsettingTable,
			Columns: file.OrganizationsettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.OrganizationSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedOrganizationsettingIDs(); len(nodes) > 0 && !fuo.mutation.OrganizationsettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationsettingTable,
			Columns: file.OrganizationsettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.OrganizationsettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationsettingTable,
			Columns: file.OrganizationsettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.TemplateFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedTemplateIDs(); len(nodes) > 0 && !fuo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.TemplateFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.TemplateFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.DocumentdataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentdataTable,
			Columns: file.DocumentdataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.DocumentDataFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedDocumentdataIDs(); len(nodes) > 0 && !fuo.mutation.DocumentdataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentdataTable,
			Columns: file.DocumentdataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.DocumentDataFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.DocumentdataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentdataTable,
			Columns: file.DocumentdataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.DocumentDataFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.FileEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !fuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.ProgramFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedProgramIDs(); len(nodes) > 0 && !fuo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = fuo.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = fuo.schemaConfig.File
	ctx = internal.NewSchemaConfigContext(ctx, fuo.schemaConfig)
	_spec.AddModifiers(fuo.modifiers...)
	_node = &File{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
