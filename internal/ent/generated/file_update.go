// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks     []Hook
	mutation  *FileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FileUpdate builder.
func (_u *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FileUpdate) SetUpdatedAt(v time.Time) *FileUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *FileUpdate) ClearUpdatedAt() *FileUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *FileUpdate) SetUpdatedBy(v string) *FileUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *FileUpdate) SetNillableUpdatedBy(v *string) *FileUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *FileUpdate) ClearUpdatedBy() *FileUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *FileUpdate) SetDeletedAt(v time.Time) *FileUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *FileUpdate) SetNillableDeletedAt(v *time.Time) *FileUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *FileUpdate) ClearDeletedAt() *FileUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *FileUpdate) SetDeletedBy(v string) *FileUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *FileUpdate) SetNillableDeletedBy(v *string) *FileUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *FileUpdate) ClearDeletedBy() *FileUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *FileUpdate) SetTags(v []string) *FileUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *FileUpdate) AppendTags(v []string) *FileUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *FileUpdate) ClearTags() *FileUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetProvidedFileName sets the "provided_file_name" field.
func (_u *FileUpdate) SetProvidedFileName(v string) *FileUpdate {
	_u.mutation.SetProvidedFileName(v)
	return _u
}

// SetNillableProvidedFileName sets the "provided_file_name" field if the given value is not nil.
func (_u *FileUpdate) SetNillableProvidedFileName(v *string) *FileUpdate {
	if v != nil {
		_u.SetProvidedFileName(*v)
	}
	return _u
}

// SetProvidedFileExtension sets the "provided_file_extension" field.
func (_u *FileUpdate) SetProvidedFileExtension(v string) *FileUpdate {
	_u.mutation.SetProvidedFileExtension(v)
	return _u
}

// SetNillableProvidedFileExtension sets the "provided_file_extension" field if the given value is not nil.
func (_u *FileUpdate) SetNillableProvidedFileExtension(v *string) *FileUpdate {
	if v != nil {
		_u.SetProvidedFileExtension(*v)
	}
	return _u
}

// SetProvidedFileSize sets the "provided_file_size" field.
func (_u *FileUpdate) SetProvidedFileSize(v int64) *FileUpdate {
	_u.mutation.ResetProvidedFileSize()
	_u.mutation.SetProvidedFileSize(v)
	return _u
}

// SetNillableProvidedFileSize sets the "provided_file_size" field if the given value is not nil.
func (_u *FileUpdate) SetNillableProvidedFileSize(v *int64) *FileUpdate {
	if v != nil {
		_u.SetProvidedFileSize(*v)
	}
	return _u
}

// AddProvidedFileSize adds value to the "provided_file_size" field.
func (_u *FileUpdate) AddProvidedFileSize(v int64) *FileUpdate {
	_u.mutation.AddProvidedFileSize(v)
	return _u
}

// ClearProvidedFileSize clears the value of the "provided_file_size" field.
func (_u *FileUpdate) ClearProvidedFileSize() *FileUpdate {
	_u.mutation.ClearProvidedFileSize()
	return _u
}

// SetPersistedFileSize sets the "persisted_file_size" field.
func (_u *FileUpdate) SetPersistedFileSize(v int64) *FileUpdate {
	_u.mutation.ResetPersistedFileSize()
	_u.mutation.SetPersistedFileSize(v)
	return _u
}

// SetNillablePersistedFileSize sets the "persisted_file_size" field if the given value is not nil.
func (_u *FileUpdate) SetNillablePersistedFileSize(v *int64) *FileUpdate {
	if v != nil {
		_u.SetPersistedFileSize(*v)
	}
	return _u
}

// AddPersistedFileSize adds value to the "persisted_file_size" field.
func (_u *FileUpdate) AddPersistedFileSize(v int64) *FileUpdate {
	_u.mutation.AddPersistedFileSize(v)
	return _u
}

// ClearPersistedFileSize clears the value of the "persisted_file_size" field.
func (_u *FileUpdate) ClearPersistedFileSize() *FileUpdate {
	_u.mutation.ClearPersistedFileSize()
	return _u
}

// SetDetectedMimeType sets the "detected_mime_type" field.
func (_u *FileUpdate) SetDetectedMimeType(v string) *FileUpdate {
	_u.mutation.SetDetectedMimeType(v)
	return _u
}

// SetNillableDetectedMimeType sets the "detected_mime_type" field if the given value is not nil.
func (_u *FileUpdate) SetNillableDetectedMimeType(v *string) *FileUpdate {
	if v != nil {
		_u.SetDetectedMimeType(*v)
	}
	return _u
}

// ClearDetectedMimeType clears the value of the "detected_mime_type" field.
func (_u *FileUpdate) ClearDetectedMimeType() *FileUpdate {
	_u.mutation.ClearDetectedMimeType()
	return _u
}

// SetMd5Hash sets the "md5_hash" field.
func (_u *FileUpdate) SetMd5Hash(v string) *FileUpdate {
	_u.mutation.SetMd5Hash(v)
	return _u
}

// SetNillableMd5Hash sets the "md5_hash" field if the given value is not nil.
func (_u *FileUpdate) SetNillableMd5Hash(v *string) *FileUpdate {
	if v != nil {
		_u.SetMd5Hash(*v)
	}
	return _u
}

// ClearMd5Hash clears the value of the "md5_hash" field.
func (_u *FileUpdate) ClearMd5Hash() *FileUpdate {
	_u.mutation.ClearMd5Hash()
	return _u
}

// SetDetectedContentType sets the "detected_content_type" field.
func (_u *FileUpdate) SetDetectedContentType(v string) *FileUpdate {
	_u.mutation.SetDetectedContentType(v)
	return _u
}

// SetNillableDetectedContentType sets the "detected_content_type" field if the given value is not nil.
func (_u *FileUpdate) SetNillableDetectedContentType(v *string) *FileUpdate {
	if v != nil {
		_u.SetDetectedContentType(*v)
	}
	return _u
}

// SetStoreKey sets the "store_key" field.
func (_u *FileUpdate) SetStoreKey(v string) *FileUpdate {
	_u.mutation.SetStoreKey(v)
	return _u
}

// SetNillableStoreKey sets the "store_key" field if the given value is not nil.
func (_u *FileUpdate) SetNillableStoreKey(v *string) *FileUpdate {
	if v != nil {
		_u.SetStoreKey(*v)
	}
	return _u
}

// ClearStoreKey clears the value of the "store_key" field.
func (_u *FileUpdate) ClearStoreKey() *FileUpdate {
	_u.mutation.ClearStoreKey()
	return _u
}

// SetCategoryType sets the "category_type" field.
func (_u *FileUpdate) SetCategoryType(v string) *FileUpdate {
	_u.mutation.SetCategoryType(v)
	return _u
}

// SetNillableCategoryType sets the "category_type" field if the given value is not nil.
func (_u *FileUpdate) SetNillableCategoryType(v *string) *FileUpdate {
	if v != nil {
		_u.SetCategoryType(*v)
	}
	return _u
}

// ClearCategoryType clears the value of the "category_type" field.
func (_u *FileUpdate) ClearCategoryType() *FileUpdate {
	_u.mutation.ClearCategoryType()
	return _u
}

// SetURI sets the "uri" field.
func (_u *FileUpdate) SetURI(v string) *FileUpdate {
	_u.mutation.SetURI(v)
	return _u
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (_u *FileUpdate) SetNillableURI(v *string) *FileUpdate {
	if v != nil {
		_u.SetURI(*v)
	}
	return _u
}

// ClearURI clears the value of the "uri" field.
func (_u *FileUpdate) ClearURI() *FileUpdate {
	_u.mutation.ClearURI()
	return _u
}

// SetStorageScheme sets the "storage_scheme" field.
func (_u *FileUpdate) SetStorageScheme(v string) *FileUpdate {
	_u.mutation.SetStorageScheme(v)
	return _u
}

// SetNillableStorageScheme sets the "storage_scheme" field if the given value is not nil.
func (_u *FileUpdate) SetNillableStorageScheme(v *string) *FileUpdate {
	if v != nil {
		_u.SetStorageScheme(*v)
	}
	return _u
}

// ClearStorageScheme clears the value of the "storage_scheme" field.
func (_u *FileUpdate) ClearStorageScheme() *FileUpdate {
	_u.mutation.ClearStorageScheme()
	return _u
}

// SetStorageVolume sets the "storage_volume" field.
func (_u *FileUpdate) SetStorageVolume(v string) *FileUpdate {
	_u.mutation.SetStorageVolume(v)
	return _u
}

// SetNillableStorageVolume sets the "storage_volume" field if the given value is not nil.
func (_u *FileUpdate) SetNillableStorageVolume(v *string) *FileUpdate {
	if v != nil {
		_u.SetStorageVolume(*v)
	}
	return _u
}

// ClearStorageVolume clears the value of the "storage_volume" field.
func (_u *FileUpdate) ClearStorageVolume() *FileUpdate {
	_u.mutation.ClearStorageVolume()
	return _u
}

// SetStoragePath sets the "storage_path" field.
func (_u *FileUpdate) SetStoragePath(v string) *FileUpdate {
	_u.mutation.SetStoragePath(v)
	return _u
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (_u *FileUpdate) SetNillableStoragePath(v *string) *FileUpdate {
	if v != nil {
		_u.SetStoragePath(*v)
	}
	return _u
}

// ClearStoragePath clears the value of the "storage_path" field.
func (_u *FileUpdate) ClearStoragePath() *FileUpdate {
	_u.mutation.ClearStoragePath()
	return _u
}

// SetFileContents sets the "file_contents" field.
func (_u *FileUpdate) SetFileContents(v []byte) *FileUpdate {
	_u.mutation.SetFileContents(v)
	return _u
}

// ClearFileContents clears the value of the "file_contents" field.
func (_u *FileUpdate) ClearFileContents() *FileUpdate {
	_u.mutation.ClearFileContents()
	return _u
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (_u *FileUpdate) AddUserIDs(ids ...string) *FileUpdate {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUser adds the "user" edges to the User entity.
func (_u *FileUpdate) AddUser(v ...*User) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (_u *FileUpdate) AddOrganizationIDs(ids ...string) *FileUpdate {
	_u.mutation.AddOrganizationIDs(ids...)
	return _u
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (_u *FileUpdate) AddOrganization(v ...*Organization) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrganizationIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (_u *FileUpdate) AddGroupIDs(ids ...string) *FileUpdate {
	_u.mutation.AddGroupIDs(ids...)
	return _u
}

// AddGroups adds the "groups" edges to the Group entity.
func (_u *FileUpdate) AddGroups(v ...*Group) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupIDs(ids...)
}

// AddContactIDs adds the "contact" edge to the Contact entity by IDs.
func (_u *FileUpdate) AddContactIDs(ids ...string) *FileUpdate {
	_u.mutation.AddContactIDs(ids...)
	return _u
}

// AddContact adds the "contact" edges to the Contact entity.
func (_u *FileUpdate) AddContact(v ...*Contact) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddContactIDs(ids...)
}

// AddEntityIDs adds the "entity" edge to the Entity entity by IDs.
func (_u *FileUpdate) AddEntityIDs(ids ...string) *FileUpdate {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntity adds the "entity" edges to the Entity entity.
func (_u *FileUpdate) AddEntity(v ...*Entity) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// AddUserSettingIDs adds the "user_setting" edge to the UserSetting entity by IDs.
func (_u *FileUpdate) AddUserSettingIDs(ids ...string) *FileUpdate {
	_u.mutation.AddUserSettingIDs(ids...)
	return _u
}

// AddUserSetting adds the "user_setting" edges to the UserSetting entity.
func (_u *FileUpdate) AddUserSetting(v ...*UserSetting) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserSettingIDs(ids...)
}

// AddOrganizationSettingIDs adds the "organization_setting" edge to the OrganizationSetting entity by IDs.
func (_u *FileUpdate) AddOrganizationSettingIDs(ids ...string) *FileUpdate {
	_u.mutation.AddOrganizationSettingIDs(ids...)
	return _u
}

// AddOrganizationSetting adds the "organization_setting" edges to the OrganizationSetting entity.
func (_u *FileUpdate) AddOrganizationSetting(v ...*OrganizationSetting) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrganizationSettingIDs(ids...)
}

// AddTemplateIDs adds the "template" edge to the Template entity by IDs.
func (_u *FileUpdate) AddTemplateIDs(ids ...string) *FileUpdate {
	_u.mutation.AddTemplateIDs(ids...)
	return _u
}

// AddTemplate adds the "template" edges to the Template entity.
func (_u *FileUpdate) AddTemplate(v ...*Template) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTemplateIDs(ids...)
}

// AddDocumentIDs adds the "document" edge to the DocumentData entity by IDs.
func (_u *FileUpdate) AddDocumentIDs(ids ...string) *FileUpdate {
	_u.mutation.AddDocumentIDs(ids...)
	return _u
}

// AddDocument adds the "document" edges to the DocumentData entity.
func (_u *FileUpdate) AddDocument(v ...*DocumentData) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDocumentIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (_u *FileUpdate) AddProgramIDs(ids ...string) *FileUpdate {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddProgram adds the "program" edges to the Program entity.
func (_u *FileUpdate) AddProgram(v ...*Program) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (_u *FileUpdate) AddEvidenceIDs(ids ...string) *FileUpdate {
	_u.mutation.AddEvidenceIDs(ids...)
	return _u
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (_u *FileUpdate) AddEvidence(v ...*Evidence) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEvidenceIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *FileUpdate) AddEventIDs(ids ...string) *FileUpdate {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *FileUpdate) AddEvents(v ...*Event) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// AddTrustCenterSettingIDs adds the "trust_center_setting" edge to the TrustCenterSetting entity by IDs.
func (_u *FileUpdate) AddTrustCenterSettingIDs(ids ...string) *FileUpdate {
	_u.mutation.AddTrustCenterSettingIDs(ids...)
	return _u
}

// AddTrustCenterSetting adds the "trust_center_setting" edges to the TrustCenterSetting entity.
func (_u *FileUpdate) AddTrustCenterSetting(v ...*TrustCenterSetting) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTrustCenterSettingIDs(ids...)
}

// AddSubprocessorIDs adds the "subprocessor" edge to the Subprocessor entity by IDs.
func (_u *FileUpdate) AddSubprocessorIDs(ids ...string) *FileUpdate {
	_u.mutation.AddSubprocessorIDs(ids...)
	return _u
}

// AddSubprocessor adds the "subprocessor" edges to the Subprocessor entity.
func (_u *FileUpdate) AddSubprocessor(v ...*Subprocessor) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubprocessorIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (_u *FileUpdate) Mutation() *FileMutation {
	return _u.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (_u *FileUpdate) ClearUser() *FileUpdate {
	_u.mutation.ClearUser()
	return _u
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (_u *FileUpdate) RemoveUserIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUser removes "user" edges to User entities.
func (_u *FileUpdate) RemoveUser(v ...*User) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (_u *FileUpdate) ClearOrganization() *FileUpdate {
	_u.mutation.ClearOrganization()
	return _u
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (_u *FileUpdate) RemoveOrganizationIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveOrganizationIDs(ids...)
	return _u
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (_u *FileUpdate) RemoveOrganization(v ...*Organization) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrganizationIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (_u *FileUpdate) ClearGroups() *FileUpdate {
	_u.mutation.ClearGroups()
	return _u
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (_u *FileUpdate) RemoveGroupIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveGroupIDs(ids...)
	return _u
}

// RemoveGroups removes "groups" edges to Group entities.
func (_u *FileUpdate) RemoveGroups(v ...*Group) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupIDs(ids...)
}

// ClearContact clears all "contact" edges to the Contact entity.
func (_u *FileUpdate) ClearContact() *FileUpdate {
	_u.mutation.ClearContact()
	return _u
}

// RemoveContactIDs removes the "contact" edge to Contact entities by IDs.
func (_u *FileUpdate) RemoveContactIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveContactIDs(ids...)
	return _u
}

// RemoveContact removes "contact" edges to Contact entities.
func (_u *FileUpdate) RemoveContact(v ...*Contact) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveContactIDs(ids...)
}

// ClearEntity clears all "entity" edges to the Entity entity.
func (_u *FileUpdate) ClearEntity() *FileUpdate {
	_u.mutation.ClearEntity()
	return _u
}

// RemoveEntityIDs removes the "entity" edge to Entity entities by IDs.
func (_u *FileUpdate) RemoveEntityIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntity removes "entity" edges to Entity entities.
func (_u *FileUpdate) RemoveEntity(v ...*Entity) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// ClearUserSetting clears all "user_setting" edges to the UserSetting entity.
func (_u *FileUpdate) ClearUserSetting() *FileUpdate {
	_u.mutation.ClearUserSetting()
	return _u
}

// RemoveUserSettingIDs removes the "user_setting" edge to UserSetting entities by IDs.
func (_u *FileUpdate) RemoveUserSettingIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveUserSettingIDs(ids...)
	return _u
}

// RemoveUserSetting removes "user_setting" edges to UserSetting entities.
func (_u *FileUpdate) RemoveUserSetting(v ...*UserSetting) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserSettingIDs(ids...)
}

// ClearOrganizationSetting clears all "organization_setting" edges to the OrganizationSetting entity.
func (_u *FileUpdate) ClearOrganizationSetting() *FileUpdate {
	_u.mutation.ClearOrganizationSetting()
	return _u
}

// RemoveOrganizationSettingIDs removes the "organization_setting" edge to OrganizationSetting entities by IDs.
func (_u *FileUpdate) RemoveOrganizationSettingIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveOrganizationSettingIDs(ids...)
	return _u
}

// RemoveOrganizationSetting removes "organization_setting" edges to OrganizationSetting entities.
func (_u *FileUpdate) RemoveOrganizationSetting(v ...*OrganizationSetting) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrganizationSettingIDs(ids...)
}

// ClearTemplate clears all "template" edges to the Template entity.
func (_u *FileUpdate) ClearTemplate() *FileUpdate {
	_u.mutation.ClearTemplate()
	return _u
}

// RemoveTemplateIDs removes the "template" edge to Template entities by IDs.
func (_u *FileUpdate) RemoveTemplateIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveTemplateIDs(ids...)
	return _u
}

// RemoveTemplate removes "template" edges to Template entities.
func (_u *FileUpdate) RemoveTemplate(v ...*Template) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTemplateIDs(ids...)
}

// ClearDocument clears all "document" edges to the DocumentData entity.
func (_u *FileUpdate) ClearDocument() *FileUpdate {
	_u.mutation.ClearDocument()
	return _u
}

// RemoveDocumentIDs removes the "document" edge to DocumentData entities by IDs.
func (_u *FileUpdate) RemoveDocumentIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveDocumentIDs(ids...)
	return _u
}

// RemoveDocument removes "document" edges to DocumentData entities.
func (_u *FileUpdate) RemoveDocument(v ...*DocumentData) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDocumentIDs(ids...)
}

// ClearProgram clears all "program" edges to the Program entity.
func (_u *FileUpdate) ClearProgram() *FileUpdate {
	_u.mutation.ClearProgram()
	return _u
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (_u *FileUpdate) RemoveProgramIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemoveProgram removes "program" edges to Program entities.
func (_u *FileUpdate) RemoveProgram(v ...*Program) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearEvidence clears all "evidence" edges to the Evidence entity.
func (_u *FileUpdate) ClearEvidence() *FileUpdate {
	_u.mutation.ClearEvidence()
	return _u
}

// RemoveEvidenceIDs removes the "evidence" edge to Evidence entities by IDs.
func (_u *FileUpdate) RemoveEvidenceIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveEvidenceIDs(ids...)
	return _u
}

// RemoveEvidence removes "evidence" edges to Evidence entities.
func (_u *FileUpdate) RemoveEvidence(v ...*Evidence) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEvidenceIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *FileUpdate) ClearEvents() *FileUpdate {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *FileUpdate) RemoveEventIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *FileUpdate) RemoveEvents(v ...*Event) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// ClearTrustCenterSetting clears all "trust_center_setting" edges to the TrustCenterSetting entity.
func (_u *FileUpdate) ClearTrustCenterSetting() *FileUpdate {
	_u.mutation.ClearTrustCenterSetting()
	return _u
}

// RemoveTrustCenterSettingIDs removes the "trust_center_setting" edge to TrustCenterSetting entities by IDs.
func (_u *FileUpdate) RemoveTrustCenterSettingIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveTrustCenterSettingIDs(ids...)
	return _u
}

// RemoveTrustCenterSetting removes "trust_center_setting" edges to TrustCenterSetting entities.
func (_u *FileUpdate) RemoveTrustCenterSetting(v ...*TrustCenterSetting) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTrustCenterSettingIDs(ids...)
}

// ClearSubprocessor clears all "subprocessor" edges to the Subprocessor entity.
func (_u *FileUpdate) ClearSubprocessor() *FileUpdate {
	_u.mutation.ClearSubprocessor()
	return _u
}

// RemoveSubprocessorIDs removes the "subprocessor" edge to Subprocessor entities by IDs.
func (_u *FileUpdate) RemoveSubprocessorIDs(ids ...string) *FileUpdate {
	_u.mutation.RemoveSubprocessorIDs(ids...)
	return _u
}

// RemoveSubprocessor removes "subprocessor" edges to Subprocessor entities.
func (_u *FileUpdate) RemoveSubprocessor(v ...*Subprocessor) *FileUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubprocessorIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FileUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FileUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FileUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if file.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized file.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := file.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileUpdate) check() error {
	if v, ok := _u.mutation.ProvidedFileSize(); ok {
		if err := file.ProvidedFileSizeValidator(v); err != nil {
			return &ValidationError{Name: "provided_file_size", err: fmt.Errorf(`generated: validator failed for field "File.provided_file_size": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PersistedFileSize(); ok {
		if err := file.PersistedFileSizeValidator(v); err != nil {
			return &ValidationError{Name: "persisted_file_size", err: fmt.Errorf(`generated: validator failed for field "File.persisted_file_size": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *FileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *FileUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(file.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(file.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(file.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(file.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(file.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(file.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(file.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(file.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(file.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(file.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, file.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(file.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.ProvidedFileName(); ok {
		_spec.SetField(file.FieldProvidedFileName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProvidedFileExtension(); ok {
		_spec.SetField(file.FieldProvidedFileExtension, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProvidedFileSize(); ok {
		_spec.SetField(file.FieldProvidedFileSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedProvidedFileSize(); ok {
		_spec.AddField(file.FieldProvidedFileSize, field.TypeInt64, value)
	}
	if _u.mutation.ProvidedFileSizeCleared() {
		_spec.ClearField(file.FieldProvidedFileSize, field.TypeInt64)
	}
	if value, ok := _u.mutation.PersistedFileSize(); ok {
		_spec.SetField(file.FieldPersistedFileSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPersistedFileSize(); ok {
		_spec.AddField(file.FieldPersistedFileSize, field.TypeInt64, value)
	}
	if _u.mutation.PersistedFileSizeCleared() {
		_spec.ClearField(file.FieldPersistedFileSize, field.TypeInt64)
	}
	if value, ok := _u.mutation.DetectedMimeType(); ok {
		_spec.SetField(file.FieldDetectedMimeType, field.TypeString, value)
	}
	if _u.mutation.DetectedMimeTypeCleared() {
		_spec.ClearField(file.FieldDetectedMimeType, field.TypeString)
	}
	if value, ok := _u.mutation.Md5Hash(); ok {
		_spec.SetField(file.FieldMd5Hash, field.TypeString, value)
	}
	if _u.mutation.Md5HashCleared() {
		_spec.ClearField(file.FieldMd5Hash, field.TypeString)
	}
	if value, ok := _u.mutation.DetectedContentType(); ok {
		_spec.SetField(file.FieldDetectedContentType, field.TypeString, value)
	}
	if value, ok := _u.mutation.StoreKey(); ok {
		_spec.SetField(file.FieldStoreKey, field.TypeString, value)
	}
	if _u.mutation.StoreKeyCleared() {
		_spec.ClearField(file.FieldStoreKey, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryType(); ok {
		_spec.SetField(file.FieldCategoryType, field.TypeString, value)
	}
	if _u.mutation.CategoryTypeCleared() {
		_spec.ClearField(file.FieldCategoryType, field.TypeString)
	}
	if value, ok := _u.mutation.URI(); ok {
		_spec.SetField(file.FieldURI, field.TypeString, value)
	}
	if _u.mutation.URICleared() {
		_spec.ClearField(file.FieldURI, field.TypeString)
	}
	if value, ok := _u.mutation.StorageScheme(); ok {
		_spec.SetField(file.FieldStorageScheme, field.TypeString, value)
	}
	if _u.mutation.StorageSchemeCleared() {
		_spec.ClearField(file.FieldStorageScheme, field.TypeString)
	}
	if value, ok := _u.mutation.StorageVolume(); ok {
		_spec.SetField(file.FieldStorageVolume, field.TypeString, value)
	}
	if _u.mutation.StorageVolumeCleared() {
		_spec.ClearField(file.FieldStorageVolume, field.TypeString)
	}
	if value, ok := _u.mutation.StoragePath(); ok {
		_spec.SetField(file.FieldStoragePath, field.TypeString, value)
	}
	if _u.mutation.StoragePathCleared() {
		_spec.ClearField(file.FieldStoragePath, field.TypeString)
	}
	if value, ok := _u.mutation.FileContents(); ok {
		_spec.SetField(file.FieldFileContents, field.TypeBytes, value)
	}
	if _u.mutation.FileContentsCleared() {
		_spec.ClearField(file.FieldFileContents, field.TypeBytes)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserIDs(); len(nodes) > 0 && !_u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !_u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupsTable,
			Columns: file.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !_u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupsTable,
			Columns: file.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupsTable,
			Columns: file.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ContactFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedContactIDs(); len(nodes) > 0 && !_u.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntityIDs(); len(nodes) > 0 && !_u.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserSettingTable,
			Columns: file.UserSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserSettingIDs(); len(nodes) > 0 && !_u.mutation.UserSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserSettingTable,
			Columns: file.UserSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserSettingTable,
			Columns: file.UserSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrganizationSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationSettingTable,
			Columns: file.OrganizationSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrganizationSettingIDs(); len(nodes) > 0 && !_u.mutation.OrganizationSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationSettingTable,
			Columns: file.OrganizationSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationSettingTable,
			Columns: file.OrganizationSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTemplateIDs(); len(nodes) > 0 && !_u.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentTable,
			Columns: file.DocumentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DocumentDataFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDocumentIDs(); len(nodes) > 0 && !_u.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentTable,
			Columns: file.DocumentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DocumentDataFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentTable,
			Columns: file.DocumentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DocumentDataFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramIDs(); len(nodes) > 0 && !_u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EvidenceTable,
			Columns: file.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEvidenceIDs(); len(nodes) > 0 && !_u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EvidenceTable,
			Columns: file.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EvidenceTable,
			Columns: file.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TrustCenterSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TrustCenterSettingTable,
			Columns: file.TrustCenterSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTrustCenterSettingIDs(); len(nodes) > 0 && !_u.mutation.TrustCenterSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TrustCenterSettingTable,
			Columns: file.TrustCenterSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TrustCenterSettingTable,
			Columns: file.TrustCenterSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubprocessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.SubprocessorTable,
			Columns: file.SubprocessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubprocessorFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubprocessorIDs(); len(nodes) > 0 && !_u.mutation.SubprocessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.SubprocessorTable,
			Columns: file.SubprocessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubprocessorFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubprocessorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.SubprocessorTable,
			Columns: file.SubprocessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubprocessorFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.File
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FileUpdateOne) SetUpdatedAt(v time.Time) *FileUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *FileUpdateOne) ClearUpdatedAt() *FileUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *FileUpdateOne) SetUpdatedBy(v string) *FileUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableUpdatedBy(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *FileUpdateOne) ClearUpdatedBy() *FileUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *FileUpdateOne) SetDeletedAt(v time.Time) *FileUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableDeletedAt(v *time.Time) *FileUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *FileUpdateOne) ClearDeletedAt() *FileUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *FileUpdateOne) SetDeletedBy(v string) *FileUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableDeletedBy(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *FileUpdateOne) ClearDeletedBy() *FileUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *FileUpdateOne) SetTags(v []string) *FileUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *FileUpdateOne) AppendTags(v []string) *FileUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *FileUpdateOne) ClearTags() *FileUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetProvidedFileName sets the "provided_file_name" field.
func (_u *FileUpdateOne) SetProvidedFileName(v string) *FileUpdateOne {
	_u.mutation.SetProvidedFileName(v)
	return _u
}

// SetNillableProvidedFileName sets the "provided_file_name" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableProvidedFileName(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetProvidedFileName(*v)
	}
	return _u
}

// SetProvidedFileExtension sets the "provided_file_extension" field.
func (_u *FileUpdateOne) SetProvidedFileExtension(v string) *FileUpdateOne {
	_u.mutation.SetProvidedFileExtension(v)
	return _u
}

// SetNillableProvidedFileExtension sets the "provided_file_extension" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableProvidedFileExtension(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetProvidedFileExtension(*v)
	}
	return _u
}

// SetProvidedFileSize sets the "provided_file_size" field.
func (_u *FileUpdateOne) SetProvidedFileSize(v int64) *FileUpdateOne {
	_u.mutation.ResetProvidedFileSize()
	_u.mutation.SetProvidedFileSize(v)
	return _u
}

// SetNillableProvidedFileSize sets the "provided_file_size" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableProvidedFileSize(v *int64) *FileUpdateOne {
	if v != nil {
		_u.SetProvidedFileSize(*v)
	}
	return _u
}

// AddProvidedFileSize adds value to the "provided_file_size" field.
func (_u *FileUpdateOne) AddProvidedFileSize(v int64) *FileUpdateOne {
	_u.mutation.AddProvidedFileSize(v)
	return _u
}

// ClearProvidedFileSize clears the value of the "provided_file_size" field.
func (_u *FileUpdateOne) ClearProvidedFileSize() *FileUpdateOne {
	_u.mutation.ClearProvidedFileSize()
	return _u
}

// SetPersistedFileSize sets the "persisted_file_size" field.
func (_u *FileUpdateOne) SetPersistedFileSize(v int64) *FileUpdateOne {
	_u.mutation.ResetPersistedFileSize()
	_u.mutation.SetPersistedFileSize(v)
	return _u
}

// SetNillablePersistedFileSize sets the "persisted_file_size" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillablePersistedFileSize(v *int64) *FileUpdateOne {
	if v != nil {
		_u.SetPersistedFileSize(*v)
	}
	return _u
}

// AddPersistedFileSize adds value to the "persisted_file_size" field.
func (_u *FileUpdateOne) AddPersistedFileSize(v int64) *FileUpdateOne {
	_u.mutation.AddPersistedFileSize(v)
	return _u
}

// ClearPersistedFileSize clears the value of the "persisted_file_size" field.
func (_u *FileUpdateOne) ClearPersistedFileSize() *FileUpdateOne {
	_u.mutation.ClearPersistedFileSize()
	return _u
}

// SetDetectedMimeType sets the "detected_mime_type" field.
func (_u *FileUpdateOne) SetDetectedMimeType(v string) *FileUpdateOne {
	_u.mutation.SetDetectedMimeType(v)
	return _u
}

// SetNillableDetectedMimeType sets the "detected_mime_type" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableDetectedMimeType(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetDetectedMimeType(*v)
	}
	return _u
}

// ClearDetectedMimeType clears the value of the "detected_mime_type" field.
func (_u *FileUpdateOne) ClearDetectedMimeType() *FileUpdateOne {
	_u.mutation.ClearDetectedMimeType()
	return _u
}

// SetMd5Hash sets the "md5_hash" field.
func (_u *FileUpdateOne) SetMd5Hash(v string) *FileUpdateOne {
	_u.mutation.SetMd5Hash(v)
	return _u
}

// SetNillableMd5Hash sets the "md5_hash" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableMd5Hash(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetMd5Hash(*v)
	}
	return _u
}

// ClearMd5Hash clears the value of the "md5_hash" field.
func (_u *FileUpdateOne) ClearMd5Hash() *FileUpdateOne {
	_u.mutation.ClearMd5Hash()
	return _u
}

// SetDetectedContentType sets the "detected_content_type" field.
func (_u *FileUpdateOne) SetDetectedContentType(v string) *FileUpdateOne {
	_u.mutation.SetDetectedContentType(v)
	return _u
}

// SetNillableDetectedContentType sets the "detected_content_type" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableDetectedContentType(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetDetectedContentType(*v)
	}
	return _u
}

// SetStoreKey sets the "store_key" field.
func (_u *FileUpdateOne) SetStoreKey(v string) *FileUpdateOne {
	_u.mutation.SetStoreKey(v)
	return _u
}

// SetNillableStoreKey sets the "store_key" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableStoreKey(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetStoreKey(*v)
	}
	return _u
}

// ClearStoreKey clears the value of the "store_key" field.
func (_u *FileUpdateOne) ClearStoreKey() *FileUpdateOne {
	_u.mutation.ClearStoreKey()
	return _u
}

// SetCategoryType sets the "category_type" field.
func (_u *FileUpdateOne) SetCategoryType(v string) *FileUpdateOne {
	_u.mutation.SetCategoryType(v)
	return _u
}

// SetNillableCategoryType sets the "category_type" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableCategoryType(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetCategoryType(*v)
	}
	return _u
}

// ClearCategoryType clears the value of the "category_type" field.
func (_u *FileUpdateOne) ClearCategoryType() *FileUpdateOne {
	_u.mutation.ClearCategoryType()
	return _u
}

// SetURI sets the "uri" field.
func (_u *FileUpdateOne) SetURI(v string) *FileUpdateOne {
	_u.mutation.SetURI(v)
	return _u
}

// SetNillableURI sets the "uri" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableURI(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetURI(*v)
	}
	return _u
}

// ClearURI clears the value of the "uri" field.
func (_u *FileUpdateOne) ClearURI() *FileUpdateOne {
	_u.mutation.ClearURI()
	return _u
}

// SetStorageScheme sets the "storage_scheme" field.
func (_u *FileUpdateOne) SetStorageScheme(v string) *FileUpdateOne {
	_u.mutation.SetStorageScheme(v)
	return _u
}

// SetNillableStorageScheme sets the "storage_scheme" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableStorageScheme(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetStorageScheme(*v)
	}
	return _u
}

// ClearStorageScheme clears the value of the "storage_scheme" field.
func (_u *FileUpdateOne) ClearStorageScheme() *FileUpdateOne {
	_u.mutation.ClearStorageScheme()
	return _u
}

// SetStorageVolume sets the "storage_volume" field.
func (_u *FileUpdateOne) SetStorageVolume(v string) *FileUpdateOne {
	_u.mutation.SetStorageVolume(v)
	return _u
}

// SetNillableStorageVolume sets the "storage_volume" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableStorageVolume(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetStorageVolume(*v)
	}
	return _u
}

// ClearStorageVolume clears the value of the "storage_volume" field.
func (_u *FileUpdateOne) ClearStorageVolume() *FileUpdateOne {
	_u.mutation.ClearStorageVolume()
	return _u
}

// SetStoragePath sets the "storage_path" field.
func (_u *FileUpdateOne) SetStoragePath(v string) *FileUpdateOne {
	_u.mutation.SetStoragePath(v)
	return _u
}

// SetNillableStoragePath sets the "storage_path" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableStoragePath(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetStoragePath(*v)
	}
	return _u
}

// ClearStoragePath clears the value of the "storage_path" field.
func (_u *FileUpdateOne) ClearStoragePath() *FileUpdateOne {
	_u.mutation.ClearStoragePath()
	return _u
}

// SetFileContents sets the "file_contents" field.
func (_u *FileUpdateOne) SetFileContents(v []byte) *FileUpdateOne {
	_u.mutation.SetFileContents(v)
	return _u
}

// ClearFileContents clears the value of the "file_contents" field.
func (_u *FileUpdateOne) ClearFileContents() *FileUpdateOne {
	_u.mutation.ClearFileContents()
	return _u
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (_u *FileUpdateOne) AddUserIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUser adds the "user" edges to the User entity.
func (_u *FileUpdateOne) AddUser(v ...*User) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (_u *FileUpdateOne) AddOrganizationIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddOrganizationIDs(ids...)
	return _u
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (_u *FileUpdateOne) AddOrganization(v ...*Organization) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrganizationIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (_u *FileUpdateOne) AddGroupIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddGroupIDs(ids...)
	return _u
}

// AddGroups adds the "groups" edges to the Group entity.
func (_u *FileUpdateOne) AddGroups(v ...*Group) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupIDs(ids...)
}

// AddContactIDs adds the "contact" edge to the Contact entity by IDs.
func (_u *FileUpdateOne) AddContactIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddContactIDs(ids...)
	return _u
}

// AddContact adds the "contact" edges to the Contact entity.
func (_u *FileUpdateOne) AddContact(v ...*Contact) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddContactIDs(ids...)
}

// AddEntityIDs adds the "entity" edge to the Entity entity by IDs.
func (_u *FileUpdateOne) AddEntityIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntity adds the "entity" edges to the Entity entity.
func (_u *FileUpdateOne) AddEntity(v ...*Entity) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// AddUserSettingIDs adds the "user_setting" edge to the UserSetting entity by IDs.
func (_u *FileUpdateOne) AddUserSettingIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddUserSettingIDs(ids...)
	return _u
}

// AddUserSetting adds the "user_setting" edges to the UserSetting entity.
func (_u *FileUpdateOne) AddUserSetting(v ...*UserSetting) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserSettingIDs(ids...)
}

// AddOrganizationSettingIDs adds the "organization_setting" edge to the OrganizationSetting entity by IDs.
func (_u *FileUpdateOne) AddOrganizationSettingIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddOrganizationSettingIDs(ids...)
	return _u
}

// AddOrganizationSetting adds the "organization_setting" edges to the OrganizationSetting entity.
func (_u *FileUpdateOne) AddOrganizationSetting(v ...*OrganizationSetting) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrganizationSettingIDs(ids...)
}

// AddTemplateIDs adds the "template" edge to the Template entity by IDs.
func (_u *FileUpdateOne) AddTemplateIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddTemplateIDs(ids...)
	return _u
}

// AddTemplate adds the "template" edges to the Template entity.
func (_u *FileUpdateOne) AddTemplate(v ...*Template) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTemplateIDs(ids...)
}

// AddDocumentIDs adds the "document" edge to the DocumentData entity by IDs.
func (_u *FileUpdateOne) AddDocumentIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddDocumentIDs(ids...)
	return _u
}

// AddDocument adds the "document" edges to the DocumentData entity.
func (_u *FileUpdateOne) AddDocument(v ...*DocumentData) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDocumentIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (_u *FileUpdateOne) AddProgramIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddProgram adds the "program" edges to the Program entity.
func (_u *FileUpdateOne) AddProgram(v ...*Program) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (_u *FileUpdateOne) AddEvidenceIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddEvidenceIDs(ids...)
	return _u
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (_u *FileUpdateOne) AddEvidence(v ...*Evidence) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEvidenceIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *FileUpdateOne) AddEventIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *FileUpdateOne) AddEvents(v ...*Event) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// AddTrustCenterSettingIDs adds the "trust_center_setting" edge to the TrustCenterSetting entity by IDs.
func (_u *FileUpdateOne) AddTrustCenterSettingIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddTrustCenterSettingIDs(ids...)
	return _u
}

// AddTrustCenterSetting adds the "trust_center_setting" edges to the TrustCenterSetting entity.
func (_u *FileUpdateOne) AddTrustCenterSetting(v ...*TrustCenterSetting) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTrustCenterSettingIDs(ids...)
}

// AddSubprocessorIDs adds the "subprocessor" edge to the Subprocessor entity by IDs.
func (_u *FileUpdateOne) AddSubprocessorIDs(ids ...string) *FileUpdateOne {
	_u.mutation.AddSubprocessorIDs(ids...)
	return _u
}

// AddSubprocessor adds the "subprocessor" edges to the Subprocessor entity.
func (_u *FileUpdateOne) AddSubprocessor(v ...*Subprocessor) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubprocessorIDs(ids...)
}

// Mutation returns the FileMutation object of the builder.
func (_u *FileUpdateOne) Mutation() *FileMutation {
	return _u.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (_u *FileUpdateOne) ClearUser() *FileUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (_u *FileUpdateOne) RemoveUserIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUser removes "user" edges to User entities.
func (_u *FileUpdateOne) RemoveUser(v ...*User) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (_u *FileUpdateOne) ClearOrganization() *FileUpdateOne {
	_u.mutation.ClearOrganization()
	return _u
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (_u *FileUpdateOne) RemoveOrganizationIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveOrganizationIDs(ids...)
	return _u
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (_u *FileUpdateOne) RemoveOrganization(v ...*Organization) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrganizationIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (_u *FileUpdateOne) ClearGroups() *FileUpdateOne {
	_u.mutation.ClearGroups()
	return _u
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (_u *FileUpdateOne) RemoveGroupIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveGroupIDs(ids...)
	return _u
}

// RemoveGroups removes "groups" edges to Group entities.
func (_u *FileUpdateOne) RemoveGroups(v ...*Group) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupIDs(ids...)
}

// ClearContact clears all "contact" edges to the Contact entity.
func (_u *FileUpdateOne) ClearContact() *FileUpdateOne {
	_u.mutation.ClearContact()
	return _u
}

// RemoveContactIDs removes the "contact" edge to Contact entities by IDs.
func (_u *FileUpdateOne) RemoveContactIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveContactIDs(ids...)
	return _u
}

// RemoveContact removes "contact" edges to Contact entities.
func (_u *FileUpdateOne) RemoveContact(v ...*Contact) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveContactIDs(ids...)
}

// ClearEntity clears all "entity" edges to the Entity entity.
func (_u *FileUpdateOne) ClearEntity() *FileUpdateOne {
	_u.mutation.ClearEntity()
	return _u
}

// RemoveEntityIDs removes the "entity" edge to Entity entities by IDs.
func (_u *FileUpdateOne) RemoveEntityIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntity removes "entity" edges to Entity entities.
func (_u *FileUpdateOne) RemoveEntity(v ...*Entity) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// ClearUserSetting clears all "user_setting" edges to the UserSetting entity.
func (_u *FileUpdateOne) ClearUserSetting() *FileUpdateOne {
	_u.mutation.ClearUserSetting()
	return _u
}

// RemoveUserSettingIDs removes the "user_setting" edge to UserSetting entities by IDs.
func (_u *FileUpdateOne) RemoveUserSettingIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveUserSettingIDs(ids...)
	return _u
}

// RemoveUserSetting removes "user_setting" edges to UserSetting entities.
func (_u *FileUpdateOne) RemoveUserSetting(v ...*UserSetting) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserSettingIDs(ids...)
}

// ClearOrganizationSetting clears all "organization_setting" edges to the OrganizationSetting entity.
func (_u *FileUpdateOne) ClearOrganizationSetting() *FileUpdateOne {
	_u.mutation.ClearOrganizationSetting()
	return _u
}

// RemoveOrganizationSettingIDs removes the "organization_setting" edge to OrganizationSetting entities by IDs.
func (_u *FileUpdateOne) RemoveOrganizationSettingIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveOrganizationSettingIDs(ids...)
	return _u
}

// RemoveOrganizationSetting removes "organization_setting" edges to OrganizationSetting entities.
func (_u *FileUpdateOne) RemoveOrganizationSetting(v ...*OrganizationSetting) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrganizationSettingIDs(ids...)
}

// ClearTemplate clears all "template" edges to the Template entity.
func (_u *FileUpdateOne) ClearTemplate() *FileUpdateOne {
	_u.mutation.ClearTemplate()
	return _u
}

// RemoveTemplateIDs removes the "template" edge to Template entities by IDs.
func (_u *FileUpdateOne) RemoveTemplateIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveTemplateIDs(ids...)
	return _u
}

// RemoveTemplate removes "template" edges to Template entities.
func (_u *FileUpdateOne) RemoveTemplate(v ...*Template) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTemplateIDs(ids...)
}

// ClearDocument clears all "document" edges to the DocumentData entity.
func (_u *FileUpdateOne) ClearDocument() *FileUpdateOne {
	_u.mutation.ClearDocument()
	return _u
}

// RemoveDocumentIDs removes the "document" edge to DocumentData entities by IDs.
func (_u *FileUpdateOne) RemoveDocumentIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveDocumentIDs(ids...)
	return _u
}

// RemoveDocument removes "document" edges to DocumentData entities.
func (_u *FileUpdateOne) RemoveDocument(v ...*DocumentData) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDocumentIDs(ids...)
}

// ClearProgram clears all "program" edges to the Program entity.
func (_u *FileUpdateOne) ClearProgram() *FileUpdateOne {
	_u.mutation.ClearProgram()
	return _u
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (_u *FileUpdateOne) RemoveProgramIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemoveProgram removes "program" edges to Program entities.
func (_u *FileUpdateOne) RemoveProgram(v ...*Program) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearEvidence clears all "evidence" edges to the Evidence entity.
func (_u *FileUpdateOne) ClearEvidence() *FileUpdateOne {
	_u.mutation.ClearEvidence()
	return _u
}

// RemoveEvidenceIDs removes the "evidence" edge to Evidence entities by IDs.
func (_u *FileUpdateOne) RemoveEvidenceIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveEvidenceIDs(ids...)
	return _u
}

// RemoveEvidence removes "evidence" edges to Evidence entities.
func (_u *FileUpdateOne) RemoveEvidence(v ...*Evidence) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEvidenceIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *FileUpdateOne) ClearEvents() *FileUpdateOne {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *FileUpdateOne) RemoveEventIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *FileUpdateOne) RemoveEvents(v ...*Event) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// ClearTrustCenterSetting clears all "trust_center_setting" edges to the TrustCenterSetting entity.
func (_u *FileUpdateOne) ClearTrustCenterSetting() *FileUpdateOne {
	_u.mutation.ClearTrustCenterSetting()
	return _u
}

// RemoveTrustCenterSettingIDs removes the "trust_center_setting" edge to TrustCenterSetting entities by IDs.
func (_u *FileUpdateOne) RemoveTrustCenterSettingIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveTrustCenterSettingIDs(ids...)
	return _u
}

// RemoveTrustCenterSetting removes "trust_center_setting" edges to TrustCenterSetting entities.
func (_u *FileUpdateOne) RemoveTrustCenterSetting(v ...*TrustCenterSetting) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTrustCenterSettingIDs(ids...)
}

// ClearSubprocessor clears all "subprocessor" edges to the Subprocessor entity.
func (_u *FileUpdateOne) ClearSubprocessor() *FileUpdateOne {
	_u.mutation.ClearSubprocessor()
	return _u
}

// RemoveSubprocessorIDs removes the "subprocessor" edge to Subprocessor entities by IDs.
func (_u *FileUpdateOne) RemoveSubprocessorIDs(ids ...string) *FileUpdateOne {
	_u.mutation.RemoveSubprocessorIDs(ids...)
	return _u
}

// RemoveSubprocessor removes "subprocessor" edges to Subprocessor entities.
func (_u *FileUpdateOne) RemoveSubprocessor(v ...*Subprocessor) *FileUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubprocessorIDs(ids...)
}

// Where appends a list predicates to the FileUpdate builder.
func (_u *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated File entity.
func (_u *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FileUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if file.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized file.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := file.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileUpdateOne) check() error {
	if v, ok := _u.mutation.ProvidedFileSize(); ok {
		if err := file.ProvidedFileSizeValidator(v); err != nil {
			return &ValidationError{Name: "provided_file_size", err: fmt.Errorf(`generated: validator failed for field "File.provided_file_size": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PersistedFileSize(); ok {
		if err := file.PersistedFileSizeValidator(v); err != nil {
			return &ValidationError{Name: "persisted_file_size", err: fmt.Errorf(`generated: validator failed for field "File.persisted_file_size": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *FileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(file.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(file.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(file.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(file.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(file.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(file.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(file.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(file.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(file.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(file.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(file.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, file.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(file.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.ProvidedFileName(); ok {
		_spec.SetField(file.FieldProvidedFileName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProvidedFileExtension(); ok {
		_spec.SetField(file.FieldProvidedFileExtension, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProvidedFileSize(); ok {
		_spec.SetField(file.FieldProvidedFileSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedProvidedFileSize(); ok {
		_spec.AddField(file.FieldProvidedFileSize, field.TypeInt64, value)
	}
	if _u.mutation.ProvidedFileSizeCleared() {
		_spec.ClearField(file.FieldProvidedFileSize, field.TypeInt64)
	}
	if value, ok := _u.mutation.PersistedFileSize(); ok {
		_spec.SetField(file.FieldPersistedFileSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedPersistedFileSize(); ok {
		_spec.AddField(file.FieldPersistedFileSize, field.TypeInt64, value)
	}
	if _u.mutation.PersistedFileSizeCleared() {
		_spec.ClearField(file.FieldPersistedFileSize, field.TypeInt64)
	}
	if value, ok := _u.mutation.DetectedMimeType(); ok {
		_spec.SetField(file.FieldDetectedMimeType, field.TypeString, value)
	}
	if _u.mutation.DetectedMimeTypeCleared() {
		_spec.ClearField(file.FieldDetectedMimeType, field.TypeString)
	}
	if value, ok := _u.mutation.Md5Hash(); ok {
		_spec.SetField(file.FieldMd5Hash, field.TypeString, value)
	}
	if _u.mutation.Md5HashCleared() {
		_spec.ClearField(file.FieldMd5Hash, field.TypeString)
	}
	if value, ok := _u.mutation.DetectedContentType(); ok {
		_spec.SetField(file.FieldDetectedContentType, field.TypeString, value)
	}
	if value, ok := _u.mutation.StoreKey(); ok {
		_spec.SetField(file.FieldStoreKey, field.TypeString, value)
	}
	if _u.mutation.StoreKeyCleared() {
		_spec.ClearField(file.FieldStoreKey, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryType(); ok {
		_spec.SetField(file.FieldCategoryType, field.TypeString, value)
	}
	if _u.mutation.CategoryTypeCleared() {
		_spec.ClearField(file.FieldCategoryType, field.TypeString)
	}
	if value, ok := _u.mutation.URI(); ok {
		_spec.SetField(file.FieldURI, field.TypeString, value)
	}
	if _u.mutation.URICleared() {
		_spec.ClearField(file.FieldURI, field.TypeString)
	}
	if value, ok := _u.mutation.StorageScheme(); ok {
		_spec.SetField(file.FieldStorageScheme, field.TypeString, value)
	}
	if _u.mutation.StorageSchemeCleared() {
		_spec.ClearField(file.FieldStorageScheme, field.TypeString)
	}
	if value, ok := _u.mutation.StorageVolume(); ok {
		_spec.SetField(file.FieldStorageVolume, field.TypeString, value)
	}
	if _u.mutation.StorageVolumeCleared() {
		_spec.ClearField(file.FieldStorageVolume, field.TypeString)
	}
	if value, ok := _u.mutation.StoragePath(); ok {
		_spec.SetField(file.FieldStoragePath, field.TypeString, value)
	}
	if _u.mutation.StoragePathCleared() {
		_spec.ClearField(file.FieldStoragePath, field.TypeString)
	}
	if value, ok := _u.mutation.FileContents(); ok {
		_spec.SetField(file.FieldFileContents, field.TypeBytes, value)
	}
	if _u.mutation.FileContentsCleared() {
		_spec.ClearField(file.FieldFileContents, field.TypeBytes)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserIDs(); len(nodes) > 0 && !_u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserTable,
			Columns: file.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !_u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationTable,
			Columns: file.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupsTable,
			Columns: file.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !_u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupsTable,
			Columns: file.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.GroupsTable,
			Columns: file.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ContactFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedContactIDs(); len(nodes) > 0 && !_u.mutation.ContactCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContactIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ContactTable,
			Columns: file.ContactPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntityIDs(); len(nodes) > 0 && !_u.mutation.EntityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EntityTable,
			Columns: file.EntityPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserSettingTable,
			Columns: file.UserSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUserSettingIDs(); len(nodes) > 0 && !_u.mutation.UserSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserSettingTable,
			Columns: file.UserSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.UserSettingTable,
			Columns: file.UserSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrganizationSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationSettingTable,
			Columns: file.OrganizationSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrganizationSettingIDs(); len(nodes) > 0 && !_u.mutation.OrganizationSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationSettingTable,
			Columns: file.OrganizationSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.OrganizationSettingTable,
			Columns: file.OrganizationSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTemplateIDs(); len(nodes) > 0 && !_u.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TemplateTable,
			Columns: file.TemplatePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentTable,
			Columns: file.DocumentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DocumentDataFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDocumentIDs(); len(nodes) > 0 && !_u.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentTable,
			Columns: file.DocumentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DocumentDataFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.DocumentTable,
			Columns: file.DocumentPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DocumentDataFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramIDs(); len(nodes) > 0 && !_u.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.ProgramTable,
			Columns: file.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EvidenceTable,
			Columns: file.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEvidenceIDs(); len(nodes) > 0 && !_u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EvidenceTable,
			Columns: file.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.EvidenceTable,
			Columns: file.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   file.EventsTable,
			Columns: file.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TrustCenterSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TrustCenterSettingTable,
			Columns: file.TrustCenterSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTrustCenterSettingIDs(); len(nodes) > 0 && !_u.mutation.TrustCenterSettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TrustCenterSettingTable,
			Columns: file.TrustCenterSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterSettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.TrustCenterSettingTable,
			Columns: file.TrustCenterSettingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubprocessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.SubprocessorTable,
			Columns: file.SubprocessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubprocessorFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubprocessorIDs(); len(nodes) > 0 && !_u.mutation.SubprocessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.SubprocessorTable,
			Columns: file.SubprocessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubprocessorFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubprocessorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   file.SubprocessorTable,
			Columns: file.SubprocessorPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubprocessorFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.File
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &File{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
