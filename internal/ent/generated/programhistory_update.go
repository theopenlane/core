// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/programhistory"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ProgramHistoryUpdate is the builder for updating ProgramHistory entities.
type ProgramHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ProgramHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProgramHistoryUpdate builder.
func (phu *ProgramHistoryUpdate) Where(ps ...predicate.ProgramHistory) *ProgramHistoryUpdate {
	phu.mutation.Where(ps...)
	return phu
}

// SetUpdatedAt sets the "updated_at" field.
func (phu *ProgramHistoryUpdate) SetUpdatedAt(t time.Time) *ProgramHistoryUpdate {
	phu.mutation.SetUpdatedAt(t)
	return phu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (phu *ProgramHistoryUpdate) ClearUpdatedAt() *ProgramHistoryUpdate {
	phu.mutation.ClearUpdatedAt()
	return phu
}

// SetUpdatedBy sets the "updated_by" field.
func (phu *ProgramHistoryUpdate) SetUpdatedBy(s string) *ProgramHistoryUpdate {
	phu.mutation.SetUpdatedBy(s)
	return phu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (phu *ProgramHistoryUpdate) SetNillableUpdatedBy(s *string) *ProgramHistoryUpdate {
	if s != nil {
		phu.SetUpdatedBy(*s)
	}
	return phu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (phu *ProgramHistoryUpdate) ClearUpdatedBy() *ProgramHistoryUpdate {
	phu.mutation.ClearUpdatedBy()
	return phu
}

// SetDeletedAt sets the "deleted_at" field.
func (phu *ProgramHistoryUpdate) SetDeletedAt(t time.Time) *ProgramHistoryUpdate {
	phu.mutation.SetDeletedAt(t)
	return phu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phu *ProgramHistoryUpdate) SetNillableDeletedAt(t *time.Time) *ProgramHistoryUpdate {
	if t != nil {
		phu.SetDeletedAt(*t)
	}
	return phu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phu *ProgramHistoryUpdate) ClearDeletedAt() *ProgramHistoryUpdate {
	phu.mutation.ClearDeletedAt()
	return phu
}

// SetDeletedBy sets the "deleted_by" field.
func (phu *ProgramHistoryUpdate) SetDeletedBy(s string) *ProgramHistoryUpdate {
	phu.mutation.SetDeletedBy(s)
	return phu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (phu *ProgramHistoryUpdate) SetNillableDeletedBy(s *string) *ProgramHistoryUpdate {
	if s != nil {
		phu.SetDeletedBy(*s)
	}
	return phu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (phu *ProgramHistoryUpdate) ClearDeletedBy() *ProgramHistoryUpdate {
	phu.mutation.ClearDeletedBy()
	return phu
}

// SetTags sets the "tags" field.
func (phu *ProgramHistoryUpdate) SetTags(s []string) *ProgramHistoryUpdate {
	phu.mutation.SetTags(s)
	return phu
}

// AppendTags appends s to the "tags" field.
func (phu *ProgramHistoryUpdate) AppendTags(s []string) *ProgramHistoryUpdate {
	phu.mutation.AppendTags(s)
	return phu
}

// ClearTags clears the value of the "tags" field.
func (phu *ProgramHistoryUpdate) ClearTags() *ProgramHistoryUpdate {
	phu.mutation.ClearTags()
	return phu
}

// SetName sets the "name" field.
func (phu *ProgramHistoryUpdate) SetName(s string) *ProgramHistoryUpdate {
	phu.mutation.SetName(s)
	return phu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (phu *ProgramHistoryUpdate) SetNillableName(s *string) *ProgramHistoryUpdate {
	if s != nil {
		phu.SetName(*s)
	}
	return phu
}

// SetDescription sets the "description" field.
func (phu *ProgramHistoryUpdate) SetDescription(s string) *ProgramHistoryUpdate {
	phu.mutation.SetDescription(s)
	return phu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (phu *ProgramHistoryUpdate) SetNillableDescription(s *string) *ProgramHistoryUpdate {
	if s != nil {
		phu.SetDescription(*s)
	}
	return phu
}

// ClearDescription clears the value of the "description" field.
func (phu *ProgramHistoryUpdate) ClearDescription() *ProgramHistoryUpdate {
	phu.mutation.ClearDescription()
	return phu
}

// SetStatus sets the "status" field.
func (phu *ProgramHistoryUpdate) SetStatus(es enums.ProgramStatus) *ProgramHistoryUpdate {
	phu.mutation.SetStatus(es)
	return phu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (phu *ProgramHistoryUpdate) SetNillableStatus(es *enums.ProgramStatus) *ProgramHistoryUpdate {
	if es != nil {
		phu.SetStatus(*es)
	}
	return phu
}

// SetStartDate sets the "start_date" field.
func (phu *ProgramHistoryUpdate) SetStartDate(t time.Time) *ProgramHistoryUpdate {
	phu.mutation.SetStartDate(t)
	return phu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (phu *ProgramHistoryUpdate) SetNillableStartDate(t *time.Time) *ProgramHistoryUpdate {
	if t != nil {
		phu.SetStartDate(*t)
	}
	return phu
}

// ClearStartDate clears the value of the "start_date" field.
func (phu *ProgramHistoryUpdate) ClearStartDate() *ProgramHistoryUpdate {
	phu.mutation.ClearStartDate()
	return phu
}

// SetEndDate sets the "end_date" field.
func (phu *ProgramHistoryUpdate) SetEndDate(t time.Time) *ProgramHistoryUpdate {
	phu.mutation.SetEndDate(t)
	return phu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (phu *ProgramHistoryUpdate) SetNillableEndDate(t *time.Time) *ProgramHistoryUpdate {
	if t != nil {
		phu.SetEndDate(*t)
	}
	return phu
}

// ClearEndDate clears the value of the "end_date" field.
func (phu *ProgramHistoryUpdate) ClearEndDate() *ProgramHistoryUpdate {
	phu.mutation.ClearEndDate()
	return phu
}

// SetOrganizationID sets the "organization_id" field.
func (phu *ProgramHistoryUpdate) SetOrganizationID(s string) *ProgramHistoryUpdate {
	phu.mutation.SetOrganizationID(s)
	return phu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (phu *ProgramHistoryUpdate) SetNillableOrganizationID(s *string) *ProgramHistoryUpdate {
	if s != nil {
		phu.SetOrganizationID(*s)
	}
	return phu
}

// SetAuditorReady sets the "auditor_ready" field.
func (phu *ProgramHistoryUpdate) SetAuditorReady(b bool) *ProgramHistoryUpdate {
	phu.mutation.SetAuditorReady(b)
	return phu
}

// SetNillableAuditorReady sets the "auditor_ready" field if the given value is not nil.
func (phu *ProgramHistoryUpdate) SetNillableAuditorReady(b *bool) *ProgramHistoryUpdate {
	if b != nil {
		phu.SetAuditorReady(*b)
	}
	return phu
}

// SetAuditorWriteComments sets the "auditor_write_comments" field.
func (phu *ProgramHistoryUpdate) SetAuditorWriteComments(b bool) *ProgramHistoryUpdate {
	phu.mutation.SetAuditorWriteComments(b)
	return phu
}

// SetNillableAuditorWriteComments sets the "auditor_write_comments" field if the given value is not nil.
func (phu *ProgramHistoryUpdate) SetNillableAuditorWriteComments(b *bool) *ProgramHistoryUpdate {
	if b != nil {
		phu.SetAuditorWriteComments(*b)
	}
	return phu
}

// SetAuditorReadComments sets the "auditor_read_comments" field.
func (phu *ProgramHistoryUpdate) SetAuditorReadComments(b bool) *ProgramHistoryUpdate {
	phu.mutation.SetAuditorReadComments(b)
	return phu
}

// SetNillableAuditorReadComments sets the "auditor_read_comments" field if the given value is not nil.
func (phu *ProgramHistoryUpdate) SetNillableAuditorReadComments(b *bool) *ProgramHistoryUpdate {
	if b != nil {
		phu.SetAuditorReadComments(*b)
	}
	return phu
}

// Mutation returns the ProgramHistoryMutation object of the builder.
func (phu *ProgramHistoryUpdate) Mutation() *ProgramHistoryMutation {
	return phu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phu *ProgramHistoryUpdate) Save(ctx context.Context) (int, error) {
	phu.defaults()
	return withHooks(ctx, phu.sqlSave, phu.mutation, phu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phu *ProgramHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := phu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phu *ProgramHistoryUpdate) Exec(ctx context.Context) error {
	_, err := phu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phu *ProgramHistoryUpdate) ExecX(ctx context.Context) {
	if err := phu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phu *ProgramHistoryUpdate) defaults() {
	if _, ok := phu.mutation.UpdatedAt(); !ok && !phu.mutation.UpdatedAtCleared() {
		v := programhistory.UpdateDefaultUpdatedAt()
		phu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phu *ProgramHistoryUpdate) check() error {
	if v, ok := phu.mutation.Status(); ok {
		if err := programhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProgramHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (phu *ProgramHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProgramHistoryUpdate {
	phu.modifiers = append(phu.modifiers, modifiers...)
	return phu
}

func (phu *ProgramHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := phu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(programhistory.Table, programhistory.Columns, sqlgraph.NewFieldSpec(programhistory.FieldID, field.TypeString))
	if ps := phu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if phu.mutation.RefCleared() {
		_spec.ClearField(programhistory.FieldRef, field.TypeString)
	}
	if phu.mutation.CreatedAtCleared() {
		_spec.ClearField(programhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := phu.mutation.UpdatedAt(); ok {
		_spec.SetField(programhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if phu.mutation.UpdatedAtCleared() {
		_spec.ClearField(programhistory.FieldUpdatedAt, field.TypeTime)
	}
	if phu.mutation.CreatedByCleared() {
		_spec.ClearField(programhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := phu.mutation.UpdatedBy(); ok {
		_spec.SetField(programhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if phu.mutation.UpdatedByCleared() {
		_spec.ClearField(programhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := phu.mutation.DeletedAt(); ok {
		_spec.SetField(programhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if phu.mutation.DeletedAtCleared() {
		_spec.ClearField(programhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := phu.mutation.DeletedBy(); ok {
		_spec.SetField(programhistory.FieldDeletedBy, field.TypeString, value)
	}
	if phu.mutation.DeletedByCleared() {
		_spec.ClearField(programhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := phu.mutation.Tags(); ok {
		_spec.SetField(programhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := phu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, programhistory.FieldTags, value)
		})
	}
	if phu.mutation.TagsCleared() {
		_spec.ClearField(programhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := phu.mutation.Name(); ok {
		_spec.SetField(programhistory.FieldName, field.TypeString, value)
	}
	if value, ok := phu.mutation.Description(); ok {
		_spec.SetField(programhistory.FieldDescription, field.TypeString, value)
	}
	if phu.mutation.DescriptionCleared() {
		_spec.ClearField(programhistory.FieldDescription, field.TypeString)
	}
	if value, ok := phu.mutation.Status(); ok {
		_spec.SetField(programhistory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := phu.mutation.StartDate(); ok {
		_spec.SetField(programhistory.FieldStartDate, field.TypeTime, value)
	}
	if phu.mutation.StartDateCleared() {
		_spec.ClearField(programhistory.FieldStartDate, field.TypeTime)
	}
	if value, ok := phu.mutation.EndDate(); ok {
		_spec.SetField(programhistory.FieldEndDate, field.TypeTime, value)
	}
	if phu.mutation.EndDateCleared() {
		_spec.ClearField(programhistory.FieldEndDate, field.TypeTime)
	}
	if value, ok := phu.mutation.OrganizationID(); ok {
		_spec.SetField(programhistory.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := phu.mutation.AuditorReady(); ok {
		_spec.SetField(programhistory.FieldAuditorReady, field.TypeBool, value)
	}
	if value, ok := phu.mutation.AuditorWriteComments(); ok {
		_spec.SetField(programhistory.FieldAuditorWriteComments, field.TypeBool, value)
	}
	if value, ok := phu.mutation.AuditorReadComments(); ok {
		_spec.SetField(programhistory.FieldAuditorReadComments, field.TypeBool, value)
	}
	_spec.Node.Schema = phu.schemaConfig.ProgramHistory
	ctx = internal.NewSchemaConfigContext(ctx, phu.schemaConfig)
	_spec.AddModifiers(phu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, phu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{programhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	phu.mutation.done = true
	return n, nil
}

// ProgramHistoryUpdateOne is the builder for updating a single ProgramHistory entity.
type ProgramHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProgramHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (phuo *ProgramHistoryUpdateOne) SetUpdatedAt(t time.Time) *ProgramHistoryUpdateOne {
	phuo.mutation.SetUpdatedAt(t)
	return phuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (phuo *ProgramHistoryUpdateOne) ClearUpdatedAt() *ProgramHistoryUpdateOne {
	phuo.mutation.ClearUpdatedAt()
	return phuo
}

// SetUpdatedBy sets the "updated_by" field.
func (phuo *ProgramHistoryUpdateOne) SetUpdatedBy(s string) *ProgramHistoryUpdateOne {
	phuo.mutation.SetUpdatedBy(s)
	return phuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (phuo *ProgramHistoryUpdateOne) SetNillableUpdatedBy(s *string) *ProgramHistoryUpdateOne {
	if s != nil {
		phuo.SetUpdatedBy(*s)
	}
	return phuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (phuo *ProgramHistoryUpdateOne) ClearUpdatedBy() *ProgramHistoryUpdateOne {
	phuo.mutation.ClearUpdatedBy()
	return phuo
}

// SetDeletedAt sets the "deleted_at" field.
func (phuo *ProgramHistoryUpdateOne) SetDeletedAt(t time.Time) *ProgramHistoryUpdateOne {
	phuo.mutation.SetDeletedAt(t)
	return phuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phuo *ProgramHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *ProgramHistoryUpdateOne {
	if t != nil {
		phuo.SetDeletedAt(*t)
	}
	return phuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phuo *ProgramHistoryUpdateOne) ClearDeletedAt() *ProgramHistoryUpdateOne {
	phuo.mutation.ClearDeletedAt()
	return phuo
}

// SetDeletedBy sets the "deleted_by" field.
func (phuo *ProgramHistoryUpdateOne) SetDeletedBy(s string) *ProgramHistoryUpdateOne {
	phuo.mutation.SetDeletedBy(s)
	return phuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (phuo *ProgramHistoryUpdateOne) SetNillableDeletedBy(s *string) *ProgramHistoryUpdateOne {
	if s != nil {
		phuo.SetDeletedBy(*s)
	}
	return phuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (phuo *ProgramHistoryUpdateOne) ClearDeletedBy() *ProgramHistoryUpdateOne {
	phuo.mutation.ClearDeletedBy()
	return phuo
}

// SetTags sets the "tags" field.
func (phuo *ProgramHistoryUpdateOne) SetTags(s []string) *ProgramHistoryUpdateOne {
	phuo.mutation.SetTags(s)
	return phuo
}

// AppendTags appends s to the "tags" field.
func (phuo *ProgramHistoryUpdateOne) AppendTags(s []string) *ProgramHistoryUpdateOne {
	phuo.mutation.AppendTags(s)
	return phuo
}

// ClearTags clears the value of the "tags" field.
func (phuo *ProgramHistoryUpdateOne) ClearTags() *ProgramHistoryUpdateOne {
	phuo.mutation.ClearTags()
	return phuo
}

// SetName sets the "name" field.
func (phuo *ProgramHistoryUpdateOne) SetName(s string) *ProgramHistoryUpdateOne {
	phuo.mutation.SetName(s)
	return phuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (phuo *ProgramHistoryUpdateOne) SetNillableName(s *string) *ProgramHistoryUpdateOne {
	if s != nil {
		phuo.SetName(*s)
	}
	return phuo
}

// SetDescription sets the "description" field.
func (phuo *ProgramHistoryUpdateOne) SetDescription(s string) *ProgramHistoryUpdateOne {
	phuo.mutation.SetDescription(s)
	return phuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (phuo *ProgramHistoryUpdateOne) SetNillableDescription(s *string) *ProgramHistoryUpdateOne {
	if s != nil {
		phuo.SetDescription(*s)
	}
	return phuo
}

// ClearDescription clears the value of the "description" field.
func (phuo *ProgramHistoryUpdateOne) ClearDescription() *ProgramHistoryUpdateOne {
	phuo.mutation.ClearDescription()
	return phuo
}

// SetStatus sets the "status" field.
func (phuo *ProgramHistoryUpdateOne) SetStatus(es enums.ProgramStatus) *ProgramHistoryUpdateOne {
	phuo.mutation.SetStatus(es)
	return phuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (phuo *ProgramHistoryUpdateOne) SetNillableStatus(es *enums.ProgramStatus) *ProgramHistoryUpdateOne {
	if es != nil {
		phuo.SetStatus(*es)
	}
	return phuo
}

// SetStartDate sets the "start_date" field.
func (phuo *ProgramHistoryUpdateOne) SetStartDate(t time.Time) *ProgramHistoryUpdateOne {
	phuo.mutation.SetStartDate(t)
	return phuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (phuo *ProgramHistoryUpdateOne) SetNillableStartDate(t *time.Time) *ProgramHistoryUpdateOne {
	if t != nil {
		phuo.SetStartDate(*t)
	}
	return phuo
}

// ClearStartDate clears the value of the "start_date" field.
func (phuo *ProgramHistoryUpdateOne) ClearStartDate() *ProgramHistoryUpdateOne {
	phuo.mutation.ClearStartDate()
	return phuo
}

// SetEndDate sets the "end_date" field.
func (phuo *ProgramHistoryUpdateOne) SetEndDate(t time.Time) *ProgramHistoryUpdateOne {
	phuo.mutation.SetEndDate(t)
	return phuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (phuo *ProgramHistoryUpdateOne) SetNillableEndDate(t *time.Time) *ProgramHistoryUpdateOne {
	if t != nil {
		phuo.SetEndDate(*t)
	}
	return phuo
}

// ClearEndDate clears the value of the "end_date" field.
func (phuo *ProgramHistoryUpdateOne) ClearEndDate() *ProgramHistoryUpdateOne {
	phuo.mutation.ClearEndDate()
	return phuo
}

// SetOrganizationID sets the "organization_id" field.
func (phuo *ProgramHistoryUpdateOne) SetOrganizationID(s string) *ProgramHistoryUpdateOne {
	phuo.mutation.SetOrganizationID(s)
	return phuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (phuo *ProgramHistoryUpdateOne) SetNillableOrganizationID(s *string) *ProgramHistoryUpdateOne {
	if s != nil {
		phuo.SetOrganizationID(*s)
	}
	return phuo
}

// SetAuditorReady sets the "auditor_ready" field.
func (phuo *ProgramHistoryUpdateOne) SetAuditorReady(b bool) *ProgramHistoryUpdateOne {
	phuo.mutation.SetAuditorReady(b)
	return phuo
}

// SetNillableAuditorReady sets the "auditor_ready" field if the given value is not nil.
func (phuo *ProgramHistoryUpdateOne) SetNillableAuditorReady(b *bool) *ProgramHistoryUpdateOne {
	if b != nil {
		phuo.SetAuditorReady(*b)
	}
	return phuo
}

// SetAuditorWriteComments sets the "auditor_write_comments" field.
func (phuo *ProgramHistoryUpdateOne) SetAuditorWriteComments(b bool) *ProgramHistoryUpdateOne {
	phuo.mutation.SetAuditorWriteComments(b)
	return phuo
}

// SetNillableAuditorWriteComments sets the "auditor_write_comments" field if the given value is not nil.
func (phuo *ProgramHistoryUpdateOne) SetNillableAuditorWriteComments(b *bool) *ProgramHistoryUpdateOne {
	if b != nil {
		phuo.SetAuditorWriteComments(*b)
	}
	return phuo
}

// SetAuditorReadComments sets the "auditor_read_comments" field.
func (phuo *ProgramHistoryUpdateOne) SetAuditorReadComments(b bool) *ProgramHistoryUpdateOne {
	phuo.mutation.SetAuditorReadComments(b)
	return phuo
}

// SetNillableAuditorReadComments sets the "auditor_read_comments" field if the given value is not nil.
func (phuo *ProgramHistoryUpdateOne) SetNillableAuditorReadComments(b *bool) *ProgramHistoryUpdateOne {
	if b != nil {
		phuo.SetAuditorReadComments(*b)
	}
	return phuo
}

// Mutation returns the ProgramHistoryMutation object of the builder.
func (phuo *ProgramHistoryUpdateOne) Mutation() *ProgramHistoryMutation {
	return phuo.mutation
}

// Where appends a list predicates to the ProgramHistoryUpdate builder.
func (phuo *ProgramHistoryUpdateOne) Where(ps ...predicate.ProgramHistory) *ProgramHistoryUpdateOne {
	phuo.mutation.Where(ps...)
	return phuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phuo *ProgramHistoryUpdateOne) Select(field string, fields ...string) *ProgramHistoryUpdateOne {
	phuo.fields = append([]string{field}, fields...)
	return phuo
}

// Save executes the query and returns the updated ProgramHistory entity.
func (phuo *ProgramHistoryUpdateOne) Save(ctx context.Context) (*ProgramHistory, error) {
	phuo.defaults()
	return withHooks(ctx, phuo.sqlSave, phuo.mutation, phuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phuo *ProgramHistoryUpdateOne) SaveX(ctx context.Context) *ProgramHistory {
	node, err := phuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phuo *ProgramHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := phuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phuo *ProgramHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := phuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phuo *ProgramHistoryUpdateOne) defaults() {
	if _, ok := phuo.mutation.UpdatedAt(); !ok && !phuo.mutation.UpdatedAtCleared() {
		v := programhistory.UpdateDefaultUpdatedAt()
		phuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phuo *ProgramHistoryUpdateOne) check() error {
	if v, ok := phuo.mutation.Status(); ok {
		if err := programhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProgramHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (phuo *ProgramHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProgramHistoryUpdateOne {
	phuo.modifiers = append(phuo.modifiers, modifiers...)
	return phuo
}

func (phuo *ProgramHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ProgramHistory, err error) {
	if err := phuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(programhistory.Table, programhistory.Columns, sqlgraph.NewFieldSpec(programhistory.FieldID, field.TypeString))
	id, ok := phuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ProgramHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, programhistory.FieldID)
		for _, f := range fields {
			if !programhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != programhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if phuo.mutation.RefCleared() {
		_spec.ClearField(programhistory.FieldRef, field.TypeString)
	}
	if phuo.mutation.CreatedAtCleared() {
		_spec.ClearField(programhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := phuo.mutation.UpdatedAt(); ok {
		_spec.SetField(programhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if phuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(programhistory.FieldUpdatedAt, field.TypeTime)
	}
	if phuo.mutation.CreatedByCleared() {
		_spec.ClearField(programhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := phuo.mutation.UpdatedBy(); ok {
		_spec.SetField(programhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if phuo.mutation.UpdatedByCleared() {
		_spec.ClearField(programhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := phuo.mutation.DeletedAt(); ok {
		_spec.SetField(programhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if phuo.mutation.DeletedAtCleared() {
		_spec.ClearField(programhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := phuo.mutation.DeletedBy(); ok {
		_spec.SetField(programhistory.FieldDeletedBy, field.TypeString, value)
	}
	if phuo.mutation.DeletedByCleared() {
		_spec.ClearField(programhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := phuo.mutation.Tags(); ok {
		_spec.SetField(programhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := phuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, programhistory.FieldTags, value)
		})
	}
	if phuo.mutation.TagsCleared() {
		_spec.ClearField(programhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := phuo.mutation.Name(); ok {
		_spec.SetField(programhistory.FieldName, field.TypeString, value)
	}
	if value, ok := phuo.mutation.Description(); ok {
		_spec.SetField(programhistory.FieldDescription, field.TypeString, value)
	}
	if phuo.mutation.DescriptionCleared() {
		_spec.ClearField(programhistory.FieldDescription, field.TypeString)
	}
	if value, ok := phuo.mutation.Status(); ok {
		_spec.SetField(programhistory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := phuo.mutation.StartDate(); ok {
		_spec.SetField(programhistory.FieldStartDate, field.TypeTime, value)
	}
	if phuo.mutation.StartDateCleared() {
		_spec.ClearField(programhistory.FieldStartDate, field.TypeTime)
	}
	if value, ok := phuo.mutation.EndDate(); ok {
		_spec.SetField(programhistory.FieldEndDate, field.TypeTime, value)
	}
	if phuo.mutation.EndDateCleared() {
		_spec.ClearField(programhistory.FieldEndDate, field.TypeTime)
	}
	if value, ok := phuo.mutation.OrganizationID(); ok {
		_spec.SetField(programhistory.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := phuo.mutation.AuditorReady(); ok {
		_spec.SetField(programhistory.FieldAuditorReady, field.TypeBool, value)
	}
	if value, ok := phuo.mutation.AuditorWriteComments(); ok {
		_spec.SetField(programhistory.FieldAuditorWriteComments, field.TypeBool, value)
	}
	if value, ok := phuo.mutation.AuditorReadComments(); ok {
		_spec.SetField(programhistory.FieldAuditorReadComments, field.TypeBool, value)
	}
	_spec.Node.Schema = phuo.schemaConfig.ProgramHistory
	ctx = internal.NewSchemaConfigContext(ctx, phuo.schemaConfig)
	_spec.AddModifiers(phuo.modifiers...)
	_node = &ProgramHistory{config: phuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{programhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	phuo.mutation.done = true
	return _node, nil
}
