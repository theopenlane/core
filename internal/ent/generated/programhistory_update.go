// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/programhistory"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ProgramHistoryUpdate is the builder for updating ProgramHistory entities.
type ProgramHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ProgramHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProgramHistoryUpdate builder.
func (_u *ProgramHistoryUpdate) Where(ps ...predicate.ProgramHistory) *ProgramHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProgramHistoryUpdate) SetUpdatedAt(v time.Time) *ProgramHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ProgramHistoryUpdate) ClearUpdatedAt() *ProgramHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ProgramHistoryUpdate) SetUpdatedBy(v string) *ProgramHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableUpdatedBy(v *string) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ProgramHistoryUpdate) ClearUpdatedBy() *ProgramHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ProgramHistoryUpdate) SetDeletedAt(v time.Time) *ProgramHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableDeletedAt(v *time.Time) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ProgramHistoryUpdate) ClearDeletedAt() *ProgramHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ProgramHistoryUpdate) SetDeletedBy(v string) *ProgramHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableDeletedBy(v *string) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ProgramHistoryUpdate) ClearDeletedBy() *ProgramHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ProgramHistoryUpdate) SetTags(v []string) *ProgramHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ProgramHistoryUpdate) AppendTags(v []string) *ProgramHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ProgramHistoryUpdate) ClearTags() *ProgramHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ProgramHistoryUpdate) SetOwnerID(v string) *ProgramHistoryUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableOwnerID(v *string) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ProgramHistoryUpdate) ClearOwnerID() *ProgramHistoryUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *ProgramHistoryUpdate) SetName(v string) *ProgramHistoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableName(v *string) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProgramHistoryUpdate) SetDescription(v string) *ProgramHistoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableDescription(v *string) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ProgramHistoryUpdate) ClearDescription() *ProgramHistoryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ProgramHistoryUpdate) SetStatus(v enums.ProgramStatus) *ProgramHistoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableStatus(v *enums.ProgramStatus) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetProgramType sets the "program_type" field.
func (_u *ProgramHistoryUpdate) SetProgramType(v enums.ProgramType) *ProgramHistoryUpdate {
	_u.mutation.SetProgramType(v)
	return _u
}

// SetNillableProgramType sets the "program_type" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableProgramType(v *enums.ProgramType) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetProgramType(*v)
	}
	return _u
}

// SetFrameworkName sets the "framework_name" field.
func (_u *ProgramHistoryUpdate) SetFrameworkName(v string) *ProgramHistoryUpdate {
	_u.mutation.SetFrameworkName(v)
	return _u
}

// SetNillableFrameworkName sets the "framework_name" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableFrameworkName(v *string) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetFrameworkName(*v)
	}
	return _u
}

// ClearFrameworkName clears the value of the "framework_name" field.
func (_u *ProgramHistoryUpdate) ClearFrameworkName() *ProgramHistoryUpdate {
	_u.mutation.ClearFrameworkName()
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *ProgramHistoryUpdate) SetStartDate(v time.Time) *ProgramHistoryUpdate {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableStartDate(v *time.Time) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// ClearStartDate clears the value of the "start_date" field.
func (_u *ProgramHistoryUpdate) ClearStartDate() *ProgramHistoryUpdate {
	_u.mutation.ClearStartDate()
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *ProgramHistoryUpdate) SetEndDate(v time.Time) *ProgramHistoryUpdate {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableEndDate(v *time.Time) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *ProgramHistoryUpdate) ClearEndDate() *ProgramHistoryUpdate {
	_u.mutation.ClearEndDate()
	return _u
}

// SetAuditorReady sets the "auditor_ready" field.
func (_u *ProgramHistoryUpdate) SetAuditorReady(v bool) *ProgramHistoryUpdate {
	_u.mutation.SetAuditorReady(v)
	return _u
}

// SetNillableAuditorReady sets the "auditor_ready" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableAuditorReady(v *bool) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetAuditorReady(*v)
	}
	return _u
}

// SetAuditorWriteComments sets the "auditor_write_comments" field.
func (_u *ProgramHistoryUpdate) SetAuditorWriteComments(v bool) *ProgramHistoryUpdate {
	_u.mutation.SetAuditorWriteComments(v)
	return _u
}

// SetNillableAuditorWriteComments sets the "auditor_write_comments" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableAuditorWriteComments(v *bool) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetAuditorWriteComments(*v)
	}
	return _u
}

// SetAuditorReadComments sets the "auditor_read_comments" field.
func (_u *ProgramHistoryUpdate) SetAuditorReadComments(v bool) *ProgramHistoryUpdate {
	_u.mutation.SetAuditorReadComments(v)
	return _u
}

// SetNillableAuditorReadComments sets the "auditor_read_comments" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableAuditorReadComments(v *bool) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetAuditorReadComments(*v)
	}
	return _u
}

// SetAuditFirm sets the "audit_firm" field.
func (_u *ProgramHistoryUpdate) SetAuditFirm(v string) *ProgramHistoryUpdate {
	_u.mutation.SetAuditFirm(v)
	return _u
}

// SetNillableAuditFirm sets the "audit_firm" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableAuditFirm(v *string) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetAuditFirm(*v)
	}
	return _u
}

// ClearAuditFirm clears the value of the "audit_firm" field.
func (_u *ProgramHistoryUpdate) ClearAuditFirm() *ProgramHistoryUpdate {
	_u.mutation.ClearAuditFirm()
	return _u
}

// SetAuditor sets the "auditor" field.
func (_u *ProgramHistoryUpdate) SetAuditor(v string) *ProgramHistoryUpdate {
	_u.mutation.SetAuditor(v)
	return _u
}

// SetNillableAuditor sets the "auditor" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableAuditor(v *string) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetAuditor(*v)
	}
	return _u
}

// ClearAuditor clears the value of the "auditor" field.
func (_u *ProgramHistoryUpdate) ClearAuditor() *ProgramHistoryUpdate {
	_u.mutation.ClearAuditor()
	return _u
}

// SetAuditorEmail sets the "auditor_email" field.
func (_u *ProgramHistoryUpdate) SetAuditorEmail(v string) *ProgramHistoryUpdate {
	_u.mutation.SetAuditorEmail(v)
	return _u
}

// SetNillableAuditorEmail sets the "auditor_email" field if the given value is not nil.
func (_u *ProgramHistoryUpdate) SetNillableAuditorEmail(v *string) *ProgramHistoryUpdate {
	if v != nil {
		_u.SetAuditorEmail(*v)
	}
	return _u
}

// ClearAuditorEmail clears the value of the "auditor_email" field.
func (_u *ProgramHistoryUpdate) ClearAuditorEmail() *ProgramHistoryUpdate {
	_u.mutation.ClearAuditorEmail()
	return _u
}

// Mutation returns the ProgramHistoryMutation object of the builder.
func (_u *ProgramHistoryUpdate) Mutation() *ProgramHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProgramHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProgramHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProgramHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProgramHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProgramHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if programhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized programhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := programhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProgramHistoryUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := programhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProgramHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProgramType(); ok {
		if err := programhistory.ProgramTypeValidator(v); err != nil {
			return &ValidationError{Name: "program_type", err: fmt.Errorf(`generated: validator failed for field "ProgramHistory.program_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ProgramHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProgramHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ProgramHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(programhistory.Table, programhistory.Columns, sqlgraph.NewFieldSpec(programhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(programhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(programhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(programhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(programhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(programhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(programhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(programhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(programhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(programhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(programhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(programhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(programhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, programhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(programhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(programhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(programhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(programhistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(programhistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(programhistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(programhistory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ProgramType(); ok {
		_spec.SetField(programhistory.FieldProgramType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.FrameworkName(); ok {
		_spec.SetField(programhistory.FieldFrameworkName, field.TypeString, value)
	}
	if _u.mutation.FrameworkNameCleared() {
		_spec.ClearField(programhistory.FieldFrameworkName, field.TypeString)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(programhistory.FieldStartDate, field.TypeTime, value)
	}
	if _u.mutation.StartDateCleared() {
		_spec.ClearField(programhistory.FieldStartDate, field.TypeTime)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(programhistory.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(programhistory.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.AuditorReady(); ok {
		_spec.SetField(programhistory.FieldAuditorReady, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AuditorWriteComments(); ok {
		_spec.SetField(programhistory.FieldAuditorWriteComments, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AuditorReadComments(); ok {
		_spec.SetField(programhistory.FieldAuditorReadComments, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AuditFirm(); ok {
		_spec.SetField(programhistory.FieldAuditFirm, field.TypeString, value)
	}
	if _u.mutation.AuditFirmCleared() {
		_spec.ClearField(programhistory.FieldAuditFirm, field.TypeString)
	}
	if value, ok := _u.mutation.Auditor(); ok {
		_spec.SetField(programhistory.FieldAuditor, field.TypeString, value)
	}
	if _u.mutation.AuditorCleared() {
		_spec.ClearField(programhistory.FieldAuditor, field.TypeString)
	}
	if value, ok := _u.mutation.AuditorEmail(); ok {
		_spec.SetField(programhistory.FieldAuditorEmail, field.TypeString, value)
	}
	if _u.mutation.AuditorEmailCleared() {
		_spec.ClearField(programhistory.FieldAuditorEmail, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.ProgramHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{programhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProgramHistoryUpdateOne is the builder for updating a single ProgramHistory entity.
type ProgramHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProgramHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProgramHistoryUpdateOne) SetUpdatedAt(v time.Time) *ProgramHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ProgramHistoryUpdateOne) ClearUpdatedAt() *ProgramHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ProgramHistoryUpdateOne) SetUpdatedBy(v string) *ProgramHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableUpdatedBy(v *string) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ProgramHistoryUpdateOne) ClearUpdatedBy() *ProgramHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ProgramHistoryUpdateOne) SetDeletedAt(v time.Time) *ProgramHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ProgramHistoryUpdateOne) ClearDeletedAt() *ProgramHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ProgramHistoryUpdateOne) SetDeletedBy(v string) *ProgramHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableDeletedBy(v *string) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ProgramHistoryUpdateOne) ClearDeletedBy() *ProgramHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ProgramHistoryUpdateOne) SetTags(v []string) *ProgramHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ProgramHistoryUpdateOne) AppendTags(v []string) *ProgramHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ProgramHistoryUpdateOne) ClearTags() *ProgramHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ProgramHistoryUpdateOne) SetOwnerID(v string) *ProgramHistoryUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableOwnerID(v *string) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ProgramHistoryUpdateOne) ClearOwnerID() *ProgramHistoryUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *ProgramHistoryUpdateOne) SetName(v string) *ProgramHistoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableName(v *string) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProgramHistoryUpdateOne) SetDescription(v string) *ProgramHistoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableDescription(v *string) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ProgramHistoryUpdateOne) ClearDescription() *ProgramHistoryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ProgramHistoryUpdateOne) SetStatus(v enums.ProgramStatus) *ProgramHistoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableStatus(v *enums.ProgramStatus) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetProgramType sets the "program_type" field.
func (_u *ProgramHistoryUpdateOne) SetProgramType(v enums.ProgramType) *ProgramHistoryUpdateOne {
	_u.mutation.SetProgramType(v)
	return _u
}

// SetNillableProgramType sets the "program_type" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableProgramType(v *enums.ProgramType) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetProgramType(*v)
	}
	return _u
}

// SetFrameworkName sets the "framework_name" field.
func (_u *ProgramHistoryUpdateOne) SetFrameworkName(v string) *ProgramHistoryUpdateOne {
	_u.mutation.SetFrameworkName(v)
	return _u
}

// SetNillableFrameworkName sets the "framework_name" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableFrameworkName(v *string) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetFrameworkName(*v)
	}
	return _u
}

// ClearFrameworkName clears the value of the "framework_name" field.
func (_u *ProgramHistoryUpdateOne) ClearFrameworkName() *ProgramHistoryUpdateOne {
	_u.mutation.ClearFrameworkName()
	return _u
}

// SetStartDate sets the "start_date" field.
func (_u *ProgramHistoryUpdateOne) SetStartDate(v time.Time) *ProgramHistoryUpdateOne {
	_u.mutation.SetStartDate(v)
	return _u
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableStartDate(v *time.Time) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetStartDate(*v)
	}
	return _u
}

// ClearStartDate clears the value of the "start_date" field.
func (_u *ProgramHistoryUpdateOne) ClearStartDate() *ProgramHistoryUpdateOne {
	_u.mutation.ClearStartDate()
	return _u
}

// SetEndDate sets the "end_date" field.
func (_u *ProgramHistoryUpdateOne) SetEndDate(v time.Time) *ProgramHistoryUpdateOne {
	_u.mutation.SetEndDate(v)
	return _u
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableEndDate(v *time.Time) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetEndDate(*v)
	}
	return _u
}

// ClearEndDate clears the value of the "end_date" field.
func (_u *ProgramHistoryUpdateOne) ClearEndDate() *ProgramHistoryUpdateOne {
	_u.mutation.ClearEndDate()
	return _u
}

// SetAuditorReady sets the "auditor_ready" field.
func (_u *ProgramHistoryUpdateOne) SetAuditorReady(v bool) *ProgramHistoryUpdateOne {
	_u.mutation.SetAuditorReady(v)
	return _u
}

// SetNillableAuditorReady sets the "auditor_ready" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableAuditorReady(v *bool) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetAuditorReady(*v)
	}
	return _u
}

// SetAuditorWriteComments sets the "auditor_write_comments" field.
func (_u *ProgramHistoryUpdateOne) SetAuditorWriteComments(v bool) *ProgramHistoryUpdateOne {
	_u.mutation.SetAuditorWriteComments(v)
	return _u
}

// SetNillableAuditorWriteComments sets the "auditor_write_comments" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableAuditorWriteComments(v *bool) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetAuditorWriteComments(*v)
	}
	return _u
}

// SetAuditorReadComments sets the "auditor_read_comments" field.
func (_u *ProgramHistoryUpdateOne) SetAuditorReadComments(v bool) *ProgramHistoryUpdateOne {
	_u.mutation.SetAuditorReadComments(v)
	return _u
}

// SetNillableAuditorReadComments sets the "auditor_read_comments" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableAuditorReadComments(v *bool) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetAuditorReadComments(*v)
	}
	return _u
}

// SetAuditFirm sets the "audit_firm" field.
func (_u *ProgramHistoryUpdateOne) SetAuditFirm(v string) *ProgramHistoryUpdateOne {
	_u.mutation.SetAuditFirm(v)
	return _u
}

// SetNillableAuditFirm sets the "audit_firm" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableAuditFirm(v *string) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetAuditFirm(*v)
	}
	return _u
}

// ClearAuditFirm clears the value of the "audit_firm" field.
func (_u *ProgramHistoryUpdateOne) ClearAuditFirm() *ProgramHistoryUpdateOne {
	_u.mutation.ClearAuditFirm()
	return _u
}

// SetAuditor sets the "auditor" field.
func (_u *ProgramHistoryUpdateOne) SetAuditor(v string) *ProgramHistoryUpdateOne {
	_u.mutation.SetAuditor(v)
	return _u
}

// SetNillableAuditor sets the "auditor" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableAuditor(v *string) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetAuditor(*v)
	}
	return _u
}

// ClearAuditor clears the value of the "auditor" field.
func (_u *ProgramHistoryUpdateOne) ClearAuditor() *ProgramHistoryUpdateOne {
	_u.mutation.ClearAuditor()
	return _u
}

// SetAuditorEmail sets the "auditor_email" field.
func (_u *ProgramHistoryUpdateOne) SetAuditorEmail(v string) *ProgramHistoryUpdateOne {
	_u.mutation.SetAuditorEmail(v)
	return _u
}

// SetNillableAuditorEmail sets the "auditor_email" field if the given value is not nil.
func (_u *ProgramHistoryUpdateOne) SetNillableAuditorEmail(v *string) *ProgramHistoryUpdateOne {
	if v != nil {
		_u.SetAuditorEmail(*v)
	}
	return _u
}

// ClearAuditorEmail clears the value of the "auditor_email" field.
func (_u *ProgramHistoryUpdateOne) ClearAuditorEmail() *ProgramHistoryUpdateOne {
	_u.mutation.ClearAuditorEmail()
	return _u
}

// Mutation returns the ProgramHistoryMutation object of the builder.
func (_u *ProgramHistoryUpdateOne) Mutation() *ProgramHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the ProgramHistoryUpdate builder.
func (_u *ProgramHistoryUpdateOne) Where(ps ...predicate.ProgramHistory) *ProgramHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProgramHistoryUpdateOne) Select(field string, fields ...string) *ProgramHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ProgramHistory entity.
func (_u *ProgramHistoryUpdateOne) Save(ctx context.Context) (*ProgramHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProgramHistoryUpdateOne) SaveX(ctx context.Context) *ProgramHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProgramHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProgramHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProgramHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if programhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized programhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := programhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProgramHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := programhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProgramHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProgramType(); ok {
		if err := programhistory.ProgramTypeValidator(v); err != nil {
			return &ValidationError{Name: "program_type", err: fmt.Errorf(`generated: validator failed for field "ProgramHistory.program_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ProgramHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProgramHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ProgramHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ProgramHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(programhistory.Table, programhistory.Columns, sqlgraph.NewFieldSpec(programhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ProgramHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, programhistory.FieldID)
		for _, f := range fields {
			if !programhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != programhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(programhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(programhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(programhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(programhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(programhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(programhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(programhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(programhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(programhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(programhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(programhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(programhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, programhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(programhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(programhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(programhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(programhistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(programhistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(programhistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(programhistory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ProgramType(); ok {
		_spec.SetField(programhistory.FieldProgramType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.FrameworkName(); ok {
		_spec.SetField(programhistory.FieldFrameworkName, field.TypeString, value)
	}
	if _u.mutation.FrameworkNameCleared() {
		_spec.ClearField(programhistory.FieldFrameworkName, field.TypeString)
	}
	if value, ok := _u.mutation.StartDate(); ok {
		_spec.SetField(programhistory.FieldStartDate, field.TypeTime, value)
	}
	if _u.mutation.StartDateCleared() {
		_spec.ClearField(programhistory.FieldStartDate, field.TypeTime)
	}
	if value, ok := _u.mutation.EndDate(); ok {
		_spec.SetField(programhistory.FieldEndDate, field.TypeTime, value)
	}
	if _u.mutation.EndDateCleared() {
		_spec.ClearField(programhistory.FieldEndDate, field.TypeTime)
	}
	if value, ok := _u.mutation.AuditorReady(); ok {
		_spec.SetField(programhistory.FieldAuditorReady, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AuditorWriteComments(); ok {
		_spec.SetField(programhistory.FieldAuditorWriteComments, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AuditorReadComments(); ok {
		_spec.SetField(programhistory.FieldAuditorReadComments, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AuditFirm(); ok {
		_spec.SetField(programhistory.FieldAuditFirm, field.TypeString, value)
	}
	if _u.mutation.AuditFirmCleared() {
		_spec.ClearField(programhistory.FieldAuditFirm, field.TypeString)
	}
	if value, ok := _u.mutation.Auditor(); ok {
		_spec.SetField(programhistory.FieldAuditor, field.TypeString, value)
	}
	if _u.mutation.AuditorCleared() {
		_spec.ClearField(programhistory.FieldAuditor, field.TypeString)
	}
	if value, ok := _u.mutation.AuditorEmail(); ok {
		_spec.SetField(programhistory.FieldAuditorEmail, field.TypeString, value)
	}
	if _u.mutation.AuditorEmailCleared() {
		_spec.ClearField(programhistory.FieldAuditorEmail, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.ProgramHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &ProgramHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{programhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
