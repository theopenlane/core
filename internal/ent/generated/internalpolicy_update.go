// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/task"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// InternalPolicyUpdate is the builder for updating InternalPolicy entities.
type InternalPolicyUpdate struct {
	config
	hooks     []Hook
	mutation  *InternalPolicyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InternalPolicyUpdate builder.
func (ipu *InternalPolicyUpdate) Where(ps ...predicate.InternalPolicy) *InternalPolicyUpdate {
	ipu.mutation.Where(ps...)
	return ipu
}

// SetUpdatedAt sets the "updated_at" field.
func (ipu *InternalPolicyUpdate) SetUpdatedAt(t time.Time) *InternalPolicyUpdate {
	ipu.mutation.SetUpdatedAt(t)
	return ipu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ipu *InternalPolicyUpdate) ClearUpdatedAt() *InternalPolicyUpdate {
	ipu.mutation.ClearUpdatedAt()
	return ipu
}

// SetUpdatedBy sets the "updated_by" field.
func (ipu *InternalPolicyUpdate) SetUpdatedBy(s string) *InternalPolicyUpdate {
	ipu.mutation.SetUpdatedBy(s)
	return ipu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ipu *InternalPolicyUpdate) SetNillableUpdatedBy(s *string) *InternalPolicyUpdate {
	if s != nil {
		ipu.SetUpdatedBy(*s)
	}
	return ipu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ipu *InternalPolicyUpdate) ClearUpdatedBy() *InternalPolicyUpdate {
	ipu.mutation.ClearUpdatedBy()
	return ipu
}

// SetDeletedAt sets the "deleted_at" field.
func (ipu *InternalPolicyUpdate) SetDeletedAt(t time.Time) *InternalPolicyUpdate {
	ipu.mutation.SetDeletedAt(t)
	return ipu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ipu *InternalPolicyUpdate) SetNillableDeletedAt(t *time.Time) *InternalPolicyUpdate {
	if t != nil {
		ipu.SetDeletedAt(*t)
	}
	return ipu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ipu *InternalPolicyUpdate) ClearDeletedAt() *InternalPolicyUpdate {
	ipu.mutation.ClearDeletedAt()
	return ipu
}

// SetDeletedBy sets the "deleted_by" field.
func (ipu *InternalPolicyUpdate) SetDeletedBy(s string) *InternalPolicyUpdate {
	ipu.mutation.SetDeletedBy(s)
	return ipu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ipu *InternalPolicyUpdate) SetNillableDeletedBy(s *string) *InternalPolicyUpdate {
	if s != nil {
		ipu.SetDeletedBy(*s)
	}
	return ipu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ipu *InternalPolicyUpdate) ClearDeletedBy() *InternalPolicyUpdate {
	ipu.mutation.ClearDeletedBy()
	return ipu
}

// SetTags sets the "tags" field.
func (ipu *InternalPolicyUpdate) SetTags(s []string) *InternalPolicyUpdate {
	ipu.mutation.SetTags(s)
	return ipu
}

// AppendTags appends s to the "tags" field.
func (ipu *InternalPolicyUpdate) AppendTags(s []string) *InternalPolicyUpdate {
	ipu.mutation.AppendTags(s)
	return ipu
}

// ClearTags clears the value of the "tags" field.
func (ipu *InternalPolicyUpdate) ClearTags() *InternalPolicyUpdate {
	ipu.mutation.ClearTags()
	return ipu
}

// SetName sets the "name" field.
func (ipu *InternalPolicyUpdate) SetName(s string) *InternalPolicyUpdate {
	ipu.mutation.SetName(s)
	return ipu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ipu *InternalPolicyUpdate) SetNillableName(s *string) *InternalPolicyUpdate {
	if s != nil {
		ipu.SetName(*s)
	}
	return ipu
}

// SetDescription sets the "description" field.
func (ipu *InternalPolicyUpdate) SetDescription(s string) *InternalPolicyUpdate {
	ipu.mutation.SetDescription(s)
	return ipu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ipu *InternalPolicyUpdate) SetNillableDescription(s *string) *InternalPolicyUpdate {
	if s != nil {
		ipu.SetDescription(*s)
	}
	return ipu
}

// SetStatus sets the "status" field.
func (ipu *InternalPolicyUpdate) SetStatus(s string) *InternalPolicyUpdate {
	ipu.mutation.SetStatus(s)
	return ipu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ipu *InternalPolicyUpdate) SetNillableStatus(s *string) *InternalPolicyUpdate {
	if s != nil {
		ipu.SetStatus(*s)
	}
	return ipu
}

// ClearStatus clears the value of the "status" field.
func (ipu *InternalPolicyUpdate) ClearStatus() *InternalPolicyUpdate {
	ipu.mutation.ClearStatus()
	return ipu
}

// SetPolicyType sets the "policy_type" field.
func (ipu *InternalPolicyUpdate) SetPolicyType(s string) *InternalPolicyUpdate {
	ipu.mutation.SetPolicyType(s)
	return ipu
}

// SetNillablePolicyType sets the "policy_type" field if the given value is not nil.
func (ipu *InternalPolicyUpdate) SetNillablePolicyType(s *string) *InternalPolicyUpdate {
	if s != nil {
		ipu.SetPolicyType(*s)
	}
	return ipu
}

// ClearPolicyType clears the value of the "policy_type" field.
func (ipu *InternalPolicyUpdate) ClearPolicyType() *InternalPolicyUpdate {
	ipu.mutation.ClearPolicyType()
	return ipu
}

// SetVersion sets the "version" field.
func (ipu *InternalPolicyUpdate) SetVersion(s string) *InternalPolicyUpdate {
	ipu.mutation.SetVersion(s)
	return ipu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ipu *InternalPolicyUpdate) SetNillableVersion(s *string) *InternalPolicyUpdate {
	if s != nil {
		ipu.SetVersion(*s)
	}
	return ipu
}

// ClearVersion clears the value of the "version" field.
func (ipu *InternalPolicyUpdate) ClearVersion() *InternalPolicyUpdate {
	ipu.mutation.ClearVersion()
	return ipu
}

// SetPurposeAndScope sets the "purpose_and_scope" field.
func (ipu *InternalPolicyUpdate) SetPurposeAndScope(s string) *InternalPolicyUpdate {
	ipu.mutation.SetPurposeAndScope(s)
	return ipu
}

// SetNillablePurposeAndScope sets the "purpose_and_scope" field if the given value is not nil.
func (ipu *InternalPolicyUpdate) SetNillablePurposeAndScope(s *string) *InternalPolicyUpdate {
	if s != nil {
		ipu.SetPurposeAndScope(*s)
	}
	return ipu
}

// ClearPurposeAndScope clears the value of the "purpose_and_scope" field.
func (ipu *InternalPolicyUpdate) ClearPurposeAndScope() *InternalPolicyUpdate {
	ipu.mutation.ClearPurposeAndScope()
	return ipu
}

// SetBackground sets the "background" field.
func (ipu *InternalPolicyUpdate) SetBackground(s string) *InternalPolicyUpdate {
	ipu.mutation.SetBackground(s)
	return ipu
}

// SetNillableBackground sets the "background" field if the given value is not nil.
func (ipu *InternalPolicyUpdate) SetNillableBackground(s *string) *InternalPolicyUpdate {
	if s != nil {
		ipu.SetBackground(*s)
	}
	return ipu
}

// ClearBackground clears the value of the "background" field.
func (ipu *InternalPolicyUpdate) ClearBackground() *InternalPolicyUpdate {
	ipu.mutation.ClearBackground()
	return ipu
}

// SetDetails sets the "details" field.
func (ipu *InternalPolicyUpdate) SetDetails(m map[string]interface{}) *InternalPolicyUpdate {
	ipu.mutation.SetDetails(m)
	return ipu
}

// ClearDetails clears the value of the "details" field.
func (ipu *InternalPolicyUpdate) ClearDetails() *InternalPolicyUpdate {
	ipu.mutation.ClearDetails()
	return ipu
}

// AddControlobjectiveIDs adds the "controlobjectives" edge to the ControlObjective entity by IDs.
func (ipu *InternalPolicyUpdate) AddControlobjectiveIDs(ids ...string) *InternalPolicyUpdate {
	ipu.mutation.AddControlobjectiveIDs(ids...)
	return ipu
}

// AddControlobjectives adds the "controlobjectives" edges to the ControlObjective entity.
func (ipu *InternalPolicyUpdate) AddControlobjectives(c ...*ControlObjective) *InternalPolicyUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ipu.AddControlobjectiveIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (ipu *InternalPolicyUpdate) AddControlIDs(ids ...string) *InternalPolicyUpdate {
	ipu.mutation.AddControlIDs(ids...)
	return ipu
}

// AddControls adds the "controls" edges to the Control entity.
func (ipu *InternalPolicyUpdate) AddControls(c ...*Control) *InternalPolicyUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ipu.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (ipu *InternalPolicyUpdate) AddProcedureIDs(ids ...string) *InternalPolicyUpdate {
	ipu.mutation.AddProcedureIDs(ids...)
	return ipu
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (ipu *InternalPolicyUpdate) AddProcedures(p ...*Procedure) *InternalPolicyUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ipu.AddProcedureIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (ipu *InternalPolicyUpdate) AddNarrativeIDs(ids ...string) *InternalPolicyUpdate {
	ipu.mutation.AddNarrativeIDs(ids...)
	return ipu
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (ipu *InternalPolicyUpdate) AddNarratives(n ...*Narrative) *InternalPolicyUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ipu.AddNarrativeIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ipu *InternalPolicyUpdate) AddTaskIDs(ids ...string) *InternalPolicyUpdate {
	ipu.mutation.AddTaskIDs(ids...)
	return ipu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ipu *InternalPolicyUpdate) AddTasks(t ...*Task) *InternalPolicyUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ipu.AddTaskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (ipu *InternalPolicyUpdate) AddProgramIDs(ids ...string) *InternalPolicyUpdate {
	ipu.mutation.AddProgramIDs(ids...)
	return ipu
}

// AddPrograms adds the "programs" edges to the Program entity.
func (ipu *InternalPolicyUpdate) AddPrograms(p ...*Program) *InternalPolicyUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ipu.AddProgramIDs(ids...)
}

// Mutation returns the InternalPolicyMutation object of the builder.
func (ipu *InternalPolicyUpdate) Mutation() *InternalPolicyMutation {
	return ipu.mutation
}

// ClearControlobjectives clears all "controlobjectives" edges to the ControlObjective entity.
func (ipu *InternalPolicyUpdate) ClearControlobjectives() *InternalPolicyUpdate {
	ipu.mutation.ClearControlobjectives()
	return ipu
}

// RemoveControlobjectiveIDs removes the "controlobjectives" edge to ControlObjective entities by IDs.
func (ipu *InternalPolicyUpdate) RemoveControlobjectiveIDs(ids ...string) *InternalPolicyUpdate {
	ipu.mutation.RemoveControlobjectiveIDs(ids...)
	return ipu
}

// RemoveControlobjectives removes "controlobjectives" edges to ControlObjective entities.
func (ipu *InternalPolicyUpdate) RemoveControlobjectives(c ...*ControlObjective) *InternalPolicyUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ipu.RemoveControlobjectiveIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (ipu *InternalPolicyUpdate) ClearControls() *InternalPolicyUpdate {
	ipu.mutation.ClearControls()
	return ipu
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (ipu *InternalPolicyUpdate) RemoveControlIDs(ids ...string) *InternalPolicyUpdate {
	ipu.mutation.RemoveControlIDs(ids...)
	return ipu
}

// RemoveControls removes "controls" edges to Control entities.
func (ipu *InternalPolicyUpdate) RemoveControls(c ...*Control) *InternalPolicyUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ipu.RemoveControlIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (ipu *InternalPolicyUpdate) ClearProcedures() *InternalPolicyUpdate {
	ipu.mutation.ClearProcedures()
	return ipu
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (ipu *InternalPolicyUpdate) RemoveProcedureIDs(ids ...string) *InternalPolicyUpdate {
	ipu.mutation.RemoveProcedureIDs(ids...)
	return ipu
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (ipu *InternalPolicyUpdate) RemoveProcedures(p ...*Procedure) *InternalPolicyUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ipu.RemoveProcedureIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (ipu *InternalPolicyUpdate) ClearNarratives() *InternalPolicyUpdate {
	ipu.mutation.ClearNarratives()
	return ipu
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (ipu *InternalPolicyUpdate) RemoveNarrativeIDs(ids ...string) *InternalPolicyUpdate {
	ipu.mutation.RemoveNarrativeIDs(ids...)
	return ipu
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (ipu *InternalPolicyUpdate) RemoveNarratives(n ...*Narrative) *InternalPolicyUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ipu.RemoveNarrativeIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (ipu *InternalPolicyUpdate) ClearTasks() *InternalPolicyUpdate {
	ipu.mutation.ClearTasks()
	return ipu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (ipu *InternalPolicyUpdate) RemoveTaskIDs(ids ...string) *InternalPolicyUpdate {
	ipu.mutation.RemoveTaskIDs(ids...)
	return ipu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (ipu *InternalPolicyUpdate) RemoveTasks(t ...*Task) *InternalPolicyUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ipu.RemoveTaskIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (ipu *InternalPolicyUpdate) ClearPrograms() *InternalPolicyUpdate {
	ipu.mutation.ClearPrograms()
	return ipu
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (ipu *InternalPolicyUpdate) RemoveProgramIDs(ids ...string) *InternalPolicyUpdate {
	ipu.mutation.RemoveProgramIDs(ids...)
	return ipu
}

// RemovePrograms removes "programs" edges to Program entities.
func (ipu *InternalPolicyUpdate) RemovePrograms(p ...*Program) *InternalPolicyUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ipu.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ipu *InternalPolicyUpdate) Save(ctx context.Context) (int, error) {
	if err := ipu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ipu.sqlSave, ipu.mutation, ipu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ipu *InternalPolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := ipu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ipu *InternalPolicyUpdate) Exec(ctx context.Context) error {
	_, err := ipu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipu *InternalPolicyUpdate) ExecX(ctx context.Context) {
	if err := ipu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ipu *InternalPolicyUpdate) defaults() error {
	if _, ok := ipu.mutation.UpdatedAt(); !ok && !ipu.mutation.UpdatedAtCleared() {
		if internalpolicy.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized internalpolicy.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := internalpolicy.UpdateDefaultUpdatedAt()
		ipu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ipu *InternalPolicyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InternalPolicyUpdate {
	ipu.modifiers = append(ipu.modifiers, modifiers...)
	return ipu
}

func (ipu *InternalPolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(internalpolicy.Table, internalpolicy.Columns, sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString))
	if ps := ipu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ipu.mutation.CreatedAtCleared() {
		_spec.ClearField(internalpolicy.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ipu.mutation.UpdatedAt(); ok {
		_spec.SetField(internalpolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if ipu.mutation.UpdatedAtCleared() {
		_spec.ClearField(internalpolicy.FieldUpdatedAt, field.TypeTime)
	}
	if ipu.mutation.CreatedByCleared() {
		_spec.ClearField(internalpolicy.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ipu.mutation.UpdatedBy(); ok {
		_spec.SetField(internalpolicy.FieldUpdatedBy, field.TypeString, value)
	}
	if ipu.mutation.UpdatedByCleared() {
		_spec.ClearField(internalpolicy.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ipu.mutation.DeletedAt(); ok {
		_spec.SetField(internalpolicy.FieldDeletedAt, field.TypeTime, value)
	}
	if ipu.mutation.DeletedAtCleared() {
		_spec.ClearField(internalpolicy.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ipu.mutation.DeletedBy(); ok {
		_spec.SetField(internalpolicy.FieldDeletedBy, field.TypeString, value)
	}
	if ipu.mutation.DeletedByCleared() {
		_spec.ClearField(internalpolicy.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ipu.mutation.Tags(); ok {
		_spec.SetField(internalpolicy.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ipu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldTags, value)
		})
	}
	if ipu.mutation.TagsCleared() {
		_spec.ClearField(internalpolicy.FieldTags, field.TypeJSON)
	}
	if value, ok := ipu.mutation.Name(); ok {
		_spec.SetField(internalpolicy.FieldName, field.TypeString, value)
	}
	if value, ok := ipu.mutation.Description(); ok {
		_spec.SetField(internalpolicy.FieldDescription, field.TypeString, value)
	}
	if value, ok := ipu.mutation.Status(); ok {
		_spec.SetField(internalpolicy.FieldStatus, field.TypeString, value)
	}
	if ipu.mutation.StatusCleared() {
		_spec.ClearField(internalpolicy.FieldStatus, field.TypeString)
	}
	if value, ok := ipu.mutation.PolicyType(); ok {
		_spec.SetField(internalpolicy.FieldPolicyType, field.TypeString, value)
	}
	if ipu.mutation.PolicyTypeCleared() {
		_spec.ClearField(internalpolicy.FieldPolicyType, field.TypeString)
	}
	if value, ok := ipu.mutation.Version(); ok {
		_spec.SetField(internalpolicy.FieldVersion, field.TypeString, value)
	}
	if ipu.mutation.VersionCleared() {
		_spec.ClearField(internalpolicy.FieldVersion, field.TypeString)
	}
	if value, ok := ipu.mutation.PurposeAndScope(); ok {
		_spec.SetField(internalpolicy.FieldPurposeAndScope, field.TypeString, value)
	}
	if ipu.mutation.PurposeAndScopeCleared() {
		_spec.ClearField(internalpolicy.FieldPurposeAndScope, field.TypeString)
	}
	if value, ok := ipu.mutation.Background(); ok {
		_spec.SetField(internalpolicy.FieldBackground, field.TypeString, value)
	}
	if ipu.mutation.BackgroundCleared() {
		_spec.ClearField(internalpolicy.FieldBackground, field.TypeString)
	}
	if value, ok := ipu.mutation.Details(); ok {
		_spec.SetField(internalpolicy.FieldDetails, field.TypeJSON, value)
	}
	if ipu.mutation.DetailsCleared() {
		_spec.ClearField(internalpolicy.FieldDetails, field.TypeJSON)
	}
	if ipu.mutation.ControlobjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlobjectivesTable,
			Columns: internalpolicy.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.InternalPolicyControlobjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.RemovedControlobjectivesIDs(); len(nodes) > 0 && !ipu.mutation.ControlobjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlobjectivesTable,
			Columns: internalpolicy.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.InternalPolicyControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.ControlobjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlobjectivesTable,
			Columns: internalpolicy.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.InternalPolicyControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipu.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: []string{internalpolicy.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.RemovedControlsIDs(); len(nodes) > 0 && !ipu.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: []string{internalpolicy.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: []string{internalpolicy.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipu.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.InternalPolicyProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !ipu.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipu.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.InternalPolicyNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !ipu.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.InternalPolicyTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !ipu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipu.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.ProgramPolicies
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !ipu.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.ProgramPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipu.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipu.schemaConfig.ProgramPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ipu.schemaConfig.InternalPolicy
	ctx = internal.NewSchemaConfigContext(ctx, ipu.schemaConfig)
	_spec.AddModifiers(ipu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ipu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internalpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ipu.mutation.done = true
	return n, nil
}

// InternalPolicyUpdateOne is the builder for updating a single InternalPolicy entity.
type InternalPolicyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InternalPolicyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ipuo *InternalPolicyUpdateOne) SetUpdatedAt(t time.Time) *InternalPolicyUpdateOne {
	ipuo.mutation.SetUpdatedAt(t)
	return ipuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ipuo *InternalPolicyUpdateOne) ClearUpdatedAt() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearUpdatedAt()
	return ipuo
}

// SetUpdatedBy sets the "updated_by" field.
func (ipuo *InternalPolicyUpdateOne) SetUpdatedBy(s string) *InternalPolicyUpdateOne {
	ipuo.mutation.SetUpdatedBy(s)
	return ipuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ipuo *InternalPolicyUpdateOne) SetNillableUpdatedBy(s *string) *InternalPolicyUpdateOne {
	if s != nil {
		ipuo.SetUpdatedBy(*s)
	}
	return ipuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ipuo *InternalPolicyUpdateOne) ClearUpdatedBy() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearUpdatedBy()
	return ipuo
}

// SetDeletedAt sets the "deleted_at" field.
func (ipuo *InternalPolicyUpdateOne) SetDeletedAt(t time.Time) *InternalPolicyUpdateOne {
	ipuo.mutation.SetDeletedAt(t)
	return ipuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ipuo *InternalPolicyUpdateOne) SetNillableDeletedAt(t *time.Time) *InternalPolicyUpdateOne {
	if t != nil {
		ipuo.SetDeletedAt(*t)
	}
	return ipuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ipuo *InternalPolicyUpdateOne) ClearDeletedAt() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearDeletedAt()
	return ipuo
}

// SetDeletedBy sets the "deleted_by" field.
func (ipuo *InternalPolicyUpdateOne) SetDeletedBy(s string) *InternalPolicyUpdateOne {
	ipuo.mutation.SetDeletedBy(s)
	return ipuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ipuo *InternalPolicyUpdateOne) SetNillableDeletedBy(s *string) *InternalPolicyUpdateOne {
	if s != nil {
		ipuo.SetDeletedBy(*s)
	}
	return ipuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ipuo *InternalPolicyUpdateOne) ClearDeletedBy() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearDeletedBy()
	return ipuo
}

// SetTags sets the "tags" field.
func (ipuo *InternalPolicyUpdateOne) SetTags(s []string) *InternalPolicyUpdateOne {
	ipuo.mutation.SetTags(s)
	return ipuo
}

// AppendTags appends s to the "tags" field.
func (ipuo *InternalPolicyUpdateOne) AppendTags(s []string) *InternalPolicyUpdateOne {
	ipuo.mutation.AppendTags(s)
	return ipuo
}

// ClearTags clears the value of the "tags" field.
func (ipuo *InternalPolicyUpdateOne) ClearTags() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearTags()
	return ipuo
}

// SetName sets the "name" field.
func (ipuo *InternalPolicyUpdateOne) SetName(s string) *InternalPolicyUpdateOne {
	ipuo.mutation.SetName(s)
	return ipuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ipuo *InternalPolicyUpdateOne) SetNillableName(s *string) *InternalPolicyUpdateOne {
	if s != nil {
		ipuo.SetName(*s)
	}
	return ipuo
}

// SetDescription sets the "description" field.
func (ipuo *InternalPolicyUpdateOne) SetDescription(s string) *InternalPolicyUpdateOne {
	ipuo.mutation.SetDescription(s)
	return ipuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ipuo *InternalPolicyUpdateOne) SetNillableDescription(s *string) *InternalPolicyUpdateOne {
	if s != nil {
		ipuo.SetDescription(*s)
	}
	return ipuo
}

// SetStatus sets the "status" field.
func (ipuo *InternalPolicyUpdateOne) SetStatus(s string) *InternalPolicyUpdateOne {
	ipuo.mutation.SetStatus(s)
	return ipuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ipuo *InternalPolicyUpdateOne) SetNillableStatus(s *string) *InternalPolicyUpdateOne {
	if s != nil {
		ipuo.SetStatus(*s)
	}
	return ipuo
}

// ClearStatus clears the value of the "status" field.
func (ipuo *InternalPolicyUpdateOne) ClearStatus() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearStatus()
	return ipuo
}

// SetPolicyType sets the "policy_type" field.
func (ipuo *InternalPolicyUpdateOne) SetPolicyType(s string) *InternalPolicyUpdateOne {
	ipuo.mutation.SetPolicyType(s)
	return ipuo
}

// SetNillablePolicyType sets the "policy_type" field if the given value is not nil.
func (ipuo *InternalPolicyUpdateOne) SetNillablePolicyType(s *string) *InternalPolicyUpdateOne {
	if s != nil {
		ipuo.SetPolicyType(*s)
	}
	return ipuo
}

// ClearPolicyType clears the value of the "policy_type" field.
func (ipuo *InternalPolicyUpdateOne) ClearPolicyType() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearPolicyType()
	return ipuo
}

// SetVersion sets the "version" field.
func (ipuo *InternalPolicyUpdateOne) SetVersion(s string) *InternalPolicyUpdateOne {
	ipuo.mutation.SetVersion(s)
	return ipuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ipuo *InternalPolicyUpdateOne) SetNillableVersion(s *string) *InternalPolicyUpdateOne {
	if s != nil {
		ipuo.SetVersion(*s)
	}
	return ipuo
}

// ClearVersion clears the value of the "version" field.
func (ipuo *InternalPolicyUpdateOne) ClearVersion() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearVersion()
	return ipuo
}

// SetPurposeAndScope sets the "purpose_and_scope" field.
func (ipuo *InternalPolicyUpdateOne) SetPurposeAndScope(s string) *InternalPolicyUpdateOne {
	ipuo.mutation.SetPurposeAndScope(s)
	return ipuo
}

// SetNillablePurposeAndScope sets the "purpose_and_scope" field if the given value is not nil.
func (ipuo *InternalPolicyUpdateOne) SetNillablePurposeAndScope(s *string) *InternalPolicyUpdateOne {
	if s != nil {
		ipuo.SetPurposeAndScope(*s)
	}
	return ipuo
}

// ClearPurposeAndScope clears the value of the "purpose_and_scope" field.
func (ipuo *InternalPolicyUpdateOne) ClearPurposeAndScope() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearPurposeAndScope()
	return ipuo
}

// SetBackground sets the "background" field.
func (ipuo *InternalPolicyUpdateOne) SetBackground(s string) *InternalPolicyUpdateOne {
	ipuo.mutation.SetBackground(s)
	return ipuo
}

// SetNillableBackground sets the "background" field if the given value is not nil.
func (ipuo *InternalPolicyUpdateOne) SetNillableBackground(s *string) *InternalPolicyUpdateOne {
	if s != nil {
		ipuo.SetBackground(*s)
	}
	return ipuo
}

// ClearBackground clears the value of the "background" field.
func (ipuo *InternalPolicyUpdateOne) ClearBackground() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearBackground()
	return ipuo
}

// SetDetails sets the "details" field.
func (ipuo *InternalPolicyUpdateOne) SetDetails(m map[string]interface{}) *InternalPolicyUpdateOne {
	ipuo.mutation.SetDetails(m)
	return ipuo
}

// ClearDetails clears the value of the "details" field.
func (ipuo *InternalPolicyUpdateOne) ClearDetails() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearDetails()
	return ipuo
}

// AddControlobjectiveIDs adds the "controlobjectives" edge to the ControlObjective entity by IDs.
func (ipuo *InternalPolicyUpdateOne) AddControlobjectiveIDs(ids ...string) *InternalPolicyUpdateOne {
	ipuo.mutation.AddControlobjectiveIDs(ids...)
	return ipuo
}

// AddControlobjectives adds the "controlobjectives" edges to the ControlObjective entity.
func (ipuo *InternalPolicyUpdateOne) AddControlobjectives(c ...*ControlObjective) *InternalPolicyUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ipuo.AddControlobjectiveIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (ipuo *InternalPolicyUpdateOne) AddControlIDs(ids ...string) *InternalPolicyUpdateOne {
	ipuo.mutation.AddControlIDs(ids...)
	return ipuo
}

// AddControls adds the "controls" edges to the Control entity.
func (ipuo *InternalPolicyUpdateOne) AddControls(c ...*Control) *InternalPolicyUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ipuo.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (ipuo *InternalPolicyUpdateOne) AddProcedureIDs(ids ...string) *InternalPolicyUpdateOne {
	ipuo.mutation.AddProcedureIDs(ids...)
	return ipuo
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (ipuo *InternalPolicyUpdateOne) AddProcedures(p ...*Procedure) *InternalPolicyUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ipuo.AddProcedureIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (ipuo *InternalPolicyUpdateOne) AddNarrativeIDs(ids ...string) *InternalPolicyUpdateOne {
	ipuo.mutation.AddNarrativeIDs(ids...)
	return ipuo
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (ipuo *InternalPolicyUpdateOne) AddNarratives(n ...*Narrative) *InternalPolicyUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ipuo.AddNarrativeIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ipuo *InternalPolicyUpdateOne) AddTaskIDs(ids ...string) *InternalPolicyUpdateOne {
	ipuo.mutation.AddTaskIDs(ids...)
	return ipuo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ipuo *InternalPolicyUpdateOne) AddTasks(t ...*Task) *InternalPolicyUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ipuo.AddTaskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (ipuo *InternalPolicyUpdateOne) AddProgramIDs(ids ...string) *InternalPolicyUpdateOne {
	ipuo.mutation.AddProgramIDs(ids...)
	return ipuo
}

// AddPrograms adds the "programs" edges to the Program entity.
func (ipuo *InternalPolicyUpdateOne) AddPrograms(p ...*Program) *InternalPolicyUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ipuo.AddProgramIDs(ids...)
}

// Mutation returns the InternalPolicyMutation object of the builder.
func (ipuo *InternalPolicyUpdateOne) Mutation() *InternalPolicyMutation {
	return ipuo.mutation
}

// ClearControlobjectives clears all "controlobjectives" edges to the ControlObjective entity.
func (ipuo *InternalPolicyUpdateOne) ClearControlobjectives() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearControlobjectives()
	return ipuo
}

// RemoveControlobjectiveIDs removes the "controlobjectives" edge to ControlObjective entities by IDs.
func (ipuo *InternalPolicyUpdateOne) RemoveControlobjectiveIDs(ids ...string) *InternalPolicyUpdateOne {
	ipuo.mutation.RemoveControlobjectiveIDs(ids...)
	return ipuo
}

// RemoveControlobjectives removes "controlobjectives" edges to ControlObjective entities.
func (ipuo *InternalPolicyUpdateOne) RemoveControlobjectives(c ...*ControlObjective) *InternalPolicyUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ipuo.RemoveControlobjectiveIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (ipuo *InternalPolicyUpdateOne) ClearControls() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearControls()
	return ipuo
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (ipuo *InternalPolicyUpdateOne) RemoveControlIDs(ids ...string) *InternalPolicyUpdateOne {
	ipuo.mutation.RemoveControlIDs(ids...)
	return ipuo
}

// RemoveControls removes "controls" edges to Control entities.
func (ipuo *InternalPolicyUpdateOne) RemoveControls(c ...*Control) *InternalPolicyUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ipuo.RemoveControlIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (ipuo *InternalPolicyUpdateOne) ClearProcedures() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearProcedures()
	return ipuo
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (ipuo *InternalPolicyUpdateOne) RemoveProcedureIDs(ids ...string) *InternalPolicyUpdateOne {
	ipuo.mutation.RemoveProcedureIDs(ids...)
	return ipuo
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (ipuo *InternalPolicyUpdateOne) RemoveProcedures(p ...*Procedure) *InternalPolicyUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ipuo.RemoveProcedureIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (ipuo *InternalPolicyUpdateOne) ClearNarratives() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearNarratives()
	return ipuo
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (ipuo *InternalPolicyUpdateOne) RemoveNarrativeIDs(ids ...string) *InternalPolicyUpdateOne {
	ipuo.mutation.RemoveNarrativeIDs(ids...)
	return ipuo
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (ipuo *InternalPolicyUpdateOne) RemoveNarratives(n ...*Narrative) *InternalPolicyUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ipuo.RemoveNarrativeIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (ipuo *InternalPolicyUpdateOne) ClearTasks() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearTasks()
	return ipuo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (ipuo *InternalPolicyUpdateOne) RemoveTaskIDs(ids ...string) *InternalPolicyUpdateOne {
	ipuo.mutation.RemoveTaskIDs(ids...)
	return ipuo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (ipuo *InternalPolicyUpdateOne) RemoveTasks(t ...*Task) *InternalPolicyUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ipuo.RemoveTaskIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (ipuo *InternalPolicyUpdateOne) ClearPrograms() *InternalPolicyUpdateOne {
	ipuo.mutation.ClearPrograms()
	return ipuo
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (ipuo *InternalPolicyUpdateOne) RemoveProgramIDs(ids ...string) *InternalPolicyUpdateOne {
	ipuo.mutation.RemoveProgramIDs(ids...)
	return ipuo
}

// RemovePrograms removes "programs" edges to Program entities.
func (ipuo *InternalPolicyUpdateOne) RemovePrograms(p ...*Program) *InternalPolicyUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ipuo.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the InternalPolicyUpdate builder.
func (ipuo *InternalPolicyUpdateOne) Where(ps ...predicate.InternalPolicy) *InternalPolicyUpdateOne {
	ipuo.mutation.Where(ps...)
	return ipuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ipuo *InternalPolicyUpdateOne) Select(field string, fields ...string) *InternalPolicyUpdateOne {
	ipuo.fields = append([]string{field}, fields...)
	return ipuo
}

// Save executes the query and returns the updated InternalPolicy entity.
func (ipuo *InternalPolicyUpdateOne) Save(ctx context.Context) (*InternalPolicy, error) {
	if err := ipuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ipuo.sqlSave, ipuo.mutation, ipuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ipuo *InternalPolicyUpdateOne) SaveX(ctx context.Context) *InternalPolicy {
	node, err := ipuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ipuo *InternalPolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := ipuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipuo *InternalPolicyUpdateOne) ExecX(ctx context.Context) {
	if err := ipuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ipuo *InternalPolicyUpdateOne) defaults() error {
	if _, ok := ipuo.mutation.UpdatedAt(); !ok && !ipuo.mutation.UpdatedAtCleared() {
		if internalpolicy.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized internalpolicy.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := internalpolicy.UpdateDefaultUpdatedAt()
		ipuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ipuo *InternalPolicyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InternalPolicyUpdateOne {
	ipuo.modifiers = append(ipuo.modifiers, modifiers...)
	return ipuo
}

func (ipuo *InternalPolicyUpdateOne) sqlSave(ctx context.Context) (_node *InternalPolicy, err error) {
	_spec := sqlgraph.NewUpdateSpec(internalpolicy.Table, internalpolicy.Columns, sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString))
	id, ok := ipuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "InternalPolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ipuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, internalpolicy.FieldID)
		for _, f := range fields {
			if !internalpolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != internalpolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ipuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ipuo.mutation.CreatedAtCleared() {
		_spec.ClearField(internalpolicy.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ipuo.mutation.UpdatedAt(); ok {
		_spec.SetField(internalpolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if ipuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(internalpolicy.FieldUpdatedAt, field.TypeTime)
	}
	if ipuo.mutation.CreatedByCleared() {
		_spec.ClearField(internalpolicy.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ipuo.mutation.UpdatedBy(); ok {
		_spec.SetField(internalpolicy.FieldUpdatedBy, field.TypeString, value)
	}
	if ipuo.mutation.UpdatedByCleared() {
		_spec.ClearField(internalpolicy.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ipuo.mutation.DeletedAt(); ok {
		_spec.SetField(internalpolicy.FieldDeletedAt, field.TypeTime, value)
	}
	if ipuo.mutation.DeletedAtCleared() {
		_spec.ClearField(internalpolicy.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ipuo.mutation.DeletedBy(); ok {
		_spec.SetField(internalpolicy.FieldDeletedBy, field.TypeString, value)
	}
	if ipuo.mutation.DeletedByCleared() {
		_spec.ClearField(internalpolicy.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ipuo.mutation.Tags(); ok {
		_spec.SetField(internalpolicy.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ipuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldTags, value)
		})
	}
	if ipuo.mutation.TagsCleared() {
		_spec.ClearField(internalpolicy.FieldTags, field.TypeJSON)
	}
	if value, ok := ipuo.mutation.Name(); ok {
		_spec.SetField(internalpolicy.FieldName, field.TypeString, value)
	}
	if value, ok := ipuo.mutation.Description(); ok {
		_spec.SetField(internalpolicy.FieldDescription, field.TypeString, value)
	}
	if value, ok := ipuo.mutation.Status(); ok {
		_spec.SetField(internalpolicy.FieldStatus, field.TypeString, value)
	}
	if ipuo.mutation.StatusCleared() {
		_spec.ClearField(internalpolicy.FieldStatus, field.TypeString)
	}
	if value, ok := ipuo.mutation.PolicyType(); ok {
		_spec.SetField(internalpolicy.FieldPolicyType, field.TypeString, value)
	}
	if ipuo.mutation.PolicyTypeCleared() {
		_spec.ClearField(internalpolicy.FieldPolicyType, field.TypeString)
	}
	if value, ok := ipuo.mutation.Version(); ok {
		_spec.SetField(internalpolicy.FieldVersion, field.TypeString, value)
	}
	if ipuo.mutation.VersionCleared() {
		_spec.ClearField(internalpolicy.FieldVersion, field.TypeString)
	}
	if value, ok := ipuo.mutation.PurposeAndScope(); ok {
		_spec.SetField(internalpolicy.FieldPurposeAndScope, field.TypeString, value)
	}
	if ipuo.mutation.PurposeAndScopeCleared() {
		_spec.ClearField(internalpolicy.FieldPurposeAndScope, field.TypeString)
	}
	if value, ok := ipuo.mutation.Background(); ok {
		_spec.SetField(internalpolicy.FieldBackground, field.TypeString, value)
	}
	if ipuo.mutation.BackgroundCleared() {
		_spec.ClearField(internalpolicy.FieldBackground, field.TypeString)
	}
	if value, ok := ipuo.mutation.Details(); ok {
		_spec.SetField(internalpolicy.FieldDetails, field.TypeJSON, value)
	}
	if ipuo.mutation.DetailsCleared() {
		_spec.ClearField(internalpolicy.FieldDetails, field.TypeJSON)
	}
	if ipuo.mutation.ControlobjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlobjectivesTable,
			Columns: internalpolicy.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.InternalPolicyControlobjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.RemovedControlobjectivesIDs(); len(nodes) > 0 && !ipuo.mutation.ControlobjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlobjectivesTable,
			Columns: internalpolicy.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.InternalPolicyControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.ControlobjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlobjectivesTable,
			Columns: internalpolicy.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.InternalPolicyControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipuo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: []string{internalpolicy.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !ipuo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: []string{internalpolicy.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: []string{internalpolicy.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipuo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.InternalPolicyProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !ipuo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipuo.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.InternalPolicyNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !ipuo.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.InternalPolicyTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !ipuo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ipuo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.ProgramPolicies
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !ipuo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.ProgramPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ipuo.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipuo.schemaConfig.ProgramPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ipuo.schemaConfig.InternalPolicy
	ctx = internal.NewSchemaConfigContext(ctx, ipuo.schemaConfig)
	_spec.AddModifiers(ipuo.modifiers...)
	_node = &InternalPolicy{config: ipuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ipuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internalpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ipuo.mutation.done = true
	return _node, nil
}
