// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// InternalPolicyUpdate is the builder for updating InternalPolicy entities.
type InternalPolicyUpdate struct {
	config
	hooks     []Hook
	mutation  *InternalPolicyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InternalPolicyUpdate builder.
func (_u *InternalPolicyUpdate) Where(ps ...predicate.InternalPolicy) *InternalPolicyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *InternalPolicyUpdate) SetUpdatedAt(v time.Time) *InternalPolicyUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *InternalPolicyUpdate) ClearUpdatedAt() *InternalPolicyUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *InternalPolicyUpdate) SetUpdatedBy(v string) *InternalPolicyUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableUpdatedBy(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *InternalPolicyUpdate) ClearUpdatedBy() *InternalPolicyUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *InternalPolicyUpdate) SetDeletedAt(v time.Time) *InternalPolicyUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableDeletedAt(v *time.Time) *InternalPolicyUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *InternalPolicyUpdate) ClearDeletedAt() *InternalPolicyUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *InternalPolicyUpdate) SetDeletedBy(v string) *InternalPolicyUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableDeletedBy(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *InternalPolicyUpdate) ClearDeletedBy() *InternalPolicyUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *InternalPolicyUpdate) SetTags(v []string) *InternalPolicyUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *InternalPolicyUpdate) AppendTags(v []string) *InternalPolicyUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *InternalPolicyUpdate) ClearTags() *InternalPolicyUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *InternalPolicyUpdate) SetRevision(v string) *InternalPolicyUpdate {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableRevision(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *InternalPolicyUpdate) ClearRevision() *InternalPolicyUpdate {
	_u.mutation.ClearRevision()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *InternalPolicyUpdate) SetOwnerID(v string) *InternalPolicyUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableOwnerID(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *InternalPolicyUpdate) ClearOwnerID() *InternalPolicyUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *InternalPolicyUpdate) SetInternalNotes(v string) *InternalPolicyUpdate {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableInternalNotes(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *InternalPolicyUpdate) ClearInternalNotes() *InternalPolicyUpdate {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *InternalPolicyUpdate) SetSystemInternalID(v string) *InternalPolicyUpdate {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableSystemInternalID(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *InternalPolicyUpdate) ClearSystemInternalID() *InternalPolicyUpdate {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetName sets the "name" field.
func (_u *InternalPolicyUpdate) SetName(v string) *InternalPolicyUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableName(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *InternalPolicyUpdate) SetStatus(v enums.DocumentStatus) *InternalPolicyUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableStatus(v *enums.DocumentStatus) *InternalPolicyUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *InternalPolicyUpdate) ClearStatus() *InternalPolicyUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetPolicyType sets the "policy_type" field.
func (_u *InternalPolicyUpdate) SetPolicyType(v string) *InternalPolicyUpdate {
	_u.mutation.SetPolicyType(v)
	return _u
}

// SetNillablePolicyType sets the "policy_type" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillablePolicyType(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetPolicyType(*v)
	}
	return _u
}

// ClearPolicyType clears the value of the "policy_type" field.
func (_u *InternalPolicyUpdate) ClearPolicyType() *InternalPolicyUpdate {
	_u.mutation.ClearPolicyType()
	return _u
}

// SetDetails sets the "details" field.
func (_u *InternalPolicyUpdate) SetDetails(v string) *InternalPolicyUpdate {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableDetails(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *InternalPolicyUpdate) ClearDetails() *InternalPolicyUpdate {
	_u.mutation.ClearDetails()
	return _u
}

// SetApprovalRequired sets the "approval_required" field.
func (_u *InternalPolicyUpdate) SetApprovalRequired(v bool) *InternalPolicyUpdate {
	_u.mutation.SetApprovalRequired(v)
	return _u
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableApprovalRequired(v *bool) *InternalPolicyUpdate {
	if v != nil {
		_u.SetApprovalRequired(*v)
	}
	return _u
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (_u *InternalPolicyUpdate) ClearApprovalRequired() *InternalPolicyUpdate {
	_u.mutation.ClearApprovalRequired()
	return _u
}

// SetReviewDue sets the "review_due" field.
func (_u *InternalPolicyUpdate) SetReviewDue(v time.Time) *InternalPolicyUpdate {
	_u.mutation.SetReviewDue(v)
	return _u
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableReviewDue(v *time.Time) *InternalPolicyUpdate {
	if v != nil {
		_u.SetReviewDue(*v)
	}
	return _u
}

// ClearReviewDue clears the value of the "review_due" field.
func (_u *InternalPolicyUpdate) ClearReviewDue() *InternalPolicyUpdate {
	_u.mutation.ClearReviewDue()
	return _u
}

// SetReviewFrequency sets the "review_frequency" field.
func (_u *InternalPolicyUpdate) SetReviewFrequency(v enums.Frequency) *InternalPolicyUpdate {
	_u.mutation.SetReviewFrequency(v)
	return _u
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableReviewFrequency(v *enums.Frequency) *InternalPolicyUpdate {
	if v != nil {
		_u.SetReviewFrequency(*v)
	}
	return _u
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (_u *InternalPolicyUpdate) ClearReviewFrequency() *InternalPolicyUpdate {
	_u.mutation.ClearReviewFrequency()
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *InternalPolicyUpdate) SetApproverID(v string) *InternalPolicyUpdate {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableApproverID(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *InternalPolicyUpdate) ClearApproverID() *InternalPolicyUpdate {
	_u.mutation.ClearApproverID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *InternalPolicyUpdate) SetDelegateID(v string) *InternalPolicyUpdate {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableDelegateID(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *InternalPolicyUpdate) ClearDelegateID() *InternalPolicyUpdate {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetSummary sets the "summary" field.
func (_u *InternalPolicyUpdate) SetSummary(v string) *InternalPolicyUpdate {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableSummary(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *InternalPolicyUpdate) ClearSummary() *InternalPolicyUpdate {
	_u.mutation.ClearSummary()
	return _u
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_u *InternalPolicyUpdate) SetTagSuggestions(v []string) *InternalPolicyUpdate {
	_u.mutation.SetTagSuggestions(v)
	return _u
}

// AppendTagSuggestions appends value to the "tag_suggestions" field.
func (_u *InternalPolicyUpdate) AppendTagSuggestions(v []string) *InternalPolicyUpdate {
	_u.mutation.AppendTagSuggestions(v)
	return _u
}

// ClearTagSuggestions clears the value of the "tag_suggestions" field.
func (_u *InternalPolicyUpdate) ClearTagSuggestions() *InternalPolicyUpdate {
	_u.mutation.ClearTagSuggestions()
	return _u
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_u *InternalPolicyUpdate) SetDismissedTagSuggestions(v []string) *InternalPolicyUpdate {
	_u.mutation.SetDismissedTagSuggestions(v)
	return _u
}

// AppendDismissedTagSuggestions appends value to the "dismissed_tag_suggestions" field.
func (_u *InternalPolicyUpdate) AppendDismissedTagSuggestions(v []string) *InternalPolicyUpdate {
	_u.mutation.AppendDismissedTagSuggestions(v)
	return _u
}

// ClearDismissedTagSuggestions clears the value of the "dismissed_tag_suggestions" field.
func (_u *InternalPolicyUpdate) ClearDismissedTagSuggestions() *InternalPolicyUpdate {
	_u.mutation.ClearDismissedTagSuggestions()
	return _u
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_u *InternalPolicyUpdate) SetControlSuggestions(v []string) *InternalPolicyUpdate {
	_u.mutation.SetControlSuggestions(v)
	return _u
}

// AppendControlSuggestions appends value to the "control_suggestions" field.
func (_u *InternalPolicyUpdate) AppendControlSuggestions(v []string) *InternalPolicyUpdate {
	_u.mutation.AppendControlSuggestions(v)
	return _u
}

// ClearControlSuggestions clears the value of the "control_suggestions" field.
func (_u *InternalPolicyUpdate) ClearControlSuggestions() *InternalPolicyUpdate {
	_u.mutation.ClearControlSuggestions()
	return _u
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_u *InternalPolicyUpdate) SetDismissedControlSuggestions(v []string) *InternalPolicyUpdate {
	_u.mutation.SetDismissedControlSuggestions(v)
	return _u
}

// AppendDismissedControlSuggestions appends value to the "dismissed_control_suggestions" field.
func (_u *InternalPolicyUpdate) AppendDismissedControlSuggestions(v []string) *InternalPolicyUpdate {
	_u.mutation.AppendDismissedControlSuggestions(v)
	return _u
}

// ClearDismissedControlSuggestions clears the value of the "dismissed_control_suggestions" field.
func (_u *InternalPolicyUpdate) ClearDismissedControlSuggestions() *InternalPolicyUpdate {
	_u.mutation.ClearDismissedControlSuggestions()
	return _u
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_u *InternalPolicyUpdate) SetImprovementSuggestions(v []string) *InternalPolicyUpdate {
	_u.mutation.SetImprovementSuggestions(v)
	return _u
}

// AppendImprovementSuggestions appends value to the "improvement_suggestions" field.
func (_u *InternalPolicyUpdate) AppendImprovementSuggestions(v []string) *InternalPolicyUpdate {
	_u.mutation.AppendImprovementSuggestions(v)
	return _u
}

// ClearImprovementSuggestions clears the value of the "improvement_suggestions" field.
func (_u *InternalPolicyUpdate) ClearImprovementSuggestions() *InternalPolicyUpdate {
	_u.mutation.ClearImprovementSuggestions()
	return _u
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_u *InternalPolicyUpdate) SetDismissedImprovementSuggestions(v []string) *InternalPolicyUpdate {
	_u.mutation.SetDismissedImprovementSuggestions(v)
	return _u
}

// AppendDismissedImprovementSuggestions appends value to the "dismissed_improvement_suggestions" field.
func (_u *InternalPolicyUpdate) AppendDismissedImprovementSuggestions(v []string) *InternalPolicyUpdate {
	_u.mutation.AppendDismissedImprovementSuggestions(v)
	return _u
}

// ClearDismissedImprovementSuggestions clears the value of the "dismissed_improvement_suggestions" field.
func (_u *InternalPolicyUpdate) ClearDismissedImprovementSuggestions() *InternalPolicyUpdate {
	_u.mutation.ClearDismissedImprovementSuggestions()
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *InternalPolicyUpdate) SetFileID(v string) *InternalPolicyUpdate {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableFileID(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// ClearFileID clears the value of the "file_id" field.
func (_u *InternalPolicyUpdate) ClearFileID() *InternalPolicyUpdate {
	_u.mutation.ClearFileID()
	return _u
}

// SetURL sets the "url" field.
func (_u *InternalPolicyUpdate) SetURL(v string) *InternalPolicyUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *InternalPolicyUpdate) SetNillableURL(v *string) *InternalPolicyUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *InternalPolicyUpdate) ClearURL() *InternalPolicyUpdate {
	_u.mutation.ClearURL()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *InternalPolicyUpdate) SetOwner(v *Organization) *InternalPolicyUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *InternalPolicyUpdate) AddBlockedGroupIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *InternalPolicyUpdate) AddBlockedGroups(v ...*Group) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *InternalPolicyUpdate) AddEditorIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *InternalPolicyUpdate) AddEditors(v ...*Group) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// SetApprover sets the "approver" edge to the Group entity.
func (_u *InternalPolicyUpdate) SetApprover(v *Group) *InternalPolicyUpdate {
	return _u.SetApproverID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_u *InternalPolicyUpdate) SetDelegate(v *Group) *InternalPolicyUpdate {
	return _u.SetDelegateID(v.ID)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_u *InternalPolicyUpdate) AddControlObjectiveIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.AddControlObjectiveIDs(ids...)
	return _u
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_u *InternalPolicyUpdate) AddControlObjectives(v ...*ControlObjective) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_u *InternalPolicyUpdate) AddControlImplementationIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.AddControlImplementationIDs(ids...)
	return _u
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_u *InternalPolicyUpdate) AddControlImplementations(v ...*ControlImplementation) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *InternalPolicyUpdate) AddControlIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *InternalPolicyUpdate) AddControls(v ...*Control) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *InternalPolicyUpdate) AddSubcontrolIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *InternalPolicyUpdate) AddSubcontrols(v ...*Subcontrol) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_u *InternalPolicyUpdate) AddProcedureIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.AddProcedureIDs(ids...)
	return _u
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_u *InternalPolicyUpdate) AddProcedures(v ...*Procedure) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_u *InternalPolicyUpdate) AddNarrativeIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.AddNarrativeIDs(ids...)
	return _u
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_u *InternalPolicyUpdate) AddNarratives(v ...*Narrative) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *InternalPolicyUpdate) AddTaskIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *InternalPolicyUpdate) AddTasks(v ...*Task) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *InternalPolicyUpdate) AddRiskIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *InternalPolicyUpdate) AddRisks(v ...*Risk) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *InternalPolicyUpdate) AddProgramIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *InternalPolicyUpdate) AddPrograms(v ...*Program) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// SetFile sets the "file" edge to the File entity.
func (_u *InternalPolicyUpdate) SetFile(v *File) *InternalPolicyUpdate {
	return _u.SetFileID(v.ID)
}

// Mutation returns the InternalPolicyMutation object of the builder.
func (_u *InternalPolicyUpdate) Mutation() *InternalPolicyMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *InternalPolicyUpdate) ClearOwner() *InternalPolicyUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *InternalPolicyUpdate) ClearBlockedGroups() *InternalPolicyUpdate {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *InternalPolicyUpdate) RemoveBlockedGroupIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *InternalPolicyUpdate) RemoveBlockedGroups(v ...*Group) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *InternalPolicyUpdate) ClearEditors() *InternalPolicyUpdate {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *InternalPolicyUpdate) RemoveEditorIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *InternalPolicyUpdate) RemoveEditors(v ...*Group) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearApprover clears the "approver" edge to the Group entity.
func (_u *InternalPolicyUpdate) ClearApprover() *InternalPolicyUpdate {
	_u.mutation.ClearApprover()
	return _u
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (_u *InternalPolicyUpdate) ClearDelegate() *InternalPolicyUpdate {
	_u.mutation.ClearDelegate()
	return _u
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (_u *InternalPolicyUpdate) ClearControlObjectives() *InternalPolicyUpdate {
	_u.mutation.ClearControlObjectives()
	return _u
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (_u *InternalPolicyUpdate) RemoveControlObjectiveIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.RemoveControlObjectiveIDs(ids...)
	return _u
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (_u *InternalPolicyUpdate) RemoveControlObjectives(v ...*ControlObjective) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveIDs(ids...)
}

// ClearControlImplementations clears all "control_implementations" edges to the ControlImplementation entity.
func (_u *InternalPolicyUpdate) ClearControlImplementations() *InternalPolicyUpdate {
	_u.mutation.ClearControlImplementations()
	return _u
}

// RemoveControlImplementationIDs removes the "control_implementations" edge to ControlImplementation entities by IDs.
func (_u *InternalPolicyUpdate) RemoveControlImplementationIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.RemoveControlImplementationIDs(ids...)
	return _u
}

// RemoveControlImplementations removes "control_implementations" edges to ControlImplementation entities.
func (_u *InternalPolicyUpdate) RemoveControlImplementations(v ...*ControlImplementation) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *InternalPolicyUpdate) ClearControls() *InternalPolicyUpdate {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *InternalPolicyUpdate) RemoveControlIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *InternalPolicyUpdate) RemoveControls(v ...*Control) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *InternalPolicyUpdate) ClearSubcontrols() *InternalPolicyUpdate {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *InternalPolicyUpdate) RemoveSubcontrolIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *InternalPolicyUpdate) RemoveSubcontrols(v ...*Subcontrol) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (_u *InternalPolicyUpdate) ClearProcedures() *InternalPolicyUpdate {
	_u.mutation.ClearProcedures()
	return _u
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (_u *InternalPolicyUpdate) RemoveProcedureIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.RemoveProcedureIDs(ids...)
	return _u
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (_u *InternalPolicyUpdate) RemoveProcedures(v ...*Procedure) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (_u *InternalPolicyUpdate) ClearNarratives() *InternalPolicyUpdate {
	_u.mutation.ClearNarratives()
	return _u
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (_u *InternalPolicyUpdate) RemoveNarrativeIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.RemoveNarrativeIDs(ids...)
	return _u
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (_u *InternalPolicyUpdate) RemoveNarratives(v ...*Narrative) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *InternalPolicyUpdate) ClearTasks() *InternalPolicyUpdate {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *InternalPolicyUpdate) RemoveTaskIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *InternalPolicyUpdate) RemoveTasks(v ...*Task) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *InternalPolicyUpdate) ClearRisks() *InternalPolicyUpdate {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *InternalPolicyUpdate) RemoveRiskIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *InternalPolicyUpdate) RemoveRisks(v ...*Risk) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *InternalPolicyUpdate) ClearPrograms() *InternalPolicyUpdate {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *InternalPolicyUpdate) RemoveProgramIDs(ids ...string) *InternalPolicyUpdate {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *InternalPolicyUpdate) RemovePrograms(v ...*Program) *InternalPolicyUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearFile clears the "file" edge to the File entity.
func (_u *InternalPolicyUpdate) ClearFile() *InternalPolicyUpdate {
	_u.mutation.ClearFile()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *InternalPolicyUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InternalPolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *InternalPolicyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InternalPolicyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *InternalPolicyUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if internalpolicy.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized internalpolicy.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := internalpolicy.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *InternalPolicyUpdate) check() error {
	if v, ok := _u.mutation.Revision(); ok {
		if err := internalpolicy.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.revision": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := internalpolicy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := internalpolicy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewFrequency(); ok {
		if err := internalpolicy.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *InternalPolicyUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InternalPolicyUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *InternalPolicyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(internalpolicy.Table, internalpolicy.Columns, sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(internalpolicy.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(internalpolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(internalpolicy.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(internalpolicy.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(internalpolicy.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(internalpolicy.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(internalpolicy.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(internalpolicy.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(internalpolicy.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(internalpolicy.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(internalpolicy.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(internalpolicy.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(internalpolicy.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(internalpolicy.FieldRevision, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(internalpolicy.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(internalpolicy.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(internalpolicy.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(internalpolicy.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(internalpolicy.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(internalpolicy.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(internalpolicy.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(internalpolicy.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.PolicyType(); ok {
		_spec.SetField(internalpolicy.FieldPolicyType, field.TypeString, value)
	}
	if _u.mutation.PolicyTypeCleared() {
		_spec.ClearField(internalpolicy.FieldPolicyType, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(internalpolicy.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(internalpolicy.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovalRequired(); ok {
		_spec.SetField(internalpolicy.FieldApprovalRequired, field.TypeBool, value)
	}
	if _u.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(internalpolicy.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := _u.mutation.ReviewDue(); ok {
		_spec.SetField(internalpolicy.FieldReviewDue, field.TypeTime, value)
	}
	if _u.mutation.ReviewDueCleared() {
		_spec.ClearField(internalpolicy.FieldReviewDue, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewFrequency(); ok {
		_spec.SetField(internalpolicy.FieldReviewFrequency, field.TypeEnum, value)
	}
	if _u.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(internalpolicy.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(internalpolicy.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(internalpolicy.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.TagSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldTagSuggestions, value)
		})
	}
	if _u.mutation.TagSuggestionsCleared() {
		_spec.ClearField(internalpolicy.FieldTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldDismissedTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldDismissedTagSuggestions, value)
		})
	}
	if _u.mutation.DismissedTagSuggestionsCleared() {
		_spec.ClearField(internalpolicy.FieldDismissedTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldControlSuggestions, value)
		})
	}
	if _u.mutation.ControlSuggestionsCleared() {
		_spec.ClearField(internalpolicy.FieldControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldDismissedControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldDismissedControlSuggestions, value)
		})
	}
	if _u.mutation.DismissedControlSuggestionsCleared() {
		_spec.ClearField(internalpolicy.FieldDismissedControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldImprovementSuggestions, value)
		})
	}
	if _u.mutation.ImprovementSuggestionsCleared() {
		_spec.ClearField(internalpolicy.FieldImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldDismissedImprovementSuggestions, value)
		})
	}
	if _u.mutation.DismissedImprovementSuggestionsCleared() {
		_spec.ClearField(internalpolicy.FieldDismissedImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(internalpolicy.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(internalpolicy.FieldURL, field.TypeString)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   internalpolicy.OwnerTable,
			Columns: []string{internalpolicy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   internalpolicy.OwnerTable,
			Columns: []string{internalpolicy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.BlockedGroupsTable,
			Columns: internalpolicy.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.BlockedGroupsTable,
			Columns: internalpolicy.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.BlockedGroupsTable,
			Columns: internalpolicy.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.EditorsTable,
			Columns: internalpolicy.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.EditorsTable,
			Columns: internalpolicy.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.EditorsTable,
			Columns: internalpolicy.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.ApproverTable,
			Columns: []string{internalpolicy.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.ApproverTable,
			Columns: []string{internalpolicy.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.DelegateTable,
			Columns: []string{internalpolicy.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.DelegateTable,
			Columns: []string{internalpolicy.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlObjectivesTable,
			Columns: internalpolicy.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControlObjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlObjectivesTable,
			Columns: internalpolicy.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlObjectivesTable,
			Columns: internalpolicy.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlImplementationsTable,
			Columns: []string{internalpolicy.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlImplementationsTable,
			Columns: []string{internalpolicy.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlImplementationsTable,
			Columns: []string{internalpolicy.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: internalpolicy.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: internalpolicy.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: internalpolicy.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.SubcontrolsTable,
			Columns: internalpolicy.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicySubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.SubcontrolsTable,
			Columns: internalpolicy.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicySubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.SubcontrolsTable,
			Columns: internalpolicy.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicySubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !_u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !_u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.RisksTable,
			Columns: internalpolicy.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.RisksTable,
			Columns: internalpolicy.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.RisksTable,
			Columns: internalpolicy.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramInternalPolicies
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramInternalPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramInternalPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.FileTable,
			Columns: []string{internalpolicy.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.FileTable,
			Columns: []string{internalpolicy.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.InternalPolicy
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internalpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// InternalPolicyUpdateOne is the builder for updating a single InternalPolicy entity.
type InternalPolicyUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InternalPolicyMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *InternalPolicyUpdateOne) SetUpdatedAt(v time.Time) *InternalPolicyUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *InternalPolicyUpdateOne) ClearUpdatedAt() *InternalPolicyUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *InternalPolicyUpdateOne) SetUpdatedBy(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableUpdatedBy(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *InternalPolicyUpdateOne) ClearUpdatedBy() *InternalPolicyUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *InternalPolicyUpdateOne) SetDeletedAt(v time.Time) *InternalPolicyUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableDeletedAt(v *time.Time) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *InternalPolicyUpdateOne) ClearDeletedAt() *InternalPolicyUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *InternalPolicyUpdateOne) SetDeletedBy(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableDeletedBy(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *InternalPolicyUpdateOne) ClearDeletedBy() *InternalPolicyUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *InternalPolicyUpdateOne) SetTags(v []string) *InternalPolicyUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *InternalPolicyUpdateOne) AppendTags(v []string) *InternalPolicyUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *InternalPolicyUpdateOne) ClearTags() *InternalPolicyUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *InternalPolicyUpdateOne) SetRevision(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableRevision(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *InternalPolicyUpdateOne) ClearRevision() *InternalPolicyUpdateOne {
	_u.mutation.ClearRevision()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *InternalPolicyUpdateOne) SetOwnerID(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableOwnerID(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *InternalPolicyUpdateOne) ClearOwnerID() *InternalPolicyUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *InternalPolicyUpdateOne) SetInternalNotes(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableInternalNotes(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *InternalPolicyUpdateOne) ClearInternalNotes() *InternalPolicyUpdateOne {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *InternalPolicyUpdateOne) SetSystemInternalID(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableSystemInternalID(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *InternalPolicyUpdateOne) ClearSystemInternalID() *InternalPolicyUpdateOne {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetName sets the "name" field.
func (_u *InternalPolicyUpdateOne) SetName(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableName(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *InternalPolicyUpdateOne) SetStatus(v enums.DocumentStatus) *InternalPolicyUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableStatus(v *enums.DocumentStatus) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *InternalPolicyUpdateOne) ClearStatus() *InternalPolicyUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetPolicyType sets the "policy_type" field.
func (_u *InternalPolicyUpdateOne) SetPolicyType(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetPolicyType(v)
	return _u
}

// SetNillablePolicyType sets the "policy_type" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillablePolicyType(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetPolicyType(*v)
	}
	return _u
}

// ClearPolicyType clears the value of the "policy_type" field.
func (_u *InternalPolicyUpdateOne) ClearPolicyType() *InternalPolicyUpdateOne {
	_u.mutation.ClearPolicyType()
	return _u
}

// SetDetails sets the "details" field.
func (_u *InternalPolicyUpdateOne) SetDetails(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableDetails(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *InternalPolicyUpdateOne) ClearDetails() *InternalPolicyUpdateOne {
	_u.mutation.ClearDetails()
	return _u
}

// SetApprovalRequired sets the "approval_required" field.
func (_u *InternalPolicyUpdateOne) SetApprovalRequired(v bool) *InternalPolicyUpdateOne {
	_u.mutation.SetApprovalRequired(v)
	return _u
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableApprovalRequired(v *bool) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetApprovalRequired(*v)
	}
	return _u
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (_u *InternalPolicyUpdateOne) ClearApprovalRequired() *InternalPolicyUpdateOne {
	_u.mutation.ClearApprovalRequired()
	return _u
}

// SetReviewDue sets the "review_due" field.
func (_u *InternalPolicyUpdateOne) SetReviewDue(v time.Time) *InternalPolicyUpdateOne {
	_u.mutation.SetReviewDue(v)
	return _u
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableReviewDue(v *time.Time) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetReviewDue(*v)
	}
	return _u
}

// ClearReviewDue clears the value of the "review_due" field.
func (_u *InternalPolicyUpdateOne) ClearReviewDue() *InternalPolicyUpdateOne {
	_u.mutation.ClearReviewDue()
	return _u
}

// SetReviewFrequency sets the "review_frequency" field.
func (_u *InternalPolicyUpdateOne) SetReviewFrequency(v enums.Frequency) *InternalPolicyUpdateOne {
	_u.mutation.SetReviewFrequency(v)
	return _u
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableReviewFrequency(v *enums.Frequency) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetReviewFrequency(*v)
	}
	return _u
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (_u *InternalPolicyUpdateOne) ClearReviewFrequency() *InternalPolicyUpdateOne {
	_u.mutation.ClearReviewFrequency()
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *InternalPolicyUpdateOne) SetApproverID(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableApproverID(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *InternalPolicyUpdateOne) ClearApproverID() *InternalPolicyUpdateOne {
	_u.mutation.ClearApproverID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *InternalPolicyUpdateOne) SetDelegateID(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableDelegateID(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *InternalPolicyUpdateOne) ClearDelegateID() *InternalPolicyUpdateOne {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetSummary sets the "summary" field.
func (_u *InternalPolicyUpdateOne) SetSummary(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableSummary(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *InternalPolicyUpdateOne) ClearSummary() *InternalPolicyUpdateOne {
	_u.mutation.ClearSummary()
	return _u
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_u *InternalPolicyUpdateOne) SetTagSuggestions(v []string) *InternalPolicyUpdateOne {
	_u.mutation.SetTagSuggestions(v)
	return _u
}

// AppendTagSuggestions appends value to the "tag_suggestions" field.
func (_u *InternalPolicyUpdateOne) AppendTagSuggestions(v []string) *InternalPolicyUpdateOne {
	_u.mutation.AppendTagSuggestions(v)
	return _u
}

// ClearTagSuggestions clears the value of the "tag_suggestions" field.
func (_u *InternalPolicyUpdateOne) ClearTagSuggestions() *InternalPolicyUpdateOne {
	_u.mutation.ClearTagSuggestions()
	return _u
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_u *InternalPolicyUpdateOne) SetDismissedTagSuggestions(v []string) *InternalPolicyUpdateOne {
	_u.mutation.SetDismissedTagSuggestions(v)
	return _u
}

// AppendDismissedTagSuggestions appends value to the "dismissed_tag_suggestions" field.
func (_u *InternalPolicyUpdateOne) AppendDismissedTagSuggestions(v []string) *InternalPolicyUpdateOne {
	_u.mutation.AppendDismissedTagSuggestions(v)
	return _u
}

// ClearDismissedTagSuggestions clears the value of the "dismissed_tag_suggestions" field.
func (_u *InternalPolicyUpdateOne) ClearDismissedTagSuggestions() *InternalPolicyUpdateOne {
	_u.mutation.ClearDismissedTagSuggestions()
	return _u
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_u *InternalPolicyUpdateOne) SetControlSuggestions(v []string) *InternalPolicyUpdateOne {
	_u.mutation.SetControlSuggestions(v)
	return _u
}

// AppendControlSuggestions appends value to the "control_suggestions" field.
func (_u *InternalPolicyUpdateOne) AppendControlSuggestions(v []string) *InternalPolicyUpdateOne {
	_u.mutation.AppendControlSuggestions(v)
	return _u
}

// ClearControlSuggestions clears the value of the "control_suggestions" field.
func (_u *InternalPolicyUpdateOne) ClearControlSuggestions() *InternalPolicyUpdateOne {
	_u.mutation.ClearControlSuggestions()
	return _u
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_u *InternalPolicyUpdateOne) SetDismissedControlSuggestions(v []string) *InternalPolicyUpdateOne {
	_u.mutation.SetDismissedControlSuggestions(v)
	return _u
}

// AppendDismissedControlSuggestions appends value to the "dismissed_control_suggestions" field.
func (_u *InternalPolicyUpdateOne) AppendDismissedControlSuggestions(v []string) *InternalPolicyUpdateOne {
	_u.mutation.AppendDismissedControlSuggestions(v)
	return _u
}

// ClearDismissedControlSuggestions clears the value of the "dismissed_control_suggestions" field.
func (_u *InternalPolicyUpdateOne) ClearDismissedControlSuggestions() *InternalPolicyUpdateOne {
	_u.mutation.ClearDismissedControlSuggestions()
	return _u
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_u *InternalPolicyUpdateOne) SetImprovementSuggestions(v []string) *InternalPolicyUpdateOne {
	_u.mutation.SetImprovementSuggestions(v)
	return _u
}

// AppendImprovementSuggestions appends value to the "improvement_suggestions" field.
func (_u *InternalPolicyUpdateOne) AppendImprovementSuggestions(v []string) *InternalPolicyUpdateOne {
	_u.mutation.AppendImprovementSuggestions(v)
	return _u
}

// ClearImprovementSuggestions clears the value of the "improvement_suggestions" field.
func (_u *InternalPolicyUpdateOne) ClearImprovementSuggestions() *InternalPolicyUpdateOne {
	_u.mutation.ClearImprovementSuggestions()
	return _u
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_u *InternalPolicyUpdateOne) SetDismissedImprovementSuggestions(v []string) *InternalPolicyUpdateOne {
	_u.mutation.SetDismissedImprovementSuggestions(v)
	return _u
}

// AppendDismissedImprovementSuggestions appends value to the "dismissed_improvement_suggestions" field.
func (_u *InternalPolicyUpdateOne) AppendDismissedImprovementSuggestions(v []string) *InternalPolicyUpdateOne {
	_u.mutation.AppendDismissedImprovementSuggestions(v)
	return _u
}

// ClearDismissedImprovementSuggestions clears the value of the "dismissed_improvement_suggestions" field.
func (_u *InternalPolicyUpdateOne) ClearDismissedImprovementSuggestions() *InternalPolicyUpdateOne {
	_u.mutation.ClearDismissedImprovementSuggestions()
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *InternalPolicyUpdateOne) SetFileID(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableFileID(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// ClearFileID clears the value of the "file_id" field.
func (_u *InternalPolicyUpdateOne) ClearFileID() *InternalPolicyUpdateOne {
	_u.mutation.ClearFileID()
	return _u
}

// SetURL sets the "url" field.
func (_u *InternalPolicyUpdateOne) SetURL(v string) *InternalPolicyUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *InternalPolicyUpdateOne) SetNillableURL(v *string) *InternalPolicyUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *InternalPolicyUpdateOne) ClearURL() *InternalPolicyUpdateOne {
	_u.mutation.ClearURL()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *InternalPolicyUpdateOne) SetOwner(v *Organization) *InternalPolicyUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *InternalPolicyUpdateOne) AddBlockedGroupIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *InternalPolicyUpdateOne) AddBlockedGroups(v ...*Group) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *InternalPolicyUpdateOne) AddEditorIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *InternalPolicyUpdateOne) AddEditors(v ...*Group) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// SetApprover sets the "approver" edge to the Group entity.
func (_u *InternalPolicyUpdateOne) SetApprover(v *Group) *InternalPolicyUpdateOne {
	return _u.SetApproverID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_u *InternalPolicyUpdateOne) SetDelegate(v *Group) *InternalPolicyUpdateOne {
	return _u.SetDelegateID(v.ID)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_u *InternalPolicyUpdateOne) AddControlObjectiveIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.AddControlObjectiveIDs(ids...)
	return _u
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_u *InternalPolicyUpdateOne) AddControlObjectives(v ...*ControlObjective) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_u *InternalPolicyUpdateOne) AddControlImplementationIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.AddControlImplementationIDs(ids...)
	return _u
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_u *InternalPolicyUpdateOne) AddControlImplementations(v ...*ControlImplementation) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *InternalPolicyUpdateOne) AddControlIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *InternalPolicyUpdateOne) AddControls(v ...*Control) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *InternalPolicyUpdateOne) AddSubcontrolIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *InternalPolicyUpdateOne) AddSubcontrols(v ...*Subcontrol) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_u *InternalPolicyUpdateOne) AddProcedureIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.AddProcedureIDs(ids...)
	return _u
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_u *InternalPolicyUpdateOne) AddProcedures(v ...*Procedure) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_u *InternalPolicyUpdateOne) AddNarrativeIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.AddNarrativeIDs(ids...)
	return _u
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_u *InternalPolicyUpdateOne) AddNarratives(v ...*Narrative) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *InternalPolicyUpdateOne) AddTaskIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *InternalPolicyUpdateOne) AddTasks(v ...*Task) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *InternalPolicyUpdateOne) AddRiskIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *InternalPolicyUpdateOne) AddRisks(v ...*Risk) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *InternalPolicyUpdateOne) AddProgramIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *InternalPolicyUpdateOne) AddPrograms(v ...*Program) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// SetFile sets the "file" edge to the File entity.
func (_u *InternalPolicyUpdateOne) SetFile(v *File) *InternalPolicyUpdateOne {
	return _u.SetFileID(v.ID)
}

// Mutation returns the InternalPolicyMutation object of the builder.
func (_u *InternalPolicyUpdateOne) Mutation() *InternalPolicyMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *InternalPolicyUpdateOne) ClearOwner() *InternalPolicyUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *InternalPolicyUpdateOne) ClearBlockedGroups() *InternalPolicyUpdateOne {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *InternalPolicyUpdateOne) RemoveBlockedGroupIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *InternalPolicyUpdateOne) RemoveBlockedGroups(v ...*Group) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *InternalPolicyUpdateOne) ClearEditors() *InternalPolicyUpdateOne {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *InternalPolicyUpdateOne) RemoveEditorIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *InternalPolicyUpdateOne) RemoveEditors(v ...*Group) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearApprover clears the "approver" edge to the Group entity.
func (_u *InternalPolicyUpdateOne) ClearApprover() *InternalPolicyUpdateOne {
	_u.mutation.ClearApprover()
	return _u
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (_u *InternalPolicyUpdateOne) ClearDelegate() *InternalPolicyUpdateOne {
	_u.mutation.ClearDelegate()
	return _u
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (_u *InternalPolicyUpdateOne) ClearControlObjectives() *InternalPolicyUpdateOne {
	_u.mutation.ClearControlObjectives()
	return _u
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (_u *InternalPolicyUpdateOne) RemoveControlObjectiveIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.RemoveControlObjectiveIDs(ids...)
	return _u
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (_u *InternalPolicyUpdateOne) RemoveControlObjectives(v ...*ControlObjective) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveIDs(ids...)
}

// ClearControlImplementations clears all "control_implementations" edges to the ControlImplementation entity.
func (_u *InternalPolicyUpdateOne) ClearControlImplementations() *InternalPolicyUpdateOne {
	_u.mutation.ClearControlImplementations()
	return _u
}

// RemoveControlImplementationIDs removes the "control_implementations" edge to ControlImplementation entities by IDs.
func (_u *InternalPolicyUpdateOne) RemoveControlImplementationIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.RemoveControlImplementationIDs(ids...)
	return _u
}

// RemoveControlImplementations removes "control_implementations" edges to ControlImplementation entities.
func (_u *InternalPolicyUpdateOne) RemoveControlImplementations(v ...*ControlImplementation) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *InternalPolicyUpdateOne) ClearControls() *InternalPolicyUpdateOne {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *InternalPolicyUpdateOne) RemoveControlIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *InternalPolicyUpdateOne) RemoveControls(v ...*Control) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *InternalPolicyUpdateOne) ClearSubcontrols() *InternalPolicyUpdateOne {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *InternalPolicyUpdateOne) RemoveSubcontrolIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *InternalPolicyUpdateOne) RemoveSubcontrols(v ...*Subcontrol) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (_u *InternalPolicyUpdateOne) ClearProcedures() *InternalPolicyUpdateOne {
	_u.mutation.ClearProcedures()
	return _u
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (_u *InternalPolicyUpdateOne) RemoveProcedureIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.RemoveProcedureIDs(ids...)
	return _u
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (_u *InternalPolicyUpdateOne) RemoveProcedures(v ...*Procedure) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (_u *InternalPolicyUpdateOne) ClearNarratives() *InternalPolicyUpdateOne {
	_u.mutation.ClearNarratives()
	return _u
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (_u *InternalPolicyUpdateOne) RemoveNarrativeIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.RemoveNarrativeIDs(ids...)
	return _u
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (_u *InternalPolicyUpdateOne) RemoveNarratives(v ...*Narrative) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *InternalPolicyUpdateOne) ClearTasks() *InternalPolicyUpdateOne {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *InternalPolicyUpdateOne) RemoveTaskIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *InternalPolicyUpdateOne) RemoveTasks(v ...*Task) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *InternalPolicyUpdateOne) ClearRisks() *InternalPolicyUpdateOne {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *InternalPolicyUpdateOne) RemoveRiskIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *InternalPolicyUpdateOne) RemoveRisks(v ...*Risk) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *InternalPolicyUpdateOne) ClearPrograms() *InternalPolicyUpdateOne {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *InternalPolicyUpdateOne) RemoveProgramIDs(ids ...string) *InternalPolicyUpdateOne {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *InternalPolicyUpdateOne) RemovePrograms(v ...*Program) *InternalPolicyUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearFile clears the "file" edge to the File entity.
func (_u *InternalPolicyUpdateOne) ClearFile() *InternalPolicyUpdateOne {
	_u.mutation.ClearFile()
	return _u
}

// Where appends a list predicates to the InternalPolicyUpdate builder.
func (_u *InternalPolicyUpdateOne) Where(ps ...predicate.InternalPolicy) *InternalPolicyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *InternalPolicyUpdateOne) Select(field string, fields ...string) *InternalPolicyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated InternalPolicy entity.
func (_u *InternalPolicyUpdateOne) Save(ctx context.Context) (*InternalPolicy, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InternalPolicyUpdateOne) SaveX(ctx context.Context) *InternalPolicy {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *InternalPolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InternalPolicyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *InternalPolicyUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if internalpolicy.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized internalpolicy.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := internalpolicy.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *InternalPolicyUpdateOne) check() error {
	if v, ok := _u.mutation.Revision(); ok {
		if err := internalpolicy.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.revision": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := internalpolicy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := internalpolicy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewFrequency(); ok {
		if err := internalpolicy.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *InternalPolicyUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InternalPolicyUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *InternalPolicyUpdateOne) sqlSave(ctx context.Context) (_node *InternalPolicy, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(internalpolicy.Table, internalpolicy.Columns, sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "InternalPolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, internalpolicy.FieldID)
		for _, f := range fields {
			if !internalpolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != internalpolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(internalpolicy.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(internalpolicy.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(internalpolicy.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(internalpolicy.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(internalpolicy.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(internalpolicy.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(internalpolicy.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(internalpolicy.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(internalpolicy.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(internalpolicy.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(internalpolicy.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(internalpolicy.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(internalpolicy.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(internalpolicy.FieldRevision, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(internalpolicy.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(internalpolicy.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(internalpolicy.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(internalpolicy.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(internalpolicy.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(internalpolicy.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(internalpolicy.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(internalpolicy.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.PolicyType(); ok {
		_spec.SetField(internalpolicy.FieldPolicyType, field.TypeString, value)
	}
	if _u.mutation.PolicyTypeCleared() {
		_spec.ClearField(internalpolicy.FieldPolicyType, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(internalpolicy.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(internalpolicy.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovalRequired(); ok {
		_spec.SetField(internalpolicy.FieldApprovalRequired, field.TypeBool, value)
	}
	if _u.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(internalpolicy.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := _u.mutation.ReviewDue(); ok {
		_spec.SetField(internalpolicy.FieldReviewDue, field.TypeTime, value)
	}
	if _u.mutation.ReviewDueCleared() {
		_spec.ClearField(internalpolicy.FieldReviewDue, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewFrequency(); ok {
		_spec.SetField(internalpolicy.FieldReviewFrequency, field.TypeEnum, value)
	}
	if _u.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(internalpolicy.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(internalpolicy.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(internalpolicy.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.TagSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldTagSuggestions, value)
		})
	}
	if _u.mutation.TagSuggestionsCleared() {
		_spec.ClearField(internalpolicy.FieldTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldDismissedTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldDismissedTagSuggestions, value)
		})
	}
	if _u.mutation.DismissedTagSuggestionsCleared() {
		_spec.ClearField(internalpolicy.FieldDismissedTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldControlSuggestions, value)
		})
	}
	if _u.mutation.ControlSuggestionsCleared() {
		_spec.ClearField(internalpolicy.FieldControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldDismissedControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldDismissedControlSuggestions, value)
		})
	}
	if _u.mutation.DismissedControlSuggestionsCleared() {
		_spec.ClearField(internalpolicy.FieldDismissedControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldImprovementSuggestions, value)
		})
	}
	if _u.mutation.ImprovementSuggestionsCleared() {
		_spec.ClearField(internalpolicy.FieldImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicy.FieldDismissedImprovementSuggestions, value)
		})
	}
	if _u.mutation.DismissedImprovementSuggestionsCleared() {
		_spec.ClearField(internalpolicy.FieldDismissedImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(internalpolicy.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(internalpolicy.FieldURL, field.TypeString)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   internalpolicy.OwnerTable,
			Columns: []string{internalpolicy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   internalpolicy.OwnerTable,
			Columns: []string{internalpolicy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.BlockedGroupsTable,
			Columns: internalpolicy.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.BlockedGroupsTable,
			Columns: internalpolicy.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.BlockedGroupsTable,
			Columns: internalpolicy.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.EditorsTable,
			Columns: internalpolicy.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.EditorsTable,
			Columns: internalpolicy.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.EditorsTable,
			Columns: internalpolicy.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.ApproverTable,
			Columns: []string{internalpolicy.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.ApproverTable,
			Columns: []string{internalpolicy.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.DelegateTable,
			Columns: []string{internalpolicy.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.DelegateTable,
			Columns: []string{internalpolicy.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlObjectivesTable,
			Columns: internalpolicy.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControlObjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlObjectivesTable,
			Columns: internalpolicy.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlObjectivesTable,
			Columns: internalpolicy.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlImplementationsTable,
			Columns: []string{internalpolicy.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlImplementationsTable,
			Columns: []string{internalpolicy.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlImplementationsTable,
			Columns: []string{internalpolicy.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: internalpolicy.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: internalpolicy.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: internalpolicy.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.SubcontrolsTable,
			Columns: internalpolicy.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicySubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.SubcontrolsTable,
			Columns: internalpolicy.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicySubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.SubcontrolsTable,
			Columns: internalpolicy.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicySubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !_u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !_u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.RisksTable,
			Columns: internalpolicy.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.RisksTable,
			Columns: internalpolicy.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.RisksTable,
			Columns: internalpolicy.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramInternalPolicies
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramInternalPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramInternalPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.FileTable,
			Columns: []string{internalpolicy.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.FileTable,
			Columns: []string{internalpolicy.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.InternalPolicy
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &InternalPolicy{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internalpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
