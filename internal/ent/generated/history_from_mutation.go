// Code generated by entx.history, DO NOT EDIT.

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent"
	"github.com/theopenlane/entx"
	"github.com/theopenlane/entx/history"
)

var (
	idNotFoundError = errors.New("could not get id from mutation")
)

func EntOpToHistoryOp(op ent.Op) history.OpType {
	switch op {
	case ent.OpDelete, ent.OpDeleteOne:
		return history.OpTypeDelete
	case ent.OpUpdate, ent.OpUpdateOne:
		return history.OpTypeUpdate
	default:
		return history.OpTypeInsert
	}
}

func (m *ActionPlanMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.ActionPlanHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if revision, exists := m.Revision(); exists {
		create = create.SetRevision(revision)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	if actionPlanType, exists := m.ActionPlanType(); exists {
		create = create.SetActionPlanType(actionPlanType)
	}

	if details, exists := m.Details(); exists {
		create = create.SetDetails(details)
	}

	if approvalRequired, exists := m.ApprovalRequired(); exists {
		create = create.SetApprovalRequired(approvalRequired)
	}

	if reviewDue, exists := m.ReviewDue(); exists {
		create = create.SetReviewDue(reviewDue)
	}

	if reviewFrequency, exists := m.ReviewFrequency(); exists {
		create = create.SetReviewFrequency(reviewFrequency)
	}

	if approverID, exists := m.ApproverID(); exists {
		create = create.SetApproverID(approverID)
	}

	if delegateID, exists := m.DelegateID(); exists {
		create = create.SetDelegateID(delegateID)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if dueDate, exists := m.DueDate(); exists {
		create = create.SetDueDate(dueDate)
	}

	if priority, exists := m.Priority(); exists {
		create = create.SetPriority(priority)
	}

	if source, exists := m.Source(); exists {
		create = create.SetSource(source)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *ActionPlanMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		actionplan, err := client.ActionPlan.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ActionPlanHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(actionplan.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(actionplan.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(actionplan.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(actionplan.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(actionplan.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(actionplan.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(actionplan.Tags)
		}

		if revision, exists := m.Revision(); exists {
			create = create.SetRevision(revision)
		} else {
			create = create.SetRevision(actionplan.Revision)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(actionplan.Name)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(actionplan.Status)
		}

		if actionPlanType, exists := m.ActionPlanType(); exists {
			create = create.SetActionPlanType(actionPlanType)
		} else {
			create = create.SetActionPlanType(actionplan.ActionPlanType)
		}

		if details, exists := m.Details(); exists {
			create = create.SetDetails(details)
		} else {
			create = create.SetDetails(actionplan.Details)
		}

		if approvalRequired, exists := m.ApprovalRequired(); exists {
			create = create.SetApprovalRequired(approvalRequired)
		} else {
			create = create.SetApprovalRequired(actionplan.ApprovalRequired)
		}

		if reviewDue, exists := m.ReviewDue(); exists {
			create = create.SetReviewDue(reviewDue)
		} else {
			create = create.SetReviewDue(actionplan.ReviewDue)
		}

		if reviewFrequency, exists := m.ReviewFrequency(); exists {
			create = create.SetReviewFrequency(reviewFrequency)
		} else {
			create = create.SetReviewFrequency(actionplan.ReviewFrequency)
		}

		if approverID, exists := m.ApproverID(); exists {
			create = create.SetApproverID(approverID)
		} else {
			create = create.SetApproverID(actionplan.ApproverID)
		}

		if delegateID, exists := m.DelegateID(); exists {
			create = create.SetDelegateID(delegateID)
		} else {
			create = create.SetDelegateID(actionplan.DelegateID)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(actionplan.OwnerID)
		}

		if dueDate, exists := m.DueDate(); exists {
			create = create.SetDueDate(dueDate)
		} else {
			create = create.SetDueDate(actionplan.DueDate)
		}

		if priority, exists := m.Priority(); exists {
			create = create.SetPriority(priority)
		} else {
			create = create.SetPriority(actionplan.Priority)
		}

		if source, exists := m.Source(); exists {
			create = create.SetSource(source)
		} else {
			create = create.SetSource(actionplan.Source)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *ActionPlanMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		actionplan, err := client.ActionPlan.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ActionPlanHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(actionplan.CreatedAt).
			SetUpdatedAt(actionplan.UpdatedAt).
			SetCreatedBy(actionplan.CreatedBy).
			SetUpdatedBy(actionplan.UpdatedBy).
			SetDeletedAt(actionplan.DeletedAt).
			SetDeletedBy(actionplan.DeletedBy).
			SetTags(actionplan.Tags).
			SetRevision(actionplan.Revision).
			SetName(actionplan.Name).
			SetStatus(actionplan.Status).
			SetActionPlanType(actionplan.ActionPlanType).
			SetDetails(actionplan.Details).
			SetApprovalRequired(actionplan.ApprovalRequired).
			SetReviewDue(actionplan.ReviewDue).
			SetReviewFrequency(actionplan.ReviewFrequency).
			SetApproverID(actionplan.ApproverID).
			SetDelegateID(actionplan.DelegateID).
			SetOwnerID(actionplan.OwnerID).
			SetDueDate(actionplan.DueDate).
			SetPriority(actionplan.Priority).
			SetSource(actionplan.Source).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *ContactMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.ContactHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if fullName, exists := m.FullName(); exists {
		create = create.SetFullName(fullName)
	}

	if title, exists := m.Title(); exists {
		create = create.SetTitle(title)
	}

	if company, exists := m.Company(); exists {
		create = create.SetCompany(company)
	}

	if email, exists := m.Email(); exists {
		create = create.SetEmail(email)
	}

	if phoneNumber, exists := m.PhoneNumber(); exists {
		create = create.SetPhoneNumber(phoneNumber)
	}

	if address, exists := m.Address(); exists {
		create = create.SetAddress(address)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *ContactMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		contact, err := client.Contact.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ContactHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(contact.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(contact.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(contact.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(contact.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(contact.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(contact.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(contact.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(contact.OwnerID)
		}

		if fullName, exists := m.FullName(); exists {
			create = create.SetFullName(fullName)
		} else {
			create = create.SetFullName(contact.FullName)
		}

		if title, exists := m.Title(); exists {
			create = create.SetTitle(title)
		} else {
			create = create.SetTitle(contact.Title)
		}

		if company, exists := m.Company(); exists {
			create = create.SetCompany(company)
		} else {
			create = create.SetCompany(contact.Company)
		}

		if email, exists := m.Email(); exists {
			create = create.SetEmail(email)
		} else {
			create = create.SetEmail(contact.Email)
		}

		if phoneNumber, exists := m.PhoneNumber(); exists {
			create = create.SetPhoneNumber(phoneNumber)
		} else {
			create = create.SetPhoneNumber(contact.PhoneNumber)
		}

		if address, exists := m.Address(); exists {
			create = create.SetAddress(address)
		} else {
			create = create.SetAddress(contact.Address)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(contact.Status)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *ContactMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		contact, err := client.Contact.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ContactHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(contact.CreatedAt).
			SetUpdatedAt(contact.UpdatedAt).
			SetCreatedBy(contact.CreatedBy).
			SetUpdatedBy(contact.UpdatedBy).
			SetDeletedAt(contact.DeletedAt).
			SetDeletedBy(contact.DeletedBy).
			SetTags(contact.Tags).
			SetOwnerID(contact.OwnerID).
			SetFullName(contact.FullName).
			SetTitle(contact.Title).
			SetCompany(contact.Company).
			SetEmail(contact.Email).
			SetPhoneNumber(contact.PhoneNumber).
			SetAddress(contact.Address).
			SetStatus(contact.Status).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *ControlMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.ControlHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if referenceID, exists := m.ReferenceID(); exists {
		create = create.SetReferenceID(referenceID)
	}

	if auditorReferenceID, exists := m.AuditorReferenceID(); exists {
		create = create.SetAuditorReferenceID(auditorReferenceID)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	if source, exists := m.Source(); exists {
		create = create.SetSource(source)
	}

	if controlType, exists := m.ControlType(); exists {
		create = create.SetControlType(controlType)
	}

	if category, exists := m.Category(); exists {
		create = create.SetCategory(category)
	}

	if categoryID, exists := m.CategoryID(); exists {
		create = create.SetCategoryID(categoryID)
	}

	if subcategory, exists := m.Subcategory(); exists {
		create = create.SetSubcategory(subcategory)
	}

	if mappedCategories, exists := m.MappedCategories(); exists {
		create = create.SetMappedCategories(mappedCategories)
	}

	if assessmentObjectives, exists := m.AssessmentObjectives(); exists {
		create = create.SetAssessmentObjectives(assessmentObjectives)
	}

	if assessmentMethods, exists := m.AssessmentMethods(); exists {
		create = create.SetAssessmentMethods(assessmentMethods)
	}

	if controlQuestions, exists := m.ControlQuestions(); exists {
		create = create.SetControlQuestions(controlQuestions)
	}

	if implementationGuidance, exists := m.ImplementationGuidance(); exists {
		create = create.SetImplementationGuidance(implementationGuidance)
	}

	if exampleEvidence, exists := m.ExampleEvidence(); exists {
		create = create.SetExampleEvidence(exampleEvidence)
	}

	if references, exists := m.References(); exists {
		create = create.SetReferences(references)
	}

	if controlOwnerID, exists := m.ControlOwnerID(); exists {
		create = create.SetControlOwnerID(controlOwnerID)
	}

	if delegateID, exists := m.DelegateID(); exists {
		create = create.SetDelegateID(delegateID)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if refCode, exists := m.RefCode(); exists {
		create = create.SetRefCode(refCode)
	}

	if standardID, exists := m.StandardID(); exists {
		create = create.SetStandardID(standardID)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *ControlMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		control, err := client.Control.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ControlHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(control.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(control.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(control.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(control.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(control.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(control.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(control.DisplayID)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(control.Tags)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(control.Description)
		}

		if referenceID, exists := m.ReferenceID(); exists {
			create = create.SetReferenceID(referenceID)
		} else {
			create = create.SetReferenceID(control.ReferenceID)
		}

		if auditorReferenceID, exists := m.AuditorReferenceID(); exists {
			create = create.SetAuditorReferenceID(auditorReferenceID)
		} else {
			create = create.SetAuditorReferenceID(control.AuditorReferenceID)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(control.Status)
		}

		if source, exists := m.Source(); exists {
			create = create.SetSource(source)
		} else {
			create = create.SetSource(control.Source)
		}

		if controlType, exists := m.ControlType(); exists {
			create = create.SetControlType(controlType)
		} else {
			create = create.SetControlType(control.ControlType)
		}

		if category, exists := m.Category(); exists {
			create = create.SetCategory(category)
		} else {
			create = create.SetCategory(control.Category)
		}

		if categoryID, exists := m.CategoryID(); exists {
			create = create.SetCategoryID(categoryID)
		} else {
			create = create.SetCategoryID(control.CategoryID)
		}

		if subcategory, exists := m.Subcategory(); exists {
			create = create.SetSubcategory(subcategory)
		} else {
			create = create.SetSubcategory(control.Subcategory)
		}

		if mappedCategories, exists := m.MappedCategories(); exists {
			create = create.SetMappedCategories(mappedCategories)
		} else {
			create = create.SetMappedCategories(control.MappedCategories)
		}

		if assessmentObjectives, exists := m.AssessmentObjectives(); exists {
			create = create.SetAssessmentObjectives(assessmentObjectives)
		} else {
			create = create.SetAssessmentObjectives(control.AssessmentObjectives)
		}

		if assessmentMethods, exists := m.AssessmentMethods(); exists {
			create = create.SetAssessmentMethods(assessmentMethods)
		} else {
			create = create.SetAssessmentMethods(control.AssessmentMethods)
		}

		if controlQuestions, exists := m.ControlQuestions(); exists {
			create = create.SetControlQuestions(controlQuestions)
		} else {
			create = create.SetControlQuestions(control.ControlQuestions)
		}

		if implementationGuidance, exists := m.ImplementationGuidance(); exists {
			create = create.SetImplementationGuidance(implementationGuidance)
		} else {
			create = create.SetImplementationGuidance(control.ImplementationGuidance)
		}

		if exampleEvidence, exists := m.ExampleEvidence(); exists {
			create = create.SetExampleEvidence(exampleEvidence)
		} else {
			create = create.SetExampleEvidence(control.ExampleEvidence)
		}

		if references, exists := m.References(); exists {
			create = create.SetReferences(references)
		} else {
			create = create.SetReferences(control.References)
		}

		if controlOwnerID, exists := m.ControlOwnerID(); exists {
			create = create.SetControlOwnerID(controlOwnerID)
		} else {
			create = create.SetControlOwnerID(control.ControlOwnerID)
		}

		if delegateID, exists := m.DelegateID(); exists {
			create = create.SetDelegateID(delegateID)
		} else {
			create = create.SetDelegateID(control.DelegateID)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(control.OwnerID)
		}

		if refCode, exists := m.RefCode(); exists {
			create = create.SetRefCode(refCode)
		} else {
			create = create.SetRefCode(control.RefCode)
		}

		if standardID, exists := m.StandardID(); exists {
			create = create.SetStandardID(standardID)
		} else {
			create = create.SetStandardID(control.StandardID)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *ControlMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		control, err := client.Control.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ControlHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(control.CreatedAt).
			SetUpdatedAt(control.UpdatedAt).
			SetCreatedBy(control.CreatedBy).
			SetUpdatedBy(control.UpdatedBy).
			SetDeletedAt(control.DeletedAt).
			SetDeletedBy(control.DeletedBy).
			SetDisplayID(control.DisplayID).
			SetTags(control.Tags).
			SetDescription(control.Description).
			SetReferenceID(control.ReferenceID).
			SetAuditorReferenceID(control.AuditorReferenceID).
			SetStatus(control.Status).
			SetSource(control.Source).
			SetControlType(control.ControlType).
			SetCategory(control.Category).
			SetCategoryID(control.CategoryID).
			SetSubcategory(control.Subcategory).
			SetMappedCategories(control.MappedCategories).
			SetAssessmentObjectives(control.AssessmentObjectives).
			SetAssessmentMethods(control.AssessmentMethods).
			SetControlQuestions(control.ControlQuestions).
			SetImplementationGuidance(control.ImplementationGuidance).
			SetExampleEvidence(control.ExampleEvidence).
			SetReferences(control.References).
			SetControlOwnerID(control.ControlOwnerID).
			SetDelegateID(control.DelegateID).
			SetOwnerID(control.OwnerID).
			SetRefCode(control.RefCode).
			SetStandardID(control.StandardID).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *ControlImplementationMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.ControlImplementationHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	if implementationDate, exists := m.ImplementationDate(); exists {
		create = create.SetImplementationDate(implementationDate)
	}

	if verified, exists := m.Verified(); exists {
		create = create.SetVerified(verified)
	}

	if verificationDate, exists := m.VerificationDate(); exists {
		create = create.SetVerificationDate(verificationDate)
	}

	if details, exists := m.Details(); exists {
		create = create.SetDetails(details)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *ControlImplementationMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		controlimplementation, err := client.ControlImplementation.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ControlImplementationHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(controlimplementation.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(controlimplementation.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(controlimplementation.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(controlimplementation.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(controlimplementation.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(controlimplementation.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(controlimplementation.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(controlimplementation.OwnerID)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(controlimplementation.Status)
		}

		if implementationDate, exists := m.ImplementationDate(); exists {
			create = create.SetImplementationDate(implementationDate)
		} else {
			create = create.SetImplementationDate(controlimplementation.ImplementationDate)
		}

		if verified, exists := m.Verified(); exists {
			create = create.SetVerified(verified)
		} else {
			create = create.SetVerified(controlimplementation.Verified)
		}

		if verificationDate, exists := m.VerificationDate(); exists {
			create = create.SetVerificationDate(verificationDate)
		} else {
			create = create.SetVerificationDate(controlimplementation.VerificationDate)
		}

		if details, exists := m.Details(); exists {
			create = create.SetDetails(details)
		} else {
			create = create.SetDetails(controlimplementation.Details)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *ControlImplementationMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		controlimplementation, err := client.ControlImplementation.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ControlImplementationHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(controlimplementation.CreatedAt).
			SetUpdatedAt(controlimplementation.UpdatedAt).
			SetCreatedBy(controlimplementation.CreatedBy).
			SetUpdatedBy(controlimplementation.UpdatedBy).
			SetDeletedAt(controlimplementation.DeletedAt).
			SetDeletedBy(controlimplementation.DeletedBy).
			SetTags(controlimplementation.Tags).
			SetOwnerID(controlimplementation.OwnerID).
			SetStatus(controlimplementation.Status).
			SetImplementationDate(controlimplementation.ImplementationDate).
			SetVerified(controlimplementation.Verified).
			SetVerificationDate(controlimplementation.VerificationDate).
			SetDetails(controlimplementation.Details).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *ControlObjectiveMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.ControlObjectiveHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if revision, exists := m.Revision(); exists {
		create = create.SetRevision(revision)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if desiredOutcome, exists := m.DesiredOutcome(); exists {
		create = create.SetDesiredOutcome(desiredOutcome)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	if source, exists := m.Source(); exists {
		create = create.SetSource(source)
	}

	if controlObjectiveType, exists := m.ControlObjectiveType(); exists {
		create = create.SetControlObjectiveType(controlObjectiveType)
	}

	if category, exists := m.Category(); exists {
		create = create.SetCategory(category)
	}

	if subcategory, exists := m.Subcategory(); exists {
		create = create.SetSubcategory(subcategory)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *ControlObjectiveMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		controlobjective, err := client.ControlObjective.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ControlObjectiveHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(controlobjective.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(controlobjective.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(controlobjective.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(controlobjective.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(controlobjective.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(controlobjective.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(controlobjective.DisplayID)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(controlobjective.Tags)
		}

		if revision, exists := m.Revision(); exists {
			create = create.SetRevision(revision)
		} else {
			create = create.SetRevision(controlobjective.Revision)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(controlobjective.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(controlobjective.Name)
		}

		if desiredOutcome, exists := m.DesiredOutcome(); exists {
			create = create.SetDesiredOutcome(desiredOutcome)
		} else {
			create = create.SetDesiredOutcome(controlobjective.DesiredOutcome)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(controlobjective.Status)
		}

		if source, exists := m.Source(); exists {
			create = create.SetSource(source)
		} else {
			create = create.SetSource(controlobjective.Source)
		}

		if controlObjectiveType, exists := m.ControlObjectiveType(); exists {
			create = create.SetControlObjectiveType(controlObjectiveType)
		} else {
			create = create.SetControlObjectiveType(controlobjective.ControlObjectiveType)
		}

		if category, exists := m.Category(); exists {
			create = create.SetCategory(category)
		} else {
			create = create.SetCategory(controlobjective.Category)
		}

		if subcategory, exists := m.Subcategory(); exists {
			create = create.SetSubcategory(subcategory)
		} else {
			create = create.SetSubcategory(controlobjective.Subcategory)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *ControlObjectiveMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		controlobjective, err := client.ControlObjective.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ControlObjectiveHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(controlobjective.CreatedAt).
			SetUpdatedAt(controlobjective.UpdatedAt).
			SetCreatedBy(controlobjective.CreatedBy).
			SetUpdatedBy(controlobjective.UpdatedBy).
			SetDeletedAt(controlobjective.DeletedAt).
			SetDeletedBy(controlobjective.DeletedBy).
			SetDisplayID(controlobjective.DisplayID).
			SetTags(controlobjective.Tags).
			SetRevision(controlobjective.Revision).
			SetOwnerID(controlobjective.OwnerID).
			SetName(controlobjective.Name).
			SetDesiredOutcome(controlobjective.DesiredOutcome).
			SetStatus(controlobjective.Status).
			SetSource(controlobjective.Source).
			SetControlObjectiveType(controlobjective.ControlObjectiveType).
			SetCategory(controlobjective.Category).
			SetSubcategory(controlobjective.Subcategory).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *DocumentDataMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.DocumentDataHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if templateID, exists := m.TemplateID(); exists {
		create = create.SetTemplateID(templateID)
	}

	if data, exists := m.Data(); exists {
		create = create.SetData(data)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *DocumentDataMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		documentdata, err := client.DocumentData.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.DocumentDataHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(documentdata.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(documentdata.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(documentdata.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(documentdata.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(documentdata.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(documentdata.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(documentdata.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(documentdata.OwnerID)
		}

		if templateID, exists := m.TemplateID(); exists {
			create = create.SetTemplateID(templateID)
		} else {
			create = create.SetTemplateID(documentdata.TemplateID)
		}

		if data, exists := m.Data(); exists {
			create = create.SetData(data)
		} else {
			create = create.SetData(documentdata.Data)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *DocumentDataMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		documentdata, err := client.DocumentData.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.DocumentDataHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(documentdata.CreatedAt).
			SetUpdatedAt(documentdata.UpdatedAt).
			SetCreatedBy(documentdata.CreatedBy).
			SetUpdatedBy(documentdata.UpdatedBy).
			SetDeletedAt(documentdata.DeletedAt).
			SetDeletedBy(documentdata.DeletedBy).
			SetTags(documentdata.Tags).
			SetOwnerID(documentdata.OwnerID).
			SetTemplateID(documentdata.TemplateID).
			SetData(documentdata.Data).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *EntityMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.EntityHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if displayName, exists := m.DisplayName(); exists {
		create = create.SetDisplayName(displayName)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if domains, exists := m.Domains(); exists {
		create = create.SetDomains(domains)
	}

	if entityTypeID, exists := m.EntityTypeID(); exists {
		create = create.SetEntityTypeID(entityTypeID)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *EntityMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		entity, err := client.Entity.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.EntityHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(entity.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(entity.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(entity.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(entity.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(entity.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(entity.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(entity.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(entity.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(entity.Name)
		}

		if displayName, exists := m.DisplayName(); exists {
			create = create.SetDisplayName(displayName)
		} else {
			create = create.SetDisplayName(entity.DisplayName)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(entity.Description)
		}

		if domains, exists := m.Domains(); exists {
			create = create.SetDomains(domains)
		} else {
			create = create.SetDomains(entity.Domains)
		}

		if entityTypeID, exists := m.EntityTypeID(); exists {
			create = create.SetEntityTypeID(entityTypeID)
		} else {
			create = create.SetEntityTypeID(entity.EntityTypeID)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(entity.Status)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *EntityMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		entity, err := client.Entity.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.EntityHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(entity.CreatedAt).
			SetUpdatedAt(entity.UpdatedAt).
			SetCreatedBy(entity.CreatedBy).
			SetUpdatedBy(entity.UpdatedBy).
			SetDeletedAt(entity.DeletedAt).
			SetDeletedBy(entity.DeletedBy).
			SetTags(entity.Tags).
			SetOwnerID(entity.OwnerID).
			SetName(entity.Name).
			SetDisplayName(entity.DisplayName).
			SetDescription(entity.Description).
			SetDomains(entity.Domains).
			SetEntityTypeID(entity.EntityTypeID).
			SetStatus(entity.Status).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *EntityTypeMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.EntityTypeHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *EntityTypeMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		entitytype, err := client.EntityType.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.EntityTypeHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(entitytype.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(entitytype.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(entitytype.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(entitytype.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(entitytype.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(entitytype.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(entitytype.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(entitytype.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(entitytype.Name)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *EntityTypeMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		entitytype, err := client.EntityType.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.EntityTypeHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(entitytype.CreatedAt).
			SetUpdatedAt(entitytype.UpdatedAt).
			SetCreatedBy(entitytype.CreatedBy).
			SetUpdatedBy(entitytype.UpdatedBy).
			SetDeletedAt(entitytype.DeletedAt).
			SetDeletedBy(entitytype.DeletedBy).
			SetTags(entitytype.Tags).
			SetOwnerID(entitytype.OwnerID).
			SetName(entitytype.Name).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *EventMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.EventHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if eventID, exists := m.EventID(); exists {
		create = create.SetEventID(eventID)
	}

	if correlationID, exists := m.CorrelationID(); exists {
		create = create.SetCorrelationID(correlationID)
	}

	if eventType, exists := m.EventType(); exists {
		create = create.SetEventType(eventType)
	}

	if metadata, exists := m.Metadata(); exists {
		create = create.SetMetadata(metadata)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *EventMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		event, err := client.Event.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.EventHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(event.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(event.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(event.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(event.UpdatedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(event.Tags)
		}

		if eventID, exists := m.EventID(); exists {
			create = create.SetEventID(eventID)
		} else {
			create = create.SetEventID(event.EventID)
		}

		if correlationID, exists := m.CorrelationID(); exists {
			create = create.SetCorrelationID(correlationID)
		} else {
			create = create.SetCorrelationID(event.CorrelationID)
		}

		if eventType, exists := m.EventType(); exists {
			create = create.SetEventType(eventType)
		} else {
			create = create.SetEventType(event.EventType)
		}

		if metadata, exists := m.Metadata(); exists {
			create = create.SetMetadata(metadata)
		} else {
			create = create.SetMetadata(event.Metadata)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *EventMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		event, err := client.Event.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.EventHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(event.CreatedAt).
			SetUpdatedAt(event.UpdatedAt).
			SetCreatedBy(event.CreatedBy).
			SetUpdatedBy(event.UpdatedBy).
			SetTags(event.Tags).
			SetEventID(event.EventID).
			SetCorrelationID(event.CorrelationID).
			SetEventType(event.EventType).
			SetMetadata(event.Metadata).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *EvidenceMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.EvidenceHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if collectionProcedure, exists := m.CollectionProcedure(); exists {
		create = create.SetCollectionProcedure(collectionProcedure)
	}

	if creationDate, exists := m.CreationDate(); exists {
		create = create.SetCreationDate(creationDate)
	}

	if renewalDate, exists := m.RenewalDate(); exists {
		create = create.SetRenewalDate(renewalDate)
	}

	if source, exists := m.Source(); exists {
		create = create.SetSource(source)
	}

	if isAutomated, exists := m.IsAutomated(); exists {
		create = create.SetIsAutomated(isAutomated)
	}

	if url, exists := m.URL(); exists {
		create = create.SetURL(url)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *EvidenceMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		evidence, err := client.Evidence.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.EvidenceHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(evidence.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(evidence.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(evidence.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(evidence.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(evidence.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(evidence.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(evidence.DisplayID)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(evidence.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(evidence.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(evidence.Name)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(evidence.Description)
		}

		if collectionProcedure, exists := m.CollectionProcedure(); exists {
			create = create.SetCollectionProcedure(collectionProcedure)
		} else {
			create = create.SetCollectionProcedure(evidence.CollectionProcedure)
		}

		if creationDate, exists := m.CreationDate(); exists {
			create = create.SetCreationDate(creationDate)
		} else {
			create = create.SetCreationDate(evidence.CreationDate)
		}

		if renewalDate, exists := m.RenewalDate(); exists {
			create = create.SetRenewalDate(renewalDate)
		} else {
			create = create.SetRenewalDate(evidence.RenewalDate)
		}

		if source, exists := m.Source(); exists {
			create = create.SetSource(source)
		} else {
			create = create.SetSource(evidence.Source)
		}

		if isAutomated, exists := m.IsAutomated(); exists {
			create = create.SetIsAutomated(isAutomated)
		} else {
			create = create.SetIsAutomated(evidence.IsAutomated)
		}

		if url, exists := m.URL(); exists {
			create = create.SetURL(url)
		} else {
			create = create.SetURL(evidence.URL)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(evidence.Status)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *EvidenceMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		evidence, err := client.Evidence.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.EvidenceHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(evidence.CreatedAt).
			SetUpdatedAt(evidence.UpdatedAt).
			SetCreatedBy(evidence.CreatedBy).
			SetUpdatedBy(evidence.UpdatedBy).
			SetDeletedAt(evidence.DeletedAt).
			SetDeletedBy(evidence.DeletedBy).
			SetDisplayID(evidence.DisplayID).
			SetTags(evidence.Tags).
			SetOwnerID(evidence.OwnerID).
			SetName(evidence.Name).
			SetDescription(evidence.Description).
			SetCollectionProcedure(evidence.CollectionProcedure).
			SetCreationDate(evidence.CreationDate).
			SetRenewalDate(evidence.RenewalDate).
			SetSource(evidence.Source).
			SetIsAutomated(evidence.IsAutomated).
			SetURL(evidence.URL).
			SetStatus(evidence.Status).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *FileMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.FileHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if providedFileName, exists := m.ProvidedFileName(); exists {
		create = create.SetProvidedFileName(providedFileName)
	}

	if providedFileExtension, exists := m.ProvidedFileExtension(); exists {
		create = create.SetProvidedFileExtension(providedFileExtension)
	}

	if providedFileSize, exists := m.ProvidedFileSize(); exists {
		create = create.SetProvidedFileSize(providedFileSize)
	}

	if persistedFileSize, exists := m.PersistedFileSize(); exists {
		create = create.SetPersistedFileSize(persistedFileSize)
	}

	if detectedMimeType, exists := m.DetectedMimeType(); exists {
		create = create.SetDetectedMimeType(detectedMimeType)
	}

	if md5Hash, exists := m.Md5Hash(); exists {
		create = create.SetMd5Hash(md5Hash)
	}

	if detectedContentType, exists := m.DetectedContentType(); exists {
		create = create.SetDetectedContentType(detectedContentType)
	}

	if storeKey, exists := m.StoreKey(); exists {
		create = create.SetStoreKey(storeKey)
	}

	if categoryType, exists := m.CategoryType(); exists {
		create = create.SetCategoryType(categoryType)
	}

	if uri, exists := m.URI(); exists {
		create = create.SetURI(uri)
	}

	if storageScheme, exists := m.StorageScheme(); exists {
		create = create.SetStorageScheme(storageScheme)
	}

	if storageVolume, exists := m.StorageVolume(); exists {
		create = create.SetStorageVolume(storageVolume)
	}

	if storagePath, exists := m.StoragePath(); exists {
		create = create.SetStoragePath(storagePath)
	}

	if fileContents, exists := m.FileContents(); exists {
		create = create.SetFileContents(fileContents)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *FileMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		file, err := client.File.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.FileHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(file.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(file.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(file.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(file.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(file.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(file.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(file.Tags)
		}

		if providedFileName, exists := m.ProvidedFileName(); exists {
			create = create.SetProvidedFileName(providedFileName)
		} else {
			create = create.SetProvidedFileName(file.ProvidedFileName)
		}

		if providedFileExtension, exists := m.ProvidedFileExtension(); exists {
			create = create.SetProvidedFileExtension(providedFileExtension)
		} else {
			create = create.SetProvidedFileExtension(file.ProvidedFileExtension)
		}

		if providedFileSize, exists := m.ProvidedFileSize(); exists {
			create = create.SetProvidedFileSize(providedFileSize)
		} else {
			create = create.SetProvidedFileSize(file.ProvidedFileSize)
		}

		if persistedFileSize, exists := m.PersistedFileSize(); exists {
			create = create.SetPersistedFileSize(persistedFileSize)
		} else {
			create = create.SetPersistedFileSize(file.PersistedFileSize)
		}

		if detectedMimeType, exists := m.DetectedMimeType(); exists {
			create = create.SetDetectedMimeType(detectedMimeType)
		} else {
			create = create.SetDetectedMimeType(file.DetectedMimeType)
		}

		if md5Hash, exists := m.Md5Hash(); exists {
			create = create.SetMd5Hash(md5Hash)
		} else {
			create = create.SetMd5Hash(file.Md5Hash)
		}

		if detectedContentType, exists := m.DetectedContentType(); exists {
			create = create.SetDetectedContentType(detectedContentType)
		} else {
			create = create.SetDetectedContentType(file.DetectedContentType)
		}

		if storeKey, exists := m.StoreKey(); exists {
			create = create.SetStoreKey(storeKey)
		} else {
			create = create.SetStoreKey(file.StoreKey)
		}

		if categoryType, exists := m.CategoryType(); exists {
			create = create.SetCategoryType(categoryType)
		} else {
			create = create.SetCategoryType(file.CategoryType)
		}

		if uri, exists := m.URI(); exists {
			create = create.SetURI(uri)
		} else {
			create = create.SetURI(file.URI)
		}

		if storageScheme, exists := m.StorageScheme(); exists {
			create = create.SetStorageScheme(storageScheme)
		} else {
			create = create.SetStorageScheme(file.StorageScheme)
		}

		if storageVolume, exists := m.StorageVolume(); exists {
			create = create.SetStorageVolume(storageVolume)
		} else {
			create = create.SetStorageVolume(file.StorageVolume)
		}

		if storagePath, exists := m.StoragePath(); exists {
			create = create.SetStoragePath(storagePath)
		} else {
			create = create.SetStoragePath(file.StoragePath)
		}

		if fileContents, exists := m.FileContents(); exists {
			create = create.SetFileContents(fileContents)
		} else {
			create = create.SetFileContents(file.FileContents)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *FileMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		file, err := client.File.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.FileHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(file.CreatedAt).
			SetUpdatedAt(file.UpdatedAt).
			SetCreatedBy(file.CreatedBy).
			SetUpdatedBy(file.UpdatedBy).
			SetDeletedAt(file.DeletedAt).
			SetDeletedBy(file.DeletedBy).
			SetTags(file.Tags).
			SetProvidedFileName(file.ProvidedFileName).
			SetProvidedFileExtension(file.ProvidedFileExtension).
			SetProvidedFileSize(file.ProvidedFileSize).
			SetPersistedFileSize(file.PersistedFileSize).
			SetDetectedMimeType(file.DetectedMimeType).
			SetMd5Hash(file.Md5Hash).
			SetDetectedContentType(file.DetectedContentType).
			SetStoreKey(file.StoreKey).
			SetCategoryType(file.CategoryType).
			SetURI(file.URI).
			SetStorageScheme(file.StorageScheme).
			SetStorageVolume(file.StorageVolume).
			SetStoragePath(file.StoragePath).
			SetFileContents(file.FileContents).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *GroupMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.GroupHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if isManaged, exists := m.IsManaged(); exists {
		create = create.SetIsManaged(isManaged)
	}

	if gravatarLogoURL, exists := m.GravatarLogoURL(); exists {
		create = create.SetGravatarLogoURL(gravatarLogoURL)
	}

	if logoURL, exists := m.LogoURL(); exists {
		create = create.SetLogoURL(logoURL)
	}

	if displayName, exists := m.DisplayName(); exists {
		create = create.SetDisplayName(displayName)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *GroupMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		group, err := client.Group.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.GroupHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(group.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(group.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(group.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(group.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(group.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(group.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(group.DisplayID)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(group.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(group.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(group.Name)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(group.Description)
		}

		if isManaged, exists := m.IsManaged(); exists {
			create = create.SetIsManaged(isManaged)
		} else {
			create = create.SetIsManaged(group.IsManaged)
		}

		if gravatarLogoURL, exists := m.GravatarLogoURL(); exists {
			create = create.SetGravatarLogoURL(gravatarLogoURL)
		} else {
			create = create.SetGravatarLogoURL(group.GravatarLogoURL)
		}

		if logoURL, exists := m.LogoURL(); exists {
			create = create.SetLogoURL(logoURL)
		} else {
			create = create.SetLogoURL(group.LogoURL)
		}

		if displayName, exists := m.DisplayName(); exists {
			create = create.SetDisplayName(displayName)
		} else {
			create = create.SetDisplayName(group.DisplayName)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *GroupMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		group, err := client.Group.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.GroupHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(group.CreatedAt).
			SetUpdatedAt(group.UpdatedAt).
			SetCreatedBy(group.CreatedBy).
			SetUpdatedBy(group.UpdatedBy).
			SetDeletedAt(group.DeletedAt).
			SetDeletedBy(group.DeletedBy).
			SetDisplayID(group.DisplayID).
			SetTags(group.Tags).
			SetOwnerID(group.OwnerID).
			SetName(group.Name).
			SetDescription(group.Description).
			SetIsManaged(group.IsManaged).
			SetGravatarLogoURL(group.GravatarLogoURL).
			SetLogoURL(group.LogoURL).
			SetDisplayName(group.DisplayName).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *GroupMembershipMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.GroupMembershipHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if role, exists := m.Role(); exists {
		create = create.SetRole(role)
	}

	if groupID, exists := m.GroupID(); exists {
		create = create.SetGroupID(groupID)
	}

	if userID, exists := m.UserID(); exists {
		create = create.SetUserID(userID)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *GroupMembershipMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		groupmembership, err := client.GroupMembership.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.GroupMembershipHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(groupmembership.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(groupmembership.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(groupmembership.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(groupmembership.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(groupmembership.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(groupmembership.DeletedBy)
		}

		if role, exists := m.Role(); exists {
			create = create.SetRole(role)
		} else {
			create = create.SetRole(groupmembership.Role)
		}

		if groupID, exists := m.GroupID(); exists {
			create = create.SetGroupID(groupID)
		} else {
			create = create.SetGroupID(groupmembership.GroupID)
		}

		if userID, exists := m.UserID(); exists {
			create = create.SetUserID(userID)
		} else {
			create = create.SetUserID(groupmembership.UserID)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *GroupMembershipMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		groupmembership, err := client.GroupMembership.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.GroupMembershipHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(groupmembership.CreatedAt).
			SetUpdatedAt(groupmembership.UpdatedAt).
			SetCreatedBy(groupmembership.CreatedBy).
			SetUpdatedBy(groupmembership.UpdatedBy).
			SetDeletedAt(groupmembership.DeletedAt).
			SetDeletedBy(groupmembership.DeletedBy).
			SetRole(groupmembership.Role).
			SetGroupID(groupmembership.GroupID).
			SetUserID(groupmembership.UserID).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *GroupSettingMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.GroupSettingHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if visibility, exists := m.Visibility(); exists {
		create = create.SetVisibility(visibility)
	}

	if joinPolicy, exists := m.JoinPolicy(); exists {
		create = create.SetJoinPolicy(joinPolicy)
	}

	if syncToSlack, exists := m.SyncToSlack(); exists {
		create = create.SetSyncToSlack(syncToSlack)
	}

	if syncToGithub, exists := m.SyncToGithub(); exists {
		create = create.SetSyncToGithub(syncToGithub)
	}

	if groupID, exists := m.GroupID(); exists {
		create = create.SetGroupID(groupID)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *GroupSettingMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		groupsetting, err := client.GroupSetting.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.GroupSettingHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(groupsetting.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(groupsetting.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(groupsetting.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(groupsetting.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(groupsetting.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(groupsetting.DeletedBy)
		}

		if visibility, exists := m.Visibility(); exists {
			create = create.SetVisibility(visibility)
		} else {
			create = create.SetVisibility(groupsetting.Visibility)
		}

		if joinPolicy, exists := m.JoinPolicy(); exists {
			create = create.SetJoinPolicy(joinPolicy)
		} else {
			create = create.SetJoinPolicy(groupsetting.JoinPolicy)
		}

		if syncToSlack, exists := m.SyncToSlack(); exists {
			create = create.SetSyncToSlack(syncToSlack)
		} else {
			create = create.SetSyncToSlack(groupsetting.SyncToSlack)
		}

		if syncToGithub, exists := m.SyncToGithub(); exists {
			create = create.SetSyncToGithub(syncToGithub)
		} else {
			create = create.SetSyncToGithub(groupsetting.SyncToGithub)
		}

		if groupID, exists := m.GroupID(); exists {
			create = create.SetGroupID(groupID)
		} else {
			create = create.SetGroupID(groupsetting.GroupID)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *GroupSettingMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		groupsetting, err := client.GroupSetting.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.GroupSettingHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(groupsetting.CreatedAt).
			SetUpdatedAt(groupsetting.UpdatedAt).
			SetCreatedBy(groupsetting.CreatedBy).
			SetUpdatedBy(groupsetting.UpdatedBy).
			SetDeletedAt(groupsetting.DeletedAt).
			SetDeletedBy(groupsetting.DeletedBy).
			SetVisibility(groupsetting.Visibility).
			SetJoinPolicy(groupsetting.JoinPolicy).
			SetSyncToSlack(groupsetting.SyncToSlack).
			SetSyncToGithub(groupsetting.SyncToGithub).
			SetGroupID(groupsetting.GroupID).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *HushMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.HushHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if kind, exists := m.Kind(); exists {
		create = create.SetKind(kind)
	}

	if secretName, exists := m.SecretName(); exists {
		create = create.SetSecretName(secretName)
	}

	if secretValue, exists := m.SecretValue(); exists {
		create = create.SetSecretValue(secretValue)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *HushMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		hush, err := client.Hush.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.HushHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(hush.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(hush.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(hush.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(hush.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(hush.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(hush.DeletedBy)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(hush.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(hush.Name)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(hush.Description)
		}

		if kind, exists := m.Kind(); exists {
			create = create.SetKind(kind)
		} else {
			create = create.SetKind(hush.Kind)
		}

		if secretName, exists := m.SecretName(); exists {
			create = create.SetSecretName(secretName)
		} else {
			create = create.SetSecretName(hush.SecretName)
		}

		if secretValue, exists := m.SecretValue(); exists {
			create = create.SetSecretValue(secretValue)
		} else {
			create = create.SetSecretValue(hush.SecretValue)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *HushMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		hush, err := client.Hush.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.HushHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(hush.CreatedAt).
			SetUpdatedAt(hush.UpdatedAt).
			SetCreatedBy(hush.CreatedBy).
			SetUpdatedBy(hush.UpdatedBy).
			SetDeletedAt(hush.DeletedAt).
			SetDeletedBy(hush.DeletedBy).
			SetOwnerID(hush.OwnerID).
			SetName(hush.Name).
			SetDescription(hush.Description).
			SetKind(hush.Kind).
			SetSecretName(hush.SecretName).
			SetSecretValue(hush.SecretValue).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *IntegrationMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.IntegrationHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if kind, exists := m.Kind(); exists {
		create = create.SetKind(kind)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *IntegrationMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		integration, err := client.Integration.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.IntegrationHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(integration.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(integration.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(integration.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(integration.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(integration.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(integration.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(integration.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(integration.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(integration.Name)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(integration.Description)
		}

		if kind, exists := m.Kind(); exists {
			create = create.SetKind(kind)
		} else {
			create = create.SetKind(integration.Kind)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *IntegrationMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		integration, err := client.Integration.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.IntegrationHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(integration.CreatedAt).
			SetUpdatedAt(integration.UpdatedAt).
			SetCreatedBy(integration.CreatedBy).
			SetUpdatedBy(integration.UpdatedBy).
			SetDeletedAt(integration.DeletedAt).
			SetDeletedBy(integration.DeletedBy).
			SetTags(integration.Tags).
			SetOwnerID(integration.OwnerID).
			SetName(integration.Name).
			SetDescription(integration.Description).
			SetKind(integration.Kind).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *InternalPolicyMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.InternalPolicyHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if revision, exists := m.Revision(); exists {
		create = create.SetRevision(revision)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	if policyType, exists := m.PolicyType(); exists {
		create = create.SetPolicyType(policyType)
	}

	if details, exists := m.Details(); exists {
		create = create.SetDetails(details)
	}

	if approvalRequired, exists := m.ApprovalRequired(); exists {
		create = create.SetApprovalRequired(approvalRequired)
	}

	if reviewDue, exists := m.ReviewDue(); exists {
		create = create.SetReviewDue(reviewDue)
	}

	if reviewFrequency, exists := m.ReviewFrequency(); exists {
		create = create.SetReviewFrequency(reviewFrequency)
	}

	if approverID, exists := m.ApproverID(); exists {
		create = create.SetApproverID(approverID)
	}

	if delegateID, exists := m.DelegateID(); exists {
		create = create.SetDelegateID(delegateID)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *InternalPolicyMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		internalpolicy, err := client.InternalPolicy.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.InternalPolicyHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(internalpolicy.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(internalpolicy.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(internalpolicy.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(internalpolicy.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(internalpolicy.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(internalpolicy.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(internalpolicy.DisplayID)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(internalpolicy.Tags)
		}

		if revision, exists := m.Revision(); exists {
			create = create.SetRevision(revision)
		} else {
			create = create.SetRevision(internalpolicy.Revision)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(internalpolicy.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(internalpolicy.Name)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(internalpolicy.Status)
		}

		if policyType, exists := m.PolicyType(); exists {
			create = create.SetPolicyType(policyType)
		} else {
			create = create.SetPolicyType(internalpolicy.PolicyType)
		}

		if details, exists := m.Details(); exists {
			create = create.SetDetails(details)
		} else {
			create = create.SetDetails(internalpolicy.Details)
		}

		if approvalRequired, exists := m.ApprovalRequired(); exists {
			create = create.SetApprovalRequired(approvalRequired)
		} else {
			create = create.SetApprovalRequired(internalpolicy.ApprovalRequired)
		}

		if reviewDue, exists := m.ReviewDue(); exists {
			create = create.SetReviewDue(reviewDue)
		} else {
			create = create.SetReviewDue(internalpolicy.ReviewDue)
		}

		if reviewFrequency, exists := m.ReviewFrequency(); exists {
			create = create.SetReviewFrequency(reviewFrequency)
		} else {
			create = create.SetReviewFrequency(internalpolicy.ReviewFrequency)
		}

		if approverID, exists := m.ApproverID(); exists {
			create = create.SetApproverID(approverID)
		} else {
			create = create.SetApproverID(internalpolicy.ApproverID)
		}

		if delegateID, exists := m.DelegateID(); exists {
			create = create.SetDelegateID(delegateID)
		} else {
			create = create.SetDelegateID(internalpolicy.DelegateID)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *InternalPolicyMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		internalpolicy, err := client.InternalPolicy.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.InternalPolicyHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(internalpolicy.CreatedAt).
			SetUpdatedAt(internalpolicy.UpdatedAt).
			SetCreatedBy(internalpolicy.CreatedBy).
			SetUpdatedBy(internalpolicy.UpdatedBy).
			SetDeletedAt(internalpolicy.DeletedAt).
			SetDeletedBy(internalpolicy.DeletedBy).
			SetDisplayID(internalpolicy.DisplayID).
			SetTags(internalpolicy.Tags).
			SetRevision(internalpolicy.Revision).
			SetOwnerID(internalpolicy.OwnerID).
			SetName(internalpolicy.Name).
			SetStatus(internalpolicy.Status).
			SetPolicyType(internalpolicy.PolicyType).
			SetDetails(internalpolicy.Details).
			SetApprovalRequired(internalpolicy.ApprovalRequired).
			SetReviewDue(internalpolicy.ReviewDue).
			SetReviewFrequency(internalpolicy.ReviewFrequency).
			SetApproverID(internalpolicy.ApproverID).
			SetDelegateID(internalpolicy.DelegateID).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *MappedControlMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.MappedControlHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if mappingType, exists := m.MappingType(); exists {
		create = create.SetMappingType(mappingType)
	}

	if relation, exists := m.Relation(); exists {
		create = create.SetRelation(relation)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *MappedControlMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		mappedcontrol, err := client.MappedControl.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.MappedControlHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(mappedcontrol.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(mappedcontrol.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(mappedcontrol.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(mappedcontrol.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(mappedcontrol.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(mappedcontrol.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(mappedcontrol.Tags)
		}

		if mappingType, exists := m.MappingType(); exists {
			create = create.SetMappingType(mappingType)
		} else {
			create = create.SetMappingType(mappedcontrol.MappingType)
		}

		if relation, exists := m.Relation(); exists {
			create = create.SetRelation(relation)
		} else {
			create = create.SetRelation(mappedcontrol.Relation)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *MappedControlMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		mappedcontrol, err := client.MappedControl.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.MappedControlHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(mappedcontrol.CreatedAt).
			SetUpdatedAt(mappedcontrol.UpdatedAt).
			SetCreatedBy(mappedcontrol.CreatedBy).
			SetUpdatedBy(mappedcontrol.UpdatedBy).
			SetDeletedAt(mappedcontrol.DeletedAt).
			SetDeletedBy(mappedcontrol.DeletedBy).
			SetTags(mappedcontrol.Tags).
			SetMappingType(mappedcontrol.MappingType).
			SetRelation(mappedcontrol.Relation).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *NarrativeMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.NarrativeHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if details, exists := m.Details(); exists {
		create = create.SetDetails(details)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *NarrativeMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		narrative, err := client.Narrative.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.NarrativeHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(narrative.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(narrative.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(narrative.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(narrative.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(narrative.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(narrative.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(narrative.DisplayID)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(narrative.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(narrative.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(narrative.Name)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(narrative.Description)
		}

		if details, exists := m.Details(); exists {
			create = create.SetDetails(details)
		} else {
			create = create.SetDetails(narrative.Details)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *NarrativeMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		narrative, err := client.Narrative.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.NarrativeHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(narrative.CreatedAt).
			SetUpdatedAt(narrative.UpdatedAt).
			SetCreatedBy(narrative.CreatedBy).
			SetUpdatedBy(narrative.UpdatedBy).
			SetDeletedAt(narrative.DeletedAt).
			SetDeletedBy(narrative.DeletedBy).
			SetDisplayID(narrative.DisplayID).
			SetTags(narrative.Tags).
			SetOwnerID(narrative.OwnerID).
			SetName(narrative.Name).
			SetDescription(narrative.Description).
			SetDetails(narrative.Details).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *NoteMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.NoteHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if text, exists := m.Text(); exists {
		create = create.SetText(text)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *NoteMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		note, err := client.Note.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.NoteHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(note.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(note.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(note.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(note.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(note.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(note.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(note.DisplayID)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(note.OwnerID)
		}

		if text, exists := m.Text(); exists {
			create = create.SetText(text)
		} else {
			create = create.SetText(note.Text)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *NoteMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		note, err := client.Note.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.NoteHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(note.CreatedAt).
			SetUpdatedAt(note.UpdatedAt).
			SetCreatedBy(note.CreatedBy).
			SetUpdatedBy(note.UpdatedBy).
			SetDeletedAt(note.DeletedAt).
			SetDeletedBy(note.DeletedBy).
			SetDisplayID(note.DisplayID).
			SetOwnerID(note.OwnerID).
			SetText(note.Text).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *OrgMembershipMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.OrgMembershipHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if role, exists := m.Role(); exists {
		create = create.SetRole(role)
	}

	if organizationID, exists := m.OrganizationID(); exists {
		create = create.SetOrganizationID(organizationID)
	}

	if userID, exists := m.UserID(); exists {
		create = create.SetUserID(userID)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *OrgMembershipMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		orgmembership, err := client.OrgMembership.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.OrgMembershipHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(orgmembership.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(orgmembership.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(orgmembership.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(orgmembership.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(orgmembership.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(orgmembership.DeletedBy)
		}

		if role, exists := m.Role(); exists {
			create = create.SetRole(role)
		} else {
			create = create.SetRole(orgmembership.Role)
		}

		if organizationID, exists := m.OrganizationID(); exists {
			create = create.SetOrganizationID(organizationID)
		} else {
			create = create.SetOrganizationID(orgmembership.OrganizationID)
		}

		if userID, exists := m.UserID(); exists {
			create = create.SetUserID(userID)
		} else {
			create = create.SetUserID(orgmembership.UserID)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *OrgMembershipMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		orgmembership, err := client.OrgMembership.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.OrgMembershipHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(orgmembership.CreatedAt).
			SetUpdatedAt(orgmembership.UpdatedAt).
			SetCreatedBy(orgmembership.CreatedBy).
			SetUpdatedBy(orgmembership.UpdatedBy).
			SetDeletedAt(orgmembership.DeletedAt).
			SetDeletedBy(orgmembership.DeletedBy).
			SetRole(orgmembership.Role).
			SetOrganizationID(orgmembership.OrganizationID).
			SetUserID(orgmembership.UserID).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *OrgSubscriptionMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.OrgSubscriptionHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if stripeSubscriptionID, exists := m.StripeSubscriptionID(); exists {
		create = create.SetStripeSubscriptionID(stripeSubscriptionID)
	}

	if productTier, exists := m.ProductTier(); exists {
		create = create.SetProductTier(productTier)
	}

	if productPrice, exists := m.ProductPrice(); exists {
		create = create.SetProductPrice(productPrice)
	}

	if stripeProductTierID, exists := m.StripeProductTierID(); exists {
		create = create.SetStripeProductTierID(stripeProductTierID)
	}

	if stripeSubscriptionStatus, exists := m.StripeSubscriptionStatus(); exists {
		create = create.SetStripeSubscriptionStatus(stripeSubscriptionStatus)
	}

	if active, exists := m.Active(); exists {
		create = create.SetActive(active)
	}

	if stripeCustomerID, exists := m.StripeCustomerID(); exists {
		create = create.SetStripeCustomerID(stripeCustomerID)
	}

	if expiresAt, exists := m.ExpiresAt(); exists {
		create = create.SetNillableExpiresAt(&expiresAt)
	}

	if trialExpiresAt, exists := m.TrialExpiresAt(); exists {
		create = create.SetNillableTrialExpiresAt(&trialExpiresAt)
	}

	if daysUntilDue, exists := m.DaysUntilDue(); exists {
		create = create.SetNillableDaysUntilDue(&daysUntilDue)
	}

	if paymentMethodAdded, exists := m.PaymentMethodAdded(); exists {
		create = create.SetNillablePaymentMethodAdded(&paymentMethodAdded)
	}

	if features, exists := m.Features(); exists {
		create = create.SetFeatures(features)
	}

	if featureLookupKeys, exists := m.FeatureLookupKeys(); exists {
		create = create.SetFeatureLookupKeys(featureLookupKeys)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *OrgSubscriptionMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		orgsubscription, err := client.OrgSubscription.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.OrgSubscriptionHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(orgsubscription.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(orgsubscription.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(orgsubscription.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(orgsubscription.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(orgsubscription.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(orgsubscription.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(orgsubscription.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(orgsubscription.OwnerID)
		}

		if stripeSubscriptionID, exists := m.StripeSubscriptionID(); exists {
			create = create.SetStripeSubscriptionID(stripeSubscriptionID)
		} else {
			create = create.SetStripeSubscriptionID(orgsubscription.StripeSubscriptionID)
		}

		if productTier, exists := m.ProductTier(); exists {
			create = create.SetProductTier(productTier)
		} else {
			create = create.SetProductTier(orgsubscription.ProductTier)
		}

		if productPrice, exists := m.ProductPrice(); exists {
			create = create.SetProductPrice(productPrice)
		} else {
			create = create.SetProductPrice(orgsubscription.ProductPrice)
		}

		if stripeProductTierID, exists := m.StripeProductTierID(); exists {
			create = create.SetStripeProductTierID(stripeProductTierID)
		} else {
			create = create.SetStripeProductTierID(orgsubscription.StripeProductTierID)
		}

		if stripeSubscriptionStatus, exists := m.StripeSubscriptionStatus(); exists {
			create = create.SetStripeSubscriptionStatus(stripeSubscriptionStatus)
		} else {
			create = create.SetStripeSubscriptionStatus(orgsubscription.StripeSubscriptionStatus)
		}

		if active, exists := m.Active(); exists {
			create = create.SetActive(active)
		} else {
			create = create.SetActive(orgsubscription.Active)
		}

		if stripeCustomerID, exists := m.StripeCustomerID(); exists {
			create = create.SetStripeCustomerID(stripeCustomerID)
		} else {
			create = create.SetStripeCustomerID(orgsubscription.StripeCustomerID)
		}

		if expiresAt, exists := m.ExpiresAt(); exists {
			create = create.SetNillableExpiresAt(&expiresAt)
		} else {
			create = create.SetNillableExpiresAt(orgsubscription.ExpiresAt)
		}

		if trialExpiresAt, exists := m.TrialExpiresAt(); exists {
			create = create.SetNillableTrialExpiresAt(&trialExpiresAt)
		} else {
			create = create.SetNillableTrialExpiresAt(orgsubscription.TrialExpiresAt)
		}

		if daysUntilDue, exists := m.DaysUntilDue(); exists {
			create = create.SetNillableDaysUntilDue(&daysUntilDue)
		} else {
			create = create.SetNillableDaysUntilDue(orgsubscription.DaysUntilDue)
		}

		if paymentMethodAdded, exists := m.PaymentMethodAdded(); exists {
			create = create.SetNillablePaymentMethodAdded(&paymentMethodAdded)
		} else {
			create = create.SetNillablePaymentMethodAdded(orgsubscription.PaymentMethodAdded)
		}

		if features, exists := m.Features(); exists {
			create = create.SetFeatures(features)
		} else {
			create = create.SetFeatures(orgsubscription.Features)
		}

		if featureLookupKeys, exists := m.FeatureLookupKeys(); exists {
			create = create.SetFeatureLookupKeys(featureLookupKeys)
		} else {
			create = create.SetFeatureLookupKeys(orgsubscription.FeatureLookupKeys)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *OrgSubscriptionMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		orgsubscription, err := client.OrgSubscription.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.OrgSubscriptionHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(orgsubscription.CreatedAt).
			SetUpdatedAt(orgsubscription.UpdatedAt).
			SetCreatedBy(orgsubscription.CreatedBy).
			SetUpdatedBy(orgsubscription.UpdatedBy).
			SetDeletedAt(orgsubscription.DeletedAt).
			SetDeletedBy(orgsubscription.DeletedBy).
			SetTags(orgsubscription.Tags).
			SetOwnerID(orgsubscription.OwnerID).
			SetStripeSubscriptionID(orgsubscription.StripeSubscriptionID).
			SetProductTier(orgsubscription.ProductTier).
			SetProductPrice(orgsubscription.ProductPrice).
			SetStripeProductTierID(orgsubscription.StripeProductTierID).
			SetStripeSubscriptionStatus(orgsubscription.StripeSubscriptionStatus).
			SetActive(orgsubscription.Active).
			SetStripeCustomerID(orgsubscription.StripeCustomerID).
			SetNillableExpiresAt(orgsubscription.ExpiresAt).
			SetNillableTrialExpiresAt(orgsubscription.TrialExpiresAt).
			SetNillableDaysUntilDue(orgsubscription.DaysUntilDue).
			SetNillablePaymentMethodAdded(orgsubscription.PaymentMethodAdded).
			SetFeatures(orgsubscription.Features).
			SetFeatureLookupKeys(orgsubscription.FeatureLookupKeys).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *OrganizationMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.OrganizationHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if displayName, exists := m.DisplayName(); exists {
		create = create.SetDisplayName(displayName)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if parentOrganizationID, exists := m.ParentOrganizationID(); exists {
		create = create.SetParentOrganizationID(parentOrganizationID)
	}

	if personalOrg, exists := m.PersonalOrg(); exists {
		create = create.SetPersonalOrg(personalOrg)
	}

	if avatarRemoteURL, exists := m.AvatarRemoteURL(); exists {
		create = create.SetNillableAvatarRemoteURL(&avatarRemoteURL)
	}

	if avatarLocalFileID, exists := m.AvatarLocalFileID(); exists {
		create = create.SetNillableAvatarLocalFileID(&avatarLocalFileID)
	}

	if avatarUpdatedAt, exists := m.AvatarUpdatedAt(); exists {
		create = create.SetNillableAvatarUpdatedAt(&avatarUpdatedAt)
	}

	if dedicatedDb, exists := m.DedicatedDb(); exists {
		create = create.SetDedicatedDb(dedicatedDb)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *OrganizationMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		organization, err := client.Organization.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.OrganizationHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(organization.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(organization.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(organization.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(organization.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(organization.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(organization.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(organization.Tags)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(organization.Name)
		}

		if displayName, exists := m.DisplayName(); exists {
			create = create.SetDisplayName(displayName)
		} else {
			create = create.SetDisplayName(organization.DisplayName)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(organization.Description)
		}

		if parentOrganizationID, exists := m.ParentOrganizationID(); exists {
			create = create.SetParentOrganizationID(parentOrganizationID)
		} else {
			create = create.SetParentOrganizationID(organization.ParentOrganizationID)
		}

		if personalOrg, exists := m.PersonalOrg(); exists {
			create = create.SetPersonalOrg(personalOrg)
		} else {
			create = create.SetPersonalOrg(organization.PersonalOrg)
		}

		if avatarRemoteURL, exists := m.AvatarRemoteURL(); exists {
			create = create.SetNillableAvatarRemoteURL(&avatarRemoteURL)
		} else {
			create = create.SetNillableAvatarRemoteURL(organization.AvatarRemoteURL)
		}

		if avatarLocalFileID, exists := m.AvatarLocalFileID(); exists {
			create = create.SetNillableAvatarLocalFileID(&avatarLocalFileID)
		} else {
			create = create.SetNillableAvatarLocalFileID(organization.AvatarLocalFileID)
		}

		if avatarUpdatedAt, exists := m.AvatarUpdatedAt(); exists {
			create = create.SetNillableAvatarUpdatedAt(&avatarUpdatedAt)
		} else {
			create = create.SetNillableAvatarUpdatedAt(organization.AvatarUpdatedAt)
		}

		if dedicatedDb, exists := m.DedicatedDb(); exists {
			create = create.SetDedicatedDb(dedicatedDb)
		} else {
			create = create.SetDedicatedDb(organization.DedicatedDb)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *OrganizationMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		organization, err := client.Organization.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.OrganizationHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(organization.CreatedAt).
			SetUpdatedAt(organization.UpdatedAt).
			SetCreatedBy(organization.CreatedBy).
			SetUpdatedBy(organization.UpdatedBy).
			SetDeletedAt(organization.DeletedAt).
			SetDeletedBy(organization.DeletedBy).
			SetTags(organization.Tags).
			SetName(organization.Name).
			SetDisplayName(organization.DisplayName).
			SetDescription(organization.Description).
			SetParentOrganizationID(organization.ParentOrganizationID).
			SetPersonalOrg(organization.PersonalOrg).
			SetNillableAvatarRemoteURL(organization.AvatarRemoteURL).
			SetNillableAvatarLocalFileID(organization.AvatarLocalFileID).
			SetNillableAvatarUpdatedAt(organization.AvatarUpdatedAt).
			SetDedicatedDb(organization.DedicatedDb).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *OrganizationSettingMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.OrganizationSettingHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if domains, exists := m.Domains(); exists {
		create = create.SetDomains(domains)
	}

	if billingContact, exists := m.BillingContact(); exists {
		create = create.SetBillingContact(billingContact)
	}

	if billingEmail, exists := m.BillingEmail(); exists {
		create = create.SetBillingEmail(billingEmail)
	}

	if billingPhone, exists := m.BillingPhone(); exists {
		create = create.SetBillingPhone(billingPhone)
	}

	if billingAddress, exists := m.BillingAddress(); exists {
		create = create.SetBillingAddress(billingAddress)
	}

	if taxIdentifier, exists := m.TaxIdentifier(); exists {
		create = create.SetTaxIdentifier(taxIdentifier)
	}

	if geoLocation, exists := m.GeoLocation(); exists {
		create = create.SetGeoLocation(geoLocation)
	}

	if organizationID, exists := m.OrganizationID(); exists {
		create = create.SetOrganizationID(organizationID)
	}

	if billingNotificationsEnabled, exists := m.BillingNotificationsEnabled(); exists {
		create = create.SetBillingNotificationsEnabled(billingNotificationsEnabled)
	}

	if allowedEmailDomains, exists := m.AllowedEmailDomains(); exists {
		create = create.SetAllowedEmailDomains(allowedEmailDomains)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *OrganizationSettingMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		organizationsetting, err := client.OrganizationSetting.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.OrganizationSettingHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(organizationsetting.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(organizationsetting.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(organizationsetting.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(organizationsetting.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(organizationsetting.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(organizationsetting.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(organizationsetting.Tags)
		}

		if domains, exists := m.Domains(); exists {
			create = create.SetDomains(domains)
		} else {
			create = create.SetDomains(organizationsetting.Domains)
		}

		if billingContact, exists := m.BillingContact(); exists {
			create = create.SetBillingContact(billingContact)
		} else {
			create = create.SetBillingContact(organizationsetting.BillingContact)
		}

		if billingEmail, exists := m.BillingEmail(); exists {
			create = create.SetBillingEmail(billingEmail)
		} else {
			create = create.SetBillingEmail(organizationsetting.BillingEmail)
		}

		if billingPhone, exists := m.BillingPhone(); exists {
			create = create.SetBillingPhone(billingPhone)
		} else {
			create = create.SetBillingPhone(organizationsetting.BillingPhone)
		}

		if billingAddress, exists := m.BillingAddress(); exists {
			create = create.SetBillingAddress(billingAddress)
		} else {
			create = create.SetBillingAddress(organizationsetting.BillingAddress)
		}

		if taxIdentifier, exists := m.TaxIdentifier(); exists {
			create = create.SetTaxIdentifier(taxIdentifier)
		} else {
			create = create.SetTaxIdentifier(organizationsetting.TaxIdentifier)
		}

		if geoLocation, exists := m.GeoLocation(); exists {
			create = create.SetGeoLocation(geoLocation)
		} else {
			create = create.SetGeoLocation(organizationsetting.GeoLocation)
		}

		if organizationID, exists := m.OrganizationID(); exists {
			create = create.SetOrganizationID(organizationID)
		} else {
			create = create.SetOrganizationID(organizationsetting.OrganizationID)
		}

		if billingNotificationsEnabled, exists := m.BillingNotificationsEnabled(); exists {
			create = create.SetBillingNotificationsEnabled(billingNotificationsEnabled)
		} else {
			create = create.SetBillingNotificationsEnabled(organizationsetting.BillingNotificationsEnabled)
		}

		if allowedEmailDomains, exists := m.AllowedEmailDomains(); exists {
			create = create.SetAllowedEmailDomains(allowedEmailDomains)
		} else {
			create = create.SetAllowedEmailDomains(organizationsetting.AllowedEmailDomains)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *OrganizationSettingMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		organizationsetting, err := client.OrganizationSetting.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.OrganizationSettingHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(organizationsetting.CreatedAt).
			SetUpdatedAt(organizationsetting.UpdatedAt).
			SetCreatedBy(organizationsetting.CreatedBy).
			SetUpdatedBy(organizationsetting.UpdatedBy).
			SetDeletedAt(organizationsetting.DeletedAt).
			SetDeletedBy(organizationsetting.DeletedBy).
			SetTags(organizationsetting.Tags).
			SetDomains(organizationsetting.Domains).
			SetBillingContact(organizationsetting.BillingContact).
			SetBillingEmail(organizationsetting.BillingEmail).
			SetBillingPhone(organizationsetting.BillingPhone).
			SetBillingAddress(organizationsetting.BillingAddress).
			SetTaxIdentifier(organizationsetting.TaxIdentifier).
			SetGeoLocation(organizationsetting.GeoLocation).
			SetOrganizationID(organizationsetting.OrganizationID).
			SetBillingNotificationsEnabled(organizationsetting.BillingNotificationsEnabled).
			SetAllowedEmailDomains(organizationsetting.AllowedEmailDomains).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *ProcedureMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.ProcedureHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if revision, exists := m.Revision(); exists {
		create = create.SetRevision(revision)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	if procedureType, exists := m.ProcedureType(); exists {
		create = create.SetProcedureType(procedureType)
	}

	if details, exists := m.Details(); exists {
		create = create.SetDetails(details)
	}

	if approvalRequired, exists := m.ApprovalRequired(); exists {
		create = create.SetApprovalRequired(approvalRequired)
	}

	if reviewDue, exists := m.ReviewDue(); exists {
		create = create.SetReviewDue(reviewDue)
	}

	if reviewFrequency, exists := m.ReviewFrequency(); exists {
		create = create.SetReviewFrequency(reviewFrequency)
	}

	if approverID, exists := m.ApproverID(); exists {
		create = create.SetApproverID(approverID)
	}

	if delegateID, exists := m.DelegateID(); exists {
		create = create.SetDelegateID(delegateID)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *ProcedureMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		procedure, err := client.Procedure.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ProcedureHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(procedure.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(procedure.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(procedure.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(procedure.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(procedure.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(procedure.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(procedure.DisplayID)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(procedure.Tags)
		}

		if revision, exists := m.Revision(); exists {
			create = create.SetRevision(revision)
		} else {
			create = create.SetRevision(procedure.Revision)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(procedure.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(procedure.Name)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(procedure.Status)
		}

		if procedureType, exists := m.ProcedureType(); exists {
			create = create.SetProcedureType(procedureType)
		} else {
			create = create.SetProcedureType(procedure.ProcedureType)
		}

		if details, exists := m.Details(); exists {
			create = create.SetDetails(details)
		} else {
			create = create.SetDetails(procedure.Details)
		}

		if approvalRequired, exists := m.ApprovalRequired(); exists {
			create = create.SetApprovalRequired(approvalRequired)
		} else {
			create = create.SetApprovalRequired(procedure.ApprovalRequired)
		}

		if reviewDue, exists := m.ReviewDue(); exists {
			create = create.SetReviewDue(reviewDue)
		} else {
			create = create.SetReviewDue(procedure.ReviewDue)
		}

		if reviewFrequency, exists := m.ReviewFrequency(); exists {
			create = create.SetReviewFrequency(reviewFrequency)
		} else {
			create = create.SetReviewFrequency(procedure.ReviewFrequency)
		}

		if approverID, exists := m.ApproverID(); exists {
			create = create.SetApproverID(approverID)
		} else {
			create = create.SetApproverID(procedure.ApproverID)
		}

		if delegateID, exists := m.DelegateID(); exists {
			create = create.SetDelegateID(delegateID)
		} else {
			create = create.SetDelegateID(procedure.DelegateID)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *ProcedureMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		procedure, err := client.Procedure.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ProcedureHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(procedure.CreatedAt).
			SetUpdatedAt(procedure.UpdatedAt).
			SetCreatedBy(procedure.CreatedBy).
			SetUpdatedBy(procedure.UpdatedBy).
			SetDeletedAt(procedure.DeletedAt).
			SetDeletedBy(procedure.DeletedBy).
			SetDisplayID(procedure.DisplayID).
			SetTags(procedure.Tags).
			SetRevision(procedure.Revision).
			SetOwnerID(procedure.OwnerID).
			SetName(procedure.Name).
			SetStatus(procedure.Status).
			SetProcedureType(procedure.ProcedureType).
			SetDetails(procedure.Details).
			SetApprovalRequired(procedure.ApprovalRequired).
			SetReviewDue(procedure.ReviewDue).
			SetReviewFrequency(procedure.ReviewFrequency).
			SetApproverID(procedure.ApproverID).
			SetDelegateID(procedure.DelegateID).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *ProgramMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.ProgramHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	if startDate, exists := m.StartDate(); exists {
		create = create.SetStartDate(startDate)
	}

	if endDate, exists := m.EndDate(); exists {
		create = create.SetEndDate(endDate)
	}

	if auditorReady, exists := m.AuditorReady(); exists {
		create = create.SetAuditorReady(auditorReady)
	}

	if auditorWriteComments, exists := m.AuditorWriteComments(); exists {
		create = create.SetAuditorWriteComments(auditorWriteComments)
	}

	if auditorReadComments, exists := m.AuditorReadComments(); exists {
		create = create.SetAuditorReadComments(auditorReadComments)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *ProgramMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		program, err := client.Program.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ProgramHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(program.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(program.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(program.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(program.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(program.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(program.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(program.DisplayID)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(program.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(program.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(program.Name)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(program.Description)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(program.Status)
		}

		if startDate, exists := m.StartDate(); exists {
			create = create.SetStartDate(startDate)
		} else {
			create = create.SetStartDate(program.StartDate)
		}

		if endDate, exists := m.EndDate(); exists {
			create = create.SetEndDate(endDate)
		} else {
			create = create.SetEndDate(program.EndDate)
		}

		if auditorReady, exists := m.AuditorReady(); exists {
			create = create.SetAuditorReady(auditorReady)
		} else {
			create = create.SetAuditorReady(program.AuditorReady)
		}

		if auditorWriteComments, exists := m.AuditorWriteComments(); exists {
			create = create.SetAuditorWriteComments(auditorWriteComments)
		} else {
			create = create.SetAuditorWriteComments(program.AuditorWriteComments)
		}

		if auditorReadComments, exists := m.AuditorReadComments(); exists {
			create = create.SetAuditorReadComments(auditorReadComments)
		} else {
			create = create.SetAuditorReadComments(program.AuditorReadComments)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *ProgramMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		program, err := client.Program.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ProgramHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(program.CreatedAt).
			SetUpdatedAt(program.UpdatedAt).
			SetCreatedBy(program.CreatedBy).
			SetUpdatedBy(program.UpdatedBy).
			SetDeletedAt(program.DeletedAt).
			SetDeletedBy(program.DeletedBy).
			SetDisplayID(program.DisplayID).
			SetTags(program.Tags).
			SetOwnerID(program.OwnerID).
			SetName(program.Name).
			SetDescription(program.Description).
			SetStatus(program.Status).
			SetStartDate(program.StartDate).
			SetEndDate(program.EndDate).
			SetAuditorReady(program.AuditorReady).
			SetAuditorWriteComments(program.AuditorWriteComments).
			SetAuditorReadComments(program.AuditorReadComments).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *ProgramMembershipMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.ProgramMembershipHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if role, exists := m.Role(); exists {
		create = create.SetRole(role)
	}

	if programID, exists := m.ProgramID(); exists {
		create = create.SetProgramID(programID)
	}

	if userID, exists := m.UserID(); exists {
		create = create.SetUserID(userID)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *ProgramMembershipMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		programmembership, err := client.ProgramMembership.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ProgramMembershipHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(programmembership.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(programmembership.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(programmembership.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(programmembership.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(programmembership.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(programmembership.DeletedBy)
		}

		if role, exists := m.Role(); exists {
			create = create.SetRole(role)
		} else {
			create = create.SetRole(programmembership.Role)
		}

		if programID, exists := m.ProgramID(); exists {
			create = create.SetProgramID(programID)
		} else {
			create = create.SetProgramID(programmembership.ProgramID)
		}

		if userID, exists := m.UserID(); exists {
			create = create.SetUserID(userID)
		} else {
			create = create.SetUserID(programmembership.UserID)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *ProgramMembershipMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		programmembership, err := client.ProgramMembership.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.ProgramMembershipHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(programmembership.CreatedAt).
			SetUpdatedAt(programmembership.UpdatedAt).
			SetCreatedBy(programmembership.CreatedBy).
			SetUpdatedBy(programmembership.UpdatedBy).
			SetDeletedAt(programmembership.DeletedAt).
			SetDeletedBy(programmembership.DeletedBy).
			SetRole(programmembership.Role).
			SetProgramID(programmembership.ProgramID).
			SetUserID(programmembership.UserID).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *RiskMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.RiskHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	if riskType, exists := m.RiskType(); exists {
		create = create.SetRiskType(riskType)
	}

	if category, exists := m.Category(); exists {
		create = create.SetCategory(category)
	}

	if impact, exists := m.Impact(); exists {
		create = create.SetImpact(impact)
	}

	if likelihood, exists := m.Likelihood(); exists {
		create = create.SetLikelihood(likelihood)
	}

	if score, exists := m.Score(); exists {
		create = create.SetScore(score)
	}

	if mitigation, exists := m.Mitigation(); exists {
		create = create.SetMitigation(mitigation)
	}

	if details, exists := m.Details(); exists {
		create = create.SetDetails(details)
	}

	if businessCosts, exists := m.BusinessCosts(); exists {
		create = create.SetBusinessCosts(businessCosts)
	}

	if stakeholderID, exists := m.StakeholderID(); exists {
		create = create.SetStakeholderID(stakeholderID)
	}

	if delegateID, exists := m.DelegateID(); exists {
		create = create.SetDelegateID(delegateID)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *RiskMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		risk, err := client.Risk.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.RiskHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(risk.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(risk.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(risk.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(risk.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(risk.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(risk.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(risk.DisplayID)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(risk.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(risk.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(risk.Name)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(risk.Status)
		}

		if riskType, exists := m.RiskType(); exists {
			create = create.SetRiskType(riskType)
		} else {
			create = create.SetRiskType(risk.RiskType)
		}

		if category, exists := m.Category(); exists {
			create = create.SetCategory(category)
		} else {
			create = create.SetCategory(risk.Category)
		}

		if impact, exists := m.Impact(); exists {
			create = create.SetImpact(impact)
		} else {
			create = create.SetImpact(risk.Impact)
		}

		if likelihood, exists := m.Likelihood(); exists {
			create = create.SetLikelihood(likelihood)
		} else {
			create = create.SetLikelihood(risk.Likelihood)
		}

		if score, exists := m.Score(); exists {
			create = create.SetScore(score)
		} else {
			create = create.SetScore(risk.Score)
		}

		if mitigation, exists := m.Mitigation(); exists {
			create = create.SetMitigation(mitigation)
		} else {
			create = create.SetMitigation(risk.Mitigation)
		}

		if details, exists := m.Details(); exists {
			create = create.SetDetails(details)
		} else {
			create = create.SetDetails(risk.Details)
		}

		if businessCosts, exists := m.BusinessCosts(); exists {
			create = create.SetBusinessCosts(businessCosts)
		} else {
			create = create.SetBusinessCosts(risk.BusinessCosts)
		}

		if stakeholderID, exists := m.StakeholderID(); exists {
			create = create.SetStakeholderID(stakeholderID)
		} else {
			create = create.SetStakeholderID(risk.StakeholderID)
		}

		if delegateID, exists := m.DelegateID(); exists {
			create = create.SetDelegateID(delegateID)
		} else {
			create = create.SetDelegateID(risk.DelegateID)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *RiskMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		risk, err := client.Risk.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.RiskHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(risk.CreatedAt).
			SetUpdatedAt(risk.UpdatedAt).
			SetCreatedBy(risk.CreatedBy).
			SetUpdatedBy(risk.UpdatedBy).
			SetDeletedAt(risk.DeletedAt).
			SetDeletedBy(risk.DeletedBy).
			SetDisplayID(risk.DisplayID).
			SetTags(risk.Tags).
			SetOwnerID(risk.OwnerID).
			SetName(risk.Name).
			SetStatus(risk.Status).
			SetRiskType(risk.RiskType).
			SetCategory(risk.Category).
			SetImpact(risk.Impact).
			SetLikelihood(risk.Likelihood).
			SetScore(risk.Score).
			SetMitigation(risk.Mitigation).
			SetDetails(risk.Details).
			SetBusinessCosts(risk.BusinessCosts).
			SetStakeholderID(risk.StakeholderID).
			SetDelegateID(risk.DelegateID).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *StandardMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.StandardHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if revision, exists := m.Revision(); exists {
		create = create.SetRevision(revision)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if systemOwned, exists := m.SystemOwned(); exists {
		create = create.SetSystemOwned(systemOwned)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if shortName, exists := m.ShortName(); exists {
		create = create.SetShortName(shortName)
	}

	if framework, exists := m.Framework(); exists {
		create = create.SetFramework(framework)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if governingBodyLogoURL, exists := m.GoverningBodyLogoURL(); exists {
		create = create.SetGoverningBodyLogoURL(governingBodyLogoURL)
	}

	if governingBody, exists := m.GoverningBody(); exists {
		create = create.SetGoverningBody(governingBody)
	}

	if domains, exists := m.Domains(); exists {
		create = create.SetDomains(domains)
	}

	if link, exists := m.Link(); exists {
		create = create.SetLink(link)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	if isPublic, exists := m.IsPublic(); exists {
		create = create.SetIsPublic(isPublic)
	}

	if freeToUse, exists := m.FreeToUse(); exists {
		create = create.SetFreeToUse(freeToUse)
	}

	if standardType, exists := m.StandardType(); exists {
		create = create.SetStandardType(standardType)
	}

	if version, exists := m.Version(); exists {
		create = create.SetVersion(version)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *StandardMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		standard, err := client.Standard.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.StandardHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(standard.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(standard.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(standard.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(standard.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(standard.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(standard.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(standard.Tags)
		}

		if revision, exists := m.Revision(); exists {
			create = create.SetRevision(revision)
		} else {
			create = create.SetRevision(standard.Revision)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(standard.OwnerID)
		}

		if systemOwned, exists := m.SystemOwned(); exists {
			create = create.SetSystemOwned(systemOwned)
		} else {
			create = create.SetSystemOwned(standard.SystemOwned)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(standard.Name)
		}

		if shortName, exists := m.ShortName(); exists {
			create = create.SetShortName(shortName)
		} else {
			create = create.SetShortName(standard.ShortName)
		}

		if framework, exists := m.Framework(); exists {
			create = create.SetFramework(framework)
		} else {
			create = create.SetFramework(standard.Framework)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(standard.Description)
		}

		if governingBodyLogoURL, exists := m.GoverningBodyLogoURL(); exists {
			create = create.SetGoverningBodyLogoURL(governingBodyLogoURL)
		} else {
			create = create.SetGoverningBodyLogoURL(standard.GoverningBodyLogoURL)
		}

		if governingBody, exists := m.GoverningBody(); exists {
			create = create.SetGoverningBody(governingBody)
		} else {
			create = create.SetGoverningBody(standard.GoverningBody)
		}

		if domains, exists := m.Domains(); exists {
			create = create.SetDomains(domains)
		} else {
			create = create.SetDomains(standard.Domains)
		}

		if link, exists := m.Link(); exists {
			create = create.SetLink(link)
		} else {
			create = create.SetLink(standard.Link)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(standard.Status)
		}

		if isPublic, exists := m.IsPublic(); exists {
			create = create.SetIsPublic(isPublic)
		} else {
			create = create.SetIsPublic(standard.IsPublic)
		}

		if freeToUse, exists := m.FreeToUse(); exists {
			create = create.SetFreeToUse(freeToUse)
		} else {
			create = create.SetFreeToUse(standard.FreeToUse)
		}

		if standardType, exists := m.StandardType(); exists {
			create = create.SetStandardType(standardType)
		} else {
			create = create.SetStandardType(standard.StandardType)
		}

		if version, exists := m.Version(); exists {
			create = create.SetVersion(version)
		} else {
			create = create.SetVersion(standard.Version)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *StandardMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		standard, err := client.Standard.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.StandardHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(standard.CreatedAt).
			SetUpdatedAt(standard.UpdatedAt).
			SetCreatedBy(standard.CreatedBy).
			SetUpdatedBy(standard.UpdatedBy).
			SetDeletedAt(standard.DeletedAt).
			SetDeletedBy(standard.DeletedBy).
			SetTags(standard.Tags).
			SetRevision(standard.Revision).
			SetOwnerID(standard.OwnerID).
			SetSystemOwned(standard.SystemOwned).
			SetName(standard.Name).
			SetShortName(standard.ShortName).
			SetFramework(standard.Framework).
			SetDescription(standard.Description).
			SetGoverningBodyLogoURL(standard.GoverningBodyLogoURL).
			SetGoverningBody(standard.GoverningBody).
			SetDomains(standard.Domains).
			SetLink(standard.Link).
			SetStatus(standard.Status).
			SetIsPublic(standard.IsPublic).
			SetFreeToUse(standard.FreeToUse).
			SetStandardType(standard.StandardType).
			SetVersion(standard.Version).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *SubcontrolMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.SubcontrolHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if referenceID, exists := m.ReferenceID(); exists {
		create = create.SetReferenceID(referenceID)
	}

	if auditorReferenceID, exists := m.AuditorReferenceID(); exists {
		create = create.SetAuditorReferenceID(auditorReferenceID)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	if source, exists := m.Source(); exists {
		create = create.SetSource(source)
	}

	if controlType, exists := m.ControlType(); exists {
		create = create.SetControlType(controlType)
	}

	if category, exists := m.Category(); exists {
		create = create.SetCategory(category)
	}

	if categoryID, exists := m.CategoryID(); exists {
		create = create.SetCategoryID(categoryID)
	}

	if subcategory, exists := m.Subcategory(); exists {
		create = create.SetSubcategory(subcategory)
	}

	if mappedCategories, exists := m.MappedCategories(); exists {
		create = create.SetMappedCategories(mappedCategories)
	}

	if assessmentObjectives, exists := m.AssessmentObjectives(); exists {
		create = create.SetAssessmentObjectives(assessmentObjectives)
	}

	if assessmentMethods, exists := m.AssessmentMethods(); exists {
		create = create.SetAssessmentMethods(assessmentMethods)
	}

	if controlQuestions, exists := m.ControlQuestions(); exists {
		create = create.SetControlQuestions(controlQuestions)
	}

	if implementationGuidance, exists := m.ImplementationGuidance(); exists {
		create = create.SetImplementationGuidance(implementationGuidance)
	}

	if exampleEvidence, exists := m.ExampleEvidence(); exists {
		create = create.SetExampleEvidence(exampleEvidence)
	}

	if references, exists := m.References(); exists {
		create = create.SetReferences(references)
	}

	if controlOwnerID, exists := m.ControlOwnerID(); exists {
		create = create.SetControlOwnerID(controlOwnerID)
	}

	if delegateID, exists := m.DelegateID(); exists {
		create = create.SetDelegateID(delegateID)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if refCode, exists := m.RefCode(); exists {
		create = create.SetRefCode(refCode)
	}

	if controlID, exists := m.ControlID(); exists {
		create = create.SetControlID(controlID)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *SubcontrolMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		subcontrol, err := client.Subcontrol.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.SubcontrolHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(subcontrol.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(subcontrol.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(subcontrol.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(subcontrol.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(subcontrol.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(subcontrol.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(subcontrol.DisplayID)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(subcontrol.Tags)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(subcontrol.Description)
		}

		if referenceID, exists := m.ReferenceID(); exists {
			create = create.SetReferenceID(referenceID)
		} else {
			create = create.SetReferenceID(subcontrol.ReferenceID)
		}

		if auditorReferenceID, exists := m.AuditorReferenceID(); exists {
			create = create.SetAuditorReferenceID(auditorReferenceID)
		} else {
			create = create.SetAuditorReferenceID(subcontrol.AuditorReferenceID)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(subcontrol.Status)
		}

		if source, exists := m.Source(); exists {
			create = create.SetSource(source)
		} else {
			create = create.SetSource(subcontrol.Source)
		}

		if controlType, exists := m.ControlType(); exists {
			create = create.SetControlType(controlType)
		} else {
			create = create.SetControlType(subcontrol.ControlType)
		}

		if category, exists := m.Category(); exists {
			create = create.SetCategory(category)
		} else {
			create = create.SetCategory(subcontrol.Category)
		}

		if categoryID, exists := m.CategoryID(); exists {
			create = create.SetCategoryID(categoryID)
		} else {
			create = create.SetCategoryID(subcontrol.CategoryID)
		}

		if subcategory, exists := m.Subcategory(); exists {
			create = create.SetSubcategory(subcategory)
		} else {
			create = create.SetSubcategory(subcontrol.Subcategory)
		}

		if mappedCategories, exists := m.MappedCategories(); exists {
			create = create.SetMappedCategories(mappedCategories)
		} else {
			create = create.SetMappedCategories(subcontrol.MappedCategories)
		}

		if assessmentObjectives, exists := m.AssessmentObjectives(); exists {
			create = create.SetAssessmentObjectives(assessmentObjectives)
		} else {
			create = create.SetAssessmentObjectives(subcontrol.AssessmentObjectives)
		}

		if assessmentMethods, exists := m.AssessmentMethods(); exists {
			create = create.SetAssessmentMethods(assessmentMethods)
		} else {
			create = create.SetAssessmentMethods(subcontrol.AssessmentMethods)
		}

		if controlQuestions, exists := m.ControlQuestions(); exists {
			create = create.SetControlQuestions(controlQuestions)
		} else {
			create = create.SetControlQuestions(subcontrol.ControlQuestions)
		}

		if implementationGuidance, exists := m.ImplementationGuidance(); exists {
			create = create.SetImplementationGuidance(implementationGuidance)
		} else {
			create = create.SetImplementationGuidance(subcontrol.ImplementationGuidance)
		}

		if exampleEvidence, exists := m.ExampleEvidence(); exists {
			create = create.SetExampleEvidence(exampleEvidence)
		} else {
			create = create.SetExampleEvidence(subcontrol.ExampleEvidence)
		}

		if references, exists := m.References(); exists {
			create = create.SetReferences(references)
		} else {
			create = create.SetReferences(subcontrol.References)
		}

		if controlOwnerID, exists := m.ControlOwnerID(); exists {
			create = create.SetControlOwnerID(controlOwnerID)
		} else {
			create = create.SetControlOwnerID(subcontrol.ControlOwnerID)
		}

		if delegateID, exists := m.DelegateID(); exists {
			create = create.SetDelegateID(delegateID)
		} else {
			create = create.SetDelegateID(subcontrol.DelegateID)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(subcontrol.OwnerID)
		}

		if refCode, exists := m.RefCode(); exists {
			create = create.SetRefCode(refCode)
		} else {
			create = create.SetRefCode(subcontrol.RefCode)
		}

		if controlID, exists := m.ControlID(); exists {
			create = create.SetControlID(controlID)
		} else {
			create = create.SetControlID(subcontrol.ControlID)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *SubcontrolMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		subcontrol, err := client.Subcontrol.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.SubcontrolHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(subcontrol.CreatedAt).
			SetUpdatedAt(subcontrol.UpdatedAt).
			SetCreatedBy(subcontrol.CreatedBy).
			SetUpdatedBy(subcontrol.UpdatedBy).
			SetDeletedAt(subcontrol.DeletedAt).
			SetDeletedBy(subcontrol.DeletedBy).
			SetDisplayID(subcontrol.DisplayID).
			SetTags(subcontrol.Tags).
			SetDescription(subcontrol.Description).
			SetReferenceID(subcontrol.ReferenceID).
			SetAuditorReferenceID(subcontrol.AuditorReferenceID).
			SetStatus(subcontrol.Status).
			SetSource(subcontrol.Source).
			SetControlType(subcontrol.ControlType).
			SetCategory(subcontrol.Category).
			SetCategoryID(subcontrol.CategoryID).
			SetSubcategory(subcontrol.Subcategory).
			SetMappedCategories(subcontrol.MappedCategories).
			SetAssessmentObjectives(subcontrol.AssessmentObjectives).
			SetAssessmentMethods(subcontrol.AssessmentMethods).
			SetControlQuestions(subcontrol.ControlQuestions).
			SetImplementationGuidance(subcontrol.ImplementationGuidance).
			SetExampleEvidence(subcontrol.ExampleEvidence).
			SetReferences(subcontrol.References).
			SetControlOwnerID(subcontrol.ControlOwnerID).
			SetDelegateID(subcontrol.DelegateID).
			SetOwnerID(subcontrol.OwnerID).
			SetRefCode(subcontrol.RefCode).
			SetControlID(subcontrol.ControlID).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *TaskMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.TaskHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if title, exists := m.Title(); exists {
		create = create.SetTitle(title)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if details, exists := m.Details(); exists {
		create = create.SetDetails(details)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	if category, exists := m.Category(); exists {
		create = create.SetCategory(category)
	}

	if due, exists := m.Due(); exists {
		create = create.SetDue(due)
	}

	if completed, exists := m.Completed(); exists {
		create = create.SetCompleted(completed)
	}

	if assigneeID, exists := m.AssigneeID(); exists {
		create = create.SetAssigneeID(assigneeID)
	}

	if assignerID, exists := m.AssignerID(); exists {
		create = create.SetAssignerID(assignerID)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *TaskMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		task, err := client.Task.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.TaskHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(task.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(task.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(task.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(task.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(task.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(task.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(task.DisplayID)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(task.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(task.OwnerID)
		}

		if title, exists := m.Title(); exists {
			create = create.SetTitle(title)
		} else {
			create = create.SetTitle(task.Title)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(task.Description)
		}

		if details, exists := m.Details(); exists {
			create = create.SetDetails(details)
		} else {
			create = create.SetDetails(task.Details)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(task.Status)
		}

		if category, exists := m.Category(); exists {
			create = create.SetCategory(category)
		} else {
			create = create.SetCategory(task.Category)
		}

		if due, exists := m.Due(); exists {
			create = create.SetDue(due)
		} else {
			create = create.SetDue(task.Due)
		}

		if completed, exists := m.Completed(); exists {
			create = create.SetCompleted(completed)
		} else {
			create = create.SetCompleted(task.Completed)
		}

		if assigneeID, exists := m.AssigneeID(); exists {
			create = create.SetAssigneeID(assigneeID)
		} else {
			create = create.SetAssigneeID(task.AssigneeID)
		}

		if assignerID, exists := m.AssignerID(); exists {
			create = create.SetAssignerID(assignerID)
		} else {
			create = create.SetAssignerID(task.AssignerID)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *TaskMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		task, err := client.Task.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.TaskHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(task.CreatedAt).
			SetUpdatedAt(task.UpdatedAt).
			SetCreatedBy(task.CreatedBy).
			SetUpdatedBy(task.UpdatedBy).
			SetDeletedAt(task.DeletedAt).
			SetDeletedBy(task.DeletedBy).
			SetDisplayID(task.DisplayID).
			SetTags(task.Tags).
			SetOwnerID(task.OwnerID).
			SetTitle(task.Title).
			SetDescription(task.Description).
			SetDetails(task.Details).
			SetStatus(task.Status).
			SetCategory(task.Category).
			SetDue(task.Due).
			SetCompleted(task.Completed).
			SetAssigneeID(task.AssigneeID).
			SetAssignerID(task.AssignerID).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *TemplateMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.TemplateHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if ownerID, exists := m.OwnerID(); exists {
		create = create.SetOwnerID(ownerID)
	}

	if name, exists := m.Name(); exists {
		create = create.SetName(name)
	}

	if templateType, exists := m.TemplateType(); exists {
		create = create.SetTemplateType(templateType)
	}

	if description, exists := m.Description(); exists {
		create = create.SetDescription(description)
	}

	if jsonconfig, exists := m.Jsonconfig(); exists {
		create = create.SetJsonconfig(jsonconfig)
	}

	if uischema, exists := m.Uischema(); exists {
		create = create.SetUischema(uischema)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *TemplateMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		template, err := client.Template.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.TemplateHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(template.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(template.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(template.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(template.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(template.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(template.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(template.Tags)
		}

		if ownerID, exists := m.OwnerID(); exists {
			create = create.SetOwnerID(ownerID)
		} else {
			create = create.SetOwnerID(template.OwnerID)
		}

		if name, exists := m.Name(); exists {
			create = create.SetName(name)
		} else {
			create = create.SetName(template.Name)
		}

		if templateType, exists := m.TemplateType(); exists {
			create = create.SetTemplateType(templateType)
		} else {
			create = create.SetTemplateType(template.TemplateType)
		}

		if description, exists := m.Description(); exists {
			create = create.SetDescription(description)
		} else {
			create = create.SetDescription(template.Description)
		}

		if jsonconfig, exists := m.Jsonconfig(); exists {
			create = create.SetJsonconfig(jsonconfig)
		} else {
			create = create.SetJsonconfig(template.Jsonconfig)
		}

		if uischema, exists := m.Uischema(); exists {
			create = create.SetUischema(uischema)
		} else {
			create = create.SetUischema(template.Uischema)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *TemplateMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		template, err := client.Template.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.TemplateHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(template.CreatedAt).
			SetUpdatedAt(template.UpdatedAt).
			SetCreatedBy(template.CreatedBy).
			SetUpdatedBy(template.UpdatedBy).
			SetDeletedAt(template.DeletedAt).
			SetDeletedBy(template.DeletedBy).
			SetTags(template.Tags).
			SetOwnerID(template.OwnerID).
			SetName(template.Name).
			SetTemplateType(template.TemplateType).
			SetDescription(template.Description).
			SetJsonconfig(template.Jsonconfig).
			SetUischema(template.Uischema).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *UserMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.UserHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if displayID, exists := m.DisplayID(); exists {
		create = create.SetDisplayID(displayID)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if email, exists := m.Email(); exists {
		create = create.SetEmail(email)
	}

	if firstName, exists := m.FirstName(); exists {
		create = create.SetFirstName(firstName)
	}

	if lastName, exists := m.LastName(); exists {
		create = create.SetLastName(lastName)
	}

	if displayName, exists := m.DisplayName(); exists {
		create = create.SetDisplayName(displayName)
	}

	if avatarRemoteURL, exists := m.AvatarRemoteURL(); exists {
		create = create.SetNillableAvatarRemoteURL(&avatarRemoteURL)
	}

	if avatarLocalFileID, exists := m.AvatarLocalFileID(); exists {
		create = create.SetNillableAvatarLocalFileID(&avatarLocalFileID)
	}

	if avatarUpdatedAt, exists := m.AvatarUpdatedAt(); exists {
		create = create.SetNillableAvatarUpdatedAt(&avatarUpdatedAt)
	}

	if lastSeen, exists := m.LastSeen(); exists {
		create = create.SetNillableLastSeen(&lastSeen)
	}

	if lastLoginProvider, exists := m.LastLoginProvider(); exists {
		create = create.SetLastLoginProvider(lastLoginProvider)
	}

	if password, exists := m.Password(); exists {
		create = create.SetNillablePassword(&password)
	}

	if sub, exists := m.Sub(); exists {
		create = create.SetSub(sub)
	}

	if authProvider, exists := m.AuthProvider(); exists {
		create = create.SetAuthProvider(authProvider)
	}

	if role, exists := m.Role(); exists {
		create = create.SetRole(role)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *UserMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		user, err := client.User.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.UserHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(user.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(user.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(user.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(user.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(user.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(user.DeletedBy)
		}

		if displayID, exists := m.DisplayID(); exists {
			create = create.SetDisplayID(displayID)
		} else {
			create = create.SetDisplayID(user.DisplayID)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(user.Tags)
		}

		if email, exists := m.Email(); exists {
			create = create.SetEmail(email)
		} else {
			create = create.SetEmail(user.Email)
		}

		if firstName, exists := m.FirstName(); exists {
			create = create.SetFirstName(firstName)
		} else {
			create = create.SetFirstName(user.FirstName)
		}

		if lastName, exists := m.LastName(); exists {
			create = create.SetLastName(lastName)
		} else {
			create = create.SetLastName(user.LastName)
		}

		if displayName, exists := m.DisplayName(); exists {
			create = create.SetDisplayName(displayName)
		} else {
			create = create.SetDisplayName(user.DisplayName)
		}

		if avatarRemoteURL, exists := m.AvatarRemoteURL(); exists {
			create = create.SetNillableAvatarRemoteURL(&avatarRemoteURL)
		} else {
			create = create.SetNillableAvatarRemoteURL(user.AvatarRemoteURL)
		}

		if avatarLocalFileID, exists := m.AvatarLocalFileID(); exists {
			create = create.SetNillableAvatarLocalFileID(&avatarLocalFileID)
		} else {
			create = create.SetNillableAvatarLocalFileID(user.AvatarLocalFileID)
		}

		if avatarUpdatedAt, exists := m.AvatarUpdatedAt(); exists {
			create = create.SetNillableAvatarUpdatedAt(&avatarUpdatedAt)
		} else {
			create = create.SetNillableAvatarUpdatedAt(user.AvatarUpdatedAt)
		}

		if lastSeen, exists := m.LastSeen(); exists {
			create = create.SetNillableLastSeen(&lastSeen)
		} else {
			create = create.SetNillableLastSeen(user.LastSeen)
		}

		if lastLoginProvider, exists := m.LastLoginProvider(); exists {
			create = create.SetLastLoginProvider(lastLoginProvider)
		} else {
			create = create.SetLastLoginProvider(user.LastLoginProvider)
		}

		if password, exists := m.Password(); exists {
			create = create.SetNillablePassword(&password)
		} else {
			create = create.SetNillablePassword(user.Password)
		}

		if sub, exists := m.Sub(); exists {
			create = create.SetSub(sub)
		} else {
			create = create.SetSub(user.Sub)
		}

		if authProvider, exists := m.AuthProvider(); exists {
			create = create.SetAuthProvider(authProvider)
		} else {
			create = create.SetAuthProvider(user.AuthProvider)
		}

		if role, exists := m.Role(); exists {
			create = create.SetRole(role)
		} else {
			create = create.SetRole(user.Role)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *UserMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		user, err := client.User.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.UserHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(user.CreatedAt).
			SetUpdatedAt(user.UpdatedAt).
			SetCreatedBy(user.CreatedBy).
			SetUpdatedBy(user.UpdatedBy).
			SetDeletedAt(user.DeletedAt).
			SetDeletedBy(user.DeletedBy).
			SetDisplayID(user.DisplayID).
			SetTags(user.Tags).
			SetEmail(user.Email).
			SetFirstName(user.FirstName).
			SetLastName(user.LastName).
			SetDisplayName(user.DisplayName).
			SetNillableAvatarRemoteURL(user.AvatarRemoteURL).
			SetNillableAvatarLocalFileID(user.AvatarLocalFileID).
			SetNillableAvatarUpdatedAt(user.AvatarUpdatedAt).
			SetNillableLastSeen(user.LastSeen).
			SetLastLoginProvider(user.LastLoginProvider).
			SetNillablePassword(user.Password).
			SetSub(user.Sub).
			SetAuthProvider(user.AuthProvider).
			SetRole(user.Role).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}

func (m *UserSettingMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()

	id, ok := m.ID()
	if !ok {
		return idNotFoundError
	}

	create := client.UserSettingHistory.Create()

	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if tags, exists := m.Tags(); exists {
		create = create.SetTags(tags)
	}

	if userID, exists := m.UserID(); exists {
		create = create.SetUserID(userID)
	}

	if locked, exists := m.Locked(); exists {
		create = create.SetLocked(locked)
	}

	if silencedAt, exists := m.SilencedAt(); exists {
		create = create.SetNillableSilencedAt(&silencedAt)
	}

	if suspendedAt, exists := m.SuspendedAt(); exists {
		create = create.SetNillableSuspendedAt(&suspendedAt)
	}

	if status, exists := m.Status(); exists {
		create = create.SetStatus(status)
	}

	if emailConfirmed, exists := m.EmailConfirmed(); exists {
		create = create.SetEmailConfirmed(emailConfirmed)
	}

	if isWebauthnAllowed, exists := m.IsWebauthnAllowed(); exists {
		create = create.SetIsWebauthnAllowed(isWebauthnAllowed)
	}

	if isTfaEnabled, exists := m.IsTfaEnabled(); exists {
		create = create.SetIsTfaEnabled(isTfaEnabled)
	}

	if phoneNumber, exists := m.PhoneNumber(); exists {
		create = create.SetNillablePhoneNumber(&phoneNumber)
	}

	_, err := create.Save(ctx)

	return err
}

func (m *UserSettingMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	// check for soft delete operation and delete instead
	if entx.CheckIsSoftDelete(ctx) {
		return m.CreateHistoryFromDelete(ctx)
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		usersetting, err := client.UserSetting.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.UserSettingHistory.Create()

		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(usersetting.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(usersetting.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(usersetting.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(usersetting.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(usersetting.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(usersetting.DeletedBy)
		}

		if tags, exists := m.Tags(); exists {
			create = create.SetTags(tags)
		} else {
			create = create.SetTags(usersetting.Tags)
		}

		if userID, exists := m.UserID(); exists {
			create = create.SetUserID(userID)
		} else {
			create = create.SetUserID(usersetting.UserID)
		}

		if locked, exists := m.Locked(); exists {
			create = create.SetLocked(locked)
		} else {
			create = create.SetLocked(usersetting.Locked)
		}

		if silencedAt, exists := m.SilencedAt(); exists {
			create = create.SetNillableSilencedAt(&silencedAt)
		} else {
			create = create.SetNillableSilencedAt(usersetting.SilencedAt)
		}

		if suspendedAt, exists := m.SuspendedAt(); exists {
			create = create.SetNillableSuspendedAt(&suspendedAt)
		} else {
			create = create.SetNillableSuspendedAt(usersetting.SuspendedAt)
		}

		if status, exists := m.Status(); exists {
			create = create.SetStatus(status)
		} else {
			create = create.SetStatus(usersetting.Status)
		}

		if emailConfirmed, exists := m.EmailConfirmed(); exists {
			create = create.SetEmailConfirmed(emailConfirmed)
		} else {
			create = create.SetEmailConfirmed(usersetting.EmailConfirmed)
		}

		if isWebauthnAllowed, exists := m.IsWebauthnAllowed(); exists {
			create = create.SetIsWebauthnAllowed(isWebauthnAllowed)
		} else {
			create = create.SetIsWebauthnAllowed(usersetting.IsWebauthnAllowed)
		}

		if isTfaEnabled, exists := m.IsTfaEnabled(); exists {
			create = create.SetIsTfaEnabled(isTfaEnabled)
		} else {
			create = create.SetIsTfaEnabled(usersetting.IsTfaEnabled)
		}

		if phoneNumber, exists := m.PhoneNumber(); exists {
			create = create.SetNillablePhoneNumber(&phoneNumber)
		} else {
			create = create.SetNillablePhoneNumber(usersetting.PhoneNumber)
		}

		if _, err := create.Save(ctx); err != nil {
			return err
		}
	}

	return nil
}

func (m *UserSettingMutation) CreateHistoryFromDelete(ctx context.Context) error {
	// check for soft delete operation and skip so it happens on update
	if entx.CheckIsSoftDelete(ctx) {
		return nil
	}
	client := m.Client()

	ids, err := m.IDs(ctx)
	if err != nil {
		return fmt.Errorf("getting ids: %w", err)
	}

	for _, id := range ids {
		usersetting, err := client.UserSetting.Get(ctx, id)
		if err != nil {
			return err
		}

		create := client.UserSettingHistory.Create()

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(usersetting.CreatedAt).
			SetUpdatedAt(usersetting.UpdatedAt).
			SetCreatedBy(usersetting.CreatedBy).
			SetUpdatedBy(usersetting.UpdatedBy).
			SetDeletedAt(usersetting.DeletedAt).
			SetDeletedBy(usersetting.DeletedBy).
			SetTags(usersetting.Tags).
			SetUserID(usersetting.UserID).
			SetLocked(usersetting.Locked).
			SetNillableSilencedAt(usersetting.SilencedAt).
			SetNillableSuspendedAt(usersetting.SuspendedAt).
			SetStatus(usersetting.Status).
			SetEmailConfirmed(usersetting.EmailConfirmed).
			SetIsWebauthnAllowed(usersetting.IsWebauthnAllowed).
			SetIsTfaEnabled(usersetting.IsTfaEnabled).
			SetNillablePhoneNumber(usersetting.PhoneNumber).
			Save(ctx)
		if err != nil {
			return err
		}
	}

	return nil
}
