// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ProcedureQuery is the builder for querying Procedure entities.
type ProcedureQuery struct {
	config
	ctx                       *QueryContext
	order                     []procedure.OrderOption
	inters                    []Interceptor
	predicates                []predicate.Procedure
	withOwner                 *OrganizationQuery
	withBlockedGroups         *GroupQuery
	withEditors               *GroupQuery
	withApprover              *GroupQuery
	withDelegate              *GroupQuery
	withControls              *ControlQuery
	withSubcontrols           *SubcontrolQuery
	withInternalPolicies      *InternalPolicyQuery
	withPrograms              *ProgramQuery
	withNarratives            *NarrativeQuery
	withRisks                 *RiskQuery
	withTasks                 *TaskQuery
	withFile                  *FileQuery
	withFKs                   bool
	loadTotal                 []func(context.Context, []*Procedure) error
	modifiers                 []func(*sql.Selector)
	withNamedBlockedGroups    map[string]*GroupQuery
	withNamedEditors          map[string]*GroupQuery
	withNamedControls         map[string]*ControlQuery
	withNamedSubcontrols      map[string]*SubcontrolQuery
	withNamedInternalPolicies map[string]*InternalPolicyQuery
	withNamedPrograms         map[string]*ProgramQuery
	withNamedNarratives       map[string]*NarrativeQuery
	withNamedRisks            map[string]*RiskQuery
	withNamedTasks            map[string]*TaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProcedureQuery builder.
func (_q *ProcedureQuery) Where(ps ...predicate.Procedure) *ProcedureQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *ProcedureQuery) Limit(limit int) *ProcedureQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *ProcedureQuery) Offset(offset int) *ProcedureQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *ProcedureQuery) Unique(unique bool) *ProcedureQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *ProcedureQuery) Order(o ...procedure.OrderOption) *ProcedureQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryOwner chains the current query on the "owner" edge.
func (_q *ProcedureQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, procedure.OwnerTable, procedure.OwnerColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Procedure
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlockedGroups chains the current query on the "blocked_groups" edge.
func (_q *ProcedureQuery) QueryBlockedGroups() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, procedure.BlockedGroupsTable, procedure.BlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.ProcedureBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEditors chains the current query on the "editors" edge.
func (_q *ProcedureQuery) QueryEditors() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, procedure.EditorsTable, procedure.EditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.ProcedureEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApprover chains the current query on the "approver" edge.
func (_q *ProcedureQuery) QueryApprover() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, procedure.ApproverTable, procedure.ApproverColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Procedure
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDelegate chains the current query on the "delegate" edge.
func (_q *ProcedureQuery) QueryDelegate() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, procedure.DelegateTable, procedure.DelegateColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Procedure
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControls chains the current query on the "controls" edge.
func (_q *ProcedureQuery) QueryControls() *ControlQuery {
	query := (&ControlClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, procedure.ControlsTable, procedure.ControlsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlProcedures
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubcontrols chains the current query on the "subcontrols" edge.
func (_q *ProcedureQuery) QuerySubcontrols() *SubcontrolQuery {
	query := (&SubcontrolClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(subcontrol.Table, subcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, procedure.SubcontrolsTable, procedure.SubcontrolsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.SubcontrolProcedures
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalPolicies chains the current query on the "internal_policies" edge.
func (_q *ProcedureQuery) QueryInternalPolicies() *InternalPolicyQuery {
	query := (&InternalPolicyClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(internalpolicy.Table, internalpolicy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, procedure.InternalPoliciesTable, procedure.InternalPoliciesPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.InternalPolicy
		step.Edge.Schema = schemaConfig.InternalPolicyProcedures
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrograms chains the current query on the "programs" edge.
func (_q *ProcedureQuery) QueryPrograms() *ProgramQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, procedure.ProgramsTable, procedure.ProgramsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramProcedures
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNarratives chains the current query on the "narratives" edge.
func (_q *ProcedureQuery) QueryNarratives() *NarrativeQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(narrative.Table, narrative.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, procedure.NarrativesTable, procedure.NarrativesPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.ProcedureNarratives
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRisks chains the current query on the "risks" edge.
func (_q *ProcedureQuery) QueryRisks() *RiskQuery {
	query := (&RiskClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, procedure.RisksTable, procedure.RisksPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.ProcedureRisks
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (_q *ProcedureQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, procedure.TasksTable, procedure.TasksPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.ProcedureTasks
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFile chains the current query on the "file" edge.
func (_q *ProcedureQuery) QueryFile() *FileQuery {
	query := (&FileClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, procedure.FileTable, procedure.FileColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.Procedure
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Procedure entity from the query.
// Returns a *NotFoundError when no Procedure was found.
func (_q *ProcedureQuery) First(ctx context.Context) (*Procedure, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{procedure.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *ProcedureQuery) FirstX(ctx context.Context) *Procedure {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Procedure ID from the query.
// Returns a *NotFoundError when no Procedure ID was found.
func (_q *ProcedureQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{procedure.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *ProcedureQuery) FirstIDX(ctx context.Context) string {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Procedure entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Procedure entity is found.
// Returns a *NotFoundError when no Procedure entities are found.
func (_q *ProcedureQuery) Only(ctx context.Context) (*Procedure, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{procedure.Label}
	default:
		return nil, &NotSingularError{procedure.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *ProcedureQuery) OnlyX(ctx context.Context) *Procedure {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Procedure ID in the query.
// Returns a *NotSingularError when more than one Procedure ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *ProcedureQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{procedure.Label}
	default:
		err = &NotSingularError{procedure.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *ProcedureQuery) OnlyIDX(ctx context.Context) string {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Procedures.
func (_q *ProcedureQuery) All(ctx context.Context) ([]*Procedure, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Procedure, *ProcedureQuery]()
	return withInterceptors[[]*Procedure](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *ProcedureQuery) AllX(ctx context.Context) []*Procedure {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Procedure IDs.
func (_q *ProcedureQuery) IDs(ctx context.Context) (ids []string, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(procedure.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *ProcedureQuery) IDsX(ctx context.Context) []string {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *ProcedureQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*ProcedureQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *ProcedureQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *ProcedureQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *ProcedureQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProcedureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *ProcedureQuery) Clone() *ProcedureQuery {
	if _q == nil {
		return nil
	}
	return &ProcedureQuery{
		config:               _q.config,
		ctx:                  _q.ctx.Clone(),
		order:                append([]procedure.OrderOption{}, _q.order...),
		inters:               append([]Interceptor{}, _q.inters...),
		predicates:           append([]predicate.Procedure{}, _q.predicates...),
		withOwner:            _q.withOwner.Clone(),
		withBlockedGroups:    _q.withBlockedGroups.Clone(),
		withEditors:          _q.withEditors.Clone(),
		withApprover:         _q.withApprover.Clone(),
		withDelegate:         _q.withDelegate.Clone(),
		withControls:         _q.withControls.Clone(),
		withSubcontrols:      _q.withSubcontrols.Clone(),
		withInternalPolicies: _q.withInternalPolicies.Clone(),
		withPrograms:         _q.withPrograms.Clone(),
		withNarratives:       _q.withNarratives.Clone(),
		withRisks:            _q.withRisks.Clone(),
		withTasks:            _q.withTasks.Clone(),
		withFile:             _q.withFile.Clone(),
		// clone intermediate query.
		sql:       _q.sql.Clone(),
		path:      _q.path,
		modifiers: append([]func(*sql.Selector){}, _q.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithOwner(opts ...func(*OrganizationQuery)) *ProcedureQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOwner = query
	return _q
}

// WithBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithBlockedGroups(opts ...func(*GroupQuery)) *ProcedureQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBlockedGroups = query
	return _q
}

// WithEditors tells the query-builder to eager-load the nodes that are connected to
// the "editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithEditors(opts ...func(*GroupQuery)) *ProcedureQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEditors = query
	return _q
}

// WithApprover tells the query-builder to eager-load the nodes that are connected to
// the "approver" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithApprover(opts ...func(*GroupQuery)) *ProcedureQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withApprover = query
	return _q
}

// WithDelegate tells the query-builder to eager-load the nodes that are connected to
// the "delegate" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithDelegate(opts ...func(*GroupQuery)) *ProcedureQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withDelegate = query
	return _q
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithControls(opts ...func(*ControlQuery)) *ProcedureQuery {
	query := (&ControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControls = query
	return _q
}

// WithSubcontrols tells the query-builder to eager-load the nodes that are connected to
// the "subcontrols" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithSubcontrols(opts ...func(*SubcontrolQuery)) *ProcedureQuery {
	query := (&SubcontrolClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSubcontrols = query
	return _q
}

// WithInternalPolicies tells the query-builder to eager-load the nodes that are connected to
// the "internal_policies" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithInternalPolicies(opts ...func(*InternalPolicyQuery)) *ProcedureQuery {
	query := (&InternalPolicyClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withInternalPolicies = query
	return _q
}

// WithPrograms tells the query-builder to eager-load the nodes that are connected to
// the "programs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithPrograms(opts ...func(*ProgramQuery)) *ProcedureQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPrograms = query
	return _q
}

// WithNarratives tells the query-builder to eager-load the nodes that are connected to
// the "narratives" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithNarratives(opts ...func(*NarrativeQuery)) *ProcedureQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withNarratives = query
	return _q
}

// WithRisks tells the query-builder to eager-load the nodes that are connected to
// the "risks" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithRisks(opts ...func(*RiskQuery)) *ProcedureQuery {
	query := (&RiskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withRisks = query
	return _q
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithTasks(opts ...func(*TaskQuery)) *ProcedureQuery {
	query := (&TaskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTasks = query
	return _q
}

// WithFile tells the query-builder to eager-load the nodes that are connected to
// the "file" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithFile(opts ...func(*FileQuery)) *ProcedureQuery {
	query := (&FileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withFile = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Procedure.Query().
//		GroupBy(procedure.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (_q *ProcedureQuery) GroupBy(field string, fields ...string) *ProcedureGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProcedureGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = procedure.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Procedure.Query().
//		Select(procedure.FieldCreatedAt).
//		Scan(ctx, &v)
func (_q *ProcedureQuery) Select(fields ...string) *ProcedureSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &ProcedureSelect{ProcedureQuery: _q}
	sbuild.label = procedure.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProcedureSelect configured with the given aggregations.
func (_q *ProcedureQuery) Aggregate(fns ...AggregateFunc) *ProcedureSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *ProcedureQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !procedure.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	if procedure.Policy == nil {
		return errors.New("generated: uninitialized procedure.Policy (forgotten import generated/runtime?)")
	}
	if err := procedure.Policy.EvalQuery(ctx, _q); err != nil {
		return err
	}
	return nil
}

func (_q *ProcedureQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Procedure, error) {
	var (
		nodes       = []*Procedure{}
		withFKs     = _q.withFKs
		_spec       = _q.querySpec()
		loadedTypes = [13]bool{
			_q.withOwner != nil,
			_q.withBlockedGroups != nil,
			_q.withEditors != nil,
			_q.withApprover != nil,
			_q.withDelegate != nil,
			_q.withControls != nil,
			_q.withSubcontrols != nil,
			_q.withInternalPolicies != nil,
			_q.withPrograms != nil,
			_q.withNarratives != nil,
			_q.withRisks != nil,
			_q.withTasks != nil,
			_q.withFile != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, procedure.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Procedure).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Procedure{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = _q.schemaConfig.Procedure
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withOwner; query != nil {
		if err := _q.loadOwner(ctx, query, nodes, nil,
			func(n *Procedure, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withBlockedGroups; query != nil {
		if err := _q.loadBlockedGroups(ctx, query, nodes,
			func(n *Procedure) { n.Edges.BlockedGroups = []*Group{} },
			func(n *Procedure, e *Group) { n.Edges.BlockedGroups = append(n.Edges.BlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEditors; query != nil {
		if err := _q.loadEditors(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Editors = []*Group{} },
			func(n *Procedure, e *Group) { n.Edges.Editors = append(n.Edges.Editors, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withApprover; query != nil {
		if err := _q.loadApprover(ctx, query, nodes, nil,
			func(n *Procedure, e *Group) { n.Edges.Approver = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withDelegate; query != nil {
		if err := _q.loadDelegate(ctx, query, nodes, nil,
			func(n *Procedure, e *Group) { n.Edges.Delegate = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withControls; query != nil {
		if err := _q.loadControls(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Controls = []*Control{} },
			func(n *Procedure, e *Control) { n.Edges.Controls = append(n.Edges.Controls, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSubcontrols; query != nil {
		if err := _q.loadSubcontrols(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Subcontrols = []*Subcontrol{} },
			func(n *Procedure, e *Subcontrol) { n.Edges.Subcontrols = append(n.Edges.Subcontrols, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withInternalPolicies; query != nil {
		if err := _q.loadInternalPolicies(ctx, query, nodes,
			func(n *Procedure) { n.Edges.InternalPolicies = []*InternalPolicy{} },
			func(n *Procedure, e *InternalPolicy) { n.Edges.InternalPolicies = append(n.Edges.InternalPolicies, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withPrograms; query != nil {
		if err := _q.loadPrograms(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Programs = []*Program{} },
			func(n *Procedure, e *Program) { n.Edges.Programs = append(n.Edges.Programs, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withNarratives; query != nil {
		if err := _q.loadNarratives(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Narratives = []*Narrative{} },
			func(n *Procedure, e *Narrative) { n.Edges.Narratives = append(n.Edges.Narratives, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withRisks; query != nil {
		if err := _q.loadRisks(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Risks = []*Risk{} },
			func(n *Procedure, e *Risk) { n.Edges.Risks = append(n.Edges.Risks, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withTasks; query != nil {
		if err := _q.loadTasks(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Tasks = []*Task{} },
			func(n *Procedure, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withFile; query != nil {
		if err := _q.loadFile(ctx, query, nodes, nil,
			func(n *Procedure, e *File) { n.Edges.File = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedBlockedGroups {
		if err := _q.loadBlockedGroups(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedBlockedGroups(name) },
			func(n *Procedure, e *Group) { n.appendNamedBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEditors {
		if err := _q.loadEditors(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedEditors(name) },
			func(n *Procedure, e *Group) { n.appendNamedEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControls {
		if err := _q.loadControls(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedControls(name) },
			func(n *Procedure, e *Control) { n.appendNamedControls(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedSubcontrols {
		if err := _q.loadSubcontrols(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedSubcontrols(name) },
			func(n *Procedure, e *Subcontrol) { n.appendNamedSubcontrols(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedInternalPolicies {
		if err := _q.loadInternalPolicies(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedInternalPolicies(name) },
			func(n *Procedure, e *InternalPolicy) { n.appendNamedInternalPolicies(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedPrograms {
		if err := _q.loadPrograms(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedPrograms(name) },
			func(n *Procedure, e *Program) { n.appendNamedPrograms(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedNarratives {
		if err := _q.loadNarratives(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedNarratives(name) },
			func(n *Procedure, e *Narrative) { n.appendNamedNarratives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedRisks {
		if err := _q.loadRisks(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedRisks(name) },
			func(n *Procedure, e *Risk) { n.appendNamedRisks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedTasks {
		if err := _q.loadTasks(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedTasks(name) },
			func(n *Procedure, e *Task) { n.appendNamedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range _q.loadTotal {
		if err := _q.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *ProcedureQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Procedure)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *ProcedureQuery) loadBlockedGroups(ctx context.Context, query *GroupQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.BlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.ProcedureBlockedGroups)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(procedure.BlockedGroupsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(procedure.BlockedGroupsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.BlockedGroupsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *ProcedureQuery) loadEditors(ctx context.Context, query *GroupQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.EditorsTable)
		joinT.Schema(_q.schemaConfig.ProcedureEditors)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(procedure.EditorsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(procedure.EditorsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.EditorsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *ProcedureQuery) loadApprover(ctx context.Context, query *GroupQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Group)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Procedure)
	for i := range nodes {
		fk := nodes[i].ApproverID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(group.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "approver_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *ProcedureQuery) loadDelegate(ctx context.Context, query *GroupQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Group)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Procedure)
	for i := range nodes {
		fk := nodes[i].DelegateID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(group.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "delegate_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *ProcedureQuery) loadControls(ctx context.Context, query *ControlQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.ControlsTable)
		joinT.Schema(_q.schemaConfig.ControlProcedures)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(procedure.ControlsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(procedure.ControlsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.ControlsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "controls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *ProcedureQuery) loadSubcontrols(ctx context.Context, query *SubcontrolQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Subcontrol)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.SubcontrolsTable)
		joinT.Schema(_q.schemaConfig.SubcontrolProcedures)
		s.Join(joinT).On(s.C(subcontrol.FieldID), joinT.C(procedure.SubcontrolsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(procedure.SubcontrolsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.SubcontrolsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Subcontrol](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subcontrols" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *ProcedureQuery) loadInternalPolicies(ctx context.Context, query *InternalPolicyQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *InternalPolicy)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.InternalPoliciesTable)
		joinT.Schema(_q.schemaConfig.InternalPolicyProcedures)
		s.Join(joinT).On(s.C(internalpolicy.FieldID), joinT.C(procedure.InternalPoliciesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(procedure.InternalPoliciesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.InternalPoliciesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*InternalPolicy](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "internal_policies" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *ProcedureQuery) loadPrograms(ctx context.Context, query *ProgramQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.ProgramsTable)
		joinT.Schema(_q.schemaConfig.ProgramProcedures)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(procedure.ProgramsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(procedure.ProgramsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.ProgramsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "programs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *ProcedureQuery) loadNarratives(ctx context.Context, query *NarrativeQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Narrative)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.NarrativesTable)
		joinT.Schema(_q.schemaConfig.ProcedureNarratives)
		s.Join(joinT).On(s.C(narrative.FieldID), joinT.C(procedure.NarrativesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(procedure.NarrativesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.NarrativesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Narrative](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "narratives" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *ProcedureQuery) loadRisks(ctx context.Context, query *RiskQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Risk)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.RisksTable)
		joinT.Schema(_q.schemaConfig.ProcedureRisks)
		s.Join(joinT).On(s.C(risk.FieldID), joinT.C(procedure.RisksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(procedure.RisksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.RisksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Risk](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "risks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *ProcedureQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.TasksTable)
		joinT.Schema(_q.schemaConfig.ProcedureTasks)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(procedure.TasksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(procedure.TasksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.TasksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tasks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *ProcedureQuery) loadFile(ctx context.Context, query *FileQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *File)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Procedure)
	for i := range nodes {
		if nodes[i].FileID == nil {
			continue
		}
		fk := *nodes[i].FileID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(file.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "file_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (_q *ProcedureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Schema = _q.schemaConfig.Procedure
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *ProcedureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(procedure.Table, procedure.Columns, sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, procedure.FieldID)
		for i := range fields {
			if fields[i] != procedure.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if _q.withOwner != nil {
			_spec.Node.AddColumnOnce(procedure.FieldOwnerID)
		}
		if _q.withApprover != nil {
			_spec.Node.AddColumnOnce(procedure.FieldApproverID)
		}
		if _q.withDelegate != nil {
			_spec.Node.AddColumnOnce(procedure.FieldDelegateID)
		}
		if _q.withFile != nil {
			_spec.Node.AddColumnOnce(procedure.FieldFileID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *ProcedureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(procedure.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = procedure.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(_q.schemaConfig.Procedure)
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_q *ProcedureQuery) Modify(modifiers ...func(s *sql.Selector)) *ProcedureSelect {
	_q.modifiers = append(_q.modifiers, modifiers...)
	return _q.Select()
}

// WithNamedBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithNamedBlockedGroups(name string, opts ...func(*GroupQuery)) *ProcedureQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedBlockedGroups == nil {
		_q.withNamedBlockedGroups = make(map[string]*GroupQuery)
	}
	_q.withNamedBlockedGroups[name] = query
	return _q
}

// WithNamedEditors tells the query-builder to eager-load the nodes that are connected to the "editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithNamedEditors(name string, opts ...func(*GroupQuery)) *ProcedureQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEditors == nil {
		_q.withNamedEditors = make(map[string]*GroupQuery)
	}
	_q.withNamedEditors[name] = query
	return _q
}

// WithNamedControls tells the query-builder to eager-load the nodes that are connected to the "controls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithNamedControls(name string, opts ...func(*ControlQuery)) *ProcedureQuery {
	query := (&ControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControls == nil {
		_q.withNamedControls = make(map[string]*ControlQuery)
	}
	_q.withNamedControls[name] = query
	return _q
}

// WithNamedSubcontrols tells the query-builder to eager-load the nodes that are connected to the "subcontrols"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithNamedSubcontrols(name string, opts ...func(*SubcontrolQuery)) *ProcedureQuery {
	query := (&SubcontrolClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedSubcontrols == nil {
		_q.withNamedSubcontrols = make(map[string]*SubcontrolQuery)
	}
	_q.withNamedSubcontrols[name] = query
	return _q
}

// WithNamedInternalPolicies tells the query-builder to eager-load the nodes that are connected to the "internal_policies"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithNamedInternalPolicies(name string, opts ...func(*InternalPolicyQuery)) *ProcedureQuery {
	query := (&InternalPolicyClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedInternalPolicies == nil {
		_q.withNamedInternalPolicies = make(map[string]*InternalPolicyQuery)
	}
	_q.withNamedInternalPolicies[name] = query
	return _q
}

// WithNamedPrograms tells the query-builder to eager-load the nodes that are connected to the "programs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithNamedPrograms(name string, opts ...func(*ProgramQuery)) *ProcedureQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedPrograms == nil {
		_q.withNamedPrograms = make(map[string]*ProgramQuery)
	}
	_q.withNamedPrograms[name] = query
	return _q
}

// WithNamedNarratives tells the query-builder to eager-load the nodes that are connected to the "narratives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithNamedNarratives(name string, opts ...func(*NarrativeQuery)) *ProcedureQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedNarratives == nil {
		_q.withNamedNarratives = make(map[string]*NarrativeQuery)
	}
	_q.withNamedNarratives[name] = query
	return _q
}

// WithNamedRisks tells the query-builder to eager-load the nodes that are connected to the "risks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithNamedRisks(name string, opts ...func(*RiskQuery)) *ProcedureQuery {
	query := (&RiskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedRisks == nil {
		_q.withNamedRisks = make(map[string]*RiskQuery)
	}
	_q.withNamedRisks[name] = query
	return _q
}

// WithNamedTasks tells the query-builder to eager-load the nodes that are connected to the "tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *ProcedureQuery) WithNamedTasks(name string, opts ...func(*TaskQuery)) *ProcedureQuery {
	query := (&TaskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedTasks == nil {
		_q.withNamedTasks = make(map[string]*TaskQuery)
	}
	_q.withNamedTasks[name] = query
	return _q
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (pq *ProcedureQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryIDs)
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return pq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, pq, qr, pq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// ProcedureGroupBy is the group-by builder for Procedure entities.
type ProcedureGroupBy struct {
	selector
	build *ProcedureQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *ProcedureGroupBy) Aggregate(fns ...AggregateFunc) *ProcedureGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *ProcedureGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProcedureQuery, *ProcedureGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *ProcedureGroupBy) sqlScan(ctx context.Context, root *ProcedureQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProcedureSelect is the builder for selecting fields of Procedure entities.
type ProcedureSelect struct {
	*ProcedureQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *ProcedureSelect) Aggregate(fns ...AggregateFunc) *ProcedureSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *ProcedureSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProcedureQuery, *ProcedureSelect](ctx, _s.ProcedureQuery, _s, _s.inters, v)
}

func (_s *ProcedureSelect) sqlScan(ctx context.Context, root *ProcedureQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_s *ProcedureSelect) Modify(modifiers ...func(s *sql.Selector)) *ProcedureSelect {
	_s.modifiers = append(_s.modifiers, modifiers...)
	return _s
}
