// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/task"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ProcedureQuery is the builder for querying Procedure entities.
type ProcedureQuery struct {
	config
	ctx                     *QueryContext
	order                   []procedure.OrderOption
	inters                  []Interceptor
	predicates              []predicate.Procedure
	withControl             *ControlQuery
	withInternalpolicy      *InternalPolicyQuery
	withNarratives          *NarrativeQuery
	withRisks               *RiskQuery
	withTasks               *TaskQuery
	withPrograms            *ProgramQuery
	withFKs                 bool
	loadTotal               []func(context.Context, []*Procedure) error
	modifiers               []func(*sql.Selector)
	withNamedControl        map[string]*ControlQuery
	withNamedInternalpolicy map[string]*InternalPolicyQuery
	withNamedNarratives     map[string]*NarrativeQuery
	withNamedRisks          map[string]*RiskQuery
	withNamedTasks          map[string]*TaskQuery
	withNamedPrograms       map[string]*ProgramQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ProcedureQuery builder.
func (pq *ProcedureQuery) Where(ps ...predicate.Procedure) *ProcedureQuery {
	pq.predicates = append(pq.predicates, ps...)
	return pq
}

// Limit the number of records to be returned by this query.
func (pq *ProcedureQuery) Limit(limit int) *ProcedureQuery {
	pq.ctx.Limit = &limit
	return pq
}

// Offset to start from.
func (pq *ProcedureQuery) Offset(offset int) *ProcedureQuery {
	pq.ctx.Offset = &offset
	return pq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pq *ProcedureQuery) Unique(unique bool) *ProcedureQuery {
	pq.ctx.Unique = &unique
	return pq
}

// Order specifies how the records should be ordered.
func (pq *ProcedureQuery) Order(o ...procedure.OrderOption) *ProcedureQuery {
	pq.order = append(pq.order, o...)
	return pq
}

// QueryControl chains the current query on the "control" edge.
func (pq *ProcedureQuery) QueryControl() *ControlQuery {
	query := (&ControlClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, procedure.ControlTable, procedure.ControlPrimaryKey...),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlProcedures
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalpolicy chains the current query on the "internalpolicy" edge.
func (pq *ProcedureQuery) QueryInternalpolicy() *InternalPolicyQuery {
	query := (&InternalPolicyClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(internalpolicy.Table, internalpolicy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, procedure.InternalpolicyTable, procedure.InternalpolicyPrimaryKey...),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.InternalPolicy
		step.Edge.Schema = schemaConfig.InternalPolicyProcedures
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNarratives chains the current query on the "narratives" edge.
func (pq *ProcedureQuery) QueryNarratives() *NarrativeQuery {
	query := (&NarrativeClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(narrative.Table, narrative.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, procedure.NarrativesTable, procedure.NarrativesPrimaryKey...),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.ProcedureNarratives
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRisks chains the current query on the "risks" edge.
func (pq *ProcedureQuery) QueryRisks() *RiskQuery {
	query := (&RiskClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, procedure.RisksTable, procedure.RisksPrimaryKey...),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.ProcedureRisks
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (pq *ProcedureQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, procedure.TasksTable, procedure.TasksPrimaryKey...),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.ProcedureTasks
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrograms chains the current query on the "programs" edge.
func (pq *ProcedureQuery) QueryPrograms() *ProgramQuery {
	query := (&ProgramClient{config: pq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(procedure.Table, procedure.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, procedure.ProgramsTable, procedure.ProgramsPrimaryKey...),
		)
		schemaConfig := pq.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramProcedures
		fromU = sqlgraph.SetNeighbors(pq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Procedure entity from the query.
// Returns a *NotFoundError when no Procedure was found.
func (pq *ProcedureQuery) First(ctx context.Context) (*Procedure, error) {
	nodes, err := pq.Limit(1).All(setContextOp(ctx, pq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{procedure.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pq *ProcedureQuery) FirstX(ctx context.Context) *Procedure {
	node, err := pq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Procedure ID from the query.
// Returns a *NotFoundError when no Procedure ID was found.
func (pq *ProcedureQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pq.Limit(1).IDs(setContextOp(ctx, pq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{procedure.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pq *ProcedureQuery) FirstIDX(ctx context.Context) string {
	id, err := pq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Procedure entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Procedure entity is found.
// Returns a *NotFoundError when no Procedure entities are found.
func (pq *ProcedureQuery) Only(ctx context.Context) (*Procedure, error) {
	nodes, err := pq.Limit(2).All(setContextOp(ctx, pq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{procedure.Label}
	default:
		return nil, &NotSingularError{procedure.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pq *ProcedureQuery) OnlyX(ctx context.Context) *Procedure {
	node, err := pq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Procedure ID in the query.
// Returns a *NotSingularError when more than one Procedure ID is found.
// Returns a *NotFoundError when no entities are found.
func (pq *ProcedureQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pq.Limit(2).IDs(setContextOp(ctx, pq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{procedure.Label}
	default:
		err = &NotSingularError{procedure.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pq *ProcedureQuery) OnlyIDX(ctx context.Context) string {
	id, err := pq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Procedures.
func (pq *ProcedureQuery) All(ctx context.Context) ([]*Procedure, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryAll)
	if err := pq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Procedure, *ProcedureQuery]()
	return withInterceptors[[]*Procedure](ctx, pq, qr, pq.inters)
}

// AllX is like All, but panics if an error occurs.
func (pq *ProcedureQuery) AllX(ctx context.Context) []*Procedure {
	nodes, err := pq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Procedure IDs.
func (pq *ProcedureQuery) IDs(ctx context.Context) (ids []string, err error) {
	if pq.ctx.Unique == nil && pq.path != nil {
		pq.Unique(true)
	}
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryIDs)
	if err = pq.Select(procedure.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pq *ProcedureQuery) IDsX(ctx context.Context) []string {
	ids, err := pq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pq *ProcedureQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryCount)
	if err := pq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, pq, querierCount[*ProcedureQuery](), pq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (pq *ProcedureQuery) CountX(ctx context.Context) int {
	count, err := pq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pq *ProcedureQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, pq.ctx, ent.OpQueryExist)
	switch _, err := pq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (pq *ProcedureQuery) ExistX(ctx context.Context) bool {
	exist, err := pq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ProcedureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pq *ProcedureQuery) Clone() *ProcedureQuery {
	if pq == nil {
		return nil
	}
	return &ProcedureQuery{
		config:             pq.config,
		ctx:                pq.ctx.Clone(),
		order:              append([]procedure.OrderOption{}, pq.order...),
		inters:             append([]Interceptor{}, pq.inters...),
		predicates:         append([]predicate.Procedure{}, pq.predicates...),
		withControl:        pq.withControl.Clone(),
		withInternalpolicy: pq.withInternalpolicy.Clone(),
		withNarratives:     pq.withNarratives.Clone(),
		withRisks:          pq.withRisks.Clone(),
		withTasks:          pq.withTasks.Clone(),
		withPrograms:       pq.withPrograms.Clone(),
		// clone intermediate query.
		sql:       pq.sql.Clone(),
		path:      pq.path,
		modifiers: append([]func(*sql.Selector){}, pq.modifiers...),
	}
}

// WithControl tells the query-builder to eager-load the nodes that are connected to
// the "control" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProcedureQuery) WithControl(opts ...func(*ControlQuery)) *ProcedureQuery {
	query := (&ControlClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withControl = query
	return pq
}

// WithInternalpolicy tells the query-builder to eager-load the nodes that are connected to
// the "internalpolicy" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProcedureQuery) WithInternalpolicy(opts ...func(*InternalPolicyQuery)) *ProcedureQuery {
	query := (&InternalPolicyClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withInternalpolicy = query
	return pq
}

// WithNarratives tells the query-builder to eager-load the nodes that are connected to
// the "narratives" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProcedureQuery) WithNarratives(opts ...func(*NarrativeQuery)) *ProcedureQuery {
	query := (&NarrativeClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withNarratives = query
	return pq
}

// WithRisks tells the query-builder to eager-load the nodes that are connected to
// the "risks" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProcedureQuery) WithRisks(opts ...func(*RiskQuery)) *ProcedureQuery {
	query := (&RiskClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withRisks = query
	return pq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProcedureQuery) WithTasks(opts ...func(*TaskQuery)) *ProcedureQuery {
	query := (&TaskClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withTasks = query
	return pq
}

// WithPrograms tells the query-builder to eager-load the nodes that are connected to
// the "programs" edge. The optional arguments are used to configure the query builder of the edge.
func (pq *ProcedureQuery) WithPrograms(opts ...func(*ProgramQuery)) *ProcedureQuery {
	query := (&ProgramClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	pq.withPrograms = query
	return pq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Procedure.Query().
//		GroupBy(procedure.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (pq *ProcedureQuery) GroupBy(field string, fields ...string) *ProcedureGroupBy {
	pq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ProcedureGroupBy{build: pq}
	grbuild.flds = &pq.ctx.Fields
	grbuild.label = procedure.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Procedure.Query().
//		Select(procedure.FieldCreatedAt).
//		Scan(ctx, &v)
func (pq *ProcedureQuery) Select(fields ...string) *ProcedureSelect {
	pq.ctx.Fields = append(pq.ctx.Fields, fields...)
	sbuild := &ProcedureSelect{ProcedureQuery: pq}
	sbuild.label = procedure.Label
	sbuild.flds, sbuild.scan = &pq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ProcedureSelect configured with the given aggregations.
func (pq *ProcedureQuery) Aggregate(fns ...AggregateFunc) *ProcedureSelect {
	return pq.Select().Aggregate(fns...)
}

func (pq *ProcedureQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range pq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, pq); err != nil {
				return err
			}
		}
	}
	for _, f := range pq.ctx.Fields {
		if !procedure.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if pq.path != nil {
		prev, err := pq.path(ctx)
		if err != nil {
			return err
		}
		pq.sql = prev
	}
	return nil
}

func (pq *ProcedureQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Procedure, error) {
	var (
		nodes       = []*Procedure{}
		withFKs     = pq.withFKs
		_spec       = pq.querySpec()
		loadedTypes = [6]bool{
			pq.withControl != nil,
			pq.withInternalpolicy != nil,
			pq.withNarratives != nil,
			pq.withRisks != nil,
			pq.withTasks != nil,
			pq.withPrograms != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, procedure.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Procedure).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Procedure{config: pq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = pq.schemaConfig.Procedure
	ctx = internal.NewSchemaConfigContext(ctx, pq.schemaConfig)
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, pq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := pq.withControl; query != nil {
		if err := pq.loadControl(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Control = []*Control{} },
			func(n *Procedure, e *Control) { n.Edges.Control = append(n.Edges.Control, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withInternalpolicy; query != nil {
		if err := pq.loadInternalpolicy(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Internalpolicy = []*InternalPolicy{} },
			func(n *Procedure, e *InternalPolicy) { n.Edges.Internalpolicy = append(n.Edges.Internalpolicy, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withNarratives; query != nil {
		if err := pq.loadNarratives(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Narratives = []*Narrative{} },
			func(n *Procedure, e *Narrative) { n.Edges.Narratives = append(n.Edges.Narratives, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withRisks; query != nil {
		if err := pq.loadRisks(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Risks = []*Risk{} },
			func(n *Procedure, e *Risk) { n.Edges.Risks = append(n.Edges.Risks, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withTasks; query != nil {
		if err := pq.loadTasks(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Tasks = []*Task{} },
			func(n *Procedure, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := pq.withPrograms; query != nil {
		if err := pq.loadPrograms(ctx, query, nodes,
			func(n *Procedure) { n.Edges.Programs = []*Program{} },
			func(n *Procedure, e *Program) { n.Edges.Programs = append(n.Edges.Programs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedControl {
		if err := pq.loadControl(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedControl(name) },
			func(n *Procedure, e *Control) { n.appendNamedControl(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedInternalpolicy {
		if err := pq.loadInternalpolicy(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedInternalpolicy(name) },
			func(n *Procedure, e *InternalPolicy) { n.appendNamedInternalpolicy(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedNarratives {
		if err := pq.loadNarratives(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedNarratives(name) },
			func(n *Procedure, e *Narrative) { n.appendNamedNarratives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedRisks {
		if err := pq.loadRisks(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedRisks(name) },
			func(n *Procedure, e *Risk) { n.appendNamedRisks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedTasks {
		if err := pq.loadTasks(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedTasks(name) },
			func(n *Procedure, e *Task) { n.appendNamedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range pq.withNamedPrograms {
		if err := pq.loadPrograms(ctx, query, nodes,
			func(n *Procedure) { n.appendNamedPrograms(name) },
			func(n *Procedure, e *Program) { n.appendNamedPrograms(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range pq.loadTotal {
		if err := pq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (pq *ProcedureQuery) loadControl(ctx context.Context, query *ControlQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.ControlTable)
		joinT.Schema(pq.schemaConfig.ControlProcedures)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(procedure.ControlPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(procedure.ControlPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.ControlPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *ProcedureQuery) loadInternalpolicy(ctx context.Context, query *InternalPolicyQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *InternalPolicy)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.InternalpolicyTable)
		joinT.Schema(pq.schemaConfig.InternalPolicyProcedures)
		s.Join(joinT).On(s.C(internalpolicy.FieldID), joinT.C(procedure.InternalpolicyPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(procedure.InternalpolicyPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.InternalpolicyPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*InternalPolicy](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "internalpolicy" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *ProcedureQuery) loadNarratives(ctx context.Context, query *NarrativeQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Narrative)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.NarrativesTable)
		joinT.Schema(pq.schemaConfig.ProcedureNarratives)
		s.Join(joinT).On(s.C(narrative.FieldID), joinT.C(procedure.NarrativesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(procedure.NarrativesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.NarrativesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Narrative](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "narratives" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *ProcedureQuery) loadRisks(ctx context.Context, query *RiskQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Risk)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.RisksTable)
		joinT.Schema(pq.schemaConfig.ProcedureRisks)
		s.Join(joinT).On(s.C(risk.FieldID), joinT.C(procedure.RisksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(procedure.RisksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.RisksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Risk](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "risks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *ProcedureQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.TasksTable)
		joinT.Schema(pq.schemaConfig.ProcedureTasks)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(procedure.TasksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(procedure.TasksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.TasksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tasks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (pq *ProcedureQuery) loadPrograms(ctx context.Context, query *ProgramQuery, nodes []*Procedure, init func(*Procedure), assign func(*Procedure, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Procedure)
	nids := make(map[string]map[*Procedure]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(procedure.ProgramsTable)
		joinT.Schema(pq.schemaConfig.ProgramProcedures)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(procedure.ProgramsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(procedure.ProgramsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(procedure.ProgramsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Procedure]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "programs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (pq *ProcedureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pq.querySpec()
	_spec.Node.Schema = pq.schemaConfig.Procedure
	ctx = internal.NewSchemaConfigContext(ctx, pq.schemaConfig)
	if len(pq.modifiers) > 0 {
		_spec.Modifiers = pq.modifiers
	}
	_spec.Node.Columns = pq.ctx.Fields
	if len(pq.ctx.Fields) > 0 {
		_spec.Unique = pq.ctx.Unique != nil && *pq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, pq.driver, _spec)
}

func (pq *ProcedureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(procedure.Table, procedure.Columns, sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString))
	_spec.From = pq.sql
	if unique := pq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if pq.path != nil {
		_spec.Unique = true
	}
	if fields := pq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, procedure.FieldID)
		for i := range fields {
			if fields[i] != procedure.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pq *ProcedureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pq.driver.Dialect())
	t1 := builder.Table(procedure.Table)
	columns := pq.ctx.Fields
	if len(columns) == 0 {
		columns = procedure.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pq.sql != nil {
		selector = pq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pq.ctx.Unique != nil && *pq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(pq.schemaConfig.Procedure)
	ctx = internal.NewSchemaConfigContext(ctx, pq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range pq.modifiers {
		m(selector)
	}
	for _, p := range pq.predicates {
		p(selector)
	}
	for _, p := range pq.order {
		p(selector)
	}
	if offset := pq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (pq *ProcedureQuery) Modify(modifiers ...func(s *sql.Selector)) *ProcedureSelect {
	pq.modifiers = append(pq.modifiers, modifiers...)
	return pq.Select()
}

// WithNamedControl tells the query-builder to eager-load the nodes that are connected to the "control"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProcedureQuery) WithNamedControl(name string, opts ...func(*ControlQuery)) *ProcedureQuery {
	query := (&ControlClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedControl == nil {
		pq.withNamedControl = make(map[string]*ControlQuery)
	}
	pq.withNamedControl[name] = query
	return pq
}

// WithNamedInternalpolicy tells the query-builder to eager-load the nodes that are connected to the "internalpolicy"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProcedureQuery) WithNamedInternalpolicy(name string, opts ...func(*InternalPolicyQuery)) *ProcedureQuery {
	query := (&InternalPolicyClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedInternalpolicy == nil {
		pq.withNamedInternalpolicy = make(map[string]*InternalPolicyQuery)
	}
	pq.withNamedInternalpolicy[name] = query
	return pq
}

// WithNamedNarratives tells the query-builder to eager-load the nodes that are connected to the "narratives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProcedureQuery) WithNamedNarratives(name string, opts ...func(*NarrativeQuery)) *ProcedureQuery {
	query := (&NarrativeClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedNarratives == nil {
		pq.withNamedNarratives = make(map[string]*NarrativeQuery)
	}
	pq.withNamedNarratives[name] = query
	return pq
}

// WithNamedRisks tells the query-builder to eager-load the nodes that are connected to the "risks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProcedureQuery) WithNamedRisks(name string, opts ...func(*RiskQuery)) *ProcedureQuery {
	query := (&RiskClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedRisks == nil {
		pq.withNamedRisks = make(map[string]*RiskQuery)
	}
	pq.withNamedRisks[name] = query
	return pq
}

// WithNamedTasks tells the query-builder to eager-load the nodes that are connected to the "tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProcedureQuery) WithNamedTasks(name string, opts ...func(*TaskQuery)) *ProcedureQuery {
	query := (&TaskClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedTasks == nil {
		pq.withNamedTasks = make(map[string]*TaskQuery)
	}
	pq.withNamedTasks[name] = query
	return pq
}

// WithNamedPrograms tells the query-builder to eager-load the nodes that are connected to the "programs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (pq *ProcedureQuery) WithNamedPrograms(name string, opts ...func(*ProgramQuery)) *ProcedureQuery {
	query := (&ProgramClient{config: pq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if pq.withNamedPrograms == nil {
		pq.withNamedPrograms = make(map[string]*ProgramQuery)
	}
	pq.withNamedPrograms[name] = query
	return pq
}

// ProcedureGroupBy is the group-by builder for Procedure entities.
type ProcedureGroupBy struct {
	selector
	build *ProcedureQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pgb *ProcedureGroupBy) Aggregate(fns ...AggregateFunc) *ProcedureGroupBy {
	pgb.fns = append(pgb.fns, fns...)
	return pgb
}

// Scan applies the selector query and scans the result into the given value.
func (pgb *ProcedureGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, pgb.build.ctx, ent.OpQueryGroupBy)
	if err := pgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProcedureQuery, *ProcedureGroupBy](ctx, pgb.build, pgb, pgb.build.inters, v)
}

func (pgb *ProcedureGroupBy) sqlScan(ctx context.Context, root *ProcedureQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(pgb.fns))
	for _, fn := range pgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*pgb.flds)+len(pgb.fns))
		for _, f := range *pgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*pgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ProcedureSelect is the builder for selecting fields of Procedure entities.
type ProcedureSelect struct {
	*ProcedureQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ps *ProcedureSelect) Aggregate(fns ...AggregateFunc) *ProcedureSelect {
	ps.fns = append(ps.fns, fns...)
	return ps
}

// Scan applies the selector query and scans the result into the given value.
func (ps *ProcedureSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ps.ctx, ent.OpQuerySelect)
	if err := ps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ProcedureQuery, *ProcedureSelect](ctx, ps.ProcedureQuery, ps, ps.inters, v)
}

func (ps *ProcedureSelect) sqlScan(ctx context.Context, root *ProcedureQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ps.fns))
	for _, fn := range ps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ps *ProcedureSelect) Modify(modifiers ...func(s *sql.Selector)) *ProcedureSelect {
	ps.modifiers = append(ps.modifiers, modifiers...)
	return ps
}
