// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessor"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterSubprocessorQuery is the builder for querying TrustCenterSubprocessor entities.
type TrustCenterSubprocessorQuery struct {
	config
	ctx              *QueryContext
	order            []trustcentersubprocessor.OrderOption
	inters           []Interceptor
	predicates       []predicate.TrustCenterSubprocessor
	withTrustCenter  *TrustCenterQuery
	withSubprocessor *SubprocessorQuery
	loadTotal        []func(context.Context, []*TrustCenterSubprocessor) error
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TrustCenterSubprocessorQuery builder.
func (tcsq *TrustCenterSubprocessorQuery) Where(ps ...predicate.TrustCenterSubprocessor) *TrustCenterSubprocessorQuery {
	tcsq.predicates = append(tcsq.predicates, ps...)
	return tcsq
}

// Limit the number of records to be returned by this query.
func (tcsq *TrustCenterSubprocessorQuery) Limit(limit int) *TrustCenterSubprocessorQuery {
	tcsq.ctx.Limit = &limit
	return tcsq
}

// Offset to start from.
func (tcsq *TrustCenterSubprocessorQuery) Offset(offset int) *TrustCenterSubprocessorQuery {
	tcsq.ctx.Offset = &offset
	return tcsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tcsq *TrustCenterSubprocessorQuery) Unique(unique bool) *TrustCenterSubprocessorQuery {
	tcsq.ctx.Unique = &unique
	return tcsq
}

// Order specifies how the records should be ordered.
func (tcsq *TrustCenterSubprocessorQuery) Order(o ...trustcentersubprocessor.OrderOption) *TrustCenterSubprocessorQuery {
	tcsq.order = append(tcsq.order, o...)
	return tcsq
}

// QueryTrustCenter chains the current query on the "trust_center" edge.
func (tcsq *TrustCenterSubprocessorQuery) QueryTrustCenter() *TrustCenterQuery {
	query := (&TrustCenterClient{config: tcsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trustcentersubprocessor.Table, trustcentersubprocessor.FieldID, selector),
			sqlgraph.To(trustcenter.Table, trustcenter.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trustcentersubprocessor.TrustCenterTable, trustcentersubprocessor.TrustCenterColumn),
		)
		schemaConfig := tcsq.schemaConfig
		step.To.Schema = schemaConfig.TrustCenter
		step.Edge.Schema = schemaConfig.TrustCenterSubprocessor
		fromU = sqlgraph.SetNeighbors(tcsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubprocessor chains the current query on the "subprocessor" edge.
func (tcsq *TrustCenterSubprocessorQuery) QuerySubprocessor() *SubprocessorQuery {
	query := (&SubprocessorClient{config: tcsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(trustcentersubprocessor.Table, trustcentersubprocessor.FieldID, selector),
			sqlgraph.To(subprocessor.Table, subprocessor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, trustcentersubprocessor.SubprocessorTable, trustcentersubprocessor.SubprocessorColumn),
		)
		schemaConfig := tcsq.schemaConfig
		step.To.Schema = schemaConfig.Subprocessor
		step.Edge.Schema = schemaConfig.TrustCenterSubprocessor
		fromU = sqlgraph.SetNeighbors(tcsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TrustCenterSubprocessor entity from the query.
// Returns a *NotFoundError when no TrustCenterSubprocessor was found.
func (tcsq *TrustCenterSubprocessorQuery) First(ctx context.Context) (*TrustCenterSubprocessor, error) {
	nodes, err := tcsq.Limit(1).All(setContextOp(ctx, tcsq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{trustcentersubprocessor.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tcsq *TrustCenterSubprocessorQuery) FirstX(ctx context.Context) *TrustCenterSubprocessor {
	node, err := tcsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TrustCenterSubprocessor ID from the query.
// Returns a *NotFoundError when no TrustCenterSubprocessor ID was found.
func (tcsq *TrustCenterSubprocessorQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tcsq.Limit(1).IDs(setContextOp(ctx, tcsq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{trustcentersubprocessor.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tcsq *TrustCenterSubprocessorQuery) FirstIDX(ctx context.Context) string {
	id, err := tcsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TrustCenterSubprocessor entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TrustCenterSubprocessor entity is found.
// Returns a *NotFoundError when no TrustCenterSubprocessor entities are found.
func (tcsq *TrustCenterSubprocessorQuery) Only(ctx context.Context) (*TrustCenterSubprocessor, error) {
	nodes, err := tcsq.Limit(2).All(setContextOp(ctx, tcsq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{trustcentersubprocessor.Label}
	default:
		return nil, &NotSingularError{trustcentersubprocessor.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tcsq *TrustCenterSubprocessorQuery) OnlyX(ctx context.Context) *TrustCenterSubprocessor {
	node, err := tcsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TrustCenterSubprocessor ID in the query.
// Returns a *NotSingularError when more than one TrustCenterSubprocessor ID is found.
// Returns a *NotFoundError when no entities are found.
func (tcsq *TrustCenterSubprocessorQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tcsq.Limit(2).IDs(setContextOp(ctx, tcsq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{trustcentersubprocessor.Label}
	default:
		err = &NotSingularError{trustcentersubprocessor.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tcsq *TrustCenterSubprocessorQuery) OnlyIDX(ctx context.Context) string {
	id, err := tcsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TrustCenterSubprocessors.
func (tcsq *TrustCenterSubprocessorQuery) All(ctx context.Context) ([]*TrustCenterSubprocessor, error) {
	ctx = setContextOp(ctx, tcsq.ctx, ent.OpQueryAll)
	if err := tcsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TrustCenterSubprocessor, *TrustCenterSubprocessorQuery]()
	return withInterceptors[[]*TrustCenterSubprocessor](ctx, tcsq, qr, tcsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tcsq *TrustCenterSubprocessorQuery) AllX(ctx context.Context) []*TrustCenterSubprocessor {
	nodes, err := tcsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TrustCenterSubprocessor IDs.
func (tcsq *TrustCenterSubprocessorQuery) IDs(ctx context.Context) (ids []string, err error) {
	if tcsq.ctx.Unique == nil && tcsq.path != nil {
		tcsq.Unique(true)
	}
	ctx = setContextOp(ctx, tcsq.ctx, ent.OpQueryIDs)
	if err = tcsq.Select(trustcentersubprocessor.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tcsq *TrustCenterSubprocessorQuery) IDsX(ctx context.Context) []string {
	ids, err := tcsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tcsq *TrustCenterSubprocessorQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tcsq.ctx, ent.OpQueryCount)
	if err := tcsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tcsq, querierCount[*TrustCenterSubprocessorQuery](), tcsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tcsq *TrustCenterSubprocessorQuery) CountX(ctx context.Context) int {
	count, err := tcsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tcsq *TrustCenterSubprocessorQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tcsq.ctx, ent.OpQueryExist)
	switch _, err := tcsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tcsq *TrustCenterSubprocessorQuery) ExistX(ctx context.Context) bool {
	exist, err := tcsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TrustCenterSubprocessorQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tcsq *TrustCenterSubprocessorQuery) Clone() *TrustCenterSubprocessorQuery {
	if tcsq == nil {
		return nil
	}
	return &TrustCenterSubprocessorQuery{
		config:           tcsq.config,
		ctx:              tcsq.ctx.Clone(),
		order:            append([]trustcentersubprocessor.OrderOption{}, tcsq.order...),
		inters:           append([]Interceptor{}, tcsq.inters...),
		predicates:       append([]predicate.TrustCenterSubprocessor{}, tcsq.predicates...),
		withTrustCenter:  tcsq.withTrustCenter.Clone(),
		withSubprocessor: tcsq.withSubprocessor.Clone(),
		// clone intermediate query.
		sql:       tcsq.sql.Clone(),
		path:      tcsq.path,
		modifiers: append([]func(*sql.Selector){}, tcsq.modifiers...),
	}
}

// WithTrustCenter tells the query-builder to eager-load the nodes that are connected to
// the "trust_center" edge. The optional arguments are used to configure the query builder of the edge.
func (tcsq *TrustCenterSubprocessorQuery) WithTrustCenter(opts ...func(*TrustCenterQuery)) *TrustCenterSubprocessorQuery {
	query := (&TrustCenterClient{config: tcsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcsq.withTrustCenter = query
	return tcsq
}

// WithSubprocessor tells the query-builder to eager-load the nodes that are connected to
// the "subprocessor" edge. The optional arguments are used to configure the query builder of the edge.
func (tcsq *TrustCenterSubprocessorQuery) WithSubprocessor(opts ...func(*SubprocessorQuery)) *TrustCenterSubprocessorQuery {
	query := (&SubprocessorClient{config: tcsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcsq.withSubprocessor = query
	return tcsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TrustCenterSubprocessor.Query().
//		GroupBy(trustcentersubprocessor.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (tcsq *TrustCenterSubprocessorQuery) GroupBy(field string, fields ...string) *TrustCenterSubprocessorGroupBy {
	tcsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TrustCenterSubprocessorGroupBy{build: tcsq}
	grbuild.flds = &tcsq.ctx.Fields
	grbuild.label = trustcentersubprocessor.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.TrustCenterSubprocessor.Query().
//		Select(trustcentersubprocessor.FieldCreatedAt).
//		Scan(ctx, &v)
func (tcsq *TrustCenterSubprocessorQuery) Select(fields ...string) *TrustCenterSubprocessorSelect {
	tcsq.ctx.Fields = append(tcsq.ctx.Fields, fields...)
	sbuild := &TrustCenterSubprocessorSelect{TrustCenterSubprocessorQuery: tcsq}
	sbuild.label = trustcentersubprocessor.Label
	sbuild.flds, sbuild.scan = &tcsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TrustCenterSubprocessorSelect configured with the given aggregations.
func (tcsq *TrustCenterSubprocessorQuery) Aggregate(fns ...AggregateFunc) *TrustCenterSubprocessorSelect {
	return tcsq.Select().Aggregate(fns...)
}

func (tcsq *TrustCenterSubprocessorQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tcsq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tcsq); err != nil {
				return err
			}
		}
	}
	for _, f := range tcsq.ctx.Fields {
		if !trustcentersubprocessor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if tcsq.path != nil {
		prev, err := tcsq.path(ctx)
		if err != nil {
			return err
		}
		tcsq.sql = prev
	}
	if trustcentersubprocessor.Policy == nil {
		return errors.New("generated: uninitialized trustcentersubprocessor.Policy (forgotten import generated/runtime?)")
	}
	if err := trustcentersubprocessor.Policy.EvalQuery(ctx, tcsq); err != nil {
		return err
	}
	return nil
}

func (tcsq *TrustCenterSubprocessorQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TrustCenterSubprocessor, error) {
	var (
		nodes       = []*TrustCenterSubprocessor{}
		_spec       = tcsq.querySpec()
		loadedTypes = [2]bool{
			tcsq.withTrustCenter != nil,
			tcsq.withSubprocessor != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TrustCenterSubprocessor).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TrustCenterSubprocessor{config: tcsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = tcsq.schemaConfig.TrustCenterSubprocessor
	ctx = internal.NewSchemaConfigContext(ctx, tcsq.schemaConfig)
	if len(tcsq.modifiers) > 0 {
		_spec.Modifiers = tcsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tcsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tcsq.withTrustCenter; query != nil {
		if err := tcsq.loadTrustCenter(ctx, query, nodes, nil,
			func(n *TrustCenterSubprocessor, e *TrustCenter) { n.Edges.TrustCenter = e }); err != nil {
			return nil, err
		}
	}
	if query := tcsq.withSubprocessor; query != nil {
		if err := tcsq.loadSubprocessor(ctx, query, nodes, nil,
			func(n *TrustCenterSubprocessor, e *Subprocessor) { n.Edges.Subprocessor = e }); err != nil {
			return nil, err
		}
	}
	for i := range tcsq.loadTotal {
		if err := tcsq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tcsq *TrustCenterSubprocessorQuery) loadTrustCenter(ctx context.Context, query *TrustCenterQuery, nodes []*TrustCenterSubprocessor, init func(*TrustCenterSubprocessor), assign func(*TrustCenterSubprocessor, *TrustCenter)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*TrustCenterSubprocessor)
	for i := range nodes {
		fk := nodes[i].TrustCenterID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(trustcenter.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "trust_center_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tcsq *TrustCenterSubprocessorQuery) loadSubprocessor(ctx context.Context, query *SubprocessorQuery, nodes []*TrustCenterSubprocessor, init func(*TrustCenterSubprocessor), assign func(*TrustCenterSubprocessor, *Subprocessor)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*TrustCenterSubprocessor)
	for i := range nodes {
		fk := nodes[i].SubprocessorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subprocessor.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subprocessor_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tcsq *TrustCenterSubprocessorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tcsq.querySpec()
	_spec.Node.Schema = tcsq.schemaConfig.TrustCenterSubprocessor
	ctx = internal.NewSchemaConfigContext(ctx, tcsq.schemaConfig)
	if len(tcsq.modifiers) > 0 {
		_spec.Modifiers = tcsq.modifiers
	}
	_spec.Node.Columns = tcsq.ctx.Fields
	if len(tcsq.ctx.Fields) > 0 {
		_spec.Unique = tcsq.ctx.Unique != nil && *tcsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tcsq.driver, _spec)
}

func (tcsq *TrustCenterSubprocessorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(trustcentersubprocessor.Table, trustcentersubprocessor.Columns, sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString))
	_spec.From = tcsq.sql
	if unique := tcsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tcsq.path != nil {
		_spec.Unique = true
	}
	if fields := tcsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcentersubprocessor.FieldID)
		for i := range fields {
			if fields[i] != trustcentersubprocessor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tcsq.withTrustCenter != nil {
			_spec.Node.AddColumnOnce(trustcentersubprocessor.FieldTrustCenterID)
		}
		if tcsq.withSubprocessor != nil {
			_spec.Node.AddColumnOnce(trustcentersubprocessor.FieldSubprocessorID)
		}
	}
	if ps := tcsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tcsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tcsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tcsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tcsq *TrustCenterSubprocessorQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tcsq.driver.Dialect())
	t1 := builder.Table(trustcentersubprocessor.Table)
	columns := tcsq.ctx.Fields
	if len(columns) == 0 {
		columns = trustcentersubprocessor.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tcsq.sql != nil {
		selector = tcsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tcsq.ctx.Unique != nil && *tcsq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(tcsq.schemaConfig.TrustCenterSubprocessor)
	ctx = internal.NewSchemaConfigContext(ctx, tcsq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range tcsq.modifiers {
		m(selector)
	}
	for _, p := range tcsq.predicates {
		p(selector)
	}
	for _, p := range tcsq.order {
		p(selector)
	}
	if offset := tcsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tcsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tcsq *TrustCenterSubprocessorQuery) Modify(modifiers ...func(s *sql.Selector)) *TrustCenterSubprocessorSelect {
	tcsq.modifiers = append(tcsq.modifiers, modifiers...)
	return tcsq.Select()
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (tcsq *TrustCenterSubprocessorQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tcsq.ctx, ent.OpQueryIDs)
	if err := tcsq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return tcsq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, tcsq, qr, tcsq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// TrustCenterSubprocessorGroupBy is the group-by builder for TrustCenterSubprocessor entities.
type TrustCenterSubprocessorGroupBy struct {
	selector
	build *TrustCenterSubprocessorQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tcsgb *TrustCenterSubprocessorGroupBy) Aggregate(fns ...AggregateFunc) *TrustCenterSubprocessorGroupBy {
	tcsgb.fns = append(tcsgb.fns, fns...)
	return tcsgb
}

// Scan applies the selector query and scans the result into the given value.
func (tcsgb *TrustCenterSubprocessorGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcsgb.build.ctx, ent.OpQueryGroupBy)
	if err := tcsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TrustCenterSubprocessorQuery, *TrustCenterSubprocessorGroupBy](ctx, tcsgb.build, tcsgb, tcsgb.build.inters, v)
}

func (tcsgb *TrustCenterSubprocessorGroupBy) sqlScan(ctx context.Context, root *TrustCenterSubprocessorQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tcsgb.fns))
	for _, fn := range tcsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tcsgb.flds)+len(tcsgb.fns))
		for _, f := range *tcsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tcsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TrustCenterSubprocessorSelect is the builder for selecting fields of TrustCenterSubprocessor entities.
type TrustCenterSubprocessorSelect struct {
	*TrustCenterSubprocessorQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tcss *TrustCenterSubprocessorSelect) Aggregate(fns ...AggregateFunc) *TrustCenterSubprocessorSelect {
	tcss.fns = append(tcss.fns, fns...)
	return tcss
}

// Scan applies the selector query and scans the result into the given value.
func (tcss *TrustCenterSubprocessorSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcss.ctx, ent.OpQuerySelect)
	if err := tcss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TrustCenterSubprocessorQuery, *TrustCenterSubprocessorSelect](ctx, tcss.TrustCenterSubprocessorQuery, tcss, tcss.inters, v)
}

func (tcss *TrustCenterSubprocessorSelect) sqlScan(ctx context.Context, root *TrustCenterSubprocessorQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tcss.fns))
	for _, fn := range tcss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tcss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tcss *TrustCenterSubprocessorSelect) Modify(modifiers ...func(s *sql.Selector)) *TrustCenterSubprocessorSelect {
	tcss.modifiers = append(tcss.modifiers, modifiers...)
	return tcss
}
