// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeaturehistory"
	"github.com/theopenlane/entx/history"
)

// EntitlementPlanFeatureHistoryCreate is the builder for creating a EntitlementPlanFeatureHistory entity.
type EntitlementPlanFeatureHistoryCreate struct {
	config
	mutation *EntitlementPlanFeatureHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetHistoryTime(t time.Time) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetHistoryTime(t)
	return epfhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableHistoryTime(t *time.Time) *EntitlementPlanFeatureHistoryCreate {
	if t != nil {
		epfhc.SetHistoryTime(*t)
	}
	return epfhc
}

// SetRef sets the "ref" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetRef(s string) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetRef(s)
	return epfhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableRef(s *string) *EntitlementPlanFeatureHistoryCreate {
	if s != nil {
		epfhc.SetRef(*s)
	}
	return epfhc
}

// SetOperation sets the "operation" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetOperation(ht history.OpType) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetOperation(ht)
	return epfhc
}

// SetCreatedAt sets the "created_at" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetCreatedAt(t time.Time) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetCreatedAt(t)
	return epfhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableCreatedAt(t *time.Time) *EntitlementPlanFeatureHistoryCreate {
	if t != nil {
		epfhc.SetCreatedAt(*t)
	}
	return epfhc
}

// SetUpdatedAt sets the "updated_at" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetUpdatedAt(t time.Time) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetUpdatedAt(t)
	return epfhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableUpdatedAt(t *time.Time) *EntitlementPlanFeatureHistoryCreate {
	if t != nil {
		epfhc.SetUpdatedAt(*t)
	}
	return epfhc
}

// SetCreatedBy sets the "created_by" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetCreatedBy(s string) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetCreatedBy(s)
	return epfhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableCreatedBy(s *string) *EntitlementPlanFeatureHistoryCreate {
	if s != nil {
		epfhc.SetCreatedBy(*s)
	}
	return epfhc
}

// SetUpdatedBy sets the "updated_by" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetUpdatedBy(s string) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetUpdatedBy(s)
	return epfhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableUpdatedBy(s *string) *EntitlementPlanFeatureHistoryCreate {
	if s != nil {
		epfhc.SetUpdatedBy(*s)
	}
	return epfhc
}

// SetMappingID sets the "mapping_id" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetMappingID(s string) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetMappingID(s)
	return epfhc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableMappingID(s *string) *EntitlementPlanFeatureHistoryCreate {
	if s != nil {
		epfhc.SetMappingID(*s)
	}
	return epfhc
}

// SetDeletedAt sets the "deleted_at" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetDeletedAt(t time.Time) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetDeletedAt(t)
	return epfhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableDeletedAt(t *time.Time) *EntitlementPlanFeatureHistoryCreate {
	if t != nil {
		epfhc.SetDeletedAt(*t)
	}
	return epfhc
}

// SetDeletedBy sets the "deleted_by" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetDeletedBy(s string) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetDeletedBy(s)
	return epfhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableDeletedBy(s *string) *EntitlementPlanFeatureHistoryCreate {
	if s != nil {
		epfhc.SetDeletedBy(*s)
	}
	return epfhc
}

// SetTags sets the "tags" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetTags(s []string) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetTags(s)
	return epfhc
}

// SetOwnerID sets the "owner_id" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetOwnerID(s string) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetOwnerID(s)
	return epfhc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableOwnerID(s *string) *EntitlementPlanFeatureHistoryCreate {
	if s != nil {
		epfhc.SetOwnerID(*s)
	}
	return epfhc
}

// SetMetadata sets the "metadata" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetMetadata(m map[string]interface{}) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetMetadata(m)
	return epfhc
}

// SetPlanID sets the "plan_id" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetPlanID(s string) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetPlanID(s)
	return epfhc
}

// SetStripeProductID sets the "stripe_product_id" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetStripeProductID(s string) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetStripeProductID(s)
	return epfhc
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableStripeProductID(s *string) *EntitlementPlanFeatureHistoryCreate {
	if s != nil {
		epfhc.SetStripeProductID(*s)
	}
	return epfhc
}

// SetFeatureID sets the "feature_id" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetFeatureID(s string) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetFeatureID(s)
	return epfhc
}

// SetStripeFeatureID sets the "stripe_feature_id" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetStripeFeatureID(s string) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetStripeFeatureID(s)
	return epfhc
}

// SetNillableStripeFeatureID sets the "stripe_feature_id" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableStripeFeatureID(s *string) *EntitlementPlanFeatureHistoryCreate {
	if s != nil {
		epfhc.SetStripeFeatureID(*s)
	}
	return epfhc
}

// SetID sets the "id" field.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetID(s string) *EntitlementPlanFeatureHistoryCreate {
	epfhc.mutation.SetID(s)
	return epfhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SetNillableID(s *string) *EntitlementPlanFeatureHistoryCreate {
	if s != nil {
		epfhc.SetID(*s)
	}
	return epfhc
}

// Mutation returns the EntitlementPlanFeatureHistoryMutation object of the builder.
func (epfhc *EntitlementPlanFeatureHistoryCreate) Mutation() *EntitlementPlanFeatureHistoryMutation {
	return epfhc.mutation
}

// Save creates the EntitlementPlanFeatureHistory in the database.
func (epfhc *EntitlementPlanFeatureHistoryCreate) Save(ctx context.Context) (*EntitlementPlanFeatureHistory, error) {
	if err := epfhc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, epfhc.sqlSave, epfhc.mutation, epfhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (epfhc *EntitlementPlanFeatureHistoryCreate) SaveX(ctx context.Context) *EntitlementPlanFeatureHistory {
	v, err := epfhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epfhc *EntitlementPlanFeatureHistoryCreate) Exec(ctx context.Context) error {
	_, err := epfhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epfhc *EntitlementPlanFeatureHistoryCreate) ExecX(ctx context.Context) {
	if err := epfhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epfhc *EntitlementPlanFeatureHistoryCreate) defaults() error {
	if _, ok := epfhc.mutation.HistoryTime(); !ok {
		if entitlementplanfeaturehistory.DefaultHistoryTime == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeaturehistory.DefaultHistoryTime (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeaturehistory.DefaultHistoryTime()
		epfhc.mutation.SetHistoryTime(v)
	}
	if _, ok := epfhc.mutation.CreatedAt(); !ok {
		if entitlementplanfeaturehistory.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeaturehistory.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeaturehistory.DefaultCreatedAt()
		epfhc.mutation.SetCreatedAt(v)
	}
	if _, ok := epfhc.mutation.UpdatedAt(); !ok {
		if entitlementplanfeaturehistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeaturehistory.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeaturehistory.DefaultUpdatedAt()
		epfhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := epfhc.mutation.MappingID(); !ok {
		if entitlementplanfeaturehistory.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeaturehistory.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeaturehistory.DefaultMappingID()
		epfhc.mutation.SetMappingID(v)
	}
	if _, ok := epfhc.mutation.Tags(); !ok {
		v := entitlementplanfeaturehistory.DefaultTags
		epfhc.mutation.SetTags(v)
	}
	if _, ok := epfhc.mutation.ID(); !ok {
		if entitlementplanfeaturehistory.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeaturehistory.DefaultID (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeaturehistory.DefaultID()
		epfhc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epfhc *EntitlementPlanFeatureHistoryCreate) check() error {
	if _, ok := epfhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "EntitlementPlanFeatureHistory.history_time"`)}
	}
	if _, ok := epfhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "EntitlementPlanFeatureHistory.operation"`)}
	}
	if v, ok := epfhc.mutation.Operation(); ok {
		if err := entitlementplanfeaturehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "EntitlementPlanFeatureHistory.operation": %w`, err)}
		}
	}
	if _, ok := epfhc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "EntitlementPlanFeatureHistory.mapping_id"`)}
	}
	if _, ok := epfhc.mutation.PlanID(); !ok {
		return &ValidationError{Name: "plan_id", err: errors.New(`generated: missing required field "EntitlementPlanFeatureHistory.plan_id"`)}
	}
	if _, ok := epfhc.mutation.FeatureID(); !ok {
		return &ValidationError{Name: "feature_id", err: errors.New(`generated: missing required field "EntitlementPlanFeatureHistory.feature_id"`)}
	}
	return nil
}

func (epfhc *EntitlementPlanFeatureHistoryCreate) sqlSave(ctx context.Context) (*EntitlementPlanFeatureHistory, error) {
	if err := epfhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := epfhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epfhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected EntitlementPlanFeatureHistory.ID type: %T", _spec.ID.Value)
		}
	}
	epfhc.mutation.id = &_node.ID
	epfhc.mutation.done = true
	return _node, nil
}

func (epfhc *EntitlementPlanFeatureHistoryCreate) createSpec() (*EntitlementPlanFeatureHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &EntitlementPlanFeatureHistory{config: epfhc.config}
		_spec = sqlgraph.NewCreateSpec(entitlementplanfeaturehistory.Table, sqlgraph.NewFieldSpec(entitlementplanfeaturehistory.FieldID, field.TypeString))
	)
	_spec.Schema = epfhc.schemaConfig.EntitlementPlanFeatureHistory
	if id, ok := epfhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := epfhc.mutation.HistoryTime(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := epfhc.mutation.Ref(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := epfhc.mutation.Operation(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := epfhc.mutation.CreatedAt(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := epfhc.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := epfhc.mutation.CreatedBy(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := epfhc.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := epfhc.mutation.MappingID(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := epfhc.mutation.DeletedAt(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := epfhc.mutation.DeletedBy(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := epfhc.mutation.Tags(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := epfhc.mutation.OwnerID(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := epfhc.mutation.Metadata(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := epfhc.mutation.PlanID(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldPlanID, field.TypeString, value)
		_node.PlanID = value
	}
	if value, ok := epfhc.mutation.StripeProductID(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldStripeProductID, field.TypeString, value)
		_node.StripeProductID = value
	}
	if value, ok := epfhc.mutation.FeatureID(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldFeatureID, field.TypeString, value)
		_node.FeatureID = value
	}
	if value, ok := epfhc.mutation.StripeFeatureID(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldStripeFeatureID, field.TypeString, value)
		_node.StripeFeatureID = value
	}
	return _node, _spec
}

// EntitlementPlanFeatureHistoryCreateBulk is the builder for creating many EntitlementPlanFeatureHistory entities in bulk.
type EntitlementPlanFeatureHistoryCreateBulk struct {
	config
	err      error
	builders []*EntitlementPlanFeatureHistoryCreate
}

// Save creates the EntitlementPlanFeatureHistory entities in the database.
func (epfhcb *EntitlementPlanFeatureHistoryCreateBulk) Save(ctx context.Context) ([]*EntitlementPlanFeatureHistory, error) {
	if epfhcb.err != nil {
		return nil, epfhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(epfhcb.builders))
	nodes := make([]*EntitlementPlanFeatureHistory, len(epfhcb.builders))
	mutators := make([]Mutator, len(epfhcb.builders))
	for i := range epfhcb.builders {
		func(i int, root context.Context) {
			builder := epfhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntitlementPlanFeatureHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epfhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epfhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epfhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (epfhcb *EntitlementPlanFeatureHistoryCreateBulk) SaveX(ctx context.Context) []*EntitlementPlanFeatureHistory {
	v, err := epfhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epfhcb *EntitlementPlanFeatureHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := epfhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epfhcb *EntitlementPlanFeatureHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := epfhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
