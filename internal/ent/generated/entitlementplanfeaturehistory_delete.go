// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeaturehistory"
	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
)

// EntitlementPlanFeatureHistoryDelete is the builder for deleting a EntitlementPlanFeatureHistory entity.
type EntitlementPlanFeatureHistoryDelete struct {
	config
	hooks    []Hook
	mutation *EntitlementPlanFeatureHistoryMutation
}

// Where appends a list predicates to the EntitlementPlanFeatureHistoryDelete builder.
func (epfhd *EntitlementPlanFeatureHistoryDelete) Where(ps ...predicate.EntitlementPlanFeatureHistory) *EntitlementPlanFeatureHistoryDelete {
	epfhd.mutation.Where(ps...)
	return epfhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (epfhd *EntitlementPlanFeatureHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, epfhd.sqlExec, epfhd.mutation, epfhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (epfhd *EntitlementPlanFeatureHistoryDelete) ExecX(ctx context.Context) int {
	n, err := epfhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (epfhd *EntitlementPlanFeatureHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(entitlementplanfeaturehistory.Table, sqlgraph.NewFieldSpec(entitlementplanfeaturehistory.FieldID, field.TypeString))
	_spec.Node.Schema = epfhd.schemaConfig.EntitlementPlanFeatureHistory
	ctx = internal.NewSchemaConfigContext(ctx, epfhd.schemaConfig)
	if ps := epfhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, epfhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	epfhd.mutation.done = true
	return affected, err
}

// EntitlementPlanFeatureHistoryDeleteOne is the builder for deleting a single EntitlementPlanFeatureHistory entity.
type EntitlementPlanFeatureHistoryDeleteOne struct {
	epfhd *EntitlementPlanFeatureHistoryDelete
}

// Where appends a list predicates to the EntitlementPlanFeatureHistoryDelete builder.
func (epfhdo *EntitlementPlanFeatureHistoryDeleteOne) Where(ps ...predicate.EntitlementPlanFeatureHistory) *EntitlementPlanFeatureHistoryDeleteOne {
	epfhdo.epfhd.mutation.Where(ps...)
	return epfhdo
}

// Exec executes the deletion query.
func (epfhdo *EntitlementPlanFeatureHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := epfhdo.epfhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{entitlementplanfeaturehistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (epfhdo *EntitlementPlanFeatureHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := epfhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
