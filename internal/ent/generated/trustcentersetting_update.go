// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterSettingUpdate is the builder for updating TrustCenterSetting entities.
type TrustCenterSettingUpdate struct {
	config
	hooks     []Hook
	mutation  *TrustCenterSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrustCenterSettingUpdate builder.
func (tcsu *TrustCenterSettingUpdate) Where(ps ...predicate.TrustCenterSetting) *TrustCenterSettingUpdate {
	tcsu.mutation.Where(ps...)
	return tcsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tcsu *TrustCenterSettingUpdate) SetUpdatedAt(t time.Time) *TrustCenterSettingUpdate {
	tcsu.mutation.SetUpdatedAt(t)
	return tcsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tcsu *TrustCenterSettingUpdate) ClearUpdatedAt() *TrustCenterSettingUpdate {
	tcsu.mutation.ClearUpdatedAt()
	return tcsu
}

// SetUpdatedBy sets the "updated_by" field.
func (tcsu *TrustCenterSettingUpdate) SetUpdatedBy(s string) *TrustCenterSettingUpdate {
	tcsu.mutation.SetUpdatedBy(s)
	return tcsu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcsu *TrustCenterSettingUpdate) SetNillableUpdatedBy(s *string) *TrustCenterSettingUpdate {
	if s != nil {
		tcsu.SetUpdatedBy(*s)
	}
	return tcsu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tcsu *TrustCenterSettingUpdate) ClearUpdatedBy() *TrustCenterSettingUpdate {
	tcsu.mutation.ClearUpdatedBy()
	return tcsu
}

// SetDeletedAt sets the "deleted_at" field.
func (tcsu *TrustCenterSettingUpdate) SetDeletedAt(t time.Time) *TrustCenterSettingUpdate {
	tcsu.mutation.SetDeletedAt(t)
	return tcsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcsu *TrustCenterSettingUpdate) SetNillableDeletedAt(t *time.Time) *TrustCenterSettingUpdate {
	if t != nil {
		tcsu.SetDeletedAt(*t)
	}
	return tcsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tcsu *TrustCenterSettingUpdate) ClearDeletedAt() *TrustCenterSettingUpdate {
	tcsu.mutation.ClearDeletedAt()
	return tcsu
}

// SetDeletedBy sets the "deleted_by" field.
func (tcsu *TrustCenterSettingUpdate) SetDeletedBy(s string) *TrustCenterSettingUpdate {
	tcsu.mutation.SetDeletedBy(s)
	return tcsu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcsu *TrustCenterSettingUpdate) SetNillableDeletedBy(s *string) *TrustCenterSettingUpdate {
	if s != nil {
		tcsu.SetDeletedBy(*s)
	}
	return tcsu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tcsu *TrustCenterSettingUpdate) ClearDeletedBy() *TrustCenterSettingUpdate {
	tcsu.mutation.ClearDeletedBy()
	return tcsu
}

// SetTrustCenterID sets the "trust_center_id" field.
func (tcsu *TrustCenterSettingUpdate) SetTrustCenterID(s string) *TrustCenterSettingUpdate {
	tcsu.mutation.SetTrustCenterID(s)
	return tcsu
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (tcsu *TrustCenterSettingUpdate) SetNillableTrustCenterID(s *string) *TrustCenterSettingUpdate {
	if s != nil {
		tcsu.SetTrustCenterID(*s)
	}
	return tcsu
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (tcsu *TrustCenterSettingUpdate) ClearTrustCenterID() *TrustCenterSettingUpdate {
	tcsu.mutation.ClearTrustCenterID()
	return tcsu
}

// SetTitle sets the "title" field.
func (tcsu *TrustCenterSettingUpdate) SetTitle(s string) *TrustCenterSettingUpdate {
	tcsu.mutation.SetTitle(s)
	return tcsu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tcsu *TrustCenterSettingUpdate) SetNillableTitle(s *string) *TrustCenterSettingUpdate {
	if s != nil {
		tcsu.SetTitle(*s)
	}
	return tcsu
}

// ClearTitle clears the value of the "title" field.
func (tcsu *TrustCenterSettingUpdate) ClearTitle() *TrustCenterSettingUpdate {
	tcsu.mutation.ClearTitle()
	return tcsu
}

// SetOverview sets the "overview" field.
func (tcsu *TrustCenterSettingUpdate) SetOverview(s string) *TrustCenterSettingUpdate {
	tcsu.mutation.SetOverview(s)
	return tcsu
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (tcsu *TrustCenterSettingUpdate) SetNillableOverview(s *string) *TrustCenterSettingUpdate {
	if s != nil {
		tcsu.SetOverview(*s)
	}
	return tcsu
}

// ClearOverview clears the value of the "overview" field.
func (tcsu *TrustCenterSettingUpdate) ClearOverview() *TrustCenterSettingUpdate {
	tcsu.mutation.ClearOverview()
	return tcsu
}

// SetPrimaryColor sets the "primary_color" field.
func (tcsu *TrustCenterSettingUpdate) SetPrimaryColor(s string) *TrustCenterSettingUpdate {
	tcsu.mutation.SetPrimaryColor(s)
	return tcsu
}

// SetNillablePrimaryColor sets the "primary_color" field if the given value is not nil.
func (tcsu *TrustCenterSettingUpdate) SetNillablePrimaryColor(s *string) *TrustCenterSettingUpdate {
	if s != nil {
		tcsu.SetPrimaryColor(*s)
	}
	return tcsu
}

// ClearPrimaryColor clears the value of the "primary_color" field.
func (tcsu *TrustCenterSettingUpdate) ClearPrimaryColor() *TrustCenterSettingUpdate {
	tcsu.mutation.ClearPrimaryColor()
	return tcsu
}

// SetTrustCenter sets the "trust_center" edge to the TrustCenter entity.
func (tcsu *TrustCenterSettingUpdate) SetTrustCenter(t *TrustCenter) *TrustCenterSettingUpdate {
	return tcsu.SetTrustCenterID(t.ID)
}

// Mutation returns the TrustCenterSettingMutation object of the builder.
func (tcsu *TrustCenterSettingUpdate) Mutation() *TrustCenterSettingMutation {
	return tcsu.mutation
}

// ClearTrustCenter clears the "trust_center" edge to the TrustCenter entity.
func (tcsu *TrustCenterSettingUpdate) ClearTrustCenter() *TrustCenterSettingUpdate {
	tcsu.mutation.ClearTrustCenter()
	return tcsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcsu *TrustCenterSettingUpdate) Save(ctx context.Context) (int, error) {
	if err := tcsu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tcsu.sqlSave, tcsu.mutation, tcsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcsu *TrustCenterSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := tcsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcsu *TrustCenterSettingUpdate) Exec(ctx context.Context) error {
	_, err := tcsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcsu *TrustCenterSettingUpdate) ExecX(ctx context.Context) {
	if err := tcsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcsu *TrustCenterSettingUpdate) defaults() error {
	if _, ok := tcsu.mutation.UpdatedAt(); !ok && !tcsu.mutation.UpdatedAtCleared() {
		if trustcentersetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersetting.UpdateDefaultUpdatedAt()
		tcsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tcsu *TrustCenterSettingUpdate) check() error {
	if v, ok := tcsu.mutation.TrustCenterID(); ok {
		if err := trustcentersetting.TrustCenterIDValidator(v); err != nil {
			return &ValidationError{Name: "trust_center_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.trust_center_id": %w`, err)}
		}
	}
	if v, ok := tcsu.mutation.Title(); ok {
		if err := trustcentersetting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.title": %w`, err)}
		}
	}
	if v, ok := tcsu.mutation.Overview(); ok {
		if err := trustcentersetting.OverviewValidator(v); err != nil {
			return &ValidationError{Name: "overview", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.overview": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcsu *TrustCenterSettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterSettingUpdate {
	tcsu.modifiers = append(tcsu.modifiers, modifiers...)
	return tcsu
}

func (tcsu *TrustCenterSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcentersetting.Table, trustcentersetting.Columns, sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString))
	if ps := tcsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tcsu.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentersetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tcsu.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcsu.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentersetting.FieldUpdatedAt, field.TypeTime)
	}
	if tcsu.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentersetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tcsu.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersetting.FieldUpdatedBy, field.TypeString, value)
	}
	if tcsu.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentersetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tcsu.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersetting.FieldDeletedAt, field.TypeTime, value)
	}
	if tcsu.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentersetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tcsu.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersetting.FieldDeletedBy, field.TypeString, value)
	}
	if tcsu.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentersetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tcsu.mutation.Title(); ok {
		_spec.SetField(trustcentersetting.FieldTitle, field.TypeString, value)
	}
	if tcsu.mutation.TitleCleared() {
		_spec.ClearField(trustcentersetting.FieldTitle, field.TypeString)
	}
	if value, ok := tcsu.mutation.Overview(); ok {
		_spec.SetField(trustcentersetting.FieldOverview, field.TypeString, value)
	}
	if tcsu.mutation.OverviewCleared() {
		_spec.ClearField(trustcentersetting.FieldOverview, field.TypeString)
	}
	if value, ok := tcsu.mutation.PrimaryColor(); ok {
		_spec.SetField(trustcentersetting.FieldPrimaryColor, field.TypeString, value)
	}
	if tcsu.mutation.PrimaryColorCleared() {
		_spec.ClearField(trustcentersetting.FieldPrimaryColor, field.TypeString)
	}
	if tcsu.mutation.TrustCenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   trustcentersetting.TrustCenterTable,
			Columns: []string{trustcentersetting.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcsu.schemaConfig.TrustCenterSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcsu.mutation.TrustCenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   trustcentersetting.TrustCenterTable,
			Columns: []string{trustcentersetting.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcsu.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tcsu.schemaConfig.TrustCenterSetting
	ctx = internal.NewSchemaConfigContext(ctx, tcsu.schemaConfig)
	_spec.AddModifiers(tcsu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tcsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcsu.mutation.done = true
	return n, nil
}

// TrustCenterSettingUpdateOne is the builder for updating a single TrustCenterSetting entity.
type TrustCenterSettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrustCenterSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tcsuo *TrustCenterSettingUpdateOne) SetUpdatedAt(t time.Time) *TrustCenterSettingUpdateOne {
	tcsuo.mutation.SetUpdatedAt(t)
	return tcsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tcsuo *TrustCenterSettingUpdateOne) ClearUpdatedAt() *TrustCenterSettingUpdateOne {
	tcsuo.mutation.ClearUpdatedAt()
	return tcsuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tcsuo *TrustCenterSettingUpdateOne) SetUpdatedBy(s string) *TrustCenterSettingUpdateOne {
	tcsuo.mutation.SetUpdatedBy(s)
	return tcsuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcsuo *TrustCenterSettingUpdateOne) SetNillableUpdatedBy(s *string) *TrustCenterSettingUpdateOne {
	if s != nil {
		tcsuo.SetUpdatedBy(*s)
	}
	return tcsuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tcsuo *TrustCenterSettingUpdateOne) ClearUpdatedBy() *TrustCenterSettingUpdateOne {
	tcsuo.mutation.ClearUpdatedBy()
	return tcsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tcsuo *TrustCenterSettingUpdateOne) SetDeletedAt(t time.Time) *TrustCenterSettingUpdateOne {
	tcsuo.mutation.SetDeletedAt(t)
	return tcsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcsuo *TrustCenterSettingUpdateOne) SetNillableDeletedAt(t *time.Time) *TrustCenterSettingUpdateOne {
	if t != nil {
		tcsuo.SetDeletedAt(*t)
	}
	return tcsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tcsuo *TrustCenterSettingUpdateOne) ClearDeletedAt() *TrustCenterSettingUpdateOne {
	tcsuo.mutation.ClearDeletedAt()
	return tcsuo
}

// SetDeletedBy sets the "deleted_by" field.
func (tcsuo *TrustCenterSettingUpdateOne) SetDeletedBy(s string) *TrustCenterSettingUpdateOne {
	tcsuo.mutation.SetDeletedBy(s)
	return tcsuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcsuo *TrustCenterSettingUpdateOne) SetNillableDeletedBy(s *string) *TrustCenterSettingUpdateOne {
	if s != nil {
		tcsuo.SetDeletedBy(*s)
	}
	return tcsuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tcsuo *TrustCenterSettingUpdateOne) ClearDeletedBy() *TrustCenterSettingUpdateOne {
	tcsuo.mutation.ClearDeletedBy()
	return tcsuo
}

// SetTrustCenterID sets the "trust_center_id" field.
func (tcsuo *TrustCenterSettingUpdateOne) SetTrustCenterID(s string) *TrustCenterSettingUpdateOne {
	tcsuo.mutation.SetTrustCenterID(s)
	return tcsuo
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (tcsuo *TrustCenterSettingUpdateOne) SetNillableTrustCenterID(s *string) *TrustCenterSettingUpdateOne {
	if s != nil {
		tcsuo.SetTrustCenterID(*s)
	}
	return tcsuo
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (tcsuo *TrustCenterSettingUpdateOne) ClearTrustCenterID() *TrustCenterSettingUpdateOne {
	tcsuo.mutation.ClearTrustCenterID()
	return tcsuo
}

// SetTitle sets the "title" field.
func (tcsuo *TrustCenterSettingUpdateOne) SetTitle(s string) *TrustCenterSettingUpdateOne {
	tcsuo.mutation.SetTitle(s)
	return tcsuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tcsuo *TrustCenterSettingUpdateOne) SetNillableTitle(s *string) *TrustCenterSettingUpdateOne {
	if s != nil {
		tcsuo.SetTitle(*s)
	}
	return tcsuo
}

// ClearTitle clears the value of the "title" field.
func (tcsuo *TrustCenterSettingUpdateOne) ClearTitle() *TrustCenterSettingUpdateOne {
	tcsuo.mutation.ClearTitle()
	return tcsuo
}

// SetOverview sets the "overview" field.
func (tcsuo *TrustCenterSettingUpdateOne) SetOverview(s string) *TrustCenterSettingUpdateOne {
	tcsuo.mutation.SetOverview(s)
	return tcsuo
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (tcsuo *TrustCenterSettingUpdateOne) SetNillableOverview(s *string) *TrustCenterSettingUpdateOne {
	if s != nil {
		tcsuo.SetOverview(*s)
	}
	return tcsuo
}

// ClearOverview clears the value of the "overview" field.
func (tcsuo *TrustCenterSettingUpdateOne) ClearOverview() *TrustCenterSettingUpdateOne {
	tcsuo.mutation.ClearOverview()
	return tcsuo
}

// SetPrimaryColor sets the "primary_color" field.
func (tcsuo *TrustCenterSettingUpdateOne) SetPrimaryColor(s string) *TrustCenterSettingUpdateOne {
	tcsuo.mutation.SetPrimaryColor(s)
	return tcsuo
}

// SetNillablePrimaryColor sets the "primary_color" field if the given value is not nil.
func (tcsuo *TrustCenterSettingUpdateOne) SetNillablePrimaryColor(s *string) *TrustCenterSettingUpdateOne {
	if s != nil {
		tcsuo.SetPrimaryColor(*s)
	}
	return tcsuo
}

// ClearPrimaryColor clears the value of the "primary_color" field.
func (tcsuo *TrustCenterSettingUpdateOne) ClearPrimaryColor() *TrustCenterSettingUpdateOne {
	tcsuo.mutation.ClearPrimaryColor()
	return tcsuo
}

// SetTrustCenter sets the "trust_center" edge to the TrustCenter entity.
func (tcsuo *TrustCenterSettingUpdateOne) SetTrustCenter(t *TrustCenter) *TrustCenterSettingUpdateOne {
	return tcsuo.SetTrustCenterID(t.ID)
}

// Mutation returns the TrustCenterSettingMutation object of the builder.
func (tcsuo *TrustCenterSettingUpdateOne) Mutation() *TrustCenterSettingMutation {
	return tcsuo.mutation
}

// ClearTrustCenter clears the "trust_center" edge to the TrustCenter entity.
func (tcsuo *TrustCenterSettingUpdateOne) ClearTrustCenter() *TrustCenterSettingUpdateOne {
	tcsuo.mutation.ClearTrustCenter()
	return tcsuo
}

// Where appends a list predicates to the TrustCenterSettingUpdate builder.
func (tcsuo *TrustCenterSettingUpdateOne) Where(ps ...predicate.TrustCenterSetting) *TrustCenterSettingUpdateOne {
	tcsuo.mutation.Where(ps...)
	return tcsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcsuo *TrustCenterSettingUpdateOne) Select(field string, fields ...string) *TrustCenterSettingUpdateOne {
	tcsuo.fields = append([]string{field}, fields...)
	return tcsuo
}

// Save executes the query and returns the updated TrustCenterSetting entity.
func (tcsuo *TrustCenterSettingUpdateOne) Save(ctx context.Context) (*TrustCenterSetting, error) {
	if err := tcsuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tcsuo.sqlSave, tcsuo.mutation, tcsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcsuo *TrustCenterSettingUpdateOne) SaveX(ctx context.Context) *TrustCenterSetting {
	node, err := tcsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcsuo *TrustCenterSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := tcsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcsuo *TrustCenterSettingUpdateOne) ExecX(ctx context.Context) {
	if err := tcsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcsuo *TrustCenterSettingUpdateOne) defaults() error {
	if _, ok := tcsuo.mutation.UpdatedAt(); !ok && !tcsuo.mutation.UpdatedAtCleared() {
		if trustcentersetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersetting.UpdateDefaultUpdatedAt()
		tcsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tcsuo *TrustCenterSettingUpdateOne) check() error {
	if v, ok := tcsuo.mutation.TrustCenterID(); ok {
		if err := trustcentersetting.TrustCenterIDValidator(v); err != nil {
			return &ValidationError{Name: "trust_center_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.trust_center_id": %w`, err)}
		}
	}
	if v, ok := tcsuo.mutation.Title(); ok {
		if err := trustcentersetting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.title": %w`, err)}
		}
	}
	if v, ok := tcsuo.mutation.Overview(); ok {
		if err := trustcentersetting.OverviewValidator(v); err != nil {
			return &ValidationError{Name: "overview", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.overview": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcsuo *TrustCenterSettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterSettingUpdateOne {
	tcsuo.modifiers = append(tcsuo.modifiers, modifiers...)
	return tcsuo
}

func (tcsuo *TrustCenterSettingUpdateOne) sqlSave(ctx context.Context) (_node *TrustCenterSetting, err error) {
	if err := tcsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcentersetting.Table, trustcentersetting.Columns, sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString))
	id, ok := tcsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TrustCenterSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcentersetting.FieldID)
		for _, f := range fields {
			if !trustcentersetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != trustcentersetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tcsuo.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentersetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tcsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcsuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentersetting.FieldUpdatedAt, field.TypeTime)
	}
	if tcsuo.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentersetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tcsuo.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersetting.FieldUpdatedBy, field.TypeString, value)
	}
	if tcsuo.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentersetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tcsuo.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersetting.FieldDeletedAt, field.TypeTime, value)
	}
	if tcsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentersetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tcsuo.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersetting.FieldDeletedBy, field.TypeString, value)
	}
	if tcsuo.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentersetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tcsuo.mutation.Title(); ok {
		_spec.SetField(trustcentersetting.FieldTitle, field.TypeString, value)
	}
	if tcsuo.mutation.TitleCleared() {
		_spec.ClearField(trustcentersetting.FieldTitle, field.TypeString)
	}
	if value, ok := tcsuo.mutation.Overview(); ok {
		_spec.SetField(trustcentersetting.FieldOverview, field.TypeString, value)
	}
	if tcsuo.mutation.OverviewCleared() {
		_spec.ClearField(trustcentersetting.FieldOverview, field.TypeString)
	}
	if value, ok := tcsuo.mutation.PrimaryColor(); ok {
		_spec.SetField(trustcentersetting.FieldPrimaryColor, field.TypeString, value)
	}
	if tcsuo.mutation.PrimaryColorCleared() {
		_spec.ClearField(trustcentersetting.FieldPrimaryColor, field.TypeString)
	}
	if tcsuo.mutation.TrustCenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   trustcentersetting.TrustCenterTable,
			Columns: []string{trustcentersetting.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcsuo.schemaConfig.TrustCenterSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcsuo.mutation.TrustCenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   trustcentersetting.TrustCenterTable,
			Columns: []string{trustcentersetting.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = tcsuo.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tcsuo.schemaConfig.TrustCenterSetting
	ctx = internal.NewSchemaConfigContext(ctx, tcsuo.schemaConfig)
	_spec.AddModifiers(tcsuo.modifiers...)
	_node = &TrustCenterSetting{config: tcsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcsuo.mutation.done = true
	return _node, nil
}
