// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterSettingUpdate is the builder for updating TrustCenterSetting entities.
type TrustCenterSettingUpdate struct {
	config
	hooks     []Hook
	mutation  *TrustCenterSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrustCenterSettingUpdate builder.
func (_u *TrustCenterSettingUpdate) Where(ps ...predicate.TrustCenterSetting) *TrustCenterSettingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterSettingUpdate) SetUpdatedAt(v time.Time) *TrustCenterSettingUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterSettingUpdate) ClearUpdatedAt() *TrustCenterSettingUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterSettingUpdate) SetUpdatedBy(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableUpdatedBy(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterSettingUpdate) ClearUpdatedBy() *TrustCenterSettingUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterSettingUpdate) SetDeletedAt(v time.Time) *TrustCenterSettingUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableDeletedAt(v *time.Time) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterSettingUpdate) ClearDeletedAt() *TrustCenterSettingUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterSettingUpdate) SetDeletedBy(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableDeletedBy(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterSettingUpdate) ClearDeletedBy() *TrustCenterSettingUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterSettingUpdate) SetTrustCenterID(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableTrustCenterID(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterSettingUpdate) ClearTrustCenterID() *TrustCenterSettingUpdate {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *TrustCenterSettingUpdate) SetTitle(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableTitle(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *TrustCenterSettingUpdate) ClearTitle() *TrustCenterSettingUpdate {
	_u.mutation.ClearTitle()
	return _u
}

// SetOverview sets the "overview" field.
func (_u *TrustCenterSettingUpdate) SetOverview(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetOverview(v)
	return _u
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableOverview(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetOverview(*v)
	}
	return _u
}

// ClearOverview clears the value of the "overview" field.
func (_u *TrustCenterSettingUpdate) ClearOverview() *TrustCenterSettingUpdate {
	_u.mutation.ClearOverview()
	return _u
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (_u *TrustCenterSettingUpdate) SetLogoRemoteURL(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetLogoRemoteURL(v)
	return _u
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableLogoRemoteURL(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetLogoRemoteURL(*v)
	}
	return _u
}

// ClearLogoRemoteURL clears the value of the "logo_remote_url" field.
func (_u *TrustCenterSettingUpdate) ClearLogoRemoteURL() *TrustCenterSettingUpdate {
	_u.mutation.ClearLogoRemoteURL()
	return _u
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (_u *TrustCenterSettingUpdate) SetLogoLocalFileID(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetLogoLocalFileID(v)
	return _u
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableLogoLocalFileID(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetLogoLocalFileID(*v)
	}
	return _u
}

// ClearLogoLocalFileID clears the value of the "logo_local_file_id" field.
func (_u *TrustCenterSettingUpdate) ClearLogoLocalFileID() *TrustCenterSettingUpdate {
	_u.mutation.ClearLogoLocalFileID()
	return _u
}

// SetFaviconRemoteURL sets the "favicon_remote_url" field.
func (_u *TrustCenterSettingUpdate) SetFaviconRemoteURL(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetFaviconRemoteURL(v)
	return _u
}

// SetNillableFaviconRemoteURL sets the "favicon_remote_url" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableFaviconRemoteURL(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetFaviconRemoteURL(*v)
	}
	return _u
}

// ClearFaviconRemoteURL clears the value of the "favicon_remote_url" field.
func (_u *TrustCenterSettingUpdate) ClearFaviconRemoteURL() *TrustCenterSettingUpdate {
	_u.mutation.ClearFaviconRemoteURL()
	return _u
}

// SetFaviconLocalFileID sets the "favicon_local_file_id" field.
func (_u *TrustCenterSettingUpdate) SetFaviconLocalFileID(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetFaviconLocalFileID(v)
	return _u
}

// SetNillableFaviconLocalFileID sets the "favicon_local_file_id" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableFaviconLocalFileID(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetFaviconLocalFileID(*v)
	}
	return _u
}

// ClearFaviconLocalFileID clears the value of the "favicon_local_file_id" field.
func (_u *TrustCenterSettingUpdate) ClearFaviconLocalFileID() *TrustCenterSettingUpdate {
	_u.mutation.ClearFaviconLocalFileID()
	return _u
}

// SetThemeMode sets the "theme_mode" field.
func (_u *TrustCenterSettingUpdate) SetThemeMode(v enums.TrustCenterThemeMode) *TrustCenterSettingUpdate {
	_u.mutation.SetThemeMode(v)
	return _u
}

// SetNillableThemeMode sets the "theme_mode" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableThemeMode(v *enums.TrustCenterThemeMode) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetThemeMode(*v)
	}
	return _u
}

// ClearThemeMode clears the value of the "theme_mode" field.
func (_u *TrustCenterSettingUpdate) ClearThemeMode() *TrustCenterSettingUpdate {
	_u.mutation.ClearThemeMode()
	return _u
}

// SetPrimaryColor sets the "primary_color" field.
func (_u *TrustCenterSettingUpdate) SetPrimaryColor(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetPrimaryColor(v)
	return _u
}

// SetNillablePrimaryColor sets the "primary_color" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillablePrimaryColor(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetPrimaryColor(*v)
	}
	return _u
}

// ClearPrimaryColor clears the value of the "primary_color" field.
func (_u *TrustCenterSettingUpdate) ClearPrimaryColor() *TrustCenterSettingUpdate {
	_u.mutation.ClearPrimaryColor()
	return _u
}

// SetFont sets the "font" field.
func (_u *TrustCenterSettingUpdate) SetFont(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetFont(v)
	return _u
}

// SetNillableFont sets the "font" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableFont(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetFont(*v)
	}
	return _u
}

// ClearFont clears the value of the "font" field.
func (_u *TrustCenterSettingUpdate) ClearFont() *TrustCenterSettingUpdate {
	_u.mutation.ClearFont()
	return _u
}

// SetForegroundColor sets the "foreground_color" field.
func (_u *TrustCenterSettingUpdate) SetForegroundColor(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetForegroundColor(v)
	return _u
}

// SetNillableForegroundColor sets the "foreground_color" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableForegroundColor(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetForegroundColor(*v)
	}
	return _u
}

// ClearForegroundColor clears the value of the "foreground_color" field.
func (_u *TrustCenterSettingUpdate) ClearForegroundColor() *TrustCenterSettingUpdate {
	_u.mutation.ClearForegroundColor()
	return _u
}

// SetBackgroundColor sets the "background_color" field.
func (_u *TrustCenterSettingUpdate) SetBackgroundColor(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetBackgroundColor(v)
	return _u
}

// SetNillableBackgroundColor sets the "background_color" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableBackgroundColor(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetBackgroundColor(*v)
	}
	return _u
}

// ClearBackgroundColor clears the value of the "background_color" field.
func (_u *TrustCenterSettingUpdate) ClearBackgroundColor() *TrustCenterSettingUpdate {
	_u.mutation.ClearBackgroundColor()
	return _u
}

// SetAccentColor sets the "accent_color" field.
func (_u *TrustCenterSettingUpdate) SetAccentColor(v string) *TrustCenterSettingUpdate {
	_u.mutation.SetAccentColor(v)
	return _u
}

// SetNillableAccentColor sets the "accent_color" field if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableAccentColor(v *string) *TrustCenterSettingUpdate {
	if v != nil {
		_u.SetAccentColor(*v)
	}
	return _u
}

// ClearAccentColor clears the value of the "accent_color" field.
func (_u *TrustCenterSettingUpdate) ClearAccentColor() *TrustCenterSettingUpdate {
	_u.mutation.ClearAccentColor()
	return _u
}

// SetTrustCenter sets the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterSettingUpdate) SetTrustCenter(v *TrustCenter) *TrustCenterSettingUpdate {
	return _u.SetTrustCenterID(v.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *TrustCenterSettingUpdate) AddFileIDs(ids ...string) *TrustCenterSettingUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *TrustCenterSettingUpdate) AddFiles(v ...*File) *TrustCenterSettingUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// SetLogoFileID sets the "logo_file" edge to the File entity by ID.
func (_u *TrustCenterSettingUpdate) SetLogoFileID(id string) *TrustCenterSettingUpdate {
	_u.mutation.SetLogoFileID(id)
	return _u
}

// SetNillableLogoFileID sets the "logo_file" edge to the File entity by ID if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableLogoFileID(id *string) *TrustCenterSettingUpdate {
	if id != nil {
		_u = _u.SetLogoFileID(*id)
	}
	return _u
}

// SetLogoFile sets the "logo_file" edge to the File entity.
func (_u *TrustCenterSettingUpdate) SetLogoFile(v *File) *TrustCenterSettingUpdate {
	return _u.SetLogoFileID(v.ID)
}

// SetFaviconFileID sets the "favicon_file" edge to the File entity by ID.
func (_u *TrustCenterSettingUpdate) SetFaviconFileID(id string) *TrustCenterSettingUpdate {
	_u.mutation.SetFaviconFileID(id)
	return _u
}

// SetNillableFaviconFileID sets the "favicon_file" edge to the File entity by ID if the given value is not nil.
func (_u *TrustCenterSettingUpdate) SetNillableFaviconFileID(id *string) *TrustCenterSettingUpdate {
	if id != nil {
		_u = _u.SetFaviconFileID(*id)
	}
	return _u
}

// SetFaviconFile sets the "favicon_file" edge to the File entity.
func (_u *TrustCenterSettingUpdate) SetFaviconFile(v *File) *TrustCenterSettingUpdate {
	return _u.SetFaviconFileID(v.ID)
}

// Mutation returns the TrustCenterSettingMutation object of the builder.
func (_u *TrustCenterSettingUpdate) Mutation() *TrustCenterSettingMutation {
	return _u.mutation
}

// ClearTrustCenter clears the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterSettingUpdate) ClearTrustCenter() *TrustCenterSettingUpdate {
	_u.mutation.ClearTrustCenter()
	return _u
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *TrustCenterSettingUpdate) ClearFiles() *TrustCenterSettingUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *TrustCenterSettingUpdate) RemoveFileIDs(ids ...string) *TrustCenterSettingUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *TrustCenterSettingUpdate) RemoveFiles(v ...*File) *TrustCenterSettingUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearLogoFile clears the "logo_file" edge to the File entity.
func (_u *TrustCenterSettingUpdate) ClearLogoFile() *TrustCenterSettingUpdate {
	_u.mutation.ClearLogoFile()
	return _u
}

// ClearFaviconFile clears the "favicon_file" edge to the File entity.
func (_u *TrustCenterSettingUpdate) ClearFaviconFile() *TrustCenterSettingUpdate {
	_u.mutation.ClearFaviconFile()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TrustCenterSettingUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TrustCenterSettingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterSettingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterSettingUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcentersetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterSettingUpdate) check() error {
	if v, ok := _u.mutation.TrustCenterID(); ok {
		if err := trustcentersetting.TrustCenterIDValidator(v); err != nil {
			return &ValidationError{Name: "trust_center_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.trust_center_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := trustcentersetting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Overview(); ok {
		if err := trustcentersetting.OverviewValidator(v); err != nil {
			return &ValidationError{Name: "overview", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.overview": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LogoRemoteURL(); ok {
		if err := trustcentersetting.LogoRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "logo_remote_url", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.logo_remote_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FaviconRemoteURL(); ok {
		if err := trustcentersetting.FaviconRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "favicon_remote_url", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.favicon_remote_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ThemeMode(); ok {
		if err := trustcentersetting.ThemeModeValidator(v); err != nil {
			return &ValidationError{Name: "theme_mode", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.theme_mode": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterSettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterSettingUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterSettingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcentersetting.Table, trustcentersetting.Columns, sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentersetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentersetting.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentersetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersetting.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentersetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersetting.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentersetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersetting.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentersetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(trustcentersetting.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(trustcentersetting.FieldTitle, field.TypeString)
	}
	if value, ok := _u.mutation.Overview(); ok {
		_spec.SetField(trustcentersetting.FieldOverview, field.TypeString, value)
	}
	if _u.mutation.OverviewCleared() {
		_spec.ClearField(trustcentersetting.FieldOverview, field.TypeString)
	}
	if value, ok := _u.mutation.LogoRemoteURL(); ok {
		_spec.SetField(trustcentersetting.FieldLogoRemoteURL, field.TypeString, value)
	}
	if _u.mutation.LogoRemoteURLCleared() {
		_spec.ClearField(trustcentersetting.FieldLogoRemoteURL, field.TypeString)
	}
	if value, ok := _u.mutation.FaviconRemoteURL(); ok {
		_spec.SetField(trustcentersetting.FieldFaviconRemoteURL, field.TypeString, value)
	}
	if _u.mutation.FaviconRemoteURLCleared() {
		_spec.ClearField(trustcentersetting.FieldFaviconRemoteURL, field.TypeString)
	}
	if value, ok := _u.mutation.ThemeMode(); ok {
		_spec.SetField(trustcentersetting.FieldThemeMode, field.TypeEnum, value)
	}
	if _u.mutation.ThemeModeCleared() {
		_spec.ClearField(trustcentersetting.FieldThemeMode, field.TypeEnum)
	}
	if value, ok := _u.mutation.PrimaryColor(); ok {
		_spec.SetField(trustcentersetting.FieldPrimaryColor, field.TypeString, value)
	}
	if _u.mutation.PrimaryColorCleared() {
		_spec.ClearField(trustcentersetting.FieldPrimaryColor, field.TypeString)
	}
	if value, ok := _u.mutation.Font(); ok {
		_spec.SetField(trustcentersetting.FieldFont, field.TypeString, value)
	}
	if _u.mutation.FontCleared() {
		_spec.ClearField(trustcentersetting.FieldFont, field.TypeString)
	}
	if value, ok := _u.mutation.ForegroundColor(); ok {
		_spec.SetField(trustcentersetting.FieldForegroundColor, field.TypeString, value)
	}
	if _u.mutation.ForegroundColorCleared() {
		_spec.ClearField(trustcentersetting.FieldForegroundColor, field.TypeString)
	}
	if value, ok := _u.mutation.BackgroundColor(); ok {
		_spec.SetField(trustcentersetting.FieldBackgroundColor, field.TypeString, value)
	}
	if _u.mutation.BackgroundColorCleared() {
		_spec.ClearField(trustcentersetting.FieldBackgroundColor, field.TypeString)
	}
	if value, ok := _u.mutation.AccentColor(); ok {
		_spec.SetField(trustcentersetting.FieldAccentColor, field.TypeString, value)
	}
	if _u.mutation.AccentColorCleared() {
		_spec.ClearField(trustcentersetting.FieldAccentColor, field.TypeString)
	}
	if _u.mutation.TrustCenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   trustcentersetting.TrustCenterTable,
			Columns: []string{trustcentersetting.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   trustcentersetting.TrustCenterTable,
			Columns: []string{trustcentersetting.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   trustcentersetting.FilesTable,
			Columns: trustcentersetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   trustcentersetting.FilesTable,
			Columns: trustcentersetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   trustcentersetting.FilesTable,
			Columns: trustcentersetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LogoFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcentersetting.LogoFileTable,
			Columns: []string{trustcentersetting.LogoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LogoFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcentersetting.LogoFileTable,
			Columns: []string{trustcentersetting.LogoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FaviconFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcentersetting.FaviconFileTable,
			Columns: []string{trustcentersetting.FaviconFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FaviconFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcentersetting.FaviconFileTable,
			Columns: []string{trustcentersetting.FaviconFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterSetting
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TrustCenterSettingUpdateOne is the builder for updating a single TrustCenterSetting entity.
type TrustCenterSettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrustCenterSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterSettingUpdateOne) SetUpdatedAt(v time.Time) *TrustCenterSettingUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterSettingUpdateOne) ClearUpdatedAt() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterSettingUpdateOne) SetUpdatedBy(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableUpdatedBy(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterSettingUpdateOne) ClearUpdatedBy() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterSettingUpdateOne) SetDeletedAt(v time.Time) *TrustCenterSettingUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableDeletedAt(v *time.Time) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterSettingUpdateOne) ClearDeletedAt() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterSettingUpdateOne) SetDeletedBy(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableDeletedBy(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterSettingUpdateOne) ClearDeletedBy() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterSettingUpdateOne) SetTrustCenterID(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableTrustCenterID(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterSettingUpdateOne) ClearTrustCenterID() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *TrustCenterSettingUpdateOne) SetTitle(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableTitle(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *TrustCenterSettingUpdateOne) ClearTitle() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearTitle()
	return _u
}

// SetOverview sets the "overview" field.
func (_u *TrustCenterSettingUpdateOne) SetOverview(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetOverview(v)
	return _u
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableOverview(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetOverview(*v)
	}
	return _u
}

// ClearOverview clears the value of the "overview" field.
func (_u *TrustCenterSettingUpdateOne) ClearOverview() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearOverview()
	return _u
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (_u *TrustCenterSettingUpdateOne) SetLogoRemoteURL(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetLogoRemoteURL(v)
	return _u
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableLogoRemoteURL(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetLogoRemoteURL(*v)
	}
	return _u
}

// ClearLogoRemoteURL clears the value of the "logo_remote_url" field.
func (_u *TrustCenterSettingUpdateOne) ClearLogoRemoteURL() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearLogoRemoteURL()
	return _u
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (_u *TrustCenterSettingUpdateOne) SetLogoLocalFileID(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetLogoLocalFileID(v)
	return _u
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableLogoLocalFileID(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetLogoLocalFileID(*v)
	}
	return _u
}

// ClearLogoLocalFileID clears the value of the "logo_local_file_id" field.
func (_u *TrustCenterSettingUpdateOne) ClearLogoLocalFileID() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearLogoLocalFileID()
	return _u
}

// SetFaviconRemoteURL sets the "favicon_remote_url" field.
func (_u *TrustCenterSettingUpdateOne) SetFaviconRemoteURL(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetFaviconRemoteURL(v)
	return _u
}

// SetNillableFaviconRemoteURL sets the "favicon_remote_url" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableFaviconRemoteURL(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetFaviconRemoteURL(*v)
	}
	return _u
}

// ClearFaviconRemoteURL clears the value of the "favicon_remote_url" field.
func (_u *TrustCenterSettingUpdateOne) ClearFaviconRemoteURL() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearFaviconRemoteURL()
	return _u
}

// SetFaviconLocalFileID sets the "favicon_local_file_id" field.
func (_u *TrustCenterSettingUpdateOne) SetFaviconLocalFileID(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetFaviconLocalFileID(v)
	return _u
}

// SetNillableFaviconLocalFileID sets the "favicon_local_file_id" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableFaviconLocalFileID(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetFaviconLocalFileID(*v)
	}
	return _u
}

// ClearFaviconLocalFileID clears the value of the "favicon_local_file_id" field.
func (_u *TrustCenterSettingUpdateOne) ClearFaviconLocalFileID() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearFaviconLocalFileID()
	return _u
}

// SetThemeMode sets the "theme_mode" field.
func (_u *TrustCenterSettingUpdateOne) SetThemeMode(v enums.TrustCenterThemeMode) *TrustCenterSettingUpdateOne {
	_u.mutation.SetThemeMode(v)
	return _u
}

// SetNillableThemeMode sets the "theme_mode" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableThemeMode(v *enums.TrustCenterThemeMode) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetThemeMode(*v)
	}
	return _u
}

// ClearThemeMode clears the value of the "theme_mode" field.
func (_u *TrustCenterSettingUpdateOne) ClearThemeMode() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearThemeMode()
	return _u
}

// SetPrimaryColor sets the "primary_color" field.
func (_u *TrustCenterSettingUpdateOne) SetPrimaryColor(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetPrimaryColor(v)
	return _u
}

// SetNillablePrimaryColor sets the "primary_color" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillablePrimaryColor(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetPrimaryColor(*v)
	}
	return _u
}

// ClearPrimaryColor clears the value of the "primary_color" field.
func (_u *TrustCenterSettingUpdateOne) ClearPrimaryColor() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearPrimaryColor()
	return _u
}

// SetFont sets the "font" field.
func (_u *TrustCenterSettingUpdateOne) SetFont(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetFont(v)
	return _u
}

// SetNillableFont sets the "font" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableFont(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetFont(*v)
	}
	return _u
}

// ClearFont clears the value of the "font" field.
func (_u *TrustCenterSettingUpdateOne) ClearFont() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearFont()
	return _u
}

// SetForegroundColor sets the "foreground_color" field.
func (_u *TrustCenterSettingUpdateOne) SetForegroundColor(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetForegroundColor(v)
	return _u
}

// SetNillableForegroundColor sets the "foreground_color" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableForegroundColor(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetForegroundColor(*v)
	}
	return _u
}

// ClearForegroundColor clears the value of the "foreground_color" field.
func (_u *TrustCenterSettingUpdateOne) ClearForegroundColor() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearForegroundColor()
	return _u
}

// SetBackgroundColor sets the "background_color" field.
func (_u *TrustCenterSettingUpdateOne) SetBackgroundColor(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetBackgroundColor(v)
	return _u
}

// SetNillableBackgroundColor sets the "background_color" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableBackgroundColor(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetBackgroundColor(*v)
	}
	return _u
}

// ClearBackgroundColor clears the value of the "background_color" field.
func (_u *TrustCenterSettingUpdateOne) ClearBackgroundColor() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearBackgroundColor()
	return _u
}

// SetAccentColor sets the "accent_color" field.
func (_u *TrustCenterSettingUpdateOne) SetAccentColor(v string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetAccentColor(v)
	return _u
}

// SetNillableAccentColor sets the "accent_color" field if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableAccentColor(v *string) *TrustCenterSettingUpdateOne {
	if v != nil {
		_u.SetAccentColor(*v)
	}
	return _u
}

// ClearAccentColor clears the value of the "accent_color" field.
func (_u *TrustCenterSettingUpdateOne) ClearAccentColor() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearAccentColor()
	return _u
}

// SetTrustCenter sets the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterSettingUpdateOne) SetTrustCenter(v *TrustCenter) *TrustCenterSettingUpdateOne {
	return _u.SetTrustCenterID(v.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *TrustCenterSettingUpdateOne) AddFileIDs(ids ...string) *TrustCenterSettingUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *TrustCenterSettingUpdateOne) AddFiles(v ...*File) *TrustCenterSettingUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// SetLogoFileID sets the "logo_file" edge to the File entity by ID.
func (_u *TrustCenterSettingUpdateOne) SetLogoFileID(id string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetLogoFileID(id)
	return _u
}

// SetNillableLogoFileID sets the "logo_file" edge to the File entity by ID if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableLogoFileID(id *string) *TrustCenterSettingUpdateOne {
	if id != nil {
		_u = _u.SetLogoFileID(*id)
	}
	return _u
}

// SetLogoFile sets the "logo_file" edge to the File entity.
func (_u *TrustCenterSettingUpdateOne) SetLogoFile(v *File) *TrustCenterSettingUpdateOne {
	return _u.SetLogoFileID(v.ID)
}

// SetFaviconFileID sets the "favicon_file" edge to the File entity by ID.
func (_u *TrustCenterSettingUpdateOne) SetFaviconFileID(id string) *TrustCenterSettingUpdateOne {
	_u.mutation.SetFaviconFileID(id)
	return _u
}

// SetNillableFaviconFileID sets the "favicon_file" edge to the File entity by ID if the given value is not nil.
func (_u *TrustCenterSettingUpdateOne) SetNillableFaviconFileID(id *string) *TrustCenterSettingUpdateOne {
	if id != nil {
		_u = _u.SetFaviconFileID(*id)
	}
	return _u
}

// SetFaviconFile sets the "favicon_file" edge to the File entity.
func (_u *TrustCenterSettingUpdateOne) SetFaviconFile(v *File) *TrustCenterSettingUpdateOne {
	return _u.SetFaviconFileID(v.ID)
}

// Mutation returns the TrustCenterSettingMutation object of the builder.
func (_u *TrustCenterSettingUpdateOne) Mutation() *TrustCenterSettingMutation {
	return _u.mutation
}

// ClearTrustCenter clears the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterSettingUpdateOne) ClearTrustCenter() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearTrustCenter()
	return _u
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *TrustCenterSettingUpdateOne) ClearFiles() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *TrustCenterSettingUpdateOne) RemoveFileIDs(ids ...string) *TrustCenterSettingUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *TrustCenterSettingUpdateOne) RemoveFiles(v ...*File) *TrustCenterSettingUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearLogoFile clears the "logo_file" edge to the File entity.
func (_u *TrustCenterSettingUpdateOne) ClearLogoFile() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearLogoFile()
	return _u
}

// ClearFaviconFile clears the "favicon_file" edge to the File entity.
func (_u *TrustCenterSettingUpdateOne) ClearFaviconFile() *TrustCenterSettingUpdateOne {
	_u.mutation.ClearFaviconFile()
	return _u
}

// Where appends a list predicates to the TrustCenterSettingUpdate builder.
func (_u *TrustCenterSettingUpdateOne) Where(ps ...predicate.TrustCenterSetting) *TrustCenterSettingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TrustCenterSettingUpdateOne) Select(field string, fields ...string) *TrustCenterSettingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TrustCenterSetting entity.
func (_u *TrustCenterSettingUpdateOne) Save(ctx context.Context) (*TrustCenterSetting, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterSettingUpdateOne) SaveX(ctx context.Context) *TrustCenterSetting {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TrustCenterSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterSettingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterSettingUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcentersetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterSettingUpdateOne) check() error {
	if v, ok := _u.mutation.TrustCenterID(); ok {
		if err := trustcentersetting.TrustCenterIDValidator(v); err != nil {
			return &ValidationError{Name: "trust_center_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.trust_center_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Title(); ok {
		if err := trustcentersetting.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Overview(); ok {
		if err := trustcentersetting.OverviewValidator(v); err != nil {
			return &ValidationError{Name: "overview", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.overview": %w`, err)}
		}
	}
	if v, ok := _u.mutation.LogoRemoteURL(); ok {
		if err := trustcentersetting.LogoRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "logo_remote_url", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.logo_remote_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FaviconRemoteURL(); ok {
		if err := trustcentersetting.FaviconRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "favicon_remote_url", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.favicon_remote_url": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ThemeMode(); ok {
		if err := trustcentersetting.ThemeModeValidator(v); err != nil {
			return &ValidationError{Name: "theme_mode", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSetting.theme_mode": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterSettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterSettingUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterSettingUpdateOne) sqlSave(ctx context.Context) (_node *TrustCenterSetting, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcentersetting.Table, trustcentersetting.Columns, sqlgraph.NewFieldSpec(trustcentersetting.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TrustCenterSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcentersetting.FieldID)
		for _, f := range fields {
			if !trustcentersetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != trustcentersetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentersetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentersetting.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentersetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersetting.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentersetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersetting.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentersetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersetting.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentersetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(trustcentersetting.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(trustcentersetting.FieldTitle, field.TypeString)
	}
	if value, ok := _u.mutation.Overview(); ok {
		_spec.SetField(trustcentersetting.FieldOverview, field.TypeString, value)
	}
	if _u.mutation.OverviewCleared() {
		_spec.ClearField(trustcentersetting.FieldOverview, field.TypeString)
	}
	if value, ok := _u.mutation.LogoRemoteURL(); ok {
		_spec.SetField(trustcentersetting.FieldLogoRemoteURL, field.TypeString, value)
	}
	if _u.mutation.LogoRemoteURLCleared() {
		_spec.ClearField(trustcentersetting.FieldLogoRemoteURL, field.TypeString)
	}
	if value, ok := _u.mutation.FaviconRemoteURL(); ok {
		_spec.SetField(trustcentersetting.FieldFaviconRemoteURL, field.TypeString, value)
	}
	if _u.mutation.FaviconRemoteURLCleared() {
		_spec.ClearField(trustcentersetting.FieldFaviconRemoteURL, field.TypeString)
	}
	if value, ok := _u.mutation.ThemeMode(); ok {
		_spec.SetField(trustcentersetting.FieldThemeMode, field.TypeEnum, value)
	}
	if _u.mutation.ThemeModeCleared() {
		_spec.ClearField(trustcentersetting.FieldThemeMode, field.TypeEnum)
	}
	if value, ok := _u.mutation.PrimaryColor(); ok {
		_spec.SetField(trustcentersetting.FieldPrimaryColor, field.TypeString, value)
	}
	if _u.mutation.PrimaryColorCleared() {
		_spec.ClearField(trustcentersetting.FieldPrimaryColor, field.TypeString)
	}
	if value, ok := _u.mutation.Font(); ok {
		_spec.SetField(trustcentersetting.FieldFont, field.TypeString, value)
	}
	if _u.mutation.FontCleared() {
		_spec.ClearField(trustcentersetting.FieldFont, field.TypeString)
	}
	if value, ok := _u.mutation.ForegroundColor(); ok {
		_spec.SetField(trustcentersetting.FieldForegroundColor, field.TypeString, value)
	}
	if _u.mutation.ForegroundColorCleared() {
		_spec.ClearField(trustcentersetting.FieldForegroundColor, field.TypeString)
	}
	if value, ok := _u.mutation.BackgroundColor(); ok {
		_spec.SetField(trustcentersetting.FieldBackgroundColor, field.TypeString, value)
	}
	if _u.mutation.BackgroundColorCleared() {
		_spec.ClearField(trustcentersetting.FieldBackgroundColor, field.TypeString)
	}
	if value, ok := _u.mutation.AccentColor(); ok {
		_spec.SetField(trustcentersetting.FieldAccentColor, field.TypeString, value)
	}
	if _u.mutation.AccentColorCleared() {
		_spec.ClearField(trustcentersetting.FieldAccentColor, field.TypeString)
	}
	if _u.mutation.TrustCenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   trustcentersetting.TrustCenterTable,
			Columns: []string{trustcentersetting.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   trustcentersetting.TrustCenterTable,
			Columns: []string{trustcentersetting.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   trustcentersetting.FilesTable,
			Columns: trustcentersetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   trustcentersetting.FilesTable,
			Columns: trustcentersetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   trustcentersetting.FilesTable,
			Columns: trustcentersetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LogoFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcentersetting.LogoFileTable,
			Columns: []string{trustcentersetting.LogoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LogoFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcentersetting.LogoFileTable,
			Columns: []string{trustcentersetting.LogoFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FaviconFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcentersetting.FaviconFileTable,
			Columns: []string{trustcentersetting.FaviconFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FaviconFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   trustcentersetting.FaviconFileTable,
			Columns: []string{trustcentersetting.FaviconFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterSetting
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TrustCenterSetting{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
