// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementationhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ControlImplementationHistory is the model entity for the ControlImplementationHistory schema.
type ControlImplementationHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// status of the %s, e.g. draft, published, archived, etc.
	Status enums.DocumentStatus `json:"status,omitempty"`
	// date the control was implemented
	ImplementationDate time.Time `json:"implementation_date,omitempty"`
	// set to true if the control implementation has been verified
	Verified bool `json:"verified,omitempty"`
	// date the control implementation was verified
	VerificationDate time.Time `json:"verification_date,omitempty"`
	// details of the control implementation
	Details      string `json:"details,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ControlImplementationHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case controlimplementationhistory.FieldTags:
			values[i] = new([]byte)
		case controlimplementationhistory.FieldOperation:
			values[i] = new(history.OpType)
		case controlimplementationhistory.FieldVerified:
			values[i] = new(sql.NullBool)
		case controlimplementationhistory.FieldID, controlimplementationhistory.FieldRef, controlimplementationhistory.FieldCreatedBy, controlimplementationhistory.FieldUpdatedBy, controlimplementationhistory.FieldDeletedBy, controlimplementationhistory.FieldOwnerID, controlimplementationhistory.FieldStatus, controlimplementationhistory.FieldDetails:
			values[i] = new(sql.NullString)
		case controlimplementationhistory.FieldHistoryTime, controlimplementationhistory.FieldCreatedAt, controlimplementationhistory.FieldUpdatedAt, controlimplementationhistory.FieldDeletedAt, controlimplementationhistory.FieldImplementationDate, controlimplementationhistory.FieldVerificationDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ControlImplementationHistory fields.
func (cih *ControlImplementationHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case controlimplementationhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cih.ID = value.String
			}
		case controlimplementationhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				cih.HistoryTime = value.Time
			}
		case controlimplementationhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				cih.Ref = value.String
			}
		case controlimplementationhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				cih.Operation = *value
			}
		case controlimplementationhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cih.CreatedAt = value.Time
			}
		case controlimplementationhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cih.UpdatedAt = value.Time
			}
		case controlimplementationhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				cih.CreatedBy = value.String
			}
		case controlimplementationhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				cih.UpdatedBy = value.String
			}
		case controlimplementationhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				cih.DeletedAt = value.Time
			}
		case controlimplementationhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				cih.DeletedBy = value.String
			}
		case controlimplementationhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &cih.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case controlimplementationhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				cih.OwnerID = value.String
			}
		case controlimplementationhistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cih.Status = enums.DocumentStatus(value.String)
			}
		case controlimplementationhistory.FieldImplementationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_date", values[i])
			} else if value.Valid {
				cih.ImplementationDate = value.Time
			}
		case controlimplementationhistory.FieldVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field verified", values[i])
			} else if value.Valid {
				cih.Verified = value.Bool
			}
		case controlimplementationhistory.FieldVerificationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field verification_date", values[i])
			} else if value.Valid {
				cih.VerificationDate = value.Time
			}
		case controlimplementationhistory.FieldDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value.Valid {
				cih.Details = value.String
			}
		default:
			cih.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ControlImplementationHistory.
// This includes values selected through modifiers, order, etc.
func (cih *ControlImplementationHistory) Value(name string) (ent.Value, error) {
	return cih.selectValues.Get(name)
}

// Update returns a builder for updating this ControlImplementationHistory.
// Note that you need to call ControlImplementationHistory.Unwrap() before calling this method if this ControlImplementationHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (cih *ControlImplementationHistory) Update() *ControlImplementationHistoryUpdateOne {
	return NewControlImplementationHistoryClient(cih.config).UpdateOne(cih)
}

// Unwrap unwraps the ControlImplementationHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cih *ControlImplementationHistory) Unwrap() *ControlImplementationHistory {
	_tx, ok := cih.config.driver.(*txDriver)
	if !ok {
		panic("generated: ControlImplementationHistory is not a transactional entity")
	}
	cih.config.driver = _tx.drv
	return cih
}

// String implements the fmt.Stringer.
func (cih *ControlImplementationHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ControlImplementationHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cih.ID))
	builder.WriteString("history_time=")
	builder.WriteString(cih.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(cih.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", cih.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cih.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cih.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(cih.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(cih.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(cih.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(cih.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", cih.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(cih.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", cih.Status))
	builder.WriteString(", ")
	builder.WriteString("implementation_date=")
	builder.WriteString(cih.ImplementationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("verified=")
	builder.WriteString(fmt.Sprintf("%v", cih.Verified))
	builder.WriteString(", ")
	builder.WriteString("verification_date=")
	builder.WriteString(cih.VerificationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(cih.Details)
	builder.WriteByte(')')
	return builder.String()
}

// ControlImplementationHistories is a parsable slice of ControlImplementationHistory.
type ControlImplementationHistories []*ControlImplementationHistory
