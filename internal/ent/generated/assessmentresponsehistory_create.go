// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/assessmentresponsehistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// AssessmentResponseHistoryCreate is the builder for creating a AssessmentResponseHistory entity.
type AssessmentResponseHistoryCreate struct {
	config
	mutation *AssessmentResponseHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (arhc *AssessmentResponseHistoryCreate) SetHistoryTime(t time.Time) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetHistoryTime(t)
	return arhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableHistoryTime(t *time.Time) *AssessmentResponseHistoryCreate {
	if t != nil {
		arhc.SetHistoryTime(*t)
	}
	return arhc
}

// SetRef sets the "ref" field.
func (arhc *AssessmentResponseHistoryCreate) SetRef(s string) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetRef(s)
	return arhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableRef(s *string) *AssessmentResponseHistoryCreate {
	if s != nil {
		arhc.SetRef(*s)
	}
	return arhc
}

// SetOperation sets the "operation" field.
func (arhc *AssessmentResponseHistoryCreate) SetOperation(ht history.OpType) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetOperation(ht)
	return arhc
}

// SetCreatedAt sets the "created_at" field.
func (arhc *AssessmentResponseHistoryCreate) SetCreatedAt(t time.Time) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetCreatedAt(t)
	return arhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableCreatedAt(t *time.Time) *AssessmentResponseHistoryCreate {
	if t != nil {
		arhc.SetCreatedAt(*t)
	}
	return arhc
}

// SetUpdatedAt sets the "updated_at" field.
func (arhc *AssessmentResponseHistoryCreate) SetUpdatedAt(t time.Time) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetUpdatedAt(t)
	return arhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableUpdatedAt(t *time.Time) *AssessmentResponseHistoryCreate {
	if t != nil {
		arhc.SetUpdatedAt(*t)
	}
	return arhc
}

// SetCreatedBy sets the "created_by" field.
func (arhc *AssessmentResponseHistoryCreate) SetCreatedBy(s string) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetCreatedBy(s)
	return arhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableCreatedBy(s *string) *AssessmentResponseHistoryCreate {
	if s != nil {
		arhc.SetCreatedBy(*s)
	}
	return arhc
}

// SetUpdatedBy sets the "updated_by" field.
func (arhc *AssessmentResponseHistoryCreate) SetUpdatedBy(s string) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetUpdatedBy(s)
	return arhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableUpdatedBy(s *string) *AssessmentResponseHistoryCreate {
	if s != nil {
		arhc.SetUpdatedBy(*s)
	}
	return arhc
}

// SetDeletedAt sets the "deleted_at" field.
func (arhc *AssessmentResponseHistoryCreate) SetDeletedAt(t time.Time) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetDeletedAt(t)
	return arhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableDeletedAt(t *time.Time) *AssessmentResponseHistoryCreate {
	if t != nil {
		arhc.SetDeletedAt(*t)
	}
	return arhc
}

// SetDeletedBy sets the "deleted_by" field.
func (arhc *AssessmentResponseHistoryCreate) SetDeletedBy(s string) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetDeletedBy(s)
	return arhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableDeletedBy(s *string) *AssessmentResponseHistoryCreate {
	if s != nil {
		arhc.SetDeletedBy(*s)
	}
	return arhc
}

// SetTags sets the "tags" field.
func (arhc *AssessmentResponseHistoryCreate) SetTags(s []string) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetTags(s)
	return arhc
}

// SetAssessmentID sets the "assessment_id" field.
func (arhc *AssessmentResponseHistoryCreate) SetAssessmentID(s string) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetAssessmentID(s)
	return arhc
}

// SetUserID sets the "user_id" field.
func (arhc *AssessmentResponseHistoryCreate) SetUserID(s string) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetUserID(s)
	return arhc
}

// SetStatus sets the "status" field.
func (arhc *AssessmentResponseHistoryCreate) SetStatus(ers enums.AssessmentResponseStatus) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetStatus(ers)
	return arhc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableStatus(ers *enums.AssessmentResponseStatus) *AssessmentResponseHistoryCreate {
	if ers != nil {
		arhc.SetStatus(*ers)
	}
	return arhc
}

// SetAssignedAt sets the "assigned_at" field.
func (arhc *AssessmentResponseHistoryCreate) SetAssignedAt(t time.Time) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetAssignedAt(t)
	return arhc
}

// SetNillableAssignedAt sets the "assigned_at" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableAssignedAt(t *time.Time) *AssessmentResponseHistoryCreate {
	if t != nil {
		arhc.SetAssignedAt(*t)
	}
	return arhc
}

// SetStartedAt sets the "started_at" field.
func (arhc *AssessmentResponseHistoryCreate) SetStartedAt(t time.Time) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetStartedAt(t)
	return arhc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableStartedAt(t *time.Time) *AssessmentResponseHistoryCreate {
	if t != nil {
		arhc.SetStartedAt(*t)
	}
	return arhc
}

// SetCompletedAt sets the "completed_at" field.
func (arhc *AssessmentResponseHistoryCreate) SetCompletedAt(t time.Time) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetCompletedAt(t)
	return arhc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableCompletedAt(t *time.Time) *AssessmentResponseHistoryCreate {
	if t != nil {
		arhc.SetCompletedAt(*t)
	}
	return arhc
}

// SetDueDate sets the "due_date" field.
func (arhc *AssessmentResponseHistoryCreate) SetDueDate(t time.Time) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetDueDate(t)
	return arhc
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableDueDate(t *time.Time) *AssessmentResponseHistoryCreate {
	if t != nil {
		arhc.SetDueDate(*t)
	}
	return arhc
}

// SetID sets the "id" field.
func (arhc *AssessmentResponseHistoryCreate) SetID(s string) *AssessmentResponseHistoryCreate {
	arhc.mutation.SetID(s)
	return arhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (arhc *AssessmentResponseHistoryCreate) SetNillableID(s *string) *AssessmentResponseHistoryCreate {
	if s != nil {
		arhc.SetID(*s)
	}
	return arhc
}

// Mutation returns the AssessmentResponseHistoryMutation object of the builder.
func (arhc *AssessmentResponseHistoryCreate) Mutation() *AssessmentResponseHistoryMutation {
	return arhc.mutation
}

// Save creates the AssessmentResponseHistory in the database.
func (arhc *AssessmentResponseHistoryCreate) Save(ctx context.Context) (*AssessmentResponseHistory, error) {
	arhc.defaults()
	return withHooks(ctx, arhc.sqlSave, arhc.mutation, arhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arhc *AssessmentResponseHistoryCreate) SaveX(ctx context.Context) *AssessmentResponseHistory {
	v, err := arhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arhc *AssessmentResponseHistoryCreate) Exec(ctx context.Context) error {
	_, err := arhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arhc *AssessmentResponseHistoryCreate) ExecX(ctx context.Context) {
	if err := arhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arhc *AssessmentResponseHistoryCreate) defaults() {
	if _, ok := arhc.mutation.HistoryTime(); !ok {
		v := assessmentresponsehistory.DefaultHistoryTime()
		arhc.mutation.SetHistoryTime(v)
	}
	if _, ok := arhc.mutation.CreatedAt(); !ok {
		v := assessmentresponsehistory.DefaultCreatedAt()
		arhc.mutation.SetCreatedAt(v)
	}
	if _, ok := arhc.mutation.UpdatedAt(); !ok {
		v := assessmentresponsehistory.DefaultUpdatedAt()
		arhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := arhc.mutation.Tags(); !ok {
		v := assessmentresponsehistory.DefaultTags
		arhc.mutation.SetTags(v)
	}
	if _, ok := arhc.mutation.Status(); !ok {
		v := assessmentresponsehistory.DefaultStatus
		arhc.mutation.SetStatus(v)
	}
	if _, ok := arhc.mutation.ID(); !ok {
		v := assessmentresponsehistory.DefaultID()
		arhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arhc *AssessmentResponseHistoryCreate) check() error {
	if _, ok := arhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "AssessmentResponseHistory.history_time"`)}
	}
	if _, ok := arhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "AssessmentResponseHistory.operation"`)}
	}
	if v, ok := arhc.mutation.Operation(); ok {
		if err := assessmentresponsehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponseHistory.operation": %w`, err)}
		}
	}
	if _, ok := arhc.mutation.AssessmentID(); !ok {
		return &ValidationError{Name: "assessment_id", err: errors.New(`generated: missing required field "AssessmentResponseHistory.assessment_id"`)}
	}
	if _, ok := arhc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`generated: missing required field "AssessmentResponseHistory.user_id"`)}
	}
	if _, ok := arhc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "AssessmentResponseHistory.status"`)}
	}
	if v, ok := arhc.mutation.Status(); ok {
		if err := assessmentresponsehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "AssessmentResponseHistory.status": %w`, err)}
		}
	}
	return nil
}

func (arhc *AssessmentResponseHistoryCreate) sqlSave(ctx context.Context) (*AssessmentResponseHistory, error) {
	if err := arhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AssessmentResponseHistory.ID type: %T", _spec.ID.Value)
		}
	}
	arhc.mutation.id = &_node.ID
	arhc.mutation.done = true
	return _node, nil
}

func (arhc *AssessmentResponseHistoryCreate) createSpec() (*AssessmentResponseHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &AssessmentResponseHistory{config: arhc.config}
		_spec = sqlgraph.NewCreateSpec(assessmentresponsehistory.Table, sqlgraph.NewFieldSpec(assessmentresponsehistory.FieldID, field.TypeString))
	)
	_spec.Schema = arhc.schemaConfig.AssessmentResponseHistory
	if id, ok := arhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := arhc.mutation.HistoryTime(); ok {
		_spec.SetField(assessmentresponsehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := arhc.mutation.Ref(); ok {
		_spec.SetField(assessmentresponsehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := arhc.mutation.Operation(); ok {
		_spec.SetField(assessmentresponsehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := arhc.mutation.CreatedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := arhc.mutation.UpdatedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := arhc.mutation.CreatedBy(); ok {
		_spec.SetField(assessmentresponsehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := arhc.mutation.UpdatedBy(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := arhc.mutation.DeletedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := arhc.mutation.DeletedBy(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := arhc.mutation.Tags(); ok {
		_spec.SetField(assessmentresponsehistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := arhc.mutation.AssessmentID(); ok {
		_spec.SetField(assessmentresponsehistory.FieldAssessmentID, field.TypeString, value)
		_node.AssessmentID = value
	}
	if value, ok := arhc.mutation.UserID(); ok {
		_spec.SetField(assessmentresponsehistory.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := arhc.mutation.Status(); ok {
		_spec.SetField(assessmentresponsehistory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := arhc.mutation.AssignedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldAssignedAt, field.TypeTime, value)
		_node.AssignedAt = value
	}
	if value, ok := arhc.mutation.StartedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := arhc.mutation.CompletedAt(); ok {
		_spec.SetField(assessmentresponsehistory.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if value, ok := arhc.mutation.DueDate(); ok {
		_spec.SetField(assessmentresponsehistory.FieldDueDate, field.TypeTime, value)
		_node.DueDate = value
	}
	return _node, _spec
}

// AssessmentResponseHistoryCreateBulk is the builder for creating many AssessmentResponseHistory entities in bulk.
type AssessmentResponseHistoryCreateBulk struct {
	config
	err      error
	builders []*AssessmentResponseHistoryCreate
}

// Save creates the AssessmentResponseHistory entities in the database.
func (arhcb *AssessmentResponseHistoryCreateBulk) Save(ctx context.Context) ([]*AssessmentResponseHistory, error) {
	if arhcb.err != nil {
		return nil, arhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arhcb.builders))
	nodes := make([]*AssessmentResponseHistory, len(arhcb.builders))
	mutators := make([]Mutator, len(arhcb.builders))
	for i := range arhcb.builders {
		func(i int, root context.Context) {
			builder := arhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AssessmentResponseHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arhcb *AssessmentResponseHistoryCreateBulk) SaveX(ctx context.Context) []*AssessmentResponseHistory {
	v, err := arhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arhcb *AssessmentResponseHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := arhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arhcb *AssessmentResponseHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := arhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
