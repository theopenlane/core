// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/impersonationeventhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ImpersonationEventHistoryCreate is the builder for creating a ImpersonationEventHistory entity.
type ImpersonationEventHistoryCreate struct {
	config
	mutation *ImpersonationEventHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (_c *ImpersonationEventHistoryCreate) SetHistoryTime(v time.Time) *ImpersonationEventHistoryCreate {
	_c.mutation.SetHistoryTime(v)
	return _c
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (_c *ImpersonationEventHistoryCreate) SetNillableHistoryTime(v *time.Time) *ImpersonationEventHistoryCreate {
	if v != nil {
		_c.SetHistoryTime(*v)
	}
	return _c
}

// SetRef sets the "ref" field.
func (_c *ImpersonationEventHistoryCreate) SetRef(v string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetRef(v)
	return _c
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (_c *ImpersonationEventHistoryCreate) SetNillableRef(v *string) *ImpersonationEventHistoryCreate {
	if v != nil {
		_c.SetRef(*v)
	}
	return _c
}

// SetOperation sets the "operation" field.
func (_c *ImpersonationEventHistoryCreate) SetOperation(v history.OpType) *ImpersonationEventHistoryCreate {
	_c.mutation.SetOperation(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ImpersonationEventHistoryCreate) SetCreatedAt(v time.Time) *ImpersonationEventHistoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ImpersonationEventHistoryCreate) SetNillableCreatedAt(v *time.Time) *ImpersonationEventHistoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ImpersonationEventHistoryCreate) SetUpdatedAt(v time.Time) *ImpersonationEventHistoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ImpersonationEventHistoryCreate) SetNillableUpdatedAt(v *time.Time) *ImpersonationEventHistoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *ImpersonationEventHistoryCreate) SetCreatedBy(v string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *ImpersonationEventHistoryCreate) SetNillableCreatedBy(v *string) *ImpersonationEventHistoryCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *ImpersonationEventHistoryCreate) SetUpdatedBy(v string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *ImpersonationEventHistoryCreate) SetNillableUpdatedBy(v *string) *ImpersonationEventHistoryCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *ImpersonationEventHistoryCreate) SetDeletedAt(v time.Time) *ImpersonationEventHistoryCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *ImpersonationEventHistoryCreate) SetNillableDeletedAt(v *time.Time) *ImpersonationEventHistoryCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *ImpersonationEventHistoryCreate) SetDeletedBy(v string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *ImpersonationEventHistoryCreate) SetNillableDeletedBy(v *string) *ImpersonationEventHistoryCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *ImpersonationEventHistoryCreate) SetTags(v []string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetImpersonationType sets the "impersonation_type" field.
func (_c *ImpersonationEventHistoryCreate) SetImpersonationType(v enums.ImpersonationType) *ImpersonationEventHistoryCreate {
	_c.mutation.SetImpersonationType(v)
	return _c
}

// SetAction sets the "action" field.
func (_c *ImpersonationEventHistoryCreate) SetAction(v enums.ImpersonationAction) *ImpersonationEventHistoryCreate {
	_c.mutation.SetAction(v)
	return _c
}

// SetReason sets the "reason" field.
func (_c *ImpersonationEventHistoryCreate) SetReason(v string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetReason(v)
	return _c
}

// SetNillableReason sets the "reason" field if the given value is not nil.
func (_c *ImpersonationEventHistoryCreate) SetNillableReason(v *string) *ImpersonationEventHistoryCreate {
	if v != nil {
		_c.SetReason(*v)
	}
	return _c
}

// SetIPAddress sets the "ip_address" field.
func (_c *ImpersonationEventHistoryCreate) SetIPAddress(v string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetIPAddress(v)
	return _c
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (_c *ImpersonationEventHistoryCreate) SetNillableIPAddress(v *string) *ImpersonationEventHistoryCreate {
	if v != nil {
		_c.SetIPAddress(*v)
	}
	return _c
}

// SetUserAgent sets the "user_agent" field.
func (_c *ImpersonationEventHistoryCreate) SetUserAgent(v string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetUserAgent(v)
	return _c
}

// SetNillableUserAgent sets the "user_agent" field if the given value is not nil.
func (_c *ImpersonationEventHistoryCreate) SetNillableUserAgent(v *string) *ImpersonationEventHistoryCreate {
	if v != nil {
		_c.SetUserAgent(*v)
	}
	return _c
}

// SetScopes sets the "scopes" field.
func (_c *ImpersonationEventHistoryCreate) SetScopes(v []string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetScopes(v)
	return _c
}

// SetUserID sets the "user_id" field.
func (_c *ImpersonationEventHistoryCreate) SetUserID(v string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetOrganizationID sets the "organization_id" field.
func (_c *ImpersonationEventHistoryCreate) SetOrganizationID(v string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetOrganizationID(v)
	return _c
}

// SetTargetUserID sets the "target_user_id" field.
func (_c *ImpersonationEventHistoryCreate) SetTargetUserID(v string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetTargetUserID(v)
	return _c
}

// SetID sets the "id" field.
func (_c *ImpersonationEventHistoryCreate) SetID(v string) *ImpersonationEventHistoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ImpersonationEventHistoryCreate) SetNillableID(v *string) *ImpersonationEventHistoryCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the ImpersonationEventHistoryMutation object of the builder.
func (_c *ImpersonationEventHistoryCreate) Mutation() *ImpersonationEventHistoryMutation {
	return _c.mutation
}

// Save creates the ImpersonationEventHistory in the database.
func (_c *ImpersonationEventHistoryCreate) Save(ctx context.Context) (*ImpersonationEventHistory, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ImpersonationEventHistoryCreate) SaveX(ctx context.Context) *ImpersonationEventHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ImpersonationEventHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ImpersonationEventHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ImpersonationEventHistoryCreate) defaults() {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		v := impersonationeventhistory.DefaultHistoryTime()
		_c.mutation.SetHistoryTime(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := impersonationeventhistory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := impersonationeventhistory.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := impersonationeventhistory.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := impersonationeventhistory.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ImpersonationEventHistoryCreate) check() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "ImpersonationEventHistory.history_time"`)}
	}
	if _, ok := _c.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "ImpersonationEventHistory.operation"`)}
	}
	if v, ok := _c.mutation.Operation(); ok {
		if err := impersonationeventhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "ImpersonationEventHistory.operation": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ImpersonationType(); !ok {
		return &ValidationError{Name: "impersonation_type", err: errors.New(`generated: missing required field "ImpersonationEventHistory.impersonation_type"`)}
	}
	if v, ok := _c.mutation.ImpersonationType(); ok {
		if err := impersonationeventhistory.ImpersonationTypeValidator(v); err != nil {
			return &ValidationError{Name: "impersonation_type", err: fmt.Errorf(`generated: validator failed for field "ImpersonationEventHistory.impersonation_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Action(); !ok {
		return &ValidationError{Name: "action", err: errors.New(`generated: missing required field "ImpersonationEventHistory.action"`)}
	}
	if v, ok := _c.mutation.Action(); ok {
		if err := impersonationeventhistory.ActionValidator(v); err != nil {
			return &ValidationError{Name: "action", err: fmt.Errorf(`generated: validator failed for field "ImpersonationEventHistory.action": %w`, err)}
		}
	}
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`generated: missing required field "ImpersonationEventHistory.user_id"`)}
	}
	if _, ok := _c.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`generated: missing required field "ImpersonationEventHistory.organization_id"`)}
	}
	if _, ok := _c.mutation.TargetUserID(); !ok {
		return &ValidationError{Name: "target_user_id", err: errors.New(`generated: missing required field "ImpersonationEventHistory.target_user_id"`)}
	}
	return nil
}

func (_c *ImpersonationEventHistoryCreate) sqlSave(ctx context.Context) (*ImpersonationEventHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ImpersonationEventHistory.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ImpersonationEventHistoryCreate) createSpec() (*ImpersonationEventHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ImpersonationEventHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(impersonationeventhistory.Table, sqlgraph.NewFieldSpec(impersonationeventhistory.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.ImpersonationEventHistory
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.HistoryTime(); ok {
		_spec.SetField(impersonationeventhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := _c.mutation.Ref(); ok {
		_spec.SetField(impersonationeventhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := _c.mutation.Operation(); ok {
		_spec.SetField(impersonationeventhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(impersonationeventhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(impersonationeventhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(impersonationeventhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(impersonationeventhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(impersonationeventhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(impersonationeventhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(impersonationeventhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.ImpersonationType(); ok {
		_spec.SetField(impersonationeventhistory.FieldImpersonationType, field.TypeEnum, value)
		_node.ImpersonationType = value
	}
	if value, ok := _c.mutation.Action(); ok {
		_spec.SetField(impersonationeventhistory.FieldAction, field.TypeEnum, value)
		_node.Action = value
	}
	if value, ok := _c.mutation.Reason(); ok {
		_spec.SetField(impersonationeventhistory.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if value, ok := _c.mutation.IPAddress(); ok {
		_spec.SetField(impersonationeventhistory.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := _c.mutation.UserAgent(); ok {
		_spec.SetField(impersonationeventhistory.FieldUserAgent, field.TypeString, value)
		_node.UserAgent = value
	}
	if value, ok := _c.mutation.Scopes(); ok {
		_spec.SetField(impersonationeventhistory.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(impersonationeventhistory.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := _c.mutation.OrganizationID(); ok {
		_spec.SetField(impersonationeventhistory.FieldOrganizationID, field.TypeString, value)
		_node.OrganizationID = value
	}
	if value, ok := _c.mutation.TargetUserID(); ok {
		_spec.SetField(impersonationeventhistory.FieldTargetUserID, field.TypeString, value)
		_node.TargetUserID = value
	}
	return _node, _spec
}

// ImpersonationEventHistoryCreateBulk is the builder for creating many ImpersonationEventHistory entities in bulk.
type ImpersonationEventHistoryCreateBulk struct {
	config
	err      error
	builders []*ImpersonationEventHistoryCreate
}

// Save creates the ImpersonationEventHistory entities in the database.
func (_c *ImpersonationEventHistoryCreateBulk) Save(ctx context.Context) ([]*ImpersonationEventHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ImpersonationEventHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImpersonationEventHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ImpersonationEventHistoryCreateBulk) SaveX(ctx context.Context) []*ImpersonationEventHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ImpersonationEventHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ImpersonationEventHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
