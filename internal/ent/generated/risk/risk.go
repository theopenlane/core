// Code generated by ent, DO NOT EDIT.

package risk

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
)

const (
	// Label holds the string label denoting the risk type in the database.
	Label = "risk"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRiskType holds the string denoting the risk_type field in the database.
	FieldRiskType = "risk_type"
	// FieldBusinessCosts holds the string denoting the business_costs field in the database.
	FieldBusinessCosts = "business_costs"
	// FieldImpact holds the string denoting the impact field in the database.
	FieldImpact = "impact"
	// FieldLikelihood holds the string denoting the likelihood field in the database.
	FieldLikelihood = "likelihood"
	// FieldMitigation holds the string denoting the mitigation field in the database.
	FieldMitigation = "mitigation"
	// FieldSatisfies holds the string denoting the satisfies field in the database.
	FieldSatisfies = "satisfies"
	// FieldDetails holds the string denoting the details field in the database.
	FieldDetails = "details"
	// EdgeControl holds the string denoting the control edge name in mutations.
	EdgeControl = "control"
	// EdgeProcedure holds the string denoting the procedure edge name in mutations.
	EdgeProcedure = "procedure"
	// EdgeActionplans holds the string denoting the actionplans edge name in mutations.
	EdgeActionplans = "actionplans"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// Table holds the table name of the risk in the database.
	Table = "risks"
	// ControlTable is the table that holds the control relation/edge. The primary key declared below.
	ControlTable = "control_risks"
	// ControlInverseTable is the table name for the Control entity.
	// It exists in this package in order to avoid circular dependency with the "control" package.
	ControlInverseTable = "controls"
	// ProcedureTable is the table that holds the procedure relation/edge. The primary key declared below.
	ProcedureTable = "procedure_risks"
	// ProcedureInverseTable is the table name for the Procedure entity.
	// It exists in this package in order to avoid circular dependency with the "procedure" package.
	ProcedureInverseTable = "procedures"
	// ActionplansTable is the table that holds the actionplans relation/edge. The primary key declared below.
	ActionplansTable = "risk_actionplans"
	// ActionplansInverseTable is the table name for the ActionPlan entity.
	// It exists in this package in order to avoid circular dependency with the "actionplan" package.
	ActionplansInverseTable = "action_plans"
	// ProgramTable is the table that holds the program relation/edge. The primary key declared below.
	ProgramTable = "program_risks"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
)

// Columns holds all SQL columns for risk fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldMappingID,
	FieldTags,
	FieldName,
	FieldDescription,
	FieldStatus,
	FieldRiskType,
	FieldBusinessCosts,
	FieldImpact,
	FieldLikelihood,
	FieldMitigation,
	FieldSatisfies,
	FieldDetails,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "risks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"control_objective_risks",
}

var (
	// ControlPrimaryKey and ControlColumn2 are the table columns denoting the
	// primary key for the control relation (M2M).
	ControlPrimaryKey = []string{"control_id", "risk_id"}
	// ProcedurePrimaryKey and ProcedureColumn2 are the table columns denoting the
	// primary key for the procedure relation (M2M).
	ProcedurePrimaryKey = []string{"procedure_id", "risk_id"}
	// ActionplansPrimaryKey and ActionplansColumn2 are the table columns denoting the
	// primary key for the actionplans relation (M2M).
	ActionplansPrimaryKey = []string{"risk_id", "action_plan_id"}
	// ProgramPrimaryKey and ProgramColumn2 are the table columns denoting the
	// primary key for the program relation (M2M).
	ProgramPrimaryKey = []string{"program_id", "risk_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [2]ent.Hook
	Interceptors [1]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// ImpactValidator is a validator for the "impact" field enum values. It is called by the builders before save.
func ImpactValidator(i enums.RiskImpact) error {
	switch i.String() {
	case "LOW", "MODERATE", "HIGH":
		return nil
	default:
		return fmt.Errorf("risk: invalid enum value for impact field: %q", i)
	}
}

// LikelihoodValidator is a validator for the "likelihood" field enum values. It is called by the builders before save.
func LikelihoodValidator(l enums.RiskLikelihood) error {
	switch l.String() {
	case "UNLIKELY", "LIKELY", "HIGHLY_LIKELY":
		return nil
	default:
		return fmt.Errorf("risk: invalid enum value for likelihood field: %q", l)
	}
}

// OrderOption defines the ordering options for the Risk queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRiskType orders the results by the risk_type field.
func ByRiskType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiskType, opts...).ToFunc()
}

// ByBusinessCosts orders the results by the business_costs field.
func ByBusinessCosts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessCosts, opts...).ToFunc()
}

// ByImpact orders the results by the impact field.
func ByImpact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImpact, opts...).ToFunc()
}

// ByLikelihood orders the results by the likelihood field.
func ByLikelihood(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikelihood, opts...).ToFunc()
}

// ByMitigation orders the results by the mitigation field.
func ByMitigation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMitigation, opts...).ToFunc()
}

// BySatisfies orders the results by the satisfies field.
func BySatisfies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSatisfies, opts...).ToFunc()
}

// ByControlCount orders the results by control count.
func ByControlCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlStep(), opts...)
	}
}

// ByControl orders the results by control terms.
func ByControl(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProcedureCount orders the results by procedure count.
func ByProcedureCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProcedureStep(), opts...)
	}
}

// ByProcedure orders the results by procedure terms.
func ByProcedure(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProcedureStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActionplansCount orders the results by actionplans count.
func ByActionplansCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActionplansStep(), opts...)
	}
}

// ByActionplans orders the results by actionplans terms.
func ByActionplans(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActionplansStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramCount orders the results by program count.
func ByProgramCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramStep(), opts...)
	}
}

// ByProgram orders the results by program terms.
func ByProgram(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newControlStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ControlTable, ControlPrimaryKey...),
	)
}
func newProcedureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProcedureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProcedureTable, ProcedurePrimaryKey...),
	)
}
func newActionplansStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActionplansInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ActionplansTable, ActionplansPrimaryKey...),
	)
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProgramTable, ProgramPrimaryKey...),
	)
}

var (
	// enums.RiskImpact must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.RiskImpact)(nil)
	// enums.RiskImpact must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.RiskImpact)(nil)
)

var (
	// enums.RiskLikelihood must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.RiskLikelihood)(nil)
	// enums.RiskLikelihood must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.RiskLikelihood)(nil)
)
