// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/trustcentercompliance"
)

// TrustCenterComplianceCreate is the builder for creating a TrustCenterCompliance entity.
type TrustCenterComplianceCreate struct {
	config
	mutation *TrustCenterComplianceMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tccc *TrustCenterComplianceCreate) SetCreatedAt(t time.Time) *TrustCenterComplianceCreate {
	tccc.mutation.SetCreatedAt(t)
	return tccc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tccc *TrustCenterComplianceCreate) SetNillableCreatedAt(t *time.Time) *TrustCenterComplianceCreate {
	if t != nil {
		tccc.SetCreatedAt(*t)
	}
	return tccc
}

// SetUpdatedAt sets the "updated_at" field.
func (tccc *TrustCenterComplianceCreate) SetUpdatedAt(t time.Time) *TrustCenterComplianceCreate {
	tccc.mutation.SetUpdatedAt(t)
	return tccc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tccc *TrustCenterComplianceCreate) SetNillableUpdatedAt(t *time.Time) *TrustCenterComplianceCreate {
	if t != nil {
		tccc.SetUpdatedAt(*t)
	}
	return tccc
}

// SetCreatedBy sets the "created_by" field.
func (tccc *TrustCenterComplianceCreate) SetCreatedBy(s string) *TrustCenterComplianceCreate {
	tccc.mutation.SetCreatedBy(s)
	return tccc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tccc *TrustCenterComplianceCreate) SetNillableCreatedBy(s *string) *TrustCenterComplianceCreate {
	if s != nil {
		tccc.SetCreatedBy(*s)
	}
	return tccc
}

// SetUpdatedBy sets the "updated_by" field.
func (tccc *TrustCenterComplianceCreate) SetUpdatedBy(s string) *TrustCenterComplianceCreate {
	tccc.mutation.SetUpdatedBy(s)
	return tccc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tccc *TrustCenterComplianceCreate) SetNillableUpdatedBy(s *string) *TrustCenterComplianceCreate {
	if s != nil {
		tccc.SetUpdatedBy(*s)
	}
	return tccc
}

// SetDeletedAt sets the "deleted_at" field.
func (tccc *TrustCenterComplianceCreate) SetDeletedAt(t time.Time) *TrustCenterComplianceCreate {
	tccc.mutation.SetDeletedAt(t)
	return tccc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tccc *TrustCenterComplianceCreate) SetNillableDeletedAt(t *time.Time) *TrustCenterComplianceCreate {
	if t != nil {
		tccc.SetDeletedAt(*t)
	}
	return tccc
}

// SetDeletedBy sets the "deleted_by" field.
func (tccc *TrustCenterComplianceCreate) SetDeletedBy(s string) *TrustCenterComplianceCreate {
	tccc.mutation.SetDeletedBy(s)
	return tccc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tccc *TrustCenterComplianceCreate) SetNillableDeletedBy(s *string) *TrustCenterComplianceCreate {
	if s != nil {
		tccc.SetDeletedBy(*s)
	}
	return tccc
}

// SetTags sets the "tags" field.
func (tccc *TrustCenterComplianceCreate) SetTags(s []string) *TrustCenterComplianceCreate {
	tccc.mutation.SetTags(s)
	return tccc
}

// SetID sets the "id" field.
func (tccc *TrustCenterComplianceCreate) SetID(s string) *TrustCenterComplianceCreate {
	tccc.mutation.SetID(s)
	return tccc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tccc *TrustCenterComplianceCreate) SetNillableID(s *string) *TrustCenterComplianceCreate {
	if s != nil {
		tccc.SetID(*s)
	}
	return tccc
}

// Mutation returns the TrustCenterComplianceMutation object of the builder.
func (tccc *TrustCenterComplianceCreate) Mutation() *TrustCenterComplianceMutation {
	return tccc.mutation
}

// Save creates the TrustCenterCompliance in the database.
func (tccc *TrustCenterComplianceCreate) Save(ctx context.Context) (*TrustCenterCompliance, error) {
	if err := tccc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tccc.sqlSave, tccc.mutation, tccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tccc *TrustCenterComplianceCreate) SaveX(ctx context.Context) *TrustCenterCompliance {
	v, err := tccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccc *TrustCenterComplianceCreate) Exec(ctx context.Context) error {
	_, err := tccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccc *TrustCenterComplianceCreate) ExecX(ctx context.Context) {
	if err := tccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tccc *TrustCenterComplianceCreate) defaults() error {
	if _, ok := tccc.mutation.CreatedAt(); !ok {
		if trustcentercompliance.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentercompliance.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentercompliance.DefaultCreatedAt()
		tccc.mutation.SetCreatedAt(v)
	}
	if _, ok := tccc.mutation.UpdatedAt(); !ok {
		if trustcentercompliance.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentercompliance.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentercompliance.DefaultUpdatedAt()
		tccc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tccc.mutation.Tags(); !ok {
		v := trustcentercompliance.DefaultTags
		tccc.mutation.SetTags(v)
	}
	if _, ok := tccc.mutation.ID(); !ok {
		if trustcentercompliance.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized trustcentercompliance.DefaultID (forgotten import generated/runtime?)")
		}
		v := trustcentercompliance.DefaultID()
		tccc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tccc *TrustCenterComplianceCreate) check() error {
	return nil
}

func (tccc *TrustCenterComplianceCreate) sqlSave(ctx context.Context) (*TrustCenterCompliance, error) {
	if err := tccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TrustCenterCompliance.ID type: %T", _spec.ID.Value)
		}
	}
	tccc.mutation.id = &_node.ID
	tccc.mutation.done = true
	return _node, nil
}

func (tccc *TrustCenterComplianceCreate) createSpec() (*TrustCenterCompliance, *sqlgraph.CreateSpec) {
	var (
		_node = &TrustCenterCompliance{config: tccc.config}
		_spec = sqlgraph.NewCreateSpec(trustcentercompliance.Table, sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString))
	)
	_spec.Schema = tccc.schemaConfig.TrustCenterCompliance
	if id, ok := tccc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tccc.mutation.CreatedAt(); ok {
		_spec.SetField(trustcentercompliance.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tccc.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentercompliance.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tccc.mutation.CreatedBy(); ok {
		_spec.SetField(trustcentercompliance.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tccc.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentercompliance.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tccc.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentercompliance.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tccc.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentercompliance.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := tccc.mutation.Tags(); ok {
		_spec.SetField(trustcentercompliance.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	return _node, _spec
}

// TrustCenterComplianceCreateBulk is the builder for creating many TrustCenterCompliance entities in bulk.
type TrustCenterComplianceCreateBulk struct {
	config
	err      error
	builders []*TrustCenterComplianceCreate
}

// Save creates the TrustCenterCompliance entities in the database.
func (tcccb *TrustCenterComplianceCreateBulk) Save(ctx context.Context) ([]*TrustCenterCompliance, error) {
	if tcccb.err != nil {
		return nil, tcccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcccb.builders))
	nodes := make([]*TrustCenterCompliance, len(tcccb.builders))
	mutators := make([]Mutator, len(tcccb.builders))
	for i := range tcccb.builders {
		func(i int, root context.Context) {
			builder := tcccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrustCenterComplianceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcccb *TrustCenterComplianceCreateBulk) SaveX(ctx context.Context) []*TrustCenterCompliance {
	v, err := tcccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcccb *TrustCenterComplianceCreateBulk) Exec(ctx context.Context) error {
	_, err := tcccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcccb *TrustCenterComplianceCreateBulk) ExecX(ctx context.Context) {
	if err := tcccb.Exec(ctx); err != nil {
		panic(err)
	}
}
