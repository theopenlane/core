// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/mappabledomain"
)

// MappableDomain is the model entity for the MappableDomain schema.
type MappableDomain struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// Name of the mappable domain
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MappableDomainQuery when eager-loading is set.
	Edges        MappableDomainEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MappableDomainEdges holds the relations/edges for other nodes in the graph.
type MappableDomainEdges struct {
	// CustomDomains holds the value of the custom_domains edge.
	CustomDomains []*CustomDomain `json:"custom_domains,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedCustomDomains map[string][]*CustomDomain
}

// CustomDomainsOrErr returns the CustomDomains value or an error if the edge
// was not loaded in eager-loading.
func (e MappableDomainEdges) CustomDomainsOrErr() ([]*CustomDomain, error) {
	if e.loadedTypes[0] {
		return e.CustomDomains, nil
	}
	return nil, &NotLoadedError{edge: "custom_domains"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MappableDomain) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mappabledomain.FieldTags:
			values[i] = new([]byte)
		case mappabledomain.FieldID, mappabledomain.FieldCreatedBy, mappabledomain.FieldUpdatedBy, mappabledomain.FieldDeletedBy, mappabledomain.FieldName:
			values[i] = new(sql.NullString)
		case mappabledomain.FieldCreatedAt, mappabledomain.FieldUpdatedAt, mappabledomain.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MappableDomain fields.
func (md *MappableDomain) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mappabledomain.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				md.ID = value.String
			}
		case mappabledomain.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				md.CreatedAt = value.Time
			}
		case mappabledomain.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				md.UpdatedAt = value.Time
			}
		case mappabledomain.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				md.CreatedBy = value.String
			}
		case mappabledomain.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				md.UpdatedBy = value.String
			}
		case mappabledomain.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				md.DeletedAt = value.Time
			}
		case mappabledomain.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				md.DeletedBy = value.String
			}
		case mappabledomain.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &md.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case mappabledomain.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				md.Name = value.String
			}
		default:
			md.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MappableDomain.
// This includes values selected through modifiers, order, etc.
func (md *MappableDomain) Value(name string) (ent.Value, error) {
	return md.selectValues.Get(name)
}

// QueryCustomDomains queries the "custom_domains" edge of the MappableDomain entity.
func (md *MappableDomain) QueryCustomDomains() *CustomDomainQuery {
	return NewMappableDomainClient(md.config).QueryCustomDomains(md)
}

// Update returns a builder for updating this MappableDomain.
// Note that you need to call MappableDomain.Unwrap() before calling this method if this MappableDomain
// was returned from a transaction, and the transaction was committed or rolled back.
func (md *MappableDomain) Update() *MappableDomainUpdateOne {
	return NewMappableDomainClient(md.config).UpdateOne(md)
}

// Unwrap unwraps the MappableDomain entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (md *MappableDomain) Unwrap() *MappableDomain {
	_tx, ok := md.config.driver.(*txDriver)
	if !ok {
		panic("generated: MappableDomain is not a transactional entity")
	}
	md.config.driver = _tx.drv
	return md
}

// String implements the fmt.Stringer.
func (md *MappableDomain) String() string {
	var builder strings.Builder
	builder.WriteString("MappableDomain(")
	builder.WriteString(fmt.Sprintf("id=%v, ", md.ID))
	builder.WriteString("created_at=")
	builder.WriteString(md.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(md.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(md.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(md.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(md.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(md.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", md.Tags))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(md.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCustomDomains returns the CustomDomains named value or an error if the edge was not
// loaded in eager-loading with this name.
func (md *MappableDomain) NamedCustomDomains(name string) ([]*CustomDomain, error) {
	if md.Edges.namedCustomDomains == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := md.Edges.namedCustomDomains[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (md *MappableDomain) appendNamedCustomDomains(name string, edges ...*CustomDomain) {
	if md.Edges.namedCustomDomains == nil {
		md.Edges.namedCustomDomains = make(map[string][]*CustomDomain)
	}
	if len(edges) == 0 {
		md.Edges.namedCustomDomains[name] = []*CustomDomain{}
	} else {
		md.Edges.namedCustomDomains[name] = append(md.Edges.namedCustomDomains[name], edges...)
	}
}

// MappableDomains is a parsable slice of MappableDomain.
type MappableDomains []*MappableDomain
