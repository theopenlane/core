// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/taskhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TaskHistoryUpdate is the builder for updating TaskHistory entities.
type TaskHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskHistoryUpdate builder.
func (thu *TaskHistoryUpdate) Where(ps ...predicate.TaskHistory) *TaskHistoryUpdate {
	thu.mutation.Where(ps...)
	return thu
}

// SetUpdatedAt sets the "updated_at" field.
func (thu *TaskHistoryUpdate) SetUpdatedAt(t time.Time) *TaskHistoryUpdate {
	thu.mutation.SetUpdatedAt(t)
	return thu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (thu *TaskHistoryUpdate) ClearUpdatedAt() *TaskHistoryUpdate {
	thu.mutation.ClearUpdatedAt()
	return thu
}

// SetUpdatedBy sets the "updated_by" field.
func (thu *TaskHistoryUpdate) SetUpdatedBy(s string) *TaskHistoryUpdate {
	thu.mutation.SetUpdatedBy(s)
	return thu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableUpdatedBy(s *string) *TaskHistoryUpdate {
	if s != nil {
		thu.SetUpdatedBy(*s)
	}
	return thu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (thu *TaskHistoryUpdate) ClearUpdatedBy() *TaskHistoryUpdate {
	thu.mutation.ClearUpdatedBy()
	return thu
}

// SetDeletedAt sets the "deleted_at" field.
func (thu *TaskHistoryUpdate) SetDeletedAt(t time.Time) *TaskHistoryUpdate {
	thu.mutation.SetDeletedAt(t)
	return thu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableDeletedAt(t *time.Time) *TaskHistoryUpdate {
	if t != nil {
		thu.SetDeletedAt(*t)
	}
	return thu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (thu *TaskHistoryUpdate) ClearDeletedAt() *TaskHistoryUpdate {
	thu.mutation.ClearDeletedAt()
	return thu
}

// SetDeletedBy sets the "deleted_by" field.
func (thu *TaskHistoryUpdate) SetDeletedBy(s string) *TaskHistoryUpdate {
	thu.mutation.SetDeletedBy(s)
	return thu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableDeletedBy(s *string) *TaskHistoryUpdate {
	if s != nil {
		thu.SetDeletedBy(*s)
	}
	return thu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (thu *TaskHistoryUpdate) ClearDeletedBy() *TaskHistoryUpdate {
	thu.mutation.ClearDeletedBy()
	return thu
}

// SetTags sets the "tags" field.
func (thu *TaskHistoryUpdate) SetTags(s []string) *TaskHistoryUpdate {
	thu.mutation.SetTags(s)
	return thu
}

// AppendTags appends s to the "tags" field.
func (thu *TaskHistoryUpdate) AppendTags(s []string) *TaskHistoryUpdate {
	thu.mutation.AppendTags(s)
	return thu
}

// ClearTags clears the value of the "tags" field.
func (thu *TaskHistoryUpdate) ClearTags() *TaskHistoryUpdate {
	thu.mutation.ClearTags()
	return thu
}

// SetTitle sets the "title" field.
func (thu *TaskHistoryUpdate) SetTitle(s string) *TaskHistoryUpdate {
	thu.mutation.SetTitle(s)
	return thu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableTitle(s *string) *TaskHistoryUpdate {
	if s != nil {
		thu.SetTitle(*s)
	}
	return thu
}

// SetDescription sets the "description" field.
func (thu *TaskHistoryUpdate) SetDescription(s string) *TaskHistoryUpdate {
	thu.mutation.SetDescription(s)
	return thu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableDescription(s *string) *TaskHistoryUpdate {
	if s != nil {
		thu.SetDescription(*s)
	}
	return thu
}

// ClearDescription clears the value of the "description" field.
func (thu *TaskHistoryUpdate) ClearDescription() *TaskHistoryUpdate {
	thu.mutation.ClearDescription()
	return thu
}

// SetDetails sets the "details" field.
func (thu *TaskHistoryUpdate) SetDetails(s string) *TaskHistoryUpdate {
	thu.mutation.SetDetails(s)
	return thu
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableDetails(s *string) *TaskHistoryUpdate {
	if s != nil {
		thu.SetDetails(*s)
	}
	return thu
}

// ClearDetails clears the value of the "details" field.
func (thu *TaskHistoryUpdate) ClearDetails() *TaskHistoryUpdate {
	thu.mutation.ClearDetails()
	return thu
}

// SetStatus sets the "status" field.
func (thu *TaskHistoryUpdate) SetStatus(es enums.TaskStatus) *TaskHistoryUpdate {
	thu.mutation.SetStatus(es)
	return thu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableStatus(es *enums.TaskStatus) *TaskHistoryUpdate {
	if es != nil {
		thu.SetStatus(*es)
	}
	return thu
}

// SetCategory sets the "category" field.
func (thu *TaskHistoryUpdate) SetCategory(s string) *TaskHistoryUpdate {
	thu.mutation.SetCategory(s)
	return thu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableCategory(s *string) *TaskHistoryUpdate {
	if s != nil {
		thu.SetCategory(*s)
	}
	return thu
}

// ClearCategory clears the value of the "category" field.
func (thu *TaskHistoryUpdate) ClearCategory() *TaskHistoryUpdate {
	thu.mutation.ClearCategory()
	return thu
}

// SetDue sets the "due" field.
func (thu *TaskHistoryUpdate) SetDue(mt models.DateTime) *TaskHistoryUpdate {
	thu.mutation.SetDue(mt)
	return thu
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableDue(mt *models.DateTime) *TaskHistoryUpdate {
	if mt != nil {
		thu.SetDue(*mt)
	}
	return thu
}

// ClearDue clears the value of the "due" field.
func (thu *TaskHistoryUpdate) ClearDue() *TaskHistoryUpdate {
	thu.mutation.ClearDue()
	return thu
}

// SetCompleted sets the "completed" field.
func (thu *TaskHistoryUpdate) SetCompleted(mt models.DateTime) *TaskHistoryUpdate {
	thu.mutation.SetCompleted(mt)
	return thu
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableCompleted(mt *models.DateTime) *TaskHistoryUpdate {
	if mt != nil {
		thu.SetCompleted(*mt)
	}
	return thu
}

// ClearCompleted clears the value of the "completed" field.
func (thu *TaskHistoryUpdate) ClearCompleted() *TaskHistoryUpdate {
	thu.mutation.ClearCompleted()
	return thu
}

// SetAssigneeID sets the "assignee_id" field.
func (thu *TaskHistoryUpdate) SetAssigneeID(s string) *TaskHistoryUpdate {
	thu.mutation.SetAssigneeID(s)
	return thu
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableAssigneeID(s *string) *TaskHistoryUpdate {
	if s != nil {
		thu.SetAssigneeID(*s)
	}
	return thu
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (thu *TaskHistoryUpdate) ClearAssigneeID() *TaskHistoryUpdate {
	thu.mutation.ClearAssigneeID()
	return thu
}

// SetAssignerID sets the "assigner_id" field.
func (thu *TaskHistoryUpdate) SetAssignerID(s string) *TaskHistoryUpdate {
	thu.mutation.SetAssignerID(s)
	return thu
}

// SetNillableAssignerID sets the "assigner_id" field if the given value is not nil.
func (thu *TaskHistoryUpdate) SetNillableAssignerID(s *string) *TaskHistoryUpdate {
	if s != nil {
		thu.SetAssignerID(*s)
	}
	return thu
}

// ClearAssignerID clears the value of the "assigner_id" field.
func (thu *TaskHistoryUpdate) ClearAssignerID() *TaskHistoryUpdate {
	thu.mutation.ClearAssignerID()
	return thu
}

// Mutation returns the TaskHistoryMutation object of the builder.
func (thu *TaskHistoryUpdate) Mutation() *TaskHistoryMutation {
	return thu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (thu *TaskHistoryUpdate) Save(ctx context.Context) (int, error) {
	thu.defaults()
	return withHooks(ctx, thu.sqlSave, thu.mutation, thu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thu *TaskHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := thu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (thu *TaskHistoryUpdate) Exec(ctx context.Context) error {
	_, err := thu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thu *TaskHistoryUpdate) ExecX(ctx context.Context) {
	if err := thu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thu *TaskHistoryUpdate) defaults() {
	if _, ok := thu.mutation.UpdatedAt(); !ok && !thu.mutation.UpdatedAtCleared() {
		v := taskhistory.UpdateDefaultUpdatedAt()
		thu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thu *TaskHistoryUpdate) check() error {
	if v, ok := thu.mutation.Status(); ok {
		if err := taskhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "TaskHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (thu *TaskHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskHistoryUpdate {
	thu.modifiers = append(thu.modifiers, modifiers...)
	return thu
}

func (thu *TaskHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := thu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskhistory.Table, taskhistory.Columns, sqlgraph.NewFieldSpec(taskhistory.FieldID, field.TypeString))
	if ps := thu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if thu.mutation.RefCleared() {
		_spec.ClearField(taskhistory.FieldRef, field.TypeString)
	}
	if thu.mutation.CreatedAtCleared() {
		_spec.ClearField(taskhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := thu.mutation.UpdatedAt(); ok {
		_spec.SetField(taskhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if thu.mutation.UpdatedAtCleared() {
		_spec.ClearField(taskhistory.FieldUpdatedAt, field.TypeTime)
	}
	if thu.mutation.CreatedByCleared() {
		_spec.ClearField(taskhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := thu.mutation.UpdatedBy(); ok {
		_spec.SetField(taskhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if thu.mutation.UpdatedByCleared() {
		_spec.ClearField(taskhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := thu.mutation.DeletedAt(); ok {
		_spec.SetField(taskhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if thu.mutation.DeletedAtCleared() {
		_spec.ClearField(taskhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := thu.mutation.DeletedBy(); ok {
		_spec.SetField(taskhistory.FieldDeletedBy, field.TypeString, value)
	}
	if thu.mutation.DeletedByCleared() {
		_spec.ClearField(taskhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := thu.mutation.Tags(); ok {
		_spec.SetField(taskhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := thu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, taskhistory.FieldTags, value)
		})
	}
	if thu.mutation.TagsCleared() {
		_spec.ClearField(taskhistory.FieldTags, field.TypeJSON)
	}
	if thu.mutation.OwnerIDCleared() {
		_spec.ClearField(taskhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := thu.mutation.Title(); ok {
		_spec.SetField(taskhistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := thu.mutation.Description(); ok {
		_spec.SetField(taskhistory.FieldDescription, field.TypeString, value)
	}
	if thu.mutation.DescriptionCleared() {
		_spec.ClearField(taskhistory.FieldDescription, field.TypeString)
	}
	if value, ok := thu.mutation.Details(); ok {
		_spec.SetField(taskhistory.FieldDetails, field.TypeString, value)
	}
	if thu.mutation.DetailsCleared() {
		_spec.ClearField(taskhistory.FieldDetails, field.TypeString)
	}
	if value, ok := thu.mutation.Status(); ok {
		_spec.SetField(taskhistory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := thu.mutation.Category(); ok {
		_spec.SetField(taskhistory.FieldCategory, field.TypeString, value)
	}
	if thu.mutation.CategoryCleared() {
		_spec.ClearField(taskhistory.FieldCategory, field.TypeString)
	}
	if value, ok := thu.mutation.Due(); ok {
		_spec.SetField(taskhistory.FieldDue, field.TypeTime, value)
	}
	if thu.mutation.DueCleared() {
		_spec.ClearField(taskhistory.FieldDue, field.TypeTime)
	}
	if value, ok := thu.mutation.Completed(); ok {
		_spec.SetField(taskhistory.FieldCompleted, field.TypeTime, value)
	}
	if thu.mutation.CompletedCleared() {
		_spec.ClearField(taskhistory.FieldCompleted, field.TypeTime)
	}
	if value, ok := thu.mutation.AssigneeID(); ok {
		_spec.SetField(taskhistory.FieldAssigneeID, field.TypeString, value)
	}
	if thu.mutation.AssigneeIDCleared() {
		_spec.ClearField(taskhistory.FieldAssigneeID, field.TypeString)
	}
	if value, ok := thu.mutation.AssignerID(); ok {
		_spec.SetField(taskhistory.FieldAssignerID, field.TypeString, value)
	}
	if thu.mutation.AssignerIDCleared() {
		_spec.ClearField(taskhistory.FieldAssignerID, field.TypeString)
	}
	_spec.Node.Schema = thu.schemaConfig.TaskHistory
	ctx = internal.NewSchemaConfigContext(ctx, thu.schemaConfig)
	_spec.AddModifiers(thu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, thu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	thu.mutation.done = true
	return n, nil
}

// TaskHistoryUpdateOne is the builder for updating a single TaskHistory entity.
type TaskHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (thuo *TaskHistoryUpdateOne) SetUpdatedAt(t time.Time) *TaskHistoryUpdateOne {
	thuo.mutation.SetUpdatedAt(t)
	return thuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (thuo *TaskHistoryUpdateOne) ClearUpdatedAt() *TaskHistoryUpdateOne {
	thuo.mutation.ClearUpdatedAt()
	return thuo
}

// SetUpdatedBy sets the "updated_by" field.
func (thuo *TaskHistoryUpdateOne) SetUpdatedBy(s string) *TaskHistoryUpdateOne {
	thuo.mutation.SetUpdatedBy(s)
	return thuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableUpdatedBy(s *string) *TaskHistoryUpdateOne {
	if s != nil {
		thuo.SetUpdatedBy(*s)
	}
	return thuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (thuo *TaskHistoryUpdateOne) ClearUpdatedBy() *TaskHistoryUpdateOne {
	thuo.mutation.ClearUpdatedBy()
	return thuo
}

// SetDeletedAt sets the "deleted_at" field.
func (thuo *TaskHistoryUpdateOne) SetDeletedAt(t time.Time) *TaskHistoryUpdateOne {
	thuo.mutation.SetDeletedAt(t)
	return thuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *TaskHistoryUpdateOne {
	if t != nil {
		thuo.SetDeletedAt(*t)
	}
	return thuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (thuo *TaskHistoryUpdateOne) ClearDeletedAt() *TaskHistoryUpdateOne {
	thuo.mutation.ClearDeletedAt()
	return thuo
}

// SetDeletedBy sets the "deleted_by" field.
func (thuo *TaskHistoryUpdateOne) SetDeletedBy(s string) *TaskHistoryUpdateOne {
	thuo.mutation.SetDeletedBy(s)
	return thuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableDeletedBy(s *string) *TaskHistoryUpdateOne {
	if s != nil {
		thuo.SetDeletedBy(*s)
	}
	return thuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (thuo *TaskHistoryUpdateOne) ClearDeletedBy() *TaskHistoryUpdateOne {
	thuo.mutation.ClearDeletedBy()
	return thuo
}

// SetTags sets the "tags" field.
func (thuo *TaskHistoryUpdateOne) SetTags(s []string) *TaskHistoryUpdateOne {
	thuo.mutation.SetTags(s)
	return thuo
}

// AppendTags appends s to the "tags" field.
func (thuo *TaskHistoryUpdateOne) AppendTags(s []string) *TaskHistoryUpdateOne {
	thuo.mutation.AppendTags(s)
	return thuo
}

// ClearTags clears the value of the "tags" field.
func (thuo *TaskHistoryUpdateOne) ClearTags() *TaskHistoryUpdateOne {
	thuo.mutation.ClearTags()
	return thuo
}

// SetTitle sets the "title" field.
func (thuo *TaskHistoryUpdateOne) SetTitle(s string) *TaskHistoryUpdateOne {
	thuo.mutation.SetTitle(s)
	return thuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableTitle(s *string) *TaskHistoryUpdateOne {
	if s != nil {
		thuo.SetTitle(*s)
	}
	return thuo
}

// SetDescription sets the "description" field.
func (thuo *TaskHistoryUpdateOne) SetDescription(s string) *TaskHistoryUpdateOne {
	thuo.mutation.SetDescription(s)
	return thuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableDescription(s *string) *TaskHistoryUpdateOne {
	if s != nil {
		thuo.SetDescription(*s)
	}
	return thuo
}

// ClearDescription clears the value of the "description" field.
func (thuo *TaskHistoryUpdateOne) ClearDescription() *TaskHistoryUpdateOne {
	thuo.mutation.ClearDescription()
	return thuo
}

// SetDetails sets the "details" field.
func (thuo *TaskHistoryUpdateOne) SetDetails(s string) *TaskHistoryUpdateOne {
	thuo.mutation.SetDetails(s)
	return thuo
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableDetails(s *string) *TaskHistoryUpdateOne {
	if s != nil {
		thuo.SetDetails(*s)
	}
	return thuo
}

// ClearDetails clears the value of the "details" field.
func (thuo *TaskHistoryUpdateOne) ClearDetails() *TaskHistoryUpdateOne {
	thuo.mutation.ClearDetails()
	return thuo
}

// SetStatus sets the "status" field.
func (thuo *TaskHistoryUpdateOne) SetStatus(es enums.TaskStatus) *TaskHistoryUpdateOne {
	thuo.mutation.SetStatus(es)
	return thuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableStatus(es *enums.TaskStatus) *TaskHistoryUpdateOne {
	if es != nil {
		thuo.SetStatus(*es)
	}
	return thuo
}

// SetCategory sets the "category" field.
func (thuo *TaskHistoryUpdateOne) SetCategory(s string) *TaskHistoryUpdateOne {
	thuo.mutation.SetCategory(s)
	return thuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableCategory(s *string) *TaskHistoryUpdateOne {
	if s != nil {
		thuo.SetCategory(*s)
	}
	return thuo
}

// ClearCategory clears the value of the "category" field.
func (thuo *TaskHistoryUpdateOne) ClearCategory() *TaskHistoryUpdateOne {
	thuo.mutation.ClearCategory()
	return thuo
}

// SetDue sets the "due" field.
func (thuo *TaskHistoryUpdateOne) SetDue(mt models.DateTime) *TaskHistoryUpdateOne {
	thuo.mutation.SetDue(mt)
	return thuo
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableDue(mt *models.DateTime) *TaskHistoryUpdateOne {
	if mt != nil {
		thuo.SetDue(*mt)
	}
	return thuo
}

// ClearDue clears the value of the "due" field.
func (thuo *TaskHistoryUpdateOne) ClearDue() *TaskHistoryUpdateOne {
	thuo.mutation.ClearDue()
	return thuo
}

// SetCompleted sets the "completed" field.
func (thuo *TaskHistoryUpdateOne) SetCompleted(mt models.DateTime) *TaskHistoryUpdateOne {
	thuo.mutation.SetCompleted(mt)
	return thuo
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableCompleted(mt *models.DateTime) *TaskHistoryUpdateOne {
	if mt != nil {
		thuo.SetCompleted(*mt)
	}
	return thuo
}

// ClearCompleted clears the value of the "completed" field.
func (thuo *TaskHistoryUpdateOne) ClearCompleted() *TaskHistoryUpdateOne {
	thuo.mutation.ClearCompleted()
	return thuo
}

// SetAssigneeID sets the "assignee_id" field.
func (thuo *TaskHistoryUpdateOne) SetAssigneeID(s string) *TaskHistoryUpdateOne {
	thuo.mutation.SetAssigneeID(s)
	return thuo
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableAssigneeID(s *string) *TaskHistoryUpdateOne {
	if s != nil {
		thuo.SetAssigneeID(*s)
	}
	return thuo
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (thuo *TaskHistoryUpdateOne) ClearAssigneeID() *TaskHistoryUpdateOne {
	thuo.mutation.ClearAssigneeID()
	return thuo
}

// SetAssignerID sets the "assigner_id" field.
func (thuo *TaskHistoryUpdateOne) SetAssignerID(s string) *TaskHistoryUpdateOne {
	thuo.mutation.SetAssignerID(s)
	return thuo
}

// SetNillableAssignerID sets the "assigner_id" field if the given value is not nil.
func (thuo *TaskHistoryUpdateOne) SetNillableAssignerID(s *string) *TaskHistoryUpdateOne {
	if s != nil {
		thuo.SetAssignerID(*s)
	}
	return thuo
}

// ClearAssignerID clears the value of the "assigner_id" field.
func (thuo *TaskHistoryUpdateOne) ClearAssignerID() *TaskHistoryUpdateOne {
	thuo.mutation.ClearAssignerID()
	return thuo
}

// Mutation returns the TaskHistoryMutation object of the builder.
func (thuo *TaskHistoryUpdateOne) Mutation() *TaskHistoryMutation {
	return thuo.mutation
}

// Where appends a list predicates to the TaskHistoryUpdate builder.
func (thuo *TaskHistoryUpdateOne) Where(ps ...predicate.TaskHistory) *TaskHistoryUpdateOne {
	thuo.mutation.Where(ps...)
	return thuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (thuo *TaskHistoryUpdateOne) Select(field string, fields ...string) *TaskHistoryUpdateOne {
	thuo.fields = append([]string{field}, fields...)
	return thuo
}

// Save executes the query and returns the updated TaskHistory entity.
func (thuo *TaskHistoryUpdateOne) Save(ctx context.Context) (*TaskHistory, error) {
	thuo.defaults()
	return withHooks(ctx, thuo.sqlSave, thuo.mutation, thuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (thuo *TaskHistoryUpdateOne) SaveX(ctx context.Context) *TaskHistory {
	node, err := thuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (thuo *TaskHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := thuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (thuo *TaskHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := thuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (thuo *TaskHistoryUpdateOne) defaults() {
	if _, ok := thuo.mutation.UpdatedAt(); !ok && !thuo.mutation.UpdatedAtCleared() {
		v := taskhistory.UpdateDefaultUpdatedAt()
		thuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (thuo *TaskHistoryUpdateOne) check() error {
	if v, ok := thuo.mutation.Status(); ok {
		if err := taskhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "TaskHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (thuo *TaskHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskHistoryUpdateOne {
	thuo.modifiers = append(thuo.modifiers, modifiers...)
	return thuo
}

func (thuo *TaskHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TaskHistory, err error) {
	if err := thuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskhistory.Table, taskhistory.Columns, sqlgraph.NewFieldSpec(taskhistory.FieldID, field.TypeString))
	id, ok := thuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TaskHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := thuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskhistory.FieldID)
		for _, f := range fields {
			if !taskhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != taskhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := thuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if thuo.mutation.RefCleared() {
		_spec.ClearField(taskhistory.FieldRef, field.TypeString)
	}
	if thuo.mutation.CreatedAtCleared() {
		_spec.ClearField(taskhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := thuo.mutation.UpdatedAt(); ok {
		_spec.SetField(taskhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if thuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(taskhistory.FieldUpdatedAt, field.TypeTime)
	}
	if thuo.mutation.CreatedByCleared() {
		_spec.ClearField(taskhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := thuo.mutation.UpdatedBy(); ok {
		_spec.SetField(taskhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if thuo.mutation.UpdatedByCleared() {
		_spec.ClearField(taskhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := thuo.mutation.DeletedAt(); ok {
		_spec.SetField(taskhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if thuo.mutation.DeletedAtCleared() {
		_spec.ClearField(taskhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := thuo.mutation.DeletedBy(); ok {
		_spec.SetField(taskhistory.FieldDeletedBy, field.TypeString, value)
	}
	if thuo.mutation.DeletedByCleared() {
		_spec.ClearField(taskhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := thuo.mutation.Tags(); ok {
		_spec.SetField(taskhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := thuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, taskhistory.FieldTags, value)
		})
	}
	if thuo.mutation.TagsCleared() {
		_spec.ClearField(taskhistory.FieldTags, field.TypeJSON)
	}
	if thuo.mutation.OwnerIDCleared() {
		_spec.ClearField(taskhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := thuo.mutation.Title(); ok {
		_spec.SetField(taskhistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := thuo.mutation.Description(); ok {
		_spec.SetField(taskhistory.FieldDescription, field.TypeString, value)
	}
	if thuo.mutation.DescriptionCleared() {
		_spec.ClearField(taskhistory.FieldDescription, field.TypeString)
	}
	if value, ok := thuo.mutation.Details(); ok {
		_spec.SetField(taskhistory.FieldDetails, field.TypeString, value)
	}
	if thuo.mutation.DetailsCleared() {
		_spec.ClearField(taskhistory.FieldDetails, field.TypeString)
	}
	if value, ok := thuo.mutation.Status(); ok {
		_spec.SetField(taskhistory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := thuo.mutation.Category(); ok {
		_spec.SetField(taskhistory.FieldCategory, field.TypeString, value)
	}
	if thuo.mutation.CategoryCleared() {
		_spec.ClearField(taskhistory.FieldCategory, field.TypeString)
	}
	if value, ok := thuo.mutation.Due(); ok {
		_spec.SetField(taskhistory.FieldDue, field.TypeTime, value)
	}
	if thuo.mutation.DueCleared() {
		_spec.ClearField(taskhistory.FieldDue, field.TypeTime)
	}
	if value, ok := thuo.mutation.Completed(); ok {
		_spec.SetField(taskhistory.FieldCompleted, field.TypeTime, value)
	}
	if thuo.mutation.CompletedCleared() {
		_spec.ClearField(taskhistory.FieldCompleted, field.TypeTime)
	}
	if value, ok := thuo.mutation.AssigneeID(); ok {
		_spec.SetField(taskhistory.FieldAssigneeID, field.TypeString, value)
	}
	if thuo.mutation.AssigneeIDCleared() {
		_spec.ClearField(taskhistory.FieldAssigneeID, field.TypeString)
	}
	if value, ok := thuo.mutation.AssignerID(); ok {
		_spec.SetField(taskhistory.FieldAssignerID, field.TypeString, value)
	}
	if thuo.mutation.AssignerIDCleared() {
		_spec.ClearField(taskhistory.FieldAssignerID, field.TypeString)
	}
	_spec.Node.Schema = thuo.schemaConfig.TaskHistory
	ctx = internal.NewSchemaConfigContext(ctx, thuo.schemaConfig)
	_spec.AddModifiers(thuo.modifiers...)
	_node = &TaskHistory{config: thuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, thuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	thuo.mutation.done = true
	return _node, nil
}
