// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/taskhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TaskHistoryUpdate is the builder for updating TaskHistory entities.
type TaskHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskHistoryUpdate builder.
func (_u *TaskHistoryUpdate) Where(ps ...predicate.TaskHistory) *TaskHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TaskHistoryUpdate) SetUpdatedAt(v time.Time) *TaskHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TaskHistoryUpdate) ClearUpdatedAt() *TaskHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TaskHistoryUpdate) SetUpdatedBy(v string) *TaskHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TaskHistoryUpdate) SetNillableUpdatedBy(v *string) *TaskHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TaskHistoryUpdate) ClearUpdatedBy() *TaskHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TaskHistoryUpdate) SetDeletedAt(v time.Time) *TaskHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TaskHistoryUpdate) SetNillableDeletedAt(v *time.Time) *TaskHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TaskHistoryUpdate) ClearDeletedAt() *TaskHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TaskHistoryUpdate) SetDeletedBy(v string) *TaskHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TaskHistoryUpdate) SetNillableDeletedBy(v *string) *TaskHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TaskHistoryUpdate) ClearDeletedBy() *TaskHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TaskHistoryUpdate) SetTags(v []string) *TaskHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TaskHistoryUpdate) AppendTags(v []string) *TaskHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TaskHistoryUpdate) ClearTags() *TaskHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetTitle sets the "title" field.
func (_u *TaskHistoryUpdate) SetTitle(v string) *TaskHistoryUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TaskHistoryUpdate) SetNillableTitle(v *string) *TaskHistoryUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDetails sets the "details" field.
func (_u *TaskHistoryUpdate) SetDetails(v string) *TaskHistoryUpdate {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *TaskHistoryUpdate) SetNillableDetails(v *string) *TaskHistoryUpdate {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *TaskHistoryUpdate) ClearDetails() *TaskHistoryUpdate {
	_u.mutation.ClearDetails()
	return _u
}

// SetStatus sets the "status" field.
func (_u *TaskHistoryUpdate) SetStatus(v enums.TaskStatus) *TaskHistoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TaskHistoryUpdate) SetNillableStatus(v *enums.TaskStatus) *TaskHistoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *TaskHistoryUpdate) SetCategory(v string) *TaskHistoryUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *TaskHistoryUpdate) SetNillableCategory(v *string) *TaskHistoryUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *TaskHistoryUpdate) ClearCategory() *TaskHistoryUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetDue sets the "due" field.
func (_u *TaskHistoryUpdate) SetDue(v models.DateTime) *TaskHistoryUpdate {
	_u.mutation.SetDue(v)
	return _u
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (_u *TaskHistoryUpdate) SetNillableDue(v *models.DateTime) *TaskHistoryUpdate {
	if v != nil {
		_u.SetDue(*v)
	}
	return _u
}

// ClearDue clears the value of the "due" field.
func (_u *TaskHistoryUpdate) ClearDue() *TaskHistoryUpdate {
	_u.mutation.ClearDue()
	return _u
}

// SetCompleted sets the "completed" field.
func (_u *TaskHistoryUpdate) SetCompleted(v models.DateTime) *TaskHistoryUpdate {
	_u.mutation.SetCompleted(v)
	return _u
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (_u *TaskHistoryUpdate) SetNillableCompleted(v *models.DateTime) *TaskHistoryUpdate {
	if v != nil {
		_u.SetCompleted(*v)
	}
	return _u
}

// ClearCompleted clears the value of the "completed" field.
func (_u *TaskHistoryUpdate) ClearCompleted() *TaskHistoryUpdate {
	_u.mutation.ClearCompleted()
	return _u
}

// SetAssigneeID sets the "assignee_id" field.
func (_u *TaskHistoryUpdate) SetAssigneeID(v string) *TaskHistoryUpdate {
	_u.mutation.SetAssigneeID(v)
	return _u
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (_u *TaskHistoryUpdate) SetNillableAssigneeID(v *string) *TaskHistoryUpdate {
	if v != nil {
		_u.SetAssigneeID(*v)
	}
	return _u
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (_u *TaskHistoryUpdate) ClearAssigneeID() *TaskHistoryUpdate {
	_u.mutation.ClearAssigneeID()
	return _u
}

// SetAssignerID sets the "assigner_id" field.
func (_u *TaskHistoryUpdate) SetAssignerID(v string) *TaskHistoryUpdate {
	_u.mutation.SetAssignerID(v)
	return _u
}

// SetNillableAssignerID sets the "assigner_id" field if the given value is not nil.
func (_u *TaskHistoryUpdate) SetNillableAssignerID(v *string) *TaskHistoryUpdate {
	if v != nil {
		_u.SetAssignerID(*v)
	}
	return _u
}

// ClearAssignerID clears the value of the "assigner_id" field.
func (_u *TaskHistoryUpdate) ClearAssignerID() *TaskHistoryUpdate {
	_u.mutation.ClearAssignerID()
	return _u
}

// Mutation returns the TaskHistoryMutation object of the builder.
func (_u *TaskHistoryUpdate) Mutation() *TaskHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TaskHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TaskHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TaskHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if taskhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized taskhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := taskhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TaskHistoryUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := taskhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "TaskHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TaskHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TaskHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskhistory.Table, taskhistory.Columns, sqlgraph.NewFieldSpec(taskhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(taskhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(taskhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(taskhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(taskhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(taskhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(taskhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(taskhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(taskhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(taskhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(taskhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(taskhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(taskhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, taskhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(taskhistory.FieldTags, field.TypeJSON)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(taskhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(taskhistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(taskhistory.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(taskhistory.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(taskhistory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(taskhistory.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(taskhistory.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.Due(); ok {
		_spec.SetField(taskhistory.FieldDue, field.TypeTime, value)
	}
	if _u.mutation.DueCleared() {
		_spec.ClearField(taskhistory.FieldDue, field.TypeTime)
	}
	if value, ok := _u.mutation.Completed(); ok {
		_spec.SetField(taskhistory.FieldCompleted, field.TypeTime, value)
	}
	if _u.mutation.CompletedCleared() {
		_spec.ClearField(taskhistory.FieldCompleted, field.TypeTime)
	}
	if value, ok := _u.mutation.AssigneeID(); ok {
		_spec.SetField(taskhistory.FieldAssigneeID, field.TypeString, value)
	}
	if _u.mutation.AssigneeIDCleared() {
		_spec.ClearField(taskhistory.FieldAssigneeID, field.TypeString)
	}
	if value, ok := _u.mutation.AssignerID(); ok {
		_spec.SetField(taskhistory.FieldAssignerID, field.TypeString, value)
	}
	if _u.mutation.AssignerIDCleared() {
		_spec.ClearField(taskhistory.FieldAssignerID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.TaskHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TaskHistoryUpdateOne is the builder for updating a single TaskHistory entity.
type TaskHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TaskHistoryUpdateOne) SetUpdatedAt(v time.Time) *TaskHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TaskHistoryUpdateOne) ClearUpdatedAt() *TaskHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TaskHistoryUpdateOne) SetUpdatedBy(v string) *TaskHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TaskHistoryUpdateOne) SetNillableUpdatedBy(v *string) *TaskHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TaskHistoryUpdateOne) ClearUpdatedBy() *TaskHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TaskHistoryUpdateOne) SetDeletedAt(v time.Time) *TaskHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TaskHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *TaskHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TaskHistoryUpdateOne) ClearDeletedAt() *TaskHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TaskHistoryUpdateOne) SetDeletedBy(v string) *TaskHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TaskHistoryUpdateOne) SetNillableDeletedBy(v *string) *TaskHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TaskHistoryUpdateOne) ClearDeletedBy() *TaskHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TaskHistoryUpdateOne) SetTags(v []string) *TaskHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TaskHistoryUpdateOne) AppendTags(v []string) *TaskHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TaskHistoryUpdateOne) ClearTags() *TaskHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetTitle sets the "title" field.
func (_u *TaskHistoryUpdateOne) SetTitle(v string) *TaskHistoryUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TaskHistoryUpdateOne) SetNillableTitle(v *string) *TaskHistoryUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDetails sets the "details" field.
func (_u *TaskHistoryUpdateOne) SetDetails(v string) *TaskHistoryUpdateOne {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *TaskHistoryUpdateOne) SetNillableDetails(v *string) *TaskHistoryUpdateOne {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *TaskHistoryUpdateOne) ClearDetails() *TaskHistoryUpdateOne {
	_u.mutation.ClearDetails()
	return _u
}

// SetStatus sets the "status" field.
func (_u *TaskHistoryUpdateOne) SetStatus(v enums.TaskStatus) *TaskHistoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TaskHistoryUpdateOne) SetNillableStatus(v *enums.TaskStatus) *TaskHistoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetCategory sets the "category" field.
func (_u *TaskHistoryUpdateOne) SetCategory(v string) *TaskHistoryUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *TaskHistoryUpdateOne) SetNillableCategory(v *string) *TaskHistoryUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *TaskHistoryUpdateOne) ClearCategory() *TaskHistoryUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetDue sets the "due" field.
func (_u *TaskHistoryUpdateOne) SetDue(v models.DateTime) *TaskHistoryUpdateOne {
	_u.mutation.SetDue(v)
	return _u
}

// SetNillableDue sets the "due" field if the given value is not nil.
func (_u *TaskHistoryUpdateOne) SetNillableDue(v *models.DateTime) *TaskHistoryUpdateOne {
	if v != nil {
		_u.SetDue(*v)
	}
	return _u
}

// ClearDue clears the value of the "due" field.
func (_u *TaskHistoryUpdateOne) ClearDue() *TaskHistoryUpdateOne {
	_u.mutation.ClearDue()
	return _u
}

// SetCompleted sets the "completed" field.
func (_u *TaskHistoryUpdateOne) SetCompleted(v models.DateTime) *TaskHistoryUpdateOne {
	_u.mutation.SetCompleted(v)
	return _u
}

// SetNillableCompleted sets the "completed" field if the given value is not nil.
func (_u *TaskHistoryUpdateOne) SetNillableCompleted(v *models.DateTime) *TaskHistoryUpdateOne {
	if v != nil {
		_u.SetCompleted(*v)
	}
	return _u
}

// ClearCompleted clears the value of the "completed" field.
func (_u *TaskHistoryUpdateOne) ClearCompleted() *TaskHistoryUpdateOne {
	_u.mutation.ClearCompleted()
	return _u
}

// SetAssigneeID sets the "assignee_id" field.
func (_u *TaskHistoryUpdateOne) SetAssigneeID(v string) *TaskHistoryUpdateOne {
	_u.mutation.SetAssigneeID(v)
	return _u
}

// SetNillableAssigneeID sets the "assignee_id" field if the given value is not nil.
func (_u *TaskHistoryUpdateOne) SetNillableAssigneeID(v *string) *TaskHistoryUpdateOne {
	if v != nil {
		_u.SetAssigneeID(*v)
	}
	return _u
}

// ClearAssigneeID clears the value of the "assignee_id" field.
func (_u *TaskHistoryUpdateOne) ClearAssigneeID() *TaskHistoryUpdateOne {
	_u.mutation.ClearAssigneeID()
	return _u
}

// SetAssignerID sets the "assigner_id" field.
func (_u *TaskHistoryUpdateOne) SetAssignerID(v string) *TaskHistoryUpdateOne {
	_u.mutation.SetAssignerID(v)
	return _u
}

// SetNillableAssignerID sets the "assigner_id" field if the given value is not nil.
func (_u *TaskHistoryUpdateOne) SetNillableAssignerID(v *string) *TaskHistoryUpdateOne {
	if v != nil {
		_u.SetAssignerID(*v)
	}
	return _u
}

// ClearAssignerID clears the value of the "assigner_id" field.
func (_u *TaskHistoryUpdateOne) ClearAssignerID() *TaskHistoryUpdateOne {
	_u.mutation.ClearAssignerID()
	return _u
}

// Mutation returns the TaskHistoryMutation object of the builder.
func (_u *TaskHistoryUpdateOne) Mutation() *TaskHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the TaskHistoryUpdate builder.
func (_u *TaskHistoryUpdateOne) Where(ps ...predicate.TaskHistory) *TaskHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TaskHistoryUpdateOne) Select(field string, fields ...string) *TaskHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TaskHistory entity.
func (_u *TaskHistoryUpdateOne) Save(ctx context.Context) (*TaskHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskHistoryUpdateOne) SaveX(ctx context.Context) *TaskHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TaskHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TaskHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if taskhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized taskhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := taskhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TaskHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := taskhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "TaskHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TaskHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TaskHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TaskHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskhistory.Table, taskhistory.Columns, sqlgraph.NewFieldSpec(taskhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TaskHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskhistory.FieldID)
		for _, f := range fields {
			if !taskhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != taskhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(taskhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(taskhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(taskhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(taskhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(taskhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(taskhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(taskhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(taskhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(taskhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(taskhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(taskhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(taskhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, taskhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(taskhistory.FieldTags, field.TypeJSON)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(taskhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(taskhistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(taskhistory.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(taskhistory.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(taskhistory.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(taskhistory.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(taskhistory.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.Due(); ok {
		_spec.SetField(taskhistory.FieldDue, field.TypeTime, value)
	}
	if _u.mutation.DueCleared() {
		_spec.ClearField(taskhistory.FieldDue, field.TypeTime)
	}
	if value, ok := _u.mutation.Completed(); ok {
		_spec.SetField(taskhistory.FieldCompleted, field.TypeTime, value)
	}
	if _u.mutation.CompletedCleared() {
		_spec.ClearField(taskhistory.FieldCompleted, field.TypeTime)
	}
	if value, ok := _u.mutation.AssigneeID(); ok {
		_spec.SetField(taskhistory.FieldAssigneeID, field.TypeString, value)
	}
	if _u.mutation.AssigneeIDCleared() {
		_spec.ClearField(taskhistory.FieldAssigneeID, field.TypeString)
	}
	if value, ok := _u.mutation.AssignerID(); ok {
		_spec.SetField(taskhistory.FieldAssignerID, field.TypeString, value)
	}
	if _u.mutation.AssignerIDCleared() {
		_spec.ClearField(taskhistory.FieldAssignerID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.TaskHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TaskHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
