// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// APIToken is the client for interacting with the APIToken builders.
	APIToken *APITokenClient
	// Contact is the client for interacting with the Contact builders.
	Contact *ContactClient
	// ContactHistory is the client for interacting with the ContactHistory builders.
	ContactHistory *ContactHistoryClient
	// DocumentData is the client for interacting with the DocumentData builders.
	DocumentData *DocumentDataClient
	// DocumentDataHistory is the client for interacting with the DocumentDataHistory builders.
	DocumentDataHistory *DocumentDataHistoryClient
	// EmailVerificationToken is the client for interacting with the EmailVerificationToken builders.
	EmailVerificationToken *EmailVerificationTokenClient
	// Entitlement is the client for interacting with the Entitlement builders.
	Entitlement *EntitlementClient
	// EntitlementHistory is the client for interacting with the EntitlementHistory builders.
	EntitlementHistory *EntitlementHistoryClient
	// EntitlementPlan is the client for interacting with the EntitlementPlan builders.
	EntitlementPlan *EntitlementPlanClient
	// EntitlementPlanFeature is the client for interacting with the EntitlementPlanFeature builders.
	EntitlementPlanFeature *EntitlementPlanFeatureClient
	// EntitlementPlanFeatureHistory is the client for interacting with the EntitlementPlanFeatureHistory builders.
	EntitlementPlanFeatureHistory *EntitlementPlanFeatureHistoryClient
	// EntitlementPlanHistory is the client for interacting with the EntitlementPlanHistory builders.
	EntitlementPlanHistory *EntitlementPlanHistoryClient
	// Entity is the client for interacting with the Entity builders.
	Entity *EntityClient
	// EntityHistory is the client for interacting with the EntityHistory builders.
	EntityHistory *EntityHistoryClient
	// EntityType is the client for interacting with the EntityType builders.
	EntityType *EntityTypeClient
	// EntityTypeHistory is the client for interacting with the EntityTypeHistory builders.
	EntityTypeHistory *EntityTypeHistoryClient
	// Event is the client for interacting with the Event builders.
	Event *EventClient
	// EventHistory is the client for interacting with the EventHistory builders.
	EventHistory *EventHistoryClient
	// Feature is the client for interacting with the Feature builders.
	Feature *FeatureClient
	// FeatureHistory is the client for interacting with the FeatureHistory builders.
	FeatureHistory *FeatureHistoryClient
	// File is the client for interacting with the File builders.
	File *FileClient
	// FileHistory is the client for interacting with the FileHistory builders.
	FileHistory *FileHistoryClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// GroupHistory is the client for interacting with the GroupHistory builders.
	GroupHistory *GroupHistoryClient
	// GroupMembership is the client for interacting with the GroupMembership builders.
	GroupMembership *GroupMembershipClient
	// GroupMembershipHistory is the client for interacting with the GroupMembershipHistory builders.
	GroupMembershipHistory *GroupMembershipHistoryClient
	// GroupSetting is the client for interacting with the GroupSetting builders.
	GroupSetting *GroupSettingClient
	// GroupSettingHistory is the client for interacting with the GroupSettingHistory builders.
	GroupSettingHistory *GroupSettingHistoryClient
	// Hush is the client for interacting with the Hush builders.
	Hush *HushClient
	// HushHistory is the client for interacting with the HushHistory builders.
	HushHistory *HushHistoryClient
	// Integration is the client for interacting with the Integration builders.
	Integration *IntegrationClient
	// IntegrationHistory is the client for interacting with the IntegrationHistory builders.
	IntegrationHistory *IntegrationHistoryClient
	// Invite is the client for interacting with the Invite builders.
	Invite *InviteClient
	// Note is the client for interacting with the Note builders.
	Note *NoteClient
	// NoteHistory is the client for interacting with the NoteHistory builders.
	NoteHistory *NoteHistoryClient
	// OauthProvider is the client for interacting with the OauthProvider builders.
	OauthProvider *OauthProviderClient
	// OauthProviderHistory is the client for interacting with the OauthProviderHistory builders.
	OauthProviderHistory *OauthProviderHistoryClient
	// OhAuthTooToken is the client for interacting with the OhAuthTooToken builders.
	OhAuthTooToken *OhAuthTooTokenClient
	// OrgMembership is the client for interacting with the OrgMembership builders.
	OrgMembership *OrgMembershipClient
	// OrgMembershipHistory is the client for interacting with the OrgMembershipHistory builders.
	OrgMembershipHistory *OrgMembershipHistoryClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// OrganizationHistory is the client for interacting with the OrganizationHistory builders.
	OrganizationHistory *OrganizationHistoryClient
	// OrganizationSetting is the client for interacting with the OrganizationSetting builders.
	OrganizationSetting *OrganizationSettingClient
	// OrganizationSettingHistory is the client for interacting with the OrganizationSettingHistory builders.
	OrganizationSettingHistory *OrganizationSettingHistoryClient
	// PasswordResetToken is the client for interacting with the PasswordResetToken builders.
	PasswordResetToken *PasswordResetTokenClient
	// PersonalAccessToken is the client for interacting with the PersonalAccessToken builders.
	PersonalAccessToken *PersonalAccessTokenClient
	// Subscriber is the client for interacting with the Subscriber builders.
	Subscriber *SubscriberClient
	// TFASetting is the client for interacting with the TFASetting builders.
	TFASetting *TFASettingClient
	// Template is the client for interacting with the Template builders.
	Template *TemplateClient
	// TemplateHistory is the client for interacting with the TemplateHistory builders.
	TemplateHistory *TemplateHistoryClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserHistory is the client for interacting with the UserHistory builders.
	UserHistory *UserHistoryClient
	// UserSetting is the client for interacting with the UserSetting builders.
	UserSetting *UserSettingClient
	// UserSettingHistory is the client for interacting with the UserSettingHistory builders.
	UserSettingHistory *UserSettingHistoryClient
	// Webauthn is the client for interacting with the Webauthn builders.
	Webauthn *WebauthnClient
	// Webhook is the client for interacting with the Webhook builders.
	Webhook *WebhookClient
	// WebhookHistory is the client for interacting with the WebhookHistory builders.
	WebhookHistory *WebhookHistoryClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once
	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Commit method.
	Committer interface {
		Commit(context.Context, *Tx) error
	}

	// The CommitFunc type is an adapter to allow the use of ordinary
	// function as a Committer. If f is a function with the appropriate
	// signature, CommitFunc(f) is a Committer that calls f.
	CommitFunc func(context.Context, *Tx) error

	// CommitHook defines the "commit middleware". A function that gets a Committer
	// and returns a Committer. For example:
	//
	//	hook := func(next ent.Committer) ent.Committer {
	//		return ent.CommitFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Commit(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	CommitHook func(Committer) Committer
)

// Commit calls f(ctx, m).
func (f CommitFunc) Commit(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer = CommitFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Commit()
	})
	txDriver.mu.Lock()
	hooks := append([]CommitHook(nil), txDriver.onCommit...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Commit(tx.ctx, tx)
}

// OnCommit adds a hook to call on commit.
func (tx *Tx) OnCommit(f CommitHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onCommit = append(txDriver.onCommit, f)
	txDriver.mu.Unlock()
}

type (
	// Rollbacker is the interface that wraps the Rollback method.
	Rollbacker interface {
		Rollback(context.Context, *Tx) error
	}

	// The RollbackFunc type is an adapter to allow the use of ordinary
	// function as a Rollbacker. If f is a function with the appropriate
	// signature, RollbackFunc(f) is a Rollbacker that calls f.
	RollbackFunc func(context.Context, *Tx) error

	// RollbackHook defines the "rollback middleware". A function that gets a Rollbacker
	// and returns a Rollbacker. For example:
	//
	//	hook := func(next ent.Rollbacker) ent.Rollbacker {
	//		return ent.RollbackFunc(func(ctx context.Context, tx *ent.Tx) error {
	//			// Do some stuff before.
	//			if err := next.Rollback(ctx, tx); err != nil {
	//				return err
	//			}
	//			// Do some stuff after.
	//			return nil
	//		})
	//	}
	//
	RollbackHook func(Rollbacker) Rollbacker
)

// Rollback calls f(ctx, m).
func (f RollbackFunc) Rollback(ctx context.Context, tx *Tx) error {
	return f(ctx, tx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker = RollbackFunc(func(context.Context, *Tx) error {
		return txDriver.tx.Rollback()
	})
	txDriver.mu.Lock()
	hooks := append([]RollbackHook(nil), txDriver.onRollback...)
	txDriver.mu.Unlock()
	for i := len(hooks) - 1; i >= 0; i-- {
		fn = hooks[i](fn)
	}
	return fn.Rollback(tx.ctx, tx)
}

// OnRollback adds a hook to call on rollback.
func (tx *Tx) OnRollback(f RollbackHook) {
	txDriver := tx.config.driver.(*txDriver)
	txDriver.mu.Lock()
	txDriver.onRollback = append(txDriver.onRollback, f)
	txDriver.mu.Unlock()
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.APIToken = NewAPITokenClient(tx.config)
	tx.Contact = NewContactClient(tx.config)
	tx.ContactHistory = NewContactHistoryClient(tx.config)
	tx.DocumentData = NewDocumentDataClient(tx.config)
	tx.DocumentDataHistory = NewDocumentDataHistoryClient(tx.config)
	tx.EmailVerificationToken = NewEmailVerificationTokenClient(tx.config)
	tx.Entitlement = NewEntitlementClient(tx.config)
	tx.EntitlementHistory = NewEntitlementHistoryClient(tx.config)
	tx.EntitlementPlan = NewEntitlementPlanClient(tx.config)
	tx.EntitlementPlanFeature = NewEntitlementPlanFeatureClient(tx.config)
	tx.EntitlementPlanFeatureHistory = NewEntitlementPlanFeatureHistoryClient(tx.config)
	tx.EntitlementPlanHistory = NewEntitlementPlanHistoryClient(tx.config)
	tx.Entity = NewEntityClient(tx.config)
	tx.EntityHistory = NewEntityHistoryClient(tx.config)
	tx.EntityType = NewEntityTypeClient(tx.config)
	tx.EntityTypeHistory = NewEntityTypeHistoryClient(tx.config)
	tx.Event = NewEventClient(tx.config)
	tx.EventHistory = NewEventHistoryClient(tx.config)
	tx.Feature = NewFeatureClient(tx.config)
	tx.FeatureHistory = NewFeatureHistoryClient(tx.config)
	tx.File = NewFileClient(tx.config)
	tx.FileHistory = NewFileHistoryClient(tx.config)
	tx.Group = NewGroupClient(tx.config)
	tx.GroupHistory = NewGroupHistoryClient(tx.config)
	tx.GroupMembership = NewGroupMembershipClient(tx.config)
	tx.GroupMembershipHistory = NewGroupMembershipHistoryClient(tx.config)
	tx.GroupSetting = NewGroupSettingClient(tx.config)
	tx.GroupSettingHistory = NewGroupSettingHistoryClient(tx.config)
	tx.Hush = NewHushClient(tx.config)
	tx.HushHistory = NewHushHistoryClient(tx.config)
	tx.Integration = NewIntegrationClient(tx.config)
	tx.IntegrationHistory = NewIntegrationHistoryClient(tx.config)
	tx.Invite = NewInviteClient(tx.config)
	tx.Note = NewNoteClient(tx.config)
	tx.NoteHistory = NewNoteHistoryClient(tx.config)
	tx.OauthProvider = NewOauthProviderClient(tx.config)
	tx.OauthProviderHistory = NewOauthProviderHistoryClient(tx.config)
	tx.OhAuthTooToken = NewOhAuthTooTokenClient(tx.config)
	tx.OrgMembership = NewOrgMembershipClient(tx.config)
	tx.OrgMembershipHistory = NewOrgMembershipHistoryClient(tx.config)
	tx.Organization = NewOrganizationClient(tx.config)
	tx.OrganizationHistory = NewOrganizationHistoryClient(tx.config)
	tx.OrganizationSetting = NewOrganizationSettingClient(tx.config)
	tx.OrganizationSettingHistory = NewOrganizationSettingHistoryClient(tx.config)
	tx.PasswordResetToken = NewPasswordResetTokenClient(tx.config)
	tx.PersonalAccessToken = NewPersonalAccessTokenClient(tx.config)
	tx.Subscriber = NewSubscriberClient(tx.config)
	tx.TFASetting = NewTFASettingClient(tx.config)
	tx.Template = NewTemplateClient(tx.config)
	tx.TemplateHistory = NewTemplateHistoryClient(tx.config)
	tx.User = NewUserClient(tx.config)
	tx.UserHistory = NewUserHistoryClient(tx.config)
	tx.UserSetting = NewUserSettingClient(tx.config)
	tx.UserSettingHistory = NewUserSettingHistoryClient(tx.config)
	tx.Webauthn = NewWebauthnClient(tx.config)
	tx.Webhook = NewWebhookClient(tx.config)
	tx.WebhookHistory = NewWebhookHistoryClient(tx.config)
}

// txDriver wraps the given dialect.Tx with a nop dialect.Driver implementation.
// The idea is to support transactions without adding any extra code to the builders.
// When a builder calls to driver.Tx(), it gets the same dialect.Tx instance.
// Commit and Rollback are nop for the internal builders and the user must call one
// of them in order to commit or rollback the transaction.
//
// If a closed transaction is embedded in one of the generated entities, and the entity
// applies a query, for example: APIToken.QueryXXX(), the query will be executed
// through the driver which created this transaction.
//
// Note that txDriver is not goroutine safe.
type txDriver struct {
	// the driver we started the transaction from.
	drv dialect.Driver
	// tx is the underlying transaction.
	tx dialect.Tx
	// completion hooks.
	mu         sync.Mutex
	onCommit   []CommitHook
	onRollback []RollbackHook
}

// newTx creates a new transactional driver.
func newTx(ctx context.Context, drv dialect.Driver) (*txDriver, error) {
	tx, err := drv.Tx(ctx)
	if err != nil {
		return nil, err
	}
	return &txDriver{tx: tx, drv: drv}, nil
}

// Tx returns the transaction wrapper (txDriver) to avoid Commit or Rollback calls
// from the internal builders. Should be called only by the internal builders.
func (tx *txDriver) Tx(context.Context) (dialect.Tx, error) { return tx, nil }

// Dialect returns the dialect of the driver we started the transaction from.
func (tx *txDriver) Dialect() string { return tx.drv.Dialect() }

// Close is a nop close.
func (*txDriver) Close() error { return nil }

// Commit is a nop commit for the internal builders.
// User must call `Tx.Commit` in order to commit the transaction.
func (*txDriver) Commit() error { return nil }

// Rollback is a nop rollback for the internal builders.
// User must call `Tx.Rollback` in order to rollback the transaction.
func (*txDriver) Rollback() error { return nil }

// Exec calls tx.Exec.
func (tx *txDriver) Exec(ctx context.Context, query string, args, v any) error {
	return tx.tx.Exec(ctx, query, args, v)
}

// Query calls tx.Query.
func (tx *txDriver) Query(ctx context.Context, query string, args, v any) error {
	return tx.tx.Query(ctx, query, args, v)
}

var _ dialect.Driver = (*txDriver)(nil)
