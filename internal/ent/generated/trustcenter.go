// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
)

// TrustCenter is the model entity for the TrustCenter schema.
type TrustCenter struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// Slug for the trust center
	Slug string `json:"slug,omitempty"`
	// custom domain id for the trust center
	CustomDomainID string `json:"custom_domain_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrustCenterQuery when eager-loading is set.
	Edges        TrustCenterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrustCenterEdges holds the relations/edges for other nodes in the graph.
type TrustCenterEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// CustomDomain holds the value of the custom_domain edge.
	CustomDomain *CustomDomain `json:"custom_domain,omitempty"`
	// Setting holds the value of the setting edge.
	Setting *TrustCenterSetting `json:"setting,omitempty"`
	// TrustCenterSubprocessors holds the value of the trust_center_subprocessors edge.
	TrustCenterSubprocessors []*TrustCenterSubprocessor `json:"trust_center_subprocessors,omitempty"`
	// TrustCenterDocs holds the value of the trust_center_docs edge.
	TrustCenterDocs []*TrustCenterDoc `json:"trust_center_docs,omitempty"`
	// TrustCenterCompliances holds the value of the trust_center_compliances edge.
	TrustCenterCompliances []*TrustCenterCompliance `json:"trust_center_compliances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
	// totalCount holds the count of the edges above.
	totalCount [6]map[string]int

	namedTrustCenterSubprocessors map[string][]*TrustCenterSubprocessor
	namedTrustCenterDocs          map[string][]*TrustCenterDoc
	namedTrustCenterCompliances   map[string][]*TrustCenterCompliance
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// CustomDomainOrErr returns the CustomDomain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterEdges) CustomDomainOrErr() (*CustomDomain, error) {
	if e.CustomDomain != nil {
		return e.CustomDomain, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: customdomain.Label}
	}
	return nil, &NotLoadedError{edge: "custom_domain"}
}

// SettingOrErr returns the Setting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterEdges) SettingOrErr() (*TrustCenterSetting, error) {
	if e.Setting != nil {
		return e.Setting, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: trustcentersetting.Label}
	}
	return nil, &NotLoadedError{edge: "setting"}
}

// TrustCenterSubprocessorsOrErr returns the TrustCenterSubprocessors value or an error if the edge
// was not loaded in eager-loading.
func (e TrustCenterEdges) TrustCenterSubprocessorsOrErr() ([]*TrustCenterSubprocessor, error) {
	if e.loadedTypes[3] {
		return e.TrustCenterSubprocessors, nil
	}
	return nil, &NotLoadedError{edge: "trust_center_subprocessors"}
}

// TrustCenterDocsOrErr returns the TrustCenterDocs value or an error if the edge
// was not loaded in eager-loading.
func (e TrustCenterEdges) TrustCenterDocsOrErr() ([]*TrustCenterDoc, error) {
	if e.loadedTypes[4] {
		return e.TrustCenterDocs, nil
	}
	return nil, &NotLoadedError{edge: "trust_center_docs"}
}

// TrustCenterCompliancesOrErr returns the TrustCenterCompliances value or an error if the edge
// was not loaded in eager-loading.
func (e TrustCenterEdges) TrustCenterCompliancesOrErr() ([]*TrustCenterCompliance, error) {
	if e.loadedTypes[5] {
		return e.TrustCenterCompliances, nil
	}
	return nil, &NotLoadedError{edge: "trust_center_compliances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrustCenter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trustcenter.FieldTags:
			values[i] = new([]byte)
		case trustcenter.FieldID, trustcenter.FieldCreatedBy, trustcenter.FieldUpdatedBy, trustcenter.FieldDeletedBy, trustcenter.FieldOwnerID, trustcenter.FieldSlug, trustcenter.FieldCustomDomainID:
			values[i] = new(sql.NullString)
		case trustcenter.FieldCreatedAt, trustcenter.FieldUpdatedAt, trustcenter.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrustCenter fields.
func (_m *TrustCenter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trustcenter.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case trustcenter.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case trustcenter.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case trustcenter.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case trustcenter.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case trustcenter.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case trustcenter.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case trustcenter.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case trustcenter.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case trustcenter.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				_m.Slug = value.String
			}
		case trustcenter.FieldCustomDomainID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_domain_id", values[i])
			} else if value.Valid {
				_m.CustomDomainID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrustCenter.
// This includes values selected through modifiers, order, etc.
func (_m *TrustCenter) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the TrustCenter entity.
func (_m *TrustCenter) QueryOwner() *OrganizationQuery {
	return NewTrustCenterClient(_m.config).QueryOwner(_m)
}

// QueryCustomDomain queries the "custom_domain" edge of the TrustCenter entity.
func (_m *TrustCenter) QueryCustomDomain() *CustomDomainQuery {
	return NewTrustCenterClient(_m.config).QueryCustomDomain(_m)
}

// QuerySetting queries the "setting" edge of the TrustCenter entity.
func (_m *TrustCenter) QuerySetting() *TrustCenterSettingQuery {
	return NewTrustCenterClient(_m.config).QuerySetting(_m)
}

// QueryTrustCenterSubprocessors queries the "trust_center_subprocessors" edge of the TrustCenter entity.
func (_m *TrustCenter) QueryTrustCenterSubprocessors() *TrustCenterSubprocessorQuery {
	return NewTrustCenterClient(_m.config).QueryTrustCenterSubprocessors(_m)
}

// QueryTrustCenterDocs queries the "trust_center_docs" edge of the TrustCenter entity.
func (_m *TrustCenter) QueryTrustCenterDocs() *TrustCenterDocQuery {
	return NewTrustCenterClient(_m.config).QueryTrustCenterDocs(_m)
}

// QueryTrustCenterCompliances queries the "trust_center_compliances" edge of the TrustCenter entity.
func (_m *TrustCenter) QueryTrustCenterCompliances() *TrustCenterComplianceQuery {
	return NewTrustCenterClient(_m.config).QueryTrustCenterCompliances(_m)
}

// Update returns a builder for updating this TrustCenter.
// Note that you need to call TrustCenter.Unwrap() before calling this method if this TrustCenter
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TrustCenter) Update() *TrustCenterUpdateOne {
	return NewTrustCenterClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TrustCenter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TrustCenter) Unwrap() *TrustCenter {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: TrustCenter is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TrustCenter) String() string {
	var builder strings.Builder
	builder.WriteString("TrustCenter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(_m.Slug)
	builder.WriteString(", ")
	builder.WriteString("custom_domain_id=")
	builder.WriteString(_m.CustomDomainID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedTrustCenterSubprocessors returns the TrustCenterSubprocessors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *TrustCenter) NamedTrustCenterSubprocessors(name string) ([]*TrustCenterSubprocessor, error) {
	if _m.Edges.namedTrustCenterSubprocessors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTrustCenterSubprocessors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *TrustCenter) appendNamedTrustCenterSubprocessors(name string, edges ...*TrustCenterSubprocessor) {
	if _m.Edges.namedTrustCenterSubprocessors == nil {
		_m.Edges.namedTrustCenterSubprocessors = make(map[string][]*TrustCenterSubprocessor)
	}
	if len(edges) == 0 {
		_m.Edges.namedTrustCenterSubprocessors[name] = []*TrustCenterSubprocessor{}
	} else {
		_m.Edges.namedTrustCenterSubprocessors[name] = append(_m.Edges.namedTrustCenterSubprocessors[name], edges...)
	}
}

// NamedTrustCenterDocs returns the TrustCenterDocs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *TrustCenter) NamedTrustCenterDocs(name string) ([]*TrustCenterDoc, error) {
	if _m.Edges.namedTrustCenterDocs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTrustCenterDocs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *TrustCenter) appendNamedTrustCenterDocs(name string, edges ...*TrustCenterDoc) {
	if _m.Edges.namedTrustCenterDocs == nil {
		_m.Edges.namedTrustCenterDocs = make(map[string][]*TrustCenterDoc)
	}
	if len(edges) == 0 {
		_m.Edges.namedTrustCenterDocs[name] = []*TrustCenterDoc{}
	} else {
		_m.Edges.namedTrustCenterDocs[name] = append(_m.Edges.namedTrustCenterDocs[name], edges...)
	}
}

// NamedTrustCenterCompliances returns the TrustCenterCompliances named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *TrustCenter) NamedTrustCenterCompliances(name string) ([]*TrustCenterCompliance, error) {
	if _m.Edges.namedTrustCenterCompliances == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTrustCenterCompliances[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *TrustCenter) appendNamedTrustCenterCompliances(name string, edges ...*TrustCenterCompliance) {
	if _m.Edges.namedTrustCenterCompliances == nil {
		_m.Edges.namedTrustCenterCompliances = make(map[string][]*TrustCenterCompliance)
	}
	if len(edges) == 0 {
		_m.Edges.namedTrustCenterCompliances[name] = []*TrustCenterCompliance{}
	} else {
		_m.Edges.namedTrustCenterCompliances[name] = append(_m.Edges.namedTrustCenterCompliances[name], edges...)
	}
}

// TrustCenters is a parsable slice of TrustCenter.
type TrustCenters []*TrustCenter
