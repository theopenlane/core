// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
)

// TrustCenter is the model entity for the TrustCenter schema.
type TrustCenter struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// Slug for the trust center
	Slug string `json:"slug,omitempty"`
	// custom domain id for the trust center
	CustomDomainID string `json:"custom_domain_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrustCenterQuery when eager-loading is set.
	Edges        TrustCenterEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrustCenterEdges holds the relations/edges for other nodes in the graph.
type TrustCenterEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// CustomDomain holds the value of the custom_domain edge.
	CustomDomain *CustomDomain `json:"custom_domain,omitempty"`
	// Setting holds the value of the setting edge.
	Setting *TrustCenterSetting `json:"setting,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// CustomDomainOrErr returns the CustomDomain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterEdges) CustomDomainOrErr() (*CustomDomain, error) {
	if e.CustomDomain != nil {
		return e.CustomDomain, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: customdomain.Label}
	}
	return nil, &NotLoadedError{edge: "custom_domain"}
}

// SettingOrErr returns the Setting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterEdges) SettingOrErr() (*TrustCenterSetting, error) {
	if e.Setting != nil {
		return e.Setting, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: trustcentersetting.Label}
	}
	return nil, &NotLoadedError{edge: "setting"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrustCenter) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trustcenter.FieldTags:
			values[i] = new([]byte)
		case trustcenter.FieldID, trustcenter.FieldCreatedBy, trustcenter.FieldUpdatedBy, trustcenter.FieldDeletedBy, trustcenter.FieldOwnerID, trustcenter.FieldSlug, trustcenter.FieldCustomDomainID:
			values[i] = new(sql.NullString)
		case trustcenter.FieldCreatedAt, trustcenter.FieldUpdatedAt, trustcenter.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrustCenter fields.
func (tc *TrustCenter) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trustcenter.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tc.ID = value.String
			}
		case trustcenter.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tc.CreatedAt = value.Time
			}
		case trustcenter.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tc.UpdatedAt = value.Time
			}
		case trustcenter.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tc.CreatedBy = value.String
			}
		case trustcenter.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				tc.UpdatedBy = value.String
			}
		case trustcenter.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tc.DeletedAt = value.Time
			}
		case trustcenter.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				tc.DeletedBy = value.String
			}
		case trustcenter.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &tc.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case trustcenter.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				tc.OwnerID = value.String
			}
		case trustcenter.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				tc.Slug = value.String
			}
		case trustcenter.FieldCustomDomainID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_domain_id", values[i])
			} else if value.Valid {
				tc.CustomDomainID = value.String
			}
		default:
			tc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrustCenter.
// This includes values selected through modifiers, order, etc.
func (tc *TrustCenter) Value(name string) (ent.Value, error) {
	return tc.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the TrustCenter entity.
func (tc *TrustCenter) QueryOwner() *OrganizationQuery {
	return NewTrustCenterClient(tc.config).QueryOwner(tc)
}

// QueryCustomDomain queries the "custom_domain" edge of the TrustCenter entity.
func (tc *TrustCenter) QueryCustomDomain() *CustomDomainQuery {
	return NewTrustCenterClient(tc.config).QueryCustomDomain(tc)
}

// QuerySetting queries the "setting" edge of the TrustCenter entity.
func (tc *TrustCenter) QuerySetting() *TrustCenterSettingQuery {
	return NewTrustCenterClient(tc.config).QuerySetting(tc)
}

// Update returns a builder for updating this TrustCenter.
// Note that you need to call TrustCenter.Unwrap() before calling this method if this TrustCenter
// was returned from a transaction, and the transaction was committed or rolled back.
func (tc *TrustCenter) Update() *TrustCenterUpdateOne {
	return NewTrustCenterClient(tc.config).UpdateOne(tc)
}

// Unwrap unwraps the TrustCenter entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tc *TrustCenter) Unwrap() *TrustCenter {
	_tx, ok := tc.config.driver.(*txDriver)
	if !ok {
		panic("generated: TrustCenter is not a transactional entity")
	}
	tc.config.driver = _tx.drv
	return tc
}

// String implements the fmt.Stringer.
func (tc *TrustCenter) String() string {
	var builder strings.Builder
	builder.WriteString("TrustCenter(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(tc.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(tc.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(tc.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(tc.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", tc.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(tc.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(tc.Slug)
	builder.WriteString(", ")
	builder.WriteString("custom_domain_id=")
	builder.WriteString(tc.CustomDomainID)
	builder.WriteByte(')')
	return builder.String()
}

// TrustCenters is a parsable slice of TrustCenter.
type TrustCenters []*TrustCenter
