// Code generated by ent, DO NOT EDIT.

package dnsverification

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldDeletedBy, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldOwnerID, v))
}

// CloudflareHostnameID applies equality check predicate on the "cloudflare_hostname_id" field. It's identical to CloudflareHostnameIDEQ.
func CloudflareHostnameID(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldCloudflareHostnameID, v))
}

// DNSTxtRecord applies equality check predicate on the "dns_txt_record" field. It's identical to DNSTxtRecordEQ.
func DNSTxtRecord(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldDNSTxtRecord, v))
}

// DNSTxtValue applies equality check predicate on the "dns_txt_value" field. It's identical to DNSTxtValueEQ.
func DNSTxtValue(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldDNSTxtValue, v))
}

// DNSVerificationStatusReason applies equality check predicate on the "dns_verification_status_reason" field. It's identical to DNSVerificationStatusReasonEQ.
func DNSVerificationStatusReason(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldDNSVerificationStatusReason, v))
}

// AcmeChallengePath applies equality check predicate on the "acme_challenge_path" field. It's identical to AcmeChallengePathEQ.
func AcmeChallengePath(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldAcmeChallengePath, v))
}

// ExpectedAcmeChallengeValue applies equality check predicate on the "expected_acme_challenge_value" field. It's identical to ExpectedAcmeChallengeValueEQ.
func ExpectedAcmeChallengeValue(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldExpectedAcmeChallengeValue, v))
}

// AcmeChallengeStatusReason applies equality check predicate on the "acme_challenge_status_reason" field. It's identical to AcmeChallengeStatusReasonEQ.
func AcmeChallengeStatusReason(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldAcmeChallengeStatusReason, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContainsFold(FieldDeletedBy, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotNull(FieldTags))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContainsFold(FieldOwnerID, v))
}

// CloudflareHostnameIDEQ applies the EQ predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldCloudflareHostnameID, v))
}

// CloudflareHostnameIDNEQ applies the NEQ predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDNEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldCloudflareHostnameID, v))
}

// CloudflareHostnameIDIn applies the In predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldCloudflareHostnameID, vs...))
}

// CloudflareHostnameIDNotIn applies the NotIn predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDNotIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldCloudflareHostnameID, vs...))
}

// CloudflareHostnameIDGT applies the GT predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDGT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldCloudflareHostnameID, v))
}

// CloudflareHostnameIDGTE applies the GTE predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDGTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldCloudflareHostnameID, v))
}

// CloudflareHostnameIDLT applies the LT predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDLT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldCloudflareHostnameID, v))
}

// CloudflareHostnameIDLTE applies the LTE predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDLTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldCloudflareHostnameID, v))
}

// CloudflareHostnameIDContains applies the Contains predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDContains(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContains(FieldCloudflareHostnameID, v))
}

// CloudflareHostnameIDHasPrefix applies the HasPrefix predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDHasPrefix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasPrefix(FieldCloudflareHostnameID, v))
}

// CloudflareHostnameIDHasSuffix applies the HasSuffix predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDHasSuffix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasSuffix(FieldCloudflareHostnameID, v))
}

// CloudflareHostnameIDEqualFold applies the EqualFold predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDEqualFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEqualFold(FieldCloudflareHostnameID, v))
}

// CloudflareHostnameIDContainsFold applies the ContainsFold predicate on the "cloudflare_hostname_id" field.
func CloudflareHostnameIDContainsFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContainsFold(FieldCloudflareHostnameID, v))
}

// DNSTxtRecordEQ applies the EQ predicate on the "dns_txt_record" field.
func DNSTxtRecordEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldDNSTxtRecord, v))
}

// DNSTxtRecordNEQ applies the NEQ predicate on the "dns_txt_record" field.
func DNSTxtRecordNEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldDNSTxtRecord, v))
}

// DNSTxtRecordIn applies the In predicate on the "dns_txt_record" field.
func DNSTxtRecordIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldDNSTxtRecord, vs...))
}

// DNSTxtRecordNotIn applies the NotIn predicate on the "dns_txt_record" field.
func DNSTxtRecordNotIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldDNSTxtRecord, vs...))
}

// DNSTxtRecordGT applies the GT predicate on the "dns_txt_record" field.
func DNSTxtRecordGT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldDNSTxtRecord, v))
}

// DNSTxtRecordGTE applies the GTE predicate on the "dns_txt_record" field.
func DNSTxtRecordGTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldDNSTxtRecord, v))
}

// DNSTxtRecordLT applies the LT predicate on the "dns_txt_record" field.
func DNSTxtRecordLT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldDNSTxtRecord, v))
}

// DNSTxtRecordLTE applies the LTE predicate on the "dns_txt_record" field.
func DNSTxtRecordLTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldDNSTxtRecord, v))
}

// DNSTxtRecordContains applies the Contains predicate on the "dns_txt_record" field.
func DNSTxtRecordContains(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContains(FieldDNSTxtRecord, v))
}

// DNSTxtRecordHasPrefix applies the HasPrefix predicate on the "dns_txt_record" field.
func DNSTxtRecordHasPrefix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasPrefix(FieldDNSTxtRecord, v))
}

// DNSTxtRecordHasSuffix applies the HasSuffix predicate on the "dns_txt_record" field.
func DNSTxtRecordHasSuffix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasSuffix(FieldDNSTxtRecord, v))
}

// DNSTxtRecordEqualFold applies the EqualFold predicate on the "dns_txt_record" field.
func DNSTxtRecordEqualFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEqualFold(FieldDNSTxtRecord, v))
}

// DNSTxtRecordContainsFold applies the ContainsFold predicate on the "dns_txt_record" field.
func DNSTxtRecordContainsFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContainsFold(FieldDNSTxtRecord, v))
}

// DNSTxtValueEQ applies the EQ predicate on the "dns_txt_value" field.
func DNSTxtValueEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldDNSTxtValue, v))
}

// DNSTxtValueNEQ applies the NEQ predicate on the "dns_txt_value" field.
func DNSTxtValueNEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldDNSTxtValue, v))
}

// DNSTxtValueIn applies the In predicate on the "dns_txt_value" field.
func DNSTxtValueIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldDNSTxtValue, vs...))
}

// DNSTxtValueNotIn applies the NotIn predicate on the "dns_txt_value" field.
func DNSTxtValueNotIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldDNSTxtValue, vs...))
}

// DNSTxtValueGT applies the GT predicate on the "dns_txt_value" field.
func DNSTxtValueGT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldDNSTxtValue, v))
}

// DNSTxtValueGTE applies the GTE predicate on the "dns_txt_value" field.
func DNSTxtValueGTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldDNSTxtValue, v))
}

// DNSTxtValueLT applies the LT predicate on the "dns_txt_value" field.
func DNSTxtValueLT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldDNSTxtValue, v))
}

// DNSTxtValueLTE applies the LTE predicate on the "dns_txt_value" field.
func DNSTxtValueLTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldDNSTxtValue, v))
}

// DNSTxtValueContains applies the Contains predicate on the "dns_txt_value" field.
func DNSTxtValueContains(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContains(FieldDNSTxtValue, v))
}

// DNSTxtValueHasPrefix applies the HasPrefix predicate on the "dns_txt_value" field.
func DNSTxtValueHasPrefix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasPrefix(FieldDNSTxtValue, v))
}

// DNSTxtValueHasSuffix applies the HasSuffix predicate on the "dns_txt_value" field.
func DNSTxtValueHasSuffix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasSuffix(FieldDNSTxtValue, v))
}

// DNSTxtValueEqualFold applies the EqualFold predicate on the "dns_txt_value" field.
func DNSTxtValueEqualFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEqualFold(FieldDNSTxtValue, v))
}

// DNSTxtValueContainsFold applies the ContainsFold predicate on the "dns_txt_value" field.
func DNSTxtValueContainsFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContainsFold(FieldDNSTxtValue, v))
}

// DNSVerificationStatusEQ applies the EQ predicate on the "dns_verification_status" field.
func DNSVerificationStatusEQ(v enums.CustomDomainStatus) predicate.DNSVerification {
	vc := v
	return predicate.DNSVerification(sql.FieldEQ(FieldDNSVerificationStatus, vc))
}

// DNSVerificationStatusNEQ applies the NEQ predicate on the "dns_verification_status" field.
func DNSVerificationStatusNEQ(v enums.CustomDomainStatus) predicate.DNSVerification {
	vc := v
	return predicate.DNSVerification(sql.FieldNEQ(FieldDNSVerificationStatus, vc))
}

// DNSVerificationStatusIn applies the In predicate on the "dns_verification_status" field.
func DNSVerificationStatusIn(vs ...enums.CustomDomainStatus) predicate.DNSVerification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSVerification(sql.FieldIn(FieldDNSVerificationStatus, v...))
}

// DNSVerificationStatusNotIn applies the NotIn predicate on the "dns_verification_status" field.
func DNSVerificationStatusNotIn(vs ...enums.CustomDomainStatus) predicate.DNSVerification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSVerification(sql.FieldNotIn(FieldDNSVerificationStatus, v...))
}

// DNSVerificationStatusReasonEQ applies the EQ predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldDNSVerificationStatusReason, v))
}

// DNSVerificationStatusReasonNEQ applies the NEQ predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonNEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldDNSVerificationStatusReason, v))
}

// DNSVerificationStatusReasonIn applies the In predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldDNSVerificationStatusReason, vs...))
}

// DNSVerificationStatusReasonNotIn applies the NotIn predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonNotIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldDNSVerificationStatusReason, vs...))
}

// DNSVerificationStatusReasonGT applies the GT predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonGT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldDNSVerificationStatusReason, v))
}

// DNSVerificationStatusReasonGTE applies the GTE predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonGTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldDNSVerificationStatusReason, v))
}

// DNSVerificationStatusReasonLT applies the LT predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonLT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldDNSVerificationStatusReason, v))
}

// DNSVerificationStatusReasonLTE applies the LTE predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonLTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldDNSVerificationStatusReason, v))
}

// DNSVerificationStatusReasonContains applies the Contains predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonContains(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContains(FieldDNSVerificationStatusReason, v))
}

// DNSVerificationStatusReasonHasPrefix applies the HasPrefix predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonHasPrefix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasPrefix(FieldDNSVerificationStatusReason, v))
}

// DNSVerificationStatusReasonHasSuffix applies the HasSuffix predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonHasSuffix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasSuffix(FieldDNSVerificationStatusReason, v))
}

// DNSVerificationStatusReasonIsNil applies the IsNil predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonIsNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIsNull(FieldDNSVerificationStatusReason))
}

// DNSVerificationStatusReasonNotNil applies the NotNil predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonNotNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotNull(FieldDNSVerificationStatusReason))
}

// DNSVerificationStatusReasonEqualFold applies the EqualFold predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonEqualFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEqualFold(FieldDNSVerificationStatusReason, v))
}

// DNSVerificationStatusReasonContainsFold applies the ContainsFold predicate on the "dns_verification_status_reason" field.
func DNSVerificationStatusReasonContainsFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContainsFold(FieldDNSVerificationStatusReason, v))
}

// AcmeChallengePathEQ applies the EQ predicate on the "acme_challenge_path" field.
func AcmeChallengePathEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldAcmeChallengePath, v))
}

// AcmeChallengePathNEQ applies the NEQ predicate on the "acme_challenge_path" field.
func AcmeChallengePathNEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldAcmeChallengePath, v))
}

// AcmeChallengePathIn applies the In predicate on the "acme_challenge_path" field.
func AcmeChallengePathIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldAcmeChallengePath, vs...))
}

// AcmeChallengePathNotIn applies the NotIn predicate on the "acme_challenge_path" field.
func AcmeChallengePathNotIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldAcmeChallengePath, vs...))
}

// AcmeChallengePathGT applies the GT predicate on the "acme_challenge_path" field.
func AcmeChallengePathGT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldAcmeChallengePath, v))
}

// AcmeChallengePathGTE applies the GTE predicate on the "acme_challenge_path" field.
func AcmeChallengePathGTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldAcmeChallengePath, v))
}

// AcmeChallengePathLT applies the LT predicate on the "acme_challenge_path" field.
func AcmeChallengePathLT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldAcmeChallengePath, v))
}

// AcmeChallengePathLTE applies the LTE predicate on the "acme_challenge_path" field.
func AcmeChallengePathLTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldAcmeChallengePath, v))
}

// AcmeChallengePathContains applies the Contains predicate on the "acme_challenge_path" field.
func AcmeChallengePathContains(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContains(FieldAcmeChallengePath, v))
}

// AcmeChallengePathHasPrefix applies the HasPrefix predicate on the "acme_challenge_path" field.
func AcmeChallengePathHasPrefix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasPrefix(FieldAcmeChallengePath, v))
}

// AcmeChallengePathHasSuffix applies the HasSuffix predicate on the "acme_challenge_path" field.
func AcmeChallengePathHasSuffix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasSuffix(FieldAcmeChallengePath, v))
}

// AcmeChallengePathIsNil applies the IsNil predicate on the "acme_challenge_path" field.
func AcmeChallengePathIsNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIsNull(FieldAcmeChallengePath))
}

// AcmeChallengePathNotNil applies the NotNil predicate on the "acme_challenge_path" field.
func AcmeChallengePathNotNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotNull(FieldAcmeChallengePath))
}

// AcmeChallengePathEqualFold applies the EqualFold predicate on the "acme_challenge_path" field.
func AcmeChallengePathEqualFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEqualFold(FieldAcmeChallengePath, v))
}

// AcmeChallengePathContainsFold applies the ContainsFold predicate on the "acme_challenge_path" field.
func AcmeChallengePathContainsFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContainsFold(FieldAcmeChallengePath, v))
}

// ExpectedAcmeChallengeValueEQ applies the EQ predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldExpectedAcmeChallengeValue, v))
}

// ExpectedAcmeChallengeValueNEQ applies the NEQ predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueNEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldExpectedAcmeChallengeValue, v))
}

// ExpectedAcmeChallengeValueIn applies the In predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldExpectedAcmeChallengeValue, vs...))
}

// ExpectedAcmeChallengeValueNotIn applies the NotIn predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueNotIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldExpectedAcmeChallengeValue, vs...))
}

// ExpectedAcmeChallengeValueGT applies the GT predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueGT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldExpectedAcmeChallengeValue, v))
}

// ExpectedAcmeChallengeValueGTE applies the GTE predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueGTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldExpectedAcmeChallengeValue, v))
}

// ExpectedAcmeChallengeValueLT applies the LT predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueLT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldExpectedAcmeChallengeValue, v))
}

// ExpectedAcmeChallengeValueLTE applies the LTE predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueLTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldExpectedAcmeChallengeValue, v))
}

// ExpectedAcmeChallengeValueContains applies the Contains predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueContains(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContains(FieldExpectedAcmeChallengeValue, v))
}

// ExpectedAcmeChallengeValueHasPrefix applies the HasPrefix predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueHasPrefix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasPrefix(FieldExpectedAcmeChallengeValue, v))
}

// ExpectedAcmeChallengeValueHasSuffix applies the HasSuffix predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueHasSuffix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasSuffix(FieldExpectedAcmeChallengeValue, v))
}

// ExpectedAcmeChallengeValueIsNil applies the IsNil predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueIsNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIsNull(FieldExpectedAcmeChallengeValue))
}

// ExpectedAcmeChallengeValueNotNil applies the NotNil predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueNotNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotNull(FieldExpectedAcmeChallengeValue))
}

// ExpectedAcmeChallengeValueEqualFold applies the EqualFold predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueEqualFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEqualFold(FieldExpectedAcmeChallengeValue, v))
}

// ExpectedAcmeChallengeValueContainsFold applies the ContainsFold predicate on the "expected_acme_challenge_value" field.
func ExpectedAcmeChallengeValueContainsFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContainsFold(FieldExpectedAcmeChallengeValue, v))
}

// AcmeChallengeStatusEQ applies the EQ predicate on the "acme_challenge_status" field.
func AcmeChallengeStatusEQ(v enums.CustomDomainStatus) predicate.DNSVerification {
	vc := v
	return predicate.DNSVerification(sql.FieldEQ(FieldAcmeChallengeStatus, vc))
}

// AcmeChallengeStatusNEQ applies the NEQ predicate on the "acme_challenge_status" field.
func AcmeChallengeStatusNEQ(v enums.CustomDomainStatus) predicate.DNSVerification {
	vc := v
	return predicate.DNSVerification(sql.FieldNEQ(FieldAcmeChallengeStatus, vc))
}

// AcmeChallengeStatusIn applies the In predicate on the "acme_challenge_status" field.
func AcmeChallengeStatusIn(vs ...enums.CustomDomainStatus) predicate.DNSVerification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSVerification(sql.FieldIn(FieldAcmeChallengeStatus, v...))
}

// AcmeChallengeStatusNotIn applies the NotIn predicate on the "acme_challenge_status" field.
func AcmeChallengeStatusNotIn(vs ...enums.CustomDomainStatus) predicate.DNSVerification {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.DNSVerification(sql.FieldNotIn(FieldAcmeChallengeStatus, v...))
}

// AcmeChallengeStatusReasonEQ applies the EQ predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEQ(FieldAcmeChallengeStatusReason, v))
}

// AcmeChallengeStatusReasonNEQ applies the NEQ predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonNEQ(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNEQ(FieldAcmeChallengeStatusReason, v))
}

// AcmeChallengeStatusReasonIn applies the In predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIn(FieldAcmeChallengeStatusReason, vs...))
}

// AcmeChallengeStatusReasonNotIn applies the NotIn predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonNotIn(vs ...string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotIn(FieldAcmeChallengeStatusReason, vs...))
}

// AcmeChallengeStatusReasonGT applies the GT predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonGT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGT(FieldAcmeChallengeStatusReason, v))
}

// AcmeChallengeStatusReasonGTE applies the GTE predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonGTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldGTE(FieldAcmeChallengeStatusReason, v))
}

// AcmeChallengeStatusReasonLT applies the LT predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonLT(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLT(FieldAcmeChallengeStatusReason, v))
}

// AcmeChallengeStatusReasonLTE applies the LTE predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonLTE(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldLTE(FieldAcmeChallengeStatusReason, v))
}

// AcmeChallengeStatusReasonContains applies the Contains predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonContains(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContains(FieldAcmeChallengeStatusReason, v))
}

// AcmeChallengeStatusReasonHasPrefix applies the HasPrefix predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonHasPrefix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasPrefix(FieldAcmeChallengeStatusReason, v))
}

// AcmeChallengeStatusReasonHasSuffix applies the HasSuffix predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonHasSuffix(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldHasSuffix(FieldAcmeChallengeStatusReason, v))
}

// AcmeChallengeStatusReasonIsNil applies the IsNil predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonIsNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldIsNull(FieldAcmeChallengeStatusReason))
}

// AcmeChallengeStatusReasonNotNil applies the NotNil predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonNotNil() predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldNotNull(FieldAcmeChallengeStatusReason))
}

// AcmeChallengeStatusReasonEqualFold applies the EqualFold predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonEqualFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldEqualFold(FieldAcmeChallengeStatusReason, v))
}

// AcmeChallengeStatusReasonContainsFold applies the ContainsFold predicate on the "acme_challenge_status_reason" field.
func AcmeChallengeStatusReasonContainsFold(v string) predicate.DNSVerification {
	return predicate.DNSVerification(sql.FieldContainsFold(FieldAcmeChallengeStatusReason, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.DNSVerification {
	return predicate.DNSVerification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.DNSVerification
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Organization) predicate.DNSVerification {
	return predicate.DNSVerification(func(s *sql.Selector) {
		step := newOwnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.DNSVerification
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCustomDomains applies the HasEdge predicate on the "custom_domains" edge.
func HasCustomDomains() predicate.DNSVerification {
	return predicate.DNSVerification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CustomDomainsTable, CustomDomainsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.CustomDomain
		step.Edge.Schema = schemaConfig.CustomDomain
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCustomDomainsWith applies the HasEdge predicate on the "custom_domains" edge with a given conditions (other predicates).
func HasCustomDomainsWith(preds ...predicate.CustomDomain) predicate.DNSVerification {
	return predicate.DNSVerification(func(s *sql.Selector) {
		step := newCustomDomainsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.CustomDomain
		step.Edge.Schema = schemaConfig.CustomDomain
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.DNSVerification) predicate.DNSVerification {
	return predicate.DNSVerification(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.DNSVerification) predicate.DNSVerification {
	return predicate.DNSVerification(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.DNSVerification) predicate.DNSVerification {
	return predicate.DNSVerification(sql.NotPredicates(p))
}
