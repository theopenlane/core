// Code generated by ent, DO NOT EDIT.

package dnsverification

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
)

const (
	// Label holds the string label denoting the dnsverification type in the database.
	Label = "dns_verification"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldCloudflareHostnameID holds the string denoting the cloudflare_hostname_id field in the database.
	FieldCloudflareHostnameID = "cloudflare_hostname_id"
	// FieldDNSTxtRecord holds the string denoting the dns_txt_record field in the database.
	FieldDNSTxtRecord = "dns_txt_record"
	// FieldDNSTxtValue holds the string denoting the dns_txt_value field in the database.
	FieldDNSTxtValue = "dns_txt_value"
	// FieldDNSVerificationStatus holds the string denoting the dns_verification_status field in the database.
	FieldDNSVerificationStatus = "dns_verification_status"
	// FieldDNSVerificationStatusReason holds the string denoting the dns_verification_status_reason field in the database.
	FieldDNSVerificationStatusReason = "dns_verification_status_reason"
	// FieldAcmeChallengePath holds the string denoting the acme_challenge_path field in the database.
	FieldAcmeChallengePath = "acme_challenge_path"
	// FieldExpectedAcmeChallengeValue holds the string denoting the expected_acme_challenge_value field in the database.
	FieldExpectedAcmeChallengeValue = "expected_acme_challenge_value"
	// FieldAcmeChallengeStatus holds the string denoting the acme_challenge_status field in the database.
	FieldAcmeChallengeStatus = "acme_challenge_status"
	// FieldAcmeChallengeStatusReason holds the string denoting the acme_challenge_status_reason field in the database.
	FieldAcmeChallengeStatusReason = "acme_challenge_status_reason"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeCustomDomains holds the string denoting the custom_domains edge name in mutations.
	EdgeCustomDomains = "custom_domains"
	// Table holds the table name of the dnsverification in the database.
	Table = "dns_verifications"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "dns_verifications"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// CustomDomainsTable is the table that holds the custom_domains relation/edge.
	CustomDomainsTable = "custom_domains"
	// CustomDomainsInverseTable is the table name for the CustomDomain entity.
	// It exists in this package in order to avoid circular dependency with the "customdomain" package.
	CustomDomainsInverseTable = "custom_domains"
	// CustomDomainsColumn is the table column denoting the custom_domains relation/edge.
	CustomDomainsColumn = "dns_verification_custom_domains"
)

// Columns holds all SQL columns for dnsverification fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTags,
	FieldOwnerID,
	FieldCloudflareHostnameID,
	FieldDNSTxtRecord,
	FieldDNSTxtValue,
	FieldDNSVerificationStatus,
	FieldDNSVerificationStatusReason,
	FieldAcmeChallengePath,
	FieldExpectedAcmeChallengeValue,
	FieldAcmeChallengeStatus,
	FieldAcmeChallengeStatusReason,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [5]ent.Hook
	Interceptors [3]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// CloudflareHostnameIDValidator is a validator for the "cloudflare_hostname_id" field. It is called by the builders before save.
	CloudflareHostnameIDValidator func(string) error
	// DNSTxtRecordValidator is a validator for the "dns_txt_record" field. It is called by the builders before save.
	DNSTxtRecordValidator func(string) error
	// DNSTxtValueValidator is a validator for the "dns_txt_value" field. It is called by the builders before save.
	DNSTxtValueValidator func(string) error
	// DNSVerificationStatusReasonValidator is a validator for the "dns_verification_status_reason" field. It is called by the builders before save.
	DNSVerificationStatusReasonValidator func(string) error
	// AcmeChallengePathValidator is a validator for the "acme_challenge_path" field. It is called by the builders before save.
	AcmeChallengePathValidator func(string) error
	// ExpectedAcmeChallengeValueValidator is a validator for the "expected_acme_challenge_value" field. It is called by the builders before save.
	ExpectedAcmeChallengeValueValidator func(string) error
	// AcmeChallengeStatusReasonValidator is a validator for the "acme_challenge_status_reason" field. It is called by the builders before save.
	AcmeChallengeStatusReasonValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

const DefaultDNSVerificationStatus enums.DNSVerificationStatus = "pending"

// DNSVerificationStatusValidator is a validator for the "dns_verification_status" field enum values. It is called by the builders before save.
func DNSVerificationStatusValidator(dvs enums.DNSVerificationStatus) error {
	switch dvs.String() {
	case "active", "pending", "active_redeploying", "moved", "pending_deletion", "deleted", "pending_blocked", "pending_migration", "pending_provisioned", "test_pending", "test_active", "test_active_apex", "test_blocked", "test_failed", "provisioned", "blocked":
		return nil
	default:
		return fmt.Errorf("dnsverification: invalid enum value for dns_verification_status field: %q", dvs)
	}
}

const DefaultAcmeChallengeStatus enums.SSLVerificationStatus = "initializing"

// AcmeChallengeStatusValidator is a validator for the "acme_challenge_status" field enum values. It is called by the builders before save.
func AcmeChallengeStatusValidator(acs enums.SSLVerificationStatus) error {
	switch acs.String() {
	case "initializing", "pending_validation", "deleted", "pending_issuance", "pending_deployment", "pending_deletion", "pending_expiration", "expired", "active", "initializing_timed_out", "validation_timed_out", "issuance_timed_out", "deployment_timed_out", "deletion_timed_out", "pending_cleanup", "staging_deployment", "staging_active", "deactivating", "inactive", "backup_issued", "holding_deployment":
		return nil
	default:
		return fmt.Errorf("dnsverification: invalid enum value for acme_challenge_status field: %q", acs)
	}
}

// OrderOption defines the ordering options for the DNSVerification queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByCloudflareHostnameID orders the results by the cloudflare_hostname_id field.
func ByCloudflareHostnameID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCloudflareHostnameID, opts...).ToFunc()
}

// ByDNSTxtRecord orders the results by the dns_txt_record field.
func ByDNSTxtRecord(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDNSTxtRecord, opts...).ToFunc()
}

// ByDNSTxtValue orders the results by the dns_txt_value field.
func ByDNSTxtValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDNSTxtValue, opts...).ToFunc()
}

// ByDNSVerificationStatus orders the results by the dns_verification_status field.
func ByDNSVerificationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDNSVerificationStatus, opts...).ToFunc()
}

// ByDNSVerificationStatusReason orders the results by the dns_verification_status_reason field.
func ByDNSVerificationStatusReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDNSVerificationStatusReason, opts...).ToFunc()
}

// ByAcmeChallengePath orders the results by the acme_challenge_path field.
func ByAcmeChallengePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcmeChallengePath, opts...).ToFunc()
}

// ByExpectedAcmeChallengeValue orders the results by the expected_acme_challenge_value field.
func ByExpectedAcmeChallengeValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpectedAcmeChallengeValue, opts...).ToFunc()
}

// ByAcmeChallengeStatus orders the results by the acme_challenge_status field.
func ByAcmeChallengeStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcmeChallengeStatus, opts...).ToFunc()
}

// ByAcmeChallengeStatusReason orders the results by the acme_challenge_status_reason field.
func ByAcmeChallengeStatusReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcmeChallengeStatusReason, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomDomainsCount orders the results by custom_domains count.
func ByCustomDomainsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomDomainsStep(), opts...)
	}
}

// ByCustomDomains orders the results by custom_domains terms.
func ByCustomDomains(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomDomainsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newCustomDomainsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomDomainsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CustomDomainsTable, CustomDomainsColumn),
	)
}

var (
	// enums.DNSVerificationStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.DNSVerificationStatus)(nil)
	// enums.DNSVerificationStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.DNSVerificationStatus)(nil)
)

var (
	// enums.SSLVerificationStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.SSLVerificationStatus)(nil)
	// enums.SSLVerificationStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.SSLVerificationStatus)(nil)
)
