// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/filedownloadtoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// FileDownloadTokenUpdate is the builder for updating FileDownloadToken entities.
type FileDownloadTokenUpdate struct {
	config
	hooks     []Hook
	mutation  *FileDownloadTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FileDownloadTokenUpdate builder.
func (_u *FileDownloadTokenUpdate) Where(ps ...predicate.FileDownloadToken) *FileDownloadTokenUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FileDownloadTokenUpdate) SetUpdatedAt(v time.Time) *FileDownloadTokenUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *FileDownloadTokenUpdate) ClearUpdatedAt() *FileDownloadTokenUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *FileDownloadTokenUpdate) SetUpdatedBy(v string) *FileDownloadTokenUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *FileDownloadTokenUpdate) SetNillableUpdatedBy(v *string) *FileDownloadTokenUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *FileDownloadTokenUpdate) ClearUpdatedBy() *FileDownloadTokenUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *FileDownloadTokenUpdate) SetDeletedAt(v time.Time) *FileDownloadTokenUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *FileDownloadTokenUpdate) SetNillableDeletedAt(v *time.Time) *FileDownloadTokenUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *FileDownloadTokenUpdate) ClearDeletedAt() *FileDownloadTokenUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *FileDownloadTokenUpdate) SetDeletedBy(v string) *FileDownloadTokenUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *FileDownloadTokenUpdate) SetNillableDeletedBy(v *string) *FileDownloadTokenUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *FileDownloadTokenUpdate) ClearDeletedBy() *FileDownloadTokenUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *FileDownloadTokenUpdate) SetOwnerID(v string) *FileDownloadTokenUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *FileDownloadTokenUpdate) SetNillableOwnerID(v *string) *FileDownloadTokenUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *FileDownloadTokenUpdate) SetToken(v string) *FileDownloadTokenUpdate {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *FileDownloadTokenUpdate) SetNillableToken(v *string) *FileDownloadTokenUpdate {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// ClearToken clears the value of the "token" field.
func (_u *FileDownloadTokenUpdate) ClearToken() *FileDownloadTokenUpdate {
	_u.mutation.ClearToken()
	return _u
}

// SetTTL sets the "ttl" field.
func (_u *FileDownloadTokenUpdate) SetTTL(v time.Time) *FileDownloadTokenUpdate {
	_u.mutation.SetTTL(v)
	return _u
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (_u *FileDownloadTokenUpdate) SetNillableTTL(v *time.Time) *FileDownloadTokenUpdate {
	if v != nil {
		_u.SetTTL(*v)
	}
	return _u
}

// ClearTTL clears the value of the "ttl" field.
func (_u *FileDownloadTokenUpdate) ClearTTL() *FileDownloadTokenUpdate {
	_u.mutation.ClearTTL()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *FileDownloadTokenUpdate) SetUserID(v string) *FileDownloadTokenUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *FileDownloadTokenUpdate) SetNillableUserID(v *string) *FileDownloadTokenUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *FileDownloadTokenUpdate) ClearUserID() *FileDownloadTokenUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *FileDownloadTokenUpdate) SetOrganizationID(v string) *FileDownloadTokenUpdate {
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *FileDownloadTokenUpdate) SetNillableOrganizationID(v *string) *FileDownloadTokenUpdate {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (_u *FileDownloadTokenUpdate) ClearOrganizationID() *FileDownloadTokenUpdate {
	_u.mutation.ClearOrganizationID()
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *FileDownloadTokenUpdate) SetFileID(v string) *FileDownloadTokenUpdate {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *FileDownloadTokenUpdate) SetNillableFileID(v *string) *FileDownloadTokenUpdate {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// ClearFileID clears the value of the "file_id" field.
func (_u *FileDownloadTokenUpdate) ClearFileID() *FileDownloadTokenUpdate {
	_u.mutation.ClearFileID()
	return _u
}

// SetSecret sets the "secret" field.
func (_u *FileDownloadTokenUpdate) SetSecret(v []byte) *FileDownloadTokenUpdate {
	_u.mutation.SetSecret(v)
	return _u
}

// ClearSecret clears the value of the "secret" field.
func (_u *FileDownloadTokenUpdate) ClearSecret() *FileDownloadTokenUpdate {
	_u.mutation.ClearSecret()
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *FileDownloadTokenUpdate) SetOwner(v *User) *FileDownloadTokenUpdate {
	return _u.SetOwnerID(v.ID)
}

// Mutation returns the FileDownloadTokenMutation object of the builder.
func (_u *FileDownloadTokenUpdate) Mutation() *FileDownloadTokenMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *FileDownloadTokenUpdate) ClearOwner() *FileDownloadTokenUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FileDownloadTokenUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileDownloadTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FileDownloadTokenUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileDownloadTokenUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FileDownloadTokenUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if filedownloadtoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized filedownloadtoken.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := filedownloadtoken.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileDownloadTokenUpdate) check() error {
	if _u.mutation.OwnerCleared() && len(_u.mutation.OwnerIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "FileDownloadToken.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *FileDownloadTokenUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileDownloadTokenUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *FileDownloadTokenUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filedownloadtoken.Table, filedownloadtoken.Columns, sqlgraph.NewFieldSpec(filedownloadtoken.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(filedownloadtoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(filedownloadtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(filedownloadtoken.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(filedownloadtoken.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(filedownloadtoken.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(filedownloadtoken.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(filedownloadtoken.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(filedownloadtoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(filedownloadtoken.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(filedownloadtoken.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(filedownloadtoken.FieldToken, field.TypeString, value)
	}
	if _u.mutation.TokenCleared() {
		_spec.ClearField(filedownloadtoken.FieldToken, field.TypeString)
	}
	if value, ok := _u.mutation.TTL(); ok {
		_spec.SetField(filedownloadtoken.FieldTTL, field.TypeTime, value)
	}
	if _u.mutation.TTLCleared() {
		_spec.ClearField(filedownloadtoken.FieldTTL, field.TypeTime)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(filedownloadtoken.FieldUserID, field.TypeString, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(filedownloadtoken.FieldUserID, field.TypeString)
	}
	if value, ok := _u.mutation.OrganizationID(); ok {
		_spec.SetField(filedownloadtoken.FieldOrganizationID, field.TypeString, value)
	}
	if _u.mutation.OrganizationIDCleared() {
		_spec.ClearField(filedownloadtoken.FieldOrganizationID, field.TypeString)
	}
	if value, ok := _u.mutation.FileID(); ok {
		_spec.SetField(filedownloadtoken.FieldFileID, field.TypeString, value)
	}
	if _u.mutation.FileIDCleared() {
		_spec.ClearField(filedownloadtoken.FieldFileID, field.TypeString)
	}
	if value, ok := _u.mutation.Secret(); ok {
		_spec.SetField(filedownloadtoken.FieldSecret, field.TypeBytes, value)
	}
	if _u.mutation.SecretCleared() {
		_spec.ClearField(filedownloadtoken.FieldSecret, field.TypeBytes)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedownloadtoken.OwnerTable,
			Columns: []string{filedownloadtoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileDownloadToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedownloadtoken.OwnerTable,
			Columns: []string{filedownloadtoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileDownloadToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.FileDownloadToken
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filedownloadtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FileDownloadTokenUpdateOne is the builder for updating a single FileDownloadToken entity.
type FileDownloadTokenUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FileDownloadTokenMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *FileDownloadTokenUpdateOne) SetUpdatedAt(v time.Time) *FileDownloadTokenUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *FileDownloadTokenUpdateOne) ClearUpdatedAt() *FileDownloadTokenUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *FileDownloadTokenUpdateOne) SetUpdatedBy(v string) *FileDownloadTokenUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *FileDownloadTokenUpdateOne) SetNillableUpdatedBy(v *string) *FileDownloadTokenUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *FileDownloadTokenUpdateOne) ClearUpdatedBy() *FileDownloadTokenUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *FileDownloadTokenUpdateOne) SetDeletedAt(v time.Time) *FileDownloadTokenUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *FileDownloadTokenUpdateOne) SetNillableDeletedAt(v *time.Time) *FileDownloadTokenUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *FileDownloadTokenUpdateOne) ClearDeletedAt() *FileDownloadTokenUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *FileDownloadTokenUpdateOne) SetDeletedBy(v string) *FileDownloadTokenUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *FileDownloadTokenUpdateOne) SetNillableDeletedBy(v *string) *FileDownloadTokenUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *FileDownloadTokenUpdateOne) ClearDeletedBy() *FileDownloadTokenUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *FileDownloadTokenUpdateOne) SetOwnerID(v string) *FileDownloadTokenUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *FileDownloadTokenUpdateOne) SetNillableOwnerID(v *string) *FileDownloadTokenUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *FileDownloadTokenUpdateOne) SetToken(v string) *FileDownloadTokenUpdateOne {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *FileDownloadTokenUpdateOne) SetNillableToken(v *string) *FileDownloadTokenUpdateOne {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// ClearToken clears the value of the "token" field.
func (_u *FileDownloadTokenUpdateOne) ClearToken() *FileDownloadTokenUpdateOne {
	_u.mutation.ClearToken()
	return _u
}

// SetTTL sets the "ttl" field.
func (_u *FileDownloadTokenUpdateOne) SetTTL(v time.Time) *FileDownloadTokenUpdateOne {
	_u.mutation.SetTTL(v)
	return _u
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (_u *FileDownloadTokenUpdateOne) SetNillableTTL(v *time.Time) *FileDownloadTokenUpdateOne {
	if v != nil {
		_u.SetTTL(*v)
	}
	return _u
}

// ClearTTL clears the value of the "ttl" field.
func (_u *FileDownloadTokenUpdateOne) ClearTTL() *FileDownloadTokenUpdateOne {
	_u.mutation.ClearTTL()
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *FileDownloadTokenUpdateOne) SetUserID(v string) *FileDownloadTokenUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *FileDownloadTokenUpdateOne) SetNillableUserID(v *string) *FileDownloadTokenUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *FileDownloadTokenUpdateOne) ClearUserID() *FileDownloadTokenUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *FileDownloadTokenUpdateOne) SetOrganizationID(v string) *FileDownloadTokenUpdateOne {
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *FileDownloadTokenUpdateOne) SetNillableOrganizationID(v *string) *FileDownloadTokenUpdateOne {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (_u *FileDownloadTokenUpdateOne) ClearOrganizationID() *FileDownloadTokenUpdateOne {
	_u.mutation.ClearOrganizationID()
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *FileDownloadTokenUpdateOne) SetFileID(v string) *FileDownloadTokenUpdateOne {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *FileDownloadTokenUpdateOne) SetNillableFileID(v *string) *FileDownloadTokenUpdateOne {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// ClearFileID clears the value of the "file_id" field.
func (_u *FileDownloadTokenUpdateOne) ClearFileID() *FileDownloadTokenUpdateOne {
	_u.mutation.ClearFileID()
	return _u
}

// SetSecret sets the "secret" field.
func (_u *FileDownloadTokenUpdateOne) SetSecret(v []byte) *FileDownloadTokenUpdateOne {
	_u.mutation.SetSecret(v)
	return _u
}

// ClearSecret clears the value of the "secret" field.
func (_u *FileDownloadTokenUpdateOne) ClearSecret() *FileDownloadTokenUpdateOne {
	_u.mutation.ClearSecret()
	return _u
}

// SetOwner sets the "owner" edge to the User entity.
func (_u *FileDownloadTokenUpdateOne) SetOwner(v *User) *FileDownloadTokenUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// Mutation returns the FileDownloadTokenMutation object of the builder.
func (_u *FileDownloadTokenUpdateOne) Mutation() *FileDownloadTokenMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (_u *FileDownloadTokenUpdateOne) ClearOwner() *FileDownloadTokenUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// Where appends a list predicates to the FileDownloadTokenUpdate builder.
func (_u *FileDownloadTokenUpdateOne) Where(ps ...predicate.FileDownloadToken) *FileDownloadTokenUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FileDownloadTokenUpdateOne) Select(field string, fields ...string) *FileDownloadTokenUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated FileDownloadToken entity.
func (_u *FileDownloadTokenUpdateOne) Save(ctx context.Context) (*FileDownloadToken, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileDownloadTokenUpdateOne) SaveX(ctx context.Context) *FileDownloadToken {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FileDownloadTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileDownloadTokenUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FileDownloadTokenUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if filedownloadtoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized filedownloadtoken.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := filedownloadtoken.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileDownloadTokenUpdateOne) check() error {
	if _u.mutation.OwnerCleared() && len(_u.mutation.OwnerIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "FileDownloadToken.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *FileDownloadTokenUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileDownloadTokenUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *FileDownloadTokenUpdateOne) sqlSave(ctx context.Context) (_node *FileDownloadToken, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filedownloadtoken.Table, filedownloadtoken.Columns, sqlgraph.NewFieldSpec(filedownloadtoken.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "FileDownloadToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filedownloadtoken.FieldID)
		for _, f := range fields {
			if !filedownloadtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != filedownloadtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(filedownloadtoken.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(filedownloadtoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(filedownloadtoken.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(filedownloadtoken.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(filedownloadtoken.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(filedownloadtoken.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(filedownloadtoken.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(filedownloadtoken.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(filedownloadtoken.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(filedownloadtoken.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(filedownloadtoken.FieldToken, field.TypeString, value)
	}
	if _u.mutation.TokenCleared() {
		_spec.ClearField(filedownloadtoken.FieldToken, field.TypeString)
	}
	if value, ok := _u.mutation.TTL(); ok {
		_spec.SetField(filedownloadtoken.FieldTTL, field.TypeTime, value)
	}
	if _u.mutation.TTLCleared() {
		_spec.ClearField(filedownloadtoken.FieldTTL, field.TypeTime)
	}
	if value, ok := _u.mutation.UserID(); ok {
		_spec.SetField(filedownloadtoken.FieldUserID, field.TypeString, value)
	}
	if _u.mutation.UserIDCleared() {
		_spec.ClearField(filedownloadtoken.FieldUserID, field.TypeString)
	}
	if value, ok := _u.mutation.OrganizationID(); ok {
		_spec.SetField(filedownloadtoken.FieldOrganizationID, field.TypeString, value)
	}
	if _u.mutation.OrganizationIDCleared() {
		_spec.ClearField(filedownloadtoken.FieldOrganizationID, field.TypeString)
	}
	if value, ok := _u.mutation.FileID(); ok {
		_spec.SetField(filedownloadtoken.FieldFileID, field.TypeString, value)
	}
	if _u.mutation.FileIDCleared() {
		_spec.ClearField(filedownloadtoken.FieldFileID, field.TypeString)
	}
	if value, ok := _u.mutation.Secret(); ok {
		_spec.SetField(filedownloadtoken.FieldSecret, field.TypeBytes, value)
	}
	if _u.mutation.SecretCleared() {
		_spec.ClearField(filedownloadtoken.FieldSecret, field.TypeBytes)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedownloadtoken.OwnerTable,
			Columns: []string{filedownloadtoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileDownloadToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   filedownloadtoken.OwnerTable,
			Columns: []string{filedownloadtoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileDownloadToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.FileDownloadToken
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &FileDownloadToken{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filedownloadtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
