// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitlement"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/ohauthtootoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/webhook"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EventUpdate) SetUpdatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (eu *EventUpdate) ClearUpdatedAt() *EventUpdate {
	eu.mutation.ClearUpdatedAt()
	return eu
}

// SetUpdatedBy sets the "updated_by" field.
func (eu *EventUpdate) SetUpdatedBy(s string) *EventUpdate {
	eu.mutation.SetUpdatedBy(s)
	return eu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eu *EventUpdate) SetNillableUpdatedBy(s *string) *EventUpdate {
	if s != nil {
		eu.SetUpdatedBy(*s)
	}
	return eu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (eu *EventUpdate) ClearUpdatedBy() *EventUpdate {
	eu.mutation.ClearUpdatedBy()
	return eu
}

// SetTags sets the "tags" field.
func (eu *EventUpdate) SetTags(s []string) *EventUpdate {
	eu.mutation.SetTags(s)
	return eu
}

// AppendTags appends s to the "tags" field.
func (eu *EventUpdate) AppendTags(s []string) *EventUpdate {
	eu.mutation.AppendTags(s)
	return eu
}

// ClearTags clears the value of the "tags" field.
func (eu *EventUpdate) ClearTags() *EventUpdate {
	eu.mutation.ClearTags()
	return eu
}

// SetEventID sets the "event_id" field.
func (eu *EventUpdate) SetEventID(s string) *EventUpdate {
	eu.mutation.SetEventID(s)
	return eu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEventID(s *string) *EventUpdate {
	if s != nil {
		eu.SetEventID(*s)
	}
	return eu
}

// ClearEventID clears the value of the "event_id" field.
func (eu *EventUpdate) ClearEventID() *EventUpdate {
	eu.mutation.ClearEventID()
	return eu
}

// SetCorrelationID sets the "correlation_id" field.
func (eu *EventUpdate) SetCorrelationID(s string) *EventUpdate {
	eu.mutation.SetCorrelationID(s)
	return eu
}

// SetNillableCorrelationID sets the "correlation_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableCorrelationID(s *string) *EventUpdate {
	if s != nil {
		eu.SetCorrelationID(*s)
	}
	return eu
}

// ClearCorrelationID clears the value of the "correlation_id" field.
func (eu *EventUpdate) ClearCorrelationID() *EventUpdate {
	eu.mutation.ClearCorrelationID()
	return eu
}

// SetEventType sets the "event_type" field.
func (eu *EventUpdate) SetEventType(s string) *EventUpdate {
	eu.mutation.SetEventType(s)
	return eu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEventType(s *string) *EventUpdate {
	if s != nil {
		eu.SetEventType(*s)
	}
	return eu
}

// SetMetadata sets the "metadata" field.
func (eu *EventUpdate) SetMetadata(m map[string]interface{}) *EventUpdate {
	eu.mutation.SetMetadata(m)
	return eu
}

// ClearMetadata clears the value of the "metadata" field.
func (eu *EventUpdate) ClearMetadata() *EventUpdate {
	eu.mutation.ClearMetadata()
	return eu
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (eu *EventUpdate) AddUserIDs(ids ...string) *EventUpdate {
	eu.mutation.AddUserIDs(ids...)
	return eu
}

// AddUser adds the "user" edges to the User entity.
func (eu *EventUpdate) AddUser(u ...*User) *EventUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddUserIDs(ids...)
}

// AddGroupIDs adds the "group" edge to the Group entity by IDs.
func (eu *EventUpdate) AddGroupIDs(ids ...string) *EventUpdate {
	eu.mutation.AddGroupIDs(ids...)
	return eu
}

// AddGroup adds the "group" edges to the Group entity.
func (eu *EventUpdate) AddGroup(g ...*Group) *EventUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return eu.AddGroupIDs(ids...)
}

// AddIntegrationIDs adds the "integration" edge to the Integration entity by IDs.
func (eu *EventUpdate) AddIntegrationIDs(ids ...string) *EventUpdate {
	eu.mutation.AddIntegrationIDs(ids...)
	return eu
}

// AddIntegration adds the "integration" edges to the Integration entity.
func (eu *EventUpdate) AddIntegration(i ...*Integration) *EventUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddIntegrationIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (eu *EventUpdate) AddOrganizationIDs(ids ...string) *EventUpdate {
	eu.mutation.AddOrganizationIDs(ids...)
	return eu
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (eu *EventUpdate) AddOrganization(o ...*Organization) *EventUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.AddOrganizationIDs(ids...)
}

// AddInviteIDs adds the "invite" edge to the Invite entity by IDs.
func (eu *EventUpdate) AddInviteIDs(ids ...string) *EventUpdate {
	eu.mutation.AddInviteIDs(ids...)
	return eu
}

// AddInvite adds the "invite" edges to the Invite entity.
func (eu *EventUpdate) AddInvite(i ...*Invite) *EventUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddInviteIDs(ids...)
}

// AddFeatureIDs adds the "feature" edge to the Feature entity by IDs.
func (eu *EventUpdate) AddFeatureIDs(ids ...string) *EventUpdate {
	eu.mutation.AddFeatureIDs(ids...)
	return eu
}

// AddFeature adds the "feature" edges to the Feature entity.
func (eu *EventUpdate) AddFeature(f ...*Feature) *EventUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddFeatureIDs(ids...)
}

// AddEntitlementplanIDs adds the "entitlementplan" edge to the EntitlementPlan entity by IDs.
func (eu *EventUpdate) AddEntitlementplanIDs(ids ...string) *EventUpdate {
	eu.mutation.AddEntitlementplanIDs(ids...)
	return eu
}

// AddEntitlementplan adds the "entitlementplan" edges to the EntitlementPlan entity.
func (eu *EventUpdate) AddEntitlementplan(e ...*EntitlementPlan) *EventUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEntitlementplanIDs(ids...)
}

// AddEntitlementplanfeatureIDs adds the "entitlementplanfeature" edge to the EntitlementPlanFeature entity by IDs.
func (eu *EventUpdate) AddEntitlementplanfeatureIDs(ids ...string) *EventUpdate {
	eu.mutation.AddEntitlementplanfeatureIDs(ids...)
	return eu
}

// AddEntitlementplanfeature adds the "entitlementplanfeature" edges to the EntitlementPlanFeature entity.
func (eu *EventUpdate) AddEntitlementplanfeature(e ...*EntitlementPlanFeature) *EventUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEntitlementplanfeatureIDs(ids...)
}

// AddPersonalAccessTokenIDs adds the "personal_access_token" edge to the PersonalAccessToken entity by IDs.
func (eu *EventUpdate) AddPersonalAccessTokenIDs(ids ...string) *EventUpdate {
	eu.mutation.AddPersonalAccessTokenIDs(ids...)
	return eu
}

// AddPersonalAccessToken adds the "personal_access_token" edges to the PersonalAccessToken entity.
func (eu *EventUpdate) AddPersonalAccessToken(p ...*PersonalAccessToken) *EventUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddPersonalAccessTokenIDs(ids...)
}

// AddOauth2tokenIDs adds the "oauth2token" edge to the OhAuthTooToken entity by IDs.
func (eu *EventUpdate) AddOauth2tokenIDs(ids ...string) *EventUpdate {
	eu.mutation.AddOauth2tokenIDs(ids...)
	return eu
}

// AddOauth2token adds the "oauth2token" edges to the OhAuthTooToken entity.
func (eu *EventUpdate) AddOauth2token(o ...*OhAuthTooToken) *EventUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.AddOauth2tokenIDs(ids...)
}

// AddHushIDs adds the "hush" edge to the Hush entity by IDs.
func (eu *EventUpdate) AddHushIDs(ids ...string) *EventUpdate {
	eu.mutation.AddHushIDs(ids...)
	return eu
}

// AddHush adds the "hush" edges to the Hush entity.
func (eu *EventUpdate) AddHush(h ...*Hush) *EventUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.AddHushIDs(ids...)
}

// AddOrgmembershipIDs adds the "orgmembership" edge to the OrgMembership entity by IDs.
func (eu *EventUpdate) AddOrgmembershipIDs(ids ...string) *EventUpdate {
	eu.mutation.AddOrgmembershipIDs(ids...)
	return eu
}

// AddOrgmembership adds the "orgmembership" edges to the OrgMembership entity.
func (eu *EventUpdate) AddOrgmembership(o ...*OrgMembership) *EventUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.AddOrgmembershipIDs(ids...)
}

// AddGroupmembershipIDs adds the "groupmembership" edge to the GroupMembership entity by IDs.
func (eu *EventUpdate) AddGroupmembershipIDs(ids ...string) *EventUpdate {
	eu.mutation.AddGroupmembershipIDs(ids...)
	return eu
}

// AddGroupmembership adds the "groupmembership" edges to the GroupMembership entity.
func (eu *EventUpdate) AddGroupmembership(g ...*GroupMembership) *EventUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return eu.AddGroupmembershipIDs(ids...)
}

// AddEntitlementIDs adds the "entitlement" edge to the Entitlement entity by IDs.
func (eu *EventUpdate) AddEntitlementIDs(ids ...string) *EventUpdate {
	eu.mutation.AddEntitlementIDs(ids...)
	return eu
}

// AddEntitlement adds the "entitlement" edges to the Entitlement entity.
func (eu *EventUpdate) AddEntitlement(e ...*Entitlement) *EventUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.AddEntitlementIDs(ids...)
}

// AddWebhookIDs adds the "webhook" edge to the Webhook entity by IDs.
func (eu *EventUpdate) AddWebhookIDs(ids ...string) *EventUpdate {
	eu.mutation.AddWebhookIDs(ids...)
	return eu
}

// AddWebhook adds the "webhook" edges to the Webhook entity.
func (eu *EventUpdate) AddWebhook(w ...*Webhook) *EventUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.AddWebhookIDs(ids...)
}

// AddSubscriberIDs adds the "subscriber" edge to the Subscriber entity by IDs.
func (eu *EventUpdate) AddSubscriberIDs(ids ...string) *EventUpdate {
	eu.mutation.AddSubscriberIDs(ids...)
	return eu
}

// AddSubscriber adds the "subscriber" edges to the Subscriber entity.
func (eu *EventUpdate) AddSubscriber(s ...*Subscriber) *EventUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddSubscriberIDs(ids...)
}

// AddFileIDs adds the "file" edge to the File entity by IDs.
func (eu *EventUpdate) AddFileIDs(ids ...string) *EventUpdate {
	eu.mutation.AddFileIDs(ids...)
	return eu
}

// AddFile adds the "file" edges to the File entity.
func (eu *EventUpdate) AddFile(f ...*File) *EventUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddFileIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (eu *EventUpdate) ClearUser() *EventUpdate {
	eu.mutation.ClearUser()
	return eu
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (eu *EventUpdate) RemoveUserIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveUserIDs(ids...)
	return eu
}

// RemoveUser removes "user" edges to User entities.
func (eu *EventUpdate) RemoveUser(u ...*User) *EventUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveUserIDs(ids...)
}

// ClearGroup clears all "group" edges to the Group entity.
func (eu *EventUpdate) ClearGroup() *EventUpdate {
	eu.mutation.ClearGroup()
	return eu
}

// RemoveGroupIDs removes the "group" edge to Group entities by IDs.
func (eu *EventUpdate) RemoveGroupIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveGroupIDs(ids...)
	return eu
}

// RemoveGroup removes "group" edges to Group entities.
func (eu *EventUpdate) RemoveGroup(g ...*Group) *EventUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return eu.RemoveGroupIDs(ids...)
}

// ClearIntegration clears all "integration" edges to the Integration entity.
func (eu *EventUpdate) ClearIntegration() *EventUpdate {
	eu.mutation.ClearIntegration()
	return eu
}

// RemoveIntegrationIDs removes the "integration" edge to Integration entities by IDs.
func (eu *EventUpdate) RemoveIntegrationIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveIntegrationIDs(ids...)
	return eu
}

// RemoveIntegration removes "integration" edges to Integration entities.
func (eu *EventUpdate) RemoveIntegration(i ...*Integration) *EventUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveIntegrationIDs(ids...)
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (eu *EventUpdate) ClearOrganization() *EventUpdate {
	eu.mutation.ClearOrganization()
	return eu
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (eu *EventUpdate) RemoveOrganizationIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveOrganizationIDs(ids...)
	return eu
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (eu *EventUpdate) RemoveOrganization(o ...*Organization) *EventUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.RemoveOrganizationIDs(ids...)
}

// ClearInvite clears all "invite" edges to the Invite entity.
func (eu *EventUpdate) ClearInvite() *EventUpdate {
	eu.mutation.ClearInvite()
	return eu
}

// RemoveInviteIDs removes the "invite" edge to Invite entities by IDs.
func (eu *EventUpdate) RemoveInviteIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveInviteIDs(ids...)
	return eu
}

// RemoveInvite removes "invite" edges to Invite entities.
func (eu *EventUpdate) RemoveInvite(i ...*Invite) *EventUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveInviteIDs(ids...)
}

// ClearFeature clears all "feature" edges to the Feature entity.
func (eu *EventUpdate) ClearFeature() *EventUpdate {
	eu.mutation.ClearFeature()
	return eu
}

// RemoveFeatureIDs removes the "feature" edge to Feature entities by IDs.
func (eu *EventUpdate) RemoveFeatureIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveFeatureIDs(ids...)
	return eu
}

// RemoveFeature removes "feature" edges to Feature entities.
func (eu *EventUpdate) RemoveFeature(f ...*Feature) *EventUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveFeatureIDs(ids...)
}

// ClearEntitlementplan clears all "entitlementplan" edges to the EntitlementPlan entity.
func (eu *EventUpdate) ClearEntitlementplan() *EventUpdate {
	eu.mutation.ClearEntitlementplan()
	return eu
}

// RemoveEntitlementplanIDs removes the "entitlementplan" edge to EntitlementPlan entities by IDs.
func (eu *EventUpdate) RemoveEntitlementplanIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveEntitlementplanIDs(ids...)
	return eu
}

// RemoveEntitlementplan removes "entitlementplan" edges to EntitlementPlan entities.
func (eu *EventUpdate) RemoveEntitlementplan(e ...*EntitlementPlan) *EventUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEntitlementplanIDs(ids...)
}

// ClearEntitlementplanfeature clears all "entitlementplanfeature" edges to the EntitlementPlanFeature entity.
func (eu *EventUpdate) ClearEntitlementplanfeature() *EventUpdate {
	eu.mutation.ClearEntitlementplanfeature()
	return eu
}

// RemoveEntitlementplanfeatureIDs removes the "entitlementplanfeature" edge to EntitlementPlanFeature entities by IDs.
func (eu *EventUpdate) RemoveEntitlementplanfeatureIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveEntitlementplanfeatureIDs(ids...)
	return eu
}

// RemoveEntitlementplanfeature removes "entitlementplanfeature" edges to EntitlementPlanFeature entities.
func (eu *EventUpdate) RemoveEntitlementplanfeature(e ...*EntitlementPlanFeature) *EventUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEntitlementplanfeatureIDs(ids...)
}

// ClearPersonalAccessToken clears all "personal_access_token" edges to the PersonalAccessToken entity.
func (eu *EventUpdate) ClearPersonalAccessToken() *EventUpdate {
	eu.mutation.ClearPersonalAccessToken()
	return eu
}

// RemovePersonalAccessTokenIDs removes the "personal_access_token" edge to PersonalAccessToken entities by IDs.
func (eu *EventUpdate) RemovePersonalAccessTokenIDs(ids ...string) *EventUpdate {
	eu.mutation.RemovePersonalAccessTokenIDs(ids...)
	return eu
}

// RemovePersonalAccessToken removes "personal_access_token" edges to PersonalAccessToken entities.
func (eu *EventUpdate) RemovePersonalAccessToken(p ...*PersonalAccessToken) *EventUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemovePersonalAccessTokenIDs(ids...)
}

// ClearOauth2token clears all "oauth2token" edges to the OhAuthTooToken entity.
func (eu *EventUpdate) ClearOauth2token() *EventUpdate {
	eu.mutation.ClearOauth2token()
	return eu
}

// RemoveOauth2tokenIDs removes the "oauth2token" edge to OhAuthTooToken entities by IDs.
func (eu *EventUpdate) RemoveOauth2tokenIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveOauth2tokenIDs(ids...)
	return eu
}

// RemoveOauth2token removes "oauth2token" edges to OhAuthTooToken entities.
func (eu *EventUpdate) RemoveOauth2token(o ...*OhAuthTooToken) *EventUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.RemoveOauth2tokenIDs(ids...)
}

// ClearHush clears all "hush" edges to the Hush entity.
func (eu *EventUpdate) ClearHush() *EventUpdate {
	eu.mutation.ClearHush()
	return eu
}

// RemoveHushIDs removes the "hush" edge to Hush entities by IDs.
func (eu *EventUpdate) RemoveHushIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveHushIDs(ids...)
	return eu
}

// RemoveHush removes "hush" edges to Hush entities.
func (eu *EventUpdate) RemoveHush(h ...*Hush) *EventUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.RemoveHushIDs(ids...)
}

// ClearOrgmembership clears all "orgmembership" edges to the OrgMembership entity.
func (eu *EventUpdate) ClearOrgmembership() *EventUpdate {
	eu.mutation.ClearOrgmembership()
	return eu
}

// RemoveOrgmembershipIDs removes the "orgmembership" edge to OrgMembership entities by IDs.
func (eu *EventUpdate) RemoveOrgmembershipIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveOrgmembershipIDs(ids...)
	return eu
}

// RemoveOrgmembership removes "orgmembership" edges to OrgMembership entities.
func (eu *EventUpdate) RemoveOrgmembership(o ...*OrgMembership) *EventUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.RemoveOrgmembershipIDs(ids...)
}

// ClearGroupmembership clears all "groupmembership" edges to the GroupMembership entity.
func (eu *EventUpdate) ClearGroupmembership() *EventUpdate {
	eu.mutation.ClearGroupmembership()
	return eu
}

// RemoveGroupmembershipIDs removes the "groupmembership" edge to GroupMembership entities by IDs.
func (eu *EventUpdate) RemoveGroupmembershipIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveGroupmembershipIDs(ids...)
	return eu
}

// RemoveGroupmembership removes "groupmembership" edges to GroupMembership entities.
func (eu *EventUpdate) RemoveGroupmembership(g ...*GroupMembership) *EventUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return eu.RemoveGroupmembershipIDs(ids...)
}

// ClearEntitlement clears all "entitlement" edges to the Entitlement entity.
func (eu *EventUpdate) ClearEntitlement() *EventUpdate {
	eu.mutation.ClearEntitlement()
	return eu
}

// RemoveEntitlementIDs removes the "entitlement" edge to Entitlement entities by IDs.
func (eu *EventUpdate) RemoveEntitlementIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveEntitlementIDs(ids...)
	return eu
}

// RemoveEntitlement removes "entitlement" edges to Entitlement entities.
func (eu *EventUpdate) RemoveEntitlement(e ...*Entitlement) *EventUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return eu.RemoveEntitlementIDs(ids...)
}

// ClearWebhook clears all "webhook" edges to the Webhook entity.
func (eu *EventUpdate) ClearWebhook() *EventUpdate {
	eu.mutation.ClearWebhook()
	return eu
}

// RemoveWebhookIDs removes the "webhook" edge to Webhook entities by IDs.
func (eu *EventUpdate) RemoveWebhookIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveWebhookIDs(ids...)
	return eu
}

// RemoveWebhook removes "webhook" edges to Webhook entities.
func (eu *EventUpdate) RemoveWebhook(w ...*Webhook) *EventUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return eu.RemoveWebhookIDs(ids...)
}

// ClearSubscriber clears all "subscriber" edges to the Subscriber entity.
func (eu *EventUpdate) ClearSubscriber() *EventUpdate {
	eu.mutation.ClearSubscriber()
	return eu
}

// RemoveSubscriberIDs removes the "subscriber" edge to Subscriber entities by IDs.
func (eu *EventUpdate) RemoveSubscriberIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveSubscriberIDs(ids...)
	return eu
}

// RemoveSubscriber removes "subscriber" edges to Subscriber entities.
func (eu *EventUpdate) RemoveSubscriber(s ...*Subscriber) *EventUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveSubscriberIDs(ids...)
}

// ClearFile clears all "file" edges to the File entity.
func (eu *EventUpdate) ClearFile() *EventUpdate {
	eu.mutation.ClearFile()
	return eu
}

// RemoveFileIDs removes the "file" edge to File entities by IDs.
func (eu *EventUpdate) RemoveFileIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveFileIDs(ids...)
	return eu
}

// RemoveFile removes "file" edges to File entities.
func (eu *EventUpdate) RemoveFile(f ...*File) *EventUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok && !eu.mutation.UpdatedAtCleared() {
		if event.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized event.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := event.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if eu.mutation.CreatedAtCleared() {
		_spec.ClearField(event.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.UpdatedAtCleared() {
		_spec.ClearField(event.FieldUpdatedAt, field.TypeTime)
	}
	if eu.mutation.CreatedByCleared() {
		_spec.ClearField(event.FieldCreatedBy, field.TypeString)
	}
	if value, ok := eu.mutation.UpdatedBy(); ok {
		_spec.SetField(event.FieldUpdatedBy, field.TypeString, value)
	}
	if eu.mutation.UpdatedByCleared() {
		_spec.ClearField(event.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eu.mutation.Tags(); ok {
		_spec.SetField(event.FieldTags, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldTags, value)
		})
	}
	if eu.mutation.TagsCleared() {
		_spec.ClearField(event.FieldTags, field.TypeJSON)
	}
	if value, ok := eu.mutation.EventID(); ok {
		_spec.SetField(event.FieldEventID, field.TypeString, value)
	}
	if eu.mutation.EventIDCleared() {
		_spec.ClearField(event.FieldEventID, field.TypeString)
	}
	if value, ok := eu.mutation.CorrelationID(); ok {
		_spec.SetField(event.FieldCorrelationID, field.TypeString, value)
	}
	if eu.mutation.CorrelationIDCleared() {
		_spec.ClearField(event.FieldCorrelationID, field.TypeString)
	}
	if value, ok := eu.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeString, value)
	}
	if value, ok := eu.mutation.Metadata(); ok {
		_spec.SetField(event.FieldMetadata, field.TypeJSON, value)
	}
	if eu.mutation.MetadataCleared() {
		_spec.ClearField(event.FieldMetadata, field.TypeJSON)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UserTable,
			Columns: event.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.UserEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedUserIDs(); len(nodes) > 0 && !eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UserTable,
			Columns: event.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UserTable,
			Columns: event.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupTable,
			Columns: event.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.GroupEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedGroupIDs(); len(nodes) > 0 && !eu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupTable,
			Columns: event.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupTable,
			Columns: event.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.IntegrationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationTable,
			Columns: event.IntegrationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.IntegrationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedIntegrationIDs(); len(nodes) > 0 && !eu.mutation.IntegrationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationTable,
			Columns: event.IntegrationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.IntegrationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.IntegrationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationTable,
			Columns: event.IntegrationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.IntegrationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationTable,
			Columns: event.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrganizationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !eu.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationTable,
			Columns: event.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationTable,
			Columns: event.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InviteTable,
			Columns: event.InvitePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.InviteEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedInviteIDs(); len(nodes) > 0 && !eu.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InviteTable,
			Columns: event.InvitePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.InviteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InviteTable,
			Columns: event.InvitePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FeatureTable,
			Columns: event.FeaturePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.FeatureEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedFeatureIDs(); len(nodes) > 0 && !eu.mutation.FeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FeatureTable,
			Columns: event.FeaturePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.FeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FeatureTable,
			Columns: event.FeaturePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.FeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EntitlementplanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanTable,
			Columns: event.EntitlementplanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EntitlementPlanEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEntitlementplanIDs(); len(nodes) > 0 && !eu.mutation.EntitlementplanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanTable,
			Columns: event.EntitlementplanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EntitlementPlanEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EntitlementplanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanTable,
			Columns: event.EntitlementplanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EntitlementPlanEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EntitlementplanfeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanfeatureTable,
			Columns: event.EntitlementplanfeaturePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EntitlementPlanFeatureEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEntitlementplanfeatureIDs(); len(nodes) > 0 && !eu.mutation.EntitlementplanfeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanfeatureTable,
			Columns: event.EntitlementplanfeaturePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EntitlementPlanFeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EntitlementplanfeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanfeatureTable,
			Columns: event.EntitlementplanfeaturePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EntitlementPlanFeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PersonalAccessTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokenTable,
			Columns: event.PersonalAccessTokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.PersonalAccessTokenEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedPersonalAccessTokenIDs(); len(nodes) > 0 && !eu.mutation.PersonalAccessTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokenTable,
			Columns: event.PersonalAccessTokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PersonalAccessTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokenTable,
			Columns: event.PersonalAccessTokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.Oauth2tokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.Oauth2tokenTable,
			Columns: event.Oauth2tokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ohauthtootoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OhAuthTooTokenEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedOauth2tokenIDs(); len(nodes) > 0 && !eu.mutation.Oauth2tokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.Oauth2tokenTable,
			Columns: event.Oauth2tokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ohauthtootoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OhAuthTooTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.Oauth2tokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.Oauth2tokenTable,
			Columns: event.Oauth2tokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ohauthtootoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OhAuthTooTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.HushCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.HushTable,
			Columns: event.HushPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.HushEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedHushIDs(); len(nodes) > 0 && !eu.mutation.HushCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.HushTable,
			Columns: event.HushPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.HushIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.HushTable,
			Columns: event.HushPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OrgmembershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipTable,
			Columns: event.OrgmembershipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrgMembershipEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedOrgmembershipIDs(); len(nodes) > 0 && !eu.mutation.OrgmembershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipTable,
			Columns: event.OrgmembershipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OrgmembershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipTable,
			Columns: event.OrgmembershipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.GroupmembershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipTable,
			Columns: event.GroupmembershipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.GroupMembershipEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedGroupmembershipIDs(); len(nodes) > 0 && !eu.mutation.GroupmembershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipTable,
			Columns: event.GroupmembershipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.GroupMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GroupmembershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipTable,
			Columns: event.GroupmembershipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.GroupMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.EntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementTable,
			Columns: event.EntitlementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EntitlementEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedEntitlementIDs(); len(nodes) > 0 && !eu.mutation.EntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementTable,
			Columns: event.EntitlementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EntitlementEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.EntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementTable,
			Columns: event.EntitlementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.EntitlementEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.WebhookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.WebhookTable,
			Columns: event.WebhookPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.WebhookEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedWebhookIDs(); len(nodes) > 0 && !eu.mutation.WebhookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.WebhookTable,
			Columns: event.WebhookPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.WebhookEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.WebhookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.WebhookTable,
			Columns: event.WebhookPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.WebhookEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SubscriberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscriberTable,
			Columns: event.SubscriberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.SubscriberEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedSubscriberIDs(); len(nodes) > 0 && !eu.mutation.SubscriberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscriberTable,
			Columns: event.SubscriberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SubscriberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscriberTable,
			Columns: event.SubscriberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FileTable,
			Columns: event.FilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.FileEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedFileIDs(); len(nodes) > 0 && !eu.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FileTable,
			Columns: event.FilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FileTable,
			Columns: event.FilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = eu.schemaConfig.Event
	ctx = internal.NewSchemaConfigContext(ctx, eu.schemaConfig)
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EventUpdateOne) SetUpdatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (euo *EventUpdateOne) ClearUpdatedAt() *EventUpdateOne {
	euo.mutation.ClearUpdatedAt()
	return euo
}

// SetUpdatedBy sets the "updated_by" field.
func (euo *EventUpdateOne) SetUpdatedBy(s string) *EventUpdateOne {
	euo.mutation.SetUpdatedBy(s)
	return euo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableUpdatedBy(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetUpdatedBy(*s)
	}
	return euo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (euo *EventUpdateOne) ClearUpdatedBy() *EventUpdateOne {
	euo.mutation.ClearUpdatedBy()
	return euo
}

// SetTags sets the "tags" field.
func (euo *EventUpdateOne) SetTags(s []string) *EventUpdateOne {
	euo.mutation.SetTags(s)
	return euo
}

// AppendTags appends s to the "tags" field.
func (euo *EventUpdateOne) AppendTags(s []string) *EventUpdateOne {
	euo.mutation.AppendTags(s)
	return euo
}

// ClearTags clears the value of the "tags" field.
func (euo *EventUpdateOne) ClearTags() *EventUpdateOne {
	euo.mutation.ClearTags()
	return euo
}

// SetEventID sets the "event_id" field.
func (euo *EventUpdateOne) SetEventID(s string) *EventUpdateOne {
	euo.mutation.SetEventID(s)
	return euo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEventID(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetEventID(*s)
	}
	return euo
}

// ClearEventID clears the value of the "event_id" field.
func (euo *EventUpdateOne) ClearEventID() *EventUpdateOne {
	euo.mutation.ClearEventID()
	return euo
}

// SetCorrelationID sets the "correlation_id" field.
func (euo *EventUpdateOne) SetCorrelationID(s string) *EventUpdateOne {
	euo.mutation.SetCorrelationID(s)
	return euo
}

// SetNillableCorrelationID sets the "correlation_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCorrelationID(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetCorrelationID(*s)
	}
	return euo
}

// ClearCorrelationID clears the value of the "correlation_id" field.
func (euo *EventUpdateOne) ClearCorrelationID() *EventUpdateOne {
	euo.mutation.ClearCorrelationID()
	return euo
}

// SetEventType sets the "event_type" field.
func (euo *EventUpdateOne) SetEventType(s string) *EventUpdateOne {
	euo.mutation.SetEventType(s)
	return euo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEventType(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetEventType(*s)
	}
	return euo
}

// SetMetadata sets the "metadata" field.
func (euo *EventUpdateOne) SetMetadata(m map[string]interface{}) *EventUpdateOne {
	euo.mutation.SetMetadata(m)
	return euo
}

// ClearMetadata clears the value of the "metadata" field.
func (euo *EventUpdateOne) ClearMetadata() *EventUpdateOne {
	euo.mutation.ClearMetadata()
	return euo
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (euo *EventUpdateOne) AddUserIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddUserIDs(ids...)
	return euo
}

// AddUser adds the "user" edges to the User entity.
func (euo *EventUpdateOne) AddUser(u ...*User) *EventUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddUserIDs(ids...)
}

// AddGroupIDs adds the "group" edge to the Group entity by IDs.
func (euo *EventUpdateOne) AddGroupIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddGroupIDs(ids...)
	return euo
}

// AddGroup adds the "group" edges to the Group entity.
func (euo *EventUpdateOne) AddGroup(g ...*Group) *EventUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return euo.AddGroupIDs(ids...)
}

// AddIntegrationIDs adds the "integration" edge to the Integration entity by IDs.
func (euo *EventUpdateOne) AddIntegrationIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddIntegrationIDs(ids...)
	return euo
}

// AddIntegration adds the "integration" edges to the Integration entity.
func (euo *EventUpdateOne) AddIntegration(i ...*Integration) *EventUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddIntegrationIDs(ids...)
}

// AddOrganizationIDs adds the "organization" edge to the Organization entity by IDs.
func (euo *EventUpdateOne) AddOrganizationIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddOrganizationIDs(ids...)
	return euo
}

// AddOrganization adds the "organization" edges to the Organization entity.
func (euo *EventUpdateOne) AddOrganization(o ...*Organization) *EventUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.AddOrganizationIDs(ids...)
}

// AddInviteIDs adds the "invite" edge to the Invite entity by IDs.
func (euo *EventUpdateOne) AddInviteIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddInviteIDs(ids...)
	return euo
}

// AddInvite adds the "invite" edges to the Invite entity.
func (euo *EventUpdateOne) AddInvite(i ...*Invite) *EventUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddInviteIDs(ids...)
}

// AddFeatureIDs adds the "feature" edge to the Feature entity by IDs.
func (euo *EventUpdateOne) AddFeatureIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddFeatureIDs(ids...)
	return euo
}

// AddFeature adds the "feature" edges to the Feature entity.
func (euo *EventUpdateOne) AddFeature(f ...*Feature) *EventUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddFeatureIDs(ids...)
}

// AddEntitlementplanIDs adds the "entitlementplan" edge to the EntitlementPlan entity by IDs.
func (euo *EventUpdateOne) AddEntitlementplanIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddEntitlementplanIDs(ids...)
	return euo
}

// AddEntitlementplan adds the "entitlementplan" edges to the EntitlementPlan entity.
func (euo *EventUpdateOne) AddEntitlementplan(e ...*EntitlementPlan) *EventUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEntitlementplanIDs(ids...)
}

// AddEntitlementplanfeatureIDs adds the "entitlementplanfeature" edge to the EntitlementPlanFeature entity by IDs.
func (euo *EventUpdateOne) AddEntitlementplanfeatureIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddEntitlementplanfeatureIDs(ids...)
	return euo
}

// AddEntitlementplanfeature adds the "entitlementplanfeature" edges to the EntitlementPlanFeature entity.
func (euo *EventUpdateOne) AddEntitlementplanfeature(e ...*EntitlementPlanFeature) *EventUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEntitlementplanfeatureIDs(ids...)
}

// AddPersonalAccessTokenIDs adds the "personal_access_token" edge to the PersonalAccessToken entity by IDs.
func (euo *EventUpdateOne) AddPersonalAccessTokenIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddPersonalAccessTokenIDs(ids...)
	return euo
}

// AddPersonalAccessToken adds the "personal_access_token" edges to the PersonalAccessToken entity.
func (euo *EventUpdateOne) AddPersonalAccessToken(p ...*PersonalAccessToken) *EventUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddPersonalAccessTokenIDs(ids...)
}

// AddOauth2tokenIDs adds the "oauth2token" edge to the OhAuthTooToken entity by IDs.
func (euo *EventUpdateOne) AddOauth2tokenIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddOauth2tokenIDs(ids...)
	return euo
}

// AddOauth2token adds the "oauth2token" edges to the OhAuthTooToken entity.
func (euo *EventUpdateOne) AddOauth2token(o ...*OhAuthTooToken) *EventUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.AddOauth2tokenIDs(ids...)
}

// AddHushIDs adds the "hush" edge to the Hush entity by IDs.
func (euo *EventUpdateOne) AddHushIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddHushIDs(ids...)
	return euo
}

// AddHush adds the "hush" edges to the Hush entity.
func (euo *EventUpdateOne) AddHush(h ...*Hush) *EventUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.AddHushIDs(ids...)
}

// AddOrgmembershipIDs adds the "orgmembership" edge to the OrgMembership entity by IDs.
func (euo *EventUpdateOne) AddOrgmembershipIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddOrgmembershipIDs(ids...)
	return euo
}

// AddOrgmembership adds the "orgmembership" edges to the OrgMembership entity.
func (euo *EventUpdateOne) AddOrgmembership(o ...*OrgMembership) *EventUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.AddOrgmembershipIDs(ids...)
}

// AddGroupmembershipIDs adds the "groupmembership" edge to the GroupMembership entity by IDs.
func (euo *EventUpdateOne) AddGroupmembershipIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddGroupmembershipIDs(ids...)
	return euo
}

// AddGroupmembership adds the "groupmembership" edges to the GroupMembership entity.
func (euo *EventUpdateOne) AddGroupmembership(g ...*GroupMembership) *EventUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return euo.AddGroupmembershipIDs(ids...)
}

// AddEntitlementIDs adds the "entitlement" edge to the Entitlement entity by IDs.
func (euo *EventUpdateOne) AddEntitlementIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddEntitlementIDs(ids...)
	return euo
}

// AddEntitlement adds the "entitlement" edges to the Entitlement entity.
func (euo *EventUpdateOne) AddEntitlement(e ...*Entitlement) *EventUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.AddEntitlementIDs(ids...)
}

// AddWebhookIDs adds the "webhook" edge to the Webhook entity by IDs.
func (euo *EventUpdateOne) AddWebhookIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddWebhookIDs(ids...)
	return euo
}

// AddWebhook adds the "webhook" edges to the Webhook entity.
func (euo *EventUpdateOne) AddWebhook(w ...*Webhook) *EventUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.AddWebhookIDs(ids...)
}

// AddSubscriberIDs adds the "subscriber" edge to the Subscriber entity by IDs.
func (euo *EventUpdateOne) AddSubscriberIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddSubscriberIDs(ids...)
	return euo
}

// AddSubscriber adds the "subscriber" edges to the Subscriber entity.
func (euo *EventUpdateOne) AddSubscriber(s ...*Subscriber) *EventUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddSubscriberIDs(ids...)
}

// AddFileIDs adds the "file" edge to the File entity by IDs.
func (euo *EventUpdateOne) AddFileIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddFileIDs(ids...)
	return euo
}

// AddFile adds the "file" edges to the File entity.
func (euo *EventUpdateOne) AddFile(f ...*File) *EventUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddFileIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (euo *EventUpdateOne) ClearUser() *EventUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (euo *EventUpdateOne) RemoveUserIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveUserIDs(ids...)
	return euo
}

// RemoveUser removes "user" edges to User entities.
func (euo *EventUpdateOne) RemoveUser(u ...*User) *EventUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveUserIDs(ids...)
}

// ClearGroup clears all "group" edges to the Group entity.
func (euo *EventUpdateOne) ClearGroup() *EventUpdateOne {
	euo.mutation.ClearGroup()
	return euo
}

// RemoveGroupIDs removes the "group" edge to Group entities by IDs.
func (euo *EventUpdateOne) RemoveGroupIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveGroupIDs(ids...)
	return euo
}

// RemoveGroup removes "group" edges to Group entities.
func (euo *EventUpdateOne) RemoveGroup(g ...*Group) *EventUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return euo.RemoveGroupIDs(ids...)
}

// ClearIntegration clears all "integration" edges to the Integration entity.
func (euo *EventUpdateOne) ClearIntegration() *EventUpdateOne {
	euo.mutation.ClearIntegration()
	return euo
}

// RemoveIntegrationIDs removes the "integration" edge to Integration entities by IDs.
func (euo *EventUpdateOne) RemoveIntegrationIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveIntegrationIDs(ids...)
	return euo
}

// RemoveIntegration removes "integration" edges to Integration entities.
func (euo *EventUpdateOne) RemoveIntegration(i ...*Integration) *EventUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveIntegrationIDs(ids...)
}

// ClearOrganization clears all "organization" edges to the Organization entity.
func (euo *EventUpdateOne) ClearOrganization() *EventUpdateOne {
	euo.mutation.ClearOrganization()
	return euo
}

// RemoveOrganizationIDs removes the "organization" edge to Organization entities by IDs.
func (euo *EventUpdateOne) RemoveOrganizationIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveOrganizationIDs(ids...)
	return euo
}

// RemoveOrganization removes "organization" edges to Organization entities.
func (euo *EventUpdateOne) RemoveOrganization(o ...*Organization) *EventUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.RemoveOrganizationIDs(ids...)
}

// ClearInvite clears all "invite" edges to the Invite entity.
func (euo *EventUpdateOne) ClearInvite() *EventUpdateOne {
	euo.mutation.ClearInvite()
	return euo
}

// RemoveInviteIDs removes the "invite" edge to Invite entities by IDs.
func (euo *EventUpdateOne) RemoveInviteIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveInviteIDs(ids...)
	return euo
}

// RemoveInvite removes "invite" edges to Invite entities.
func (euo *EventUpdateOne) RemoveInvite(i ...*Invite) *EventUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveInviteIDs(ids...)
}

// ClearFeature clears all "feature" edges to the Feature entity.
func (euo *EventUpdateOne) ClearFeature() *EventUpdateOne {
	euo.mutation.ClearFeature()
	return euo
}

// RemoveFeatureIDs removes the "feature" edge to Feature entities by IDs.
func (euo *EventUpdateOne) RemoveFeatureIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveFeatureIDs(ids...)
	return euo
}

// RemoveFeature removes "feature" edges to Feature entities.
func (euo *EventUpdateOne) RemoveFeature(f ...*Feature) *EventUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveFeatureIDs(ids...)
}

// ClearEntitlementplan clears all "entitlementplan" edges to the EntitlementPlan entity.
func (euo *EventUpdateOne) ClearEntitlementplan() *EventUpdateOne {
	euo.mutation.ClearEntitlementplan()
	return euo
}

// RemoveEntitlementplanIDs removes the "entitlementplan" edge to EntitlementPlan entities by IDs.
func (euo *EventUpdateOne) RemoveEntitlementplanIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveEntitlementplanIDs(ids...)
	return euo
}

// RemoveEntitlementplan removes "entitlementplan" edges to EntitlementPlan entities.
func (euo *EventUpdateOne) RemoveEntitlementplan(e ...*EntitlementPlan) *EventUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEntitlementplanIDs(ids...)
}

// ClearEntitlementplanfeature clears all "entitlementplanfeature" edges to the EntitlementPlanFeature entity.
func (euo *EventUpdateOne) ClearEntitlementplanfeature() *EventUpdateOne {
	euo.mutation.ClearEntitlementplanfeature()
	return euo
}

// RemoveEntitlementplanfeatureIDs removes the "entitlementplanfeature" edge to EntitlementPlanFeature entities by IDs.
func (euo *EventUpdateOne) RemoveEntitlementplanfeatureIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveEntitlementplanfeatureIDs(ids...)
	return euo
}

// RemoveEntitlementplanfeature removes "entitlementplanfeature" edges to EntitlementPlanFeature entities.
func (euo *EventUpdateOne) RemoveEntitlementplanfeature(e ...*EntitlementPlanFeature) *EventUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEntitlementplanfeatureIDs(ids...)
}

// ClearPersonalAccessToken clears all "personal_access_token" edges to the PersonalAccessToken entity.
func (euo *EventUpdateOne) ClearPersonalAccessToken() *EventUpdateOne {
	euo.mutation.ClearPersonalAccessToken()
	return euo
}

// RemovePersonalAccessTokenIDs removes the "personal_access_token" edge to PersonalAccessToken entities by IDs.
func (euo *EventUpdateOne) RemovePersonalAccessTokenIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemovePersonalAccessTokenIDs(ids...)
	return euo
}

// RemovePersonalAccessToken removes "personal_access_token" edges to PersonalAccessToken entities.
func (euo *EventUpdateOne) RemovePersonalAccessToken(p ...*PersonalAccessToken) *EventUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemovePersonalAccessTokenIDs(ids...)
}

// ClearOauth2token clears all "oauth2token" edges to the OhAuthTooToken entity.
func (euo *EventUpdateOne) ClearOauth2token() *EventUpdateOne {
	euo.mutation.ClearOauth2token()
	return euo
}

// RemoveOauth2tokenIDs removes the "oauth2token" edge to OhAuthTooToken entities by IDs.
func (euo *EventUpdateOne) RemoveOauth2tokenIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveOauth2tokenIDs(ids...)
	return euo
}

// RemoveOauth2token removes "oauth2token" edges to OhAuthTooToken entities.
func (euo *EventUpdateOne) RemoveOauth2token(o ...*OhAuthTooToken) *EventUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.RemoveOauth2tokenIDs(ids...)
}

// ClearHush clears all "hush" edges to the Hush entity.
func (euo *EventUpdateOne) ClearHush() *EventUpdateOne {
	euo.mutation.ClearHush()
	return euo
}

// RemoveHushIDs removes the "hush" edge to Hush entities by IDs.
func (euo *EventUpdateOne) RemoveHushIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveHushIDs(ids...)
	return euo
}

// RemoveHush removes "hush" edges to Hush entities.
func (euo *EventUpdateOne) RemoveHush(h ...*Hush) *EventUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.RemoveHushIDs(ids...)
}

// ClearOrgmembership clears all "orgmembership" edges to the OrgMembership entity.
func (euo *EventUpdateOne) ClearOrgmembership() *EventUpdateOne {
	euo.mutation.ClearOrgmembership()
	return euo
}

// RemoveOrgmembershipIDs removes the "orgmembership" edge to OrgMembership entities by IDs.
func (euo *EventUpdateOne) RemoveOrgmembershipIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveOrgmembershipIDs(ids...)
	return euo
}

// RemoveOrgmembership removes "orgmembership" edges to OrgMembership entities.
func (euo *EventUpdateOne) RemoveOrgmembership(o ...*OrgMembership) *EventUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.RemoveOrgmembershipIDs(ids...)
}

// ClearGroupmembership clears all "groupmembership" edges to the GroupMembership entity.
func (euo *EventUpdateOne) ClearGroupmembership() *EventUpdateOne {
	euo.mutation.ClearGroupmembership()
	return euo
}

// RemoveGroupmembershipIDs removes the "groupmembership" edge to GroupMembership entities by IDs.
func (euo *EventUpdateOne) RemoveGroupmembershipIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveGroupmembershipIDs(ids...)
	return euo
}

// RemoveGroupmembership removes "groupmembership" edges to GroupMembership entities.
func (euo *EventUpdateOne) RemoveGroupmembership(g ...*GroupMembership) *EventUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return euo.RemoveGroupmembershipIDs(ids...)
}

// ClearEntitlement clears all "entitlement" edges to the Entitlement entity.
func (euo *EventUpdateOne) ClearEntitlement() *EventUpdateOne {
	euo.mutation.ClearEntitlement()
	return euo
}

// RemoveEntitlementIDs removes the "entitlement" edge to Entitlement entities by IDs.
func (euo *EventUpdateOne) RemoveEntitlementIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveEntitlementIDs(ids...)
	return euo
}

// RemoveEntitlement removes "entitlement" edges to Entitlement entities.
func (euo *EventUpdateOne) RemoveEntitlement(e ...*Entitlement) *EventUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return euo.RemoveEntitlementIDs(ids...)
}

// ClearWebhook clears all "webhook" edges to the Webhook entity.
func (euo *EventUpdateOne) ClearWebhook() *EventUpdateOne {
	euo.mutation.ClearWebhook()
	return euo
}

// RemoveWebhookIDs removes the "webhook" edge to Webhook entities by IDs.
func (euo *EventUpdateOne) RemoveWebhookIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveWebhookIDs(ids...)
	return euo
}

// RemoveWebhook removes "webhook" edges to Webhook entities.
func (euo *EventUpdateOne) RemoveWebhook(w ...*Webhook) *EventUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return euo.RemoveWebhookIDs(ids...)
}

// ClearSubscriber clears all "subscriber" edges to the Subscriber entity.
func (euo *EventUpdateOne) ClearSubscriber() *EventUpdateOne {
	euo.mutation.ClearSubscriber()
	return euo
}

// RemoveSubscriberIDs removes the "subscriber" edge to Subscriber entities by IDs.
func (euo *EventUpdateOne) RemoveSubscriberIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveSubscriberIDs(ids...)
	return euo
}

// RemoveSubscriber removes "subscriber" edges to Subscriber entities.
func (euo *EventUpdateOne) RemoveSubscriber(s ...*Subscriber) *EventUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveSubscriberIDs(ids...)
}

// ClearFile clears all "file" edges to the File entity.
func (euo *EventUpdateOne) ClearFile() *EventUpdateOne {
	euo.mutation.ClearFile()
	return euo
}

// RemoveFileIDs removes the "file" edge to File entities by IDs.
func (euo *EventUpdateOne) RemoveFileIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveFileIDs(ids...)
	return euo
}

// RemoveFile removes "file" edges to File entities.
func (euo *EventUpdateOne) RemoveFile(f ...*File) *EventUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok && !euo.mutation.UpdatedAtCleared() {
		if event.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized event.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := event.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if euo.mutation.CreatedAtCleared() {
		_spec.ClearField(event.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.UpdatedAtCleared() {
		_spec.ClearField(event.FieldUpdatedAt, field.TypeTime)
	}
	if euo.mutation.CreatedByCleared() {
		_spec.ClearField(event.FieldCreatedBy, field.TypeString)
	}
	if value, ok := euo.mutation.UpdatedBy(); ok {
		_spec.SetField(event.FieldUpdatedBy, field.TypeString, value)
	}
	if euo.mutation.UpdatedByCleared() {
		_spec.ClearField(event.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := euo.mutation.Tags(); ok {
		_spec.SetField(event.FieldTags, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldTags, value)
		})
	}
	if euo.mutation.TagsCleared() {
		_spec.ClearField(event.FieldTags, field.TypeJSON)
	}
	if value, ok := euo.mutation.EventID(); ok {
		_spec.SetField(event.FieldEventID, field.TypeString, value)
	}
	if euo.mutation.EventIDCleared() {
		_spec.ClearField(event.FieldEventID, field.TypeString)
	}
	if value, ok := euo.mutation.CorrelationID(); ok {
		_spec.SetField(event.FieldCorrelationID, field.TypeString, value)
	}
	if euo.mutation.CorrelationIDCleared() {
		_spec.ClearField(event.FieldCorrelationID, field.TypeString)
	}
	if value, ok := euo.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeString, value)
	}
	if value, ok := euo.mutation.Metadata(); ok {
		_spec.SetField(event.FieldMetadata, field.TypeJSON, value)
	}
	if euo.mutation.MetadataCleared() {
		_spec.ClearField(event.FieldMetadata, field.TypeJSON)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UserTable,
			Columns: event.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.UserEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedUserIDs(); len(nodes) > 0 && !euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UserTable,
			Columns: event.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UserTable,
			Columns: event.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupTable,
			Columns: event.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.GroupEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedGroupIDs(); len(nodes) > 0 && !euo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupTable,
			Columns: event.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupTable,
			Columns: event.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.IntegrationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationTable,
			Columns: event.IntegrationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.IntegrationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedIntegrationIDs(); len(nodes) > 0 && !euo.mutation.IntegrationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationTable,
			Columns: event.IntegrationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.IntegrationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.IntegrationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationTable,
			Columns: event.IntegrationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.IntegrationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationTable,
			Columns: event.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrganizationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedOrganizationIDs(); len(nodes) > 0 && !euo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationTable,
			Columns: event.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationTable,
			Columns: event.OrganizationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InviteTable,
			Columns: event.InvitePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.InviteEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedInviteIDs(); len(nodes) > 0 && !euo.mutation.InviteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InviteTable,
			Columns: event.InvitePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.InviteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InviteTable,
			Columns: event.InvitePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FeatureTable,
			Columns: event.FeaturePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.FeatureEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedFeatureIDs(); len(nodes) > 0 && !euo.mutation.FeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FeatureTable,
			Columns: event.FeaturePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.FeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FeatureTable,
			Columns: event.FeaturePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.FeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EntitlementplanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanTable,
			Columns: event.EntitlementplanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EntitlementPlanEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEntitlementplanIDs(); len(nodes) > 0 && !euo.mutation.EntitlementplanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanTable,
			Columns: event.EntitlementplanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EntitlementPlanEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EntitlementplanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanTable,
			Columns: event.EntitlementplanPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EntitlementPlanEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EntitlementplanfeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanfeatureTable,
			Columns: event.EntitlementplanfeaturePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EntitlementPlanFeatureEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEntitlementplanfeatureIDs(); len(nodes) > 0 && !euo.mutation.EntitlementplanfeatureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanfeatureTable,
			Columns: event.EntitlementplanfeaturePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EntitlementPlanFeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EntitlementplanfeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementplanfeatureTable,
			Columns: event.EntitlementplanfeaturePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EntitlementPlanFeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PersonalAccessTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokenTable,
			Columns: event.PersonalAccessTokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.PersonalAccessTokenEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedPersonalAccessTokenIDs(); len(nodes) > 0 && !euo.mutation.PersonalAccessTokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokenTable,
			Columns: event.PersonalAccessTokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PersonalAccessTokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokenTable,
			Columns: event.PersonalAccessTokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.Oauth2tokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.Oauth2tokenTable,
			Columns: event.Oauth2tokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ohauthtootoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OhAuthTooTokenEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedOauth2tokenIDs(); len(nodes) > 0 && !euo.mutation.Oauth2tokenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.Oauth2tokenTable,
			Columns: event.Oauth2tokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ohauthtootoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OhAuthTooTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.Oauth2tokenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.Oauth2tokenTable,
			Columns: event.Oauth2tokenPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ohauthtootoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OhAuthTooTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.HushCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.HushTable,
			Columns: event.HushPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.HushEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedHushIDs(); len(nodes) > 0 && !euo.mutation.HushCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.HushTable,
			Columns: event.HushPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.HushIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.HushTable,
			Columns: event.HushPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OrgmembershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipTable,
			Columns: event.OrgmembershipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrgMembershipEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedOrgmembershipIDs(); len(nodes) > 0 && !euo.mutation.OrgmembershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipTable,
			Columns: event.OrgmembershipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OrgmembershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipTable,
			Columns: event.OrgmembershipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.GroupmembershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipTable,
			Columns: event.GroupmembershipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.GroupMembershipEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedGroupmembershipIDs(); len(nodes) > 0 && !euo.mutation.GroupmembershipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipTable,
			Columns: event.GroupmembershipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.GroupMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GroupmembershipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipTable,
			Columns: event.GroupmembershipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.GroupMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.EntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementTable,
			Columns: event.EntitlementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EntitlementEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedEntitlementIDs(); len(nodes) > 0 && !euo.mutation.EntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementTable,
			Columns: event.EntitlementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EntitlementEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.EntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.EntitlementTable,
			Columns: event.EntitlementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.EntitlementEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.WebhookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.WebhookTable,
			Columns: event.WebhookPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.WebhookEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedWebhookIDs(); len(nodes) > 0 && !euo.mutation.WebhookCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.WebhookTable,
			Columns: event.WebhookPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.WebhookEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.WebhookIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.WebhookTable,
			Columns: event.WebhookPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.WebhookEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SubscriberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscriberTable,
			Columns: event.SubscriberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.SubscriberEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedSubscriberIDs(); len(nodes) > 0 && !euo.mutation.SubscriberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscriberTable,
			Columns: event.SubscriberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SubscriberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscriberTable,
			Columns: event.SubscriberPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FileTable,
			Columns: event.FilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.FileEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedFileIDs(); len(nodes) > 0 && !euo.mutation.FileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FileTable,
			Columns: event.FilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FileTable,
			Columns: event.FilePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = euo.schemaConfig.Event
	ctx = internal.NewSchemaConfigContext(ctx, euo.schemaConfig)
	_spec.AddModifiers(euo.modifiers...)
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
