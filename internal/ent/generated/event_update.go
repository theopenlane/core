// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventUpdate builder.
func (_u *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EventUpdate) SetUpdatedAt(v time.Time) *EventUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *EventUpdate) ClearUpdatedAt() *EventUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *EventUpdate) SetUpdatedBy(v string) *EventUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *EventUpdate) SetNillableUpdatedBy(v *string) *EventUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *EventUpdate) ClearUpdatedBy() *EventUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *EventUpdate) SetTags(v []string) *EventUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *EventUpdate) AppendTags(v []string) *EventUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *EventUpdate) ClearTags() *EventUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetEventID sets the "event_id" field.
func (_u *EventUpdate) SetEventID(v string) *EventUpdate {
	_u.mutation.SetEventID(v)
	return _u
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (_u *EventUpdate) SetNillableEventID(v *string) *EventUpdate {
	if v != nil {
		_u.SetEventID(*v)
	}
	return _u
}

// ClearEventID clears the value of the "event_id" field.
func (_u *EventUpdate) ClearEventID() *EventUpdate {
	_u.mutation.ClearEventID()
	return _u
}

// SetCorrelationID sets the "correlation_id" field.
func (_u *EventUpdate) SetCorrelationID(v string) *EventUpdate {
	_u.mutation.SetCorrelationID(v)
	return _u
}

// SetNillableCorrelationID sets the "correlation_id" field if the given value is not nil.
func (_u *EventUpdate) SetNillableCorrelationID(v *string) *EventUpdate {
	if v != nil {
		_u.SetCorrelationID(*v)
	}
	return _u
}

// ClearCorrelationID clears the value of the "correlation_id" field.
func (_u *EventUpdate) ClearCorrelationID() *EventUpdate {
	_u.mutation.ClearCorrelationID()
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *EventUpdate) SetEventType(v string) *EventUpdate {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *EventUpdate) SetNillableEventType(v *string) *EventUpdate {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *EventUpdate) SetMetadata(v map[string]interface{}) *EventUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *EventUpdate) ClearMetadata() *EventUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *EventUpdate) AddUserIDs(ids ...string) *EventUpdate {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *EventUpdate) AddUsers(v ...*User) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (_u *EventUpdate) AddGroupIDs(ids ...string) *EventUpdate {
	_u.mutation.AddGroupIDs(ids...)
	return _u
}

// AddGroups adds the "groups" edges to the Group entity.
func (_u *EventUpdate) AddGroups(v ...*Group) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (_u *EventUpdate) AddIntegrationIDs(ids ...string) *EventUpdate {
	_u.mutation.AddIntegrationIDs(ids...)
	return _u
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (_u *EventUpdate) AddIntegrations(v ...*Integration) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddIntegrationIDs(ids...)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (_u *EventUpdate) AddOrganizationIDs(ids ...string) *EventUpdate {
	_u.mutation.AddOrganizationIDs(ids...)
	return _u
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (_u *EventUpdate) AddOrganizations(v ...*Organization) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrganizationIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (_u *EventUpdate) AddInviteIDs(ids ...string) *EventUpdate {
	_u.mutation.AddInviteIDs(ids...)
	return _u
}

// AddInvites adds the "invites" edges to the Invite entity.
func (_u *EventUpdate) AddInvites(v ...*Invite) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInviteIDs(ids...)
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (_u *EventUpdate) AddPersonalAccessTokenIDs(ids ...string) *EventUpdate {
	_u.mutation.AddPersonalAccessTokenIDs(ids...)
	return _u
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (_u *EventUpdate) AddPersonalAccessTokens(v ...*PersonalAccessToken) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPersonalAccessTokenIDs(ids...)
}

// AddSecretIDs adds the "secrets" edge to the Hush entity by IDs.
func (_u *EventUpdate) AddSecretIDs(ids ...string) *EventUpdate {
	_u.mutation.AddSecretIDs(ids...)
	return _u
}

// AddSecrets adds the "secrets" edges to the Hush entity.
func (_u *EventUpdate) AddSecrets(v ...*Hush) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSecretIDs(ids...)
}

// AddOrgMembershipIDs adds the "org_memberships" edge to the OrgMembership entity by IDs.
func (_u *EventUpdate) AddOrgMembershipIDs(ids ...string) *EventUpdate {
	_u.mutation.AddOrgMembershipIDs(ids...)
	return _u
}

// AddOrgMemberships adds the "org_memberships" edges to the OrgMembership entity.
func (_u *EventUpdate) AddOrgMemberships(v ...*OrgMembership) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrgMembershipIDs(ids...)
}

// AddGroupMembershipIDs adds the "group_memberships" edge to the GroupMembership entity by IDs.
func (_u *EventUpdate) AddGroupMembershipIDs(ids ...string) *EventUpdate {
	_u.mutation.AddGroupMembershipIDs(ids...)
	return _u
}

// AddGroupMemberships adds the "group_memberships" edges to the GroupMembership entity.
func (_u *EventUpdate) AddGroupMemberships(v ...*GroupMembership) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupMembershipIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the Subscriber entity by IDs.
func (_u *EventUpdate) AddSubscriberIDs(ids ...string) *EventUpdate {
	_u.mutation.AddSubscriberIDs(ids...)
	return _u
}

// AddSubscribers adds the "subscribers" edges to the Subscriber entity.
func (_u *EventUpdate) AddSubscribers(v ...*Subscriber) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubscriberIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *EventUpdate) AddFileIDs(ids ...string) *EventUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *EventUpdate) AddFiles(v ...*File) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddOrgSubscriptionIDs adds the "org_subscriptions" edge to the OrgSubscription entity by IDs.
func (_u *EventUpdate) AddOrgSubscriptionIDs(ids ...string) *EventUpdate {
	_u.mutation.AddOrgSubscriptionIDs(ids...)
	return _u
}

// AddOrgSubscriptions adds the "org_subscriptions" edges to the OrgSubscription entity.
func (_u *EventUpdate) AddOrgSubscriptions(v ...*OrgSubscription) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrgSubscriptionIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (_u *EventUpdate) Mutation() *EventMutation {
	return _u.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *EventUpdate) ClearUsers() *EventUpdate {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *EventUpdate) RemoveUserIDs(ids ...string) *EventUpdate {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *EventUpdate) RemoveUsers(v ...*User) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (_u *EventUpdate) ClearGroups() *EventUpdate {
	_u.mutation.ClearGroups()
	return _u
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (_u *EventUpdate) RemoveGroupIDs(ids ...string) *EventUpdate {
	_u.mutation.RemoveGroupIDs(ids...)
	return _u
}

// RemoveGroups removes "groups" edges to Group entities.
func (_u *EventUpdate) RemoveGroups(v ...*Group) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (_u *EventUpdate) ClearIntegrations() *EventUpdate {
	_u.mutation.ClearIntegrations()
	return _u
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (_u *EventUpdate) RemoveIntegrationIDs(ids ...string) *EventUpdate {
	_u.mutation.RemoveIntegrationIDs(ids...)
	return _u
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (_u *EventUpdate) RemoveIntegrations(v ...*Integration) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveIntegrationIDs(ids...)
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (_u *EventUpdate) ClearOrganizations() *EventUpdate {
	_u.mutation.ClearOrganizations()
	return _u
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (_u *EventUpdate) RemoveOrganizationIDs(ids ...string) *EventUpdate {
	_u.mutation.RemoveOrganizationIDs(ids...)
	return _u
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (_u *EventUpdate) RemoveOrganizations(v ...*Organization) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrganizationIDs(ids...)
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (_u *EventUpdate) ClearInvites() *EventUpdate {
	_u.mutation.ClearInvites()
	return _u
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (_u *EventUpdate) RemoveInviteIDs(ids ...string) *EventUpdate {
	_u.mutation.RemoveInviteIDs(ids...)
	return _u
}

// RemoveInvites removes "invites" edges to Invite entities.
func (_u *EventUpdate) RemoveInvites(v ...*Invite) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInviteIDs(ids...)
}

// ClearPersonalAccessTokens clears all "personal_access_tokens" edges to the PersonalAccessToken entity.
func (_u *EventUpdate) ClearPersonalAccessTokens() *EventUpdate {
	_u.mutation.ClearPersonalAccessTokens()
	return _u
}

// RemovePersonalAccessTokenIDs removes the "personal_access_tokens" edge to PersonalAccessToken entities by IDs.
func (_u *EventUpdate) RemovePersonalAccessTokenIDs(ids ...string) *EventUpdate {
	_u.mutation.RemovePersonalAccessTokenIDs(ids...)
	return _u
}

// RemovePersonalAccessTokens removes "personal_access_tokens" edges to PersonalAccessToken entities.
func (_u *EventUpdate) RemovePersonalAccessTokens(v ...*PersonalAccessToken) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePersonalAccessTokenIDs(ids...)
}

// ClearSecrets clears all "secrets" edges to the Hush entity.
func (_u *EventUpdate) ClearSecrets() *EventUpdate {
	_u.mutation.ClearSecrets()
	return _u
}

// RemoveSecretIDs removes the "secrets" edge to Hush entities by IDs.
func (_u *EventUpdate) RemoveSecretIDs(ids ...string) *EventUpdate {
	_u.mutation.RemoveSecretIDs(ids...)
	return _u
}

// RemoveSecrets removes "secrets" edges to Hush entities.
func (_u *EventUpdate) RemoveSecrets(v ...*Hush) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSecretIDs(ids...)
}

// ClearOrgMemberships clears all "org_memberships" edges to the OrgMembership entity.
func (_u *EventUpdate) ClearOrgMemberships() *EventUpdate {
	_u.mutation.ClearOrgMemberships()
	return _u
}

// RemoveOrgMembershipIDs removes the "org_memberships" edge to OrgMembership entities by IDs.
func (_u *EventUpdate) RemoveOrgMembershipIDs(ids ...string) *EventUpdate {
	_u.mutation.RemoveOrgMembershipIDs(ids...)
	return _u
}

// RemoveOrgMemberships removes "org_memberships" edges to OrgMembership entities.
func (_u *EventUpdate) RemoveOrgMemberships(v ...*OrgMembership) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrgMembershipIDs(ids...)
}

// ClearGroupMemberships clears all "group_memberships" edges to the GroupMembership entity.
func (_u *EventUpdate) ClearGroupMemberships() *EventUpdate {
	_u.mutation.ClearGroupMemberships()
	return _u
}

// RemoveGroupMembershipIDs removes the "group_memberships" edge to GroupMembership entities by IDs.
func (_u *EventUpdate) RemoveGroupMembershipIDs(ids ...string) *EventUpdate {
	_u.mutation.RemoveGroupMembershipIDs(ids...)
	return _u
}

// RemoveGroupMemberships removes "group_memberships" edges to GroupMembership entities.
func (_u *EventUpdate) RemoveGroupMemberships(v ...*GroupMembership) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupMembershipIDs(ids...)
}

// ClearSubscribers clears all "subscribers" edges to the Subscriber entity.
func (_u *EventUpdate) ClearSubscribers() *EventUpdate {
	_u.mutation.ClearSubscribers()
	return _u
}

// RemoveSubscriberIDs removes the "subscribers" edge to Subscriber entities by IDs.
func (_u *EventUpdate) RemoveSubscriberIDs(ids ...string) *EventUpdate {
	_u.mutation.RemoveSubscriberIDs(ids...)
	return _u
}

// RemoveSubscribers removes "subscribers" edges to Subscriber entities.
func (_u *EventUpdate) RemoveSubscribers(v ...*Subscriber) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubscriberIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *EventUpdate) ClearFiles() *EventUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *EventUpdate) RemoveFileIDs(ids ...string) *EventUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *EventUpdate) RemoveFiles(v ...*File) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearOrgSubscriptions clears all "org_subscriptions" edges to the OrgSubscription entity.
func (_u *EventUpdate) ClearOrgSubscriptions() *EventUpdate {
	_u.mutation.ClearOrgSubscriptions()
	return _u
}

// RemoveOrgSubscriptionIDs removes the "org_subscriptions" edge to OrgSubscription entities by IDs.
func (_u *EventUpdate) RemoveOrgSubscriptionIDs(ids ...string) *EventUpdate {
	_u.mutation.RemoveOrgSubscriptionIDs(ids...)
	return _u
}

// RemoveOrgSubscriptions removes "org_subscriptions" edges to OrgSubscription entities.
func (_u *EventUpdate) RemoveOrgSubscriptions(v ...*OrgSubscription) *EventUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrgSubscriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EventUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EventUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EventUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EventUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if event.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized event.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := event.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *EventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *EventUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(event.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(event.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(event.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(event.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(event.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(event.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(event.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.EventID(); ok {
		_spec.SetField(event.FieldEventID, field.TypeString, value)
	}
	if _u.mutation.EventIDCleared() {
		_spec.ClearField(event.FieldEventID, field.TypeString)
	}
	if value, ok := _u.mutation.CorrelationID(); ok {
		_spec.SetField(event.FieldCorrelationID, field.TypeString, value)
	}
	if _u.mutation.CorrelationIDCleared() {
		_spec.ClearField(event.FieldCorrelationID, field.TypeString)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(event.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(event.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !_u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.IntegrationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !_u.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.IntegrationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.IntegrationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !_u.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InviteEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !_u.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.PersonalAccessTokenEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPersonalAccessTokensIDs(); len(nodes) > 0 && !_u.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.HushEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSecretsIDs(); len(nodes) > 0 && !_u.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrgMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgMembershipsTable,
			Columns: event.OrgMembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembershipEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrgMembershipsIDs(); len(nodes) > 0 && !_u.mutation.OrgMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgMembershipsTable,
			Columns: event.OrgMembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrgMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgMembershipsTable,
			Columns: event.OrgMembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupMembershipsTable,
			Columns: event.GroupMembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembershipEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupMembershipsIDs(); len(nodes) > 0 && !_u.mutation.GroupMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupMembershipsTable,
			Columns: event.GroupMembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupMembershipsTable,
			Columns: event.GroupMembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubscriberEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubscribersIDs(); len(nodes) > 0 && !_u.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrgSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscriptionEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrgSubscriptionsIDs(); len(nodes) > 0 && !_u.mutation.OrgSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscriptionEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrgSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscriptionEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Event
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EventUpdateOne) SetUpdatedAt(v time.Time) *EventUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *EventUpdateOne) ClearUpdatedAt() *EventUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *EventUpdateOne) SetUpdatedBy(v string) *EventUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableUpdatedBy(v *string) *EventUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *EventUpdateOne) ClearUpdatedBy() *EventUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *EventUpdateOne) SetTags(v []string) *EventUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *EventUpdateOne) AppendTags(v []string) *EventUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *EventUpdateOne) ClearTags() *EventUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetEventID sets the "event_id" field.
func (_u *EventUpdateOne) SetEventID(v string) *EventUpdateOne {
	_u.mutation.SetEventID(v)
	return _u
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableEventID(v *string) *EventUpdateOne {
	if v != nil {
		_u.SetEventID(*v)
	}
	return _u
}

// ClearEventID clears the value of the "event_id" field.
func (_u *EventUpdateOne) ClearEventID() *EventUpdateOne {
	_u.mutation.ClearEventID()
	return _u
}

// SetCorrelationID sets the "correlation_id" field.
func (_u *EventUpdateOne) SetCorrelationID(v string) *EventUpdateOne {
	_u.mutation.SetCorrelationID(v)
	return _u
}

// SetNillableCorrelationID sets the "correlation_id" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableCorrelationID(v *string) *EventUpdateOne {
	if v != nil {
		_u.SetCorrelationID(*v)
	}
	return _u
}

// ClearCorrelationID clears the value of the "correlation_id" field.
func (_u *EventUpdateOne) ClearCorrelationID() *EventUpdateOne {
	_u.mutation.ClearCorrelationID()
	return _u
}

// SetEventType sets the "event_type" field.
func (_u *EventUpdateOne) SetEventType(v string) *EventUpdateOne {
	_u.mutation.SetEventType(v)
	return _u
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (_u *EventUpdateOne) SetNillableEventType(v *string) *EventUpdateOne {
	if v != nil {
		_u.SetEventType(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *EventUpdateOne) SetMetadata(v map[string]interface{}) *EventUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *EventUpdateOne) ClearMetadata() *EventUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *EventUpdateOne) AddUserIDs(ids ...string) *EventUpdateOne {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *EventUpdateOne) AddUsers(v ...*User) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (_u *EventUpdateOne) AddGroupIDs(ids ...string) *EventUpdateOne {
	_u.mutation.AddGroupIDs(ids...)
	return _u
}

// AddGroups adds the "groups" edges to the Group entity.
func (_u *EventUpdateOne) AddGroups(v ...*Group) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (_u *EventUpdateOne) AddIntegrationIDs(ids ...string) *EventUpdateOne {
	_u.mutation.AddIntegrationIDs(ids...)
	return _u
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (_u *EventUpdateOne) AddIntegrations(v ...*Integration) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddIntegrationIDs(ids...)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (_u *EventUpdateOne) AddOrganizationIDs(ids ...string) *EventUpdateOne {
	_u.mutation.AddOrganizationIDs(ids...)
	return _u
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (_u *EventUpdateOne) AddOrganizations(v ...*Organization) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrganizationIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (_u *EventUpdateOne) AddInviteIDs(ids ...string) *EventUpdateOne {
	_u.mutation.AddInviteIDs(ids...)
	return _u
}

// AddInvites adds the "invites" edges to the Invite entity.
func (_u *EventUpdateOne) AddInvites(v ...*Invite) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInviteIDs(ids...)
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (_u *EventUpdateOne) AddPersonalAccessTokenIDs(ids ...string) *EventUpdateOne {
	_u.mutation.AddPersonalAccessTokenIDs(ids...)
	return _u
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (_u *EventUpdateOne) AddPersonalAccessTokens(v ...*PersonalAccessToken) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPersonalAccessTokenIDs(ids...)
}

// AddSecretIDs adds the "secrets" edge to the Hush entity by IDs.
func (_u *EventUpdateOne) AddSecretIDs(ids ...string) *EventUpdateOne {
	_u.mutation.AddSecretIDs(ids...)
	return _u
}

// AddSecrets adds the "secrets" edges to the Hush entity.
func (_u *EventUpdateOne) AddSecrets(v ...*Hush) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSecretIDs(ids...)
}

// AddOrgMembershipIDs adds the "org_memberships" edge to the OrgMembership entity by IDs.
func (_u *EventUpdateOne) AddOrgMembershipIDs(ids ...string) *EventUpdateOne {
	_u.mutation.AddOrgMembershipIDs(ids...)
	return _u
}

// AddOrgMemberships adds the "org_memberships" edges to the OrgMembership entity.
func (_u *EventUpdateOne) AddOrgMemberships(v ...*OrgMembership) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrgMembershipIDs(ids...)
}

// AddGroupMembershipIDs adds the "group_memberships" edge to the GroupMembership entity by IDs.
func (_u *EventUpdateOne) AddGroupMembershipIDs(ids ...string) *EventUpdateOne {
	_u.mutation.AddGroupMembershipIDs(ids...)
	return _u
}

// AddGroupMemberships adds the "group_memberships" edges to the GroupMembership entity.
func (_u *EventUpdateOne) AddGroupMemberships(v ...*GroupMembership) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupMembershipIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the Subscriber entity by IDs.
func (_u *EventUpdateOne) AddSubscriberIDs(ids ...string) *EventUpdateOne {
	_u.mutation.AddSubscriberIDs(ids...)
	return _u
}

// AddSubscribers adds the "subscribers" edges to the Subscriber entity.
func (_u *EventUpdateOne) AddSubscribers(v ...*Subscriber) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubscriberIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *EventUpdateOne) AddFileIDs(ids ...string) *EventUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *EventUpdateOne) AddFiles(v ...*File) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddOrgSubscriptionIDs adds the "org_subscriptions" edge to the OrgSubscription entity by IDs.
func (_u *EventUpdateOne) AddOrgSubscriptionIDs(ids ...string) *EventUpdateOne {
	_u.mutation.AddOrgSubscriptionIDs(ids...)
	return _u
}

// AddOrgSubscriptions adds the "org_subscriptions" edges to the OrgSubscription entity.
func (_u *EventUpdateOne) AddOrgSubscriptions(v ...*OrgSubscription) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrgSubscriptionIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (_u *EventUpdateOne) Mutation() *EventMutation {
	return _u.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *EventUpdateOne) ClearUsers() *EventUpdateOne {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *EventUpdateOne) RemoveUserIDs(ids ...string) *EventUpdateOne {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *EventUpdateOne) RemoveUsers(v ...*User) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (_u *EventUpdateOne) ClearGroups() *EventUpdateOne {
	_u.mutation.ClearGroups()
	return _u
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (_u *EventUpdateOne) RemoveGroupIDs(ids ...string) *EventUpdateOne {
	_u.mutation.RemoveGroupIDs(ids...)
	return _u
}

// RemoveGroups removes "groups" edges to Group entities.
func (_u *EventUpdateOne) RemoveGroups(v ...*Group) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (_u *EventUpdateOne) ClearIntegrations() *EventUpdateOne {
	_u.mutation.ClearIntegrations()
	return _u
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (_u *EventUpdateOne) RemoveIntegrationIDs(ids ...string) *EventUpdateOne {
	_u.mutation.RemoveIntegrationIDs(ids...)
	return _u
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (_u *EventUpdateOne) RemoveIntegrations(v ...*Integration) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveIntegrationIDs(ids...)
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (_u *EventUpdateOne) ClearOrganizations() *EventUpdateOne {
	_u.mutation.ClearOrganizations()
	return _u
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (_u *EventUpdateOne) RemoveOrganizationIDs(ids ...string) *EventUpdateOne {
	_u.mutation.RemoveOrganizationIDs(ids...)
	return _u
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (_u *EventUpdateOne) RemoveOrganizations(v ...*Organization) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrganizationIDs(ids...)
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (_u *EventUpdateOne) ClearInvites() *EventUpdateOne {
	_u.mutation.ClearInvites()
	return _u
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (_u *EventUpdateOne) RemoveInviteIDs(ids ...string) *EventUpdateOne {
	_u.mutation.RemoveInviteIDs(ids...)
	return _u
}

// RemoveInvites removes "invites" edges to Invite entities.
func (_u *EventUpdateOne) RemoveInvites(v ...*Invite) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInviteIDs(ids...)
}

// ClearPersonalAccessTokens clears all "personal_access_tokens" edges to the PersonalAccessToken entity.
func (_u *EventUpdateOne) ClearPersonalAccessTokens() *EventUpdateOne {
	_u.mutation.ClearPersonalAccessTokens()
	return _u
}

// RemovePersonalAccessTokenIDs removes the "personal_access_tokens" edge to PersonalAccessToken entities by IDs.
func (_u *EventUpdateOne) RemovePersonalAccessTokenIDs(ids ...string) *EventUpdateOne {
	_u.mutation.RemovePersonalAccessTokenIDs(ids...)
	return _u
}

// RemovePersonalAccessTokens removes "personal_access_tokens" edges to PersonalAccessToken entities.
func (_u *EventUpdateOne) RemovePersonalAccessTokens(v ...*PersonalAccessToken) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePersonalAccessTokenIDs(ids...)
}

// ClearSecrets clears all "secrets" edges to the Hush entity.
func (_u *EventUpdateOne) ClearSecrets() *EventUpdateOne {
	_u.mutation.ClearSecrets()
	return _u
}

// RemoveSecretIDs removes the "secrets" edge to Hush entities by IDs.
func (_u *EventUpdateOne) RemoveSecretIDs(ids ...string) *EventUpdateOne {
	_u.mutation.RemoveSecretIDs(ids...)
	return _u
}

// RemoveSecrets removes "secrets" edges to Hush entities.
func (_u *EventUpdateOne) RemoveSecrets(v ...*Hush) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSecretIDs(ids...)
}

// ClearOrgMemberships clears all "org_memberships" edges to the OrgMembership entity.
func (_u *EventUpdateOne) ClearOrgMemberships() *EventUpdateOne {
	_u.mutation.ClearOrgMemberships()
	return _u
}

// RemoveOrgMembershipIDs removes the "org_memberships" edge to OrgMembership entities by IDs.
func (_u *EventUpdateOne) RemoveOrgMembershipIDs(ids ...string) *EventUpdateOne {
	_u.mutation.RemoveOrgMembershipIDs(ids...)
	return _u
}

// RemoveOrgMemberships removes "org_memberships" edges to OrgMembership entities.
func (_u *EventUpdateOne) RemoveOrgMemberships(v ...*OrgMembership) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrgMembershipIDs(ids...)
}

// ClearGroupMemberships clears all "group_memberships" edges to the GroupMembership entity.
func (_u *EventUpdateOne) ClearGroupMemberships() *EventUpdateOne {
	_u.mutation.ClearGroupMemberships()
	return _u
}

// RemoveGroupMembershipIDs removes the "group_memberships" edge to GroupMembership entities by IDs.
func (_u *EventUpdateOne) RemoveGroupMembershipIDs(ids ...string) *EventUpdateOne {
	_u.mutation.RemoveGroupMembershipIDs(ids...)
	return _u
}

// RemoveGroupMemberships removes "group_memberships" edges to GroupMembership entities.
func (_u *EventUpdateOne) RemoveGroupMemberships(v ...*GroupMembership) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupMembershipIDs(ids...)
}

// ClearSubscribers clears all "subscribers" edges to the Subscriber entity.
func (_u *EventUpdateOne) ClearSubscribers() *EventUpdateOne {
	_u.mutation.ClearSubscribers()
	return _u
}

// RemoveSubscriberIDs removes the "subscribers" edge to Subscriber entities by IDs.
func (_u *EventUpdateOne) RemoveSubscriberIDs(ids ...string) *EventUpdateOne {
	_u.mutation.RemoveSubscriberIDs(ids...)
	return _u
}

// RemoveSubscribers removes "subscribers" edges to Subscriber entities.
func (_u *EventUpdateOne) RemoveSubscribers(v ...*Subscriber) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubscriberIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *EventUpdateOne) ClearFiles() *EventUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *EventUpdateOne) RemoveFileIDs(ids ...string) *EventUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *EventUpdateOne) RemoveFiles(v ...*File) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearOrgSubscriptions clears all "org_subscriptions" edges to the OrgSubscription entity.
func (_u *EventUpdateOne) ClearOrgSubscriptions() *EventUpdateOne {
	_u.mutation.ClearOrgSubscriptions()
	return _u
}

// RemoveOrgSubscriptionIDs removes the "org_subscriptions" edge to OrgSubscription entities by IDs.
func (_u *EventUpdateOne) RemoveOrgSubscriptionIDs(ids ...string) *EventUpdateOne {
	_u.mutation.RemoveOrgSubscriptionIDs(ids...)
	return _u
}

// RemoveOrgSubscriptions removes "org_subscriptions" edges to OrgSubscription entities.
func (_u *EventUpdateOne) RemoveOrgSubscriptions(v ...*OrgSubscription) *EventUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrgSubscriptionIDs(ids...)
}

// Where appends a list predicates to the EventUpdate builder.
func (_u *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Event entity.
func (_u *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EventUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EventUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if event.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized event.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := event.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *EventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(event.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(event.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(event.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(event.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(event.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(event.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(event.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.EventID(); ok {
		_spec.SetField(event.FieldEventID, field.TypeString, value)
	}
	if _u.mutation.EventIDCleared() {
		_spec.ClearField(event.FieldEventID, field.TypeString)
	}
	if value, ok := _u.mutation.CorrelationID(); ok {
		_spec.SetField(event.FieldCorrelationID, field.TypeString, value)
	}
	if _u.mutation.CorrelationIDCleared() {
		_spec.ClearField(event.FieldCorrelationID, field.TypeString)
	}
	if value, ok := _u.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(event.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(event.FieldMetadata, field.TypeJSON)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !_u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.IntegrationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !_u.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.IntegrationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.IntegrationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !_u.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InviteEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !_u.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.PersonalAccessTokenEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPersonalAccessTokensIDs(); len(nodes) > 0 && !_u.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.HushEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSecretsIDs(); len(nodes) > 0 && !_u.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrgMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgMembershipsTable,
			Columns: event.OrgMembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembershipEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrgMembershipsIDs(); len(nodes) > 0 && !_u.mutation.OrgMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgMembershipsTable,
			Columns: event.OrgMembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrgMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgMembershipsTable,
			Columns: event.OrgMembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupMembershipsTable,
			Columns: event.GroupMembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembershipEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupMembershipsIDs(); len(nodes) > 0 && !_u.mutation.GroupMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupMembershipsTable,
			Columns: event.GroupMembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupMembershipsTable,
			Columns: event.GroupMembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.GroupMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubscriberEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubscribersIDs(); len(nodes) > 0 && !_u.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrgSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscriptionEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrgSubscriptionsIDs(); len(nodes) > 0 && !_u.mutation.OrgSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscriptionEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrgSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscriptionEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Event
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Event{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
