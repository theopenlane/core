// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EventUpdate is the builder for updating Event entities.
type EventUpdate struct {
	config
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EventUpdate builder.
func (eu *EventUpdate) Where(ps ...predicate.Event) *EventUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EventUpdate) SetUpdatedAt(t time.Time) *EventUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (eu *EventUpdate) ClearUpdatedAt() *EventUpdate {
	eu.mutation.ClearUpdatedAt()
	return eu
}

// SetUpdatedBy sets the "updated_by" field.
func (eu *EventUpdate) SetUpdatedBy(s string) *EventUpdate {
	eu.mutation.SetUpdatedBy(s)
	return eu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (eu *EventUpdate) SetNillableUpdatedBy(s *string) *EventUpdate {
	if s != nil {
		eu.SetUpdatedBy(*s)
	}
	return eu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (eu *EventUpdate) ClearUpdatedBy() *EventUpdate {
	eu.mutation.ClearUpdatedBy()
	return eu
}

// SetTags sets the "tags" field.
func (eu *EventUpdate) SetTags(s []string) *EventUpdate {
	eu.mutation.SetTags(s)
	return eu
}

// AppendTags appends s to the "tags" field.
func (eu *EventUpdate) AppendTags(s []string) *EventUpdate {
	eu.mutation.AppendTags(s)
	return eu
}

// ClearTags clears the value of the "tags" field.
func (eu *EventUpdate) ClearTags() *EventUpdate {
	eu.mutation.ClearTags()
	return eu
}

// SetEventID sets the "event_id" field.
func (eu *EventUpdate) SetEventID(s string) *EventUpdate {
	eu.mutation.SetEventID(s)
	return eu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEventID(s *string) *EventUpdate {
	if s != nil {
		eu.SetEventID(*s)
	}
	return eu
}

// ClearEventID clears the value of the "event_id" field.
func (eu *EventUpdate) ClearEventID() *EventUpdate {
	eu.mutation.ClearEventID()
	return eu
}

// SetCorrelationID sets the "correlation_id" field.
func (eu *EventUpdate) SetCorrelationID(s string) *EventUpdate {
	eu.mutation.SetCorrelationID(s)
	return eu
}

// SetNillableCorrelationID sets the "correlation_id" field if the given value is not nil.
func (eu *EventUpdate) SetNillableCorrelationID(s *string) *EventUpdate {
	if s != nil {
		eu.SetCorrelationID(*s)
	}
	return eu
}

// ClearCorrelationID clears the value of the "correlation_id" field.
func (eu *EventUpdate) ClearCorrelationID() *EventUpdate {
	eu.mutation.ClearCorrelationID()
	return eu
}

// SetEventType sets the "event_type" field.
func (eu *EventUpdate) SetEventType(s string) *EventUpdate {
	eu.mutation.SetEventType(s)
	return eu
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (eu *EventUpdate) SetNillableEventType(s *string) *EventUpdate {
	if s != nil {
		eu.SetEventType(*s)
	}
	return eu
}

// SetMetadata sets the "metadata" field.
func (eu *EventUpdate) SetMetadata(m map[string]interface{}) *EventUpdate {
	eu.mutation.SetMetadata(m)
	return eu
}

// ClearMetadata clears the value of the "metadata" field.
func (eu *EventUpdate) ClearMetadata() *EventUpdate {
	eu.mutation.ClearMetadata()
	return eu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (eu *EventUpdate) AddUserIDs(ids ...string) *EventUpdate {
	eu.mutation.AddUserIDs(ids...)
	return eu
}

// AddUsers adds the "users" edges to the User entity.
func (eu *EventUpdate) AddUsers(u ...*User) *EventUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.AddUserIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (eu *EventUpdate) AddGroupIDs(ids ...string) *EventUpdate {
	eu.mutation.AddGroupIDs(ids...)
	return eu
}

// AddGroups adds the "groups" edges to the Group entity.
func (eu *EventUpdate) AddGroups(g ...*Group) *EventUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return eu.AddGroupIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (eu *EventUpdate) AddIntegrationIDs(ids ...string) *EventUpdate {
	eu.mutation.AddIntegrationIDs(ids...)
	return eu
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (eu *EventUpdate) AddIntegrations(i ...*Integration) *EventUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddIntegrationIDs(ids...)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (eu *EventUpdate) AddOrganizationIDs(ids ...string) *EventUpdate {
	eu.mutation.AddOrganizationIDs(ids...)
	return eu
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (eu *EventUpdate) AddOrganizations(o ...*Organization) *EventUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.AddOrganizationIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (eu *EventUpdate) AddInviteIDs(ids ...string) *EventUpdate {
	eu.mutation.AddInviteIDs(ids...)
	return eu
}

// AddInvites adds the "invites" edges to the Invite entity.
func (eu *EventUpdate) AddInvites(i ...*Invite) *EventUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.AddInviteIDs(ids...)
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (eu *EventUpdate) AddPersonalAccessTokenIDs(ids ...string) *EventUpdate {
	eu.mutation.AddPersonalAccessTokenIDs(ids...)
	return eu
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (eu *EventUpdate) AddPersonalAccessTokens(p ...*PersonalAccessToken) *EventUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.AddPersonalAccessTokenIDs(ids...)
}

// AddSecretIDs adds the "secrets" edge to the Hush entity by IDs.
func (eu *EventUpdate) AddSecretIDs(ids ...string) *EventUpdate {
	eu.mutation.AddSecretIDs(ids...)
	return eu
}

// AddSecrets adds the "secrets" edges to the Hush entity.
func (eu *EventUpdate) AddSecrets(h ...*Hush) *EventUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.AddSecretIDs(ids...)
}

// AddOrgmembershipIDs adds the "orgmemberships" edge to the OrgMembership entity by IDs.
func (eu *EventUpdate) AddOrgmembershipIDs(ids ...string) *EventUpdate {
	eu.mutation.AddOrgmembershipIDs(ids...)
	return eu
}

// AddOrgmemberships adds the "orgmemberships" edges to the OrgMembership entity.
func (eu *EventUpdate) AddOrgmemberships(o ...*OrgMembership) *EventUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.AddOrgmembershipIDs(ids...)
}

// AddGroupmembershipIDs adds the "groupmemberships" edge to the GroupMembership entity by IDs.
func (eu *EventUpdate) AddGroupmembershipIDs(ids ...string) *EventUpdate {
	eu.mutation.AddGroupmembershipIDs(ids...)
	return eu
}

// AddGroupmemberships adds the "groupmemberships" edges to the GroupMembership entity.
func (eu *EventUpdate) AddGroupmemberships(g ...*GroupMembership) *EventUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return eu.AddGroupmembershipIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the Subscriber entity by IDs.
func (eu *EventUpdate) AddSubscriberIDs(ids ...string) *EventUpdate {
	eu.mutation.AddSubscriberIDs(ids...)
	return eu
}

// AddSubscribers adds the "subscribers" edges to the Subscriber entity.
func (eu *EventUpdate) AddSubscribers(s ...*Subscriber) *EventUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.AddSubscriberIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (eu *EventUpdate) AddFileIDs(ids ...string) *EventUpdate {
	eu.mutation.AddFileIDs(ids...)
	return eu
}

// AddFiles adds the "files" edges to the File entity.
func (eu *EventUpdate) AddFiles(f ...*File) *EventUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.AddFileIDs(ids...)
}

// AddOrgSubscriptionIDs adds the "org_subscriptions" edge to the OrgSubscription entity by IDs.
func (eu *EventUpdate) AddOrgSubscriptionIDs(ids ...string) *EventUpdate {
	eu.mutation.AddOrgSubscriptionIDs(ids...)
	return eu
}

// AddOrgSubscriptions adds the "org_subscriptions" edges to the OrgSubscription entity.
func (eu *EventUpdate) AddOrgSubscriptions(o ...*OrgSubscription) *EventUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.AddOrgSubscriptionIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (eu *EventUpdate) Mutation() *EventMutation {
	return eu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (eu *EventUpdate) ClearUsers() *EventUpdate {
	eu.mutation.ClearUsers()
	return eu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (eu *EventUpdate) RemoveUserIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveUserIDs(ids...)
	return eu
}

// RemoveUsers removes "users" edges to User entities.
func (eu *EventUpdate) RemoveUsers(u ...*User) *EventUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return eu.RemoveUserIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (eu *EventUpdate) ClearGroups() *EventUpdate {
	eu.mutation.ClearGroups()
	return eu
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (eu *EventUpdate) RemoveGroupIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveGroupIDs(ids...)
	return eu
}

// RemoveGroups removes "groups" edges to Group entities.
func (eu *EventUpdate) RemoveGroups(g ...*Group) *EventUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return eu.RemoveGroupIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (eu *EventUpdate) ClearIntegrations() *EventUpdate {
	eu.mutation.ClearIntegrations()
	return eu
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (eu *EventUpdate) RemoveIntegrationIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveIntegrationIDs(ids...)
	return eu
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (eu *EventUpdate) RemoveIntegrations(i ...*Integration) *EventUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveIntegrationIDs(ids...)
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (eu *EventUpdate) ClearOrganizations() *EventUpdate {
	eu.mutation.ClearOrganizations()
	return eu
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (eu *EventUpdate) RemoveOrganizationIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveOrganizationIDs(ids...)
	return eu
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (eu *EventUpdate) RemoveOrganizations(o ...*Organization) *EventUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.RemoveOrganizationIDs(ids...)
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (eu *EventUpdate) ClearInvites() *EventUpdate {
	eu.mutation.ClearInvites()
	return eu
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (eu *EventUpdate) RemoveInviteIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveInviteIDs(ids...)
	return eu
}

// RemoveInvites removes "invites" edges to Invite entities.
func (eu *EventUpdate) RemoveInvites(i ...*Invite) *EventUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return eu.RemoveInviteIDs(ids...)
}

// ClearPersonalAccessTokens clears all "personal_access_tokens" edges to the PersonalAccessToken entity.
func (eu *EventUpdate) ClearPersonalAccessTokens() *EventUpdate {
	eu.mutation.ClearPersonalAccessTokens()
	return eu
}

// RemovePersonalAccessTokenIDs removes the "personal_access_tokens" edge to PersonalAccessToken entities by IDs.
func (eu *EventUpdate) RemovePersonalAccessTokenIDs(ids ...string) *EventUpdate {
	eu.mutation.RemovePersonalAccessTokenIDs(ids...)
	return eu
}

// RemovePersonalAccessTokens removes "personal_access_tokens" edges to PersonalAccessToken entities.
func (eu *EventUpdate) RemovePersonalAccessTokens(p ...*PersonalAccessToken) *EventUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return eu.RemovePersonalAccessTokenIDs(ids...)
}

// ClearSecrets clears all "secrets" edges to the Hush entity.
func (eu *EventUpdate) ClearSecrets() *EventUpdate {
	eu.mutation.ClearSecrets()
	return eu
}

// RemoveSecretIDs removes the "secrets" edge to Hush entities by IDs.
func (eu *EventUpdate) RemoveSecretIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveSecretIDs(ids...)
	return eu
}

// RemoveSecrets removes "secrets" edges to Hush entities.
func (eu *EventUpdate) RemoveSecrets(h ...*Hush) *EventUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return eu.RemoveSecretIDs(ids...)
}

// ClearOrgmemberships clears all "orgmemberships" edges to the OrgMembership entity.
func (eu *EventUpdate) ClearOrgmemberships() *EventUpdate {
	eu.mutation.ClearOrgmemberships()
	return eu
}

// RemoveOrgmembershipIDs removes the "orgmemberships" edge to OrgMembership entities by IDs.
func (eu *EventUpdate) RemoveOrgmembershipIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveOrgmembershipIDs(ids...)
	return eu
}

// RemoveOrgmemberships removes "orgmemberships" edges to OrgMembership entities.
func (eu *EventUpdate) RemoveOrgmemberships(o ...*OrgMembership) *EventUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.RemoveOrgmembershipIDs(ids...)
}

// ClearGroupmemberships clears all "groupmemberships" edges to the GroupMembership entity.
func (eu *EventUpdate) ClearGroupmemberships() *EventUpdate {
	eu.mutation.ClearGroupmemberships()
	return eu
}

// RemoveGroupmembershipIDs removes the "groupmemberships" edge to GroupMembership entities by IDs.
func (eu *EventUpdate) RemoveGroupmembershipIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveGroupmembershipIDs(ids...)
	return eu
}

// RemoveGroupmemberships removes "groupmemberships" edges to GroupMembership entities.
func (eu *EventUpdate) RemoveGroupmemberships(g ...*GroupMembership) *EventUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return eu.RemoveGroupmembershipIDs(ids...)
}

// ClearSubscribers clears all "subscribers" edges to the Subscriber entity.
func (eu *EventUpdate) ClearSubscribers() *EventUpdate {
	eu.mutation.ClearSubscribers()
	return eu
}

// RemoveSubscriberIDs removes the "subscribers" edge to Subscriber entities by IDs.
func (eu *EventUpdate) RemoveSubscriberIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveSubscriberIDs(ids...)
	return eu
}

// RemoveSubscribers removes "subscribers" edges to Subscriber entities.
func (eu *EventUpdate) RemoveSubscribers(s ...*Subscriber) *EventUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return eu.RemoveSubscriberIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (eu *EventUpdate) ClearFiles() *EventUpdate {
	eu.mutation.ClearFiles()
	return eu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (eu *EventUpdate) RemoveFileIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveFileIDs(ids...)
	return eu
}

// RemoveFiles removes "files" edges to File entities.
func (eu *EventUpdate) RemoveFiles(f ...*File) *EventUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return eu.RemoveFileIDs(ids...)
}

// ClearOrgSubscriptions clears all "org_subscriptions" edges to the OrgSubscription entity.
func (eu *EventUpdate) ClearOrgSubscriptions() *EventUpdate {
	eu.mutation.ClearOrgSubscriptions()
	return eu
}

// RemoveOrgSubscriptionIDs removes the "org_subscriptions" edge to OrgSubscription entities by IDs.
func (eu *EventUpdate) RemoveOrgSubscriptionIDs(ids ...string) *EventUpdate {
	eu.mutation.RemoveOrgSubscriptionIDs(ids...)
	return eu
}

// RemoveOrgSubscriptions removes "org_subscriptions" edges to OrgSubscription entities.
func (eu *EventUpdate) RemoveOrgSubscriptions(o ...*OrgSubscription) *EventUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return eu.RemoveOrgSubscriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EventUpdate) Save(ctx context.Context) (int, error) {
	if err := eu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EventUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EventUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EventUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (eu *EventUpdate) defaults() error {
	if _, ok := eu.mutation.UpdatedAt(); !ok && !eu.mutation.UpdatedAtCleared() {
		if event.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized event.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := event.UpdateDefaultUpdatedAt()
		eu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (eu *EventUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdate {
	eu.modifiers = append(eu.modifiers, modifiers...)
	return eu
}

func (eu *EventUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if eu.mutation.CreatedAtCleared() {
		_spec.ClearField(event.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if eu.mutation.UpdatedAtCleared() {
		_spec.ClearField(event.FieldUpdatedAt, field.TypeTime)
	}
	if eu.mutation.CreatedByCleared() {
		_spec.ClearField(event.FieldCreatedBy, field.TypeString)
	}
	if value, ok := eu.mutation.UpdatedBy(); ok {
		_spec.SetField(event.FieldUpdatedBy, field.TypeString, value)
	}
	if eu.mutation.UpdatedByCleared() {
		_spec.ClearField(event.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := eu.mutation.Tags(); ok {
		_spec.SetField(event.FieldTags, field.TypeJSON, value)
	}
	if value, ok := eu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldTags, value)
		})
	}
	if eu.mutation.TagsCleared() {
		_spec.ClearField(event.FieldTags, field.TypeJSON)
	}
	if value, ok := eu.mutation.EventID(); ok {
		_spec.SetField(event.FieldEventID, field.TypeString, value)
	}
	if eu.mutation.EventIDCleared() {
		_spec.ClearField(event.FieldEventID, field.TypeString)
	}
	if value, ok := eu.mutation.CorrelationID(); ok {
		_spec.SetField(event.FieldCorrelationID, field.TypeString, value)
	}
	if eu.mutation.CorrelationIDCleared() {
		_spec.ClearField(event.FieldCorrelationID, field.TypeString)
	}
	if value, ok := eu.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeString, value)
	}
	if value, ok := eu.mutation.Metadata(); ok {
		_spec.SetField(event.FieldMetadata, field.TypeJSON, value)
	}
	if eu.mutation.MetadataCleared() {
		_spec.ClearField(event.FieldMetadata, field.TypeJSON)
	}
	if eu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.UserEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !eu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.GroupEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !eu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.IntegrationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !eu.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.IntegrationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.IntegrationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrganizationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !eu.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.InviteEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !eu.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.PersonalAccessTokenEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedPersonalAccessTokensIDs(); len(nodes) > 0 && !eu.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.HushEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedSecretsIDs(); len(nodes) > 0 && !eu.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OrgmembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipsTable,
			Columns: event.OrgmembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrgMembershipEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedOrgmembershipsIDs(); len(nodes) > 0 && !eu.mutation.OrgmembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipsTable,
			Columns: event.OrgmembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OrgmembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipsTable,
			Columns: event.OrgmembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.GroupmembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipsTable,
			Columns: event.GroupmembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.GroupMembershipEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedGroupmembershipsIDs(); len(nodes) > 0 && !eu.mutation.GroupmembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipsTable,
			Columns: event.GroupmembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.GroupMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GroupmembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipsTable,
			Columns: event.GroupmembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.GroupMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.SubscriberEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedSubscribersIDs(); len(nodes) > 0 && !eu.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.FileEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !eu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.OrgSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrgSubscriptionEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedOrgSubscriptionsIDs(); len(nodes) > 0 && !eu.mutation.OrgSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrgSubscriptionEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OrgSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = eu.schemaConfig.OrgSubscriptionEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = eu.schemaConfig.Event
	ctx = internal.NewSchemaConfigContext(ctx, eu.schemaConfig)
	_spec.AddModifiers(eu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// EventUpdateOne is the builder for updating a single Event entity.
type EventUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EventMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EventUpdateOne) SetUpdatedAt(t time.Time) *EventUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (euo *EventUpdateOne) ClearUpdatedAt() *EventUpdateOne {
	euo.mutation.ClearUpdatedAt()
	return euo
}

// SetUpdatedBy sets the "updated_by" field.
func (euo *EventUpdateOne) SetUpdatedBy(s string) *EventUpdateOne {
	euo.mutation.SetUpdatedBy(s)
	return euo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableUpdatedBy(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetUpdatedBy(*s)
	}
	return euo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (euo *EventUpdateOne) ClearUpdatedBy() *EventUpdateOne {
	euo.mutation.ClearUpdatedBy()
	return euo
}

// SetTags sets the "tags" field.
func (euo *EventUpdateOne) SetTags(s []string) *EventUpdateOne {
	euo.mutation.SetTags(s)
	return euo
}

// AppendTags appends s to the "tags" field.
func (euo *EventUpdateOne) AppendTags(s []string) *EventUpdateOne {
	euo.mutation.AppendTags(s)
	return euo
}

// ClearTags clears the value of the "tags" field.
func (euo *EventUpdateOne) ClearTags() *EventUpdateOne {
	euo.mutation.ClearTags()
	return euo
}

// SetEventID sets the "event_id" field.
func (euo *EventUpdateOne) SetEventID(s string) *EventUpdateOne {
	euo.mutation.SetEventID(s)
	return euo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEventID(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetEventID(*s)
	}
	return euo
}

// ClearEventID clears the value of the "event_id" field.
func (euo *EventUpdateOne) ClearEventID() *EventUpdateOne {
	euo.mutation.ClearEventID()
	return euo
}

// SetCorrelationID sets the "correlation_id" field.
func (euo *EventUpdateOne) SetCorrelationID(s string) *EventUpdateOne {
	euo.mutation.SetCorrelationID(s)
	return euo
}

// SetNillableCorrelationID sets the "correlation_id" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableCorrelationID(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetCorrelationID(*s)
	}
	return euo
}

// ClearCorrelationID clears the value of the "correlation_id" field.
func (euo *EventUpdateOne) ClearCorrelationID() *EventUpdateOne {
	euo.mutation.ClearCorrelationID()
	return euo
}

// SetEventType sets the "event_type" field.
func (euo *EventUpdateOne) SetEventType(s string) *EventUpdateOne {
	euo.mutation.SetEventType(s)
	return euo
}

// SetNillableEventType sets the "event_type" field if the given value is not nil.
func (euo *EventUpdateOne) SetNillableEventType(s *string) *EventUpdateOne {
	if s != nil {
		euo.SetEventType(*s)
	}
	return euo
}

// SetMetadata sets the "metadata" field.
func (euo *EventUpdateOne) SetMetadata(m map[string]interface{}) *EventUpdateOne {
	euo.mutation.SetMetadata(m)
	return euo
}

// ClearMetadata clears the value of the "metadata" field.
func (euo *EventUpdateOne) ClearMetadata() *EventUpdateOne {
	euo.mutation.ClearMetadata()
	return euo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (euo *EventUpdateOne) AddUserIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddUserIDs(ids...)
	return euo
}

// AddUsers adds the "users" edges to the User entity.
func (euo *EventUpdateOne) AddUsers(u ...*User) *EventUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.AddUserIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (euo *EventUpdateOne) AddGroupIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddGroupIDs(ids...)
	return euo
}

// AddGroups adds the "groups" edges to the Group entity.
func (euo *EventUpdateOne) AddGroups(g ...*Group) *EventUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return euo.AddGroupIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (euo *EventUpdateOne) AddIntegrationIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddIntegrationIDs(ids...)
	return euo
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (euo *EventUpdateOne) AddIntegrations(i ...*Integration) *EventUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddIntegrationIDs(ids...)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (euo *EventUpdateOne) AddOrganizationIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddOrganizationIDs(ids...)
	return euo
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (euo *EventUpdateOne) AddOrganizations(o ...*Organization) *EventUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.AddOrganizationIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (euo *EventUpdateOne) AddInviteIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddInviteIDs(ids...)
	return euo
}

// AddInvites adds the "invites" edges to the Invite entity.
func (euo *EventUpdateOne) AddInvites(i ...*Invite) *EventUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.AddInviteIDs(ids...)
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (euo *EventUpdateOne) AddPersonalAccessTokenIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddPersonalAccessTokenIDs(ids...)
	return euo
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (euo *EventUpdateOne) AddPersonalAccessTokens(p ...*PersonalAccessToken) *EventUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.AddPersonalAccessTokenIDs(ids...)
}

// AddSecretIDs adds the "secrets" edge to the Hush entity by IDs.
func (euo *EventUpdateOne) AddSecretIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddSecretIDs(ids...)
	return euo
}

// AddSecrets adds the "secrets" edges to the Hush entity.
func (euo *EventUpdateOne) AddSecrets(h ...*Hush) *EventUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.AddSecretIDs(ids...)
}

// AddOrgmembershipIDs adds the "orgmemberships" edge to the OrgMembership entity by IDs.
func (euo *EventUpdateOne) AddOrgmembershipIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddOrgmembershipIDs(ids...)
	return euo
}

// AddOrgmemberships adds the "orgmemberships" edges to the OrgMembership entity.
func (euo *EventUpdateOne) AddOrgmemberships(o ...*OrgMembership) *EventUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.AddOrgmembershipIDs(ids...)
}

// AddGroupmembershipIDs adds the "groupmemberships" edge to the GroupMembership entity by IDs.
func (euo *EventUpdateOne) AddGroupmembershipIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddGroupmembershipIDs(ids...)
	return euo
}

// AddGroupmemberships adds the "groupmemberships" edges to the GroupMembership entity.
func (euo *EventUpdateOne) AddGroupmemberships(g ...*GroupMembership) *EventUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return euo.AddGroupmembershipIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the Subscriber entity by IDs.
func (euo *EventUpdateOne) AddSubscriberIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddSubscriberIDs(ids...)
	return euo
}

// AddSubscribers adds the "subscribers" edges to the Subscriber entity.
func (euo *EventUpdateOne) AddSubscribers(s ...*Subscriber) *EventUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.AddSubscriberIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (euo *EventUpdateOne) AddFileIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddFileIDs(ids...)
	return euo
}

// AddFiles adds the "files" edges to the File entity.
func (euo *EventUpdateOne) AddFiles(f ...*File) *EventUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.AddFileIDs(ids...)
}

// AddOrgSubscriptionIDs adds the "org_subscriptions" edge to the OrgSubscription entity by IDs.
func (euo *EventUpdateOne) AddOrgSubscriptionIDs(ids ...string) *EventUpdateOne {
	euo.mutation.AddOrgSubscriptionIDs(ids...)
	return euo
}

// AddOrgSubscriptions adds the "org_subscriptions" edges to the OrgSubscription entity.
func (euo *EventUpdateOne) AddOrgSubscriptions(o ...*OrgSubscription) *EventUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.AddOrgSubscriptionIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (euo *EventUpdateOne) Mutation() *EventMutation {
	return euo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (euo *EventUpdateOne) ClearUsers() *EventUpdateOne {
	euo.mutation.ClearUsers()
	return euo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (euo *EventUpdateOne) RemoveUserIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveUserIDs(ids...)
	return euo
}

// RemoveUsers removes "users" edges to User entities.
func (euo *EventUpdateOne) RemoveUsers(u ...*User) *EventUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return euo.RemoveUserIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (euo *EventUpdateOne) ClearGroups() *EventUpdateOne {
	euo.mutation.ClearGroups()
	return euo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (euo *EventUpdateOne) RemoveGroupIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveGroupIDs(ids...)
	return euo
}

// RemoveGroups removes "groups" edges to Group entities.
func (euo *EventUpdateOne) RemoveGroups(g ...*Group) *EventUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return euo.RemoveGroupIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (euo *EventUpdateOne) ClearIntegrations() *EventUpdateOne {
	euo.mutation.ClearIntegrations()
	return euo
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (euo *EventUpdateOne) RemoveIntegrationIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveIntegrationIDs(ids...)
	return euo
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (euo *EventUpdateOne) RemoveIntegrations(i ...*Integration) *EventUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveIntegrationIDs(ids...)
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (euo *EventUpdateOne) ClearOrganizations() *EventUpdateOne {
	euo.mutation.ClearOrganizations()
	return euo
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (euo *EventUpdateOne) RemoveOrganizationIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveOrganizationIDs(ids...)
	return euo
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (euo *EventUpdateOne) RemoveOrganizations(o ...*Organization) *EventUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.RemoveOrganizationIDs(ids...)
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (euo *EventUpdateOne) ClearInvites() *EventUpdateOne {
	euo.mutation.ClearInvites()
	return euo
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (euo *EventUpdateOne) RemoveInviteIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveInviteIDs(ids...)
	return euo
}

// RemoveInvites removes "invites" edges to Invite entities.
func (euo *EventUpdateOne) RemoveInvites(i ...*Invite) *EventUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return euo.RemoveInviteIDs(ids...)
}

// ClearPersonalAccessTokens clears all "personal_access_tokens" edges to the PersonalAccessToken entity.
func (euo *EventUpdateOne) ClearPersonalAccessTokens() *EventUpdateOne {
	euo.mutation.ClearPersonalAccessTokens()
	return euo
}

// RemovePersonalAccessTokenIDs removes the "personal_access_tokens" edge to PersonalAccessToken entities by IDs.
func (euo *EventUpdateOne) RemovePersonalAccessTokenIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemovePersonalAccessTokenIDs(ids...)
	return euo
}

// RemovePersonalAccessTokens removes "personal_access_tokens" edges to PersonalAccessToken entities.
func (euo *EventUpdateOne) RemovePersonalAccessTokens(p ...*PersonalAccessToken) *EventUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return euo.RemovePersonalAccessTokenIDs(ids...)
}

// ClearSecrets clears all "secrets" edges to the Hush entity.
func (euo *EventUpdateOne) ClearSecrets() *EventUpdateOne {
	euo.mutation.ClearSecrets()
	return euo
}

// RemoveSecretIDs removes the "secrets" edge to Hush entities by IDs.
func (euo *EventUpdateOne) RemoveSecretIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveSecretIDs(ids...)
	return euo
}

// RemoveSecrets removes "secrets" edges to Hush entities.
func (euo *EventUpdateOne) RemoveSecrets(h ...*Hush) *EventUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return euo.RemoveSecretIDs(ids...)
}

// ClearOrgmemberships clears all "orgmemberships" edges to the OrgMembership entity.
func (euo *EventUpdateOne) ClearOrgmemberships() *EventUpdateOne {
	euo.mutation.ClearOrgmemberships()
	return euo
}

// RemoveOrgmembershipIDs removes the "orgmemberships" edge to OrgMembership entities by IDs.
func (euo *EventUpdateOne) RemoveOrgmembershipIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveOrgmembershipIDs(ids...)
	return euo
}

// RemoveOrgmemberships removes "orgmemberships" edges to OrgMembership entities.
func (euo *EventUpdateOne) RemoveOrgmemberships(o ...*OrgMembership) *EventUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.RemoveOrgmembershipIDs(ids...)
}

// ClearGroupmemberships clears all "groupmemberships" edges to the GroupMembership entity.
func (euo *EventUpdateOne) ClearGroupmemberships() *EventUpdateOne {
	euo.mutation.ClearGroupmemberships()
	return euo
}

// RemoveGroupmembershipIDs removes the "groupmemberships" edge to GroupMembership entities by IDs.
func (euo *EventUpdateOne) RemoveGroupmembershipIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveGroupmembershipIDs(ids...)
	return euo
}

// RemoveGroupmemberships removes "groupmemberships" edges to GroupMembership entities.
func (euo *EventUpdateOne) RemoveGroupmemberships(g ...*GroupMembership) *EventUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return euo.RemoveGroupmembershipIDs(ids...)
}

// ClearSubscribers clears all "subscribers" edges to the Subscriber entity.
func (euo *EventUpdateOne) ClearSubscribers() *EventUpdateOne {
	euo.mutation.ClearSubscribers()
	return euo
}

// RemoveSubscriberIDs removes the "subscribers" edge to Subscriber entities by IDs.
func (euo *EventUpdateOne) RemoveSubscriberIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveSubscriberIDs(ids...)
	return euo
}

// RemoveSubscribers removes "subscribers" edges to Subscriber entities.
func (euo *EventUpdateOne) RemoveSubscribers(s ...*Subscriber) *EventUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return euo.RemoveSubscriberIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (euo *EventUpdateOne) ClearFiles() *EventUpdateOne {
	euo.mutation.ClearFiles()
	return euo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (euo *EventUpdateOne) RemoveFileIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveFileIDs(ids...)
	return euo
}

// RemoveFiles removes "files" edges to File entities.
func (euo *EventUpdateOne) RemoveFiles(f ...*File) *EventUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return euo.RemoveFileIDs(ids...)
}

// ClearOrgSubscriptions clears all "org_subscriptions" edges to the OrgSubscription entity.
func (euo *EventUpdateOne) ClearOrgSubscriptions() *EventUpdateOne {
	euo.mutation.ClearOrgSubscriptions()
	return euo
}

// RemoveOrgSubscriptionIDs removes the "org_subscriptions" edge to OrgSubscription entities by IDs.
func (euo *EventUpdateOne) RemoveOrgSubscriptionIDs(ids ...string) *EventUpdateOne {
	euo.mutation.RemoveOrgSubscriptionIDs(ids...)
	return euo
}

// RemoveOrgSubscriptions removes "org_subscriptions" edges to OrgSubscription entities.
func (euo *EventUpdateOne) RemoveOrgSubscriptions(o ...*OrgSubscription) *EventUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return euo.RemoveOrgSubscriptionIDs(ids...)
}

// Where appends a list predicates to the EventUpdate builder.
func (euo *EventUpdateOne) Where(ps ...predicate.Event) *EventUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EventUpdateOne) Select(field string, fields ...string) *EventUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Event entity.
func (euo *EventUpdateOne) Save(ctx context.Context) (*Event, error) {
	if err := euo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EventUpdateOne) SaveX(ctx context.Context) *Event {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EventUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EventUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (euo *EventUpdateOne) defaults() error {
	if _, ok := euo.mutation.UpdatedAt(); !ok && !euo.mutation.UpdatedAtCleared() {
		if event.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized event.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := event.UpdateDefaultUpdatedAt()
		euo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (euo *EventUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EventUpdateOne {
	euo.modifiers = append(euo.modifiers, modifiers...)
	return euo
}

func (euo *EventUpdateOne) sqlSave(ctx context.Context) (_node *Event, err error) {
	_spec := sqlgraph.NewUpdateSpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Event.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for _, f := range fields {
			if !event.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if euo.mutation.CreatedAtCleared() {
		_spec.ClearField(event.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.SetField(event.FieldUpdatedAt, field.TypeTime, value)
	}
	if euo.mutation.UpdatedAtCleared() {
		_spec.ClearField(event.FieldUpdatedAt, field.TypeTime)
	}
	if euo.mutation.CreatedByCleared() {
		_spec.ClearField(event.FieldCreatedBy, field.TypeString)
	}
	if value, ok := euo.mutation.UpdatedBy(); ok {
		_spec.SetField(event.FieldUpdatedBy, field.TypeString, value)
	}
	if euo.mutation.UpdatedByCleared() {
		_spec.ClearField(event.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := euo.mutation.Tags(); ok {
		_spec.SetField(event.FieldTags, field.TypeJSON, value)
	}
	if value, ok := euo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, event.FieldTags, value)
		})
	}
	if euo.mutation.TagsCleared() {
		_spec.ClearField(event.FieldTags, field.TypeJSON)
	}
	if value, ok := euo.mutation.EventID(); ok {
		_spec.SetField(event.FieldEventID, field.TypeString, value)
	}
	if euo.mutation.EventIDCleared() {
		_spec.ClearField(event.FieldEventID, field.TypeString)
	}
	if value, ok := euo.mutation.CorrelationID(); ok {
		_spec.SetField(event.FieldCorrelationID, field.TypeString, value)
	}
	if euo.mutation.CorrelationIDCleared() {
		_spec.ClearField(event.FieldCorrelationID, field.TypeString)
	}
	if value, ok := euo.mutation.EventType(); ok {
		_spec.SetField(event.FieldEventType, field.TypeString, value)
	}
	if value, ok := euo.mutation.Metadata(); ok {
		_spec.SetField(event.FieldMetadata, field.TypeJSON, value)
	}
	if euo.mutation.MetadataCleared() {
		_spec.ClearField(event.FieldMetadata, field.TypeJSON)
	}
	if euo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.UserEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !euo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.UsersTable,
			Columns: event.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.UserEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.GroupEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !euo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupsTable,
			Columns: event.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.GroupEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.IntegrationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !euo.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.IntegrationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.IntegrationsTable,
			Columns: event.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.IntegrationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrganizationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !euo.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrganizationsTable,
			Columns: event.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.InviteEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !euo.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.InvitesTable,
			Columns: event.InvitesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.InviteEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.PersonalAccessTokenEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedPersonalAccessTokensIDs(); len(nodes) > 0 && !euo.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.PersonalAccessTokensTable,
			Columns: event.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.PersonalAccessTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.HushEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedSecretsIDs(); len(nodes) > 0 && !euo.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SecretsTable,
			Columns: event.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OrgmembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipsTable,
			Columns: event.OrgmembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrgMembershipEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedOrgmembershipsIDs(); len(nodes) > 0 && !euo.mutation.OrgmembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipsTable,
			Columns: event.OrgmembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OrgmembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgmembershipsTable,
			Columns: event.OrgmembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrgMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.GroupmembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipsTable,
			Columns: event.GroupmembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.GroupMembershipEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedGroupmembershipsIDs(); len(nodes) > 0 && !euo.mutation.GroupmembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipsTable,
			Columns: event.GroupmembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.GroupMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GroupmembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.GroupmembershipsTable,
			Columns: event.GroupmembershipsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.GroupMembershipEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.SubscriberEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedSubscribersIDs(); len(nodes) > 0 && !euo.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.SubscribersTable,
			Columns: event.SubscribersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.FileEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !euo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.FilesTable,
			Columns: event.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.FileEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.OrgSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrgSubscriptionEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedOrgSubscriptionsIDs(); len(nodes) > 0 && !euo.mutation.OrgSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrgSubscriptionEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OrgSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   event.OrgSubscriptionsTable,
			Columns: event.OrgSubscriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = euo.schemaConfig.OrgSubscriptionEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = euo.schemaConfig.Event
	ctx = internal.NewSchemaConfigContext(ctx, euo.schemaConfig)
	_spec.AddModifiers(euo.modifiers...)
	_node = &Event{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{event.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
