// Code generated by ent, DO NOT EDIT.

package subcontrolhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldID, id))
}

// HistoryTime applies equality check predicate on the "history_time" field. It's identical to HistoryTimeEQ.
func HistoryTime(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldRef, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldDeletedBy, v))
}

// DisplayID applies equality check predicate on the "display_id" field. It's identical to DisplayIDEQ.
func DisplayID(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldDisplayID, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldOwnerID, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldDescription, v))
}

// ReferenceID applies equality check predicate on the "reference_id" field. It's identical to ReferenceIDEQ.
func ReferenceID(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldReferenceID, v))
}

// AuditorReferenceID applies equality check predicate on the "auditor_reference_id" field. It's identical to AuditorReferenceIDEQ.
func AuditorReferenceID(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldAuditorReferenceID, v))
}

// Category applies equality check predicate on the "category" field. It's identical to CategoryEQ.
func Category(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldCategory, v))
}

// CategoryID applies equality check predicate on the "category_id" field. It's identical to CategoryIDEQ.
func CategoryID(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldCategoryID, v))
}

// Subcategory applies equality check predicate on the "subcategory" field. It's identical to SubcategoryEQ.
func Subcategory(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldSubcategory, v))
}

// RefCode applies equality check predicate on the "ref_code" field. It's identical to RefCodeEQ.
func RefCode(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldRefCode, v))
}

// ControlID applies equality check predicate on the "control_id" field. It's identical to ControlIDEQ.
func ControlID(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldControlID, v))
}

// HistoryTimeEQ applies the EQ predicate on the "history_time" field.
func HistoryTimeEQ(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// HistoryTimeNEQ applies the NEQ predicate on the "history_time" field.
func HistoryTimeNEQ(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldHistoryTime, v))
}

// HistoryTimeIn applies the In predicate on the "history_time" field.
func HistoryTimeIn(vs ...time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldHistoryTime, vs...))
}

// HistoryTimeNotIn applies the NotIn predicate on the "history_time" field.
func HistoryTimeNotIn(vs ...time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldHistoryTime, vs...))
}

// HistoryTimeGT applies the GT predicate on the "history_time" field.
func HistoryTimeGT(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldHistoryTime, v))
}

// HistoryTimeGTE applies the GTE predicate on the "history_time" field.
func HistoryTimeGTE(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldHistoryTime, v))
}

// HistoryTimeLT applies the LT predicate on the "history_time" field.
func HistoryTimeLT(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldHistoryTime, v))
}

// HistoryTimeLTE applies the LTE predicate on the "history_time" field.
func HistoryTimeLTE(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldHistoryTime, v))
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldRef, v))
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldRef, v))
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldRef, vs...))
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldRef, vs...))
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldRef, v))
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldRef, v))
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldRef, v))
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldRef, v))
}

// RefContains applies the Contains predicate on the "ref" field.
func RefContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldRef, v))
}

// RefHasPrefix applies the HasPrefix predicate on the "ref" field.
func RefHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldRef, v))
}

// RefHasSuffix applies the HasSuffix predicate on the "ref" field.
func RefHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldRef, v))
}

// RefIsNil applies the IsNil predicate on the "ref" field.
func RefIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldRef))
}

// RefNotNil applies the NotNil predicate on the "ref" field.
func RefNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldRef))
}

// RefEqualFold applies the EqualFold predicate on the "ref" field.
func RefEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldRef, v))
}

// RefContainsFold applies the ContainsFold predicate on the "ref" field.
func RefContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldRef, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v history.OpType) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v history.OpType) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...history.OpType) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...history.OpType) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldOperation, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldDeletedBy, v))
}

// DisplayIDEQ applies the EQ predicate on the "display_id" field.
func DisplayIDEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldDisplayID, v))
}

// DisplayIDNEQ applies the NEQ predicate on the "display_id" field.
func DisplayIDNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldDisplayID, v))
}

// DisplayIDIn applies the In predicate on the "display_id" field.
func DisplayIDIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldDisplayID, vs...))
}

// DisplayIDNotIn applies the NotIn predicate on the "display_id" field.
func DisplayIDNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldDisplayID, vs...))
}

// DisplayIDGT applies the GT predicate on the "display_id" field.
func DisplayIDGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldDisplayID, v))
}

// DisplayIDGTE applies the GTE predicate on the "display_id" field.
func DisplayIDGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldDisplayID, v))
}

// DisplayIDLT applies the LT predicate on the "display_id" field.
func DisplayIDLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldDisplayID, v))
}

// DisplayIDLTE applies the LTE predicate on the "display_id" field.
func DisplayIDLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldDisplayID, v))
}

// DisplayIDContains applies the Contains predicate on the "display_id" field.
func DisplayIDContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldDisplayID, v))
}

// DisplayIDHasPrefix applies the HasPrefix predicate on the "display_id" field.
func DisplayIDHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldDisplayID, v))
}

// DisplayIDHasSuffix applies the HasSuffix predicate on the "display_id" field.
func DisplayIDHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldDisplayID, v))
}

// DisplayIDEqualFold applies the EqualFold predicate on the "display_id" field.
func DisplayIDEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldDisplayID, v))
}

// DisplayIDContainsFold applies the ContainsFold predicate on the "display_id" field.
func DisplayIDContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldDisplayID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldTags))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldOwnerID, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldDescription, v))
}

// ReferenceIDEQ applies the EQ predicate on the "reference_id" field.
func ReferenceIDEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldReferenceID, v))
}

// ReferenceIDNEQ applies the NEQ predicate on the "reference_id" field.
func ReferenceIDNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldReferenceID, v))
}

// ReferenceIDIn applies the In predicate on the "reference_id" field.
func ReferenceIDIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldReferenceID, vs...))
}

// ReferenceIDNotIn applies the NotIn predicate on the "reference_id" field.
func ReferenceIDNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldReferenceID, vs...))
}

// ReferenceIDGT applies the GT predicate on the "reference_id" field.
func ReferenceIDGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldReferenceID, v))
}

// ReferenceIDGTE applies the GTE predicate on the "reference_id" field.
func ReferenceIDGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldReferenceID, v))
}

// ReferenceIDLT applies the LT predicate on the "reference_id" field.
func ReferenceIDLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldReferenceID, v))
}

// ReferenceIDLTE applies the LTE predicate on the "reference_id" field.
func ReferenceIDLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldReferenceID, v))
}

// ReferenceIDContains applies the Contains predicate on the "reference_id" field.
func ReferenceIDContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldReferenceID, v))
}

// ReferenceIDHasPrefix applies the HasPrefix predicate on the "reference_id" field.
func ReferenceIDHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldReferenceID, v))
}

// ReferenceIDHasSuffix applies the HasSuffix predicate on the "reference_id" field.
func ReferenceIDHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldReferenceID, v))
}

// ReferenceIDIsNil applies the IsNil predicate on the "reference_id" field.
func ReferenceIDIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldReferenceID))
}

// ReferenceIDNotNil applies the NotNil predicate on the "reference_id" field.
func ReferenceIDNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldReferenceID))
}

// ReferenceIDEqualFold applies the EqualFold predicate on the "reference_id" field.
func ReferenceIDEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldReferenceID, v))
}

// ReferenceIDContainsFold applies the ContainsFold predicate on the "reference_id" field.
func ReferenceIDContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldReferenceID, v))
}

// AuditorReferenceIDEQ applies the EQ predicate on the "auditor_reference_id" field.
func AuditorReferenceIDEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldAuditorReferenceID, v))
}

// AuditorReferenceIDNEQ applies the NEQ predicate on the "auditor_reference_id" field.
func AuditorReferenceIDNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldAuditorReferenceID, v))
}

// AuditorReferenceIDIn applies the In predicate on the "auditor_reference_id" field.
func AuditorReferenceIDIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldAuditorReferenceID, vs...))
}

// AuditorReferenceIDNotIn applies the NotIn predicate on the "auditor_reference_id" field.
func AuditorReferenceIDNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldAuditorReferenceID, vs...))
}

// AuditorReferenceIDGT applies the GT predicate on the "auditor_reference_id" field.
func AuditorReferenceIDGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldAuditorReferenceID, v))
}

// AuditorReferenceIDGTE applies the GTE predicate on the "auditor_reference_id" field.
func AuditorReferenceIDGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldAuditorReferenceID, v))
}

// AuditorReferenceIDLT applies the LT predicate on the "auditor_reference_id" field.
func AuditorReferenceIDLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldAuditorReferenceID, v))
}

// AuditorReferenceIDLTE applies the LTE predicate on the "auditor_reference_id" field.
func AuditorReferenceIDLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldAuditorReferenceID, v))
}

// AuditorReferenceIDContains applies the Contains predicate on the "auditor_reference_id" field.
func AuditorReferenceIDContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldAuditorReferenceID, v))
}

// AuditorReferenceIDHasPrefix applies the HasPrefix predicate on the "auditor_reference_id" field.
func AuditorReferenceIDHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldAuditorReferenceID, v))
}

// AuditorReferenceIDHasSuffix applies the HasSuffix predicate on the "auditor_reference_id" field.
func AuditorReferenceIDHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldAuditorReferenceID, v))
}

// AuditorReferenceIDIsNil applies the IsNil predicate on the "auditor_reference_id" field.
func AuditorReferenceIDIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldAuditorReferenceID))
}

// AuditorReferenceIDNotNil applies the NotNil predicate on the "auditor_reference_id" field.
func AuditorReferenceIDNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldAuditorReferenceID))
}

// AuditorReferenceIDEqualFold applies the EqualFold predicate on the "auditor_reference_id" field.
func AuditorReferenceIDEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldAuditorReferenceID, v))
}

// AuditorReferenceIDContainsFold applies the ContainsFold predicate on the "auditor_reference_id" field.
func AuditorReferenceIDContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldAuditorReferenceID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.ControlStatus) predicate.SubcontrolHistory {
	vc := v
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.ControlStatus) predicate.SubcontrolHistory {
	vc := v
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.ControlStatus) predicate.SubcontrolHistory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubcontrolHistory(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.ControlStatus) predicate.SubcontrolHistory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldStatus, v...))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldStatus))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v enums.ControlSource) predicate.SubcontrolHistory {
	vc := v
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldSource, vc))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v enums.ControlSource) predicate.SubcontrolHistory {
	vc := v
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldSource, vc))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...enums.ControlSource) predicate.SubcontrolHistory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubcontrolHistory(sql.FieldIn(FieldSource, v...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...enums.ControlSource) predicate.SubcontrolHistory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldSource, v...))
}

// SourceIsNil applies the IsNil predicate on the "source" field.
func SourceIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldSource))
}

// SourceNotNil applies the NotNil predicate on the "source" field.
func SourceNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldSource))
}

// ControlTypeEQ applies the EQ predicate on the "control_type" field.
func ControlTypeEQ(v enums.ControlType) predicate.SubcontrolHistory {
	vc := v
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldControlType, vc))
}

// ControlTypeNEQ applies the NEQ predicate on the "control_type" field.
func ControlTypeNEQ(v enums.ControlType) predicate.SubcontrolHistory {
	vc := v
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldControlType, vc))
}

// ControlTypeIn applies the In predicate on the "control_type" field.
func ControlTypeIn(vs ...enums.ControlType) predicate.SubcontrolHistory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubcontrolHistory(sql.FieldIn(FieldControlType, v...))
}

// ControlTypeNotIn applies the NotIn predicate on the "control_type" field.
func ControlTypeNotIn(vs ...enums.ControlType) predicate.SubcontrolHistory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldControlType, v...))
}

// ControlTypeIsNil applies the IsNil predicate on the "control_type" field.
func ControlTypeIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldControlType))
}

// ControlTypeNotNil applies the NotNil predicate on the "control_type" field.
func ControlTypeNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldControlType))
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldCategory, v))
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldCategory, v))
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldCategory, vs...))
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldCategory, vs...))
}

// CategoryGT applies the GT predicate on the "category" field.
func CategoryGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldCategory, v))
}

// CategoryGTE applies the GTE predicate on the "category" field.
func CategoryGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldCategory, v))
}

// CategoryLT applies the LT predicate on the "category" field.
func CategoryLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldCategory, v))
}

// CategoryLTE applies the LTE predicate on the "category" field.
func CategoryLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldCategory, v))
}

// CategoryContains applies the Contains predicate on the "category" field.
func CategoryContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldCategory, v))
}

// CategoryHasPrefix applies the HasPrefix predicate on the "category" field.
func CategoryHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldCategory, v))
}

// CategoryHasSuffix applies the HasSuffix predicate on the "category" field.
func CategoryHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldCategory, v))
}

// CategoryIsNil applies the IsNil predicate on the "category" field.
func CategoryIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldCategory))
}

// CategoryNotNil applies the NotNil predicate on the "category" field.
func CategoryNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldCategory))
}

// CategoryEqualFold applies the EqualFold predicate on the "category" field.
func CategoryEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldCategory, v))
}

// CategoryContainsFold applies the ContainsFold predicate on the "category" field.
func CategoryContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldCategory, v))
}

// CategoryIDEQ applies the EQ predicate on the "category_id" field.
func CategoryIDEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldCategoryID, v))
}

// CategoryIDNEQ applies the NEQ predicate on the "category_id" field.
func CategoryIDNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldCategoryID, v))
}

// CategoryIDIn applies the In predicate on the "category_id" field.
func CategoryIDIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldCategoryID, vs...))
}

// CategoryIDNotIn applies the NotIn predicate on the "category_id" field.
func CategoryIDNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldCategoryID, vs...))
}

// CategoryIDGT applies the GT predicate on the "category_id" field.
func CategoryIDGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldCategoryID, v))
}

// CategoryIDGTE applies the GTE predicate on the "category_id" field.
func CategoryIDGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldCategoryID, v))
}

// CategoryIDLT applies the LT predicate on the "category_id" field.
func CategoryIDLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldCategoryID, v))
}

// CategoryIDLTE applies the LTE predicate on the "category_id" field.
func CategoryIDLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldCategoryID, v))
}

// CategoryIDContains applies the Contains predicate on the "category_id" field.
func CategoryIDContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldCategoryID, v))
}

// CategoryIDHasPrefix applies the HasPrefix predicate on the "category_id" field.
func CategoryIDHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldCategoryID, v))
}

// CategoryIDHasSuffix applies the HasSuffix predicate on the "category_id" field.
func CategoryIDHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldCategoryID, v))
}

// CategoryIDIsNil applies the IsNil predicate on the "category_id" field.
func CategoryIDIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldCategoryID))
}

// CategoryIDNotNil applies the NotNil predicate on the "category_id" field.
func CategoryIDNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldCategoryID))
}

// CategoryIDEqualFold applies the EqualFold predicate on the "category_id" field.
func CategoryIDEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldCategoryID, v))
}

// CategoryIDContainsFold applies the ContainsFold predicate on the "category_id" field.
func CategoryIDContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldCategoryID, v))
}

// SubcategoryEQ applies the EQ predicate on the "subcategory" field.
func SubcategoryEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldSubcategory, v))
}

// SubcategoryNEQ applies the NEQ predicate on the "subcategory" field.
func SubcategoryNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldSubcategory, v))
}

// SubcategoryIn applies the In predicate on the "subcategory" field.
func SubcategoryIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldSubcategory, vs...))
}

// SubcategoryNotIn applies the NotIn predicate on the "subcategory" field.
func SubcategoryNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldSubcategory, vs...))
}

// SubcategoryGT applies the GT predicate on the "subcategory" field.
func SubcategoryGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldSubcategory, v))
}

// SubcategoryGTE applies the GTE predicate on the "subcategory" field.
func SubcategoryGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldSubcategory, v))
}

// SubcategoryLT applies the LT predicate on the "subcategory" field.
func SubcategoryLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldSubcategory, v))
}

// SubcategoryLTE applies the LTE predicate on the "subcategory" field.
func SubcategoryLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldSubcategory, v))
}

// SubcategoryContains applies the Contains predicate on the "subcategory" field.
func SubcategoryContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldSubcategory, v))
}

// SubcategoryHasPrefix applies the HasPrefix predicate on the "subcategory" field.
func SubcategoryHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldSubcategory, v))
}

// SubcategoryHasSuffix applies the HasSuffix predicate on the "subcategory" field.
func SubcategoryHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldSubcategory, v))
}

// SubcategoryIsNil applies the IsNil predicate on the "subcategory" field.
func SubcategoryIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldSubcategory))
}

// SubcategoryNotNil applies the NotNil predicate on the "subcategory" field.
func SubcategoryNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldSubcategory))
}

// SubcategoryEqualFold applies the EqualFold predicate on the "subcategory" field.
func SubcategoryEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldSubcategory, v))
}

// SubcategoryContainsFold applies the ContainsFold predicate on the "subcategory" field.
func SubcategoryContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldSubcategory, v))
}

// MappedCategoriesIsNil applies the IsNil predicate on the "mapped_categories" field.
func MappedCategoriesIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldMappedCategories))
}

// MappedCategoriesNotNil applies the NotNil predicate on the "mapped_categories" field.
func MappedCategoriesNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldMappedCategories))
}

// AssessmentObjectivesIsNil applies the IsNil predicate on the "assessment_objectives" field.
func AssessmentObjectivesIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldAssessmentObjectives))
}

// AssessmentObjectivesNotNil applies the NotNil predicate on the "assessment_objectives" field.
func AssessmentObjectivesNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldAssessmentObjectives))
}

// AssessmentMethodsIsNil applies the IsNil predicate on the "assessment_methods" field.
func AssessmentMethodsIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldAssessmentMethods))
}

// AssessmentMethodsNotNil applies the NotNil predicate on the "assessment_methods" field.
func AssessmentMethodsNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldAssessmentMethods))
}

// ControlQuestionsIsNil applies the IsNil predicate on the "control_questions" field.
func ControlQuestionsIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldControlQuestions))
}

// ControlQuestionsNotNil applies the NotNil predicate on the "control_questions" field.
func ControlQuestionsNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldControlQuestions))
}

// ImplementationGuidanceIsNil applies the IsNil predicate on the "implementation_guidance" field.
func ImplementationGuidanceIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldImplementationGuidance))
}

// ImplementationGuidanceNotNil applies the NotNil predicate on the "implementation_guidance" field.
func ImplementationGuidanceNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldImplementationGuidance))
}

// ExampleEvidenceIsNil applies the IsNil predicate on the "example_evidence" field.
func ExampleEvidenceIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldExampleEvidence))
}

// ExampleEvidenceNotNil applies the NotNil predicate on the "example_evidence" field.
func ExampleEvidenceNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldExampleEvidence))
}

// ReferencesIsNil applies the IsNil predicate on the "references" field.
func ReferencesIsNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIsNull(FieldReferences))
}

// ReferencesNotNil applies the NotNil predicate on the "references" field.
func ReferencesNotNil() predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotNull(FieldReferences))
}

// RefCodeEQ applies the EQ predicate on the "ref_code" field.
func RefCodeEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldRefCode, v))
}

// RefCodeNEQ applies the NEQ predicate on the "ref_code" field.
func RefCodeNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldRefCode, v))
}

// RefCodeIn applies the In predicate on the "ref_code" field.
func RefCodeIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldRefCode, vs...))
}

// RefCodeNotIn applies the NotIn predicate on the "ref_code" field.
func RefCodeNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldRefCode, vs...))
}

// RefCodeGT applies the GT predicate on the "ref_code" field.
func RefCodeGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldRefCode, v))
}

// RefCodeGTE applies the GTE predicate on the "ref_code" field.
func RefCodeGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldRefCode, v))
}

// RefCodeLT applies the LT predicate on the "ref_code" field.
func RefCodeLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldRefCode, v))
}

// RefCodeLTE applies the LTE predicate on the "ref_code" field.
func RefCodeLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldRefCode, v))
}

// RefCodeContains applies the Contains predicate on the "ref_code" field.
func RefCodeContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldRefCode, v))
}

// RefCodeHasPrefix applies the HasPrefix predicate on the "ref_code" field.
func RefCodeHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldRefCode, v))
}

// RefCodeHasSuffix applies the HasSuffix predicate on the "ref_code" field.
func RefCodeHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldRefCode, v))
}

// RefCodeEqualFold applies the EqualFold predicate on the "ref_code" field.
func RefCodeEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldRefCode, v))
}

// RefCodeContainsFold applies the ContainsFold predicate on the "ref_code" field.
func RefCodeContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldRefCode, v))
}

// ControlIDEQ applies the EQ predicate on the "control_id" field.
func ControlIDEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEQ(FieldControlID, v))
}

// ControlIDNEQ applies the NEQ predicate on the "control_id" field.
func ControlIDNEQ(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNEQ(FieldControlID, v))
}

// ControlIDIn applies the In predicate on the "control_id" field.
func ControlIDIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldIn(FieldControlID, vs...))
}

// ControlIDNotIn applies the NotIn predicate on the "control_id" field.
func ControlIDNotIn(vs ...string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldNotIn(FieldControlID, vs...))
}

// ControlIDGT applies the GT predicate on the "control_id" field.
func ControlIDGT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGT(FieldControlID, v))
}

// ControlIDGTE applies the GTE predicate on the "control_id" field.
func ControlIDGTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldGTE(FieldControlID, v))
}

// ControlIDLT applies the LT predicate on the "control_id" field.
func ControlIDLT(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLT(FieldControlID, v))
}

// ControlIDLTE applies the LTE predicate on the "control_id" field.
func ControlIDLTE(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldLTE(FieldControlID, v))
}

// ControlIDContains applies the Contains predicate on the "control_id" field.
func ControlIDContains(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContains(FieldControlID, v))
}

// ControlIDHasPrefix applies the HasPrefix predicate on the "control_id" field.
func ControlIDHasPrefix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasPrefix(FieldControlID, v))
}

// ControlIDHasSuffix applies the HasSuffix predicate on the "control_id" field.
func ControlIDHasSuffix(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldHasSuffix(FieldControlID, v))
}

// ControlIDEqualFold applies the EqualFold predicate on the "control_id" field.
func ControlIDEqualFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldEqualFold(FieldControlID, v))
}

// ControlIDContainsFold applies the ContainsFold predicate on the "control_id" field.
func ControlIDContainsFold(v string) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.FieldContainsFold(FieldControlID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SubcontrolHistory) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SubcontrolHistory) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubcontrolHistory) predicate.SubcontrolHistory {
	return predicate.SubcontrolHistory(sql.NotPredicates(p))
}
