// Code generated by ent, DO NOT EDIT.

package subcontrolhistory

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/entx/history"
)

const (
	// Label holds the string label denoting the subcontrolhistory type in the database.
	Label = "subcontrol_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHistoryTime holds the string denoting the history_time field in the database.
	FieldHistoryTime = "history_time"
	// FieldRef holds the string denoting the ref field in the database.
	FieldRef = "ref"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSubcontrolType holds the string denoting the subcontrol_type field in the database.
	FieldSubcontrolType = "subcontrol_type"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldSubcontrolNumber holds the string denoting the subcontrol_number field in the database.
	FieldSubcontrolNumber = "subcontrol_number"
	// FieldFamily holds the string denoting the family field in the database.
	FieldFamily = "family"
	// FieldClass holds the string denoting the class field in the database.
	FieldClass = "class"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldMappedFrameworks holds the string denoting the mapped_frameworks field in the database.
	FieldMappedFrameworks = "mapped_frameworks"
	// FieldImplementationEvidence holds the string denoting the implementation_evidence field in the database.
	FieldImplementationEvidence = "implementation_evidence"
	// FieldImplementationStatus holds the string denoting the implementation_status field in the database.
	FieldImplementationStatus = "implementation_status"
	// FieldImplementationDate holds the string denoting the implementation_date field in the database.
	FieldImplementationDate = "implementation_date"
	// FieldImplementationVerification holds the string denoting the implementation_verification field in the database.
	FieldImplementationVerification = "implementation_verification"
	// FieldImplementationVerificationDate holds the string denoting the implementation_verification_date field in the database.
	FieldImplementationVerificationDate = "implementation_verification_date"
	// FieldDetails holds the string denoting the details field in the database.
	FieldDetails = "details"
	// Table holds the table name of the subcontrolhistory in the database.
	Table = "subcontrol_history"
)

// Columns holds all SQL columns for subcontrolhistory fields.
var Columns = []string{
	FieldID,
	FieldHistoryTime,
	FieldRef,
	FieldOperation,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldMappingID,
	FieldTags,
	FieldName,
	FieldDescription,
	FieldStatus,
	FieldSubcontrolType,
	FieldVersion,
	FieldSubcontrolNumber,
	FieldFamily,
	FieldClass,
	FieldSource,
	FieldMappedFrameworks,
	FieldImplementationEvidence,
	FieldImplementationStatus,
	FieldImplementationDate,
	FieldImplementationVerification,
	FieldImplementationVerificationDate,
	FieldDetails,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultHistoryTime holds the default value on creation for the "history_time" field.
	DefaultHistoryTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OperationValidator is a validator for the "operation" field enum values. It is called by the builders before save.
func OperationValidator(o history.OpType) error {
	switch o.String() {
	case "INSERT", "UPDATE", "DELETE":
		return nil
	default:
		return fmt.Errorf("subcontrolhistory: invalid enum value for operation field: %q", o)
	}
}

// OrderOption defines the ordering options for the SubcontrolHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHistoryTime orders the results by the history_time field.
func ByHistoryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHistoryTime, opts...).ToFunc()
}

// ByRef orders the results by the ref field.
func ByRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRef, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySubcontrolType orders the results by the subcontrol_type field.
func BySubcontrolType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubcontrolType, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// BySubcontrolNumber orders the results by the subcontrol_number field.
func BySubcontrolNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubcontrolNumber, opts...).ToFunc()
}

// ByFamily orders the results by the family field.
func ByFamily(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFamily, opts...).ToFunc()
}

// ByClass orders the results by the class field.
func ByClass(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClass, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByMappedFrameworks orders the results by the mapped_frameworks field.
func ByMappedFrameworks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappedFrameworks, opts...).ToFunc()
}

// ByImplementationEvidence orders the results by the implementation_evidence field.
func ByImplementationEvidence(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationEvidence, opts...).ToFunc()
}

// ByImplementationStatus orders the results by the implementation_status field.
func ByImplementationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationStatus, opts...).ToFunc()
}

// ByImplementationDate orders the results by the implementation_date field.
func ByImplementationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationDate, opts...).ToFunc()
}

// ByImplementationVerification orders the results by the implementation_verification field.
func ByImplementationVerification(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationVerification, opts...).ToFunc()
}

// ByImplementationVerificationDate orders the results by the implementation_verification_date field.
func ByImplementationVerificationDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImplementationVerificationDate, opts...).ToFunc()
}

var (
	// history.OpType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*history.OpType)(nil)
	// history.OpType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*history.OpType)(nil)
)
