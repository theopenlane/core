// Code generated by ent, DO NOT EDIT.

package subcontrolhistory

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

const (
	// Label holds the string label denoting the subcontrolhistory type in the database.
	Label = "subcontrol_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHistoryTime holds the string denoting the history_time field in the database.
	FieldHistoryTime = "history_time"
	// FieldRef holds the string denoting the ref field in the database.
	FieldRef = "ref"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldDisplayID holds the string denoting the display_id field in the database.
	FieldDisplayID = "display_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldReferenceID holds the string denoting the reference_id field in the database.
	FieldReferenceID = "reference_id"
	// FieldAuditorReferenceID holds the string denoting the auditor_reference_id field in the database.
	FieldAuditorReferenceID = "auditor_reference_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldControlType holds the string denoting the control_type field in the database.
	FieldControlType = "control_type"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldCategoryID holds the string denoting the category_id field in the database.
	FieldCategoryID = "category_id"
	// FieldSubcategory holds the string denoting the subcategory field in the database.
	FieldSubcategory = "subcategory"
	// FieldMappedCategories holds the string denoting the mapped_categories field in the database.
	FieldMappedCategories = "mapped_categories"
	// FieldAssessmentObjectives holds the string denoting the assessment_objectives field in the database.
	FieldAssessmentObjectives = "assessment_objectives"
	// FieldAssessmentMethods holds the string denoting the assessment_methods field in the database.
	FieldAssessmentMethods = "assessment_methods"
	// FieldControlQuestions holds the string denoting the control_questions field in the database.
	FieldControlQuestions = "control_questions"
	// FieldImplementationGuidance holds the string denoting the implementation_guidance field in the database.
	FieldImplementationGuidance = "implementation_guidance"
	// FieldExampleEvidence holds the string denoting the example_evidence field in the database.
	FieldExampleEvidence = "example_evidence"
	// FieldReferences holds the string denoting the references field in the database.
	FieldReferences = "references"
	// FieldRefCode holds the string denoting the ref_code field in the database.
	FieldRefCode = "ref_code"
	// FieldControlID holds the string denoting the control_id field in the database.
	FieldControlID = "control_id"
	// Table holds the table name of the subcontrolhistory in the database.
	Table = "subcontrol_history"
)

// Columns holds all SQL columns for subcontrolhistory fields.
var Columns = []string{
	FieldID,
	FieldHistoryTime,
	FieldRef,
	FieldOperation,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldDisplayID,
	FieldTags,
	FieldOwnerID,
	FieldDescription,
	FieldReferenceID,
	FieldAuditorReferenceID,
	FieldStatus,
	FieldSource,
	FieldControlType,
	FieldCategory,
	FieldCategoryID,
	FieldSubcategory,
	FieldMappedCategories,
	FieldAssessmentObjectives,
	FieldAssessmentMethods,
	FieldControlQuestions,
	FieldImplementationGuidance,
	FieldExampleEvidence,
	FieldReferences,
	FieldRefCode,
	FieldControlID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Interceptors [1]ent.Interceptor
	// DefaultHistoryTime holds the default value on creation for the "history_time" field.
	DefaultHistoryTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OperationValidator is a validator for the "operation" field enum values. It is called by the builders before save.
func OperationValidator(o history.OpType) error {
	switch o.String() {
	case "INSERT", "UPDATE", "DELETE":
		return nil
	default:
		return fmt.Errorf("subcontrolhistory: invalid enum value for operation field: %q", o)
	}
}

const DefaultStatus enums.ControlStatus = "NULL"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.ControlStatus) error {
	switch s.String() {
	case "PREPARING", "NEEDS_APPROVAL", "CHANGES_REQUESTED", "APPROVED", "ARCHIVED", "NULL":
		return nil
	default:
		return fmt.Errorf("subcontrolhistory: invalid enum value for status field: %q", s)
	}
}

const DefaultSource enums.ControlSource = "USER_DEFINED"

// SourceValidator is a validator for the "source" field enum values. It is called by the builders before save.
func SourceValidator(s enums.ControlSource) error {
	switch s.String() {
	case "FRAMEWORK", "TEMPLATE", "USER_DEFINED", "IMPORTED":
		return nil
	default:
		return fmt.Errorf("subcontrolhistory: invalid enum value for source field: %q", s)
	}
}

const DefaultControlType enums.ControlType = "PREVENTATIVE"

// ControlTypeValidator is a validator for the "control_type" field enum values. It is called by the builders before save.
func ControlTypeValidator(ct enums.ControlType) error {
	switch ct.String() {
	case "PREVENTATIVE", "DETECTIVE", "CORRECTIVE", "DETERRENT":
		return nil
	default:
		return fmt.Errorf("subcontrolhistory: invalid enum value for control_type field: %q", ct)
	}
}

// OrderOption defines the ordering options for the SubcontrolHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHistoryTime orders the results by the history_time field.
func ByHistoryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHistoryTime, opts...).ToFunc()
}

// ByRef orders the results by the ref field.
func ByRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRef, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByDisplayID orders the results by the display_id field.
func ByDisplayID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByReferenceID orders the results by the reference_id field.
func ByReferenceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReferenceID, opts...).ToFunc()
}

// ByAuditorReferenceID orders the results by the auditor_reference_id field.
func ByAuditorReferenceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAuditorReferenceID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByControlType orders the results by the control_type field.
func ByControlType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldControlType, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByCategoryID orders the results by the category_id field.
func ByCategoryID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryID, opts...).ToFunc()
}

// BySubcategory orders the results by the subcategory field.
func BySubcategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubcategory, opts...).ToFunc()
}

// ByRefCode orders the results by the ref_code field.
func ByRefCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRefCode, opts...).ToFunc()
}

// ByControlID orders the results by the control_id field.
func ByControlID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldControlID, opts...).ToFunc()
}

var (
	// history.OpType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*history.OpType)(nil)
	// history.OpType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*history.OpType)(nil)
)

var (
	// enums.ControlStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.ControlStatus)(nil)
	// enums.ControlStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.ControlStatus)(nil)
)

var (
	// enums.ControlSource must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.ControlSource)(nil)
	// enums.ControlSource must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.ControlSource)(nil)
)

var (
	// enums.ControlType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.ControlType)(nil)
	// enums.ControlType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.ControlType)(nil)
)
