// Code generated by ent, DO NOT EDIT.

package trustcenterwatermarkconfighistory

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

const (
	// Label holds the string label denoting the trustcenterwatermarkconfighistory type in the database.
	Label = "trust_center_watermark_config_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHistoryTime holds the string denoting the history_time field in the database.
	FieldHistoryTime = "history_time"
	// FieldRef holds the string denoting the ref field in the database.
	FieldRef = "ref"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldTrustCenterID holds the string denoting the trust_center_id field in the database.
	FieldTrustCenterID = "trust_center_id"
	// FieldLogoID holds the string denoting the logo_id field in the database.
	FieldLogoID = "logo_id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldFontSize holds the string denoting the font_size field in the database.
	FieldFontSize = "font_size"
	// FieldOpacity holds the string denoting the opacity field in the database.
	FieldOpacity = "opacity"
	// FieldRotation holds the string denoting the rotation field in the database.
	FieldRotation = "rotation"
	// FieldColor holds the string denoting the color field in the database.
	FieldColor = "color"
	// FieldFont holds the string denoting the font field in the database.
	FieldFont = "font"
	// Table holds the table name of the trustcenterwatermarkconfighistory in the database.
	Table = "trust_center_watermark_config_history"
)

// Columns holds all SQL columns for trustcenterwatermarkconfighistory fields.
var Columns = []string{
	FieldID,
	FieldHistoryTime,
	FieldRef,
	FieldOperation,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldOwnerID,
	FieldTrustCenterID,
	FieldLogoID,
	FieldText,
	FieldFontSize,
	FieldOpacity,
	FieldRotation,
	FieldColor,
	FieldFont,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultHistoryTime holds the default value on creation for the "history_time" field.
	DefaultHistoryTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultFontSize holds the default value on creation for the "font_size" field.
	DefaultFontSize float64
	// DefaultOpacity holds the default value on creation for the "opacity" field.
	DefaultOpacity float64
	// DefaultRotation holds the default value on creation for the "rotation" field.
	DefaultRotation float64
	// DefaultColor holds the default value on creation for the "color" field.
	DefaultColor string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OperationValidator is a validator for the "operation" field enum values. It is called by the builders before save.
func OperationValidator(o history.OpType) error {
	switch o.String() {
	case "INSERT", "UPDATE", "DELETE":
		return nil
	default:
		return fmt.Errorf("trustcenterwatermarkconfighistory: invalid enum value for operation field: %q", o)
	}
}

const DefaultFont enums.Font = "arial"

// FontValidator is a validator for the "font" field enum values. It is called by the builders before save.
func FontValidator(f enums.Font) error {
	switch f.String() {
	case "arial", "helvetica", "times", "times new roman", "georgia", "verdana", "courier", "courier new", "trebuchet ms", "comic sans ms", "impact", "palatino", "garamond", "bookman", "avant garde":
		return nil
	default:
		return fmt.Errorf("trustcenterwatermarkconfighistory: invalid enum value for font field: %q", f)
	}
}

// OrderOption defines the ordering options for the TrustCenterWatermarkConfigHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHistoryTime orders the results by the history_time field.
func ByHistoryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHistoryTime, opts...).ToFunc()
}

// ByRef orders the results by the ref field.
func ByRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRef, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByTrustCenterID orders the results by the trust_center_id field.
func ByTrustCenterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrustCenterID, opts...).ToFunc()
}

// ByLogoID orders the results by the logo_id field.
func ByLogoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLogoID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByFontSize orders the results by the font_size field.
func ByFontSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFontSize, opts...).ToFunc()
}

// ByOpacity orders the results by the opacity field.
func ByOpacity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpacity, opts...).ToFunc()
}

// ByRotation orders the results by the rotation field.
func ByRotation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRotation, opts...).ToFunc()
}

// ByColor orders the results by the color field.
func ByColor(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldColor, opts...).ToFunc()
}

// ByFont orders the results by the font field.
func ByFont(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFont, opts...).ToFunc()
}

var (
	// history.OpType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*history.OpType)(nil)
	// history.OpType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*history.OpType)(nil)
)

var (
	// enums.Font must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.Font)(nil)
	// enums.Font must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.Font)(nil)
)
