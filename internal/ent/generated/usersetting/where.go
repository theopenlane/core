// Code generated by ent, DO NOT EDIT.

package usersetting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedByID applies equality check predicate on the "created_by_id" field. It's identical to CreatedByIDEQ.
func CreatedByID(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldCreatedByID, v))
}

// UpdatedByID applies equality check predicate on the "updated_by_id" field. It's identical to UpdatedByIDEQ.
func UpdatedByID(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldUpdatedByID, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldMappingID, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedByID applies equality check predicate on the "deleted_by_id" field. It's identical to DeletedByIDEQ.
func DeletedByID(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldDeletedByID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldUserID, v))
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldLocked, v))
}

// SilencedAt applies equality check predicate on the "silenced_at" field. It's identical to SilencedAtEQ.
func SilencedAt(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldSilencedAt, v))
}

// SuspendedAt applies equality check predicate on the "suspended_at" field. It's identical to SuspendedAtEQ.
func SuspendedAt(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldSuspendedAt, v))
}

// EmailConfirmed applies equality check predicate on the "email_confirmed" field. It's identical to EmailConfirmedEQ.
func EmailConfirmed(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldEmailConfirmed, v))
}

// IsWebauthnAllowed applies equality check predicate on the "is_webauthn_allowed" field. It's identical to IsWebauthnAllowedEQ.
func IsWebauthnAllowed(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldIsWebauthnAllowed, v))
}

// IsTfaEnabled applies equality check predicate on the "is_tfa_enabled" field. It's identical to IsTfaEnabledEQ.
func IsTfaEnabled(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldIsTfaEnabled, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldPhoneNumber, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByIDEQ applies the EQ predicate on the "created_by_id" field.
func CreatedByIDEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldCreatedByID, v))
}

// CreatedByIDNEQ applies the NEQ predicate on the "created_by_id" field.
func CreatedByIDNEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldCreatedByID, v))
}

// CreatedByIDIn applies the In predicate on the "created_by_id" field.
func CreatedByIDIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldCreatedByID, vs...))
}

// CreatedByIDNotIn applies the NotIn predicate on the "created_by_id" field.
func CreatedByIDNotIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldCreatedByID, vs...))
}

// CreatedByIDGT applies the GT predicate on the "created_by_id" field.
func CreatedByIDGT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldCreatedByID, v))
}

// CreatedByIDGTE applies the GTE predicate on the "created_by_id" field.
func CreatedByIDGTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldCreatedByID, v))
}

// CreatedByIDLT applies the LT predicate on the "created_by_id" field.
func CreatedByIDLT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldCreatedByID, v))
}

// CreatedByIDLTE applies the LTE predicate on the "created_by_id" field.
func CreatedByIDLTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldCreatedByID, v))
}

// CreatedByIDContains applies the Contains predicate on the "created_by_id" field.
func CreatedByIDContains(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContains(FieldCreatedByID, v))
}

// CreatedByIDHasPrefix applies the HasPrefix predicate on the "created_by_id" field.
func CreatedByIDHasPrefix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasPrefix(FieldCreatedByID, v))
}

// CreatedByIDHasSuffix applies the HasSuffix predicate on the "created_by_id" field.
func CreatedByIDHasSuffix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasSuffix(FieldCreatedByID, v))
}

// CreatedByIDIsNil applies the IsNil predicate on the "created_by_id" field.
func CreatedByIDIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldCreatedByID))
}

// CreatedByIDNotNil applies the NotNil predicate on the "created_by_id" field.
func CreatedByIDNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldCreatedByID))
}

// CreatedByIDEqualFold applies the EqualFold predicate on the "created_by_id" field.
func CreatedByIDEqualFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEqualFold(FieldCreatedByID, v))
}

// CreatedByIDContainsFold applies the ContainsFold predicate on the "created_by_id" field.
func CreatedByIDContainsFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContainsFold(FieldCreatedByID, v))
}

// UpdatedByIDEQ applies the EQ predicate on the "updated_by_id" field.
func UpdatedByIDEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldUpdatedByID, v))
}

// UpdatedByIDNEQ applies the NEQ predicate on the "updated_by_id" field.
func UpdatedByIDNEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldUpdatedByID, v))
}

// UpdatedByIDIn applies the In predicate on the "updated_by_id" field.
func UpdatedByIDIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDNotIn applies the NotIn predicate on the "updated_by_id" field.
func UpdatedByIDNotIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDGT applies the GT predicate on the "updated_by_id" field.
func UpdatedByIDGT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldUpdatedByID, v))
}

// UpdatedByIDGTE applies the GTE predicate on the "updated_by_id" field.
func UpdatedByIDGTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldUpdatedByID, v))
}

// UpdatedByIDLT applies the LT predicate on the "updated_by_id" field.
func UpdatedByIDLT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldUpdatedByID, v))
}

// UpdatedByIDLTE applies the LTE predicate on the "updated_by_id" field.
func UpdatedByIDLTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldUpdatedByID, v))
}

// UpdatedByIDContains applies the Contains predicate on the "updated_by_id" field.
func UpdatedByIDContains(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContains(FieldUpdatedByID, v))
}

// UpdatedByIDHasPrefix applies the HasPrefix predicate on the "updated_by_id" field.
func UpdatedByIDHasPrefix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasPrefix(FieldUpdatedByID, v))
}

// UpdatedByIDHasSuffix applies the HasSuffix predicate on the "updated_by_id" field.
func UpdatedByIDHasSuffix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasSuffix(FieldUpdatedByID, v))
}

// UpdatedByIDIsNil applies the IsNil predicate on the "updated_by_id" field.
func UpdatedByIDIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldUpdatedByID))
}

// UpdatedByIDNotNil applies the NotNil predicate on the "updated_by_id" field.
func UpdatedByIDNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldUpdatedByID))
}

// UpdatedByIDEqualFold applies the EqualFold predicate on the "updated_by_id" field.
func UpdatedByIDEqualFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEqualFold(FieldUpdatedByID, v))
}

// UpdatedByIDContainsFold applies the ContainsFold predicate on the "updated_by_id" field.
func UpdatedByIDContainsFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContainsFold(FieldUpdatedByID, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContainsFold(FieldMappingID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldTags))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByIDEQ applies the EQ predicate on the "deleted_by_id" field.
func DeletedByIDEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldDeletedByID, v))
}

// DeletedByIDNEQ applies the NEQ predicate on the "deleted_by_id" field.
func DeletedByIDNEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldDeletedByID, v))
}

// DeletedByIDIn applies the In predicate on the "deleted_by_id" field.
func DeletedByIDIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldDeletedByID, vs...))
}

// DeletedByIDNotIn applies the NotIn predicate on the "deleted_by_id" field.
func DeletedByIDNotIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldDeletedByID, vs...))
}

// DeletedByIDGT applies the GT predicate on the "deleted_by_id" field.
func DeletedByIDGT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldDeletedByID, v))
}

// DeletedByIDGTE applies the GTE predicate on the "deleted_by_id" field.
func DeletedByIDGTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldDeletedByID, v))
}

// DeletedByIDLT applies the LT predicate on the "deleted_by_id" field.
func DeletedByIDLT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldDeletedByID, v))
}

// DeletedByIDLTE applies the LTE predicate on the "deleted_by_id" field.
func DeletedByIDLTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldDeletedByID, v))
}

// DeletedByIDContains applies the Contains predicate on the "deleted_by_id" field.
func DeletedByIDContains(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContains(FieldDeletedByID, v))
}

// DeletedByIDHasPrefix applies the HasPrefix predicate on the "deleted_by_id" field.
func DeletedByIDHasPrefix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasPrefix(FieldDeletedByID, v))
}

// DeletedByIDHasSuffix applies the HasSuffix predicate on the "deleted_by_id" field.
func DeletedByIDHasSuffix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasSuffix(FieldDeletedByID, v))
}

// DeletedByIDIsNil applies the IsNil predicate on the "deleted_by_id" field.
func DeletedByIDIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldDeletedByID))
}

// DeletedByIDNotNil applies the NotNil predicate on the "deleted_by_id" field.
func DeletedByIDNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldDeletedByID))
}

// DeletedByIDEqualFold applies the EqualFold predicate on the "deleted_by_id" field.
func DeletedByIDEqualFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEqualFold(FieldDeletedByID, v))
}

// DeletedByIDContainsFold applies the ContainsFold predicate on the "deleted_by_id" field.
func DeletedByIDContainsFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContainsFold(FieldDeletedByID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldUserID))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContainsFold(FieldUserID, v))
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldLocked, v))
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldLocked, v))
}

// SilencedAtEQ applies the EQ predicate on the "silenced_at" field.
func SilencedAtEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldSilencedAt, v))
}

// SilencedAtNEQ applies the NEQ predicate on the "silenced_at" field.
func SilencedAtNEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldSilencedAt, v))
}

// SilencedAtIn applies the In predicate on the "silenced_at" field.
func SilencedAtIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldSilencedAt, vs...))
}

// SilencedAtNotIn applies the NotIn predicate on the "silenced_at" field.
func SilencedAtNotIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldSilencedAt, vs...))
}

// SilencedAtGT applies the GT predicate on the "silenced_at" field.
func SilencedAtGT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldSilencedAt, v))
}

// SilencedAtGTE applies the GTE predicate on the "silenced_at" field.
func SilencedAtGTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldSilencedAt, v))
}

// SilencedAtLT applies the LT predicate on the "silenced_at" field.
func SilencedAtLT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldSilencedAt, v))
}

// SilencedAtLTE applies the LTE predicate on the "silenced_at" field.
func SilencedAtLTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldSilencedAt, v))
}

// SilencedAtIsNil applies the IsNil predicate on the "silenced_at" field.
func SilencedAtIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldSilencedAt))
}

// SilencedAtNotNil applies the NotNil predicate on the "silenced_at" field.
func SilencedAtNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldSilencedAt))
}

// SuspendedAtEQ applies the EQ predicate on the "suspended_at" field.
func SuspendedAtEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldSuspendedAt, v))
}

// SuspendedAtNEQ applies the NEQ predicate on the "suspended_at" field.
func SuspendedAtNEQ(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldSuspendedAt, v))
}

// SuspendedAtIn applies the In predicate on the "suspended_at" field.
func SuspendedAtIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldSuspendedAt, vs...))
}

// SuspendedAtNotIn applies the NotIn predicate on the "suspended_at" field.
func SuspendedAtNotIn(vs ...time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldSuspendedAt, vs...))
}

// SuspendedAtGT applies the GT predicate on the "suspended_at" field.
func SuspendedAtGT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldSuspendedAt, v))
}

// SuspendedAtGTE applies the GTE predicate on the "suspended_at" field.
func SuspendedAtGTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldSuspendedAt, v))
}

// SuspendedAtLT applies the LT predicate on the "suspended_at" field.
func SuspendedAtLT(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldSuspendedAt, v))
}

// SuspendedAtLTE applies the LTE predicate on the "suspended_at" field.
func SuspendedAtLTE(v time.Time) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldSuspendedAt, v))
}

// SuspendedAtIsNil applies the IsNil predicate on the "suspended_at" field.
func SuspendedAtIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldSuspendedAt))
}

// SuspendedAtNotNil applies the NotNil predicate on the "suspended_at" field.
func SuspendedAtNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldSuspendedAt))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.UserStatus) predicate.UserSetting {
	vc := v
	return predicate.UserSetting(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.UserStatus) predicate.UserSetting {
	vc := v
	return predicate.UserSetting(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.UserStatus) predicate.UserSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSetting(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.UserStatus) predicate.UserSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.UserSetting(sql.FieldNotIn(FieldStatus, v...))
}

// EmailConfirmedEQ applies the EQ predicate on the "email_confirmed" field.
func EmailConfirmedEQ(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldEmailConfirmed, v))
}

// EmailConfirmedNEQ applies the NEQ predicate on the "email_confirmed" field.
func EmailConfirmedNEQ(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldEmailConfirmed, v))
}

// IsWebauthnAllowedEQ applies the EQ predicate on the "is_webauthn_allowed" field.
func IsWebauthnAllowedEQ(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldIsWebauthnAllowed, v))
}

// IsWebauthnAllowedNEQ applies the NEQ predicate on the "is_webauthn_allowed" field.
func IsWebauthnAllowedNEQ(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldIsWebauthnAllowed, v))
}

// IsWebauthnAllowedIsNil applies the IsNil predicate on the "is_webauthn_allowed" field.
func IsWebauthnAllowedIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldIsWebauthnAllowed))
}

// IsWebauthnAllowedNotNil applies the NotNil predicate on the "is_webauthn_allowed" field.
func IsWebauthnAllowedNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldIsWebauthnAllowed))
}

// IsTfaEnabledEQ applies the EQ predicate on the "is_tfa_enabled" field.
func IsTfaEnabledEQ(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldIsTfaEnabled, v))
}

// IsTfaEnabledNEQ applies the NEQ predicate on the "is_tfa_enabled" field.
func IsTfaEnabledNEQ(v bool) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldIsTfaEnabled, v))
}

// IsTfaEnabledIsNil applies the IsNil predicate on the "is_tfa_enabled" field.
func IsTfaEnabledIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldIsTfaEnabled))
}

// IsTfaEnabledNotNil applies the NotNil predicate on the "is_tfa_enabled" field.
func IsTfaEnabledNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldIsTfaEnabled))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberIsNil applies the IsNil predicate on the "phone_number" field.
func PhoneNumberIsNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldIsNull(FieldPhoneNumber))
}

// PhoneNumberNotNil applies the NotNil predicate on the "phone_number" field.
func PhoneNumberNotNil() predicate.UserSetting {
	return predicate.UserSetting(sql.FieldNotNull(FieldPhoneNumber))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.UserSetting {
	return predicate.UserSetting(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserSetting
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		step := newUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserSetting
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDefaultOrg applies the HasEdge predicate on the "default_org" edge.
func HasDefaultOrg() predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DefaultOrgTable, DefaultOrgColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.UserSetting
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDefaultOrgWith applies the HasEdge predicate on the "default_org" edge with a given conditions (other predicates).
func HasDefaultOrgWith(preds ...predicate.Organization) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		step := newDefaultOrgStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.UserSetting
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FilesTable, FilesPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.UserSettingFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.File) predicate.UserSetting {
	return predicate.UserSetting(func(s *sql.Selector) {
		step := newFilesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.UserSettingFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSetting) predicate.UserSetting {
	return predicate.UserSetting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSetting) predicate.UserSetting {
	return predicate.UserSetting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSetting) predicate.UserSetting {
	return predicate.UserSetting(sql.NotPredicates(p))
}
