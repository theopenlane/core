// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobsetting"
	"github.com/theopenlane/core/pkg/models"
)

// ScheduledJobSetting is the model entity for the ScheduledJobSetting schema.
type ScheduledJobSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// ScheduledJobID holds the value of the "scheduled_job_id" field.
	ScheduledJobID string `json:"scheduled_job_id,omitempty"`
	// the configuration to run this job
	Configuration models.JobConfiguration `json:"configuration,omitempty"`
	// the schedule to run this job
	Cadence models.JobCadence `json:"cadence,omitempty"`
	// cron syntax
	Cron *string `json:"cron,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduledJobSettingQuery when eager-loading is set.
	Edges        ScheduledJobSettingEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScheduledJobSettingEdges holds the relations/edges for other nodes in the graph.
type ScheduledJobSettingEdges struct {
	// ScheduledJob holds the value of the scheduled_job edge.
	ScheduledJob *ScheduledJob `json:"scheduled_job,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ScheduledJobOrErr returns the ScheduledJob value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduledJobSettingEdges) ScheduledJobOrErr() (*ScheduledJob, error) {
	if e.ScheduledJob != nil {
		return e.ScheduledJob, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: scheduledjob.Label}
	}
	return nil, &NotLoadedError{edge: "scheduled_job"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScheduledJobSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scheduledjobsetting.FieldTags, scheduledjobsetting.FieldConfiguration, scheduledjobsetting.FieldCadence:
			values[i] = new([]byte)
		case scheduledjobsetting.FieldID, scheduledjobsetting.FieldCreatedBy, scheduledjobsetting.FieldUpdatedBy, scheduledjobsetting.FieldDeletedBy, scheduledjobsetting.FieldScheduledJobID, scheduledjobsetting.FieldCron:
			values[i] = new(sql.NullString)
		case scheduledjobsetting.FieldCreatedAt, scheduledjobsetting.FieldUpdatedAt, scheduledjobsetting.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScheduledJobSetting fields.
func (sjs *ScheduledJobSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scheduledjobsetting.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sjs.ID = value.String
			}
		case scheduledjobsetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sjs.CreatedAt = value.Time
			}
		case scheduledjobsetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sjs.UpdatedAt = value.Time
			}
		case scheduledjobsetting.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sjs.CreatedBy = value.String
			}
		case scheduledjobsetting.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sjs.UpdatedBy = value.String
			}
		case scheduledjobsetting.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sjs.DeletedAt = value.Time
			}
		case scheduledjobsetting.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				sjs.DeletedBy = value.String
			}
		case scheduledjobsetting.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sjs.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case scheduledjobsetting.FieldScheduledJobID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_job_id", values[i])
			} else if value.Valid {
				sjs.ScheduledJobID = value.String
			}
		case scheduledjobsetting.FieldConfiguration:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field configuration", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sjs.Configuration); err != nil {
					return fmt.Errorf("unmarshal field configuration: %w", err)
				}
			}
		case scheduledjobsetting.FieldCadence:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cadence", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sjs.Cadence); err != nil {
					return fmt.Errorf("unmarshal field cadence: %w", err)
				}
			}
		case scheduledjobsetting.FieldCron:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cron", values[i])
			} else if value.Valid {
				sjs.Cron = new(string)
				*sjs.Cron = value.String
			}
		default:
			sjs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScheduledJobSetting.
// This includes values selected through modifiers, order, etc.
func (sjs *ScheduledJobSetting) Value(name string) (ent.Value, error) {
	return sjs.selectValues.Get(name)
}

// QueryScheduledJob queries the "scheduled_job" edge of the ScheduledJobSetting entity.
func (sjs *ScheduledJobSetting) QueryScheduledJob() *ScheduledJobQuery {
	return NewScheduledJobSettingClient(sjs.config).QueryScheduledJob(sjs)
}

// Update returns a builder for updating this ScheduledJobSetting.
// Note that you need to call ScheduledJobSetting.Unwrap() before calling this method if this ScheduledJobSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (sjs *ScheduledJobSetting) Update() *ScheduledJobSettingUpdateOne {
	return NewScheduledJobSettingClient(sjs.config).UpdateOne(sjs)
}

// Unwrap unwraps the ScheduledJobSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sjs *ScheduledJobSetting) Unwrap() *ScheduledJobSetting {
	_tx, ok := sjs.config.driver.(*txDriver)
	if !ok {
		panic("generated: ScheduledJobSetting is not a transactional entity")
	}
	sjs.config.driver = _tx.drv
	return sjs
}

// String implements the fmt.Stringer.
func (sjs *ScheduledJobSetting) String() string {
	var builder strings.Builder
	builder.WriteString("ScheduledJobSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sjs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sjs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sjs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sjs.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sjs.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(sjs.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(sjs.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", sjs.Tags))
	builder.WriteString(", ")
	builder.WriteString("scheduled_job_id=")
	builder.WriteString(sjs.ScheduledJobID)
	builder.WriteString(", ")
	builder.WriteString("configuration=")
	builder.WriteString(fmt.Sprintf("%v", sjs.Configuration))
	builder.WriteString(", ")
	builder.WriteString("cadence=")
	builder.WriteString(fmt.Sprintf("%v", sjs.Cadence))
	builder.WriteString(", ")
	if v := sjs.Cron; v != nil {
		builder.WriteString("cron=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// ScheduledJobSettings is a parsable slice of ScheduledJobSetting.
type ScheduledJobSettings []*ScheduledJobSetting
