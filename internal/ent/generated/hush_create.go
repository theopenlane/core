// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// HushCreate is the builder for creating a Hush entity.
type HushCreate struct {
	config
	mutation *HushMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (hc *HushCreate) SetCreatedAt(t time.Time) *HushCreate {
	hc.mutation.SetCreatedAt(t)
	return hc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (hc *HushCreate) SetNillableCreatedAt(t *time.Time) *HushCreate {
	if t != nil {
		hc.SetCreatedAt(*t)
	}
	return hc
}

// SetUpdatedAt sets the "updated_at" field.
func (hc *HushCreate) SetUpdatedAt(t time.Time) *HushCreate {
	hc.mutation.SetUpdatedAt(t)
	return hc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (hc *HushCreate) SetNillableUpdatedAt(t *time.Time) *HushCreate {
	if t != nil {
		hc.SetUpdatedAt(*t)
	}
	return hc
}

// SetCreatedBy sets the "created_by" field.
func (hc *HushCreate) SetCreatedBy(s string) *HushCreate {
	hc.mutation.SetCreatedBy(s)
	return hc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (hc *HushCreate) SetNillableCreatedBy(s *string) *HushCreate {
	if s != nil {
		hc.SetCreatedBy(*s)
	}
	return hc
}

// SetUpdatedBy sets the "updated_by" field.
func (hc *HushCreate) SetUpdatedBy(s string) *HushCreate {
	hc.mutation.SetUpdatedBy(s)
	return hc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (hc *HushCreate) SetNillableUpdatedBy(s *string) *HushCreate {
	if s != nil {
		hc.SetUpdatedBy(*s)
	}
	return hc
}

// SetDeletedAt sets the "deleted_at" field.
func (hc *HushCreate) SetDeletedAt(t time.Time) *HushCreate {
	hc.mutation.SetDeletedAt(t)
	return hc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (hc *HushCreate) SetNillableDeletedAt(t *time.Time) *HushCreate {
	if t != nil {
		hc.SetDeletedAt(*t)
	}
	return hc
}

// SetDeletedBy sets the "deleted_by" field.
func (hc *HushCreate) SetDeletedBy(s string) *HushCreate {
	hc.mutation.SetDeletedBy(s)
	return hc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (hc *HushCreate) SetNillableDeletedBy(s *string) *HushCreate {
	if s != nil {
		hc.SetDeletedBy(*s)
	}
	return hc
}

// SetOwnerID sets the "owner_id" field.
func (hc *HushCreate) SetOwnerID(s string) *HushCreate {
	hc.mutation.SetOwnerID(s)
	return hc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (hc *HushCreate) SetNillableOwnerID(s *string) *HushCreate {
	if s != nil {
		hc.SetOwnerID(*s)
	}
	return hc
}

// SetName sets the "name" field.
func (hc *HushCreate) SetName(s string) *HushCreate {
	hc.mutation.SetName(s)
	return hc
}

// SetDescription sets the "description" field.
func (hc *HushCreate) SetDescription(s string) *HushCreate {
	hc.mutation.SetDescription(s)
	return hc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (hc *HushCreate) SetNillableDescription(s *string) *HushCreate {
	if s != nil {
		hc.SetDescription(*s)
	}
	return hc
}

// SetKind sets the "kind" field.
func (hc *HushCreate) SetKind(s string) *HushCreate {
	hc.mutation.SetKind(s)
	return hc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (hc *HushCreate) SetNillableKind(s *string) *HushCreate {
	if s != nil {
		hc.SetKind(*s)
	}
	return hc
}

// SetSecretName sets the "secret_name" field.
func (hc *HushCreate) SetSecretName(s string) *HushCreate {
	hc.mutation.SetSecretName(s)
	return hc
}

// SetNillableSecretName sets the "secret_name" field if the given value is not nil.
func (hc *HushCreate) SetNillableSecretName(s *string) *HushCreate {
	if s != nil {
		hc.SetSecretName(*s)
	}
	return hc
}

// SetSecretValue sets the "secret_value" field.
func (hc *HushCreate) SetSecretValue(s string) *HushCreate {
	hc.mutation.SetSecretValue(s)
	return hc
}

// SetNillableSecretValue sets the "secret_value" field if the given value is not nil.
func (hc *HushCreate) SetNillableSecretValue(s *string) *HushCreate {
	if s != nil {
		hc.SetSecretValue(*s)
	}
	return hc
}

// SetID sets the "id" field.
func (hc *HushCreate) SetID(s string) *HushCreate {
	hc.mutation.SetID(s)
	return hc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (hc *HushCreate) SetNillableID(s *string) *HushCreate {
	if s != nil {
		hc.SetID(*s)
	}
	return hc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (hc *HushCreate) SetOwner(o *Organization) *HushCreate {
	return hc.SetOwnerID(o.ID)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (hc *HushCreate) AddIntegrationIDs(ids ...string) *HushCreate {
	hc.mutation.AddIntegrationIDs(ids...)
	return hc
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (hc *HushCreate) AddIntegrations(i ...*Integration) *HushCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return hc.AddIntegrationIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (hc *HushCreate) AddEventIDs(ids ...string) *HushCreate {
	hc.mutation.AddEventIDs(ids...)
	return hc
}

// AddEvents adds the "events" edges to the Event entity.
func (hc *HushCreate) AddEvents(e ...*Event) *HushCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return hc.AddEventIDs(ids...)
}

// Mutation returns the HushMutation object of the builder.
func (hc *HushCreate) Mutation() *HushMutation {
	return hc.mutation
}

// Save creates the Hush in the database.
func (hc *HushCreate) Save(ctx context.Context) (*Hush, error) {
	if err := hc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, hc.sqlSave, hc.mutation, hc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HushCreate) SaveX(ctx context.Context) *Hush {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hc *HushCreate) Exec(ctx context.Context) error {
	_, err := hc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hc *HushCreate) ExecX(ctx context.Context) {
	if err := hc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (hc *HushCreate) defaults() error {
	if _, ok := hc.mutation.CreatedAt(); !ok {
		if hush.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized hush.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := hush.DefaultCreatedAt()
		hc.mutation.SetCreatedAt(v)
	}
	if _, ok := hc.mutation.UpdatedAt(); !ok {
		if hush.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized hush.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := hush.DefaultUpdatedAt()
		hc.mutation.SetUpdatedAt(v)
	}
	if _, ok := hc.mutation.ID(); !ok {
		if hush.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized hush.DefaultID (forgotten import generated/runtime?)")
		}
		v := hush.DefaultID()
		hc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (hc *HushCreate) check() error {
	if v, ok := hc.mutation.OwnerID(); ok {
		if err := hush.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Hush.owner_id": %w`, err)}
		}
	}
	if _, ok := hc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Hush.name"`)}
	}
	if v, ok := hc.mutation.Name(); ok {
		if err := hush.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Hush.name": %w`, err)}
		}
	}
	return nil
}

func (hc *HushCreate) sqlSave(ctx context.Context) (*Hush, error) {
	if err := hc.check(); err != nil {
		return nil, err
	}
	_node, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Hush.ID type: %T", _spec.ID.Value)
		}
	}
	hc.mutation.id = &_node.ID
	hc.mutation.done = true
	return _node, nil
}

func (hc *HushCreate) createSpec() (*Hush, *sqlgraph.CreateSpec) {
	var (
		_node = &Hush{config: hc.config}
		_spec = sqlgraph.NewCreateSpec(hush.Table, sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString))
	)
	_spec.Schema = hc.schemaConfig.Hush
	if id, ok := hc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := hc.mutation.CreatedAt(); ok {
		_spec.SetField(hush.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := hc.mutation.UpdatedAt(); ok {
		_spec.SetField(hush.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := hc.mutation.CreatedBy(); ok {
		_spec.SetField(hush.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := hc.mutation.UpdatedBy(); ok {
		_spec.SetField(hush.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := hc.mutation.DeletedAt(); ok {
		_spec.SetField(hush.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := hc.mutation.DeletedBy(); ok {
		_spec.SetField(hush.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := hc.mutation.Name(); ok {
		_spec.SetField(hush.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := hc.mutation.Description(); ok {
		_spec.SetField(hush.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := hc.mutation.Kind(); ok {
		_spec.SetField(hush.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if value, ok := hc.mutation.SecretName(); ok {
		_spec.SetField(hush.FieldSecretName, field.TypeString, value)
		_node.SecretName = value
	}
	if value, ok := hc.mutation.SecretValue(); ok {
		_spec.SetField(hush.FieldSecretValue, field.TypeString, value)
		_node.SecretValue = value
	}
	if nodes := hc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   hush.OwnerTable,
			Columns: []string{hush.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = hc.schemaConfig.Hush
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   hush.IntegrationsTable,
			Columns: hush.IntegrationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = hc.schemaConfig.IntegrationSecrets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   hush.EventsTable,
			Columns: hush.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = hc.schemaConfig.HushEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HushCreateBulk is the builder for creating many Hush entities in bulk.
type HushCreateBulk struct {
	config
	err      error
	builders []*HushCreate
}

// Save creates the Hush entities in the database.
func (hcb *HushCreateBulk) Save(ctx context.Context) ([]*Hush, error) {
	if hcb.err != nil {
		return nil, hcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hcb.builders))
	nodes := make([]*Hush, len(hcb.builders))
	mutators := make([]Mutator, len(hcb.builders))
	for i := range hcb.builders {
		func(i int, root context.Context) {
			builder := hcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HushMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hcb *HushCreateBulk) SaveX(ctx context.Context) []*Hush {
	v, err := hcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hcb *HushCreateBulk) Exec(ctx context.Context) error {
	_, err := hcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hcb *HushCreateBulk) ExecX(ctx context.Context) {
	if err := hcb.Exec(ctx); err != nil {
		panic(err)
	}
}
