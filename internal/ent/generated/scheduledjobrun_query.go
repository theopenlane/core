// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/controlscheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobrun"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ScheduledJobRunQuery is the builder for querying ScheduledJobRun entities.
type ScheduledJobRunQuery struct {
	config
	ctx              *QueryContext
	order            []scheduledjobrun.OrderOption
	inters           []Interceptor
	predicates       []predicate.ScheduledJobRun
	withOwner        *OrganizationQuery
	withScheduledJob *ControlScheduledJobQuery
	loadTotal        []func(context.Context, []*ScheduledJobRun) error
	modifiers        []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ScheduledJobRunQuery builder.
func (sjrq *ScheduledJobRunQuery) Where(ps ...predicate.ScheduledJobRun) *ScheduledJobRunQuery {
	sjrq.predicates = append(sjrq.predicates, ps...)
	return sjrq
}

// Limit the number of records to be returned by this query.
func (sjrq *ScheduledJobRunQuery) Limit(limit int) *ScheduledJobRunQuery {
	sjrq.ctx.Limit = &limit
	return sjrq
}

// Offset to start from.
func (sjrq *ScheduledJobRunQuery) Offset(offset int) *ScheduledJobRunQuery {
	sjrq.ctx.Offset = &offset
	return sjrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sjrq *ScheduledJobRunQuery) Unique(unique bool) *ScheduledJobRunQuery {
	sjrq.ctx.Unique = &unique
	return sjrq
}

// Order specifies how the records should be ordered.
func (sjrq *ScheduledJobRunQuery) Order(o ...scheduledjobrun.OrderOption) *ScheduledJobRunQuery {
	sjrq.order = append(sjrq.order, o...)
	return sjrq
}

// QueryOwner chains the current query on the "owner" edge.
func (sjrq *ScheduledJobRunQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: sjrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sjrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sjrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scheduledjobrun.Table, scheduledjobrun.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scheduledjobrun.OwnerTable, scheduledjobrun.OwnerColumn),
		)
		schemaConfig := sjrq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.ScheduledJobRun
		fromU = sqlgraph.SetNeighbors(sjrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduledJob chains the current query on the "scheduled_job" edge.
func (sjrq *ScheduledJobRunQuery) QueryScheduledJob() *ControlScheduledJobQuery {
	query := (&ControlScheduledJobClient{config: sjrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sjrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sjrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(scheduledjobrun.Table, scheduledjobrun.FieldID, selector),
			sqlgraph.To(controlscheduledjob.Table, controlscheduledjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, scheduledjobrun.ScheduledJobTable, scheduledjobrun.ScheduledJobColumn),
		)
		schemaConfig := sjrq.schemaConfig
		step.To.Schema = schemaConfig.ControlScheduledJob
		step.Edge.Schema = schemaConfig.ScheduledJobRun
		fromU = sqlgraph.SetNeighbors(sjrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ScheduledJobRun entity from the query.
// Returns a *NotFoundError when no ScheduledJobRun was found.
func (sjrq *ScheduledJobRunQuery) First(ctx context.Context) (*ScheduledJobRun, error) {
	nodes, err := sjrq.Limit(1).All(setContextOp(ctx, sjrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{scheduledjobrun.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sjrq *ScheduledJobRunQuery) FirstX(ctx context.Context) *ScheduledJobRun {
	node, err := sjrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ScheduledJobRun ID from the query.
// Returns a *NotFoundError when no ScheduledJobRun ID was found.
func (sjrq *ScheduledJobRunQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sjrq.Limit(1).IDs(setContextOp(ctx, sjrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{scheduledjobrun.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sjrq *ScheduledJobRunQuery) FirstIDX(ctx context.Context) string {
	id, err := sjrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ScheduledJobRun entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ScheduledJobRun entity is found.
// Returns a *NotFoundError when no ScheduledJobRun entities are found.
func (sjrq *ScheduledJobRunQuery) Only(ctx context.Context) (*ScheduledJobRun, error) {
	nodes, err := sjrq.Limit(2).All(setContextOp(ctx, sjrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{scheduledjobrun.Label}
	default:
		return nil, &NotSingularError{scheduledjobrun.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sjrq *ScheduledJobRunQuery) OnlyX(ctx context.Context) *ScheduledJobRun {
	node, err := sjrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ScheduledJobRun ID in the query.
// Returns a *NotSingularError when more than one ScheduledJobRun ID is found.
// Returns a *NotFoundError when no entities are found.
func (sjrq *ScheduledJobRunQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sjrq.Limit(2).IDs(setContextOp(ctx, sjrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{scheduledjobrun.Label}
	default:
		err = &NotSingularError{scheduledjobrun.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sjrq *ScheduledJobRunQuery) OnlyIDX(ctx context.Context) string {
	id, err := sjrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ScheduledJobRuns.
func (sjrq *ScheduledJobRunQuery) All(ctx context.Context) ([]*ScheduledJobRun, error) {
	ctx = setContextOp(ctx, sjrq.ctx, ent.OpQueryAll)
	if err := sjrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ScheduledJobRun, *ScheduledJobRunQuery]()
	return withInterceptors[[]*ScheduledJobRun](ctx, sjrq, qr, sjrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sjrq *ScheduledJobRunQuery) AllX(ctx context.Context) []*ScheduledJobRun {
	nodes, err := sjrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ScheduledJobRun IDs.
func (sjrq *ScheduledJobRunQuery) IDs(ctx context.Context) (ids []string, err error) {
	if sjrq.ctx.Unique == nil && sjrq.path != nil {
		sjrq.Unique(true)
	}
	ctx = setContextOp(ctx, sjrq.ctx, ent.OpQueryIDs)
	if err = sjrq.Select(scheduledjobrun.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sjrq *ScheduledJobRunQuery) IDsX(ctx context.Context) []string {
	ids, err := sjrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sjrq *ScheduledJobRunQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sjrq.ctx, ent.OpQueryCount)
	if err := sjrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sjrq, querierCount[*ScheduledJobRunQuery](), sjrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sjrq *ScheduledJobRunQuery) CountX(ctx context.Context) int {
	count, err := sjrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sjrq *ScheduledJobRunQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sjrq.ctx, ent.OpQueryExist)
	switch _, err := sjrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sjrq *ScheduledJobRunQuery) ExistX(ctx context.Context) bool {
	exist, err := sjrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ScheduledJobRunQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sjrq *ScheduledJobRunQuery) Clone() *ScheduledJobRunQuery {
	if sjrq == nil {
		return nil
	}
	return &ScheduledJobRunQuery{
		config:           sjrq.config,
		ctx:              sjrq.ctx.Clone(),
		order:            append([]scheduledjobrun.OrderOption{}, sjrq.order...),
		inters:           append([]Interceptor{}, sjrq.inters...),
		predicates:       append([]predicate.ScheduledJobRun{}, sjrq.predicates...),
		withOwner:        sjrq.withOwner.Clone(),
		withScheduledJob: sjrq.withScheduledJob.Clone(),
		// clone intermediate query.
		sql:       sjrq.sql.Clone(),
		path:      sjrq.path,
		modifiers: append([]func(*sql.Selector){}, sjrq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (sjrq *ScheduledJobRunQuery) WithOwner(opts ...func(*OrganizationQuery)) *ScheduledJobRunQuery {
	query := (&OrganizationClient{config: sjrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sjrq.withOwner = query
	return sjrq
}

// WithScheduledJob tells the query-builder to eager-load the nodes that are connected to
// the "scheduled_job" edge. The optional arguments are used to configure the query builder of the edge.
func (sjrq *ScheduledJobRunQuery) WithScheduledJob(opts ...func(*ControlScheduledJobQuery)) *ScheduledJobRunQuery {
	query := (&ControlScheduledJobClient{config: sjrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sjrq.withScheduledJob = query
	return sjrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ScheduledJobRun.Query().
//		GroupBy(scheduledjobrun.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (sjrq *ScheduledJobRunQuery) GroupBy(field string, fields ...string) *ScheduledJobRunGroupBy {
	sjrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ScheduledJobRunGroupBy{build: sjrq}
	grbuild.flds = &sjrq.ctx.Fields
	grbuild.label = scheduledjobrun.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ScheduledJobRun.Query().
//		Select(scheduledjobrun.FieldCreatedAt).
//		Scan(ctx, &v)
func (sjrq *ScheduledJobRunQuery) Select(fields ...string) *ScheduledJobRunSelect {
	sjrq.ctx.Fields = append(sjrq.ctx.Fields, fields...)
	sbuild := &ScheduledJobRunSelect{ScheduledJobRunQuery: sjrq}
	sbuild.label = scheduledjobrun.Label
	sbuild.flds, sbuild.scan = &sjrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ScheduledJobRunSelect configured with the given aggregations.
func (sjrq *ScheduledJobRunQuery) Aggregate(fns ...AggregateFunc) *ScheduledJobRunSelect {
	return sjrq.Select().Aggregate(fns...)
}

func (sjrq *ScheduledJobRunQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sjrq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sjrq); err != nil {
				return err
			}
		}
	}
	for _, f := range sjrq.ctx.Fields {
		if !scheduledjobrun.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if sjrq.path != nil {
		prev, err := sjrq.path(ctx)
		if err != nil {
			return err
		}
		sjrq.sql = prev
	}
	if scheduledjobrun.Policy == nil {
		return errors.New("generated: uninitialized scheduledjobrun.Policy (forgotten import generated/runtime?)")
	}
	if err := scheduledjobrun.Policy.EvalQuery(ctx, sjrq); err != nil {
		return err
	}
	return nil
}

func (sjrq *ScheduledJobRunQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ScheduledJobRun, error) {
	var (
		nodes       = []*ScheduledJobRun{}
		_spec       = sjrq.querySpec()
		loadedTypes = [2]bool{
			sjrq.withOwner != nil,
			sjrq.withScheduledJob != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ScheduledJobRun).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ScheduledJobRun{config: sjrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = sjrq.schemaConfig.ScheduledJobRun
	ctx = internal.NewSchemaConfigContext(ctx, sjrq.schemaConfig)
	if len(sjrq.modifiers) > 0 {
		_spec.Modifiers = sjrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sjrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sjrq.withOwner; query != nil {
		if err := sjrq.loadOwner(ctx, query, nodes, nil,
			func(n *ScheduledJobRun, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := sjrq.withScheduledJob; query != nil {
		if err := sjrq.loadScheduledJob(ctx, query, nodes, nil,
			func(n *ScheduledJobRun, e *ControlScheduledJob) { n.Edges.ScheduledJob = e }); err != nil {
			return nil, err
		}
	}
	for i := range sjrq.loadTotal {
		if err := sjrq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sjrq *ScheduledJobRunQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*ScheduledJobRun, init func(*ScheduledJobRun), assign func(*ScheduledJobRun, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ScheduledJobRun)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sjrq *ScheduledJobRunQuery) loadScheduledJob(ctx context.Context, query *ControlScheduledJobQuery, nodes []*ScheduledJobRun, init func(*ScheduledJobRun), assign func(*ScheduledJobRun, *ControlScheduledJob)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*ScheduledJobRun)
	for i := range nodes {
		fk := nodes[i].ScheduledJobID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(controlscheduledjob.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "scheduled_job_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (sjrq *ScheduledJobRunQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sjrq.querySpec()
	_spec.Node.Schema = sjrq.schemaConfig.ScheduledJobRun
	ctx = internal.NewSchemaConfigContext(ctx, sjrq.schemaConfig)
	if len(sjrq.modifiers) > 0 {
		_spec.Modifiers = sjrq.modifiers
	}
	_spec.Node.Columns = sjrq.ctx.Fields
	if len(sjrq.ctx.Fields) > 0 {
		_spec.Unique = sjrq.ctx.Unique != nil && *sjrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sjrq.driver, _spec)
}

func (sjrq *ScheduledJobRunQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(scheduledjobrun.Table, scheduledjobrun.Columns, sqlgraph.NewFieldSpec(scheduledjobrun.FieldID, field.TypeString))
	_spec.From = sjrq.sql
	if unique := sjrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sjrq.path != nil {
		_spec.Unique = true
	}
	if fields := sjrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scheduledjobrun.FieldID)
		for i := range fields {
			if fields[i] != scheduledjobrun.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sjrq.withOwner != nil {
			_spec.Node.AddColumnOnce(scheduledjobrun.FieldOwnerID)
		}
		if sjrq.withScheduledJob != nil {
			_spec.Node.AddColumnOnce(scheduledjobrun.FieldScheduledJobID)
		}
	}
	if ps := sjrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sjrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sjrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sjrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sjrq *ScheduledJobRunQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sjrq.driver.Dialect())
	t1 := builder.Table(scheduledjobrun.Table)
	columns := sjrq.ctx.Fields
	if len(columns) == 0 {
		columns = scheduledjobrun.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sjrq.sql != nil {
		selector = sjrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sjrq.ctx.Unique != nil && *sjrq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(sjrq.schemaConfig.ScheduledJobRun)
	ctx = internal.NewSchemaConfigContext(ctx, sjrq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range sjrq.modifiers {
		m(selector)
	}
	for _, p := range sjrq.predicates {
		p(selector)
	}
	for _, p := range sjrq.order {
		p(selector)
	}
	if offset := sjrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sjrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sjrq *ScheduledJobRunQuery) Modify(modifiers ...func(s *sql.Selector)) *ScheduledJobRunSelect {
	sjrq.modifiers = append(sjrq.modifiers, modifiers...)
	return sjrq.Select()
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (sjrq *ScheduledJobRunQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sjrq.ctx, ent.OpQueryIDs)
	if err := sjrq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return sjrq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, sjrq, qr, sjrq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// ScheduledJobRunGroupBy is the group-by builder for ScheduledJobRun entities.
type ScheduledJobRunGroupBy struct {
	selector
	build *ScheduledJobRunQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sjrgb *ScheduledJobRunGroupBy) Aggregate(fns ...AggregateFunc) *ScheduledJobRunGroupBy {
	sjrgb.fns = append(sjrgb.fns, fns...)
	return sjrgb
}

// Scan applies the selector query and scans the result into the given value.
func (sjrgb *ScheduledJobRunGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sjrgb.build.ctx, ent.OpQueryGroupBy)
	if err := sjrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScheduledJobRunQuery, *ScheduledJobRunGroupBy](ctx, sjrgb.build, sjrgb, sjrgb.build.inters, v)
}

func (sjrgb *ScheduledJobRunGroupBy) sqlScan(ctx context.Context, root *ScheduledJobRunQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sjrgb.fns))
	for _, fn := range sjrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sjrgb.flds)+len(sjrgb.fns))
		for _, f := range *sjrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sjrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sjrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ScheduledJobRunSelect is the builder for selecting fields of ScheduledJobRun entities.
type ScheduledJobRunSelect struct {
	*ScheduledJobRunQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sjrs *ScheduledJobRunSelect) Aggregate(fns ...AggregateFunc) *ScheduledJobRunSelect {
	sjrs.fns = append(sjrs.fns, fns...)
	return sjrs
}

// Scan applies the selector query and scans the result into the given value.
func (sjrs *ScheduledJobRunSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sjrs.ctx, ent.OpQuerySelect)
	if err := sjrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ScheduledJobRunQuery, *ScheduledJobRunSelect](ctx, sjrs.ScheduledJobRunQuery, sjrs, sjrs.inters, v)
}

func (sjrs *ScheduledJobRunSelect) sqlScan(ctx context.Context, root *ScheduledJobRunQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sjrs.fns))
	for _, fn := range sjrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sjrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sjrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sjrs *ScheduledJobRunSelect) Modify(modifiers ...func(s *sql.Selector)) *ScheduledJobRunSelect {
	sjrs.modifiers = append(sjrs.modifiers, modifiers...)
	return sjrs
}
