// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/documentrevisionhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// DocumentRevisionHistoryCreate is the builder for creating a DocumentRevisionHistory entity.
type DocumentRevisionHistoryCreate struct {
	config
	mutation *DocumentRevisionHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (drhc *DocumentRevisionHistoryCreate) SetHistoryTime(t time.Time) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetHistoryTime(t)
	return drhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableHistoryTime(t *time.Time) *DocumentRevisionHistoryCreate {
	if t != nil {
		drhc.SetHistoryTime(*t)
	}
	return drhc
}

// SetRef sets the "ref" field.
func (drhc *DocumentRevisionHistoryCreate) SetRef(s string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetRef(s)
	return drhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableRef(s *string) *DocumentRevisionHistoryCreate {
	if s != nil {
		drhc.SetRef(*s)
	}
	return drhc
}

// SetOperation sets the "operation" field.
func (drhc *DocumentRevisionHistoryCreate) SetOperation(ht history.OpType) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetOperation(ht)
	return drhc
}

// SetCreatedAt sets the "created_at" field.
func (drhc *DocumentRevisionHistoryCreate) SetCreatedAt(t time.Time) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetCreatedAt(t)
	return drhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableCreatedAt(t *time.Time) *DocumentRevisionHistoryCreate {
	if t != nil {
		drhc.SetCreatedAt(*t)
	}
	return drhc
}

// SetUpdatedAt sets the "updated_at" field.
func (drhc *DocumentRevisionHistoryCreate) SetUpdatedAt(t time.Time) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetUpdatedAt(t)
	return drhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableUpdatedAt(t *time.Time) *DocumentRevisionHistoryCreate {
	if t != nil {
		drhc.SetUpdatedAt(*t)
	}
	return drhc
}

// SetCreatedBy sets the "created_by" field.
func (drhc *DocumentRevisionHistoryCreate) SetCreatedBy(s string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetCreatedBy(s)
	return drhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableCreatedBy(s *string) *DocumentRevisionHistoryCreate {
	if s != nil {
		drhc.SetCreatedBy(*s)
	}
	return drhc
}

// SetUpdatedBy sets the "updated_by" field.
func (drhc *DocumentRevisionHistoryCreate) SetUpdatedBy(s string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetUpdatedBy(s)
	return drhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableUpdatedBy(s *string) *DocumentRevisionHistoryCreate {
	if s != nil {
		drhc.SetUpdatedBy(*s)
	}
	return drhc
}

// SetDeletedAt sets the "deleted_at" field.
func (drhc *DocumentRevisionHistoryCreate) SetDeletedAt(t time.Time) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetDeletedAt(t)
	return drhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableDeletedAt(t *time.Time) *DocumentRevisionHistoryCreate {
	if t != nil {
		drhc.SetDeletedAt(*t)
	}
	return drhc
}

// SetDeletedBy sets the "deleted_by" field.
func (drhc *DocumentRevisionHistoryCreate) SetDeletedBy(s string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetDeletedBy(s)
	return drhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableDeletedBy(s *string) *DocumentRevisionHistoryCreate {
	if s != nil {
		drhc.SetDeletedBy(*s)
	}
	return drhc
}

// SetTags sets the "tags" field.
func (drhc *DocumentRevisionHistoryCreate) SetTags(s []string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetTags(s)
	return drhc
}

// SetRevision sets the "revision" field.
func (drhc *DocumentRevisionHistoryCreate) SetRevision(s string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetRevision(s)
	return drhc
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableRevision(s *string) *DocumentRevisionHistoryCreate {
	if s != nil {
		drhc.SetRevision(*s)
	}
	return drhc
}

// SetDetails sets the "details" field.
func (drhc *DocumentRevisionHistoryCreate) SetDetails(s string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetDetails(s)
	return drhc
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableDetails(s *string) *DocumentRevisionHistoryCreate {
	if s != nil {
		drhc.SetDetails(*s)
	}
	return drhc
}

// SetStatus sets the "status" field.
func (drhc *DocumentRevisionHistoryCreate) SetStatus(es enums.ApprovalStatus) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetStatus(es)
	return drhc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableStatus(es *enums.ApprovalStatus) *DocumentRevisionHistoryCreate {
	if es != nil {
		drhc.SetStatus(*es)
	}
	return drhc
}

// SetApprovalDate sets the "approval_date" field.
func (drhc *DocumentRevisionHistoryCreate) SetApprovalDate(t time.Time) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetApprovalDate(t)
	return drhc
}

// SetNillableApprovalDate sets the "approval_date" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableApprovalDate(t *time.Time) *DocumentRevisionHistoryCreate {
	if t != nil {
		drhc.SetApprovalDate(*t)
	}
	return drhc
}

// SetSubmittedByID sets the "submitted_by_id" field.
func (drhc *DocumentRevisionHistoryCreate) SetSubmittedByID(s string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetSubmittedByID(s)
	return drhc
}

// SetNillableSubmittedByID sets the "submitted_by_id" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableSubmittedByID(s *string) *DocumentRevisionHistoryCreate {
	if s != nil {
		drhc.SetSubmittedByID(*s)
	}
	return drhc
}

// SetApprovedByID sets the "approved_by_id" field.
func (drhc *DocumentRevisionHistoryCreate) SetApprovedByID(s string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetApprovedByID(s)
	return drhc
}

// SetNillableApprovedByID sets the "approved_by_id" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableApprovedByID(s *string) *DocumentRevisionHistoryCreate {
	if s != nil {
		drhc.SetApprovedByID(*s)
	}
	return drhc
}

// SetInternalPolicyID sets the "internal_policy_id" field.
func (drhc *DocumentRevisionHistoryCreate) SetInternalPolicyID(s string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetInternalPolicyID(s)
	return drhc
}

// SetNillableInternalPolicyID sets the "internal_policy_id" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableInternalPolicyID(s *string) *DocumentRevisionHistoryCreate {
	if s != nil {
		drhc.SetInternalPolicyID(*s)
	}
	return drhc
}

// SetProcedureID sets the "procedure_id" field.
func (drhc *DocumentRevisionHistoryCreate) SetProcedureID(s string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetProcedureID(s)
	return drhc
}

// SetNillableProcedureID sets the "procedure_id" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableProcedureID(s *string) *DocumentRevisionHistoryCreate {
	if s != nil {
		drhc.SetProcedureID(*s)
	}
	return drhc
}

// SetActionPlanID sets the "action_plan_id" field.
func (drhc *DocumentRevisionHistoryCreate) SetActionPlanID(s string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetActionPlanID(s)
	return drhc
}

// SetNillableActionPlanID sets the "action_plan_id" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableActionPlanID(s *string) *DocumentRevisionHistoryCreate {
	if s != nil {
		drhc.SetActionPlanID(*s)
	}
	return drhc
}

// SetID sets the "id" field.
func (drhc *DocumentRevisionHistoryCreate) SetID(s string) *DocumentRevisionHistoryCreate {
	drhc.mutation.SetID(s)
	return drhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (drhc *DocumentRevisionHistoryCreate) SetNillableID(s *string) *DocumentRevisionHistoryCreate {
	if s != nil {
		drhc.SetID(*s)
	}
	return drhc
}

// Mutation returns the DocumentRevisionHistoryMutation object of the builder.
func (drhc *DocumentRevisionHistoryCreate) Mutation() *DocumentRevisionHistoryMutation {
	return drhc.mutation
}

// Save creates the DocumentRevisionHistory in the database.
func (drhc *DocumentRevisionHistoryCreate) Save(ctx context.Context) (*DocumentRevisionHistory, error) {
	drhc.defaults()
	return withHooks(ctx, drhc.sqlSave, drhc.mutation, drhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drhc *DocumentRevisionHistoryCreate) SaveX(ctx context.Context) *DocumentRevisionHistory {
	v, err := drhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drhc *DocumentRevisionHistoryCreate) Exec(ctx context.Context) error {
	_, err := drhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drhc *DocumentRevisionHistoryCreate) ExecX(ctx context.Context) {
	if err := drhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drhc *DocumentRevisionHistoryCreate) defaults() {
	if _, ok := drhc.mutation.HistoryTime(); !ok {
		v := documentrevisionhistory.DefaultHistoryTime()
		drhc.mutation.SetHistoryTime(v)
	}
	if _, ok := drhc.mutation.CreatedAt(); !ok {
		v := documentrevisionhistory.DefaultCreatedAt()
		drhc.mutation.SetCreatedAt(v)
	}
	if _, ok := drhc.mutation.UpdatedAt(); !ok {
		v := documentrevisionhistory.DefaultUpdatedAt()
		drhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := drhc.mutation.Tags(); !ok {
		v := documentrevisionhistory.DefaultTags
		drhc.mutation.SetTags(v)
	}
	if _, ok := drhc.mutation.Revision(); !ok {
		v := documentrevisionhistory.DefaultRevision
		drhc.mutation.SetRevision(v)
	}
	if _, ok := drhc.mutation.Status(); !ok {
		v := documentrevisionhistory.DefaultStatus
		drhc.mutation.SetStatus(v)
	}
	if _, ok := drhc.mutation.ID(); !ok {
		v := documentrevisionhistory.DefaultID()
		drhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drhc *DocumentRevisionHistoryCreate) check() error {
	if _, ok := drhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "DocumentRevisionHistory.history_time"`)}
	}
	if _, ok := drhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "DocumentRevisionHistory.operation"`)}
	}
	if v, ok := drhc.mutation.Operation(); ok {
		if err := documentrevisionhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "DocumentRevisionHistory.operation": %w`, err)}
		}
	}
	if v, ok := drhc.mutation.Status(); ok {
		if err := documentrevisionhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "DocumentRevisionHistory.status": %w`, err)}
		}
	}
	return nil
}

func (drhc *DocumentRevisionHistoryCreate) sqlSave(ctx context.Context) (*DocumentRevisionHistory, error) {
	if err := drhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected DocumentRevisionHistory.ID type: %T", _spec.ID.Value)
		}
	}
	drhc.mutation.id = &_node.ID
	drhc.mutation.done = true
	return _node, nil
}

func (drhc *DocumentRevisionHistoryCreate) createSpec() (*DocumentRevisionHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &DocumentRevisionHistory{config: drhc.config}
		_spec = sqlgraph.NewCreateSpec(documentrevisionhistory.Table, sqlgraph.NewFieldSpec(documentrevisionhistory.FieldID, field.TypeString))
	)
	_spec.Schema = drhc.schemaConfig.DocumentRevisionHistory
	if id, ok := drhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := drhc.mutation.HistoryTime(); ok {
		_spec.SetField(documentrevisionhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := drhc.mutation.Ref(); ok {
		_spec.SetField(documentrevisionhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := drhc.mutation.Operation(); ok {
		_spec.SetField(documentrevisionhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := drhc.mutation.CreatedAt(); ok {
		_spec.SetField(documentrevisionhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := drhc.mutation.UpdatedAt(); ok {
		_spec.SetField(documentrevisionhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := drhc.mutation.CreatedBy(); ok {
		_spec.SetField(documentrevisionhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := drhc.mutation.UpdatedBy(); ok {
		_spec.SetField(documentrevisionhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := drhc.mutation.DeletedAt(); ok {
		_spec.SetField(documentrevisionhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := drhc.mutation.DeletedBy(); ok {
		_spec.SetField(documentrevisionhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := drhc.mutation.Tags(); ok {
		_spec.SetField(documentrevisionhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := drhc.mutation.Revision(); ok {
		_spec.SetField(documentrevisionhistory.FieldRevision, field.TypeString, value)
		_node.Revision = value
	}
	if value, ok := drhc.mutation.Details(); ok {
		_spec.SetField(documentrevisionhistory.FieldDetails, field.TypeString, value)
		_node.Details = value
	}
	if value, ok := drhc.mutation.Status(); ok {
		_spec.SetField(documentrevisionhistory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := drhc.mutation.ApprovalDate(); ok {
		_spec.SetField(documentrevisionhistory.FieldApprovalDate, field.TypeTime, value)
		_node.ApprovalDate = &value
	}
	if value, ok := drhc.mutation.SubmittedByID(); ok {
		_spec.SetField(documentrevisionhistory.FieldSubmittedByID, field.TypeString, value)
		_node.SubmittedByID = value
	}
	if value, ok := drhc.mutation.ApprovedByID(); ok {
		_spec.SetField(documentrevisionhistory.FieldApprovedByID, field.TypeString, value)
		_node.ApprovedByID = value
	}
	if value, ok := drhc.mutation.InternalPolicyID(); ok {
		_spec.SetField(documentrevisionhistory.FieldInternalPolicyID, field.TypeString, value)
		_node.InternalPolicyID = value
	}
	if value, ok := drhc.mutation.ProcedureID(); ok {
		_spec.SetField(documentrevisionhistory.FieldProcedureID, field.TypeString, value)
		_node.ProcedureID = value
	}
	if value, ok := drhc.mutation.ActionPlanID(); ok {
		_spec.SetField(documentrevisionhistory.FieldActionPlanID, field.TypeString, value)
		_node.ActionPlanID = value
	}
	return _node, _spec
}

// DocumentRevisionHistoryCreateBulk is the builder for creating many DocumentRevisionHistory entities in bulk.
type DocumentRevisionHistoryCreateBulk struct {
	config
	err      error
	builders []*DocumentRevisionHistoryCreate
}

// Save creates the DocumentRevisionHistory entities in the database.
func (drhcb *DocumentRevisionHistoryCreateBulk) Save(ctx context.Context) ([]*DocumentRevisionHistory, error) {
	if drhcb.err != nil {
		return nil, drhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(drhcb.builders))
	nodes := make([]*DocumentRevisionHistory, len(drhcb.builders))
	mutators := make([]Mutator, len(drhcb.builders))
	for i := range drhcb.builders {
		func(i int, root context.Context) {
			builder := drhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentRevisionHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drhcb *DocumentRevisionHistoryCreateBulk) SaveX(ctx context.Context) []*DocumentRevisionHistory {
	v, err := drhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drhcb *DocumentRevisionHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := drhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drhcb *DocumentRevisionHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := drhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
