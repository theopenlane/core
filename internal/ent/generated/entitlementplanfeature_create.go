// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// EntitlementPlanFeatureCreate is the builder for creating a EntitlementPlanFeature entity.
type EntitlementPlanFeatureCreate struct {
	config
	mutation *EntitlementPlanFeatureMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (epfc *EntitlementPlanFeatureCreate) SetCreatedAt(t time.Time) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetCreatedAt(t)
	return epfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (epfc *EntitlementPlanFeatureCreate) SetNillableCreatedAt(t *time.Time) *EntitlementPlanFeatureCreate {
	if t != nil {
		epfc.SetCreatedAt(*t)
	}
	return epfc
}

// SetUpdatedAt sets the "updated_at" field.
func (epfc *EntitlementPlanFeatureCreate) SetUpdatedAt(t time.Time) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetUpdatedAt(t)
	return epfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (epfc *EntitlementPlanFeatureCreate) SetNillableUpdatedAt(t *time.Time) *EntitlementPlanFeatureCreate {
	if t != nil {
		epfc.SetUpdatedAt(*t)
	}
	return epfc
}

// SetCreatedBy sets the "created_by" field.
func (epfc *EntitlementPlanFeatureCreate) SetCreatedBy(s string) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetCreatedBy(s)
	return epfc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (epfc *EntitlementPlanFeatureCreate) SetNillableCreatedBy(s *string) *EntitlementPlanFeatureCreate {
	if s != nil {
		epfc.SetCreatedBy(*s)
	}
	return epfc
}

// SetUpdatedBy sets the "updated_by" field.
func (epfc *EntitlementPlanFeatureCreate) SetUpdatedBy(s string) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetUpdatedBy(s)
	return epfc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (epfc *EntitlementPlanFeatureCreate) SetNillableUpdatedBy(s *string) *EntitlementPlanFeatureCreate {
	if s != nil {
		epfc.SetUpdatedBy(*s)
	}
	return epfc
}

// SetMappingID sets the "mapping_id" field.
func (epfc *EntitlementPlanFeatureCreate) SetMappingID(s string) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetMappingID(s)
	return epfc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (epfc *EntitlementPlanFeatureCreate) SetNillableMappingID(s *string) *EntitlementPlanFeatureCreate {
	if s != nil {
		epfc.SetMappingID(*s)
	}
	return epfc
}

// SetDeletedAt sets the "deleted_at" field.
func (epfc *EntitlementPlanFeatureCreate) SetDeletedAt(t time.Time) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetDeletedAt(t)
	return epfc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epfc *EntitlementPlanFeatureCreate) SetNillableDeletedAt(t *time.Time) *EntitlementPlanFeatureCreate {
	if t != nil {
		epfc.SetDeletedAt(*t)
	}
	return epfc
}

// SetDeletedBy sets the "deleted_by" field.
func (epfc *EntitlementPlanFeatureCreate) SetDeletedBy(s string) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetDeletedBy(s)
	return epfc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (epfc *EntitlementPlanFeatureCreate) SetNillableDeletedBy(s *string) *EntitlementPlanFeatureCreate {
	if s != nil {
		epfc.SetDeletedBy(*s)
	}
	return epfc
}

// SetTags sets the "tags" field.
func (epfc *EntitlementPlanFeatureCreate) SetTags(s []string) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetTags(s)
	return epfc
}

// SetOwnerID sets the "owner_id" field.
func (epfc *EntitlementPlanFeatureCreate) SetOwnerID(s string) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetOwnerID(s)
	return epfc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (epfc *EntitlementPlanFeatureCreate) SetNillableOwnerID(s *string) *EntitlementPlanFeatureCreate {
	if s != nil {
		epfc.SetOwnerID(*s)
	}
	return epfc
}

// SetMetadata sets the "metadata" field.
func (epfc *EntitlementPlanFeatureCreate) SetMetadata(m map[string]interface{}) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetMetadata(m)
	return epfc
}

// SetPlanID sets the "plan_id" field.
func (epfc *EntitlementPlanFeatureCreate) SetPlanID(s string) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetPlanID(s)
	return epfc
}

// SetStripeProductID sets the "stripe_product_id" field.
func (epfc *EntitlementPlanFeatureCreate) SetStripeProductID(s string) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetStripeProductID(s)
	return epfc
}

// SetNillableStripeProductID sets the "stripe_product_id" field if the given value is not nil.
func (epfc *EntitlementPlanFeatureCreate) SetNillableStripeProductID(s *string) *EntitlementPlanFeatureCreate {
	if s != nil {
		epfc.SetStripeProductID(*s)
	}
	return epfc
}

// SetFeatureID sets the "feature_id" field.
func (epfc *EntitlementPlanFeatureCreate) SetFeatureID(s string) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetFeatureID(s)
	return epfc
}

// SetStripeFeatureID sets the "stripe_feature_id" field.
func (epfc *EntitlementPlanFeatureCreate) SetStripeFeatureID(s string) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetStripeFeatureID(s)
	return epfc
}

// SetNillableStripeFeatureID sets the "stripe_feature_id" field if the given value is not nil.
func (epfc *EntitlementPlanFeatureCreate) SetNillableStripeFeatureID(s *string) *EntitlementPlanFeatureCreate {
	if s != nil {
		epfc.SetStripeFeatureID(*s)
	}
	return epfc
}

// SetID sets the "id" field.
func (epfc *EntitlementPlanFeatureCreate) SetID(s string) *EntitlementPlanFeatureCreate {
	epfc.mutation.SetID(s)
	return epfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (epfc *EntitlementPlanFeatureCreate) SetNillableID(s *string) *EntitlementPlanFeatureCreate {
	if s != nil {
		epfc.SetID(*s)
	}
	return epfc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (epfc *EntitlementPlanFeatureCreate) SetOwner(o *Organization) *EntitlementPlanFeatureCreate {
	return epfc.SetOwnerID(o.ID)
}

// SetPlan sets the "plan" edge to the EntitlementPlan entity.
func (epfc *EntitlementPlanFeatureCreate) SetPlan(e *EntitlementPlan) *EntitlementPlanFeatureCreate {
	return epfc.SetPlanID(e.ID)
}

// SetFeature sets the "feature" edge to the Feature entity.
func (epfc *EntitlementPlanFeatureCreate) SetFeature(f *Feature) *EntitlementPlanFeatureCreate {
	return epfc.SetFeatureID(f.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (epfc *EntitlementPlanFeatureCreate) AddEventIDs(ids ...string) *EntitlementPlanFeatureCreate {
	epfc.mutation.AddEventIDs(ids...)
	return epfc
}

// AddEvents adds the "events" edges to the Event entity.
func (epfc *EntitlementPlanFeatureCreate) AddEvents(e ...*Event) *EntitlementPlanFeatureCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epfc.AddEventIDs(ids...)
}

// Mutation returns the EntitlementPlanFeatureMutation object of the builder.
func (epfc *EntitlementPlanFeatureCreate) Mutation() *EntitlementPlanFeatureMutation {
	return epfc.mutation
}

// Save creates the EntitlementPlanFeature in the database.
func (epfc *EntitlementPlanFeatureCreate) Save(ctx context.Context) (*EntitlementPlanFeature, error) {
	if err := epfc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, epfc.sqlSave, epfc.mutation, epfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (epfc *EntitlementPlanFeatureCreate) SaveX(ctx context.Context) *EntitlementPlanFeature {
	v, err := epfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epfc *EntitlementPlanFeatureCreate) Exec(ctx context.Context) error {
	_, err := epfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epfc *EntitlementPlanFeatureCreate) ExecX(ctx context.Context) {
	if err := epfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epfc *EntitlementPlanFeatureCreate) defaults() error {
	if _, ok := epfc.mutation.CreatedAt(); !ok {
		if entitlementplanfeature.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeature.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeature.DefaultCreatedAt()
		epfc.mutation.SetCreatedAt(v)
	}
	if _, ok := epfc.mutation.UpdatedAt(); !ok {
		if entitlementplanfeature.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeature.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeature.DefaultUpdatedAt()
		epfc.mutation.SetUpdatedAt(v)
	}
	if _, ok := epfc.mutation.MappingID(); !ok {
		if entitlementplanfeature.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeature.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeature.DefaultMappingID()
		epfc.mutation.SetMappingID(v)
	}
	if _, ok := epfc.mutation.Tags(); !ok {
		v := entitlementplanfeature.DefaultTags
		epfc.mutation.SetTags(v)
	}
	if _, ok := epfc.mutation.ID(); !ok {
		if entitlementplanfeature.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeature.DefaultID (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeature.DefaultID()
		epfc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epfc *EntitlementPlanFeatureCreate) check() error {
	if _, ok := epfc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "EntitlementPlanFeature.mapping_id"`)}
	}
	if v, ok := epfc.mutation.OwnerID(); ok {
		if err := entitlementplanfeature.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "EntitlementPlanFeature.owner_id": %w`, err)}
		}
	}
	if _, ok := epfc.mutation.PlanID(); !ok {
		return &ValidationError{Name: "plan_id", err: errors.New(`generated: missing required field "EntitlementPlanFeature.plan_id"`)}
	}
	if v, ok := epfc.mutation.PlanID(); ok {
		if err := entitlementplanfeature.PlanIDValidator(v); err != nil {
			return &ValidationError{Name: "plan_id", err: fmt.Errorf(`generated: validator failed for field "EntitlementPlanFeature.plan_id": %w`, err)}
		}
	}
	if _, ok := epfc.mutation.FeatureID(); !ok {
		return &ValidationError{Name: "feature_id", err: errors.New(`generated: missing required field "EntitlementPlanFeature.feature_id"`)}
	}
	if v, ok := epfc.mutation.FeatureID(); ok {
		if err := entitlementplanfeature.FeatureIDValidator(v); err != nil {
			return &ValidationError{Name: "feature_id", err: fmt.Errorf(`generated: validator failed for field "EntitlementPlanFeature.feature_id": %w`, err)}
		}
	}
	if len(epfc.mutation.PlanIDs()) == 0 {
		return &ValidationError{Name: "plan", err: errors.New(`generated: missing required edge "EntitlementPlanFeature.plan"`)}
	}
	if len(epfc.mutation.FeatureIDs()) == 0 {
		return &ValidationError{Name: "feature", err: errors.New(`generated: missing required edge "EntitlementPlanFeature.feature"`)}
	}
	return nil
}

func (epfc *EntitlementPlanFeatureCreate) sqlSave(ctx context.Context) (*EntitlementPlanFeature, error) {
	if err := epfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := epfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, epfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected EntitlementPlanFeature.ID type: %T", _spec.ID.Value)
		}
	}
	epfc.mutation.id = &_node.ID
	epfc.mutation.done = true
	return _node, nil
}

func (epfc *EntitlementPlanFeatureCreate) createSpec() (*EntitlementPlanFeature, *sqlgraph.CreateSpec) {
	var (
		_node = &EntitlementPlanFeature{config: epfc.config}
		_spec = sqlgraph.NewCreateSpec(entitlementplanfeature.Table, sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString))
	)
	_spec.Schema = epfc.schemaConfig.EntitlementPlanFeature
	if id, ok := epfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := epfc.mutation.CreatedAt(); ok {
		_spec.SetField(entitlementplanfeature.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := epfc.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlementplanfeature.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := epfc.mutation.CreatedBy(); ok {
		_spec.SetField(entitlementplanfeature.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := epfc.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlementplanfeature.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := epfc.mutation.MappingID(); ok {
		_spec.SetField(entitlementplanfeature.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := epfc.mutation.DeletedAt(); ok {
		_spec.SetField(entitlementplanfeature.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := epfc.mutation.DeletedBy(); ok {
		_spec.SetField(entitlementplanfeature.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := epfc.mutation.Tags(); ok {
		_spec.SetField(entitlementplanfeature.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := epfc.mutation.Metadata(); ok {
		_spec.SetField(entitlementplanfeature.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := epfc.mutation.StripeProductID(); ok {
		_spec.SetField(entitlementplanfeature.FieldStripeProductID, field.TypeString, value)
		_node.StripeProductID = value
	}
	if value, ok := epfc.mutation.StripeFeatureID(); ok {
		_spec.SetField(entitlementplanfeature.FieldStripeFeatureID, field.TypeString, value)
		_node.StripeFeatureID = value
	}
	if nodes := epfc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlementplanfeature.OwnerTable,
			Columns: []string{entitlementplanfeature.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfc.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epfc.mutation.PlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entitlementplanfeature.PlanTable,
			Columns: []string{entitlementplanfeature.PlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfc.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epfc.mutation.FeatureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entitlementplanfeature.FeatureTable,
			Columns: []string{entitlementplanfeature.FeatureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfc.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FeatureID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := epfc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplanfeature.EventsTable,
			Columns: entitlementplanfeature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfc.schemaConfig.EntitlementPlanFeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntitlementPlanFeatureCreateBulk is the builder for creating many EntitlementPlanFeature entities in bulk.
type EntitlementPlanFeatureCreateBulk struct {
	config
	err      error
	builders []*EntitlementPlanFeatureCreate
}

// Save creates the EntitlementPlanFeature entities in the database.
func (epfcb *EntitlementPlanFeatureCreateBulk) Save(ctx context.Context) ([]*EntitlementPlanFeature, error) {
	if epfcb.err != nil {
		return nil, epfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(epfcb.builders))
	nodes := make([]*EntitlementPlanFeature, len(epfcb.builders))
	mutators := make([]Mutator, len(epfcb.builders))
	for i := range epfcb.builders {
		func(i int, root context.Context) {
			builder := epfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntitlementPlanFeatureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, epfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, epfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, epfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (epfcb *EntitlementPlanFeatureCreateBulk) SaveX(ctx context.Context) []*EntitlementPlanFeature {
	v, err := epfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (epfcb *EntitlementPlanFeatureCreateBulk) Exec(ctx context.Context) error {
	_, err := epfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epfcb *EntitlementPlanFeatureCreateBulk) ExecX(ctx context.Context) {
	if err := epfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
