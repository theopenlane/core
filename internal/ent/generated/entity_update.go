// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scan"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EntityUpdate is the builder for updating Entity entities.
type EntityUpdate struct {
	config
	hooks     []Hook
	mutation  *EntityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EntityUpdate builder.
func (_u *EntityUpdate) Where(ps ...predicate.Entity) *EntityUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EntityUpdate) SetUpdatedAt(v time.Time) *EntityUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *EntityUpdate) ClearUpdatedAt() *EntityUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *EntityUpdate) SetUpdatedBy(v string) *EntityUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *EntityUpdate) SetNillableUpdatedBy(v *string) *EntityUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *EntityUpdate) ClearUpdatedBy() *EntityUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *EntityUpdate) SetDeletedAt(v time.Time) *EntityUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *EntityUpdate) SetNillableDeletedAt(v *time.Time) *EntityUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *EntityUpdate) ClearDeletedAt() *EntityUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *EntityUpdate) SetDeletedBy(v string) *EntityUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *EntityUpdate) SetNillableDeletedBy(v *string) *EntityUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *EntityUpdate) ClearDeletedBy() *EntityUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *EntityUpdate) SetTags(v []string) *EntityUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *EntityUpdate) AppendTags(v []string) *EntityUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *EntityUpdate) ClearTags() *EntityUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *EntityUpdate) SetOwnerID(v string) *EntityUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *EntityUpdate) SetNillableOwnerID(v *string) *EntityUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *EntityUpdate) ClearOwnerID() *EntityUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *EntityUpdate) SetInternalNotes(v string) *EntityUpdate {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *EntityUpdate) SetNillableInternalNotes(v *string) *EntityUpdate {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *EntityUpdate) ClearInternalNotes() *EntityUpdate {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *EntityUpdate) SetSystemInternalID(v string) *EntityUpdate {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *EntityUpdate) SetNillableSystemInternalID(v *string) *EntityUpdate {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *EntityUpdate) ClearSystemInternalID() *EntityUpdate {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetName sets the "name" field.
func (_u *EntityUpdate) SetName(v string) *EntityUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *EntityUpdate) SetNillableName(v *string) *EntityUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *EntityUpdate) ClearName() *EntityUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *EntityUpdate) SetDisplayName(v string) *EntityUpdate {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *EntityUpdate) SetNillableDisplayName(v *string) *EntityUpdate {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// ClearDisplayName clears the value of the "display_name" field.
func (_u *EntityUpdate) ClearDisplayName() *EntityUpdate {
	_u.mutation.ClearDisplayName()
	return _u
}

// SetDescription sets the "description" field.
func (_u *EntityUpdate) SetDescription(v string) *EntityUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *EntityUpdate) SetNillableDescription(v *string) *EntityUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *EntityUpdate) ClearDescription() *EntityUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetDomains sets the "domains" field.
func (_u *EntityUpdate) SetDomains(v []string) *EntityUpdate {
	_u.mutation.SetDomains(v)
	return _u
}

// AppendDomains appends value to the "domains" field.
func (_u *EntityUpdate) AppendDomains(v []string) *EntityUpdate {
	_u.mutation.AppendDomains(v)
	return _u
}

// ClearDomains clears the value of the "domains" field.
func (_u *EntityUpdate) ClearDomains() *EntityUpdate {
	_u.mutation.ClearDomains()
	return _u
}

// SetEntityTypeID sets the "entity_type_id" field.
func (_u *EntityUpdate) SetEntityTypeID(v string) *EntityUpdate {
	_u.mutation.SetEntityTypeID(v)
	return _u
}

// SetNillableEntityTypeID sets the "entity_type_id" field if the given value is not nil.
func (_u *EntityUpdate) SetNillableEntityTypeID(v *string) *EntityUpdate {
	if v != nil {
		_u.SetEntityTypeID(*v)
	}
	return _u
}

// ClearEntityTypeID clears the value of the "entity_type_id" field.
func (_u *EntityUpdate) ClearEntityTypeID() *EntityUpdate {
	_u.mutation.ClearEntityTypeID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *EntityUpdate) SetStatus(v string) *EntityUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EntityUpdate) SetNillableStatus(v *string) *EntityUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *EntityUpdate) ClearStatus() *EntityUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *EntityUpdate) SetOwner(v *Organization) *EntityUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *EntityUpdate) AddBlockedGroupIDs(ids ...string) *EntityUpdate {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *EntityUpdate) AddBlockedGroups(v ...*Group) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *EntityUpdate) AddEditorIDs(ids ...string) *EntityUpdate {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *EntityUpdate) AddEditors(v ...*Group) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (_u *EntityUpdate) AddViewerIDs(ids ...string) *EntityUpdate {
	_u.mutation.AddViewerIDs(ids...)
	return _u
}

// AddViewers adds the "viewers" edges to the Group entity.
func (_u *EntityUpdate) AddViewers(v ...*Group) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddViewerIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (_u *EntityUpdate) AddContactIDs(ids ...string) *EntityUpdate {
	_u.mutation.AddContactIDs(ids...)
	return _u
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (_u *EntityUpdate) AddContacts(v ...*Contact) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddContactIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the DocumentData entity by IDs.
func (_u *EntityUpdate) AddDocumentIDs(ids ...string) *EntityUpdate {
	_u.mutation.AddDocumentIDs(ids...)
	return _u
}

// AddDocuments adds the "documents" edges to the DocumentData entity.
func (_u *EntityUpdate) AddDocuments(v ...*DocumentData) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDocumentIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (_u *EntityUpdate) AddNoteIDs(ids ...string) *EntityUpdate {
	_u.mutation.AddNoteIDs(ids...)
	return _u
}

// AddNotes adds the "notes" edges to the Note entity.
func (_u *EntityUpdate) AddNotes(v ...*Note) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNoteIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *EntityUpdate) AddFileIDs(ids ...string) *EntityUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *EntityUpdate) AddFiles(v ...*File) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_u *EntityUpdate) AddAssetIDs(ids ...string) *EntityUpdate {
	_u.mutation.AddAssetIDs(ids...)
	return _u
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_u *EntityUpdate) AddAssets(v ...*Asset) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssetIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (_u *EntityUpdate) AddScanIDs(ids ...string) *EntityUpdate {
	_u.mutation.AddScanIDs(ids...)
	return _u
}

// AddScans adds the "scans" edges to the Scan entity.
func (_u *EntityUpdate) AddScans(v ...*Scan) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanIDs(ids...)
}

// SetEntityType sets the "entity_type" edge to the EntityType entity.
func (_u *EntityUpdate) SetEntityType(v *EntityType) *EntityUpdate {
	return _u.SetEntityTypeID(v.ID)
}

// Mutation returns the EntityMutation object of the builder.
func (_u *EntityUpdate) Mutation() *EntityMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *EntityUpdate) ClearOwner() *EntityUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *EntityUpdate) ClearBlockedGroups() *EntityUpdate {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *EntityUpdate) RemoveBlockedGroupIDs(ids ...string) *EntityUpdate {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *EntityUpdate) RemoveBlockedGroups(v ...*Group) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *EntityUpdate) ClearEditors() *EntityUpdate {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *EntityUpdate) RemoveEditorIDs(ids ...string) *EntityUpdate {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *EntityUpdate) RemoveEditors(v ...*Group) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (_u *EntityUpdate) ClearViewers() *EntityUpdate {
	_u.mutation.ClearViewers()
	return _u
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (_u *EntityUpdate) RemoveViewerIDs(ids ...string) *EntityUpdate {
	_u.mutation.RemoveViewerIDs(ids...)
	return _u
}

// RemoveViewers removes "viewers" edges to Group entities.
func (_u *EntityUpdate) RemoveViewers(v ...*Group) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveViewerIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the Contact entity.
func (_u *EntityUpdate) ClearContacts() *EntityUpdate {
	_u.mutation.ClearContacts()
	return _u
}

// RemoveContactIDs removes the "contacts" edge to Contact entities by IDs.
func (_u *EntityUpdate) RemoveContactIDs(ids ...string) *EntityUpdate {
	_u.mutation.RemoveContactIDs(ids...)
	return _u
}

// RemoveContacts removes "contacts" edges to Contact entities.
func (_u *EntityUpdate) RemoveContacts(v ...*Contact) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveContactIDs(ids...)
}

// ClearDocuments clears all "documents" edges to the DocumentData entity.
func (_u *EntityUpdate) ClearDocuments() *EntityUpdate {
	_u.mutation.ClearDocuments()
	return _u
}

// RemoveDocumentIDs removes the "documents" edge to DocumentData entities by IDs.
func (_u *EntityUpdate) RemoveDocumentIDs(ids ...string) *EntityUpdate {
	_u.mutation.RemoveDocumentIDs(ids...)
	return _u
}

// RemoveDocuments removes "documents" edges to DocumentData entities.
func (_u *EntityUpdate) RemoveDocuments(v ...*DocumentData) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDocumentIDs(ids...)
}

// ClearNotes clears all "notes" edges to the Note entity.
func (_u *EntityUpdate) ClearNotes() *EntityUpdate {
	_u.mutation.ClearNotes()
	return _u
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (_u *EntityUpdate) RemoveNoteIDs(ids ...string) *EntityUpdate {
	_u.mutation.RemoveNoteIDs(ids...)
	return _u
}

// RemoveNotes removes "notes" edges to Note entities.
func (_u *EntityUpdate) RemoveNotes(v ...*Note) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNoteIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *EntityUpdate) ClearFiles() *EntityUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *EntityUpdate) RemoveFileIDs(ids ...string) *EntityUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *EntityUpdate) RemoveFiles(v ...*File) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (_u *EntityUpdate) ClearAssets() *EntityUpdate {
	_u.mutation.ClearAssets()
	return _u
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (_u *EntityUpdate) RemoveAssetIDs(ids ...string) *EntityUpdate {
	_u.mutation.RemoveAssetIDs(ids...)
	return _u
}

// RemoveAssets removes "assets" edges to Asset entities.
func (_u *EntityUpdate) RemoveAssets(v ...*Asset) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssetIDs(ids...)
}

// ClearScans clears all "scans" edges to the Scan entity.
func (_u *EntityUpdate) ClearScans() *EntityUpdate {
	_u.mutation.ClearScans()
	return _u
}

// RemoveScanIDs removes the "scans" edge to Scan entities by IDs.
func (_u *EntityUpdate) RemoveScanIDs(ids ...string) *EntityUpdate {
	_u.mutation.RemoveScanIDs(ids...)
	return _u
}

// RemoveScans removes "scans" edges to Scan entities.
func (_u *EntityUpdate) RemoveScans(v ...*Scan) *EntityUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanIDs(ids...)
}

// ClearEntityType clears the "entity_type" edge to the EntityType entity.
func (_u *EntityUpdate) ClearEntityType() *EntityUpdate {
	_u.mutation.ClearEntityType()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *EntityUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EntityUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *EntityUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EntityUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EntityUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if entity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entity.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entity.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *EntityUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := entity.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Entity.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DisplayName(); ok {
		if err := entity.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Entity.display_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Domains(); ok {
		if err := entity.DomainsValidator(v); err != nil {
			return &ValidationError{Name: "domains", err: fmt.Errorf(`generated: validator failed for field "Entity.domains": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *EntityUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntityUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *EntityUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entity.Table, entity.Columns, sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(entity.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(entity.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(entity.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(entity.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(entity.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(entity.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(entity.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(entity.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(entity.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(entity.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(entity.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entity.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(entity.FieldTags, field.TypeJSON)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(entity.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(entity.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(entity.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(entity.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(entity.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(entity.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(entity.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(entity.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.DisplayNameCleared() {
		_spec.ClearField(entity.FieldDisplayName, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(entity.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(entity.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Domains(); ok {
		_spec.SetField(entity.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entity.FieldDomains, value)
		})
	}
	if _u.mutation.DomainsCleared() {
		_spec.ClearField(entity.FieldDomains, field.TypeJSON)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(entity.FieldStatus, field.TypeString, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(entity.FieldStatus, field.TypeString)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.OwnerTable,
			Columns: []string{entity.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.OwnerTable,
			Columns: []string{entity.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.BlockedGroupsTable,
			Columns: entity.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.BlockedGroupsTable,
			Columns: entity.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.BlockedGroupsTable,
			Columns: entity.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.EditorsTable,
			Columns: entity.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.EditorsTable,
			Columns: entity.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.EditorsTable,
			Columns: entity.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ViewersTable,
			Columns: entity.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedViewersIDs(); len(nodes) > 0 && !_u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ViewersTable,
			Columns: entity.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ViewersTable,
			Columns: entity.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ContactsTable,
			Columns: entity.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityContacts
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedContactsIDs(); len(nodes) > 0 && !_u.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ContactsTable,
			Columns: entity.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ContactsTable,
			Columns: entity.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DocumentsTable,
			Columns: entity.DocumentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityDocuments
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !_u.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DocumentsTable,
			Columns: entity.DocumentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityDocuments
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DocumentsTable,
			Columns: entity.DocumentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityDocuments
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.NotesTable,
			Columns: []string{entity.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNotesIDs(); len(nodes) > 0 && !_u.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.NotesTable,
			Columns: []string{entity.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.NotesTable,
			Columns: []string{entity.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FilesTable,
			Columns: entity.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FilesTable,
			Columns: entity.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FilesTable,
			Columns: entity.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.AssetsTable,
			Columns: entity.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !_u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.AssetsTable,
			Columns: entity.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.AssetsTable,
			Columns: entity.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ScansTable,
			Columns: []string{entity.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScansIDs(); len(nodes) > 0 && !_u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ScansTable,
			Columns: []string{entity.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ScansTable,
			Columns: []string{entity.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntityTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entity.EntityTypeTable,
			Columns: []string{entity.EntityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entity.EntityTypeTable,
			Columns: []string{entity.EntityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Entity
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// EntityUpdateOne is the builder for updating a single Entity entity.
type EntityUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EntityMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *EntityUpdateOne) SetUpdatedAt(v time.Time) *EntityUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *EntityUpdateOne) ClearUpdatedAt() *EntityUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *EntityUpdateOne) SetUpdatedBy(v string) *EntityUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *EntityUpdateOne) SetNillableUpdatedBy(v *string) *EntityUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *EntityUpdateOne) ClearUpdatedBy() *EntityUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *EntityUpdateOne) SetDeletedAt(v time.Time) *EntityUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *EntityUpdateOne) SetNillableDeletedAt(v *time.Time) *EntityUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *EntityUpdateOne) ClearDeletedAt() *EntityUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *EntityUpdateOne) SetDeletedBy(v string) *EntityUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *EntityUpdateOne) SetNillableDeletedBy(v *string) *EntityUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *EntityUpdateOne) ClearDeletedBy() *EntityUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *EntityUpdateOne) SetTags(v []string) *EntityUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *EntityUpdateOne) AppendTags(v []string) *EntityUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *EntityUpdateOne) ClearTags() *EntityUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *EntityUpdateOne) SetOwnerID(v string) *EntityUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *EntityUpdateOne) SetNillableOwnerID(v *string) *EntityUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *EntityUpdateOne) ClearOwnerID() *EntityUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *EntityUpdateOne) SetInternalNotes(v string) *EntityUpdateOne {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *EntityUpdateOne) SetNillableInternalNotes(v *string) *EntityUpdateOne {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *EntityUpdateOne) ClearInternalNotes() *EntityUpdateOne {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *EntityUpdateOne) SetSystemInternalID(v string) *EntityUpdateOne {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *EntityUpdateOne) SetNillableSystemInternalID(v *string) *EntityUpdateOne {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *EntityUpdateOne) ClearSystemInternalID() *EntityUpdateOne {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetName sets the "name" field.
func (_u *EntityUpdateOne) SetName(v string) *EntityUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *EntityUpdateOne) SetNillableName(v *string) *EntityUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *EntityUpdateOne) ClearName() *EntityUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *EntityUpdateOne) SetDisplayName(v string) *EntityUpdateOne {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *EntityUpdateOne) SetNillableDisplayName(v *string) *EntityUpdateOne {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// ClearDisplayName clears the value of the "display_name" field.
func (_u *EntityUpdateOne) ClearDisplayName() *EntityUpdateOne {
	_u.mutation.ClearDisplayName()
	return _u
}

// SetDescription sets the "description" field.
func (_u *EntityUpdateOne) SetDescription(v string) *EntityUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *EntityUpdateOne) SetNillableDescription(v *string) *EntityUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *EntityUpdateOne) ClearDescription() *EntityUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetDomains sets the "domains" field.
func (_u *EntityUpdateOne) SetDomains(v []string) *EntityUpdateOne {
	_u.mutation.SetDomains(v)
	return _u
}

// AppendDomains appends value to the "domains" field.
func (_u *EntityUpdateOne) AppendDomains(v []string) *EntityUpdateOne {
	_u.mutation.AppendDomains(v)
	return _u
}

// ClearDomains clears the value of the "domains" field.
func (_u *EntityUpdateOne) ClearDomains() *EntityUpdateOne {
	_u.mutation.ClearDomains()
	return _u
}

// SetEntityTypeID sets the "entity_type_id" field.
func (_u *EntityUpdateOne) SetEntityTypeID(v string) *EntityUpdateOne {
	_u.mutation.SetEntityTypeID(v)
	return _u
}

// SetNillableEntityTypeID sets the "entity_type_id" field if the given value is not nil.
func (_u *EntityUpdateOne) SetNillableEntityTypeID(v *string) *EntityUpdateOne {
	if v != nil {
		_u.SetEntityTypeID(*v)
	}
	return _u
}

// ClearEntityTypeID clears the value of the "entity_type_id" field.
func (_u *EntityUpdateOne) ClearEntityTypeID() *EntityUpdateOne {
	_u.mutation.ClearEntityTypeID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *EntityUpdateOne) SetStatus(v string) *EntityUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *EntityUpdateOne) SetNillableStatus(v *string) *EntityUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *EntityUpdateOne) ClearStatus() *EntityUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *EntityUpdateOne) SetOwner(v *Organization) *EntityUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *EntityUpdateOne) AddBlockedGroupIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *EntityUpdateOne) AddBlockedGroups(v ...*Group) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *EntityUpdateOne) AddEditorIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *EntityUpdateOne) AddEditors(v ...*Group) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (_u *EntityUpdateOne) AddViewerIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.AddViewerIDs(ids...)
	return _u
}

// AddViewers adds the "viewers" edges to the Group entity.
func (_u *EntityUpdateOne) AddViewers(v ...*Group) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddViewerIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (_u *EntityUpdateOne) AddContactIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.AddContactIDs(ids...)
	return _u
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (_u *EntityUpdateOne) AddContacts(v ...*Contact) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddContactIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the DocumentData entity by IDs.
func (_u *EntityUpdateOne) AddDocumentIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.AddDocumentIDs(ids...)
	return _u
}

// AddDocuments adds the "documents" edges to the DocumentData entity.
func (_u *EntityUpdateOne) AddDocuments(v ...*DocumentData) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDocumentIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (_u *EntityUpdateOne) AddNoteIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.AddNoteIDs(ids...)
	return _u
}

// AddNotes adds the "notes" edges to the Note entity.
func (_u *EntityUpdateOne) AddNotes(v ...*Note) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNoteIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *EntityUpdateOne) AddFileIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *EntityUpdateOne) AddFiles(v ...*File) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_u *EntityUpdateOne) AddAssetIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.AddAssetIDs(ids...)
	return _u
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_u *EntityUpdateOne) AddAssets(v ...*Asset) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssetIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (_u *EntityUpdateOne) AddScanIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.AddScanIDs(ids...)
	return _u
}

// AddScans adds the "scans" edges to the Scan entity.
func (_u *EntityUpdateOne) AddScans(v ...*Scan) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanIDs(ids...)
}

// SetEntityType sets the "entity_type" edge to the EntityType entity.
func (_u *EntityUpdateOne) SetEntityType(v *EntityType) *EntityUpdateOne {
	return _u.SetEntityTypeID(v.ID)
}

// Mutation returns the EntityMutation object of the builder.
func (_u *EntityUpdateOne) Mutation() *EntityMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *EntityUpdateOne) ClearOwner() *EntityUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *EntityUpdateOne) ClearBlockedGroups() *EntityUpdateOne {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *EntityUpdateOne) RemoveBlockedGroupIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *EntityUpdateOne) RemoveBlockedGroups(v ...*Group) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *EntityUpdateOne) ClearEditors() *EntityUpdateOne {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *EntityUpdateOne) RemoveEditorIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *EntityUpdateOne) RemoveEditors(v ...*Group) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (_u *EntityUpdateOne) ClearViewers() *EntityUpdateOne {
	_u.mutation.ClearViewers()
	return _u
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (_u *EntityUpdateOne) RemoveViewerIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.RemoveViewerIDs(ids...)
	return _u
}

// RemoveViewers removes "viewers" edges to Group entities.
func (_u *EntityUpdateOne) RemoveViewers(v ...*Group) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveViewerIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the Contact entity.
func (_u *EntityUpdateOne) ClearContacts() *EntityUpdateOne {
	_u.mutation.ClearContacts()
	return _u
}

// RemoveContactIDs removes the "contacts" edge to Contact entities by IDs.
func (_u *EntityUpdateOne) RemoveContactIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.RemoveContactIDs(ids...)
	return _u
}

// RemoveContacts removes "contacts" edges to Contact entities.
func (_u *EntityUpdateOne) RemoveContacts(v ...*Contact) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveContactIDs(ids...)
}

// ClearDocuments clears all "documents" edges to the DocumentData entity.
func (_u *EntityUpdateOne) ClearDocuments() *EntityUpdateOne {
	_u.mutation.ClearDocuments()
	return _u
}

// RemoveDocumentIDs removes the "documents" edge to DocumentData entities by IDs.
func (_u *EntityUpdateOne) RemoveDocumentIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.RemoveDocumentIDs(ids...)
	return _u
}

// RemoveDocuments removes "documents" edges to DocumentData entities.
func (_u *EntityUpdateOne) RemoveDocuments(v ...*DocumentData) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDocumentIDs(ids...)
}

// ClearNotes clears all "notes" edges to the Note entity.
func (_u *EntityUpdateOne) ClearNotes() *EntityUpdateOne {
	_u.mutation.ClearNotes()
	return _u
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (_u *EntityUpdateOne) RemoveNoteIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.RemoveNoteIDs(ids...)
	return _u
}

// RemoveNotes removes "notes" edges to Note entities.
func (_u *EntityUpdateOne) RemoveNotes(v ...*Note) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNoteIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *EntityUpdateOne) ClearFiles() *EntityUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *EntityUpdateOne) RemoveFileIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *EntityUpdateOne) RemoveFiles(v ...*File) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (_u *EntityUpdateOne) ClearAssets() *EntityUpdateOne {
	_u.mutation.ClearAssets()
	return _u
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (_u *EntityUpdateOne) RemoveAssetIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.RemoveAssetIDs(ids...)
	return _u
}

// RemoveAssets removes "assets" edges to Asset entities.
func (_u *EntityUpdateOne) RemoveAssets(v ...*Asset) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssetIDs(ids...)
}

// ClearScans clears all "scans" edges to the Scan entity.
func (_u *EntityUpdateOne) ClearScans() *EntityUpdateOne {
	_u.mutation.ClearScans()
	return _u
}

// RemoveScanIDs removes the "scans" edge to Scan entities by IDs.
func (_u *EntityUpdateOne) RemoveScanIDs(ids ...string) *EntityUpdateOne {
	_u.mutation.RemoveScanIDs(ids...)
	return _u
}

// RemoveScans removes "scans" edges to Scan entities.
func (_u *EntityUpdateOne) RemoveScans(v ...*Scan) *EntityUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanIDs(ids...)
}

// ClearEntityType clears the "entity_type" edge to the EntityType entity.
func (_u *EntityUpdateOne) ClearEntityType() *EntityUpdateOne {
	_u.mutation.ClearEntityType()
	return _u
}

// Where appends a list predicates to the EntityUpdate builder.
func (_u *EntityUpdateOne) Where(ps ...predicate.Entity) *EntityUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *EntityUpdateOne) Select(field string, fields ...string) *EntityUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Entity entity.
func (_u *EntityUpdateOne) Save(ctx context.Context) (*Entity, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *EntityUpdateOne) SaveX(ctx context.Context) *Entity {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *EntityUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *EntityUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *EntityUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if entity.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entity.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entity.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *EntityUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := entity.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Entity.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DisplayName(); ok {
		if err := entity.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Entity.display_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Domains(); ok {
		if err := entity.DomainsValidator(v); err != nil {
			return &ValidationError{Name: "domains", err: fmt.Errorf(`generated: validator failed for field "Entity.domains": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *EntityUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntityUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *EntityUpdateOne) sqlSave(ctx context.Context) (_node *Entity, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entity.Table, entity.Columns, sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Entity.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entity.FieldID)
		for _, f := range fields {
			if !entity.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != entity.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(entity.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(entity.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(entity.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(entity.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(entity.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(entity.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(entity.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(entity.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(entity.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(entity.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(entity.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entity.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(entity.FieldTags, field.TypeJSON)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(entity.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(entity.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(entity.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(entity.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(entity.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(entity.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(entity.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(entity.FieldDisplayName, field.TypeString, value)
	}
	if _u.mutation.DisplayNameCleared() {
		_spec.ClearField(entity.FieldDisplayName, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(entity.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(entity.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Domains(); ok {
		_spec.SetField(entity.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entity.FieldDomains, value)
		})
	}
	if _u.mutation.DomainsCleared() {
		_spec.ClearField(entity.FieldDomains, field.TypeJSON)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(entity.FieldStatus, field.TypeString, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(entity.FieldStatus, field.TypeString)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.OwnerTable,
			Columns: []string{entity.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entity.OwnerTable,
			Columns: []string{entity.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.BlockedGroupsTable,
			Columns: entity.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.BlockedGroupsTable,
			Columns: entity.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.BlockedGroupsTable,
			Columns: entity.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.EditorsTable,
			Columns: entity.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.EditorsTable,
			Columns: entity.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.EditorsTable,
			Columns: entity.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ViewersTable,
			Columns: entity.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedViewersIDs(); len(nodes) > 0 && !_u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ViewersTable,
			Columns: entity.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ViewersTable,
			Columns: entity.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ContactsTable,
			Columns: entity.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityContacts
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedContactsIDs(); len(nodes) > 0 && !_u.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ContactsTable,
			Columns: entity.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.ContactsTable,
			Columns: entity.ContactsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DocumentsTable,
			Columns: entity.DocumentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityDocuments
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !_u.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DocumentsTable,
			Columns: entity.DocumentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityDocuments
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.DocumentsTable,
			Columns: entity.DocumentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityDocuments
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.NotesTable,
			Columns: []string{entity.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNotesIDs(); len(nodes) > 0 && !_u.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.NotesTable,
			Columns: []string{entity.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.NotesTable,
			Columns: []string{entity.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FilesTable,
			Columns: entity.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FilesTable,
			Columns: entity.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.FilesTable,
			Columns: entity.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.AssetsTable,
			Columns: entity.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !_u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.AssetsTable,
			Columns: entity.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entity.AssetsTable,
			Columns: entity.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ScansTable,
			Columns: []string{entity.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScansIDs(); len(nodes) > 0 && !_u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ScansTable,
			Columns: []string{entity.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entity.ScansTable,
			Columns: []string{entity.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntityTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entity.EntityTypeTable,
			Columns: []string{entity.EntityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntityTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entity.EntityTypeTable,
			Columns: []string{entity.EntityTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Entity
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Entity{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entity.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
