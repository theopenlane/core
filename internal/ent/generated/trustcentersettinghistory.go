// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersettinghistory"
	"github.com/theopenlane/entx/history"
)

// TrustCenterSettingHistory is the model entity for the TrustCenterSettingHistory schema.
type TrustCenterSettingHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the ID of the trust center the settings belong to
	TrustCenterID string `json:"trust_center_id,omitempty"`
	// title of the trust center
	Title string `json:"title,omitempty"`
	// overview of the trust center
	Overview string `json:"overview,omitempty"`
	// primary color for the trust center
	PrimaryColor string `json:"primary_color,omitempty"`
	// URL of the logo
	LogoRemoteURL *string `json:"logo_remote_url,omitempty"`
	// The local logo file id, takes precedence over the logo remote URL
	LogoLocalFileID *string `json:"logo_local_file_id,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrustCenterSettingHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trustcentersettinghistory.FieldOperation:
			values[i] = new(history.OpType)
		case trustcentersettinghistory.FieldID, trustcentersettinghistory.FieldRef, trustcentersettinghistory.FieldCreatedBy, trustcentersettinghistory.FieldUpdatedBy, trustcentersettinghistory.FieldDeletedBy, trustcentersettinghistory.FieldTrustCenterID, trustcentersettinghistory.FieldTitle, trustcentersettinghistory.FieldOverview, trustcentersettinghistory.FieldPrimaryColor, trustcentersettinghistory.FieldLogoRemoteURL, trustcentersettinghistory.FieldLogoLocalFileID:
			values[i] = new(sql.NullString)
		case trustcentersettinghistory.FieldHistoryTime, trustcentersettinghistory.FieldCreatedAt, trustcentersettinghistory.FieldUpdatedAt, trustcentersettinghistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrustCenterSettingHistory fields.
func (tcsh *TrustCenterSettingHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trustcentersettinghistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tcsh.ID = value.String
			}
		case trustcentersettinghistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				tcsh.HistoryTime = value.Time
			}
		case trustcentersettinghistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				tcsh.Ref = value.String
			}
		case trustcentersettinghistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				tcsh.Operation = *value
			}
		case trustcentersettinghistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tcsh.CreatedAt = value.Time
			}
		case trustcentersettinghistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tcsh.UpdatedAt = value.Time
			}
		case trustcentersettinghistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tcsh.CreatedBy = value.String
			}
		case trustcentersettinghistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				tcsh.UpdatedBy = value.String
			}
		case trustcentersettinghistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tcsh.DeletedAt = value.Time
			}
		case trustcentersettinghistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				tcsh.DeletedBy = value.String
			}
		case trustcentersettinghistory.FieldTrustCenterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trust_center_id", values[i])
			} else if value.Valid {
				tcsh.TrustCenterID = value.String
			}
		case trustcentersettinghistory.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				tcsh.Title = value.String
			}
		case trustcentersettinghistory.FieldOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field overview", values[i])
			} else if value.Valid {
				tcsh.Overview = value.String
			}
		case trustcentersettinghistory.FieldPrimaryColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_color", values[i])
			} else if value.Valid {
				tcsh.PrimaryColor = value.String
			}
		case trustcentersettinghistory.FieldLogoRemoteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_remote_url", values[i])
			} else if value.Valid {
				tcsh.LogoRemoteURL = new(string)
				*tcsh.LogoRemoteURL = value.String
			}
		case trustcentersettinghistory.FieldLogoLocalFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_local_file_id", values[i])
			} else if value.Valid {
				tcsh.LogoLocalFileID = new(string)
				*tcsh.LogoLocalFileID = value.String
			}
		default:
			tcsh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrustCenterSettingHistory.
// This includes values selected through modifiers, order, etc.
func (tcsh *TrustCenterSettingHistory) Value(name string) (ent.Value, error) {
	return tcsh.selectValues.Get(name)
}

// Update returns a builder for updating this TrustCenterSettingHistory.
// Note that you need to call TrustCenterSettingHistory.Unwrap() before calling this method if this TrustCenterSettingHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (tcsh *TrustCenterSettingHistory) Update() *TrustCenterSettingHistoryUpdateOne {
	return NewTrustCenterSettingHistoryClient(tcsh.config).UpdateOne(tcsh)
}

// Unwrap unwraps the TrustCenterSettingHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tcsh *TrustCenterSettingHistory) Unwrap() *TrustCenterSettingHistory {
	_tx, ok := tcsh.config.driver.(*txDriver)
	if !ok {
		panic("generated: TrustCenterSettingHistory is not a transactional entity")
	}
	tcsh.config.driver = _tx.drv
	return tcsh
}

// String implements the fmt.Stringer.
func (tcsh *TrustCenterSettingHistory) String() string {
	var builder strings.Builder
	builder.WriteString("TrustCenterSettingHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tcsh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(tcsh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(tcsh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", tcsh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tcsh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tcsh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(tcsh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(tcsh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(tcsh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(tcsh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("trust_center_id=")
	builder.WriteString(tcsh.TrustCenterID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(tcsh.Title)
	builder.WriteString(", ")
	builder.WriteString("overview=")
	builder.WriteString(tcsh.Overview)
	builder.WriteString(", ")
	builder.WriteString("primary_color=")
	builder.WriteString(tcsh.PrimaryColor)
	builder.WriteString(", ")
	if v := tcsh.LogoRemoteURL; v != nil {
		builder.WriteString("logo_remote_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := tcsh.LogoLocalFileID; v != nil {
		builder.WriteString("logo_local_file_id=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// TrustCenterSettingHistories is a parsable slice of TrustCenterSettingHistory.
type TrustCenterSettingHistories []*TrustCenterSettingHistory
