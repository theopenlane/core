// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersettinghistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// TrustCenterSettingHistory is the model entity for the TrustCenterSettingHistory schema.
type TrustCenterSettingHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the ID of the trust center the settings belong to
	TrustCenterID string `json:"trust_center_id,omitempty"`
	// title of the trust center
	Title string `json:"title,omitempty"`
	// overview of the trust center
	Overview string `json:"overview,omitempty"`
	// URL of the logo
	LogoRemoteURL *string `json:"logo_remote_url,omitempty"`
	// The local logo file id, takes precedence over the logo remote URL
	LogoLocalFileID *string `json:"logo_local_file_id,omitempty"`
	// URL of the favicon
	FaviconRemoteURL *string `json:"favicon_remote_url,omitempty"`
	// The local favicon file id, takes precedence over the favicon remote URL
	FaviconLocalFileID *string `json:"favicon_local_file_id,omitempty"`
	// Theme mode for the trust center
	ThemeMode enums.TrustCenterThemeMode `json:"theme_mode,omitempty"`
	// primary color for the trust center
	PrimaryColor string `json:"primary_color,omitempty"`
	// font for the trust center
	Font string `json:"font,omitempty"`
	// foreground color for the trust center
	ForegroundColor string `json:"foreground_color,omitempty"`
	// background color for the trust center
	BackgroundColor string `json:"background_color,omitempty"`
	// accent/brand color for the trust center
	AccentColor  string `json:"accent_color,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrustCenterSettingHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trustcentersettinghistory.FieldOperation:
			values[i] = new(history.OpType)
		case trustcentersettinghistory.FieldID, trustcentersettinghistory.FieldRef, trustcentersettinghistory.FieldCreatedBy, trustcentersettinghistory.FieldUpdatedBy, trustcentersettinghistory.FieldDeletedBy, trustcentersettinghistory.FieldTrustCenterID, trustcentersettinghistory.FieldTitle, trustcentersettinghistory.FieldOverview, trustcentersettinghistory.FieldLogoRemoteURL, trustcentersettinghistory.FieldLogoLocalFileID, trustcentersettinghistory.FieldFaviconRemoteURL, trustcentersettinghistory.FieldFaviconLocalFileID, trustcentersettinghistory.FieldThemeMode, trustcentersettinghistory.FieldPrimaryColor, trustcentersettinghistory.FieldFont, trustcentersettinghistory.FieldForegroundColor, trustcentersettinghistory.FieldBackgroundColor, trustcentersettinghistory.FieldAccentColor:
			values[i] = new(sql.NullString)
		case trustcentersettinghistory.FieldHistoryTime, trustcentersettinghistory.FieldCreatedAt, trustcentersettinghistory.FieldUpdatedAt, trustcentersettinghistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrustCenterSettingHistory fields.
func (_m *TrustCenterSettingHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trustcentersettinghistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case trustcentersettinghistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				_m.HistoryTime = value.Time
			}
		case trustcentersettinghistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				_m.Ref = value.String
			}
		case trustcentersettinghistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				_m.Operation = *value
			}
		case trustcentersettinghistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case trustcentersettinghistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case trustcentersettinghistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case trustcentersettinghistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case trustcentersettinghistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case trustcentersettinghistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case trustcentersettinghistory.FieldTrustCenterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trust_center_id", values[i])
			} else if value.Valid {
				_m.TrustCenterID = value.String
			}
		case trustcentersettinghistory.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case trustcentersettinghistory.FieldOverview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field overview", values[i])
			} else if value.Valid {
				_m.Overview = value.String
			}
		case trustcentersettinghistory.FieldLogoRemoteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_remote_url", values[i])
			} else if value.Valid {
				_m.LogoRemoteURL = new(string)
				*_m.LogoRemoteURL = value.String
			}
		case trustcentersettinghistory.FieldLogoLocalFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_local_file_id", values[i])
			} else if value.Valid {
				_m.LogoLocalFileID = new(string)
				*_m.LogoLocalFileID = value.String
			}
		case trustcentersettinghistory.FieldFaviconRemoteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field favicon_remote_url", values[i])
			} else if value.Valid {
				_m.FaviconRemoteURL = new(string)
				*_m.FaviconRemoteURL = value.String
			}
		case trustcentersettinghistory.FieldFaviconLocalFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field favicon_local_file_id", values[i])
			} else if value.Valid {
				_m.FaviconLocalFileID = new(string)
				*_m.FaviconLocalFileID = value.String
			}
		case trustcentersettinghistory.FieldThemeMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field theme_mode", values[i])
			} else if value.Valid {
				_m.ThemeMode = enums.TrustCenterThemeMode(value.String)
			}
		case trustcentersettinghistory.FieldPrimaryColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field primary_color", values[i])
			} else if value.Valid {
				_m.PrimaryColor = value.String
			}
		case trustcentersettinghistory.FieldFont:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field font", values[i])
			} else if value.Valid {
				_m.Font = value.String
			}
		case trustcentersettinghistory.FieldForegroundColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field foreground_color", values[i])
			} else if value.Valid {
				_m.ForegroundColor = value.String
			}
		case trustcentersettinghistory.FieldBackgroundColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field background_color", values[i])
			} else if value.Valid {
				_m.BackgroundColor = value.String
			}
		case trustcentersettinghistory.FieldAccentColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field accent_color", values[i])
			} else if value.Valid {
				_m.AccentColor = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrustCenterSettingHistory.
// This includes values selected through modifiers, order, etc.
func (_m *TrustCenterSettingHistory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this TrustCenterSettingHistory.
// Note that you need to call TrustCenterSettingHistory.Unwrap() before calling this method if this TrustCenterSettingHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TrustCenterSettingHistory) Update() *TrustCenterSettingHistoryUpdateOne {
	return NewTrustCenterSettingHistoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TrustCenterSettingHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TrustCenterSettingHistory) Unwrap() *TrustCenterSettingHistory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: TrustCenterSettingHistory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TrustCenterSettingHistory) String() string {
	var builder strings.Builder
	builder.WriteString("TrustCenterSettingHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("history_time=")
	builder.WriteString(_m.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(_m.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", _m.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("trust_center_id=")
	builder.WriteString(_m.TrustCenterID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("overview=")
	builder.WriteString(_m.Overview)
	builder.WriteString(", ")
	if v := _m.LogoRemoteURL; v != nil {
		builder.WriteString("logo_remote_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.LogoLocalFileID; v != nil {
		builder.WriteString("logo_local_file_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.FaviconRemoteURL; v != nil {
		builder.WriteString("favicon_remote_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := _m.FaviconLocalFileID; v != nil {
		builder.WriteString("favicon_local_file_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("theme_mode=")
	builder.WriteString(fmt.Sprintf("%v", _m.ThemeMode))
	builder.WriteString(", ")
	builder.WriteString("primary_color=")
	builder.WriteString(_m.PrimaryColor)
	builder.WriteString(", ")
	builder.WriteString("font=")
	builder.WriteString(_m.Font)
	builder.WriteString(", ")
	builder.WriteString("foreground_color=")
	builder.WriteString(_m.ForegroundColor)
	builder.WriteString(", ")
	builder.WriteString("background_color=")
	builder.WriteString(_m.BackgroundColor)
	builder.WriteString(", ")
	builder.WriteString("accent_color=")
	builder.WriteString(_m.AccentColor)
	builder.WriteByte(')')
	return builder.String()
}

// TrustCenterSettingHistories is a parsable slice of TrustCenterSettingHistory.
type TrustCenterSettingHistories []*TrustCenterSettingHistory
