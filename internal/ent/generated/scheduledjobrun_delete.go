// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobrun"
)

// ScheduledJobRunDelete is the builder for deleting a ScheduledJobRun entity.
type ScheduledJobRunDelete struct {
	config
	hooks    []Hook
	mutation *ScheduledJobRunMutation
}

// Where appends a list predicates to the ScheduledJobRunDelete builder.
func (sjrd *ScheduledJobRunDelete) Where(ps ...predicate.ScheduledJobRun) *ScheduledJobRunDelete {
	sjrd.mutation.Where(ps...)
	return sjrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sjrd *ScheduledJobRunDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sjrd.sqlExec, sjrd.mutation, sjrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sjrd *ScheduledJobRunDelete) ExecX(ctx context.Context) int {
	n, err := sjrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sjrd *ScheduledJobRunDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(scheduledjobrun.Table, sqlgraph.NewFieldSpec(scheduledjobrun.FieldID, field.TypeString))
	_spec.Node.Schema = sjrd.schemaConfig.ScheduledJobRun
	ctx = internal.NewSchemaConfigContext(ctx, sjrd.schemaConfig)
	if ps := sjrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sjrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sjrd.mutation.done = true
	return affected, err
}

// ScheduledJobRunDeleteOne is the builder for deleting a single ScheduledJobRun entity.
type ScheduledJobRunDeleteOne struct {
	sjrd *ScheduledJobRunDelete
}

// Where appends a list predicates to the ScheduledJobRunDelete builder.
func (sjrdo *ScheduledJobRunDeleteOne) Where(ps ...predicate.ScheduledJobRun) *ScheduledJobRunDeleteOne {
	sjrdo.sjrd.mutation.Where(ps...)
	return sjrdo
}

// Exec executes the deletion query.
func (sjrdo *ScheduledJobRunDeleteOne) Exec(ctx context.Context) error {
	n, err := sjrdo.sjrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{scheduledjobrun.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sjrdo *ScheduledJobRunDeleteOne) ExecX(ctx context.Context) {
	if err := sjrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
