// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ActionPlanQuery is the builder for querying ActionPlan entities.
type ActionPlanQuery struct {
	config
	ctx               *QueryContext
	order             []actionplan.OrderOption
	inters            []Interceptor
	predicates        []predicate.ActionPlan
	withStandard      *StandardQuery
	withRisk          *RiskQuery
	withControl       *ControlQuery
	withUser          *UserQuery
	withProgram       *ProgramQuery
	loadTotal         []func(context.Context, []*ActionPlan) error
	modifiers         []func(*sql.Selector)
	withNamedStandard map[string]*StandardQuery
	withNamedRisk     map[string]*RiskQuery
	withNamedControl  map[string]*ControlQuery
	withNamedUser     map[string]*UserQuery
	withNamedProgram  map[string]*ProgramQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ActionPlanQuery builder.
func (apq *ActionPlanQuery) Where(ps ...predicate.ActionPlan) *ActionPlanQuery {
	apq.predicates = append(apq.predicates, ps...)
	return apq
}

// Limit the number of records to be returned by this query.
func (apq *ActionPlanQuery) Limit(limit int) *ActionPlanQuery {
	apq.ctx.Limit = &limit
	return apq
}

// Offset to start from.
func (apq *ActionPlanQuery) Offset(offset int) *ActionPlanQuery {
	apq.ctx.Offset = &offset
	return apq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (apq *ActionPlanQuery) Unique(unique bool) *ActionPlanQuery {
	apq.ctx.Unique = &unique
	return apq
}

// Order specifies how the records should be ordered.
func (apq *ActionPlanQuery) Order(o ...actionplan.OrderOption) *ActionPlanQuery {
	apq.order = append(apq.order, o...)
	return apq
}

// QueryStandard chains the current query on the "standard" edge.
func (apq *ActionPlanQuery) QueryStandard() *StandardQuery {
	query := (&StandardClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actionplan.Table, actionplan.FieldID, selector),
			sqlgraph.To(standard.Table, standard.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, actionplan.StandardTable, actionplan.StandardPrimaryKey...),
		)
		schemaConfig := apq.schemaConfig
		step.To.Schema = schemaConfig.Standard
		step.Edge.Schema = schemaConfig.StandardActionplans
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRisk chains the current query on the "risk" edge.
func (apq *ActionPlanQuery) QueryRisk() *RiskQuery {
	query := (&RiskClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actionplan.Table, actionplan.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, actionplan.RiskTable, actionplan.RiskPrimaryKey...),
		)
		schemaConfig := apq.schemaConfig
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.RiskActionplans
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControl chains the current query on the "control" edge.
func (apq *ActionPlanQuery) QueryControl() *ControlQuery {
	query := (&ControlClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actionplan.Table, actionplan.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, actionplan.ControlTable, actionplan.ControlPrimaryKey...),
		)
		schemaConfig := apq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlActionplans
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (apq *ActionPlanQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actionplan.Table, actionplan.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, actionplan.UserTable, actionplan.UserPrimaryKey...),
		)
		schemaConfig := apq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserActionplans
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgram chains the current query on the "program" edge.
func (apq *ActionPlanQuery) QueryProgram() *ProgramQuery {
	query := (&ProgramClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actionplan.Table, actionplan.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, actionplan.ProgramTable, actionplan.ProgramPrimaryKey...),
		)
		schemaConfig := apq.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramActionplans
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ActionPlan entity from the query.
// Returns a *NotFoundError when no ActionPlan was found.
func (apq *ActionPlanQuery) First(ctx context.Context) (*ActionPlan, error) {
	nodes, err := apq.Limit(1).All(setContextOp(ctx, apq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{actionplan.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (apq *ActionPlanQuery) FirstX(ctx context.Context) *ActionPlan {
	node, err := apq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ActionPlan ID from the query.
// Returns a *NotFoundError when no ActionPlan ID was found.
func (apq *ActionPlanQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = apq.Limit(1).IDs(setContextOp(ctx, apq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{actionplan.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (apq *ActionPlanQuery) FirstIDX(ctx context.Context) string {
	id, err := apq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ActionPlan entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ActionPlan entity is found.
// Returns a *NotFoundError when no ActionPlan entities are found.
func (apq *ActionPlanQuery) Only(ctx context.Context) (*ActionPlan, error) {
	nodes, err := apq.Limit(2).All(setContextOp(ctx, apq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{actionplan.Label}
	default:
		return nil, &NotSingularError{actionplan.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (apq *ActionPlanQuery) OnlyX(ctx context.Context) *ActionPlan {
	node, err := apq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ActionPlan ID in the query.
// Returns a *NotSingularError when more than one ActionPlan ID is found.
// Returns a *NotFoundError when no entities are found.
func (apq *ActionPlanQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = apq.Limit(2).IDs(setContextOp(ctx, apq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{actionplan.Label}
	default:
		err = &NotSingularError{actionplan.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (apq *ActionPlanQuery) OnlyIDX(ctx context.Context) string {
	id, err := apq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ActionPlans.
func (apq *ActionPlanQuery) All(ctx context.Context) ([]*ActionPlan, error) {
	ctx = setContextOp(ctx, apq.ctx, ent.OpQueryAll)
	if err := apq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ActionPlan, *ActionPlanQuery]()
	return withInterceptors[[]*ActionPlan](ctx, apq, qr, apq.inters)
}

// AllX is like All, but panics if an error occurs.
func (apq *ActionPlanQuery) AllX(ctx context.Context) []*ActionPlan {
	nodes, err := apq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ActionPlan IDs.
func (apq *ActionPlanQuery) IDs(ctx context.Context) (ids []string, err error) {
	if apq.ctx.Unique == nil && apq.path != nil {
		apq.Unique(true)
	}
	ctx = setContextOp(ctx, apq.ctx, ent.OpQueryIDs)
	if err = apq.Select(actionplan.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (apq *ActionPlanQuery) IDsX(ctx context.Context) []string {
	ids, err := apq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (apq *ActionPlanQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, apq.ctx, ent.OpQueryCount)
	if err := apq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, apq, querierCount[*ActionPlanQuery](), apq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (apq *ActionPlanQuery) CountX(ctx context.Context) int {
	count, err := apq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (apq *ActionPlanQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, apq.ctx, ent.OpQueryExist)
	switch _, err := apq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (apq *ActionPlanQuery) ExistX(ctx context.Context) bool {
	exist, err := apq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ActionPlanQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (apq *ActionPlanQuery) Clone() *ActionPlanQuery {
	if apq == nil {
		return nil
	}
	return &ActionPlanQuery{
		config:       apq.config,
		ctx:          apq.ctx.Clone(),
		order:        append([]actionplan.OrderOption{}, apq.order...),
		inters:       append([]Interceptor{}, apq.inters...),
		predicates:   append([]predicate.ActionPlan{}, apq.predicates...),
		withStandard: apq.withStandard.Clone(),
		withRisk:     apq.withRisk.Clone(),
		withControl:  apq.withControl.Clone(),
		withUser:     apq.withUser.Clone(),
		withProgram:  apq.withProgram.Clone(),
		// clone intermediate query.
		sql:       apq.sql.Clone(),
		path:      apq.path,
		modifiers: append([]func(*sql.Selector){}, apq.modifiers...),
	}
}

// WithStandard tells the query-builder to eager-load the nodes that are connected to
// the "standard" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *ActionPlanQuery) WithStandard(opts ...func(*StandardQuery)) *ActionPlanQuery {
	query := (&StandardClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withStandard = query
	return apq
}

// WithRisk tells the query-builder to eager-load the nodes that are connected to
// the "risk" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *ActionPlanQuery) WithRisk(opts ...func(*RiskQuery)) *ActionPlanQuery {
	query := (&RiskClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withRisk = query
	return apq
}

// WithControl tells the query-builder to eager-load the nodes that are connected to
// the "control" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *ActionPlanQuery) WithControl(opts ...func(*ControlQuery)) *ActionPlanQuery {
	query := (&ControlClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withControl = query
	return apq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *ActionPlanQuery) WithUser(opts ...func(*UserQuery)) *ActionPlanQuery {
	query := (&UserClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withUser = query
	return apq
}

// WithProgram tells the query-builder to eager-load the nodes that are connected to
// the "program" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *ActionPlanQuery) WithProgram(opts ...func(*ProgramQuery)) *ActionPlanQuery {
	query := (&ProgramClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withProgram = query
	return apq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ActionPlan.Query().
//		GroupBy(actionplan.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (apq *ActionPlanQuery) GroupBy(field string, fields ...string) *ActionPlanGroupBy {
	apq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ActionPlanGroupBy{build: apq}
	grbuild.flds = &apq.ctx.Fields
	grbuild.label = actionplan.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ActionPlan.Query().
//		Select(actionplan.FieldCreatedAt).
//		Scan(ctx, &v)
func (apq *ActionPlanQuery) Select(fields ...string) *ActionPlanSelect {
	apq.ctx.Fields = append(apq.ctx.Fields, fields...)
	sbuild := &ActionPlanSelect{ActionPlanQuery: apq}
	sbuild.label = actionplan.Label
	sbuild.flds, sbuild.scan = &apq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ActionPlanSelect configured with the given aggregations.
func (apq *ActionPlanQuery) Aggregate(fns ...AggregateFunc) *ActionPlanSelect {
	return apq.Select().Aggregate(fns...)
}

func (apq *ActionPlanQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range apq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, apq); err != nil {
				return err
			}
		}
	}
	for _, f := range apq.ctx.Fields {
		if !actionplan.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if apq.path != nil {
		prev, err := apq.path(ctx)
		if err != nil {
			return err
		}
		apq.sql = prev
	}
	return nil
}

func (apq *ActionPlanQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ActionPlan, error) {
	var (
		nodes       = []*ActionPlan{}
		_spec       = apq.querySpec()
		loadedTypes = [5]bool{
			apq.withStandard != nil,
			apq.withRisk != nil,
			apq.withControl != nil,
			apq.withUser != nil,
			apq.withProgram != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ActionPlan).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ActionPlan{config: apq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = apq.schemaConfig.ActionPlan
	ctx = internal.NewSchemaConfigContext(ctx, apq.schemaConfig)
	if len(apq.modifiers) > 0 {
		_spec.Modifiers = apq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, apq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := apq.withStandard; query != nil {
		if err := apq.loadStandard(ctx, query, nodes,
			func(n *ActionPlan) { n.Edges.Standard = []*Standard{} },
			func(n *ActionPlan, e *Standard) { n.Edges.Standard = append(n.Edges.Standard, e) }); err != nil {
			return nil, err
		}
	}
	if query := apq.withRisk; query != nil {
		if err := apq.loadRisk(ctx, query, nodes,
			func(n *ActionPlan) { n.Edges.Risk = []*Risk{} },
			func(n *ActionPlan, e *Risk) { n.Edges.Risk = append(n.Edges.Risk, e) }); err != nil {
			return nil, err
		}
	}
	if query := apq.withControl; query != nil {
		if err := apq.loadControl(ctx, query, nodes,
			func(n *ActionPlan) { n.Edges.Control = []*Control{} },
			func(n *ActionPlan, e *Control) { n.Edges.Control = append(n.Edges.Control, e) }); err != nil {
			return nil, err
		}
	}
	if query := apq.withUser; query != nil {
		if err := apq.loadUser(ctx, query, nodes,
			func(n *ActionPlan) { n.Edges.User = []*User{} },
			func(n *ActionPlan, e *User) { n.Edges.User = append(n.Edges.User, e) }); err != nil {
			return nil, err
		}
	}
	if query := apq.withProgram; query != nil {
		if err := apq.loadProgram(ctx, query, nodes,
			func(n *ActionPlan) { n.Edges.Program = []*Program{} },
			func(n *ActionPlan, e *Program) { n.Edges.Program = append(n.Edges.Program, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range apq.withNamedStandard {
		if err := apq.loadStandard(ctx, query, nodes,
			func(n *ActionPlan) { n.appendNamedStandard(name) },
			func(n *ActionPlan, e *Standard) { n.appendNamedStandard(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range apq.withNamedRisk {
		if err := apq.loadRisk(ctx, query, nodes,
			func(n *ActionPlan) { n.appendNamedRisk(name) },
			func(n *ActionPlan, e *Risk) { n.appendNamedRisk(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range apq.withNamedControl {
		if err := apq.loadControl(ctx, query, nodes,
			func(n *ActionPlan) { n.appendNamedControl(name) },
			func(n *ActionPlan, e *Control) { n.appendNamedControl(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range apq.withNamedUser {
		if err := apq.loadUser(ctx, query, nodes,
			func(n *ActionPlan) { n.appendNamedUser(name) },
			func(n *ActionPlan, e *User) { n.appendNamedUser(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range apq.withNamedProgram {
		if err := apq.loadProgram(ctx, query, nodes,
			func(n *ActionPlan) { n.appendNamedProgram(name) },
			func(n *ActionPlan, e *Program) { n.appendNamedProgram(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range apq.loadTotal {
		if err := apq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (apq *ActionPlanQuery) loadStandard(ctx context.Context, query *StandardQuery, nodes []*ActionPlan, init func(*ActionPlan), assign func(*ActionPlan, *Standard)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ActionPlan)
	nids := make(map[string]map[*ActionPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actionplan.StandardTable)
		joinT.Schema(apq.schemaConfig.StandardActionplans)
		s.Join(joinT).On(s.C(standard.FieldID), joinT.C(actionplan.StandardPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(actionplan.StandardPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actionplan.StandardPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ActionPlan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Standard](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "standard" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (apq *ActionPlanQuery) loadRisk(ctx context.Context, query *RiskQuery, nodes []*ActionPlan, init func(*ActionPlan), assign func(*ActionPlan, *Risk)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ActionPlan)
	nids := make(map[string]map[*ActionPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actionplan.RiskTable)
		joinT.Schema(apq.schemaConfig.RiskActionplans)
		s.Join(joinT).On(s.C(risk.FieldID), joinT.C(actionplan.RiskPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(actionplan.RiskPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actionplan.RiskPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ActionPlan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Risk](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "risk" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (apq *ActionPlanQuery) loadControl(ctx context.Context, query *ControlQuery, nodes []*ActionPlan, init func(*ActionPlan), assign func(*ActionPlan, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ActionPlan)
	nids := make(map[string]map[*ActionPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actionplan.ControlTable)
		joinT.Schema(apq.schemaConfig.ControlActionplans)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(actionplan.ControlPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(actionplan.ControlPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actionplan.ControlPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ActionPlan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (apq *ActionPlanQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*ActionPlan, init func(*ActionPlan), assign func(*ActionPlan, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ActionPlan)
	nids := make(map[string]map[*ActionPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actionplan.UserTable)
		joinT.Schema(apq.schemaConfig.UserActionplans)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(actionplan.UserPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(actionplan.UserPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actionplan.UserPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ActionPlan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "user" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (apq *ActionPlanQuery) loadProgram(ctx context.Context, query *ProgramQuery, nodes []*ActionPlan, init func(*ActionPlan), assign func(*ActionPlan, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ActionPlan)
	nids := make(map[string]map[*ActionPlan]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actionplan.ProgramTable)
		joinT.Schema(apq.schemaConfig.ProgramActionplans)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(actionplan.ProgramPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(actionplan.ProgramPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actionplan.ProgramPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ActionPlan]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "program" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (apq *ActionPlanQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := apq.querySpec()
	_spec.Node.Schema = apq.schemaConfig.ActionPlan
	ctx = internal.NewSchemaConfigContext(ctx, apq.schemaConfig)
	if len(apq.modifiers) > 0 {
		_spec.Modifiers = apq.modifiers
	}
	_spec.Node.Columns = apq.ctx.Fields
	if len(apq.ctx.Fields) > 0 {
		_spec.Unique = apq.ctx.Unique != nil && *apq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, apq.driver, _spec)
}

func (apq *ActionPlanQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(actionplan.Table, actionplan.Columns, sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString))
	_spec.From = apq.sql
	if unique := apq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if apq.path != nil {
		_spec.Unique = true
	}
	if fields := apq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, actionplan.FieldID)
		for i := range fields {
			if fields[i] != actionplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := apq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := apq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := apq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := apq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (apq *ActionPlanQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(apq.driver.Dialect())
	t1 := builder.Table(actionplan.Table)
	columns := apq.ctx.Fields
	if len(columns) == 0 {
		columns = actionplan.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if apq.sql != nil {
		selector = apq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if apq.ctx.Unique != nil && *apq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(apq.schemaConfig.ActionPlan)
	ctx = internal.NewSchemaConfigContext(ctx, apq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range apq.modifiers {
		m(selector)
	}
	for _, p := range apq.predicates {
		p(selector)
	}
	for _, p := range apq.order {
		p(selector)
	}
	if offset := apq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := apq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (apq *ActionPlanQuery) Modify(modifiers ...func(s *sql.Selector)) *ActionPlanSelect {
	apq.modifiers = append(apq.modifiers, modifiers...)
	return apq.Select()
}

// WithNamedStandard tells the query-builder to eager-load the nodes that are connected to the "standard"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (apq *ActionPlanQuery) WithNamedStandard(name string, opts ...func(*StandardQuery)) *ActionPlanQuery {
	query := (&StandardClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if apq.withNamedStandard == nil {
		apq.withNamedStandard = make(map[string]*StandardQuery)
	}
	apq.withNamedStandard[name] = query
	return apq
}

// WithNamedRisk tells the query-builder to eager-load the nodes that are connected to the "risk"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (apq *ActionPlanQuery) WithNamedRisk(name string, opts ...func(*RiskQuery)) *ActionPlanQuery {
	query := (&RiskClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if apq.withNamedRisk == nil {
		apq.withNamedRisk = make(map[string]*RiskQuery)
	}
	apq.withNamedRisk[name] = query
	return apq
}

// WithNamedControl tells the query-builder to eager-load the nodes that are connected to the "control"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (apq *ActionPlanQuery) WithNamedControl(name string, opts ...func(*ControlQuery)) *ActionPlanQuery {
	query := (&ControlClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if apq.withNamedControl == nil {
		apq.withNamedControl = make(map[string]*ControlQuery)
	}
	apq.withNamedControl[name] = query
	return apq
}

// WithNamedUser tells the query-builder to eager-load the nodes that are connected to the "user"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (apq *ActionPlanQuery) WithNamedUser(name string, opts ...func(*UserQuery)) *ActionPlanQuery {
	query := (&UserClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if apq.withNamedUser == nil {
		apq.withNamedUser = make(map[string]*UserQuery)
	}
	apq.withNamedUser[name] = query
	return apq
}

// WithNamedProgram tells the query-builder to eager-load the nodes that are connected to the "program"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (apq *ActionPlanQuery) WithNamedProgram(name string, opts ...func(*ProgramQuery)) *ActionPlanQuery {
	query := (&ProgramClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if apq.withNamedProgram == nil {
		apq.withNamedProgram = make(map[string]*ProgramQuery)
	}
	apq.withNamedProgram[name] = query
	return apq
}

// ActionPlanGroupBy is the group-by builder for ActionPlan entities.
type ActionPlanGroupBy struct {
	selector
	build *ActionPlanQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (apgb *ActionPlanGroupBy) Aggregate(fns ...AggregateFunc) *ActionPlanGroupBy {
	apgb.fns = append(apgb.fns, fns...)
	return apgb
}

// Scan applies the selector query and scans the result into the given value.
func (apgb *ActionPlanGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, apgb.build.ctx, ent.OpQueryGroupBy)
	if err := apgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ActionPlanQuery, *ActionPlanGroupBy](ctx, apgb.build, apgb, apgb.build.inters, v)
}

func (apgb *ActionPlanGroupBy) sqlScan(ctx context.Context, root *ActionPlanQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(apgb.fns))
	for _, fn := range apgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*apgb.flds)+len(apgb.fns))
		for _, f := range *apgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*apgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := apgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ActionPlanSelect is the builder for selecting fields of ActionPlan entities.
type ActionPlanSelect struct {
	*ActionPlanQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (aps *ActionPlanSelect) Aggregate(fns ...AggregateFunc) *ActionPlanSelect {
	aps.fns = append(aps.fns, fns...)
	return aps
}

// Scan applies the selector query and scans the result into the given value.
func (aps *ActionPlanSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, aps.ctx, ent.OpQuerySelect)
	if err := aps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ActionPlanQuery, *ActionPlanSelect](ctx, aps.ActionPlanQuery, aps, aps.inters, v)
}

func (aps *ActionPlanSelect) sqlScan(ctx context.Context, root *ActionPlanQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(aps.fns))
	for _, fn := range aps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*aps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (aps *ActionPlanSelect) Modify(modifiers ...func(s *sql.Selector)) *ActionPlanSelect {
	aps.modifiers = append(aps.modifiers, modifiers...)
	return aps
}
