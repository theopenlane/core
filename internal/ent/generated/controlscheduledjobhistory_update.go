// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/controlscheduledjobhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ControlScheduledJobHistoryUpdate is the builder for updating ControlScheduledJobHistory entities.
type ControlScheduledJobHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ControlScheduledJobHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ControlScheduledJobHistoryUpdate builder.
func (csjhu *ControlScheduledJobHistoryUpdate) Where(ps ...predicate.ControlScheduledJobHistory) *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.Where(ps...)
	return csjhu
}

// SetUpdatedAt sets the "updated_at" field.
func (csjhu *ControlScheduledJobHistoryUpdate) SetUpdatedAt(t time.Time) *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.SetUpdatedAt(t)
	return csjhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (csjhu *ControlScheduledJobHistoryUpdate) ClearUpdatedAt() *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.ClearUpdatedAt()
	return csjhu
}

// SetUpdatedBy sets the "updated_by" field.
func (csjhu *ControlScheduledJobHistoryUpdate) SetUpdatedBy(s string) *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.SetUpdatedBy(s)
	return csjhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (csjhu *ControlScheduledJobHistoryUpdate) SetNillableUpdatedBy(s *string) *ControlScheduledJobHistoryUpdate {
	if s != nil {
		csjhu.SetUpdatedBy(*s)
	}
	return csjhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (csjhu *ControlScheduledJobHistoryUpdate) ClearUpdatedBy() *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.ClearUpdatedBy()
	return csjhu
}

// SetDeletedAt sets the "deleted_at" field.
func (csjhu *ControlScheduledJobHistoryUpdate) SetDeletedAt(t time.Time) *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.SetDeletedAt(t)
	return csjhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csjhu *ControlScheduledJobHistoryUpdate) SetNillableDeletedAt(t *time.Time) *ControlScheduledJobHistoryUpdate {
	if t != nil {
		csjhu.SetDeletedAt(*t)
	}
	return csjhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (csjhu *ControlScheduledJobHistoryUpdate) ClearDeletedAt() *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.ClearDeletedAt()
	return csjhu
}

// SetDeletedBy sets the "deleted_by" field.
func (csjhu *ControlScheduledJobHistoryUpdate) SetDeletedBy(s string) *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.SetDeletedBy(s)
	return csjhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (csjhu *ControlScheduledJobHistoryUpdate) SetNillableDeletedBy(s *string) *ControlScheduledJobHistoryUpdate {
	if s != nil {
		csjhu.SetDeletedBy(*s)
	}
	return csjhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (csjhu *ControlScheduledJobHistoryUpdate) ClearDeletedBy() *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.ClearDeletedBy()
	return csjhu
}

// SetOwnerID sets the "owner_id" field.
func (csjhu *ControlScheduledJobHistoryUpdate) SetOwnerID(s string) *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.SetOwnerID(s)
	return csjhu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (csjhu *ControlScheduledJobHistoryUpdate) SetNillableOwnerID(s *string) *ControlScheduledJobHistoryUpdate {
	if s != nil {
		csjhu.SetOwnerID(*s)
	}
	return csjhu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (csjhu *ControlScheduledJobHistoryUpdate) ClearOwnerID() *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.ClearOwnerID()
	return csjhu
}

// SetJobID sets the "job_id" field.
func (csjhu *ControlScheduledJobHistoryUpdate) SetJobID(s string) *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.SetJobID(s)
	return csjhu
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (csjhu *ControlScheduledJobHistoryUpdate) SetNillableJobID(s *string) *ControlScheduledJobHistoryUpdate {
	if s != nil {
		csjhu.SetJobID(*s)
	}
	return csjhu
}

// SetConfiguration sets the "configuration" field.
func (csjhu *ControlScheduledJobHistoryUpdate) SetConfiguration(mc models.JobConfiguration) *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.SetConfiguration(mc)
	return csjhu
}

// SetNillableConfiguration sets the "configuration" field if the given value is not nil.
func (csjhu *ControlScheduledJobHistoryUpdate) SetNillableConfiguration(mc *models.JobConfiguration) *ControlScheduledJobHistoryUpdate {
	if mc != nil {
		csjhu.SetConfiguration(*mc)
	}
	return csjhu
}

// SetCadence sets the "cadence" field.
func (csjhu *ControlScheduledJobHistoryUpdate) SetCadence(mc models.JobCadence) *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.SetCadence(mc)
	return csjhu
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (csjhu *ControlScheduledJobHistoryUpdate) SetNillableCadence(mc *models.JobCadence) *ControlScheduledJobHistoryUpdate {
	if mc != nil {
		csjhu.SetCadence(*mc)
	}
	return csjhu
}

// ClearCadence clears the value of the "cadence" field.
func (csjhu *ControlScheduledJobHistoryUpdate) ClearCadence() *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.ClearCadence()
	return csjhu
}

// SetCron sets the "cron" field.
func (csjhu *ControlScheduledJobHistoryUpdate) SetCron(m models.Cron) *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.SetCron(m)
	return csjhu
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (csjhu *ControlScheduledJobHistoryUpdate) SetNillableCron(m *models.Cron) *ControlScheduledJobHistoryUpdate {
	if m != nil {
		csjhu.SetCron(*m)
	}
	return csjhu
}

// ClearCron clears the value of the "cron" field.
func (csjhu *ControlScheduledJobHistoryUpdate) ClearCron() *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.ClearCron()
	return csjhu
}

// SetJobRunnerID sets the "job_runner_id" field.
func (csjhu *ControlScheduledJobHistoryUpdate) SetJobRunnerID(s string) *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.SetJobRunnerID(s)
	return csjhu
}

// SetNillableJobRunnerID sets the "job_runner_id" field if the given value is not nil.
func (csjhu *ControlScheduledJobHistoryUpdate) SetNillableJobRunnerID(s *string) *ControlScheduledJobHistoryUpdate {
	if s != nil {
		csjhu.SetJobRunnerID(*s)
	}
	return csjhu
}

// ClearJobRunnerID clears the value of the "job_runner_id" field.
func (csjhu *ControlScheduledJobHistoryUpdate) ClearJobRunnerID() *ControlScheduledJobHistoryUpdate {
	csjhu.mutation.ClearJobRunnerID()
	return csjhu
}

// Mutation returns the ControlScheduledJobHistoryMutation object of the builder.
func (csjhu *ControlScheduledJobHistoryUpdate) Mutation() *ControlScheduledJobHistoryMutation {
	return csjhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csjhu *ControlScheduledJobHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := csjhu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, csjhu.sqlSave, csjhu.mutation, csjhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csjhu *ControlScheduledJobHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := csjhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csjhu *ControlScheduledJobHistoryUpdate) Exec(ctx context.Context) error {
	_, err := csjhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csjhu *ControlScheduledJobHistoryUpdate) ExecX(ctx context.Context) {
	if err := csjhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csjhu *ControlScheduledJobHistoryUpdate) defaults() error {
	if _, ok := csjhu.mutation.UpdatedAt(); !ok && !csjhu.mutation.UpdatedAtCleared() {
		if controlscheduledjobhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlscheduledjobhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlscheduledjobhistory.UpdateDefaultUpdatedAt()
		csjhu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csjhu *ControlScheduledJobHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlScheduledJobHistoryUpdate {
	csjhu.modifiers = append(csjhu.modifiers, modifiers...)
	return csjhu
}

func (csjhu *ControlScheduledJobHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(controlscheduledjobhistory.Table, controlscheduledjobhistory.Columns, sqlgraph.NewFieldSpec(controlscheduledjobhistory.FieldID, field.TypeString))
	if ps := csjhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if csjhu.mutation.RefCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldRef, field.TypeString)
	}
	if csjhu.mutation.CreatedAtCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := csjhu.mutation.UpdatedAt(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if csjhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldUpdatedAt, field.TypeTime)
	}
	if csjhu.mutation.CreatedByCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := csjhu.mutation.UpdatedBy(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if csjhu.mutation.UpdatedByCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := csjhu.mutation.DeletedAt(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if csjhu.mutation.DeletedAtCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := csjhu.mutation.DeletedBy(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldDeletedBy, field.TypeString, value)
	}
	if csjhu.mutation.DeletedByCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := csjhu.mutation.OwnerID(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldOwnerID, field.TypeString, value)
	}
	if csjhu.mutation.OwnerIDCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := csjhu.mutation.JobID(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldJobID, field.TypeString, value)
	}
	if value, ok := csjhu.mutation.Configuration(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := csjhu.mutation.Cadence(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldCadence, field.TypeJSON, value)
	}
	if csjhu.mutation.CadenceCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldCadence, field.TypeJSON)
	}
	if value, ok := csjhu.mutation.Cron(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldCron, field.TypeString, value)
	}
	if csjhu.mutation.CronCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldCron, field.TypeString)
	}
	if value, ok := csjhu.mutation.JobRunnerID(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldJobRunnerID, field.TypeString, value)
	}
	if csjhu.mutation.JobRunnerIDCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldJobRunnerID, field.TypeString)
	}
	_spec.Node.Schema = csjhu.schemaConfig.ControlScheduledJobHistory
	ctx = internal.NewSchemaConfigContext(ctx, csjhu.schemaConfig)
	_spec.AddModifiers(csjhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, csjhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlscheduledjobhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csjhu.mutation.done = true
	return n, nil
}

// ControlScheduledJobHistoryUpdateOne is the builder for updating a single ControlScheduledJobHistory entity.
type ControlScheduledJobHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ControlScheduledJobHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetUpdatedAt(t time.Time) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.SetUpdatedAt(t)
	return csjhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) ClearUpdatedAt() *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.ClearUpdatedAt()
	return csjhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetUpdatedBy(s string) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.SetUpdatedBy(s)
	return csjhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetNillableUpdatedBy(s *string) *ControlScheduledJobHistoryUpdateOne {
	if s != nil {
		csjhuo.SetUpdatedBy(*s)
	}
	return csjhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) ClearUpdatedBy() *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.ClearUpdatedBy()
	return csjhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetDeletedAt(t time.Time) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.SetDeletedAt(t)
	return csjhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *ControlScheduledJobHistoryUpdateOne {
	if t != nil {
		csjhuo.SetDeletedAt(*t)
	}
	return csjhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) ClearDeletedAt() *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.ClearDeletedAt()
	return csjhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetDeletedBy(s string) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.SetDeletedBy(s)
	return csjhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetNillableDeletedBy(s *string) *ControlScheduledJobHistoryUpdateOne {
	if s != nil {
		csjhuo.SetDeletedBy(*s)
	}
	return csjhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) ClearDeletedBy() *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.ClearDeletedBy()
	return csjhuo
}

// SetOwnerID sets the "owner_id" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetOwnerID(s string) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.SetOwnerID(s)
	return csjhuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetNillableOwnerID(s *string) *ControlScheduledJobHistoryUpdateOne {
	if s != nil {
		csjhuo.SetOwnerID(*s)
	}
	return csjhuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) ClearOwnerID() *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.ClearOwnerID()
	return csjhuo
}

// SetJobID sets the "job_id" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetJobID(s string) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.SetJobID(s)
	return csjhuo
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetNillableJobID(s *string) *ControlScheduledJobHistoryUpdateOne {
	if s != nil {
		csjhuo.SetJobID(*s)
	}
	return csjhuo
}

// SetConfiguration sets the "configuration" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetConfiguration(mc models.JobConfiguration) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.SetConfiguration(mc)
	return csjhuo
}

// SetNillableConfiguration sets the "configuration" field if the given value is not nil.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetNillableConfiguration(mc *models.JobConfiguration) *ControlScheduledJobHistoryUpdateOne {
	if mc != nil {
		csjhuo.SetConfiguration(*mc)
	}
	return csjhuo
}

// SetCadence sets the "cadence" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetCadence(mc models.JobCadence) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.SetCadence(mc)
	return csjhuo
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetNillableCadence(mc *models.JobCadence) *ControlScheduledJobHistoryUpdateOne {
	if mc != nil {
		csjhuo.SetCadence(*mc)
	}
	return csjhuo
}

// ClearCadence clears the value of the "cadence" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) ClearCadence() *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.ClearCadence()
	return csjhuo
}

// SetCron sets the "cron" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetCron(m models.Cron) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.SetCron(m)
	return csjhuo
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetNillableCron(m *models.Cron) *ControlScheduledJobHistoryUpdateOne {
	if m != nil {
		csjhuo.SetCron(*m)
	}
	return csjhuo
}

// ClearCron clears the value of the "cron" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) ClearCron() *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.ClearCron()
	return csjhuo
}

// SetJobRunnerID sets the "job_runner_id" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetJobRunnerID(s string) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.SetJobRunnerID(s)
	return csjhuo
}

// SetNillableJobRunnerID sets the "job_runner_id" field if the given value is not nil.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SetNillableJobRunnerID(s *string) *ControlScheduledJobHistoryUpdateOne {
	if s != nil {
		csjhuo.SetJobRunnerID(*s)
	}
	return csjhuo
}

// ClearJobRunnerID clears the value of the "job_runner_id" field.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) ClearJobRunnerID() *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.ClearJobRunnerID()
	return csjhuo
}

// Mutation returns the ControlScheduledJobHistoryMutation object of the builder.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) Mutation() *ControlScheduledJobHistoryMutation {
	return csjhuo.mutation
}

// Where appends a list predicates to the ControlScheduledJobHistoryUpdate builder.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) Where(ps ...predicate.ControlScheduledJobHistory) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.mutation.Where(ps...)
	return csjhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) Select(field string, fields ...string) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.fields = append([]string{field}, fields...)
	return csjhuo
}

// Save executes the query and returns the updated ControlScheduledJobHistory entity.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) Save(ctx context.Context) (*ControlScheduledJobHistory, error) {
	if err := csjhuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, csjhuo.sqlSave, csjhuo.mutation, csjhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) SaveX(ctx context.Context) *ControlScheduledJobHistory {
	node, err := csjhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := csjhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := csjhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) defaults() error {
	if _, ok := csjhuo.mutation.UpdatedAt(); !ok && !csjhuo.mutation.UpdatedAtCleared() {
		if controlscheduledjobhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlscheduledjobhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlscheduledjobhistory.UpdateDefaultUpdatedAt()
		csjhuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (csjhuo *ControlScheduledJobHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlScheduledJobHistoryUpdateOne {
	csjhuo.modifiers = append(csjhuo.modifiers, modifiers...)
	return csjhuo
}

func (csjhuo *ControlScheduledJobHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ControlScheduledJobHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(controlscheduledjobhistory.Table, controlscheduledjobhistory.Columns, sqlgraph.NewFieldSpec(controlscheduledjobhistory.FieldID, field.TypeString))
	id, ok := csjhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ControlScheduledJobHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csjhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, controlscheduledjobhistory.FieldID)
		for _, f := range fields {
			if !controlscheduledjobhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != controlscheduledjobhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csjhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if csjhuo.mutation.RefCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldRef, field.TypeString)
	}
	if csjhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := csjhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if csjhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldUpdatedAt, field.TypeTime)
	}
	if csjhuo.mutation.CreatedByCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := csjhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if csjhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := csjhuo.mutation.DeletedAt(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if csjhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := csjhuo.mutation.DeletedBy(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldDeletedBy, field.TypeString, value)
	}
	if csjhuo.mutation.DeletedByCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := csjhuo.mutation.OwnerID(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldOwnerID, field.TypeString, value)
	}
	if csjhuo.mutation.OwnerIDCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := csjhuo.mutation.JobID(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldJobID, field.TypeString, value)
	}
	if value, ok := csjhuo.mutation.Configuration(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := csjhuo.mutation.Cadence(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldCadence, field.TypeJSON, value)
	}
	if csjhuo.mutation.CadenceCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldCadence, field.TypeJSON)
	}
	if value, ok := csjhuo.mutation.Cron(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldCron, field.TypeString, value)
	}
	if csjhuo.mutation.CronCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldCron, field.TypeString)
	}
	if value, ok := csjhuo.mutation.JobRunnerID(); ok {
		_spec.SetField(controlscheduledjobhistory.FieldJobRunnerID, field.TypeString, value)
	}
	if csjhuo.mutation.JobRunnerIDCleared() {
		_spec.ClearField(controlscheduledjobhistory.FieldJobRunnerID, field.TypeString)
	}
	_spec.Node.Schema = csjhuo.schemaConfig.ControlScheduledJobHistory
	ctx = internal.NewSchemaConfigContext(ctx, csjhuo.schemaConfig)
	_spec.AddModifiers(csjhuo.modifiers...)
	_node = &ControlScheduledJobHistory{config: csjhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csjhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlscheduledjobhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csjhuo.mutation.done = true
	return _node, nil
}
