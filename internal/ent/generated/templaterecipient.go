// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/templaterecipient"
	"github.com/theopenlane/core/pkg/enums"
)

// TemplateRecipient is the model entity for the TemplateRecipient schema.
type TemplateRecipient struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the verification token sent to the user via email
	Token string `json:"token,omitempty"`
	// when the token expires
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// the recipient email for the questionairre
	Email string `json:"email,omitempty"`
	// the comparison secret to verify the token's signature
	Secret string `json:"secret,omitempty"`
	// the ID of the template this token belongs to
	TemplateID string `json:"template_id,omitempty"`
	// the number of attempts made to send the questionairre to the user, maximum of 5
	SendAttempts int `json:"send_attempts,omitempty"`
	// the status of this token. Defaults to active
	Status enums.TemplateRecipientStatus `json:"status,omitempty"`
	// the ID of the document this recipient belongs to. This will only be available if the survey was ever filled
	DocumentDataID string `json:"document_data_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TemplateRecipientQuery when eager-loading is set.
	Edges        TemplateRecipientEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TemplateRecipientEdges holds the relations/edges for other nodes in the graph.
type TemplateRecipientEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Document holds the value of the document edge.
	Document *DocumentData `json:"document,omitempty"`
	// Template holds the value of the template edge.
	Template *Template `json:"template,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedEvents map[string][]*Event
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TemplateRecipientEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// DocumentOrErr returns the Document value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TemplateRecipientEdges) DocumentOrErr() (*DocumentData, error) {
	if e.Document != nil {
		return e.Document, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: documentdata.Label}
	}
	return nil, &NotLoadedError{edge: "document"}
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TemplateRecipientEdges) TemplateOrErr() (*Template, error) {
	if e.Template != nil {
		return e.Template, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: template.Label}
	}
	return nil, &NotLoadedError{edge: "template"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e TemplateRecipientEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[3] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TemplateRecipient) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case templaterecipient.FieldSendAttempts:
			values[i] = new(sql.NullInt64)
		case templaterecipient.FieldID, templaterecipient.FieldCreatedBy, templaterecipient.FieldUpdatedBy, templaterecipient.FieldDeletedBy, templaterecipient.FieldOwnerID, templaterecipient.FieldToken, templaterecipient.FieldEmail, templaterecipient.FieldSecret, templaterecipient.FieldTemplateID, templaterecipient.FieldStatus, templaterecipient.FieldDocumentDataID:
			values[i] = new(sql.NullString)
		case templaterecipient.FieldCreatedAt, templaterecipient.FieldUpdatedAt, templaterecipient.FieldDeletedAt, templaterecipient.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TemplateRecipient fields.
func (tr *TemplateRecipient) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case templaterecipient.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				tr.ID = value.String
			}
		case templaterecipient.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tr.CreatedAt = value.Time
			}
		case templaterecipient.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tr.UpdatedAt = value.Time
			}
		case templaterecipient.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				tr.CreatedBy = value.String
			}
		case templaterecipient.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				tr.UpdatedBy = value.String
			}
		case templaterecipient.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				tr.DeletedAt = value.Time
			}
		case templaterecipient.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				tr.DeletedBy = value.String
			}
		case templaterecipient.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				tr.OwnerID = value.String
			}
		case templaterecipient.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				tr.Token = value.String
			}
		case templaterecipient.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				tr.ExpiresAt = value.Time
			}
		case templaterecipient.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				tr.Email = value.String
			}
		case templaterecipient.FieldSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value.Valid {
				tr.Secret = value.String
			}
		case templaterecipient.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				tr.TemplateID = value.String
			}
		case templaterecipient.FieldSendAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field send_attempts", values[i])
			} else if value.Valid {
				tr.SendAttempts = int(value.Int64)
			}
		case templaterecipient.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				tr.Status = enums.TemplateRecipientStatus(value.String)
			}
		case templaterecipient.FieldDocumentDataID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_data_id", values[i])
			} else if value.Valid {
				tr.DocumentDataID = value.String
			}
		default:
			tr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TemplateRecipient.
// This includes values selected through modifiers, order, etc.
func (tr *TemplateRecipient) Value(name string) (ent.Value, error) {
	return tr.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the TemplateRecipient entity.
func (tr *TemplateRecipient) QueryOwner() *OrganizationQuery {
	return NewTemplateRecipientClient(tr.config).QueryOwner(tr)
}

// QueryDocument queries the "document" edge of the TemplateRecipient entity.
func (tr *TemplateRecipient) QueryDocument() *DocumentDataQuery {
	return NewTemplateRecipientClient(tr.config).QueryDocument(tr)
}

// QueryTemplate queries the "template" edge of the TemplateRecipient entity.
func (tr *TemplateRecipient) QueryTemplate() *TemplateQuery {
	return NewTemplateRecipientClient(tr.config).QueryTemplate(tr)
}

// QueryEvents queries the "events" edge of the TemplateRecipient entity.
func (tr *TemplateRecipient) QueryEvents() *EventQuery {
	return NewTemplateRecipientClient(tr.config).QueryEvents(tr)
}

// Update returns a builder for updating this TemplateRecipient.
// Note that you need to call TemplateRecipient.Unwrap() before calling this method if this TemplateRecipient
// was returned from a transaction, and the transaction was committed or rolled back.
func (tr *TemplateRecipient) Update() *TemplateRecipientUpdateOne {
	return NewTemplateRecipientClient(tr.config).UpdateOne(tr)
}

// Unwrap unwraps the TemplateRecipient entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tr *TemplateRecipient) Unwrap() *TemplateRecipient {
	_tx, ok := tr.config.driver.(*txDriver)
	if !ok {
		panic("generated: TemplateRecipient is not a transactional entity")
	}
	tr.config.driver = _tx.drv
	return tr
}

// String implements the fmt.Stringer.
func (tr *TemplateRecipient) String() string {
	var builder strings.Builder
	builder.WriteString("TemplateRecipient(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(tr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(tr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(tr.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(tr.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(tr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(tr.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(tr.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(tr.Token)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(tr.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(tr.Email)
	builder.WriteString(", ")
	builder.WriteString("secret=")
	builder.WriteString(tr.Secret)
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(tr.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("send_attempts=")
	builder.WriteString(fmt.Sprintf("%v", tr.SendAttempts))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", tr.Status))
	builder.WriteString(", ")
	builder.WriteString("document_data_id=")
	builder.WriteString(tr.DocumentDataID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (tr *TemplateRecipient) NamedEvents(name string) ([]*Event, error) {
	if tr.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := tr.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (tr *TemplateRecipient) appendNamedEvents(name string, edges ...*Event) {
	if tr.Edges.namedEvents == nil {
		tr.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		tr.Edges.namedEvents[name] = []*Event{}
	} else {
		tr.Edges.namedEvents[name] = append(tr.Edges.namedEvents[name], edges...)
	}
}

// TemplateRecipients is a parsable slice of TemplateRecipient.
type TemplateRecipients []*TemplateRecipient
