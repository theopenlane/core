// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/assessment"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/pkg/enums"
)

// Assessment is the model entity for the Assessment schema.
type Assessment struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the assessment, e.g. cloud providers, marketing team
	Name string `json:"name,omitempty"`
	// AssessmentType holds the value of the "assessment_type" field.
	AssessmentType enums.AssessmentType `json:"assessment_type,omitempty"`
	// the questionnaire template id associated with the assessment
	QuestionnaireID string `json:"questionnaire_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssessmentQuery when eager-loading is set.
	Edges        AssessmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssessmentEdges holds the relations/edges for other nodes in the graph.
type AssessmentEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// AssessmentResponses holds the value of the assessment_responses edge.
	AssessmentResponses []*AssessmentResponse `json:"assessment_responses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedUsers               map[string][]*User
	namedAssessmentResponses map[string][]*AssessmentResponse
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssessmentEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e AssessmentEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// AssessmentResponsesOrErr returns the AssessmentResponses value or an error if the edge
// was not loaded in eager-loading.
func (e AssessmentEdges) AssessmentResponsesOrErr() ([]*AssessmentResponse, error) {
	if e.loadedTypes[2] {
		return e.AssessmentResponses, nil
	}
	return nil, &NotLoadedError{edge: "assessment_responses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Assessment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assessment.FieldTags:
			values[i] = new([]byte)
		case assessment.FieldID, assessment.FieldCreatedBy, assessment.FieldUpdatedBy, assessment.FieldDeletedBy, assessment.FieldOwnerID, assessment.FieldName, assessment.FieldAssessmentType, assessment.FieldQuestionnaireID:
			values[i] = new(sql.NullString)
		case assessment.FieldCreatedAt, assessment.FieldUpdatedAt, assessment.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Assessment fields.
func (a *Assessment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assessment.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case assessment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				a.CreatedAt = value.Time
			}
		case assessment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				a.UpdatedAt = value.Time
			}
		case assessment.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				a.CreatedBy = value.String
			}
		case assessment.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				a.UpdatedBy = value.String
			}
		case assessment.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				a.DeletedAt = value.Time
			}
		case assessment.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				a.DeletedBy = value.String
			}
		case assessment.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &a.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case assessment.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				a.OwnerID = value.String
			}
		case assessment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = value.String
			}
		case assessment.FieldAssessmentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_type", values[i])
			} else if value.Valid {
				a.AssessmentType = enums.AssessmentType(value.String)
			}
		case assessment.FieldQuestionnaireID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field questionnaire_id", values[i])
			} else if value.Valid {
				a.QuestionnaireID = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Assessment.
// This includes values selected through modifiers, order, etc.
func (a *Assessment) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Assessment entity.
func (a *Assessment) QueryOwner() *OrganizationQuery {
	return NewAssessmentClient(a.config).QueryOwner(a)
}

// QueryUsers queries the "users" edge of the Assessment entity.
func (a *Assessment) QueryUsers() *UserQuery {
	return NewAssessmentClient(a.config).QueryUsers(a)
}

// QueryAssessmentResponses queries the "assessment_responses" edge of the Assessment entity.
func (a *Assessment) QueryAssessmentResponses() *AssessmentResponseQuery {
	return NewAssessmentClient(a.config).QueryAssessmentResponses(a)
}

// Update returns a builder for updating this Assessment.
// Note that you need to call Assessment.Unwrap() before calling this method if this Assessment
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Assessment) Update() *AssessmentUpdateOne {
	return NewAssessmentClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Assessment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Assessment) Unwrap() *Assessment {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("generated: Assessment is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Assessment) String() string {
	var builder strings.Builder
	builder.WriteString("Assessment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("created_at=")
	builder.WriteString(a.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(a.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(a.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(a.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(a.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(a.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", a.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(a.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(a.Name)
	builder.WriteString(", ")
	builder.WriteString("assessment_type=")
	builder.WriteString(fmt.Sprintf("%v", a.AssessmentType))
	builder.WriteString(", ")
	builder.WriteString("questionnaire_id=")
	builder.WriteString(a.QuestionnaireID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Assessment) NamedUsers(name string) ([]*User, error) {
	if a.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Assessment) appendNamedUsers(name string, edges ...*User) {
	if a.Edges.namedUsers == nil {
		a.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		a.Edges.namedUsers[name] = []*User{}
	} else {
		a.Edges.namedUsers[name] = append(a.Edges.namedUsers[name], edges...)
	}
}

// NamedAssessmentResponses returns the AssessmentResponses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (a *Assessment) NamedAssessmentResponses(name string) ([]*AssessmentResponse, error) {
	if a.Edges.namedAssessmentResponses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := a.Edges.namedAssessmentResponses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (a *Assessment) appendNamedAssessmentResponses(name string, edges ...*AssessmentResponse) {
	if a.Edges.namedAssessmentResponses == nil {
		a.Edges.namedAssessmentResponses = make(map[string][]*AssessmentResponse)
	}
	if len(edges) == 0 {
		a.Edges.namedAssessmentResponses[name] = []*AssessmentResponse{}
	} else {
		a.Edges.namedAssessmentResponses[name] = append(a.Edges.namedAssessmentResponses[name], edges...)
	}
}

// Assessments is a parsable slice of Assessment.
type Assessments []*Assessment
