// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/assessment"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/pkg/enums"
)

// Assessment is the model entity for the Assessment schema.
type Assessment struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the assessment, e.g. cloud providers, marketing team
	Name string `json:"name,omitempty"`
	// AssessmentType holds the value of the "assessment_type" field.
	AssessmentType enums.AssesmentType `json:"assessment_type,omitempty"`
	// the template id associated with the assessment
	TemplateID string `json:"template_id,omitempty"`
	// the id of the group that owns the assessment
	AssessmentOwnerID string `json:"assessment_owner_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AssessmentQuery when eager-loading is set.
	Edges        AssessmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AssessmentEdges holds the relations/edges for other nodes in the graph.
type AssessmentEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// groups that are blocked from viewing or editing the risk
	BlockedGroups []*Group `json:"blocked_groups,omitempty"`
	// provides edit access to the risk to members of the group
	Editors []*Group `json:"editors,omitempty"`
	// provides view access to the risk to members of the group
	Viewers []*Group `json:"viewers,omitempty"`
	// Template holds the value of the template edge.
	Template *Template `json:"template,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Assessments holds the value of the assessments edge.
	Assessments []*Assessment `json:"assessments,omitempty"`
	// AssessmentResponses holds the value of the assessment_responses edge.
	AssessmentResponses []*AssessmentResponse `json:"assessment_responses,omitempty"`
	// TemplateResponders holds the value of the template_responders edge.
	TemplateResponders []*TemplateResponder `json:"template_responders,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
	// totalCount holds the count of the edges above.
	totalCount [9]map[string]int

	namedBlockedGroups       map[string][]*Group
	namedEditors             map[string][]*Group
	namedViewers             map[string][]*Group
	namedUsers               map[string][]*User
	namedAssessments         map[string][]*Assessment
	namedAssessmentResponses map[string][]*AssessmentResponse
	namedTemplateResponders  map[string][]*TemplateResponder
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssessmentEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// BlockedGroupsOrErr returns the BlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e AssessmentEdges) BlockedGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.BlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "blocked_groups"}
}

// EditorsOrErr returns the Editors value or an error if the edge
// was not loaded in eager-loading.
func (e AssessmentEdges) EditorsOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.Editors, nil
	}
	return nil, &NotLoadedError{edge: "editors"}
}

// ViewersOrErr returns the Viewers value or an error if the edge
// was not loaded in eager-loading.
func (e AssessmentEdges) ViewersOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.Viewers, nil
	}
	return nil, &NotLoadedError{edge: "viewers"}
}

// TemplateOrErr returns the Template value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AssessmentEdges) TemplateOrErr() (*Template, error) {
	if e.Template != nil {
		return e.Template, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: template.Label}
	}
	return nil, &NotLoadedError{edge: "template"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e AssessmentEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[5] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// AssessmentsOrErr returns the Assessments value or an error if the edge
// was not loaded in eager-loading.
func (e AssessmentEdges) AssessmentsOrErr() ([]*Assessment, error) {
	if e.loadedTypes[6] {
		return e.Assessments, nil
	}
	return nil, &NotLoadedError{edge: "assessments"}
}

// AssessmentResponsesOrErr returns the AssessmentResponses value or an error if the edge
// was not loaded in eager-loading.
func (e AssessmentEdges) AssessmentResponsesOrErr() ([]*AssessmentResponse, error) {
	if e.loadedTypes[7] {
		return e.AssessmentResponses, nil
	}
	return nil, &NotLoadedError{edge: "assessment_responses"}
}

// TemplateRespondersOrErr returns the TemplateResponders value or an error if the edge
// was not loaded in eager-loading.
func (e AssessmentEdges) TemplateRespondersOrErr() ([]*TemplateResponder, error) {
	if e.loadedTypes[8] {
		return e.TemplateResponders, nil
	}
	return nil, &NotLoadedError{edge: "template_responders"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Assessment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assessment.FieldTags:
			values[i] = new([]byte)
		case assessment.FieldID, assessment.FieldCreatedBy, assessment.FieldUpdatedBy, assessment.FieldDeletedBy, assessment.FieldOwnerID, assessment.FieldName, assessment.FieldAssessmentType, assessment.FieldTemplateID, assessment.FieldAssessmentOwnerID:
			values[i] = new(sql.NullString)
		case assessment.FieldCreatedAt, assessment.FieldUpdatedAt, assessment.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Assessment fields.
func (_m *Assessment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assessment.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case assessment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case assessment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case assessment.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case assessment.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case assessment.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case assessment.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case assessment.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case assessment.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case assessment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case assessment.FieldAssessmentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_type", values[i])
			} else if value.Valid {
				_m.AssessmentType = enums.AssesmentType(value.String)
			}
		case assessment.FieldTemplateID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field template_id", values[i])
			} else if value.Valid {
				_m.TemplateID = value.String
			}
		case assessment.FieldAssessmentOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_owner_id", values[i])
			} else if value.Valid {
				_m.AssessmentOwnerID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Assessment.
// This includes values selected through modifiers, order, etc.
func (_m *Assessment) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Assessment entity.
func (_m *Assessment) QueryOwner() *OrganizationQuery {
	return NewAssessmentClient(_m.config).QueryOwner(_m)
}

// QueryBlockedGroups queries the "blocked_groups" edge of the Assessment entity.
func (_m *Assessment) QueryBlockedGroups() *GroupQuery {
	return NewAssessmentClient(_m.config).QueryBlockedGroups(_m)
}

// QueryEditors queries the "editors" edge of the Assessment entity.
func (_m *Assessment) QueryEditors() *GroupQuery {
	return NewAssessmentClient(_m.config).QueryEditors(_m)
}

// QueryViewers queries the "viewers" edge of the Assessment entity.
func (_m *Assessment) QueryViewers() *GroupQuery {
	return NewAssessmentClient(_m.config).QueryViewers(_m)
}

// QueryTemplate queries the "template" edge of the Assessment entity.
func (_m *Assessment) QueryTemplate() *TemplateQuery {
	return NewAssessmentClient(_m.config).QueryTemplate(_m)
}

// QueryUsers queries the "users" edge of the Assessment entity.
func (_m *Assessment) QueryUsers() *UserQuery {
	return NewAssessmentClient(_m.config).QueryUsers(_m)
}

// QueryAssessments queries the "assessments" edge of the Assessment entity.
func (_m *Assessment) QueryAssessments() *AssessmentQuery {
	return NewAssessmentClient(_m.config).QueryAssessments(_m)
}

// QueryAssessmentResponses queries the "assessment_responses" edge of the Assessment entity.
func (_m *Assessment) QueryAssessmentResponses() *AssessmentResponseQuery {
	return NewAssessmentClient(_m.config).QueryAssessmentResponses(_m)
}

// QueryTemplateResponders queries the "template_responders" edge of the Assessment entity.
func (_m *Assessment) QueryTemplateResponders() *TemplateResponderQuery {
	return NewAssessmentClient(_m.config).QueryTemplateResponders(_m)
}

// Update returns a builder for updating this Assessment.
// Note that you need to call Assessment.Unwrap() before calling this method if this Assessment
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Assessment) Update() *AssessmentUpdateOne {
	return NewAssessmentClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Assessment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Assessment) Unwrap() *Assessment {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: Assessment is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Assessment) String() string {
	var builder strings.Builder
	builder.WriteString("Assessment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("assessment_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.AssessmentType))
	builder.WriteString(", ")
	builder.WriteString("template_id=")
	builder.WriteString(_m.TemplateID)
	builder.WriteString(", ")
	builder.WriteString("assessment_owner_id=")
	builder.WriteString(_m.AssessmentOwnerID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedBlockedGroups returns the BlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Assessment) NamedBlockedGroups(name string) ([]*Group, error) {
	if _m.Edges.namedBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Assessment) appendNamedBlockedGroups(name string, edges ...*Group) {
	if _m.Edges.namedBlockedGroups == nil {
		_m.Edges.namedBlockedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedBlockedGroups[name] = []*Group{}
	} else {
		_m.Edges.namedBlockedGroups[name] = append(_m.Edges.namedBlockedGroups[name], edges...)
	}
}

// NamedEditors returns the Editors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Assessment) NamedEditors(name string) ([]*Group, error) {
	if _m.Edges.namedEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Assessment) appendNamedEditors(name string, edges ...*Group) {
	if _m.Edges.namedEditors == nil {
		_m.Edges.namedEditors = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedEditors[name] = []*Group{}
	} else {
		_m.Edges.namedEditors[name] = append(_m.Edges.namedEditors[name], edges...)
	}
}

// NamedViewers returns the Viewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Assessment) NamedViewers(name string) ([]*Group, error) {
	if _m.Edges.namedViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Assessment) appendNamedViewers(name string, edges ...*Group) {
	if _m.Edges.namedViewers == nil {
		_m.Edges.namedViewers = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		_m.Edges.namedViewers[name] = []*Group{}
	} else {
		_m.Edges.namedViewers[name] = append(_m.Edges.namedViewers[name], edges...)
	}
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Assessment) NamedUsers(name string) ([]*User, error) {
	if _m.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Assessment) appendNamedUsers(name string, edges ...*User) {
	if _m.Edges.namedUsers == nil {
		_m.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		_m.Edges.namedUsers[name] = []*User{}
	} else {
		_m.Edges.namedUsers[name] = append(_m.Edges.namedUsers[name], edges...)
	}
}

// NamedAssessments returns the Assessments named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Assessment) NamedAssessments(name string) ([]*Assessment, error) {
	if _m.Edges.namedAssessments == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedAssessments[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Assessment) appendNamedAssessments(name string, edges ...*Assessment) {
	if _m.Edges.namedAssessments == nil {
		_m.Edges.namedAssessments = make(map[string][]*Assessment)
	}
	if len(edges) == 0 {
		_m.Edges.namedAssessments[name] = []*Assessment{}
	} else {
		_m.Edges.namedAssessments[name] = append(_m.Edges.namedAssessments[name], edges...)
	}
}

// NamedAssessmentResponses returns the AssessmentResponses named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Assessment) NamedAssessmentResponses(name string) ([]*AssessmentResponse, error) {
	if _m.Edges.namedAssessmentResponses == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedAssessmentResponses[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Assessment) appendNamedAssessmentResponses(name string, edges ...*AssessmentResponse) {
	if _m.Edges.namedAssessmentResponses == nil {
		_m.Edges.namedAssessmentResponses = make(map[string][]*AssessmentResponse)
	}
	if len(edges) == 0 {
		_m.Edges.namedAssessmentResponses[name] = []*AssessmentResponse{}
	} else {
		_m.Edges.namedAssessmentResponses[name] = append(_m.Edges.namedAssessmentResponses[name], edges...)
	}
}

// NamedTemplateResponders returns the TemplateResponders named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *Assessment) NamedTemplateResponders(name string) ([]*TemplateResponder, error) {
	if _m.Edges.namedTemplateResponders == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedTemplateResponders[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *Assessment) appendNamedTemplateResponders(name string, edges ...*TemplateResponder) {
	if _m.Edges.namedTemplateResponders == nil {
		_m.Edges.namedTemplateResponders = make(map[string][]*TemplateResponder)
	}
	if len(edges) == 0 {
		_m.Edges.namedTemplateResponders[name] = []*TemplateResponder{}
	} else {
		_m.Edges.namedTemplateResponders[name] = append(_m.Edges.namedTemplateResponders[name], edges...)
	}
}

// Assessments is a parsable slice of Assessment.
type Assessments []*Assessment
