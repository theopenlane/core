// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
)

// SubcontrolCreate is the builder for creating a Subcontrol entity.
type SubcontrolCreate struct {
	config
	mutation *SubcontrolMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SubcontrolCreate) SetCreatedAt(t time.Time) *SubcontrolCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableCreatedAt(t *time.Time) *SubcontrolCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SubcontrolCreate) SetUpdatedAt(t time.Time) *SubcontrolCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableUpdatedAt(t *time.Time) *SubcontrolCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetCreatedBy sets the "created_by" field.
func (sc *SubcontrolCreate) SetCreatedBy(s string) *SubcontrolCreate {
	sc.mutation.SetCreatedBy(s)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableCreatedBy(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetCreatedBy(*s)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SubcontrolCreate) SetUpdatedBy(s string) *SubcontrolCreate {
	sc.mutation.SetUpdatedBy(s)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableUpdatedBy(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetUpdatedBy(*s)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SubcontrolCreate) SetDeletedAt(t time.Time) *SubcontrolCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableDeletedAt(t *time.Time) *SubcontrolCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetDeletedBy sets the "deleted_by" field.
func (sc *SubcontrolCreate) SetDeletedBy(s string) *SubcontrolCreate {
	sc.mutation.SetDeletedBy(s)
	return sc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableDeletedBy(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetDeletedBy(*s)
	}
	return sc
}

// SetDisplayID sets the "display_id" field.
func (sc *SubcontrolCreate) SetDisplayID(s string) *SubcontrolCreate {
	sc.mutation.SetDisplayID(s)
	return sc
}

// SetTags sets the "tags" field.
func (sc *SubcontrolCreate) SetTags(s []string) *SubcontrolCreate {
	sc.mutation.SetTags(s)
	return sc
}

// SetOwnerID sets the "owner_id" field.
func (sc *SubcontrolCreate) SetOwnerID(s string) *SubcontrolCreate {
	sc.mutation.SetOwnerID(s)
	return sc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableOwnerID(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetOwnerID(*s)
	}
	return sc
}

// SetDescription sets the "description" field.
func (sc *SubcontrolCreate) SetDescription(s string) *SubcontrolCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableDescription(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetReferenceID sets the "reference_id" field.
func (sc *SubcontrolCreate) SetReferenceID(s string) *SubcontrolCreate {
	sc.mutation.SetReferenceID(s)
	return sc
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableReferenceID(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetReferenceID(*s)
	}
	return sc
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (sc *SubcontrolCreate) SetAuditorReferenceID(s string) *SubcontrolCreate {
	sc.mutation.SetAuditorReferenceID(s)
	return sc
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableAuditorReferenceID(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetAuditorReferenceID(*s)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *SubcontrolCreate) SetStatus(es enums.ControlStatus) *SubcontrolCreate {
	sc.mutation.SetStatus(es)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableStatus(es *enums.ControlStatus) *SubcontrolCreate {
	if es != nil {
		sc.SetStatus(*es)
	}
	return sc
}

// SetSource sets the "source" field.
func (sc *SubcontrolCreate) SetSource(es enums.ControlSource) *SubcontrolCreate {
	sc.mutation.SetSource(es)
	return sc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableSource(es *enums.ControlSource) *SubcontrolCreate {
	if es != nil {
		sc.SetSource(*es)
	}
	return sc
}

// SetControlType sets the "control_type" field.
func (sc *SubcontrolCreate) SetControlType(et enums.ControlType) *SubcontrolCreate {
	sc.mutation.SetControlType(et)
	return sc
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableControlType(et *enums.ControlType) *SubcontrolCreate {
	if et != nil {
		sc.SetControlType(*et)
	}
	return sc
}

// SetCategory sets the "category" field.
func (sc *SubcontrolCreate) SetCategory(s string) *SubcontrolCreate {
	sc.mutation.SetCategory(s)
	return sc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableCategory(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetCategory(*s)
	}
	return sc
}

// SetCategoryID sets the "category_id" field.
func (sc *SubcontrolCreate) SetCategoryID(s string) *SubcontrolCreate {
	sc.mutation.SetCategoryID(s)
	return sc
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableCategoryID(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetCategoryID(*s)
	}
	return sc
}

// SetSubcategory sets the "subcategory" field.
func (sc *SubcontrolCreate) SetSubcategory(s string) *SubcontrolCreate {
	sc.mutation.SetSubcategory(s)
	return sc
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableSubcategory(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetSubcategory(*s)
	}
	return sc
}

// SetMappedCategories sets the "mapped_categories" field.
func (sc *SubcontrolCreate) SetMappedCategories(s []string) *SubcontrolCreate {
	sc.mutation.SetMappedCategories(s)
	return sc
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (sc *SubcontrolCreate) SetAssessmentObjectives(mo []models.AssessmentObjective) *SubcontrolCreate {
	sc.mutation.SetAssessmentObjectives(mo)
	return sc
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (sc *SubcontrolCreate) SetAssessmentMethods(mm []models.AssessmentMethod) *SubcontrolCreate {
	sc.mutation.SetAssessmentMethods(mm)
	return sc
}

// SetControlQuestions sets the "control_questions" field.
func (sc *SubcontrolCreate) SetControlQuestions(s []string) *SubcontrolCreate {
	sc.mutation.SetControlQuestions(s)
	return sc
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (sc *SubcontrolCreate) SetImplementationGuidance(mg []models.ImplementationGuidance) *SubcontrolCreate {
	sc.mutation.SetImplementationGuidance(mg)
	return sc
}

// SetExampleEvidence sets the "example_evidence" field.
func (sc *SubcontrolCreate) SetExampleEvidence(me []models.ExampleEvidence) *SubcontrolCreate {
	sc.mutation.SetExampleEvidence(me)
	return sc
}

// SetReferences sets the "references" field.
func (sc *SubcontrolCreate) SetReferences(m []models.Reference) *SubcontrolCreate {
	sc.mutation.SetReferences(m)
	return sc
}

// SetRefCode sets the "ref_code" field.
func (sc *SubcontrolCreate) SetRefCode(s string) *SubcontrolCreate {
	sc.mutation.SetRefCode(s)
	return sc
}

// SetControlID sets the "control_id" field.
func (sc *SubcontrolCreate) SetControlID(s string) *SubcontrolCreate {
	sc.mutation.SetControlID(s)
	return sc
}

// SetID sets the "id" field.
func (sc *SubcontrolCreate) SetID(s string) *SubcontrolCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableID(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (sc *SubcontrolCreate) SetOwner(o *Organization) *SubcontrolCreate {
	return sc.SetOwnerID(o.ID)
}

// SetControl sets the "control" edge to the Control entity.
func (sc *SubcontrolCreate) SetControl(c *Control) *SubcontrolCreate {
	return sc.SetControlID(c.ID)
}

// AddMappedControlIDs adds the "mapped_controls" edge to the MappedControl entity by IDs.
func (sc *SubcontrolCreate) AddMappedControlIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddMappedControlIDs(ids...)
	return sc
}

// AddMappedControls adds the "mapped_controls" edges to the MappedControl entity.
func (sc *SubcontrolCreate) AddMappedControls(m ...*MappedControl) *SubcontrolCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return sc.AddMappedControlIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (sc *SubcontrolCreate) AddEvidenceIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddEvidenceIDs(ids...)
	return sc
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (sc *SubcontrolCreate) AddEvidence(e ...*Evidence) *SubcontrolCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return sc.AddEvidenceIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (sc *SubcontrolCreate) AddControlObjectiveIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddControlObjectiveIDs(ids...)
	return sc
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (sc *SubcontrolCreate) AddControlObjectives(c ...*ControlObjective) *SubcontrolCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddControlObjectiveIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (sc *SubcontrolCreate) AddTaskIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddTaskIDs(ids...)
	return sc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (sc *SubcontrolCreate) AddTasks(t ...*Task) *SubcontrolCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTaskIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (sc *SubcontrolCreate) AddNarrativeIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddNarrativeIDs(ids...)
	return sc
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (sc *SubcontrolCreate) AddNarratives(n ...*Narrative) *SubcontrolCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return sc.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (sc *SubcontrolCreate) AddRiskIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddRiskIDs(ids...)
	return sc
}

// AddRisks adds the "risks" edges to the Risk entity.
func (sc *SubcontrolCreate) AddRisks(r ...*Risk) *SubcontrolCreate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sc.AddRiskIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (sc *SubcontrolCreate) AddActionPlanIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddActionPlanIDs(ids...)
	return sc
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (sc *SubcontrolCreate) AddActionPlans(a ...*ActionPlan) *SubcontrolCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sc.AddActionPlanIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (sc *SubcontrolCreate) AddProcedureIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddProcedureIDs(ids...)
	return sc
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (sc *SubcontrolCreate) AddProcedures(p ...*Procedure) *SubcontrolCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (sc *SubcontrolCreate) AddInternalPolicyIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddInternalPolicyIDs(ids...)
	return sc
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (sc *SubcontrolCreate) AddInternalPolicies(i ...*InternalPolicy) *SubcontrolCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return sc.AddInternalPolicyIDs(ids...)
}

// SetControlOwnerID sets the "control_owner" edge to the Group entity by ID.
func (sc *SubcontrolCreate) SetControlOwnerID(id string) *SubcontrolCreate {
	sc.mutation.SetControlOwnerID(id)
	return sc
}

// SetNillableControlOwnerID sets the "control_owner" edge to the Group entity by ID if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableControlOwnerID(id *string) *SubcontrolCreate {
	if id != nil {
		sc = sc.SetControlOwnerID(*id)
	}
	return sc
}

// SetControlOwner sets the "control_owner" edge to the Group entity.
func (sc *SubcontrolCreate) SetControlOwner(g *Group) *SubcontrolCreate {
	return sc.SetControlOwnerID(g.ID)
}

// SetDelegateID sets the "delegate" edge to the Group entity by ID.
func (sc *SubcontrolCreate) SetDelegateID(id string) *SubcontrolCreate {
	sc.mutation.SetDelegateID(id)
	return sc
}

// SetNillableDelegateID sets the "delegate" edge to the Group entity by ID if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableDelegateID(id *string) *SubcontrolCreate {
	if id != nil {
		sc = sc.SetDelegateID(*id)
	}
	return sc
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (sc *SubcontrolCreate) SetDelegate(g *Group) *SubcontrolCreate {
	return sc.SetDelegateID(g.ID)
}

// Mutation returns the SubcontrolMutation object of the builder.
func (sc *SubcontrolCreate) Mutation() *SubcontrolMutation {
	return sc.mutation
}

// Save creates the Subcontrol in the database.
func (sc *SubcontrolCreate) Save(ctx context.Context) (*Subcontrol, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubcontrolCreate) SaveX(ctx context.Context) *Subcontrol {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubcontrolCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubcontrolCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubcontrolCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if subcontrol.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrol.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if subcontrol.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrol.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Tags(); !ok {
		v := subcontrol.DefaultTags
		sc.mutation.SetTags(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := subcontrol.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.Source(); !ok {
		v := subcontrol.DefaultSource
		sc.mutation.SetSource(v)
	}
	if _, ok := sc.mutation.ControlType(); !ok {
		v := subcontrol.DefaultControlType
		sc.mutation.SetControlType(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if subcontrol.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.DefaultID (forgotten import generated/runtime?)")
		}
		v := subcontrol.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubcontrolCreate) check() error {
	if _, ok := sc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "Subcontrol.display_id"`)}
	}
	if v, ok := sc.mutation.DisplayID(); ok {
		if err := subcontrol.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.display_id": %w`, err)}
		}
	}
	if v, ok := sc.mutation.OwnerID(); ok {
		if err := subcontrol.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.owner_id": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Status(); ok {
		if err := subcontrol.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.status": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Source(); ok {
		if err := subcontrol.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.source": %w`, err)}
		}
	}
	if v, ok := sc.mutation.ControlType(); ok {
		if err := subcontrol.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.control_type": %w`, err)}
		}
	}
	if _, ok := sc.mutation.RefCode(); !ok {
		return &ValidationError{Name: "ref_code", err: errors.New(`generated: missing required field "Subcontrol.ref_code"`)}
	}
	if v, ok := sc.mutation.RefCode(); ok {
		if err := subcontrol.RefCodeValidator(v); err != nil {
			return &ValidationError{Name: "ref_code", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.ref_code": %w`, err)}
		}
	}
	if _, ok := sc.mutation.ControlID(); !ok {
		return &ValidationError{Name: "control_id", err: errors.New(`generated: missing required field "Subcontrol.control_id"`)}
	}
	if v, ok := sc.mutation.ControlID(); ok {
		if err := subcontrol.ControlIDValidator(v); err != nil {
			return &ValidationError{Name: "control_id", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.control_id": %w`, err)}
		}
	}
	if len(sc.mutation.ControlIDs()) == 0 {
		return &ValidationError{Name: "control", err: errors.New(`generated: missing required edge "Subcontrol.control"`)}
	}
	return nil
}

func (sc *SubcontrolCreate) sqlSave(ctx context.Context) (*Subcontrol, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Subcontrol.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubcontrolCreate) createSpec() (*Subcontrol, *sqlgraph.CreateSpec) {
	var (
		_node = &Subcontrol{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subcontrol.Table, sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString))
	)
	_spec.Schema = sc.schemaConfig.Subcontrol
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(subcontrol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrol.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(subcontrol.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrol.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrol.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrol.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := sc.mutation.DisplayID(); ok {
		_spec.SetField(subcontrol.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := sc.mutation.Tags(); ok {
		_spec.SetField(subcontrol.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(subcontrol.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.ReferenceID(); ok {
		_spec.SetField(subcontrol.FieldReferenceID, field.TypeString, value)
		_node.ReferenceID = value
	}
	if value, ok := sc.mutation.AuditorReferenceID(); ok {
		_spec.SetField(subcontrol.FieldAuditorReferenceID, field.TypeString, value)
		_node.AuditorReferenceID = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(subcontrol.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.Source(); ok {
		_spec.SetField(subcontrol.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	if value, ok := sc.mutation.ControlType(); ok {
		_spec.SetField(subcontrol.FieldControlType, field.TypeEnum, value)
		_node.ControlType = value
	}
	if value, ok := sc.mutation.Category(); ok {
		_spec.SetField(subcontrol.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := sc.mutation.CategoryID(); ok {
		_spec.SetField(subcontrol.FieldCategoryID, field.TypeString, value)
		_node.CategoryID = value
	}
	if value, ok := sc.mutation.Subcategory(); ok {
		_spec.SetField(subcontrol.FieldSubcategory, field.TypeString, value)
		_node.Subcategory = value
	}
	if value, ok := sc.mutation.MappedCategories(); ok {
		_spec.SetField(subcontrol.FieldMappedCategories, field.TypeJSON, value)
		_node.MappedCategories = value
	}
	if value, ok := sc.mutation.AssessmentObjectives(); ok {
		_spec.SetField(subcontrol.FieldAssessmentObjectives, field.TypeJSON, value)
		_node.AssessmentObjectives = value
	}
	if value, ok := sc.mutation.AssessmentMethods(); ok {
		_spec.SetField(subcontrol.FieldAssessmentMethods, field.TypeJSON, value)
		_node.AssessmentMethods = value
	}
	if value, ok := sc.mutation.ControlQuestions(); ok {
		_spec.SetField(subcontrol.FieldControlQuestions, field.TypeJSON, value)
		_node.ControlQuestions = value
	}
	if value, ok := sc.mutation.ImplementationGuidance(); ok {
		_spec.SetField(subcontrol.FieldImplementationGuidance, field.TypeJSON, value)
		_node.ImplementationGuidance = value
	}
	if value, ok := sc.mutation.ExampleEvidence(); ok {
		_spec.SetField(subcontrol.FieldExampleEvidence, field.TypeJSON, value)
		_node.ExampleEvidence = value
	}
	if value, ok := sc.mutation.References(); ok {
		_spec.SetField(subcontrol.FieldReferences, field.TypeJSON, value)
		_node.References = value
	}
	if value, ok := sc.mutation.RefCode(); ok {
		_spec.SetField(subcontrol.FieldRefCode, field.TypeString, value)
		_node.RefCode = value
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.OwnerTable,
			Columns: []string{subcontrol.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: []string{subcontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ControlID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.MappedControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedControlsTable,
			Columns: subcontrol.MappedControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.MappedControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.SubcontrolControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: []string{subcontrol.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: []string{subcontrol.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: []string{subcontrol.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ControlOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.ControlOwnerTable,
			Columns: []string{subcontrol.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.subcontrol_control_owner = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.DelegateTable,
			Columns: []string{subcontrol.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.subcontrol_delegate = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubcontrolCreateBulk is the builder for creating many Subcontrol entities in bulk.
type SubcontrolCreateBulk struct {
	config
	err      error
	builders []*SubcontrolCreate
}

// Save creates the Subcontrol entities in the database.
func (scb *SubcontrolCreateBulk) Save(ctx context.Context) ([]*Subcontrol, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subcontrol, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubcontrolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubcontrolCreateBulk) SaveX(ctx context.Context) []*Subcontrol {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubcontrolCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubcontrolCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
