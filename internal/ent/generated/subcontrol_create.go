// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"
)

// SubcontrolCreate is the builder for creating a Subcontrol entity.
type SubcontrolCreate struct {
	config
	mutation *SubcontrolMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SubcontrolCreate) SetCreatedAt(t time.Time) *SubcontrolCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableCreatedAt(t *time.Time) *SubcontrolCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SubcontrolCreate) SetUpdatedAt(t time.Time) *SubcontrolCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableUpdatedAt(t *time.Time) *SubcontrolCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetCreatedBy sets the "created_by" field.
func (sc *SubcontrolCreate) SetCreatedBy(s string) *SubcontrolCreate {
	sc.mutation.SetCreatedBy(s)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableCreatedBy(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetCreatedBy(*s)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SubcontrolCreate) SetUpdatedBy(s string) *SubcontrolCreate {
	sc.mutation.SetUpdatedBy(s)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableUpdatedBy(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetUpdatedBy(*s)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SubcontrolCreate) SetDeletedAt(t time.Time) *SubcontrolCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableDeletedAt(t *time.Time) *SubcontrolCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetDeletedBy sets the "deleted_by" field.
func (sc *SubcontrolCreate) SetDeletedBy(s string) *SubcontrolCreate {
	sc.mutation.SetDeletedBy(s)
	return sc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableDeletedBy(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetDeletedBy(*s)
	}
	return sc
}

// SetMappingID sets the "mapping_id" field.
func (sc *SubcontrolCreate) SetMappingID(s string) *SubcontrolCreate {
	sc.mutation.SetMappingID(s)
	return sc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableMappingID(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetMappingID(*s)
	}
	return sc
}

// SetTags sets the "tags" field.
func (sc *SubcontrolCreate) SetTags(s []string) *SubcontrolCreate {
	sc.mutation.SetTags(s)
	return sc
}

// SetName sets the "name" field.
func (sc *SubcontrolCreate) SetName(s string) *SubcontrolCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *SubcontrolCreate) SetDescription(s string) *SubcontrolCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableDescription(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *SubcontrolCreate) SetStatus(s string) *SubcontrolCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableStatus(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetStatus(*s)
	}
	return sc
}

// SetSubcontrolType sets the "subcontrol_type" field.
func (sc *SubcontrolCreate) SetSubcontrolType(s string) *SubcontrolCreate {
	sc.mutation.SetSubcontrolType(s)
	return sc
}

// SetNillableSubcontrolType sets the "subcontrol_type" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableSubcontrolType(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetSubcontrolType(*s)
	}
	return sc
}

// SetVersion sets the "version" field.
func (sc *SubcontrolCreate) SetVersion(s string) *SubcontrolCreate {
	sc.mutation.SetVersion(s)
	return sc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableVersion(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetVersion(*s)
	}
	return sc
}

// SetSubcontrolNumber sets the "subcontrol_number" field.
func (sc *SubcontrolCreate) SetSubcontrolNumber(s string) *SubcontrolCreate {
	sc.mutation.SetSubcontrolNumber(s)
	return sc
}

// SetNillableSubcontrolNumber sets the "subcontrol_number" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableSubcontrolNumber(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetSubcontrolNumber(*s)
	}
	return sc
}

// SetFamily sets the "family" field.
func (sc *SubcontrolCreate) SetFamily(s string) *SubcontrolCreate {
	sc.mutation.SetFamily(s)
	return sc
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableFamily(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetFamily(*s)
	}
	return sc
}

// SetClass sets the "class" field.
func (sc *SubcontrolCreate) SetClass(s string) *SubcontrolCreate {
	sc.mutation.SetClass(s)
	return sc
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableClass(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetClass(*s)
	}
	return sc
}

// SetSource sets the "source" field.
func (sc *SubcontrolCreate) SetSource(s string) *SubcontrolCreate {
	sc.mutation.SetSource(s)
	return sc
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableSource(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetSource(*s)
	}
	return sc
}

// SetMappedFrameworks sets the "mapped_frameworks" field.
func (sc *SubcontrolCreate) SetMappedFrameworks(s string) *SubcontrolCreate {
	sc.mutation.SetMappedFrameworks(s)
	return sc
}

// SetNillableMappedFrameworks sets the "mapped_frameworks" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableMappedFrameworks(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetMappedFrameworks(*s)
	}
	return sc
}

// SetImplementationEvidence sets the "implementation_evidence" field.
func (sc *SubcontrolCreate) SetImplementationEvidence(s string) *SubcontrolCreate {
	sc.mutation.SetImplementationEvidence(s)
	return sc
}

// SetNillableImplementationEvidence sets the "implementation_evidence" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableImplementationEvidence(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetImplementationEvidence(*s)
	}
	return sc
}

// SetImplementationStatus sets the "implementation_status" field.
func (sc *SubcontrolCreate) SetImplementationStatus(s string) *SubcontrolCreate {
	sc.mutation.SetImplementationStatus(s)
	return sc
}

// SetNillableImplementationStatus sets the "implementation_status" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableImplementationStatus(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetImplementationStatus(*s)
	}
	return sc
}

// SetImplementationDate sets the "implementation_date" field.
func (sc *SubcontrolCreate) SetImplementationDate(t time.Time) *SubcontrolCreate {
	sc.mutation.SetImplementationDate(t)
	return sc
}

// SetNillableImplementationDate sets the "implementation_date" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableImplementationDate(t *time.Time) *SubcontrolCreate {
	if t != nil {
		sc.SetImplementationDate(*t)
	}
	return sc
}

// SetImplementationVerification sets the "implementation_verification" field.
func (sc *SubcontrolCreate) SetImplementationVerification(s string) *SubcontrolCreate {
	sc.mutation.SetImplementationVerification(s)
	return sc
}

// SetNillableImplementationVerification sets the "implementation_verification" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableImplementationVerification(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetImplementationVerification(*s)
	}
	return sc
}

// SetImplementationVerificationDate sets the "implementation_verification_date" field.
func (sc *SubcontrolCreate) SetImplementationVerificationDate(t time.Time) *SubcontrolCreate {
	sc.mutation.SetImplementationVerificationDate(t)
	return sc
}

// SetNillableImplementationVerificationDate sets the "implementation_verification_date" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableImplementationVerificationDate(t *time.Time) *SubcontrolCreate {
	if t != nil {
		sc.SetImplementationVerificationDate(*t)
	}
	return sc
}

// SetDetails sets the "details" field.
func (sc *SubcontrolCreate) SetDetails(m map[string]interface{}) *SubcontrolCreate {
	sc.mutation.SetDetails(m)
	return sc
}

// SetID sets the "id" field.
func (sc *SubcontrolCreate) SetID(s string) *SubcontrolCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableID(s *string) *SubcontrolCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (sc *SubcontrolCreate) AddControlIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddControlIDs(ids...)
	return sc
}

// AddControl adds the "control" edges to the Control entity.
func (sc *SubcontrolCreate) AddControl(c ...*Control) *SubcontrolCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddControlIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (sc *SubcontrolCreate) AddUserIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddUserIDs(ids...)
	return sc
}

// AddUser adds the "user" edges to the User entity.
func (sc *SubcontrolCreate) AddUser(u ...*User) *SubcontrolCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return sc.AddUserIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (sc *SubcontrolCreate) AddTaskIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddTaskIDs(ids...)
	return sc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (sc *SubcontrolCreate) AddTasks(t ...*Task) *SubcontrolCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return sc.AddTaskIDs(ids...)
}

// SetNotesID sets the "notes" edge to the Note entity by ID.
func (sc *SubcontrolCreate) SetNotesID(id string) *SubcontrolCreate {
	sc.mutation.SetNotesID(id)
	return sc
}

// SetNillableNotesID sets the "notes" edge to the Note entity by ID if the given value is not nil.
func (sc *SubcontrolCreate) SetNillableNotesID(id *string) *SubcontrolCreate {
	if id != nil {
		sc = sc.SetNotesID(*id)
	}
	return sc
}

// SetNotes sets the "notes" edge to the Note entity.
func (sc *SubcontrolCreate) SetNotes(n *Note) *SubcontrolCreate {
	return sc.SetNotesID(n.ID)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (sc *SubcontrolCreate) AddProgramIDs(ids ...string) *SubcontrolCreate {
	sc.mutation.AddProgramIDs(ids...)
	return sc
}

// AddPrograms adds the "programs" edges to the Program entity.
func (sc *SubcontrolCreate) AddPrograms(p ...*Program) *SubcontrolCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddProgramIDs(ids...)
}

// Mutation returns the SubcontrolMutation object of the builder.
func (sc *SubcontrolCreate) Mutation() *SubcontrolMutation {
	return sc.mutation
}

// Save creates the Subcontrol in the database.
func (sc *SubcontrolCreate) Save(ctx context.Context) (*Subcontrol, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubcontrolCreate) SaveX(ctx context.Context) *Subcontrol {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubcontrolCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubcontrolCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubcontrolCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if subcontrol.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrol.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if subcontrol.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrol.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.MappingID(); !ok {
		if subcontrol.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := subcontrol.DefaultMappingID()
		sc.mutation.SetMappingID(v)
	}
	if _, ok := sc.mutation.Tags(); !ok {
		v := subcontrol.DefaultTags
		sc.mutation.SetTags(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if subcontrol.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.DefaultID (forgotten import generated/runtime?)")
		}
		v := subcontrol.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubcontrolCreate) check() error {
	if _, ok := sc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "Subcontrol.mapping_id"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Subcontrol.name"`)}
	}
	return nil
}

func (sc *SubcontrolCreate) sqlSave(ctx context.Context) (*Subcontrol, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Subcontrol.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubcontrolCreate) createSpec() (*Subcontrol, *sqlgraph.CreateSpec) {
	var (
		_node = &Subcontrol{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subcontrol.Table, sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString))
	)
	_spec.Schema = sc.schemaConfig.Subcontrol
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(subcontrol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrol.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(subcontrol.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrol.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrol.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrol.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := sc.mutation.MappingID(); ok {
		_spec.SetField(subcontrol.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := sc.mutation.Tags(); ok {
		_spec.SetField(subcontrol.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(subcontrol.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(subcontrol.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(subcontrol.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.SubcontrolType(); ok {
		_spec.SetField(subcontrol.FieldSubcontrolType, field.TypeString, value)
		_node.SubcontrolType = value
	}
	if value, ok := sc.mutation.Version(); ok {
		_spec.SetField(subcontrol.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := sc.mutation.SubcontrolNumber(); ok {
		_spec.SetField(subcontrol.FieldSubcontrolNumber, field.TypeString, value)
		_node.SubcontrolNumber = value
	}
	if value, ok := sc.mutation.Family(); ok {
		_spec.SetField(subcontrol.FieldFamily, field.TypeString, value)
		_node.Family = value
	}
	if value, ok := sc.mutation.Class(); ok {
		_spec.SetField(subcontrol.FieldClass, field.TypeString, value)
		_node.Class = value
	}
	if value, ok := sc.mutation.Source(); ok {
		_spec.SetField(subcontrol.FieldSource, field.TypeString, value)
		_node.Source = value
	}
	if value, ok := sc.mutation.MappedFrameworks(); ok {
		_spec.SetField(subcontrol.FieldMappedFrameworks, field.TypeString, value)
		_node.MappedFrameworks = value
	}
	if value, ok := sc.mutation.ImplementationEvidence(); ok {
		_spec.SetField(subcontrol.FieldImplementationEvidence, field.TypeString, value)
		_node.ImplementationEvidence = value
	}
	if value, ok := sc.mutation.ImplementationStatus(); ok {
		_spec.SetField(subcontrol.FieldImplementationStatus, field.TypeString, value)
		_node.ImplementationStatus = value
	}
	if value, ok := sc.mutation.ImplementationDate(); ok {
		_spec.SetField(subcontrol.FieldImplementationDate, field.TypeTime, value)
		_node.ImplementationDate = value
	}
	if value, ok := sc.mutation.ImplementationVerification(); ok {
		_spec.SetField(subcontrol.FieldImplementationVerification, field.TypeString, value)
		_node.ImplementationVerification = value
	}
	if value, ok := sc.mutation.ImplementationVerificationDate(); ok {
		_spec.SetField(subcontrol.FieldImplementationVerificationDate, field.TypeTime, value)
		_node.ImplementationVerificationDate = value
	}
	if value, ok := sc.mutation.Details(); ok {
		_spec.SetField(subcontrol.FieldDetails, field.TypeJSON, value)
		_node.Details = value
	}
	if nodes := sc.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: subcontrol.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.ControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.UserTable,
			Columns: subcontrol.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.UserSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.NotesTable,
			Columns: []string{subcontrol.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.note_subcontrols = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ProgramsTable,
			Columns: subcontrol.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.ProgramSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubcontrolCreateBulk is the builder for creating many Subcontrol entities in bulk.
type SubcontrolCreateBulk struct {
	config
	err      error
	builders []*SubcontrolCreate
}

// Save creates the Subcontrol entities in the database.
func (scb *SubcontrolCreateBulk) Save(ctx context.Context) ([]*Subcontrol, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subcontrol, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubcontrolMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubcontrolCreateBulk) SaveX(ctx context.Context) []*Subcontrol {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubcontrolCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubcontrolCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
