// Code generated by ent, DO NOT EDIT.

package organizationsettinghistory

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

const (
	// Label holds the string label denoting the organizationsettinghistory type in the database.
	Label = "organization_setting_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHistoryTime holds the string denoting the history_time field in the database.
	FieldHistoryTime = "history_time"
	// FieldRef holds the string denoting the ref field in the database.
	FieldRef = "ref"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldDomains holds the string denoting the domains field in the database.
	FieldDomains = "domains"
	// FieldBillingContact holds the string denoting the billing_contact field in the database.
	FieldBillingContact = "billing_contact"
	// FieldBillingEmail holds the string denoting the billing_email field in the database.
	FieldBillingEmail = "billing_email"
	// FieldBillingPhone holds the string denoting the billing_phone field in the database.
	FieldBillingPhone = "billing_phone"
	// FieldBillingAddress holds the string denoting the billing_address field in the database.
	FieldBillingAddress = "billing_address"
	// FieldTaxIdentifier holds the string denoting the tax_identifier field in the database.
	FieldTaxIdentifier = "tax_identifier"
	// FieldGeoLocation holds the string denoting the geo_location field in the database.
	FieldGeoLocation = "geo_location"
	// FieldOrganizationID holds the string denoting the organization_id field in the database.
	FieldOrganizationID = "organization_id"
	// FieldBillingNotificationsEnabled holds the string denoting the billing_notifications_enabled field in the database.
	FieldBillingNotificationsEnabled = "billing_notifications_enabled"
	// FieldAllowedEmailDomains holds the string denoting the allowed_email_domains field in the database.
	FieldAllowedEmailDomains = "allowed_email_domains"
	// FieldAllowMatchingDomainsAutojoin holds the string denoting the allow_matching_domains_autojoin field in the database.
	FieldAllowMatchingDomainsAutojoin = "allow_matching_domains_autojoin"
	// FieldIdentityProvider holds the string denoting the identity_provider field in the database.
	FieldIdentityProvider = "identity_provider"
	// FieldIdentityProviderClientID holds the string denoting the identity_provider_client_id field in the database.
	FieldIdentityProviderClientID = "identity_provider_client_id"
	// FieldIdentityProviderClientSecret holds the string denoting the identity_provider_client_secret field in the database.
	FieldIdentityProviderClientSecret = "identity_provider_client_secret"
	// FieldIdentityProviderMetadataEndpoint holds the string denoting the identity_provider_metadata_endpoint field in the database.
	FieldIdentityProviderMetadataEndpoint = "identity_provider_metadata_endpoint"
	// FieldIdentityProviderAuthTested holds the string denoting the identity_provider_auth_tested field in the database.
	FieldIdentityProviderAuthTested = "identity_provider_auth_tested"
	// FieldIdentityProviderEntityID holds the string denoting the identity_provider_entity_id field in the database.
	FieldIdentityProviderEntityID = "identity_provider_entity_id"
	// FieldOidcDiscoveryEndpoint holds the string denoting the oidc_discovery_endpoint field in the database.
	FieldOidcDiscoveryEndpoint = "oidc_discovery_endpoint"
	// FieldSamlSigninURL holds the string denoting the saml_signin_url field in the database.
	FieldSamlSigninURL = "saml_signin_url"
	// FieldSamlIssuer holds the string denoting the saml_issuer field in the database.
	FieldSamlIssuer = "saml_issuer"
	// FieldSamlCert holds the string denoting the saml_cert field in the database.
	FieldSamlCert = "saml_cert"
	// FieldIdentityProviderLoginEnforced holds the string denoting the identity_provider_login_enforced field in the database.
	FieldIdentityProviderLoginEnforced = "identity_provider_login_enforced"
	// FieldMultifactorAuthEnforced holds the string denoting the multifactor_auth_enforced field in the database.
	FieldMultifactorAuthEnforced = "multifactor_auth_enforced"
	// FieldComplianceWebhookToken holds the string denoting the compliance_webhook_token field in the database.
	FieldComplianceWebhookToken = "compliance_webhook_token"
	// FieldPaymentMethodAdded holds the string denoting the payment_method_added field in the database.
	FieldPaymentMethodAdded = "payment_method_added"
	// Table holds the table name of the organizationsettinghistory in the database.
	Table = "organization_setting_history"
)

// Columns holds all SQL columns for organizationsettinghistory fields.
var Columns = []string{
	FieldID,
	FieldHistoryTime,
	FieldRef,
	FieldOperation,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTags,
	FieldDomains,
	FieldBillingContact,
	FieldBillingEmail,
	FieldBillingPhone,
	FieldBillingAddress,
	FieldTaxIdentifier,
	FieldGeoLocation,
	FieldOrganizationID,
	FieldBillingNotificationsEnabled,
	FieldAllowedEmailDomains,
	FieldAllowMatchingDomainsAutojoin,
	FieldIdentityProvider,
	FieldIdentityProviderClientID,
	FieldIdentityProviderClientSecret,
	FieldIdentityProviderMetadataEndpoint,
	FieldIdentityProviderAuthTested,
	FieldIdentityProviderEntityID,
	FieldOidcDiscoveryEndpoint,
	FieldSamlSigninURL,
	FieldSamlIssuer,
	FieldSamlCert,
	FieldIdentityProviderLoginEnforced,
	FieldMultifactorAuthEnforced,
	FieldComplianceWebhookToken,
	FieldPaymentMethodAdded,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultHistoryTime holds the default value on creation for the "history_time" field.
	DefaultHistoryTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultBillingNotificationsEnabled holds the default value on creation for the "billing_notifications_enabled" field.
	DefaultBillingNotificationsEnabled bool
	// DefaultAllowMatchingDomainsAutojoin holds the default value on creation for the "allow_matching_domains_autojoin" field.
	DefaultAllowMatchingDomainsAutojoin bool
	// DefaultIdentityProviderAuthTested holds the default value on creation for the "identity_provider_auth_tested" field.
	DefaultIdentityProviderAuthTested bool
	// DefaultIdentityProviderLoginEnforced holds the default value on creation for the "identity_provider_login_enforced" field.
	DefaultIdentityProviderLoginEnforced bool
	// DefaultMultifactorAuthEnforced holds the default value on creation for the "multifactor_auth_enforced" field.
	DefaultMultifactorAuthEnforced bool
	// DefaultComplianceWebhookToken holds the default value on creation for the "compliance_webhook_token" field.
	DefaultComplianceWebhookToken func() string
	// DefaultPaymentMethodAdded holds the default value on creation for the "payment_method_added" field.
	DefaultPaymentMethodAdded bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OperationValidator is a validator for the "operation" field enum values. It is called by the builders before save.
func OperationValidator(o history.OpType) error {
	switch o.String() {
	case "INSERT", "UPDATE", "DELETE":
		return nil
	default:
		return fmt.Errorf("organizationsettinghistory: invalid enum value for operation field: %q", o)
	}
}

const DefaultGeoLocation enums.Region = "AMER"

// GeoLocationValidator is a validator for the "geo_location" field enum values. It is called by the builders before save.
func GeoLocationValidator(gl enums.Region) error {
	switch gl.String() {
	case "AMER", "EMEA", "APAC":
		return nil
	default:
		return fmt.Errorf("organizationsettinghistory: invalid enum value for geo_location field: %q", gl)
	}
}

const DefaultIdentityProvider enums.SSOProvider = "NONE"

// IdentityProviderValidator is a validator for the "identity_provider" field enum values. It is called by the builders before save.
func IdentityProviderValidator(ip enums.SSOProvider) error {
	switch ip.String() {
	case "OKTA", "ONE_LOGIN", "GOOGLE_WORKSPACE", "SLACK", "GITHUB", "NONE":
		return nil
	default:
		return fmt.Errorf("organizationsettinghistory: invalid enum value for identity_provider field: %q", ip)
	}
}

// OrderOption defines the ordering options for the OrganizationSettingHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHistoryTime orders the results by the history_time field.
func ByHistoryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHistoryTime, opts...).ToFunc()
}

// ByRef orders the results by the ref field.
func ByRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRef, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByBillingContact orders the results by the billing_contact field.
func ByBillingContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingContact, opts...).ToFunc()
}

// ByBillingEmail orders the results by the billing_email field.
func ByBillingEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingEmail, opts...).ToFunc()
}

// ByBillingPhone orders the results by the billing_phone field.
func ByBillingPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingPhone, opts...).ToFunc()
}

// ByTaxIdentifier orders the results by the tax_identifier field.
func ByTaxIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxIdentifier, opts...).ToFunc()
}

// ByGeoLocation orders the results by the geo_location field.
func ByGeoLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGeoLocation, opts...).ToFunc()
}

// ByOrganizationID orders the results by the organization_id field.
func ByOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrganizationID, opts...).ToFunc()
}

// ByBillingNotificationsEnabled orders the results by the billing_notifications_enabled field.
func ByBillingNotificationsEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingNotificationsEnabled, opts...).ToFunc()
}

// ByAllowMatchingDomainsAutojoin orders the results by the allow_matching_domains_autojoin field.
func ByAllowMatchingDomainsAutojoin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowMatchingDomainsAutojoin, opts...).ToFunc()
}

// ByIdentityProvider orders the results by the identity_provider field.
func ByIdentityProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentityProvider, opts...).ToFunc()
}

// ByIdentityProviderClientID orders the results by the identity_provider_client_id field.
func ByIdentityProviderClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentityProviderClientID, opts...).ToFunc()
}

// ByIdentityProviderClientSecret orders the results by the identity_provider_client_secret field.
func ByIdentityProviderClientSecret(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentityProviderClientSecret, opts...).ToFunc()
}

// ByIdentityProviderMetadataEndpoint orders the results by the identity_provider_metadata_endpoint field.
func ByIdentityProviderMetadataEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentityProviderMetadataEndpoint, opts...).ToFunc()
}

// ByIdentityProviderAuthTested orders the results by the identity_provider_auth_tested field.
func ByIdentityProviderAuthTested(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentityProviderAuthTested, opts...).ToFunc()
}

// ByIdentityProviderEntityID orders the results by the identity_provider_entity_id field.
func ByIdentityProviderEntityID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentityProviderEntityID, opts...).ToFunc()
}

// ByOidcDiscoveryEndpoint orders the results by the oidc_discovery_endpoint field.
func ByOidcDiscoveryEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOidcDiscoveryEndpoint, opts...).ToFunc()
}

// BySamlSigninURL orders the results by the saml_signin_url field.
func BySamlSigninURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSamlSigninURL, opts...).ToFunc()
}

// BySamlIssuer orders the results by the saml_issuer field.
func BySamlIssuer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSamlIssuer, opts...).ToFunc()
}

// BySamlCert orders the results by the saml_cert field.
func BySamlCert(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSamlCert, opts...).ToFunc()
}

// ByIdentityProviderLoginEnforced orders the results by the identity_provider_login_enforced field.
func ByIdentityProviderLoginEnforced(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIdentityProviderLoginEnforced, opts...).ToFunc()
}

// ByMultifactorAuthEnforced orders the results by the multifactor_auth_enforced field.
func ByMultifactorAuthEnforced(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMultifactorAuthEnforced, opts...).ToFunc()
}

// ByComplianceWebhookToken orders the results by the compliance_webhook_token field.
func ByComplianceWebhookToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComplianceWebhookToken, opts...).ToFunc()
}

// ByPaymentMethodAdded orders the results by the payment_method_added field.
func ByPaymentMethodAdded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentMethodAdded, opts...).ToFunc()
}

var (
	// history.OpType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*history.OpType)(nil)
	// history.OpType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*history.OpType)(nil)
)

var (
	// enums.Region must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.Region)(nil)
	// enums.Region must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.Region)(nil)
)

var (
	// enums.SSOProvider must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.SSOProvider)(nil)
	// enums.SSOProvider must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.SSOProvider)(nil)
)
