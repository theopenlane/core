// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/assessment"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/templateresponder"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TemplateResponderUpdate is the builder for updating TemplateResponder entities.
type TemplateResponderUpdate struct {
	config
	hooks     []Hook
	mutation  *TemplateResponderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TemplateResponderUpdate builder.
func (_u *TemplateResponderUpdate) Where(ps ...predicate.TemplateResponder) *TemplateResponderUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TemplateResponderUpdate) SetUpdatedAt(v time.Time) *TemplateResponderUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TemplateResponderUpdate) ClearUpdatedAt() *TemplateResponderUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TemplateResponderUpdate) SetUpdatedBy(v string) *TemplateResponderUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TemplateResponderUpdate) SetNillableUpdatedBy(v *string) *TemplateResponderUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TemplateResponderUpdate) ClearUpdatedBy() *TemplateResponderUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TemplateResponderUpdate) SetDeletedAt(v time.Time) *TemplateResponderUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TemplateResponderUpdate) SetNillableDeletedAt(v *time.Time) *TemplateResponderUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TemplateResponderUpdate) ClearDeletedAt() *TemplateResponderUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TemplateResponderUpdate) SetDeletedBy(v string) *TemplateResponderUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TemplateResponderUpdate) SetNillableDeletedBy(v *string) *TemplateResponderUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TemplateResponderUpdate) ClearDeletedBy() *TemplateResponderUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TemplateResponderUpdate) SetOwnerID(v string) *TemplateResponderUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TemplateResponderUpdate) SetNillableOwnerID(v *string) *TemplateResponderUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *TemplateResponderUpdate) ClearOwnerID() *TemplateResponderUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetAssessmentID sets the "assessment_id" field.
func (_u *TemplateResponderUpdate) SetAssessmentID(v string) *TemplateResponderUpdate {
	_u.mutation.SetAssessmentID(v)
	return _u
}

// SetNillableAssessmentID sets the "assessment_id" field if the given value is not nil.
func (_u *TemplateResponderUpdate) SetNillableAssessmentID(v *string) *TemplateResponderUpdate {
	if v != nil {
		_u.SetAssessmentID(*v)
	}
	return _u
}

// SetSecret sets the "secret" field.
func (_u *TemplateResponderUpdate) SetSecret(v []byte) *TemplateResponderUpdate {
	_u.mutation.SetSecret(v)
	return _u
}

// SetSendAttempts sets the "send_attempts" field.
func (_u *TemplateResponderUpdate) SetSendAttempts(v int) *TemplateResponderUpdate {
	_u.mutation.ResetSendAttempts()
	_u.mutation.SetSendAttempts(v)
	return _u
}

// SetNillableSendAttempts sets the "send_attempts" field if the given value is not nil.
func (_u *TemplateResponderUpdate) SetNillableSendAttempts(v *int) *TemplateResponderUpdate {
	if v != nil {
		_u.SetSendAttempts(*v)
	}
	return _u
}

// AddSendAttempts adds value to the "send_attempts" field.
func (_u *TemplateResponderUpdate) AddSendAttempts(v int) *TemplateResponderUpdate {
	_u.mutation.AddSendAttempts(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *TemplateResponderUpdate) SetStatus(v enums.TemplateResponderStatus) *TemplateResponderUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TemplateResponderUpdate) SetNillableStatus(v *enums.TemplateResponderStatus) *TemplateResponderUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *TemplateResponderUpdate) SetOwner(v *Organization) *TemplateResponderUpdate {
	return _u.SetOwnerID(v.ID)
}

// SetAssessment sets the "assessment" edge to the Assessment entity.
func (_u *TemplateResponderUpdate) SetAssessment(v *Assessment) *TemplateResponderUpdate {
	return _u.SetAssessmentID(v.ID)
}

// Mutation returns the TemplateResponderMutation object of the builder.
func (_u *TemplateResponderUpdate) Mutation() *TemplateResponderMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *TemplateResponderUpdate) ClearOwner() *TemplateResponderUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearAssessment clears the "assessment" edge to the Assessment entity.
func (_u *TemplateResponderUpdate) ClearAssessment() *TemplateResponderUpdate {
	_u.mutation.ClearAssessment()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TemplateResponderUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TemplateResponderUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TemplateResponderUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TemplateResponderUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TemplateResponderUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if templateresponder.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized templateresponder.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := templateresponder.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TemplateResponderUpdate) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := templateresponder.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "TemplateResponder.owner_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Secret(); ok {
		if err := templateresponder.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "TemplateResponder.secret": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := templateresponder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "TemplateResponder.status": %w`, err)}
		}
	}
	if _u.mutation.AssessmentCleared() && len(_u.mutation.AssessmentIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "TemplateResponder.assessment"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TemplateResponderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TemplateResponderUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TemplateResponderUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(templateresponder.Table, templateresponder.Columns, sqlgraph.NewFieldSpec(templateresponder.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(templateresponder.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(templateresponder.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(templateresponder.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(templateresponder.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(templateresponder.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(templateresponder.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(templateresponder.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(templateresponder.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(templateresponder.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(templateresponder.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Secret(); ok {
		_spec.SetField(templateresponder.FieldSecret, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.SendAttempts(); ok {
		_spec.SetField(templateresponder.FieldSendAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSendAttempts(); ok {
		_spec.AddField(templateresponder.FieldSendAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(templateresponder.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templateresponder.OwnerTable,
			Columns: []string{templateresponder.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateResponder
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templateresponder.OwnerTable,
			Columns: []string{templateresponder.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateResponder
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssessmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templateresponder.AssessmentTable,
			Columns: []string{templateresponder.AssessmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assessment.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateResponder
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssessmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templateresponder.AssessmentTable,
			Columns: []string{templateresponder.AssessmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assessment.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateResponder
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TemplateResponder
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{templateresponder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TemplateResponderUpdateOne is the builder for updating a single TemplateResponder entity.
type TemplateResponderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TemplateResponderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TemplateResponderUpdateOne) SetUpdatedAt(v time.Time) *TemplateResponderUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TemplateResponderUpdateOne) ClearUpdatedAt() *TemplateResponderUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TemplateResponderUpdateOne) SetUpdatedBy(v string) *TemplateResponderUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TemplateResponderUpdateOne) SetNillableUpdatedBy(v *string) *TemplateResponderUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TemplateResponderUpdateOne) ClearUpdatedBy() *TemplateResponderUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TemplateResponderUpdateOne) SetDeletedAt(v time.Time) *TemplateResponderUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TemplateResponderUpdateOne) SetNillableDeletedAt(v *time.Time) *TemplateResponderUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TemplateResponderUpdateOne) ClearDeletedAt() *TemplateResponderUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TemplateResponderUpdateOne) SetDeletedBy(v string) *TemplateResponderUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TemplateResponderUpdateOne) SetNillableDeletedBy(v *string) *TemplateResponderUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TemplateResponderUpdateOne) ClearDeletedBy() *TemplateResponderUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *TemplateResponderUpdateOne) SetOwnerID(v string) *TemplateResponderUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *TemplateResponderUpdateOne) SetNillableOwnerID(v *string) *TemplateResponderUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *TemplateResponderUpdateOne) ClearOwnerID() *TemplateResponderUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetAssessmentID sets the "assessment_id" field.
func (_u *TemplateResponderUpdateOne) SetAssessmentID(v string) *TemplateResponderUpdateOne {
	_u.mutation.SetAssessmentID(v)
	return _u
}

// SetNillableAssessmentID sets the "assessment_id" field if the given value is not nil.
func (_u *TemplateResponderUpdateOne) SetNillableAssessmentID(v *string) *TemplateResponderUpdateOne {
	if v != nil {
		_u.SetAssessmentID(*v)
	}
	return _u
}

// SetSecret sets the "secret" field.
func (_u *TemplateResponderUpdateOne) SetSecret(v []byte) *TemplateResponderUpdateOne {
	_u.mutation.SetSecret(v)
	return _u
}

// SetSendAttempts sets the "send_attempts" field.
func (_u *TemplateResponderUpdateOne) SetSendAttempts(v int) *TemplateResponderUpdateOne {
	_u.mutation.ResetSendAttempts()
	_u.mutation.SetSendAttempts(v)
	return _u
}

// SetNillableSendAttempts sets the "send_attempts" field if the given value is not nil.
func (_u *TemplateResponderUpdateOne) SetNillableSendAttempts(v *int) *TemplateResponderUpdateOne {
	if v != nil {
		_u.SetSendAttempts(*v)
	}
	return _u
}

// AddSendAttempts adds value to the "send_attempts" field.
func (_u *TemplateResponderUpdateOne) AddSendAttempts(v int) *TemplateResponderUpdateOne {
	_u.mutation.AddSendAttempts(v)
	return _u
}

// SetStatus sets the "status" field.
func (_u *TemplateResponderUpdateOne) SetStatus(v enums.TemplateResponderStatus) *TemplateResponderUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *TemplateResponderUpdateOne) SetNillableStatus(v *enums.TemplateResponderStatus) *TemplateResponderUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *TemplateResponderUpdateOne) SetOwner(v *Organization) *TemplateResponderUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// SetAssessment sets the "assessment" edge to the Assessment entity.
func (_u *TemplateResponderUpdateOne) SetAssessment(v *Assessment) *TemplateResponderUpdateOne {
	return _u.SetAssessmentID(v.ID)
}

// Mutation returns the TemplateResponderMutation object of the builder.
func (_u *TemplateResponderUpdateOne) Mutation() *TemplateResponderMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *TemplateResponderUpdateOne) ClearOwner() *TemplateResponderUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearAssessment clears the "assessment" edge to the Assessment entity.
func (_u *TemplateResponderUpdateOne) ClearAssessment() *TemplateResponderUpdateOne {
	_u.mutation.ClearAssessment()
	return _u
}

// Where appends a list predicates to the TemplateResponderUpdate builder.
func (_u *TemplateResponderUpdateOne) Where(ps ...predicate.TemplateResponder) *TemplateResponderUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TemplateResponderUpdateOne) Select(field string, fields ...string) *TemplateResponderUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TemplateResponder entity.
func (_u *TemplateResponderUpdateOne) Save(ctx context.Context) (*TemplateResponder, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TemplateResponderUpdateOne) SaveX(ctx context.Context) *TemplateResponder {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TemplateResponderUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TemplateResponderUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TemplateResponderUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if templateresponder.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized templateresponder.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := templateresponder.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TemplateResponderUpdateOne) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := templateresponder.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "TemplateResponder.owner_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Secret(); ok {
		if err := templateresponder.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "TemplateResponder.secret": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := templateresponder.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "TemplateResponder.status": %w`, err)}
		}
	}
	if _u.mutation.AssessmentCleared() && len(_u.mutation.AssessmentIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "TemplateResponder.assessment"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TemplateResponderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TemplateResponderUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TemplateResponderUpdateOne) sqlSave(ctx context.Context) (_node *TemplateResponder, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(templateresponder.Table, templateresponder.Columns, sqlgraph.NewFieldSpec(templateresponder.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TemplateResponder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, templateresponder.FieldID)
		for _, f := range fields {
			if !templateresponder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != templateresponder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(templateresponder.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(templateresponder.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(templateresponder.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(templateresponder.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(templateresponder.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(templateresponder.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(templateresponder.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(templateresponder.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(templateresponder.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(templateresponder.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Secret(); ok {
		_spec.SetField(templateresponder.FieldSecret, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.SendAttempts(); ok {
		_spec.SetField(templateresponder.FieldSendAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSendAttempts(); ok {
		_spec.AddField(templateresponder.FieldSendAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(templateresponder.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templateresponder.OwnerTable,
			Columns: []string{templateresponder.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateResponder
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templateresponder.OwnerTable,
			Columns: []string{templateresponder.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateResponder
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssessmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templateresponder.AssessmentTable,
			Columns: []string{templateresponder.AssessmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assessment.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateResponder
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssessmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   templateresponder.AssessmentTable,
			Columns: []string{templateresponder.AssessmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assessment.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TemplateResponder
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TemplateResponder
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TemplateResponder{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{templateresponder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
