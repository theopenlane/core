// Code generated by ent, DO NOT EDIT.

package customdomain

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
)

const (
	// Label holds the string label denoting the customdomain type in the database.
	Label = "custom_domain"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldCnameRecord holds the string denoting the cname_record field in the database.
	FieldCnameRecord = "cname_record"
	// FieldMappableDomainID holds the string denoting the mappable_domain_id field in the database.
	FieldMappableDomainID = "mappable_domain_id"
	// FieldTxtRecordSubdomain holds the string denoting the txt_record_subdomain field in the database.
	FieldTxtRecordSubdomain = "txt_record_subdomain"
	// FieldTxtRecordValue holds the string denoting the txt_record_value field in the database.
	FieldTxtRecordValue = "txt_record_value"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeMappableDomain holds the string denoting the mappable_domain edge name in mutations.
	EdgeMappableDomain = "mappable_domain"
	// Table holds the table name of the customdomain in the database.
	Table = "custom_domains"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "custom_domains"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// MappableDomainTable is the table that holds the mappable_domain relation/edge.
	MappableDomainTable = "custom_domains"
	// MappableDomainInverseTable is the table name for the MappableDomain entity.
	// It exists in this package in order to avoid circular dependency with the "mappabledomain" package.
	MappableDomainInverseTable = "mappable_domains"
	// MappableDomainColumn is the table column denoting the mappable_domain relation/edge.
	MappableDomainColumn = "mappable_domain_id"
)

// Columns holds all SQL columns for customdomain fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTags,
	FieldOwnerID,
	FieldCnameRecord,
	FieldMappableDomainID,
	FieldTxtRecordSubdomain,
	FieldTxtRecordValue,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "custom_domains"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"mappable_domain_custom_domains",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [5]ent.Hook
	Interceptors [2]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	OwnerIDValidator func(string) error
	// CnameRecordValidator is a validator for the "cname_record" field. It is called by the builders before save.
	CnameRecordValidator func(string) error
	// MappableDomainIDValidator is a validator for the "mappable_domain_id" field. It is called by the builders before save.
	MappableDomainIDValidator func(string) error
	// DefaultTxtRecordSubdomain holds the default value on creation for the "txt_record_subdomain" field.
	DefaultTxtRecordSubdomain string
	// TxtRecordSubdomainValidator is a validator for the "txt_record_subdomain" field. It is called by the builders before save.
	TxtRecordSubdomainValidator func(string) error
	// DefaultTxtRecordValue holds the default value on creation for the "txt_record_value" field.
	DefaultTxtRecordValue func() string
	// TxtRecordValueValidator is a validator for the "txt_record_value" field. It is called by the builders before save.
	TxtRecordValueValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

const DefaultStatus enums.CustomDomainStatus = "PENDING"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.CustomDomainStatus) error {
	switch s.String() {
	case "INVALID", "VERIFIED", "FAILED_VERIFY", "PENDING":
		return nil
	default:
		return fmt.Errorf("customdomain: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the CustomDomain queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByCnameRecord orders the results by the cname_record field.
func ByCnameRecord(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCnameRecord, opts...).ToFunc()
}

// ByMappableDomainID orders the results by the mappable_domain_id field.
func ByMappableDomainID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappableDomainID, opts...).ToFunc()
}

// ByTxtRecordSubdomain orders the results by the txt_record_subdomain field.
func ByTxtRecordSubdomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxtRecordSubdomain, opts...).ToFunc()
}

// ByTxtRecordValue orders the results by the txt_record_value field.
func ByTxtRecordValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTxtRecordValue, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByMappableDomainField orders the results by mappable_domain field.
func ByMappableDomainField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMappableDomainStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newMappableDomainStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MappableDomainInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MappableDomainTable, MappableDomainColumn),
	)
}

var (
	// enums.CustomDomainStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.CustomDomainStatus)(nil)
	// enums.CustomDomainStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.CustomDomainStatus)(nil)
)
