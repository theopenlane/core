// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplate"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// JobTemplateQuery is the builder for querying JobTemplate entities.
type JobTemplateQuery struct {
	config
	ctx                    *QueryContext
	order                  []jobtemplate.OrderOption
	inters                 []Interceptor
	predicates             []predicate.JobTemplate
	withOwner              *OrganizationQuery
	withScheduledJobs      *ScheduledJobQuery
	loadTotal              []func(context.Context, []*JobTemplate) error
	modifiers              []func(*sql.Selector)
	withNamedScheduledJobs map[string]*ScheduledJobQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobTemplateQuery builder.
func (jtq *JobTemplateQuery) Where(ps ...predicate.JobTemplate) *JobTemplateQuery {
	jtq.predicates = append(jtq.predicates, ps...)
	return jtq
}

// Limit the number of records to be returned by this query.
func (jtq *JobTemplateQuery) Limit(limit int) *JobTemplateQuery {
	jtq.ctx.Limit = &limit
	return jtq
}

// Offset to start from.
func (jtq *JobTemplateQuery) Offset(offset int) *JobTemplateQuery {
	jtq.ctx.Offset = &offset
	return jtq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jtq *JobTemplateQuery) Unique(unique bool) *JobTemplateQuery {
	jtq.ctx.Unique = &unique
	return jtq
}

// Order specifies how the records should be ordered.
func (jtq *JobTemplateQuery) Order(o ...jobtemplate.OrderOption) *JobTemplateQuery {
	jtq.order = append(jtq.order, o...)
	return jtq
}

// QueryOwner chains the current query on the "owner" edge.
func (jtq *JobTemplateQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: jtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobtemplate.Table, jobtemplate.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobtemplate.OwnerTable, jobtemplate.OwnerColumn),
		)
		schemaConfig := jtq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.JobTemplate
		fromU = sqlgraph.SetNeighbors(jtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScheduledJobs chains the current query on the "scheduled_jobs" edge.
func (jtq *JobTemplateQuery) QueryScheduledJobs() *ScheduledJobQuery {
	query := (&ScheduledJobClient{config: jtq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := jtq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := jtq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(jobtemplate.Table, jobtemplate.FieldID, selector),
			sqlgraph.To(scheduledjob.Table, scheduledjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobtemplate.ScheduledJobsTable, jobtemplate.ScheduledJobsColumn),
		)
		schemaConfig := jtq.schemaConfig
		step.To.Schema = schemaConfig.ScheduledJob
		step.Edge.Schema = schemaConfig.ScheduledJob
		fromU = sqlgraph.SetNeighbors(jtq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first JobTemplate entity from the query.
// Returns a *NotFoundError when no JobTemplate was found.
func (jtq *JobTemplateQuery) First(ctx context.Context) (*JobTemplate, error) {
	nodes, err := jtq.Limit(1).All(setContextOp(ctx, jtq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jobtemplate.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jtq *JobTemplateQuery) FirstX(ctx context.Context) *JobTemplate {
	node, err := jtq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobTemplate ID from the query.
// Returns a *NotFoundError when no JobTemplate ID was found.
func (jtq *JobTemplateQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = jtq.Limit(1).IDs(setContextOp(ctx, jtq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jobtemplate.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jtq *JobTemplateQuery) FirstIDX(ctx context.Context) string {
	id, err := jtq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobTemplate entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobTemplate entity is found.
// Returns a *NotFoundError when no JobTemplate entities are found.
func (jtq *JobTemplateQuery) Only(ctx context.Context) (*JobTemplate, error) {
	nodes, err := jtq.Limit(2).All(setContextOp(ctx, jtq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jobtemplate.Label}
	default:
		return nil, &NotSingularError{jobtemplate.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jtq *JobTemplateQuery) OnlyX(ctx context.Context) *JobTemplate {
	node, err := jtq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobTemplate ID in the query.
// Returns a *NotSingularError when more than one JobTemplate ID is found.
// Returns a *NotFoundError when no entities are found.
func (jtq *JobTemplateQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = jtq.Limit(2).IDs(setContextOp(ctx, jtq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jobtemplate.Label}
	default:
		err = &NotSingularError{jobtemplate.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jtq *JobTemplateQuery) OnlyIDX(ctx context.Context) string {
	id, err := jtq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobTemplates.
func (jtq *JobTemplateQuery) All(ctx context.Context) ([]*JobTemplate, error) {
	ctx = setContextOp(ctx, jtq.ctx, ent.OpQueryAll)
	if err := jtq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobTemplate, *JobTemplateQuery]()
	return withInterceptors[[]*JobTemplate](ctx, jtq, qr, jtq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jtq *JobTemplateQuery) AllX(ctx context.Context) []*JobTemplate {
	nodes, err := jtq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobTemplate IDs.
func (jtq *JobTemplateQuery) IDs(ctx context.Context) (ids []string, err error) {
	if jtq.ctx.Unique == nil && jtq.path != nil {
		jtq.Unique(true)
	}
	ctx = setContextOp(ctx, jtq.ctx, ent.OpQueryIDs)
	if err = jtq.Select(jobtemplate.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jtq *JobTemplateQuery) IDsX(ctx context.Context) []string {
	ids, err := jtq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jtq *JobTemplateQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jtq.ctx, ent.OpQueryCount)
	if err := jtq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jtq, querierCount[*JobTemplateQuery](), jtq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jtq *JobTemplateQuery) CountX(ctx context.Context) int {
	count, err := jtq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jtq *JobTemplateQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jtq.ctx, ent.OpQueryExist)
	switch _, err := jtq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jtq *JobTemplateQuery) ExistX(ctx context.Context) bool {
	exist, err := jtq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobTemplateQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jtq *JobTemplateQuery) Clone() *JobTemplateQuery {
	if jtq == nil {
		return nil
	}
	return &JobTemplateQuery{
		config:            jtq.config,
		ctx:               jtq.ctx.Clone(),
		order:             append([]jobtemplate.OrderOption{}, jtq.order...),
		inters:            append([]Interceptor{}, jtq.inters...),
		predicates:        append([]predicate.JobTemplate{}, jtq.predicates...),
		withOwner:         jtq.withOwner.Clone(),
		withScheduledJobs: jtq.withScheduledJobs.Clone(),
		// clone intermediate query.
		sql:       jtq.sql.Clone(),
		path:      jtq.path,
		modifiers: append([]func(*sql.Selector){}, jtq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (jtq *JobTemplateQuery) WithOwner(opts ...func(*OrganizationQuery)) *JobTemplateQuery {
	query := (&OrganizationClient{config: jtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jtq.withOwner = query
	return jtq
}

// WithScheduledJobs tells the query-builder to eager-load the nodes that are connected to
// the "scheduled_jobs" edge. The optional arguments are used to configure the query builder of the edge.
func (jtq *JobTemplateQuery) WithScheduledJobs(opts ...func(*ScheduledJobQuery)) *JobTemplateQuery {
	query := (&ScheduledJobClient{config: jtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	jtq.withScheduledJobs = query
	return jtq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobTemplate.Query().
//		GroupBy(jobtemplate.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (jtq *JobTemplateQuery) GroupBy(field string, fields ...string) *JobTemplateGroupBy {
	jtq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobTemplateGroupBy{build: jtq}
	grbuild.flds = &jtq.ctx.Fields
	grbuild.label = jobtemplate.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.JobTemplate.Query().
//		Select(jobtemplate.FieldCreatedAt).
//		Scan(ctx, &v)
func (jtq *JobTemplateQuery) Select(fields ...string) *JobTemplateSelect {
	jtq.ctx.Fields = append(jtq.ctx.Fields, fields...)
	sbuild := &JobTemplateSelect{JobTemplateQuery: jtq}
	sbuild.label = jobtemplate.Label
	sbuild.flds, sbuild.scan = &jtq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobTemplateSelect configured with the given aggregations.
func (jtq *JobTemplateQuery) Aggregate(fns ...AggregateFunc) *JobTemplateSelect {
	return jtq.Select().Aggregate(fns...)
}

func (jtq *JobTemplateQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jtq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jtq); err != nil {
				return err
			}
		}
	}
	for _, f := range jtq.ctx.Fields {
		if !jobtemplate.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if jtq.path != nil {
		prev, err := jtq.path(ctx)
		if err != nil {
			return err
		}
		jtq.sql = prev
	}
	if jobtemplate.Policy == nil {
		return errors.New("generated: uninitialized jobtemplate.Policy (forgotten import generated/runtime?)")
	}
	if err := jobtemplate.Policy.EvalQuery(ctx, jtq); err != nil {
		return err
	}
	return nil
}

func (jtq *JobTemplateQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobTemplate, error) {
	var (
		nodes       = []*JobTemplate{}
		_spec       = jtq.querySpec()
		loadedTypes = [2]bool{
			jtq.withOwner != nil,
			jtq.withScheduledJobs != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobTemplate).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobTemplate{config: jtq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = jtq.schemaConfig.JobTemplate
	ctx = internal.NewSchemaConfigContext(ctx, jtq.schemaConfig)
	if len(jtq.modifiers) > 0 {
		_spec.Modifiers = jtq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jtq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := jtq.withOwner; query != nil {
		if err := jtq.loadOwner(ctx, query, nodes, nil,
			func(n *JobTemplate, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := jtq.withScheduledJobs; query != nil {
		if err := jtq.loadScheduledJobs(ctx, query, nodes,
			func(n *JobTemplate) { n.Edges.ScheduledJobs = []*ScheduledJob{} },
			func(n *JobTemplate, e *ScheduledJob) { n.Edges.ScheduledJobs = append(n.Edges.ScheduledJobs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range jtq.withNamedScheduledJobs {
		if err := jtq.loadScheduledJobs(ctx, query, nodes,
			func(n *JobTemplate) { n.appendNamedScheduledJobs(name) },
			func(n *JobTemplate, e *ScheduledJob) { n.appendNamedScheduledJobs(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range jtq.loadTotal {
		if err := jtq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jtq *JobTemplateQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*JobTemplate, init func(*JobTemplate), assign func(*JobTemplate, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*JobTemplate)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (jtq *JobTemplateQuery) loadScheduledJobs(ctx context.Context, query *ScheduledJobQuery, nodes []*JobTemplate, init func(*JobTemplate), assign func(*JobTemplate, *ScheduledJob)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*JobTemplate)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(scheduledjob.FieldJobID)
	}
	query.Where(predicate.ScheduledJob(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(jobtemplate.ScheduledJobsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.JobID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "job_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (jtq *JobTemplateQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jtq.querySpec()
	_spec.Node.Schema = jtq.schemaConfig.JobTemplate
	ctx = internal.NewSchemaConfigContext(ctx, jtq.schemaConfig)
	if len(jtq.modifiers) > 0 {
		_spec.Modifiers = jtq.modifiers
	}
	_spec.Node.Columns = jtq.ctx.Fields
	if len(jtq.ctx.Fields) > 0 {
		_spec.Unique = jtq.ctx.Unique != nil && *jtq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jtq.driver, _spec)
}

func (jtq *JobTemplateQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jobtemplate.Table, jobtemplate.Columns, sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString))
	_spec.From = jtq.sql
	if unique := jtq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jtq.path != nil {
		_spec.Unique = true
	}
	if fields := jtq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobtemplate.FieldID)
		for i := range fields {
			if fields[i] != jobtemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if jtq.withOwner != nil {
			_spec.Node.AddColumnOnce(jobtemplate.FieldOwnerID)
		}
	}
	if ps := jtq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jtq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jtq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jtq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jtq *JobTemplateQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jtq.driver.Dialect())
	t1 := builder.Table(jobtemplate.Table)
	columns := jtq.ctx.Fields
	if len(columns) == 0 {
		columns = jobtemplate.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jtq.sql != nil {
		selector = jtq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jtq.ctx.Unique != nil && *jtq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(jtq.schemaConfig.JobTemplate)
	ctx = internal.NewSchemaConfigContext(ctx, jtq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range jtq.modifiers {
		m(selector)
	}
	for _, p := range jtq.predicates {
		p(selector)
	}
	for _, p := range jtq.order {
		p(selector)
	}
	if offset := jtq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jtq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jtq *JobTemplateQuery) Modify(modifiers ...func(s *sql.Selector)) *JobTemplateSelect {
	jtq.modifiers = append(jtq.modifiers, modifiers...)
	return jtq.Select()
}

// WithNamedScheduledJobs tells the query-builder to eager-load the nodes that are connected to the "scheduled_jobs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (jtq *JobTemplateQuery) WithNamedScheduledJobs(name string, opts ...func(*ScheduledJobQuery)) *JobTemplateQuery {
	query := (&ScheduledJobClient{config: jtq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if jtq.withNamedScheduledJobs == nil {
		jtq.withNamedScheduledJobs = make(map[string]*ScheduledJobQuery)
	}
	jtq.withNamedScheduledJobs[name] = query
	return jtq
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (jtq *JobTemplateQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jtq.ctx, ent.OpQueryIDs)
	if err := jtq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return jtq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, jtq, qr, jtq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// JobTemplateGroupBy is the group-by builder for JobTemplate entities.
type JobTemplateGroupBy struct {
	selector
	build *JobTemplateQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jtgb *JobTemplateGroupBy) Aggregate(fns ...AggregateFunc) *JobTemplateGroupBy {
	jtgb.fns = append(jtgb.fns, fns...)
	return jtgb
}

// Scan applies the selector query and scans the result into the given value.
func (jtgb *JobTemplateGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jtgb.build.ctx, ent.OpQueryGroupBy)
	if err := jtgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobTemplateQuery, *JobTemplateGroupBy](ctx, jtgb.build, jtgb, jtgb.build.inters, v)
}

func (jtgb *JobTemplateGroupBy) sqlScan(ctx context.Context, root *JobTemplateQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jtgb.fns))
	for _, fn := range jtgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jtgb.flds)+len(jtgb.fns))
		for _, f := range *jtgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jtgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jtgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobTemplateSelect is the builder for selecting fields of JobTemplate entities.
type JobTemplateSelect struct {
	*JobTemplateQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jts *JobTemplateSelect) Aggregate(fns ...AggregateFunc) *JobTemplateSelect {
	jts.fns = append(jts.fns, fns...)
	return jts
}

// Scan applies the selector query and scans the result into the given value.
func (jts *JobTemplateSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jts.ctx, ent.OpQuerySelect)
	if err := jts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobTemplateQuery, *JobTemplateSelect](ctx, jts.JobTemplateQuery, jts, jts.inters, v)
}

func (jts *JobTemplateSelect) sqlScan(ctx context.Context, root *JobTemplateQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jts.fns))
	for _, fn := range jts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jts *JobTemplateSelect) Modify(modifiers ...func(s *sql.Selector)) *JobTemplateSelect {
	jts.modifiers = append(jts.modifiers, modifiers...)
	return jts
}
