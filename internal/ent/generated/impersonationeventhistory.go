// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/impersonationeventhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ImpersonationEventHistory is the model entity for the ImpersonationEventHistory schema.
type ImpersonationEventHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// Type of impersonation: SUPPORT, ADMIN, JOB
	ImpersonationType enums.ImpersonationType `json:"impersonation_type,omitempty"`
	// Action for the impersonation event
	Action enums.ImpersonationAction `json:"action,omitempty"`
	// Reason for impersonation
	Reason string `json:"reason,omitempty"`
	// IP address of the impersonator
	IPAddress string `json:"ip_address,omitempty"`
	// User-Agent of the impersonator
	UserAgent string `json:"user_agent,omitempty"`
	// Granted scopes during impersonation
	Scopes []string `json:"scopes,omitempty"`
	// Impersonator user id
	UserID string `json:"user_id,omitempty"`
	// id of the organization that is being impersonated
	OrganizationID string `json:"organization_id,omitempty"`
	// id of the user that is being impersonated
	TargetUserID string `json:"target_user_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ImpersonationEventHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case impersonationeventhistory.FieldTags, impersonationeventhistory.FieldScopes:
			values[i] = new([]byte)
		case impersonationeventhistory.FieldOperation:
			values[i] = new(history.OpType)
		case impersonationeventhistory.FieldID, impersonationeventhistory.FieldRef, impersonationeventhistory.FieldCreatedBy, impersonationeventhistory.FieldUpdatedBy, impersonationeventhistory.FieldDeletedBy, impersonationeventhistory.FieldImpersonationType, impersonationeventhistory.FieldAction, impersonationeventhistory.FieldReason, impersonationeventhistory.FieldIPAddress, impersonationeventhistory.FieldUserAgent, impersonationeventhistory.FieldUserID, impersonationeventhistory.FieldOrganizationID, impersonationeventhistory.FieldTargetUserID:
			values[i] = new(sql.NullString)
		case impersonationeventhistory.FieldHistoryTime, impersonationeventhistory.FieldCreatedAt, impersonationeventhistory.FieldUpdatedAt, impersonationeventhistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ImpersonationEventHistory fields.
func (_m *ImpersonationEventHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case impersonationeventhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case impersonationeventhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				_m.HistoryTime = value.Time
			}
		case impersonationeventhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				_m.Ref = value.String
			}
		case impersonationeventhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				_m.Operation = *value
			}
		case impersonationeventhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case impersonationeventhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case impersonationeventhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case impersonationeventhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case impersonationeventhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case impersonationeventhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case impersonationeventhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case impersonationeventhistory.FieldImpersonationType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field impersonation_type", values[i])
			} else if value.Valid {
				_m.ImpersonationType = enums.ImpersonationType(value.String)
			}
		case impersonationeventhistory.FieldAction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action", values[i])
			} else if value.Valid {
				_m.Action = enums.ImpersonationAction(value.String)
			}
		case impersonationeventhistory.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				_m.Reason = value.String
			}
		case impersonationeventhistory.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				_m.IPAddress = value.String
			}
		case impersonationeventhistory.FieldUserAgent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_agent", values[i])
			} else if value.Valid {
				_m.UserAgent = value.String
			}
		case impersonationeventhistory.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case impersonationeventhistory.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				_m.UserID = value.String
			}
		case impersonationeventhistory.FieldOrganizationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value.Valid {
				_m.OrganizationID = value.String
			}
		case impersonationeventhistory.FieldTargetUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target_user_id", values[i])
			} else if value.Valid {
				_m.TargetUserID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ImpersonationEventHistory.
// This includes values selected through modifiers, order, etc.
func (_m *ImpersonationEventHistory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this ImpersonationEventHistory.
// Note that you need to call ImpersonationEventHistory.Unwrap() before calling this method if this ImpersonationEventHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ImpersonationEventHistory) Update() *ImpersonationEventHistoryUpdateOne {
	return NewImpersonationEventHistoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ImpersonationEventHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ImpersonationEventHistory) Unwrap() *ImpersonationEventHistory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: ImpersonationEventHistory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ImpersonationEventHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ImpersonationEventHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("history_time=")
	builder.WriteString(_m.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(_m.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", _m.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("impersonation_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.ImpersonationType))
	builder.WriteString(", ")
	builder.WriteString("action=")
	builder.WriteString(fmt.Sprintf("%v", _m.Action))
	builder.WriteString(", ")
	builder.WriteString("reason=")
	builder.WriteString(_m.Reason)
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(_m.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("user_agent=")
	builder.WriteString(_m.UserAgent)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", _m.Scopes))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(_m.UserID)
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(_m.OrganizationID)
	builder.WriteString(", ")
	builder.WriteString("target_user_id=")
	builder.WriteString(_m.TargetUserID)
	builder.WriteByte(')')
	return builder.String()
}

// ImpersonationEventHistories is a parsable slice of ImpersonationEventHistory.
type ImpersonationEventHistories []*ImpersonationEventHistory
