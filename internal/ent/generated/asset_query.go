// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scan"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// AssetQuery is the builder for querying Asset entities.
type AssetQuery struct {
	config
	ctx                    *QueryContext
	order                  []asset.OrderOption
	inters                 []Interceptor
	predicates             []predicate.Asset
	withOwner              *OrganizationQuery
	withBlockedGroups      *GroupQuery
	withEditors            *GroupQuery
	withViewers            *GroupQuery
	withScans              *ScanQuery
	withEntities           *EntityQuery
	withControls           *ControlQuery
	withFKs                bool
	loadTotal              []func(context.Context, []*Asset) error
	modifiers              []func(*sql.Selector)
	withNamedBlockedGroups map[string]*GroupQuery
	withNamedEditors       map[string]*GroupQuery
	withNamedViewers       map[string]*GroupQuery
	withNamedScans         map[string]*ScanQuery
	withNamedEntities      map[string]*EntityQuery
	withNamedControls      map[string]*ControlQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssetQuery builder.
func (_q *AssetQuery) Where(ps ...predicate.Asset) *AssetQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *AssetQuery) Limit(limit int) *AssetQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *AssetQuery) Offset(offset int) *AssetQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *AssetQuery) Unique(unique bool) *AssetQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *AssetQuery) Order(o ...asset.OrderOption) *AssetQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryOwner chains the current query on the "owner" edge.
func (_q *AssetQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, asset.OwnerTable, asset.OwnerColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Asset
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlockedGroups chains the current query on the "blocked_groups" edge.
func (_q *AssetQuery) QueryBlockedGroups() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asset.BlockedGroupsTable, asset.BlockedGroupsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEditors chains the current query on the "editors" edge.
func (_q *AssetQuery) QueryEditors() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asset.EditorsTable, asset.EditorsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryViewers chains the current query on the "viewers" edge.
func (_q *AssetQuery) QueryViewers() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, asset.ViewersTable, asset.ViewersColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScans chains the current query on the "scans" edge.
func (_q *AssetQuery) QueryScans() *ScanQuery {
	query := (&ScanClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(scan.Table, scan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asset.ScansTable, asset.ScansPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Scan
		step.Edge.Schema = schemaConfig.ScanAssets
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntities chains the current query on the "entities" edge.
func (_q *AssetQuery) QueryEntities() *EntityQuery {
	query := (&EntityClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(entity.Table, entity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asset.EntitiesTable, asset.EntitiesPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Entity
		step.Edge.Schema = schemaConfig.EntityAssets
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControls chains the current query on the "controls" edge.
func (_q *AssetQuery) QueryControls() *ControlQuery {
	query := (&ControlClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(asset.Table, asset.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, asset.ControlsTable, asset.ControlsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlAssets
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Asset entity from the query.
// Returns a *NotFoundError when no Asset was found.
func (_q *AssetQuery) First(ctx context.Context) (*Asset, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{asset.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *AssetQuery) FirstX(ctx context.Context) *Asset {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Asset ID from the query.
// Returns a *NotFoundError when no Asset ID was found.
func (_q *AssetQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{asset.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *AssetQuery) FirstIDX(ctx context.Context) string {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Asset entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Asset entity is found.
// Returns a *NotFoundError when no Asset entities are found.
func (_q *AssetQuery) Only(ctx context.Context) (*Asset, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{asset.Label}
	default:
		return nil, &NotSingularError{asset.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *AssetQuery) OnlyX(ctx context.Context) *Asset {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Asset ID in the query.
// Returns a *NotSingularError when more than one Asset ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *AssetQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{asset.Label}
	default:
		err = &NotSingularError{asset.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *AssetQuery) OnlyIDX(ctx context.Context) string {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Assets.
func (_q *AssetQuery) All(ctx context.Context) ([]*Asset, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Asset, *AssetQuery]()
	return withInterceptors[[]*Asset](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *AssetQuery) AllX(ctx context.Context) []*Asset {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Asset IDs.
func (_q *AssetQuery) IDs(ctx context.Context) (ids []string, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(asset.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *AssetQuery) IDsX(ctx context.Context) []string {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *AssetQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*AssetQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *AssetQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *AssetQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *AssetQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssetQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *AssetQuery) Clone() *AssetQuery {
	if _q == nil {
		return nil
	}
	return &AssetQuery{
		config:            _q.config,
		ctx:               _q.ctx.Clone(),
		order:             append([]asset.OrderOption{}, _q.order...),
		inters:            append([]Interceptor{}, _q.inters...),
		predicates:        append([]predicate.Asset{}, _q.predicates...),
		withOwner:         _q.withOwner.Clone(),
		withBlockedGroups: _q.withBlockedGroups.Clone(),
		withEditors:       _q.withEditors.Clone(),
		withViewers:       _q.withViewers.Clone(),
		withScans:         _q.withScans.Clone(),
		withEntities:      _q.withEntities.Clone(),
		withControls:      _q.withControls.Clone(),
		// clone intermediate query.
		sql:       _q.sql.Clone(),
		path:      _q.path,
		modifiers: append([]func(*sql.Selector){}, _q.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithOwner(opts ...func(*OrganizationQuery)) *AssetQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOwner = query
	return _q
}

// WithBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithBlockedGroups(opts ...func(*GroupQuery)) *AssetQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withBlockedGroups = query
	return _q
}

// WithEditors tells the query-builder to eager-load the nodes that are connected to
// the "editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithEditors(opts ...func(*GroupQuery)) *AssetQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEditors = query
	return _q
}

// WithViewers tells the query-builder to eager-load the nodes that are connected to
// the "viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithViewers(opts ...func(*GroupQuery)) *AssetQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withViewers = query
	return _q
}

// WithScans tells the query-builder to eager-load the nodes that are connected to
// the "scans" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithScans(opts ...func(*ScanQuery)) *AssetQuery {
	query := (&ScanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withScans = query
	return _q
}

// WithEntities tells the query-builder to eager-load the nodes that are connected to
// the "entities" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithEntities(opts ...func(*EntityQuery)) *AssetQuery {
	query := (&EntityClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEntities = query
	return _q
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithControls(opts ...func(*ControlQuery)) *AssetQuery {
	query := (&ControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControls = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Asset.Query().
//		GroupBy(asset.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (_q *AssetQuery) GroupBy(field string, fields ...string) *AssetGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AssetGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = asset.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Asset.Query().
//		Select(asset.FieldCreatedAt).
//		Scan(ctx, &v)
func (_q *AssetQuery) Select(fields ...string) *AssetSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &AssetSelect{AssetQuery: _q}
	sbuild.label = asset.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssetSelect configured with the given aggregations.
func (_q *AssetQuery) Aggregate(fns ...AggregateFunc) *AssetSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *AssetQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !asset.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	if asset.Policy == nil {
		return errors.New("generated: uninitialized asset.Policy (forgotten import generated/runtime?)")
	}
	if err := asset.Policy.EvalQuery(ctx, _q); err != nil {
		return err
	}
	return nil
}

func (_q *AssetQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Asset, error) {
	var (
		nodes       = []*Asset{}
		withFKs     = _q.withFKs
		_spec       = _q.querySpec()
		loadedTypes = [7]bool{
			_q.withOwner != nil,
			_q.withBlockedGroups != nil,
			_q.withEditors != nil,
			_q.withViewers != nil,
			_q.withScans != nil,
			_q.withEntities != nil,
			_q.withControls != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, asset.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Asset).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Asset{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = _q.schemaConfig.Asset
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withOwner; query != nil {
		if err := _q.loadOwner(ctx, query, nodes, nil,
			func(n *Asset, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withBlockedGroups; query != nil {
		if err := _q.loadBlockedGroups(ctx, query, nodes,
			func(n *Asset) { n.Edges.BlockedGroups = []*Group{} },
			func(n *Asset, e *Group) { n.Edges.BlockedGroups = append(n.Edges.BlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEditors; query != nil {
		if err := _q.loadEditors(ctx, query, nodes,
			func(n *Asset) { n.Edges.Editors = []*Group{} },
			func(n *Asset, e *Group) { n.Edges.Editors = append(n.Edges.Editors, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withViewers; query != nil {
		if err := _q.loadViewers(ctx, query, nodes,
			func(n *Asset) { n.Edges.Viewers = []*Group{} },
			func(n *Asset, e *Group) { n.Edges.Viewers = append(n.Edges.Viewers, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withScans; query != nil {
		if err := _q.loadScans(ctx, query, nodes,
			func(n *Asset) { n.Edges.Scans = []*Scan{} },
			func(n *Asset, e *Scan) { n.Edges.Scans = append(n.Edges.Scans, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEntities; query != nil {
		if err := _q.loadEntities(ctx, query, nodes,
			func(n *Asset) { n.Edges.Entities = []*Entity{} },
			func(n *Asset, e *Entity) { n.Edges.Entities = append(n.Edges.Entities, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withControls; query != nil {
		if err := _q.loadControls(ctx, query, nodes,
			func(n *Asset) { n.Edges.Controls = []*Control{} },
			func(n *Asset, e *Control) { n.Edges.Controls = append(n.Edges.Controls, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedBlockedGroups {
		if err := _q.loadBlockedGroups(ctx, query, nodes,
			func(n *Asset) { n.appendNamedBlockedGroups(name) },
			func(n *Asset, e *Group) { n.appendNamedBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEditors {
		if err := _q.loadEditors(ctx, query, nodes,
			func(n *Asset) { n.appendNamedEditors(name) },
			func(n *Asset, e *Group) { n.appendNamedEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedViewers {
		if err := _q.loadViewers(ctx, query, nodes,
			func(n *Asset) { n.appendNamedViewers(name) },
			func(n *Asset, e *Group) { n.appendNamedViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedScans {
		if err := _q.loadScans(ctx, query, nodes,
			func(n *Asset) { n.appendNamedScans(name) },
			func(n *Asset, e *Scan) { n.appendNamedScans(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEntities {
		if err := _q.loadEntities(ctx, query, nodes,
			func(n *Asset) { n.appendNamedEntities(name) },
			func(n *Asset, e *Entity) { n.appendNamedEntities(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControls {
		if err := _q.loadControls(ctx, query, nodes,
			func(n *Asset) { n.appendNamedControls(name) },
			func(n *Asset, e *Control) { n.appendNamedControls(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range _q.loadTotal {
		if err := _q.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *AssetQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Asset)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *AssetQuery) loadBlockedGroups(ctx context.Context, query *GroupQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Asset)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(asset.BlockedGroupsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.asset_blocked_groups
		if fk == nil {
			return fmt.Errorf(`foreign-key "asset_blocked_groups" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "asset_blocked_groups" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AssetQuery) loadEditors(ctx context.Context, query *GroupQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Asset)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(asset.EditorsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.asset_editors
		if fk == nil {
			return fmt.Errorf(`foreign-key "asset_editors" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "asset_editors" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AssetQuery) loadViewers(ctx context.Context, query *GroupQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Asset)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(asset.ViewersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.asset_viewers
		if fk == nil {
			return fmt.Errorf(`foreign-key "asset_viewers" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "asset_viewers" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *AssetQuery) loadScans(ctx context.Context, query *ScanQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Scan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Asset)
	nids := make(map[string]map[*Asset]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(asset.ScansTable)
		joinT.Schema(_q.schemaConfig.ScanAssets)
		s.Join(joinT).On(s.C(scan.FieldID), joinT.C(asset.ScansPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(asset.ScansPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(asset.ScansPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Asset]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Scan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "scans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *AssetQuery) loadEntities(ctx context.Context, query *EntityQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Entity)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Asset)
	nids := make(map[string]map[*Asset]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(asset.EntitiesTable)
		joinT.Schema(_q.schemaConfig.EntityAssets)
		s.Join(joinT).On(s.C(entity.FieldID), joinT.C(asset.EntitiesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(asset.EntitiesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(asset.EntitiesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Asset]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Entity](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "entities" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *AssetQuery) loadControls(ctx context.Context, query *ControlQuery, nodes []*Asset, init func(*Asset), assign func(*Asset, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Asset)
	nids := make(map[string]map[*Asset]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(asset.ControlsTable)
		joinT.Schema(_q.schemaConfig.ControlAssets)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(asset.ControlsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(asset.ControlsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(asset.ControlsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Asset]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "controls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (_q *AssetQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Schema = _q.schemaConfig.Asset
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *AssetQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asset.FieldID)
		for i := range fields {
			if fields[i] != asset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if _q.withOwner != nil {
			_spec.Node.AddColumnOnce(asset.FieldOwnerID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *AssetQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(asset.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = asset.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(_q.schemaConfig.Asset)
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_q *AssetQuery) Modify(modifiers ...func(s *sql.Selector)) *AssetSelect {
	_q.modifiers = append(_q.modifiers, modifiers...)
	return _q.Select()
}

// WithNamedBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithNamedBlockedGroups(name string, opts ...func(*GroupQuery)) *AssetQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedBlockedGroups == nil {
		_q.withNamedBlockedGroups = make(map[string]*GroupQuery)
	}
	_q.withNamedBlockedGroups[name] = query
	return _q
}

// WithNamedEditors tells the query-builder to eager-load the nodes that are connected to the "editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithNamedEditors(name string, opts ...func(*GroupQuery)) *AssetQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEditors == nil {
		_q.withNamedEditors = make(map[string]*GroupQuery)
	}
	_q.withNamedEditors[name] = query
	return _q
}

// WithNamedViewers tells the query-builder to eager-load the nodes that are connected to the "viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithNamedViewers(name string, opts ...func(*GroupQuery)) *AssetQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedViewers == nil {
		_q.withNamedViewers = make(map[string]*GroupQuery)
	}
	_q.withNamedViewers[name] = query
	return _q
}

// WithNamedScans tells the query-builder to eager-load the nodes that are connected to the "scans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithNamedScans(name string, opts ...func(*ScanQuery)) *AssetQuery {
	query := (&ScanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedScans == nil {
		_q.withNamedScans = make(map[string]*ScanQuery)
	}
	_q.withNamedScans[name] = query
	return _q
}

// WithNamedEntities tells the query-builder to eager-load the nodes that are connected to the "entities"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithNamedEntities(name string, opts ...func(*EntityQuery)) *AssetQuery {
	query := (&EntityClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEntities == nil {
		_q.withNamedEntities = make(map[string]*EntityQuery)
	}
	_q.withNamedEntities[name] = query
	return _q
}

// WithNamedControls tells the query-builder to eager-load the nodes that are connected to the "controls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *AssetQuery) WithNamedControls(name string, opts ...func(*ControlQuery)) *AssetQuery {
	query := (&ControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControls == nil {
		_q.withNamedControls = make(map[string]*ControlQuery)
	}
	_q.withNamedControls[name] = query
	return _q
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (aq *AssetQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, aq.ctx, ent.OpQueryIDs)
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return aq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, aq, qr, aq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// AssetGroupBy is the group-by builder for Asset entities.
type AssetGroupBy struct {
	selector
	build *AssetQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *AssetGroupBy) Aggregate(fns ...AggregateFunc) *AssetGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *AssetGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetQuery, *AssetGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *AssetGroupBy) sqlScan(ctx context.Context, root *AssetQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssetSelect is the builder for selecting fields of Asset entities.
type AssetSelect struct {
	*AssetQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *AssetSelect) Aggregate(fns ...AggregateFunc) *AssetSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *AssetSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssetQuery, *AssetSelect](ctx, _s.AssetQuery, _s, _s.inters, v)
}

func (_s *AssetSelect) sqlScan(ctx context.Context, root *AssetQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_s *AssetSelect) Modify(modifiers ...func(s *sql.Selector)) *AssetSelect {
	_s.modifiers = append(_s.modifiers, modifiers...)
	return _s
}
