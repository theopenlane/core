// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplatehistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx/history"
)

// JobTemplateHistoryCreate is the builder for creating a JobTemplateHistory entity.
type JobTemplateHistoryCreate struct {
	config
	mutation *JobTemplateHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (_c *JobTemplateHistoryCreate) SetHistoryTime(v time.Time) *JobTemplateHistoryCreate {
	_c.mutation.SetHistoryTime(v)
	return _c
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableHistoryTime(v *time.Time) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetHistoryTime(*v)
	}
	return _c
}

// SetRef sets the "ref" field.
func (_c *JobTemplateHistoryCreate) SetRef(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetRef(v)
	return _c
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableRef(v *string) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetRef(*v)
	}
	return _c
}

// SetOperation sets the "operation" field.
func (_c *JobTemplateHistoryCreate) SetOperation(v history.OpType) *JobTemplateHistoryCreate {
	_c.mutation.SetOperation(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *JobTemplateHistoryCreate) SetCreatedAt(v time.Time) *JobTemplateHistoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableCreatedAt(v *time.Time) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *JobTemplateHistoryCreate) SetUpdatedAt(v time.Time) *JobTemplateHistoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableUpdatedAt(v *time.Time) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *JobTemplateHistoryCreate) SetCreatedBy(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableCreatedBy(v *string) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *JobTemplateHistoryCreate) SetUpdatedBy(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableUpdatedBy(v *string) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *JobTemplateHistoryCreate) SetDeletedAt(v time.Time) *JobTemplateHistoryCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableDeletedAt(v *time.Time) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *JobTemplateHistoryCreate) SetDeletedBy(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableDeletedBy(v *string) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetDisplayID sets the "display_id" field.
func (_c *JobTemplateHistoryCreate) SetDisplayID(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetDisplayID(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *JobTemplateHistoryCreate) SetTags(v []string) *JobTemplateHistoryCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *JobTemplateHistoryCreate) SetOwnerID(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableOwnerID(v *string) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetSystemOwned sets the "system_owned" field.
func (_c *JobTemplateHistoryCreate) SetSystemOwned(v bool) *JobTemplateHistoryCreate {
	_c.mutation.SetSystemOwned(v)
	return _c
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableSystemOwned(v *bool) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetSystemOwned(*v)
	}
	return _c
}

// SetInternalNotes sets the "internal_notes" field.
func (_c *JobTemplateHistoryCreate) SetInternalNotes(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetInternalNotes(v)
	return _c
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableInternalNotes(v *string) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetInternalNotes(*v)
	}
	return _c
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_c *JobTemplateHistoryCreate) SetSystemInternalID(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetSystemInternalID(v)
	return _c
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableSystemInternalID(v *string) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetSystemInternalID(*v)
	}
	return _c
}

// SetTitle sets the "title" field.
func (_c *JobTemplateHistoryCreate) SetTitle(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *JobTemplateHistoryCreate) SetDescription(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableDescription(v *string) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetPlatform sets the "platform" field.
func (_c *JobTemplateHistoryCreate) SetPlatform(v enums.JobPlatformType) *JobTemplateHistoryCreate {
	_c.mutation.SetPlatform(v)
	return _c
}

// SetWindmillPath sets the "windmill_path" field.
func (_c *JobTemplateHistoryCreate) SetWindmillPath(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetWindmillPath(v)
	return _c
}

// SetNillableWindmillPath sets the "windmill_path" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableWindmillPath(v *string) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetWindmillPath(*v)
	}
	return _c
}

// SetDownloadURL sets the "download_url" field.
func (_c *JobTemplateHistoryCreate) SetDownloadURL(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetDownloadURL(v)
	return _c
}

// SetConfiguration sets the "configuration" field.
func (_c *JobTemplateHistoryCreate) SetConfiguration(v models.JobConfiguration) *JobTemplateHistoryCreate {
	_c.mutation.SetConfiguration(v)
	return _c
}

// SetCron sets the "cron" field.
func (_c *JobTemplateHistoryCreate) SetCron(v models.Cron) *JobTemplateHistoryCreate {
	_c.mutation.SetCron(v)
	return _c
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableCron(v *models.Cron) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetCron(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *JobTemplateHistoryCreate) SetID(v string) *JobTemplateHistoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *JobTemplateHistoryCreate) SetNillableID(v *string) *JobTemplateHistoryCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the JobTemplateHistoryMutation object of the builder.
func (_c *JobTemplateHistoryCreate) Mutation() *JobTemplateHistoryMutation {
	return _c.mutation
}

// Save creates the JobTemplateHistory in the database.
func (_c *JobTemplateHistoryCreate) Save(ctx context.Context) (*JobTemplateHistory, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *JobTemplateHistoryCreate) SaveX(ctx context.Context) *JobTemplateHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *JobTemplateHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *JobTemplateHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *JobTemplateHistoryCreate) defaults() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		if jobtemplatehistory.DefaultHistoryTime == nil {
			return fmt.Errorf("generated: uninitialized jobtemplatehistory.DefaultHistoryTime (forgotten import generated/runtime?)")
		}
		v := jobtemplatehistory.DefaultHistoryTime()
		_c.mutation.SetHistoryTime(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if jobtemplatehistory.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobtemplatehistory.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := jobtemplatehistory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if jobtemplatehistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobtemplatehistory.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobtemplatehistory.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := jobtemplatehistory.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.SystemOwned(); !ok {
		v := jobtemplatehistory.DefaultSystemOwned
		_c.mutation.SetSystemOwned(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if jobtemplatehistory.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized jobtemplatehistory.DefaultID (forgotten import generated/runtime?)")
		}
		v := jobtemplatehistory.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *JobTemplateHistoryCreate) check() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "JobTemplateHistory.history_time"`)}
	}
	if _, ok := _c.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "JobTemplateHistory.operation"`)}
	}
	if v, ok := _c.mutation.Operation(); ok {
		if err := jobtemplatehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "JobTemplateHistory.operation": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "JobTemplateHistory.display_id"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`generated: missing required field "JobTemplateHistory.title"`)}
	}
	if _, ok := _c.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`generated: missing required field "JobTemplateHistory.platform"`)}
	}
	if v, ok := _c.mutation.Platform(); ok {
		if err := jobtemplatehistory.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`generated: validator failed for field "JobTemplateHistory.platform": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DownloadURL(); !ok {
		return &ValidationError{Name: "download_url", err: errors.New(`generated: missing required field "JobTemplateHistory.download_url"`)}
	}
	if v, ok := _c.mutation.Cron(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "cron", err: fmt.Errorf(`generated: validator failed for field "JobTemplateHistory.cron": %w`, err)}
		}
	}
	return nil
}

func (_c *JobTemplateHistoryCreate) sqlSave(ctx context.Context) (*JobTemplateHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected JobTemplateHistory.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *JobTemplateHistoryCreate) createSpec() (*JobTemplateHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &JobTemplateHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(jobtemplatehistory.Table, sqlgraph.NewFieldSpec(jobtemplatehistory.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.JobTemplateHistory
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.HistoryTime(); ok {
		_spec.SetField(jobtemplatehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := _c.mutation.Ref(); ok {
		_spec.SetField(jobtemplatehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := _c.mutation.Operation(); ok {
		_spec.SetField(jobtemplatehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(jobtemplatehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtemplatehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(jobtemplatehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(jobtemplatehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(jobtemplatehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(jobtemplatehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.DisplayID(); ok {
		_spec.SetField(jobtemplatehistory.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(jobtemplatehistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.OwnerID(); ok {
		_spec.SetField(jobtemplatehistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := _c.mutation.SystemOwned(); ok {
		_spec.SetField(jobtemplatehistory.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := _c.mutation.InternalNotes(); ok {
		_spec.SetField(jobtemplatehistory.FieldInternalNotes, field.TypeString, value)
		_node.InternalNotes = &value
	}
	if value, ok := _c.mutation.SystemInternalID(); ok {
		_spec.SetField(jobtemplatehistory.FieldSystemInternalID, field.TypeString, value)
		_node.SystemInternalID = &value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(jobtemplatehistory.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(jobtemplatehistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Platform(); ok {
		_spec.SetField(jobtemplatehistory.FieldPlatform, field.TypeEnum, value)
		_node.Platform = value
	}
	if value, ok := _c.mutation.WindmillPath(); ok {
		_spec.SetField(jobtemplatehistory.FieldWindmillPath, field.TypeString, value)
		_node.WindmillPath = value
	}
	if value, ok := _c.mutation.DownloadURL(); ok {
		_spec.SetField(jobtemplatehistory.FieldDownloadURL, field.TypeString, value)
		_node.DownloadURL = value
	}
	if value, ok := _c.mutation.Configuration(); ok {
		_spec.SetField(jobtemplatehistory.FieldConfiguration, field.TypeJSON, value)
		_node.Configuration = value
	}
	if value, ok := _c.mutation.Cron(); ok {
		_spec.SetField(jobtemplatehistory.FieldCron, field.TypeString, value)
		_node.Cron = &value
	}
	return _node, _spec
}

// JobTemplateHistoryCreateBulk is the builder for creating many JobTemplateHistory entities in bulk.
type JobTemplateHistoryCreateBulk struct {
	config
	err      error
	builders []*JobTemplateHistoryCreate
}

// Save creates the JobTemplateHistory entities in the database.
func (_c *JobTemplateHistoryCreateBulk) Save(ctx context.Context) ([]*JobTemplateHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*JobTemplateHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobTemplateHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *JobTemplateHistoryCreateBulk) SaveX(ctx context.Context) []*JobTemplateHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *JobTemplateHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *JobTemplateHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
