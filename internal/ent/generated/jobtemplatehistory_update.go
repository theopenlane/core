// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplatehistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// JobTemplateHistoryUpdate is the builder for updating JobTemplateHistory entities.
type JobTemplateHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *JobTemplateHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the JobTemplateHistoryUpdate builder.
func (_u *JobTemplateHistoryUpdate) Where(ps ...predicate.JobTemplateHistory) *JobTemplateHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *JobTemplateHistoryUpdate) SetUpdatedAt(v time.Time) *JobTemplateHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *JobTemplateHistoryUpdate) ClearUpdatedAt() *JobTemplateHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *JobTemplateHistoryUpdate) SetUpdatedBy(v string) *JobTemplateHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdate) SetNillableUpdatedBy(v *string) *JobTemplateHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *JobTemplateHistoryUpdate) ClearUpdatedBy() *JobTemplateHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *JobTemplateHistoryUpdate) SetDeletedAt(v time.Time) *JobTemplateHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdate) SetNillableDeletedAt(v *time.Time) *JobTemplateHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *JobTemplateHistoryUpdate) ClearDeletedAt() *JobTemplateHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *JobTemplateHistoryUpdate) SetDeletedBy(v string) *JobTemplateHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdate) SetNillableDeletedBy(v *string) *JobTemplateHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *JobTemplateHistoryUpdate) ClearDeletedBy() *JobTemplateHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *JobTemplateHistoryUpdate) SetTags(v []string) *JobTemplateHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *JobTemplateHistoryUpdate) AppendTags(v []string) *JobTemplateHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *JobTemplateHistoryUpdate) ClearTags() *JobTemplateHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *JobTemplateHistoryUpdate) SetOwnerID(v string) *JobTemplateHistoryUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdate) SetNillableOwnerID(v *string) *JobTemplateHistoryUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *JobTemplateHistoryUpdate) ClearOwnerID() *JobTemplateHistoryUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *JobTemplateHistoryUpdate) SetInternalNotes(v string) *JobTemplateHistoryUpdate {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdate) SetNillableInternalNotes(v *string) *JobTemplateHistoryUpdate {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *JobTemplateHistoryUpdate) ClearInternalNotes() *JobTemplateHistoryUpdate {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *JobTemplateHistoryUpdate) SetSystemInternalID(v string) *JobTemplateHistoryUpdate {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdate) SetNillableSystemInternalID(v *string) *JobTemplateHistoryUpdate {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *JobTemplateHistoryUpdate) ClearSystemInternalID() *JobTemplateHistoryUpdate {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *JobTemplateHistoryUpdate) SetTitle(v string) *JobTemplateHistoryUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdate) SetNillableTitle(v *string) *JobTemplateHistoryUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *JobTemplateHistoryUpdate) SetDescription(v string) *JobTemplateHistoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdate) SetNillableDescription(v *string) *JobTemplateHistoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *JobTemplateHistoryUpdate) ClearDescription() *JobTemplateHistoryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetWindmillPath sets the "windmill_path" field.
func (_u *JobTemplateHistoryUpdate) SetWindmillPath(v string) *JobTemplateHistoryUpdate {
	_u.mutation.SetWindmillPath(v)
	return _u
}

// SetNillableWindmillPath sets the "windmill_path" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdate) SetNillableWindmillPath(v *string) *JobTemplateHistoryUpdate {
	if v != nil {
		_u.SetWindmillPath(*v)
	}
	return _u
}

// ClearWindmillPath clears the value of the "windmill_path" field.
func (_u *JobTemplateHistoryUpdate) ClearWindmillPath() *JobTemplateHistoryUpdate {
	_u.mutation.ClearWindmillPath()
	return _u
}

// SetDownloadURL sets the "download_url" field.
func (_u *JobTemplateHistoryUpdate) SetDownloadURL(v string) *JobTemplateHistoryUpdate {
	_u.mutation.SetDownloadURL(v)
	return _u
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdate) SetNillableDownloadURL(v *string) *JobTemplateHistoryUpdate {
	if v != nil {
		_u.SetDownloadURL(*v)
	}
	return _u
}

// SetConfiguration sets the "configuration" field.
func (_u *JobTemplateHistoryUpdate) SetConfiguration(v models.JobConfiguration) *JobTemplateHistoryUpdate {
	_u.mutation.SetConfiguration(v)
	return _u
}

// AppendConfiguration appends value to the "configuration" field.
func (_u *JobTemplateHistoryUpdate) AppendConfiguration(v models.JobConfiguration) *JobTemplateHistoryUpdate {
	_u.mutation.AppendConfiguration(v)
	return _u
}

// ClearConfiguration clears the value of the "configuration" field.
func (_u *JobTemplateHistoryUpdate) ClearConfiguration() *JobTemplateHistoryUpdate {
	_u.mutation.ClearConfiguration()
	return _u
}

// SetCron sets the "cron" field.
func (_u *JobTemplateHistoryUpdate) SetCron(v models.Cron) *JobTemplateHistoryUpdate {
	_u.mutation.SetCron(v)
	return _u
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdate) SetNillableCron(v *models.Cron) *JobTemplateHistoryUpdate {
	if v != nil {
		_u.SetCron(*v)
	}
	return _u
}

// ClearCron clears the value of the "cron" field.
func (_u *JobTemplateHistoryUpdate) ClearCron() *JobTemplateHistoryUpdate {
	_u.mutation.ClearCron()
	return _u
}

// Mutation returns the JobTemplateHistoryMutation object of the builder.
func (_u *JobTemplateHistoryUpdate) Mutation() *JobTemplateHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *JobTemplateHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobTemplateHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *JobTemplateHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobTemplateHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *JobTemplateHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if jobtemplatehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobtemplatehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobtemplatehistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *JobTemplateHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobTemplateHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *JobTemplateHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobtemplatehistory.Table, jobtemplatehistory.Columns, sqlgraph.NewFieldSpec(jobtemplatehistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(jobtemplatehistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(jobtemplatehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtemplatehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobtemplatehistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(jobtemplatehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(jobtemplatehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(jobtemplatehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(jobtemplatehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(jobtemplatehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(jobtemplatehistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(jobtemplatehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(jobtemplatehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobtemplatehistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(jobtemplatehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(jobtemplatehistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(jobtemplatehistory.FieldOwnerID, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(jobtemplatehistory.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(jobtemplatehistory.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(jobtemplatehistory.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(jobtemplatehistory.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(jobtemplatehistory.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(jobtemplatehistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(jobtemplatehistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(jobtemplatehistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.WindmillPath(); ok {
		_spec.SetField(jobtemplatehistory.FieldWindmillPath, field.TypeString, value)
	}
	if _u.mutation.WindmillPathCleared() {
		_spec.ClearField(jobtemplatehistory.FieldWindmillPath, field.TypeString)
	}
	if value, ok := _u.mutation.DownloadURL(); ok {
		_spec.SetField(jobtemplatehistory.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Configuration(); ok {
		_spec.SetField(jobtemplatehistory.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedConfiguration(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobtemplatehistory.FieldConfiguration, value)
		})
	}
	if _u.mutation.ConfigurationCleared() {
		_spec.ClearField(jobtemplatehistory.FieldConfiguration, field.TypeJSON)
	}
	if value, ok := _u.mutation.Cron(); ok {
		_spec.SetField(jobtemplatehistory.FieldCron, field.TypeString, value)
	}
	if _u.mutation.CronCleared() {
		_spec.ClearField(jobtemplatehistory.FieldCron, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.JobTemplateHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobtemplatehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// JobTemplateHistoryUpdateOne is the builder for updating a single JobTemplateHistory entity.
type JobTemplateHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *JobTemplateHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *JobTemplateHistoryUpdateOne) SetUpdatedAt(v time.Time) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *JobTemplateHistoryUpdateOne) ClearUpdatedAt() *JobTemplateHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *JobTemplateHistoryUpdateOne) SetUpdatedBy(v string) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdateOne) SetNillableUpdatedBy(v *string) *JobTemplateHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *JobTemplateHistoryUpdateOne) ClearUpdatedBy() *JobTemplateHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *JobTemplateHistoryUpdateOne) SetDeletedAt(v time.Time) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *JobTemplateHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *JobTemplateHistoryUpdateOne) ClearDeletedAt() *JobTemplateHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *JobTemplateHistoryUpdateOne) SetDeletedBy(v string) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdateOne) SetNillableDeletedBy(v *string) *JobTemplateHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *JobTemplateHistoryUpdateOne) ClearDeletedBy() *JobTemplateHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *JobTemplateHistoryUpdateOne) SetTags(v []string) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *JobTemplateHistoryUpdateOne) AppendTags(v []string) *JobTemplateHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *JobTemplateHistoryUpdateOne) ClearTags() *JobTemplateHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *JobTemplateHistoryUpdateOne) SetOwnerID(v string) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdateOne) SetNillableOwnerID(v *string) *JobTemplateHistoryUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *JobTemplateHistoryUpdateOne) ClearOwnerID() *JobTemplateHistoryUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *JobTemplateHistoryUpdateOne) SetInternalNotes(v string) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdateOne) SetNillableInternalNotes(v *string) *JobTemplateHistoryUpdateOne {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *JobTemplateHistoryUpdateOne) ClearInternalNotes() *JobTemplateHistoryUpdateOne {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *JobTemplateHistoryUpdateOne) SetSystemInternalID(v string) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdateOne) SetNillableSystemInternalID(v *string) *JobTemplateHistoryUpdateOne {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *JobTemplateHistoryUpdateOne) ClearSystemInternalID() *JobTemplateHistoryUpdateOne {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *JobTemplateHistoryUpdateOne) SetTitle(v string) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdateOne) SetNillableTitle(v *string) *JobTemplateHistoryUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *JobTemplateHistoryUpdateOne) SetDescription(v string) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdateOne) SetNillableDescription(v *string) *JobTemplateHistoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *JobTemplateHistoryUpdateOne) ClearDescription() *JobTemplateHistoryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetWindmillPath sets the "windmill_path" field.
func (_u *JobTemplateHistoryUpdateOne) SetWindmillPath(v string) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetWindmillPath(v)
	return _u
}

// SetNillableWindmillPath sets the "windmill_path" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdateOne) SetNillableWindmillPath(v *string) *JobTemplateHistoryUpdateOne {
	if v != nil {
		_u.SetWindmillPath(*v)
	}
	return _u
}

// ClearWindmillPath clears the value of the "windmill_path" field.
func (_u *JobTemplateHistoryUpdateOne) ClearWindmillPath() *JobTemplateHistoryUpdateOne {
	_u.mutation.ClearWindmillPath()
	return _u
}

// SetDownloadURL sets the "download_url" field.
func (_u *JobTemplateHistoryUpdateOne) SetDownloadURL(v string) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetDownloadURL(v)
	return _u
}

// SetNillableDownloadURL sets the "download_url" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdateOne) SetNillableDownloadURL(v *string) *JobTemplateHistoryUpdateOne {
	if v != nil {
		_u.SetDownloadURL(*v)
	}
	return _u
}

// SetConfiguration sets the "configuration" field.
func (_u *JobTemplateHistoryUpdateOne) SetConfiguration(v models.JobConfiguration) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetConfiguration(v)
	return _u
}

// AppendConfiguration appends value to the "configuration" field.
func (_u *JobTemplateHistoryUpdateOne) AppendConfiguration(v models.JobConfiguration) *JobTemplateHistoryUpdateOne {
	_u.mutation.AppendConfiguration(v)
	return _u
}

// ClearConfiguration clears the value of the "configuration" field.
func (_u *JobTemplateHistoryUpdateOne) ClearConfiguration() *JobTemplateHistoryUpdateOne {
	_u.mutation.ClearConfiguration()
	return _u
}

// SetCron sets the "cron" field.
func (_u *JobTemplateHistoryUpdateOne) SetCron(v models.Cron) *JobTemplateHistoryUpdateOne {
	_u.mutation.SetCron(v)
	return _u
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (_u *JobTemplateHistoryUpdateOne) SetNillableCron(v *models.Cron) *JobTemplateHistoryUpdateOne {
	if v != nil {
		_u.SetCron(*v)
	}
	return _u
}

// ClearCron clears the value of the "cron" field.
func (_u *JobTemplateHistoryUpdateOne) ClearCron() *JobTemplateHistoryUpdateOne {
	_u.mutation.ClearCron()
	return _u
}

// Mutation returns the JobTemplateHistoryMutation object of the builder.
func (_u *JobTemplateHistoryUpdateOne) Mutation() *JobTemplateHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the JobTemplateHistoryUpdate builder.
func (_u *JobTemplateHistoryUpdateOne) Where(ps ...predicate.JobTemplateHistory) *JobTemplateHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *JobTemplateHistoryUpdateOne) Select(field string, fields ...string) *JobTemplateHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated JobTemplateHistory entity.
func (_u *JobTemplateHistoryUpdateOne) Save(ctx context.Context) (*JobTemplateHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobTemplateHistoryUpdateOne) SaveX(ctx context.Context) *JobTemplateHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *JobTemplateHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobTemplateHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *JobTemplateHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if jobtemplatehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobtemplatehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobtemplatehistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *JobTemplateHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *JobTemplateHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *JobTemplateHistoryUpdateOne) sqlSave(ctx context.Context) (_node *JobTemplateHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobtemplatehistory.Table, jobtemplatehistory.Columns, sqlgraph.NewFieldSpec(jobtemplatehistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "JobTemplateHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobtemplatehistory.FieldID)
		for _, f := range fields {
			if !jobtemplatehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != jobtemplatehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(jobtemplatehistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(jobtemplatehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(jobtemplatehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(jobtemplatehistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(jobtemplatehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(jobtemplatehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(jobtemplatehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(jobtemplatehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(jobtemplatehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(jobtemplatehistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(jobtemplatehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(jobtemplatehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobtemplatehistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(jobtemplatehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(jobtemplatehistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(jobtemplatehistory.FieldOwnerID, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(jobtemplatehistory.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(jobtemplatehistory.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(jobtemplatehistory.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(jobtemplatehistory.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(jobtemplatehistory.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(jobtemplatehistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(jobtemplatehistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(jobtemplatehistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.WindmillPath(); ok {
		_spec.SetField(jobtemplatehistory.FieldWindmillPath, field.TypeString, value)
	}
	if _u.mutation.WindmillPathCleared() {
		_spec.ClearField(jobtemplatehistory.FieldWindmillPath, field.TypeString)
	}
	if value, ok := _u.mutation.DownloadURL(); ok {
		_spec.SetField(jobtemplatehistory.FieldDownloadURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.Configuration(); ok {
		_spec.SetField(jobtemplatehistory.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedConfiguration(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobtemplatehistory.FieldConfiguration, value)
		})
	}
	if _u.mutation.ConfigurationCleared() {
		_spec.ClearField(jobtemplatehistory.FieldConfiguration, field.TypeJSON)
	}
	if value, ok := _u.mutation.Cron(); ok {
		_spec.SetField(jobtemplatehistory.FieldCron, field.TypeString, value)
	}
	if _u.mutation.CronCleared() {
		_spec.ClearField(jobtemplatehistory.FieldCron, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.JobTemplateHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &JobTemplateHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobtemplatehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
