// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/programmembership"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ProgramUpdate is the builder for updating Program entities.
type ProgramUpdate struct {
	config
	hooks     []Hook
	mutation  *ProgramMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProgramUpdate builder.
func (pu *ProgramUpdate) Where(ps ...predicate.Program) *ProgramUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProgramUpdate) SetUpdatedAt(t time.Time) *ProgramUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pu *ProgramUpdate) ClearUpdatedAt() *ProgramUpdate {
	pu.mutation.ClearUpdatedAt()
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *ProgramUpdate) SetUpdatedBy(s string) *ProgramUpdate {
	pu.mutation.SetUpdatedBy(s)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableUpdatedBy(s *string) *ProgramUpdate {
	if s != nil {
		pu.SetUpdatedBy(*s)
	}
	return pu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pu *ProgramUpdate) ClearUpdatedBy() *ProgramUpdate {
	pu.mutation.ClearUpdatedBy()
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *ProgramUpdate) SetDeletedAt(t time.Time) *ProgramUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableDeletedAt(t *time.Time) *ProgramUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *ProgramUpdate) ClearDeletedAt() *ProgramUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetDeletedBy sets the "deleted_by" field.
func (pu *ProgramUpdate) SetDeletedBy(s string) *ProgramUpdate {
	pu.mutation.SetDeletedBy(s)
	return pu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableDeletedBy(s *string) *ProgramUpdate {
	if s != nil {
		pu.SetDeletedBy(*s)
	}
	return pu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pu *ProgramUpdate) ClearDeletedBy() *ProgramUpdate {
	pu.mutation.ClearDeletedBy()
	return pu
}

// SetTags sets the "tags" field.
func (pu *ProgramUpdate) SetTags(s []string) *ProgramUpdate {
	pu.mutation.SetTags(s)
	return pu
}

// AppendTags appends s to the "tags" field.
func (pu *ProgramUpdate) AppendTags(s []string) *ProgramUpdate {
	pu.mutation.AppendTags(s)
	return pu
}

// ClearTags clears the value of the "tags" field.
func (pu *ProgramUpdate) ClearTags() *ProgramUpdate {
	pu.mutation.ClearTags()
	return pu
}

// SetOwnerID sets the "owner_id" field.
func (pu *ProgramUpdate) SetOwnerID(s string) *ProgramUpdate {
	pu.mutation.SetOwnerID(s)
	return pu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableOwnerID(s *string) *ProgramUpdate {
	if s != nil {
		pu.SetOwnerID(*s)
	}
	return pu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pu *ProgramUpdate) ClearOwnerID() *ProgramUpdate {
	pu.mutation.ClearOwnerID()
	return pu
}

// SetName sets the "name" field.
func (pu *ProgramUpdate) SetName(s string) *ProgramUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableName(s *string) *ProgramUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetDescription sets the "description" field.
func (pu *ProgramUpdate) SetDescription(s string) *ProgramUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableDescription(s *string) *ProgramUpdate {
	if s != nil {
		pu.SetDescription(*s)
	}
	return pu
}

// ClearDescription clears the value of the "description" field.
func (pu *ProgramUpdate) ClearDescription() *ProgramUpdate {
	pu.mutation.ClearDescription()
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProgramUpdate) SetStatus(es enums.ProgramStatus) *ProgramUpdate {
	pu.mutation.SetStatus(es)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableStatus(es *enums.ProgramStatus) *ProgramUpdate {
	if es != nil {
		pu.SetStatus(*es)
	}
	return pu
}

// SetStartDate sets the "start_date" field.
func (pu *ProgramUpdate) SetStartDate(t time.Time) *ProgramUpdate {
	pu.mutation.SetStartDate(t)
	return pu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableStartDate(t *time.Time) *ProgramUpdate {
	if t != nil {
		pu.SetStartDate(*t)
	}
	return pu
}

// ClearStartDate clears the value of the "start_date" field.
func (pu *ProgramUpdate) ClearStartDate() *ProgramUpdate {
	pu.mutation.ClearStartDate()
	return pu
}

// SetEndDate sets the "end_date" field.
func (pu *ProgramUpdate) SetEndDate(t time.Time) *ProgramUpdate {
	pu.mutation.SetEndDate(t)
	return pu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableEndDate(t *time.Time) *ProgramUpdate {
	if t != nil {
		pu.SetEndDate(*t)
	}
	return pu
}

// ClearEndDate clears the value of the "end_date" field.
func (pu *ProgramUpdate) ClearEndDate() *ProgramUpdate {
	pu.mutation.ClearEndDate()
	return pu
}

// SetOrganizationID sets the "organization_id" field.
func (pu *ProgramUpdate) SetOrganizationID(s string) *ProgramUpdate {
	pu.mutation.SetOrganizationID(s)
	return pu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableOrganizationID(s *string) *ProgramUpdate {
	if s != nil {
		pu.SetOrganizationID(*s)
	}
	return pu
}

// SetAuditorReady sets the "auditor_ready" field.
func (pu *ProgramUpdate) SetAuditorReady(b bool) *ProgramUpdate {
	pu.mutation.SetAuditorReady(b)
	return pu
}

// SetNillableAuditorReady sets the "auditor_ready" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableAuditorReady(b *bool) *ProgramUpdate {
	if b != nil {
		pu.SetAuditorReady(*b)
	}
	return pu
}

// SetAuditorWriteComments sets the "auditor_write_comments" field.
func (pu *ProgramUpdate) SetAuditorWriteComments(b bool) *ProgramUpdate {
	pu.mutation.SetAuditorWriteComments(b)
	return pu
}

// SetNillableAuditorWriteComments sets the "auditor_write_comments" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableAuditorWriteComments(b *bool) *ProgramUpdate {
	if b != nil {
		pu.SetAuditorWriteComments(*b)
	}
	return pu
}

// SetAuditorReadComments sets the "auditor_read_comments" field.
func (pu *ProgramUpdate) SetAuditorReadComments(b bool) *ProgramUpdate {
	pu.mutation.SetAuditorReadComments(b)
	return pu
}

// SetNillableAuditorReadComments sets the "auditor_read_comments" field if the given value is not nil.
func (pu *ProgramUpdate) SetNillableAuditorReadComments(b *bool) *ProgramUpdate {
	if b != nil {
		pu.SetAuditorReadComments(*b)
	}
	return pu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (pu *ProgramUpdate) SetOwner(o *Organization) *ProgramUpdate {
	return pu.SetOwnerID(o.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (pu *ProgramUpdate) AddControlIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddControlIDs(ids...)
	return pu
}

// AddControls adds the "controls" edges to the Control entity.
func (pu *ProgramUpdate) AddControls(c ...*Control) *ProgramUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (pu *ProgramUpdate) AddSubcontrolIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddSubcontrolIDs(ids...)
	return pu
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (pu *ProgramUpdate) AddSubcontrols(s ...*Subcontrol) *ProgramUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSubcontrolIDs(ids...)
}

// AddControlobjectiveIDs adds the "controlobjectives" edge to the ControlObjective entity by IDs.
func (pu *ProgramUpdate) AddControlobjectiveIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddControlobjectiveIDs(ids...)
	return pu
}

// AddControlobjectives adds the "controlobjectives" edges to the ControlObjective entity.
func (pu *ProgramUpdate) AddControlobjectives(c ...*ControlObjective) *ProgramUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddControlobjectiveIDs(ids...)
}

// AddPolicyIDs adds the "policies" edge to the InternalPolicy entity by IDs.
func (pu *ProgramUpdate) AddPolicyIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddPolicyIDs(ids...)
	return pu
}

// AddPolicies adds the "policies" edges to the InternalPolicy entity.
func (pu *ProgramUpdate) AddPolicies(i ...*InternalPolicy) *ProgramUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddPolicyIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (pu *ProgramUpdate) AddProcedureIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddProcedureIDs(ids...)
	return pu
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (pu *ProgramUpdate) AddProcedures(p ...*Procedure) *ProgramUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProcedureIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (pu *ProgramUpdate) AddRiskIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddRiskIDs(ids...)
	return pu
}

// AddRisks adds the "risks" edges to the Risk entity.
func (pu *ProgramUpdate) AddRisks(r ...*Risk) *ProgramUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRiskIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pu *ProgramUpdate) AddTaskIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddTaskIDs(ids...)
	return pu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pu *ProgramUpdate) AddTasks(t ...*Task) *ProgramUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTaskIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (pu *ProgramUpdate) AddNoteIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddNoteIDs(ids...)
	return pu
}

// AddNotes adds the "notes" edges to the Note entity.
func (pu *ProgramUpdate) AddNotes(n ...*Note) *ProgramUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddNoteIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (pu *ProgramUpdate) AddFileIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddFileIDs(ids...)
	return pu
}

// AddFiles adds the "files" edges to the File entity.
func (pu *ProgramUpdate) AddFiles(f ...*File) *ProgramUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.AddFileIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (pu *ProgramUpdate) AddNarrativeIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddNarrativeIDs(ids...)
	return pu
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (pu *ProgramUpdate) AddNarratives(n ...*Narrative) *ProgramUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddNarrativeIDs(ids...)
}

// AddActionplanIDs adds the "actionplans" edge to the ActionPlan entity by IDs.
func (pu *ProgramUpdate) AddActionplanIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddActionplanIDs(ids...)
	return pu
}

// AddActionplans adds the "actionplans" edges to the ActionPlan entity.
func (pu *ProgramUpdate) AddActionplans(a ...*ActionPlan) *ProgramUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddActionplanIDs(ids...)
}

// AddStandardIDs adds the "standards" edge to the Standard entity by IDs.
func (pu *ProgramUpdate) AddStandardIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddStandardIDs(ids...)
	return pu
}

// AddStandards adds the "standards" edges to the Standard entity.
func (pu *ProgramUpdate) AddStandards(s ...*Standard) *ProgramUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddStandardIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (pu *ProgramUpdate) AddUserIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddUserIDs(ids...)
	return pu
}

// AddUsers adds the "users" edges to the User entity.
func (pu *ProgramUpdate) AddUsers(u ...*User) *ProgramUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.AddUserIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the ProgramMembership entity by IDs.
func (pu *ProgramUpdate) AddMemberIDs(ids ...string) *ProgramUpdate {
	pu.mutation.AddMemberIDs(ids...)
	return pu
}

// AddMembers adds the "members" edges to the ProgramMembership entity.
func (pu *ProgramUpdate) AddMembers(p ...*ProgramMembership) *ProgramUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddMemberIDs(ids...)
}

// Mutation returns the ProgramMutation object of the builder.
func (pu *ProgramUpdate) Mutation() *ProgramMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (pu *ProgramUpdate) ClearOwner() *ProgramUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// ClearControls clears all "controls" edges to the Control entity.
func (pu *ProgramUpdate) ClearControls() *ProgramUpdate {
	pu.mutation.ClearControls()
	return pu
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (pu *ProgramUpdate) RemoveControlIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveControlIDs(ids...)
	return pu
}

// RemoveControls removes "controls" edges to Control entities.
func (pu *ProgramUpdate) RemoveControls(c ...*Control) *ProgramUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (pu *ProgramUpdate) ClearSubcontrols() *ProgramUpdate {
	pu.mutation.ClearSubcontrols()
	return pu
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (pu *ProgramUpdate) RemoveSubcontrolIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveSubcontrolIDs(ids...)
	return pu
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (pu *ProgramUpdate) RemoveSubcontrols(s ...*Subcontrol) *ProgramUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSubcontrolIDs(ids...)
}

// ClearControlobjectives clears all "controlobjectives" edges to the ControlObjective entity.
func (pu *ProgramUpdate) ClearControlobjectives() *ProgramUpdate {
	pu.mutation.ClearControlobjectives()
	return pu
}

// RemoveControlobjectiveIDs removes the "controlobjectives" edge to ControlObjective entities by IDs.
func (pu *ProgramUpdate) RemoveControlobjectiveIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveControlobjectiveIDs(ids...)
	return pu
}

// RemoveControlobjectives removes "controlobjectives" edges to ControlObjective entities.
func (pu *ProgramUpdate) RemoveControlobjectives(c ...*ControlObjective) *ProgramUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveControlobjectiveIDs(ids...)
}

// ClearPolicies clears all "policies" edges to the InternalPolicy entity.
func (pu *ProgramUpdate) ClearPolicies() *ProgramUpdate {
	pu.mutation.ClearPolicies()
	return pu
}

// RemovePolicyIDs removes the "policies" edge to InternalPolicy entities by IDs.
func (pu *ProgramUpdate) RemovePolicyIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemovePolicyIDs(ids...)
	return pu
}

// RemovePolicies removes "policies" edges to InternalPolicy entities.
func (pu *ProgramUpdate) RemovePolicies(i ...*InternalPolicy) *ProgramUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemovePolicyIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (pu *ProgramUpdate) ClearProcedures() *ProgramUpdate {
	pu.mutation.ClearProcedures()
	return pu
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (pu *ProgramUpdate) RemoveProcedureIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveProcedureIDs(ids...)
	return pu
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (pu *ProgramUpdate) RemoveProcedures(p ...*Procedure) *ProgramUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProcedureIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (pu *ProgramUpdate) ClearRisks() *ProgramUpdate {
	pu.mutation.ClearRisks()
	return pu
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (pu *ProgramUpdate) RemoveRiskIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveRiskIDs(ids...)
	return pu
}

// RemoveRisks removes "risks" edges to Risk entities.
func (pu *ProgramUpdate) RemoveRisks(r ...*Risk) *ProgramUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRiskIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (pu *ProgramUpdate) ClearTasks() *ProgramUpdate {
	pu.mutation.ClearTasks()
	return pu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (pu *ProgramUpdate) RemoveTaskIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveTaskIDs(ids...)
	return pu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (pu *ProgramUpdate) RemoveTasks(t ...*Task) *ProgramUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTaskIDs(ids...)
}

// ClearNotes clears all "notes" edges to the Note entity.
func (pu *ProgramUpdate) ClearNotes() *ProgramUpdate {
	pu.mutation.ClearNotes()
	return pu
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (pu *ProgramUpdate) RemoveNoteIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveNoteIDs(ids...)
	return pu
}

// RemoveNotes removes "notes" edges to Note entities.
func (pu *ProgramUpdate) RemoveNotes(n ...*Note) *ProgramUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveNoteIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (pu *ProgramUpdate) ClearFiles() *ProgramUpdate {
	pu.mutation.ClearFiles()
	return pu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (pu *ProgramUpdate) RemoveFileIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveFileIDs(ids...)
	return pu
}

// RemoveFiles removes "files" edges to File entities.
func (pu *ProgramUpdate) RemoveFiles(f ...*File) *ProgramUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return pu.RemoveFileIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (pu *ProgramUpdate) ClearNarratives() *ProgramUpdate {
	pu.mutation.ClearNarratives()
	return pu
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (pu *ProgramUpdate) RemoveNarrativeIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveNarrativeIDs(ids...)
	return pu
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (pu *ProgramUpdate) RemoveNarratives(n ...*Narrative) *ProgramUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveNarrativeIDs(ids...)
}

// ClearActionplans clears all "actionplans" edges to the ActionPlan entity.
func (pu *ProgramUpdate) ClearActionplans() *ProgramUpdate {
	pu.mutation.ClearActionplans()
	return pu
}

// RemoveActionplanIDs removes the "actionplans" edge to ActionPlan entities by IDs.
func (pu *ProgramUpdate) RemoveActionplanIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveActionplanIDs(ids...)
	return pu
}

// RemoveActionplans removes "actionplans" edges to ActionPlan entities.
func (pu *ProgramUpdate) RemoveActionplans(a ...*ActionPlan) *ProgramUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveActionplanIDs(ids...)
}

// ClearStandards clears all "standards" edges to the Standard entity.
func (pu *ProgramUpdate) ClearStandards() *ProgramUpdate {
	pu.mutation.ClearStandards()
	return pu
}

// RemoveStandardIDs removes the "standards" edge to Standard entities by IDs.
func (pu *ProgramUpdate) RemoveStandardIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveStandardIDs(ids...)
	return pu
}

// RemoveStandards removes "standards" edges to Standard entities.
func (pu *ProgramUpdate) RemoveStandards(s ...*Standard) *ProgramUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveStandardIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (pu *ProgramUpdate) ClearUsers() *ProgramUpdate {
	pu.mutation.ClearUsers()
	return pu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (pu *ProgramUpdate) RemoveUserIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveUserIDs(ids...)
	return pu
}

// RemoveUsers removes "users" edges to User entities.
func (pu *ProgramUpdate) RemoveUsers(u ...*User) *ProgramUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pu.RemoveUserIDs(ids...)
}

// ClearMembers clears all "members" edges to the ProgramMembership entity.
func (pu *ProgramUpdate) ClearMembers() *ProgramUpdate {
	pu.mutation.ClearMembers()
	return pu
}

// RemoveMemberIDs removes the "members" edge to ProgramMembership entities by IDs.
func (pu *ProgramUpdate) RemoveMemberIDs(ids ...string) *ProgramUpdate {
	pu.mutation.RemoveMemberIDs(ids...)
	return pu
}

// RemoveMembers removes "members" edges to ProgramMembership entities.
func (pu *ProgramUpdate) RemoveMembers(p ...*ProgramMembership) *ProgramUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProgramUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProgramUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProgramUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProgramUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProgramUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok && !pu.mutation.UpdatedAtCleared() {
		if program.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized program.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := program.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProgramUpdate) check() error {
	if v, ok := pu.mutation.OwnerID(); ok {
		if err := program.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Program.owner_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := program.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Program.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := program.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Program.status": %w`, err)}
		}
	}
	if v, ok := pu.mutation.OrganizationID(); ok {
		if err := program.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`generated: validator failed for field "Program.organization_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *ProgramUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProgramUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *ProgramUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(program.Table, program.Columns, sqlgraph.NewFieldSpec(program.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.CreatedAtCleared() {
		_spec.ClearField(program.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(program.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(program.FieldUpdatedAt, field.TypeTime)
	}
	if pu.mutation.CreatedByCleared() {
		_spec.ClearField(program.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(program.FieldUpdatedBy, field.TypeString, value)
	}
	if pu.mutation.UpdatedByCleared() {
		_spec.ClearField(program.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(program.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(program.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.DeletedBy(); ok {
		_spec.SetField(program.FieldDeletedBy, field.TypeString, value)
	}
	if pu.mutation.DeletedByCleared() {
		_spec.ClearField(program.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pu.mutation.Tags(); ok {
		_spec.SetField(program.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldTags, value)
		})
	}
	if pu.mutation.TagsCleared() {
		_spec.ClearField(program.FieldTags, field.TypeJSON)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(program.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(program.FieldDescription, field.TypeString, value)
	}
	if pu.mutation.DescriptionCleared() {
		_spec.ClearField(program.FieldDescription, field.TypeString)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(program.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.StartDate(); ok {
		_spec.SetField(program.FieldStartDate, field.TypeTime, value)
	}
	if pu.mutation.StartDateCleared() {
		_spec.ClearField(program.FieldStartDate, field.TypeTime)
	}
	if value, ok := pu.mutation.EndDate(); ok {
		_spec.SetField(program.FieldEndDate, field.TypeTime, value)
	}
	if pu.mutation.EndDateCleared() {
		_spec.ClearField(program.FieldEndDate, field.TypeTime)
	}
	if value, ok := pu.mutation.OrganizationID(); ok {
		_spec.SetField(program.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := pu.mutation.AuditorReady(); ok {
		_spec.SetField(program.FieldAuditorReady, field.TypeBool, value)
	}
	if value, ok := pu.mutation.AuditorWriteComments(); ok {
		_spec.SetField(program.FieldAuditorWriteComments, field.TypeBool, value)
	}
	if value, ok := pu.mutation.AuditorReadComments(); ok {
		_spec.SetField(program.FieldAuditorReadComments, field.TypeBool, value)
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.OwnerTable,
			Columns: []string{program.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Program
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.OwnerTable,
			Columns: []string{program.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlsTable,
			Columns: program.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedControlsIDs(); len(nodes) > 0 && !pu.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlsTable,
			Columns: program.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlsTable,
			Columns: program.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.SubcontrolsTable,
			Columns: program.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !pu.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.SubcontrolsTable,
			Columns: program.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.SubcontrolsTable,
			Columns: program.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ControlobjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlobjectivesTable,
			Columns: program.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramControlobjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedControlobjectivesIDs(); len(nodes) > 0 && !pu.mutation.ControlobjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlobjectivesTable,
			Columns: program.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ControlobjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlobjectivesTable,
			Columns: program.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.PoliciesTable,
			Columns: program.PoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramPolicies
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !pu.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.PoliciesTable,
			Columns: program.PoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.PoliciesTable,
			Columns: program.PoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ProceduresTable,
			Columns: program.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !pu.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ProceduresTable,
			Columns: program.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ProceduresTable,
			Columns: program.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.RisksTable,
			Columns: program.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRisksIDs(); len(nodes) > 0 && !pu.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.RisksTable,
			Columns: program.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.RisksTable,
			Columns: program.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.TasksTable,
			Columns: program.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !pu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.TasksTable,
			Columns: program.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.TasksTable,
			Columns: program.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NotesTable,
			Columns: program.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramNotes
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNotesIDs(); len(nodes) > 0 && !pu.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NotesTable,
			Columns: program.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramNotes
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NotesTable,
			Columns: program.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramNotes
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.FilesTable,
			Columns: program.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !pu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.FilesTable,
			Columns: program.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.FilesTable,
			Columns: program.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NarrativesTable,
			Columns: program.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !pu.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NarrativesTable,
			Columns: program.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NarrativesTable,
			Columns: program.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ActionplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ActionplansTable,
			Columns: program.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedActionplansIDs(); len(nodes) > 0 && !pu.mutation.ActionplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ActionplansTable,
			Columns: program.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ActionplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ActionplansTable,
			Columns: program.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.StandardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.StandardsTable,
			Columns: program.StandardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.StandardPrograms
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedStandardsIDs(); len(nodes) > 0 && !pu.mutation.StandardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.StandardsTable,
			Columns: program.StandardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.StandardPrograms
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.StandardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.StandardsTable,
			Columns: program.StandardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.StandardPrograms
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.UsersTable,
			Columns: program.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramMembership
		createE := &ProgramMembershipCreate{config: pu.config, mutation: newProgramMembershipMutation(pu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !pu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.UsersTable,
			Columns: program.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProgramMembershipCreate{config: pu.config, mutation: newProgramMembershipMutation(pu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.UsersTable,
			Columns: program.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProgramMembershipCreate{config: pu.config, mutation: newProgramMembershipMutation(pu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   program.MembersTable,
			Columns: []string{program.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !pu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   program.MembersTable,
			Columns: []string{program.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   program.MembersTable,
			Columns: []string{program.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = pu.schemaConfig.Program
	ctx = internal.NewSchemaConfigContext(ctx, pu.schemaConfig)
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{program.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProgramUpdateOne is the builder for updating a single Program entity.
type ProgramUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProgramMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProgramUpdateOne) SetUpdatedAt(t time.Time) *ProgramUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (puo *ProgramUpdateOne) ClearUpdatedAt() *ProgramUpdateOne {
	puo.mutation.ClearUpdatedAt()
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *ProgramUpdateOne) SetUpdatedBy(s string) *ProgramUpdateOne {
	puo.mutation.SetUpdatedBy(s)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableUpdatedBy(s *string) *ProgramUpdateOne {
	if s != nil {
		puo.SetUpdatedBy(*s)
	}
	return puo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puo *ProgramUpdateOne) ClearUpdatedBy() *ProgramUpdateOne {
	puo.mutation.ClearUpdatedBy()
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *ProgramUpdateOne) SetDeletedAt(t time.Time) *ProgramUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableDeletedAt(t *time.Time) *ProgramUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *ProgramUpdateOne) ClearDeletedAt() *ProgramUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetDeletedBy sets the "deleted_by" field.
func (puo *ProgramUpdateOne) SetDeletedBy(s string) *ProgramUpdateOne {
	puo.mutation.SetDeletedBy(s)
	return puo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableDeletedBy(s *string) *ProgramUpdateOne {
	if s != nil {
		puo.SetDeletedBy(*s)
	}
	return puo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (puo *ProgramUpdateOne) ClearDeletedBy() *ProgramUpdateOne {
	puo.mutation.ClearDeletedBy()
	return puo
}

// SetTags sets the "tags" field.
func (puo *ProgramUpdateOne) SetTags(s []string) *ProgramUpdateOne {
	puo.mutation.SetTags(s)
	return puo
}

// AppendTags appends s to the "tags" field.
func (puo *ProgramUpdateOne) AppendTags(s []string) *ProgramUpdateOne {
	puo.mutation.AppendTags(s)
	return puo
}

// ClearTags clears the value of the "tags" field.
func (puo *ProgramUpdateOne) ClearTags() *ProgramUpdateOne {
	puo.mutation.ClearTags()
	return puo
}

// SetOwnerID sets the "owner_id" field.
func (puo *ProgramUpdateOne) SetOwnerID(s string) *ProgramUpdateOne {
	puo.mutation.SetOwnerID(s)
	return puo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableOwnerID(s *string) *ProgramUpdateOne {
	if s != nil {
		puo.SetOwnerID(*s)
	}
	return puo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (puo *ProgramUpdateOne) ClearOwnerID() *ProgramUpdateOne {
	puo.mutation.ClearOwnerID()
	return puo
}

// SetName sets the "name" field.
func (puo *ProgramUpdateOne) SetName(s string) *ProgramUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableName(s *string) *ProgramUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetDescription sets the "description" field.
func (puo *ProgramUpdateOne) SetDescription(s string) *ProgramUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableDescription(s *string) *ProgramUpdateOne {
	if s != nil {
		puo.SetDescription(*s)
	}
	return puo
}

// ClearDescription clears the value of the "description" field.
func (puo *ProgramUpdateOne) ClearDescription() *ProgramUpdateOne {
	puo.mutation.ClearDescription()
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProgramUpdateOne) SetStatus(es enums.ProgramStatus) *ProgramUpdateOne {
	puo.mutation.SetStatus(es)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableStatus(es *enums.ProgramStatus) *ProgramUpdateOne {
	if es != nil {
		puo.SetStatus(*es)
	}
	return puo
}

// SetStartDate sets the "start_date" field.
func (puo *ProgramUpdateOne) SetStartDate(t time.Time) *ProgramUpdateOne {
	puo.mutation.SetStartDate(t)
	return puo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableStartDate(t *time.Time) *ProgramUpdateOne {
	if t != nil {
		puo.SetStartDate(*t)
	}
	return puo
}

// ClearStartDate clears the value of the "start_date" field.
func (puo *ProgramUpdateOne) ClearStartDate() *ProgramUpdateOne {
	puo.mutation.ClearStartDate()
	return puo
}

// SetEndDate sets the "end_date" field.
func (puo *ProgramUpdateOne) SetEndDate(t time.Time) *ProgramUpdateOne {
	puo.mutation.SetEndDate(t)
	return puo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableEndDate(t *time.Time) *ProgramUpdateOne {
	if t != nil {
		puo.SetEndDate(*t)
	}
	return puo
}

// ClearEndDate clears the value of the "end_date" field.
func (puo *ProgramUpdateOne) ClearEndDate() *ProgramUpdateOne {
	puo.mutation.ClearEndDate()
	return puo
}

// SetOrganizationID sets the "organization_id" field.
func (puo *ProgramUpdateOne) SetOrganizationID(s string) *ProgramUpdateOne {
	puo.mutation.SetOrganizationID(s)
	return puo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableOrganizationID(s *string) *ProgramUpdateOne {
	if s != nil {
		puo.SetOrganizationID(*s)
	}
	return puo
}

// SetAuditorReady sets the "auditor_ready" field.
func (puo *ProgramUpdateOne) SetAuditorReady(b bool) *ProgramUpdateOne {
	puo.mutation.SetAuditorReady(b)
	return puo
}

// SetNillableAuditorReady sets the "auditor_ready" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableAuditorReady(b *bool) *ProgramUpdateOne {
	if b != nil {
		puo.SetAuditorReady(*b)
	}
	return puo
}

// SetAuditorWriteComments sets the "auditor_write_comments" field.
func (puo *ProgramUpdateOne) SetAuditorWriteComments(b bool) *ProgramUpdateOne {
	puo.mutation.SetAuditorWriteComments(b)
	return puo
}

// SetNillableAuditorWriteComments sets the "auditor_write_comments" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableAuditorWriteComments(b *bool) *ProgramUpdateOne {
	if b != nil {
		puo.SetAuditorWriteComments(*b)
	}
	return puo
}

// SetAuditorReadComments sets the "auditor_read_comments" field.
func (puo *ProgramUpdateOne) SetAuditorReadComments(b bool) *ProgramUpdateOne {
	puo.mutation.SetAuditorReadComments(b)
	return puo
}

// SetNillableAuditorReadComments sets the "auditor_read_comments" field if the given value is not nil.
func (puo *ProgramUpdateOne) SetNillableAuditorReadComments(b *bool) *ProgramUpdateOne {
	if b != nil {
		puo.SetAuditorReadComments(*b)
	}
	return puo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (puo *ProgramUpdateOne) SetOwner(o *Organization) *ProgramUpdateOne {
	return puo.SetOwnerID(o.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (puo *ProgramUpdateOne) AddControlIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddControlIDs(ids...)
	return puo
}

// AddControls adds the "controls" edges to the Control entity.
func (puo *ProgramUpdateOne) AddControls(c ...*Control) *ProgramUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (puo *ProgramUpdateOne) AddSubcontrolIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddSubcontrolIDs(ids...)
	return puo
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (puo *ProgramUpdateOne) AddSubcontrols(s ...*Subcontrol) *ProgramUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSubcontrolIDs(ids...)
}

// AddControlobjectiveIDs adds the "controlobjectives" edge to the ControlObjective entity by IDs.
func (puo *ProgramUpdateOne) AddControlobjectiveIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddControlobjectiveIDs(ids...)
	return puo
}

// AddControlobjectives adds the "controlobjectives" edges to the ControlObjective entity.
func (puo *ProgramUpdateOne) AddControlobjectives(c ...*ControlObjective) *ProgramUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddControlobjectiveIDs(ids...)
}

// AddPolicyIDs adds the "policies" edge to the InternalPolicy entity by IDs.
func (puo *ProgramUpdateOne) AddPolicyIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddPolicyIDs(ids...)
	return puo
}

// AddPolicies adds the "policies" edges to the InternalPolicy entity.
func (puo *ProgramUpdateOne) AddPolicies(i ...*InternalPolicy) *ProgramUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddPolicyIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (puo *ProgramUpdateOne) AddProcedureIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddProcedureIDs(ids...)
	return puo
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (puo *ProgramUpdateOne) AddProcedures(p ...*Procedure) *ProgramUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProcedureIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (puo *ProgramUpdateOne) AddRiskIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddRiskIDs(ids...)
	return puo
}

// AddRisks adds the "risks" edges to the Risk entity.
func (puo *ProgramUpdateOne) AddRisks(r ...*Risk) *ProgramUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRiskIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (puo *ProgramUpdateOne) AddTaskIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddTaskIDs(ids...)
	return puo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (puo *ProgramUpdateOne) AddTasks(t ...*Task) *ProgramUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTaskIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (puo *ProgramUpdateOne) AddNoteIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddNoteIDs(ids...)
	return puo
}

// AddNotes adds the "notes" edges to the Note entity.
func (puo *ProgramUpdateOne) AddNotes(n ...*Note) *ProgramUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddNoteIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (puo *ProgramUpdateOne) AddFileIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddFileIDs(ids...)
	return puo
}

// AddFiles adds the "files" edges to the File entity.
func (puo *ProgramUpdateOne) AddFiles(f ...*File) *ProgramUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.AddFileIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (puo *ProgramUpdateOne) AddNarrativeIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddNarrativeIDs(ids...)
	return puo
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (puo *ProgramUpdateOne) AddNarratives(n ...*Narrative) *ProgramUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddNarrativeIDs(ids...)
}

// AddActionplanIDs adds the "actionplans" edge to the ActionPlan entity by IDs.
func (puo *ProgramUpdateOne) AddActionplanIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddActionplanIDs(ids...)
	return puo
}

// AddActionplans adds the "actionplans" edges to the ActionPlan entity.
func (puo *ProgramUpdateOne) AddActionplans(a ...*ActionPlan) *ProgramUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddActionplanIDs(ids...)
}

// AddStandardIDs adds the "standards" edge to the Standard entity by IDs.
func (puo *ProgramUpdateOne) AddStandardIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddStandardIDs(ids...)
	return puo
}

// AddStandards adds the "standards" edges to the Standard entity.
func (puo *ProgramUpdateOne) AddStandards(s ...*Standard) *ProgramUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddStandardIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (puo *ProgramUpdateOne) AddUserIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddUserIDs(ids...)
	return puo
}

// AddUsers adds the "users" edges to the User entity.
func (puo *ProgramUpdateOne) AddUsers(u ...*User) *ProgramUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.AddUserIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the ProgramMembership entity by IDs.
func (puo *ProgramUpdateOne) AddMemberIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.AddMemberIDs(ids...)
	return puo
}

// AddMembers adds the "members" edges to the ProgramMembership entity.
func (puo *ProgramUpdateOne) AddMembers(p ...*ProgramMembership) *ProgramUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddMemberIDs(ids...)
}

// Mutation returns the ProgramMutation object of the builder.
func (puo *ProgramUpdateOne) Mutation() *ProgramMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (puo *ProgramUpdateOne) ClearOwner() *ProgramUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// ClearControls clears all "controls" edges to the Control entity.
func (puo *ProgramUpdateOne) ClearControls() *ProgramUpdateOne {
	puo.mutation.ClearControls()
	return puo
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (puo *ProgramUpdateOne) RemoveControlIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveControlIDs(ids...)
	return puo
}

// RemoveControls removes "controls" edges to Control entities.
func (puo *ProgramUpdateOne) RemoveControls(c ...*Control) *ProgramUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (puo *ProgramUpdateOne) ClearSubcontrols() *ProgramUpdateOne {
	puo.mutation.ClearSubcontrols()
	return puo
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (puo *ProgramUpdateOne) RemoveSubcontrolIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveSubcontrolIDs(ids...)
	return puo
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (puo *ProgramUpdateOne) RemoveSubcontrols(s ...*Subcontrol) *ProgramUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSubcontrolIDs(ids...)
}

// ClearControlobjectives clears all "controlobjectives" edges to the ControlObjective entity.
func (puo *ProgramUpdateOne) ClearControlobjectives() *ProgramUpdateOne {
	puo.mutation.ClearControlobjectives()
	return puo
}

// RemoveControlobjectiveIDs removes the "controlobjectives" edge to ControlObjective entities by IDs.
func (puo *ProgramUpdateOne) RemoveControlobjectiveIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveControlobjectiveIDs(ids...)
	return puo
}

// RemoveControlobjectives removes "controlobjectives" edges to ControlObjective entities.
func (puo *ProgramUpdateOne) RemoveControlobjectives(c ...*ControlObjective) *ProgramUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveControlobjectiveIDs(ids...)
}

// ClearPolicies clears all "policies" edges to the InternalPolicy entity.
func (puo *ProgramUpdateOne) ClearPolicies() *ProgramUpdateOne {
	puo.mutation.ClearPolicies()
	return puo
}

// RemovePolicyIDs removes the "policies" edge to InternalPolicy entities by IDs.
func (puo *ProgramUpdateOne) RemovePolicyIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemovePolicyIDs(ids...)
	return puo
}

// RemovePolicies removes "policies" edges to InternalPolicy entities.
func (puo *ProgramUpdateOne) RemovePolicies(i ...*InternalPolicy) *ProgramUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemovePolicyIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (puo *ProgramUpdateOne) ClearProcedures() *ProgramUpdateOne {
	puo.mutation.ClearProcedures()
	return puo
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (puo *ProgramUpdateOne) RemoveProcedureIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveProcedureIDs(ids...)
	return puo
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (puo *ProgramUpdateOne) RemoveProcedures(p ...*Procedure) *ProgramUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProcedureIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (puo *ProgramUpdateOne) ClearRisks() *ProgramUpdateOne {
	puo.mutation.ClearRisks()
	return puo
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (puo *ProgramUpdateOne) RemoveRiskIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveRiskIDs(ids...)
	return puo
}

// RemoveRisks removes "risks" edges to Risk entities.
func (puo *ProgramUpdateOne) RemoveRisks(r ...*Risk) *ProgramUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRiskIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (puo *ProgramUpdateOne) ClearTasks() *ProgramUpdateOne {
	puo.mutation.ClearTasks()
	return puo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (puo *ProgramUpdateOne) RemoveTaskIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveTaskIDs(ids...)
	return puo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (puo *ProgramUpdateOne) RemoveTasks(t ...*Task) *ProgramUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTaskIDs(ids...)
}

// ClearNotes clears all "notes" edges to the Note entity.
func (puo *ProgramUpdateOne) ClearNotes() *ProgramUpdateOne {
	puo.mutation.ClearNotes()
	return puo
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (puo *ProgramUpdateOne) RemoveNoteIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveNoteIDs(ids...)
	return puo
}

// RemoveNotes removes "notes" edges to Note entities.
func (puo *ProgramUpdateOne) RemoveNotes(n ...*Note) *ProgramUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveNoteIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (puo *ProgramUpdateOne) ClearFiles() *ProgramUpdateOne {
	puo.mutation.ClearFiles()
	return puo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (puo *ProgramUpdateOne) RemoveFileIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveFileIDs(ids...)
	return puo
}

// RemoveFiles removes "files" edges to File entities.
func (puo *ProgramUpdateOne) RemoveFiles(f ...*File) *ProgramUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return puo.RemoveFileIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (puo *ProgramUpdateOne) ClearNarratives() *ProgramUpdateOne {
	puo.mutation.ClearNarratives()
	return puo
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (puo *ProgramUpdateOne) RemoveNarrativeIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveNarrativeIDs(ids...)
	return puo
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (puo *ProgramUpdateOne) RemoveNarratives(n ...*Narrative) *ProgramUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveNarrativeIDs(ids...)
}

// ClearActionplans clears all "actionplans" edges to the ActionPlan entity.
func (puo *ProgramUpdateOne) ClearActionplans() *ProgramUpdateOne {
	puo.mutation.ClearActionplans()
	return puo
}

// RemoveActionplanIDs removes the "actionplans" edge to ActionPlan entities by IDs.
func (puo *ProgramUpdateOne) RemoveActionplanIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveActionplanIDs(ids...)
	return puo
}

// RemoveActionplans removes "actionplans" edges to ActionPlan entities.
func (puo *ProgramUpdateOne) RemoveActionplans(a ...*ActionPlan) *ProgramUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveActionplanIDs(ids...)
}

// ClearStandards clears all "standards" edges to the Standard entity.
func (puo *ProgramUpdateOne) ClearStandards() *ProgramUpdateOne {
	puo.mutation.ClearStandards()
	return puo
}

// RemoveStandardIDs removes the "standards" edge to Standard entities by IDs.
func (puo *ProgramUpdateOne) RemoveStandardIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveStandardIDs(ids...)
	return puo
}

// RemoveStandards removes "standards" edges to Standard entities.
func (puo *ProgramUpdateOne) RemoveStandards(s ...*Standard) *ProgramUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveStandardIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (puo *ProgramUpdateOne) ClearUsers() *ProgramUpdateOne {
	puo.mutation.ClearUsers()
	return puo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (puo *ProgramUpdateOne) RemoveUserIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveUserIDs(ids...)
	return puo
}

// RemoveUsers removes "users" edges to User entities.
func (puo *ProgramUpdateOne) RemoveUsers(u ...*User) *ProgramUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return puo.RemoveUserIDs(ids...)
}

// ClearMembers clears all "members" edges to the ProgramMembership entity.
func (puo *ProgramUpdateOne) ClearMembers() *ProgramUpdateOne {
	puo.mutation.ClearMembers()
	return puo
}

// RemoveMemberIDs removes the "members" edge to ProgramMembership entities by IDs.
func (puo *ProgramUpdateOne) RemoveMemberIDs(ids ...string) *ProgramUpdateOne {
	puo.mutation.RemoveMemberIDs(ids...)
	return puo
}

// RemoveMembers removes "members" edges to ProgramMembership entities.
func (puo *ProgramUpdateOne) RemoveMembers(p ...*ProgramMembership) *ProgramUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveMemberIDs(ids...)
}

// Where appends a list predicates to the ProgramUpdate builder.
func (puo *ProgramUpdateOne) Where(ps ...predicate.Program) *ProgramUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProgramUpdateOne) Select(field string, fields ...string) *ProgramUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Program entity.
func (puo *ProgramUpdateOne) Save(ctx context.Context) (*Program, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProgramUpdateOne) SaveX(ctx context.Context) *Program {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProgramUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProgramUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProgramUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok && !puo.mutation.UpdatedAtCleared() {
		if program.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized program.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := program.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProgramUpdateOne) check() error {
	if v, ok := puo.mutation.OwnerID(); ok {
		if err := program.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Program.owner_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := program.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Program.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := program.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Program.status": %w`, err)}
		}
	}
	if v, ok := puo.mutation.OrganizationID(); ok {
		if err := program.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`generated: validator failed for field "Program.organization_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *ProgramUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProgramUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *ProgramUpdateOne) sqlSave(ctx context.Context) (_node *Program, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(program.Table, program.Columns, sqlgraph.NewFieldSpec(program.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Program.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, program.FieldID)
		for _, f := range fields {
			if !program.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != program.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.CreatedAtCleared() {
		_spec.ClearField(program.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(program.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(program.FieldUpdatedAt, field.TypeTime)
	}
	if puo.mutation.CreatedByCleared() {
		_spec.ClearField(program.FieldCreatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(program.FieldUpdatedBy, field.TypeString, value)
	}
	if puo.mutation.UpdatedByCleared() {
		_spec.ClearField(program.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(program.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(program.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.DeletedBy(); ok {
		_spec.SetField(program.FieldDeletedBy, field.TypeString, value)
	}
	if puo.mutation.DeletedByCleared() {
		_spec.ClearField(program.FieldDeletedBy, field.TypeString)
	}
	if value, ok := puo.mutation.Tags(); ok {
		_spec.SetField(program.FieldTags, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, program.FieldTags, value)
		})
	}
	if puo.mutation.TagsCleared() {
		_spec.ClearField(program.FieldTags, field.TypeJSON)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(program.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(program.FieldDescription, field.TypeString, value)
	}
	if puo.mutation.DescriptionCleared() {
		_spec.ClearField(program.FieldDescription, field.TypeString)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(program.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.StartDate(); ok {
		_spec.SetField(program.FieldStartDate, field.TypeTime, value)
	}
	if puo.mutation.StartDateCleared() {
		_spec.ClearField(program.FieldStartDate, field.TypeTime)
	}
	if value, ok := puo.mutation.EndDate(); ok {
		_spec.SetField(program.FieldEndDate, field.TypeTime, value)
	}
	if puo.mutation.EndDateCleared() {
		_spec.ClearField(program.FieldEndDate, field.TypeTime)
	}
	if value, ok := puo.mutation.OrganizationID(); ok {
		_spec.SetField(program.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := puo.mutation.AuditorReady(); ok {
		_spec.SetField(program.FieldAuditorReady, field.TypeBool, value)
	}
	if value, ok := puo.mutation.AuditorWriteComments(); ok {
		_spec.SetField(program.FieldAuditorWriteComments, field.TypeBool, value)
	}
	if value, ok := puo.mutation.AuditorReadComments(); ok {
		_spec.SetField(program.FieldAuditorReadComments, field.TypeBool, value)
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.OwnerTable,
			Columns: []string{program.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Program
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   program.OwnerTable,
			Columns: []string{program.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlsTable,
			Columns: program.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !puo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlsTable,
			Columns: program.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlsTable,
			Columns: program.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.SubcontrolsTable,
			Columns: program.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !puo.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.SubcontrolsTable,
			Columns: program.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.SubcontrolsTable,
			Columns: program.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ControlobjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlobjectivesTable,
			Columns: program.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramControlobjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedControlobjectivesIDs(); len(nodes) > 0 && !puo.mutation.ControlobjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlobjectivesTable,
			Columns: program.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ControlobjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ControlobjectivesTable,
			Columns: program.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.PoliciesTable,
			Columns: program.PoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramPolicies
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPoliciesIDs(); len(nodes) > 0 && !puo.mutation.PoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.PoliciesTable,
			Columns: program.PoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.PoliciesTable,
			Columns: program.PoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ProceduresTable,
			Columns: program.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !puo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ProceduresTable,
			Columns: program.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ProceduresTable,
			Columns: program.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.RisksTable,
			Columns: program.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRisksIDs(); len(nodes) > 0 && !puo.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.RisksTable,
			Columns: program.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.RisksTable,
			Columns: program.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.TasksTable,
			Columns: program.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !puo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.TasksTable,
			Columns: program.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.TasksTable,
			Columns: program.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NotesTable,
			Columns: program.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramNotes
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNotesIDs(); len(nodes) > 0 && !puo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NotesTable,
			Columns: program.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramNotes
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NotesTable,
			Columns: program.NotesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramNotes
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.FilesTable,
			Columns: program.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !puo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.FilesTable,
			Columns: program.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.FilesTable,
			Columns: program.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NarrativesTable,
			Columns: program.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !puo.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NarrativesTable,
			Columns: program.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.NarrativesTable,
			Columns: program.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ActionplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ActionplansTable,
			Columns: program.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedActionplansIDs(); len(nodes) > 0 && !puo.mutation.ActionplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ActionplansTable,
			Columns: program.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ActionplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   program.ActionplansTable,
			Columns: program.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.StandardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.StandardsTable,
			Columns: program.StandardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.StandardPrograms
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedStandardsIDs(); len(nodes) > 0 && !puo.mutation.StandardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.StandardsTable,
			Columns: program.StandardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.StandardPrograms
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.StandardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.StandardsTable,
			Columns: program.StandardsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.StandardPrograms
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.UsersTable,
			Columns: program.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramMembership
		createE := &ProgramMembershipCreate{config: puo.config, mutation: newProgramMembershipMutation(puo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !puo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.UsersTable,
			Columns: program.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProgramMembershipCreate{config: puo.config, mutation: newProgramMembershipMutation(puo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   program.UsersTable,
			Columns: program.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ProgramMembershipCreate{config: puo.config, mutation: newProgramMembershipMutation(puo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   program.MembersTable,
			Columns: []string{program.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !puo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   program.MembersTable,
			Columns: []string{program.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   program.MembersTable,
			Columns: []string{program.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(programmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = puo.schemaConfig.Program
	ctx = internal.NewSchemaConfigContext(ctx, puo.schemaConfig)
	_spec.AddModifiers(puo.modifiers...)
	_node = &Program{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{program.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
