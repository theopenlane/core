// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobsetting"
	"github.com/theopenlane/core/pkg/models"
)

// ScheduledJobSettingCreate is the builder for creating a ScheduledJobSetting entity.
type ScheduledJobSettingCreate struct {
	config
	mutation *ScheduledJobSettingMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sjsc *ScheduledJobSettingCreate) SetCreatedAt(t time.Time) *ScheduledJobSettingCreate {
	sjsc.mutation.SetCreatedAt(t)
	return sjsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sjsc *ScheduledJobSettingCreate) SetNillableCreatedAt(t *time.Time) *ScheduledJobSettingCreate {
	if t != nil {
		sjsc.SetCreatedAt(*t)
	}
	return sjsc
}

// SetUpdatedAt sets the "updated_at" field.
func (sjsc *ScheduledJobSettingCreate) SetUpdatedAt(t time.Time) *ScheduledJobSettingCreate {
	sjsc.mutation.SetUpdatedAt(t)
	return sjsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sjsc *ScheduledJobSettingCreate) SetNillableUpdatedAt(t *time.Time) *ScheduledJobSettingCreate {
	if t != nil {
		sjsc.SetUpdatedAt(*t)
	}
	return sjsc
}

// SetCreatedBy sets the "created_by" field.
func (sjsc *ScheduledJobSettingCreate) SetCreatedBy(s string) *ScheduledJobSettingCreate {
	sjsc.mutation.SetCreatedBy(s)
	return sjsc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sjsc *ScheduledJobSettingCreate) SetNillableCreatedBy(s *string) *ScheduledJobSettingCreate {
	if s != nil {
		sjsc.SetCreatedBy(*s)
	}
	return sjsc
}

// SetUpdatedBy sets the "updated_by" field.
func (sjsc *ScheduledJobSettingCreate) SetUpdatedBy(s string) *ScheduledJobSettingCreate {
	sjsc.mutation.SetUpdatedBy(s)
	return sjsc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sjsc *ScheduledJobSettingCreate) SetNillableUpdatedBy(s *string) *ScheduledJobSettingCreate {
	if s != nil {
		sjsc.SetUpdatedBy(*s)
	}
	return sjsc
}

// SetDeletedAt sets the "deleted_at" field.
func (sjsc *ScheduledJobSettingCreate) SetDeletedAt(t time.Time) *ScheduledJobSettingCreate {
	sjsc.mutation.SetDeletedAt(t)
	return sjsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sjsc *ScheduledJobSettingCreate) SetNillableDeletedAt(t *time.Time) *ScheduledJobSettingCreate {
	if t != nil {
		sjsc.SetDeletedAt(*t)
	}
	return sjsc
}

// SetDeletedBy sets the "deleted_by" field.
func (sjsc *ScheduledJobSettingCreate) SetDeletedBy(s string) *ScheduledJobSettingCreate {
	sjsc.mutation.SetDeletedBy(s)
	return sjsc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sjsc *ScheduledJobSettingCreate) SetNillableDeletedBy(s *string) *ScheduledJobSettingCreate {
	if s != nil {
		sjsc.SetDeletedBy(*s)
	}
	return sjsc
}

// SetTags sets the "tags" field.
func (sjsc *ScheduledJobSettingCreate) SetTags(s []string) *ScheduledJobSettingCreate {
	sjsc.mutation.SetTags(s)
	return sjsc
}

// SetScheduledJobID sets the "scheduled_job_id" field.
func (sjsc *ScheduledJobSettingCreate) SetScheduledJobID(s string) *ScheduledJobSettingCreate {
	sjsc.mutation.SetScheduledJobID(s)
	return sjsc
}

// SetNillableScheduledJobID sets the "scheduled_job_id" field if the given value is not nil.
func (sjsc *ScheduledJobSettingCreate) SetNillableScheduledJobID(s *string) *ScheduledJobSettingCreate {
	if s != nil {
		sjsc.SetScheduledJobID(*s)
	}
	return sjsc
}

// SetConfiguration sets the "configuration" field.
func (sjsc *ScheduledJobSettingCreate) SetConfiguration(mc models.JobConfiguration) *ScheduledJobSettingCreate {
	sjsc.mutation.SetConfiguration(mc)
	return sjsc
}

// SetCadence sets the "cadence" field.
func (sjsc *ScheduledJobSettingCreate) SetCadence(mc models.JobCadence) *ScheduledJobSettingCreate {
	sjsc.mutation.SetCadence(mc)
	return sjsc
}

// SetNillableCadence sets the "cadence" field if the given value is not nil.
func (sjsc *ScheduledJobSettingCreate) SetNillableCadence(mc *models.JobCadence) *ScheduledJobSettingCreate {
	if mc != nil {
		sjsc.SetCadence(*mc)
	}
	return sjsc
}

// SetCron sets the "cron" field.
func (sjsc *ScheduledJobSettingCreate) SetCron(s string) *ScheduledJobSettingCreate {
	sjsc.mutation.SetCron(s)
	return sjsc
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (sjsc *ScheduledJobSettingCreate) SetNillableCron(s *string) *ScheduledJobSettingCreate {
	if s != nil {
		sjsc.SetCron(*s)
	}
	return sjsc
}

// SetID sets the "id" field.
func (sjsc *ScheduledJobSettingCreate) SetID(s string) *ScheduledJobSettingCreate {
	sjsc.mutation.SetID(s)
	return sjsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sjsc *ScheduledJobSettingCreate) SetNillableID(s *string) *ScheduledJobSettingCreate {
	if s != nil {
		sjsc.SetID(*s)
	}
	return sjsc
}

// SetScheduledJob sets the "scheduled_job" edge to the ScheduledJob entity.
func (sjsc *ScheduledJobSettingCreate) SetScheduledJob(s *ScheduledJob) *ScheduledJobSettingCreate {
	return sjsc.SetScheduledJobID(s.ID)
}

// Mutation returns the ScheduledJobSettingMutation object of the builder.
func (sjsc *ScheduledJobSettingCreate) Mutation() *ScheduledJobSettingMutation {
	return sjsc.mutation
}

// Save creates the ScheduledJobSetting in the database.
func (sjsc *ScheduledJobSettingCreate) Save(ctx context.Context) (*ScheduledJobSetting, error) {
	if err := sjsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sjsc.sqlSave, sjsc.mutation, sjsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sjsc *ScheduledJobSettingCreate) SaveX(ctx context.Context) *ScheduledJobSetting {
	v, err := sjsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjsc *ScheduledJobSettingCreate) Exec(ctx context.Context) error {
	_, err := sjsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjsc *ScheduledJobSettingCreate) ExecX(ctx context.Context) {
	if err := sjsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjsc *ScheduledJobSettingCreate) defaults() error {
	if _, ok := sjsc.mutation.CreatedAt(); !ok {
		if scheduledjobsetting.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized scheduledjobsetting.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := scheduledjobsetting.DefaultCreatedAt()
		sjsc.mutation.SetCreatedAt(v)
	}
	if _, ok := sjsc.mutation.UpdatedAt(); !ok {
		if scheduledjobsetting.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scheduledjobsetting.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scheduledjobsetting.DefaultUpdatedAt()
		sjsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sjsc.mutation.Tags(); !ok {
		v := scheduledjobsetting.DefaultTags
		sjsc.mutation.SetTags(v)
	}
	if _, ok := sjsc.mutation.ID(); !ok {
		if scheduledjobsetting.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized scheduledjobsetting.DefaultID (forgotten import generated/runtime?)")
		}
		v := scheduledjobsetting.DefaultID()
		sjsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sjsc *ScheduledJobSettingCreate) check() error {
	if _, ok := sjsc.mutation.Configuration(); !ok {
		return &ValidationError{Name: "configuration", err: errors.New(`generated: missing required field "ScheduledJobSetting.configuration"`)}
	}
	return nil
}

func (sjsc *ScheduledJobSettingCreate) sqlSave(ctx context.Context) (*ScheduledJobSetting, error) {
	if err := sjsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sjsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sjsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ScheduledJobSetting.ID type: %T", _spec.ID.Value)
		}
	}
	sjsc.mutation.id = &_node.ID
	sjsc.mutation.done = true
	return _node, nil
}

func (sjsc *ScheduledJobSettingCreate) createSpec() (*ScheduledJobSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &ScheduledJobSetting{config: sjsc.config}
		_spec = sqlgraph.NewCreateSpec(scheduledjobsetting.Table, sqlgraph.NewFieldSpec(scheduledjobsetting.FieldID, field.TypeString))
	)
	_spec.Schema = sjsc.schemaConfig.ScheduledJobSetting
	if id, ok := sjsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sjsc.mutation.CreatedAt(); ok {
		_spec.SetField(scheduledjobsetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sjsc.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledjobsetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sjsc.mutation.CreatedBy(); ok {
		_spec.SetField(scheduledjobsetting.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sjsc.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledjobsetting.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sjsc.mutation.DeletedAt(); ok {
		_spec.SetField(scheduledjobsetting.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sjsc.mutation.DeletedBy(); ok {
		_spec.SetField(scheduledjobsetting.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := sjsc.mutation.Tags(); ok {
		_spec.SetField(scheduledjobsetting.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := sjsc.mutation.Configuration(); ok {
		_spec.SetField(scheduledjobsetting.FieldConfiguration, field.TypeJSON, value)
		_node.Configuration = value
	}
	if value, ok := sjsc.mutation.Cadence(); ok {
		_spec.SetField(scheduledjobsetting.FieldCadence, field.TypeJSON, value)
		_node.Cadence = value
	}
	if value, ok := sjsc.mutation.Cron(); ok {
		_spec.SetField(scheduledjobsetting.FieldCron, field.TypeString, value)
		_node.Cron = &value
	}
	if nodes := sjsc.mutation.ScheduledJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   scheduledjobsetting.ScheduledJobTable,
			Columns: []string{scheduledjobsetting.ScheduledJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjsc.schemaConfig.ScheduledJobSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScheduledJobID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScheduledJobSettingCreateBulk is the builder for creating many ScheduledJobSetting entities in bulk.
type ScheduledJobSettingCreateBulk struct {
	config
	err      error
	builders []*ScheduledJobSettingCreate
}

// Save creates the ScheduledJobSetting entities in the database.
func (sjscb *ScheduledJobSettingCreateBulk) Save(ctx context.Context) ([]*ScheduledJobSetting, error) {
	if sjscb.err != nil {
		return nil, sjscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sjscb.builders))
	nodes := make([]*ScheduledJobSetting, len(sjscb.builders))
	mutators := make([]Mutator, len(sjscb.builders))
	for i := range sjscb.builders {
		func(i int, root context.Context) {
			builder := sjscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScheduledJobSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sjscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sjscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sjscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sjscb *ScheduledJobSettingCreateBulk) SaveX(ctx context.Context) []*ScheduledJobSetting {
	v, err := sjscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjscb *ScheduledJobSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := sjscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjscb *ScheduledJobSettingCreateBulk) ExecX(ctx context.Context) {
	if err := sjscb.Exec(ctx); err != nil {
		panic(err)
	}
}
