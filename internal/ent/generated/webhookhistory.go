// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/webhookhistory"
	"github.com/theopenlane/entx/history"
)

// WebhookHistory is the model entity for the WebhookHistory schema.
type WebhookHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the webhook
	Name string `json:"name,omitempty"`
	// a description of the webhook
	Description string `json:"description,omitempty"`
	// the url to send the webhook to
	DestinationURL string `json:"destination_url,omitempty"`
	// indicates if the webhook is active and enabled
	Enabled bool `json:"enabled,omitempty"`
	// the call back string
	Callback string `json:"callback,omitempty"`
	// the ttl of the webhook delivery
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// the comparison secret to verify the token's signature
	Secret []byte `json:"secret,omitempty"`
	// the number of failures
	Failures int `json:"failures,omitempty"`
	// the last error message
	LastError string `json:"last_error,omitempty"`
	// the last response
	LastResponse string `json:"last_response,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WebhookHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case webhookhistory.FieldTags, webhookhistory.FieldSecret:
			values[i] = new([]byte)
		case webhookhistory.FieldOperation:
			values[i] = new(history.OpType)
		case webhookhistory.FieldEnabled:
			values[i] = new(sql.NullBool)
		case webhookhistory.FieldFailures:
			values[i] = new(sql.NullInt64)
		case webhookhistory.FieldID, webhookhistory.FieldRef, webhookhistory.FieldCreatedBy, webhookhistory.FieldUpdatedBy, webhookhistory.FieldMappingID, webhookhistory.FieldDeletedBy, webhookhistory.FieldOwnerID, webhookhistory.FieldName, webhookhistory.FieldDescription, webhookhistory.FieldDestinationURL, webhookhistory.FieldCallback, webhookhistory.FieldLastError, webhookhistory.FieldLastResponse:
			values[i] = new(sql.NullString)
		case webhookhistory.FieldHistoryTime, webhookhistory.FieldCreatedAt, webhookhistory.FieldUpdatedAt, webhookhistory.FieldDeletedAt, webhookhistory.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WebhookHistory fields.
func (wh *WebhookHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case webhookhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				wh.ID = value.String
			}
		case webhookhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				wh.HistoryTime = value.Time
			}
		case webhookhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				wh.Ref = value.String
			}
		case webhookhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				wh.Operation = *value
			}
		case webhookhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wh.CreatedAt = value.Time
			}
		case webhookhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wh.UpdatedAt = value.Time
			}
		case webhookhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				wh.CreatedBy = value.String
			}
		case webhookhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				wh.UpdatedBy = value.String
			}
		case webhookhistory.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				wh.MappingID = value.String
			}
		case webhookhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &wh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case webhookhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				wh.DeletedAt = value.Time
			}
		case webhookhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				wh.DeletedBy = value.String
			}
		case webhookhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				wh.OwnerID = value.String
			}
		case webhookhistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				wh.Name = value.String
			}
		case webhookhistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				wh.Description = value.String
			}
		case webhookhistory.FieldDestinationURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field destination_url", values[i])
			} else if value.Valid {
				wh.DestinationURL = value.String
			}
		case webhookhistory.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				wh.Enabled = value.Bool
			}
		case webhookhistory.FieldCallback:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field callback", values[i])
			} else if value.Valid {
				wh.Callback = value.String
			}
		case webhookhistory.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				wh.ExpiresAt = value.Time
			}
		case webhookhistory.FieldSecret:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value != nil {
				wh.Secret = *value
			}
		case webhookhistory.FieldFailures:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field failures", values[i])
			} else if value.Valid {
				wh.Failures = int(value.Int64)
			}
		case webhookhistory.FieldLastError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_error", values[i])
			} else if value.Valid {
				wh.LastError = value.String
			}
		case webhookhistory.FieldLastResponse:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_response", values[i])
			} else if value.Valid {
				wh.LastResponse = value.String
			}
		default:
			wh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WebhookHistory.
// This includes values selected through modifiers, order, etc.
func (wh *WebhookHistory) Value(name string) (ent.Value, error) {
	return wh.selectValues.Get(name)
}

// Update returns a builder for updating this WebhookHistory.
// Note that you need to call WebhookHistory.Unwrap() before calling this method if this WebhookHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (wh *WebhookHistory) Update() *WebhookHistoryUpdateOne {
	return NewWebhookHistoryClient(wh.config).UpdateOne(wh)
}

// Unwrap unwraps the WebhookHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wh *WebhookHistory) Unwrap() *WebhookHistory {
	_tx, ok := wh.config.driver.(*txDriver)
	if !ok {
		panic("generated: WebhookHistory is not a transactional entity")
	}
	wh.config.driver = _tx.drv
	return wh
}

// String implements the fmt.Stringer.
func (wh *WebhookHistory) String() string {
	var builder strings.Builder
	builder.WriteString("WebhookHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(wh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(wh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", wh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(wh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(wh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(wh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(wh.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", wh.Tags))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(wh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(wh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(wh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(wh.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(wh.Description)
	builder.WriteString(", ")
	builder.WriteString("destination_url=")
	builder.WriteString(wh.DestinationURL)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", wh.Enabled))
	builder.WriteString(", ")
	builder.WriteString("callback=")
	builder.WriteString(wh.Callback)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(wh.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("secret=")
	builder.WriteString(fmt.Sprintf("%v", wh.Secret))
	builder.WriteString(", ")
	builder.WriteString("failures=")
	builder.WriteString(fmt.Sprintf("%v", wh.Failures))
	builder.WriteString(", ")
	builder.WriteString("last_error=")
	builder.WriteString(wh.LastError)
	builder.WriteString(", ")
	builder.WriteString("last_response=")
	builder.WriteString(wh.LastResponse)
	builder.WriteByte(')')
	return builder.String()
}

// WebhookHistories is a parsable slice of WebhookHistory.
type WebhookHistories []*WebhookHistory
