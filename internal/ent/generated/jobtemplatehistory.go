// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplatehistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx/history"
)

// JobTemplateHistory is the model entity for the JobTemplateHistory schema.
type JobTemplateHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// indicates if the record is owned by the the openlane system and not by an organization
	SystemOwned bool `json:"system_owned,omitempty"`
	// the title of the job
	Title string `json:"title,omitempty"`
	// the short description of the job and what it does
	Description string `json:"description,omitempty"`
	// the platform to use to execute this job, e.g. golang, typescript, python, etc.
	Platform enums.JobPlatformType `json:"platform,omitempty"`
	// windmill path used to execute the job
	WindmillPath string `json:"windmill_path,omitempty"`
	// the url from where to download the script from
	DownloadURL string `json:"download_url,omitempty"`
	// the json configuration to run this job, which could be used to template a job, e.g. { "account_name": "my-account" }
	Configuration models.JobConfiguration `json:"configuration,omitempty"`
	// cron schedule to run the job in cron 6-field syntax, e.g. 0 0 0 * * *
	Cron         *models.Cron `json:"cron,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobTemplateHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobtemplatehistory.FieldCron:
			values[i] = &sql.NullScanner{S: new(models.Cron)}
		case jobtemplatehistory.FieldTags, jobtemplatehistory.FieldConfiguration:
			values[i] = new([]byte)
		case jobtemplatehistory.FieldOperation:
			values[i] = new(history.OpType)
		case jobtemplatehistory.FieldSystemOwned:
			values[i] = new(sql.NullBool)
		case jobtemplatehistory.FieldID, jobtemplatehistory.FieldRef, jobtemplatehistory.FieldCreatedBy, jobtemplatehistory.FieldUpdatedBy, jobtemplatehistory.FieldDeletedBy, jobtemplatehistory.FieldDisplayID, jobtemplatehistory.FieldOwnerID, jobtemplatehistory.FieldTitle, jobtemplatehistory.FieldDescription, jobtemplatehistory.FieldPlatform, jobtemplatehistory.FieldWindmillPath, jobtemplatehistory.FieldDownloadURL:
			values[i] = new(sql.NullString)
		case jobtemplatehistory.FieldHistoryTime, jobtemplatehistory.FieldCreatedAt, jobtemplatehistory.FieldUpdatedAt, jobtemplatehistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobTemplateHistory fields.
func (jth *JobTemplateHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobtemplatehistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				jth.ID = value.String
			}
		case jobtemplatehistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				jth.HistoryTime = value.Time
			}
		case jobtemplatehistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				jth.Ref = value.String
			}
		case jobtemplatehistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				jth.Operation = *value
			}
		case jobtemplatehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jth.CreatedAt = value.Time
			}
		case jobtemplatehistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jth.UpdatedAt = value.Time
			}
		case jobtemplatehistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				jth.CreatedBy = value.String
			}
		case jobtemplatehistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				jth.UpdatedBy = value.String
			}
		case jobtemplatehistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				jth.DeletedAt = value.Time
			}
		case jobtemplatehistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				jth.DeletedBy = value.String
			}
		case jobtemplatehistory.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				jth.DisplayID = value.String
			}
		case jobtemplatehistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &jth.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case jobtemplatehistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				jth.OwnerID = value.String
			}
		case jobtemplatehistory.FieldSystemOwned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system_owned", values[i])
			} else if value.Valid {
				jth.SystemOwned = value.Bool
			}
		case jobtemplatehistory.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				jth.Title = value.String
			}
		case jobtemplatehistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				jth.Description = value.String
			}
		case jobtemplatehistory.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				jth.Platform = enums.JobPlatformType(value.String)
			}
		case jobtemplatehistory.FieldWindmillPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field windmill_path", values[i])
			} else if value.Valid {
				jth.WindmillPath = value.String
			}
		case jobtemplatehistory.FieldDownloadURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field download_url", values[i])
			} else if value.Valid {
				jth.DownloadURL = value.String
			}
		case jobtemplatehistory.FieldConfiguration:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field configuration", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &jth.Configuration); err != nil {
					return fmt.Errorf("unmarshal field configuration: %w", err)
				}
			}
		case jobtemplatehistory.FieldCron:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field cron", values[i])
			} else if value.Valid {
				jth.Cron = new(models.Cron)
				*jth.Cron = *value.S.(*models.Cron)
			}
		default:
			jth.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobTemplateHistory.
// This includes values selected through modifiers, order, etc.
func (jth *JobTemplateHistory) Value(name string) (ent.Value, error) {
	return jth.selectValues.Get(name)
}

// Update returns a builder for updating this JobTemplateHistory.
// Note that you need to call JobTemplateHistory.Unwrap() before calling this method if this JobTemplateHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (jth *JobTemplateHistory) Update() *JobTemplateHistoryUpdateOne {
	return NewJobTemplateHistoryClient(jth.config).UpdateOne(jth)
}

// Unwrap unwraps the JobTemplateHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jth *JobTemplateHistory) Unwrap() *JobTemplateHistory {
	_tx, ok := jth.config.driver.(*txDriver)
	if !ok {
		panic("generated: JobTemplateHistory is not a transactional entity")
	}
	jth.config.driver = _tx.drv
	return jth
}

// String implements the fmt.Stringer.
func (jth *JobTemplateHistory) String() string {
	var builder strings.Builder
	builder.WriteString("JobTemplateHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jth.ID))
	builder.WriteString("history_time=")
	builder.WriteString(jth.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(jth.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", jth.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(jth.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jth.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(jth.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(jth.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(jth.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(jth.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(jth.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", jth.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(jth.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("system_owned=")
	builder.WriteString(fmt.Sprintf("%v", jth.SystemOwned))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(jth.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(jth.Description)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(fmt.Sprintf("%v", jth.Platform))
	builder.WriteString(", ")
	builder.WriteString("windmill_path=")
	builder.WriteString(jth.WindmillPath)
	builder.WriteString(", ")
	builder.WriteString("download_url=")
	builder.WriteString(jth.DownloadURL)
	builder.WriteString(", ")
	builder.WriteString("configuration=")
	builder.WriteString(fmt.Sprintf("%v", jth.Configuration))
	builder.WriteString(", ")
	if v := jth.Cron; v != nil {
		builder.WriteString("cron=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// JobTemplateHistories is a parsable slice of JobTemplateHistory.
type JobTemplateHistories []*JobTemplateHistory
