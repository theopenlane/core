// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/grouphistory"
	"github.com/theopenlane/entx/history"
)

// GroupHistoryCreate is the builder for creating a GroupHistory entity.
type GroupHistoryCreate struct {
	config
	mutation *GroupHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (ghc *GroupHistoryCreate) SetHistoryTime(t time.Time) *GroupHistoryCreate {
	ghc.mutation.SetHistoryTime(t)
	return ghc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableHistoryTime(t *time.Time) *GroupHistoryCreate {
	if t != nil {
		ghc.SetHistoryTime(*t)
	}
	return ghc
}

// SetRef sets the "ref" field.
func (ghc *GroupHistoryCreate) SetRef(s string) *GroupHistoryCreate {
	ghc.mutation.SetRef(s)
	return ghc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableRef(s *string) *GroupHistoryCreate {
	if s != nil {
		ghc.SetRef(*s)
	}
	return ghc
}

// SetOperation sets the "operation" field.
func (ghc *GroupHistoryCreate) SetOperation(ht history.OpType) *GroupHistoryCreate {
	ghc.mutation.SetOperation(ht)
	return ghc
}

// SetCreatedAt sets the "created_at" field.
func (ghc *GroupHistoryCreate) SetCreatedAt(t time.Time) *GroupHistoryCreate {
	ghc.mutation.SetCreatedAt(t)
	return ghc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableCreatedAt(t *time.Time) *GroupHistoryCreate {
	if t != nil {
		ghc.SetCreatedAt(*t)
	}
	return ghc
}

// SetUpdatedAt sets the "updated_at" field.
func (ghc *GroupHistoryCreate) SetUpdatedAt(t time.Time) *GroupHistoryCreate {
	ghc.mutation.SetUpdatedAt(t)
	return ghc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableUpdatedAt(t *time.Time) *GroupHistoryCreate {
	if t != nil {
		ghc.SetUpdatedAt(*t)
	}
	return ghc
}

// SetCreatedBy sets the "created_by" field.
func (ghc *GroupHistoryCreate) SetCreatedBy(s string) *GroupHistoryCreate {
	ghc.mutation.SetCreatedBy(s)
	return ghc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableCreatedBy(s *string) *GroupHistoryCreate {
	if s != nil {
		ghc.SetCreatedBy(*s)
	}
	return ghc
}

// SetUpdatedBy sets the "updated_by" field.
func (ghc *GroupHistoryCreate) SetUpdatedBy(s string) *GroupHistoryCreate {
	ghc.mutation.SetUpdatedBy(s)
	return ghc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableUpdatedBy(s *string) *GroupHistoryCreate {
	if s != nil {
		ghc.SetUpdatedBy(*s)
	}
	return ghc
}

// SetDeletedAt sets the "deleted_at" field.
func (ghc *GroupHistoryCreate) SetDeletedAt(t time.Time) *GroupHistoryCreate {
	ghc.mutation.SetDeletedAt(t)
	return ghc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableDeletedAt(t *time.Time) *GroupHistoryCreate {
	if t != nil {
		ghc.SetDeletedAt(*t)
	}
	return ghc
}

// SetDeletedBy sets the "deleted_by" field.
func (ghc *GroupHistoryCreate) SetDeletedBy(s string) *GroupHistoryCreate {
	ghc.mutation.SetDeletedBy(s)
	return ghc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableDeletedBy(s *string) *GroupHistoryCreate {
	if s != nil {
		ghc.SetDeletedBy(*s)
	}
	return ghc
}

// SetMappingID sets the "mapping_id" field.
func (ghc *GroupHistoryCreate) SetMappingID(s string) *GroupHistoryCreate {
	ghc.mutation.SetMappingID(s)
	return ghc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableMappingID(s *string) *GroupHistoryCreate {
	if s != nil {
		ghc.SetMappingID(*s)
	}
	return ghc
}

// SetTags sets the "tags" field.
func (ghc *GroupHistoryCreate) SetTags(s []string) *GroupHistoryCreate {
	ghc.mutation.SetTags(s)
	return ghc
}

// SetOwnerID sets the "owner_id" field.
func (ghc *GroupHistoryCreate) SetOwnerID(s string) *GroupHistoryCreate {
	ghc.mutation.SetOwnerID(s)
	return ghc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableOwnerID(s *string) *GroupHistoryCreate {
	if s != nil {
		ghc.SetOwnerID(*s)
	}
	return ghc
}

// SetName sets the "name" field.
func (ghc *GroupHistoryCreate) SetName(s string) *GroupHistoryCreate {
	ghc.mutation.SetName(s)
	return ghc
}

// SetDescription sets the "description" field.
func (ghc *GroupHistoryCreate) SetDescription(s string) *GroupHistoryCreate {
	ghc.mutation.SetDescription(s)
	return ghc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableDescription(s *string) *GroupHistoryCreate {
	if s != nil {
		ghc.SetDescription(*s)
	}
	return ghc
}

// SetIsManaged sets the "is_managed" field.
func (ghc *GroupHistoryCreate) SetIsManaged(b bool) *GroupHistoryCreate {
	ghc.mutation.SetIsManaged(b)
	return ghc
}

// SetNillableIsManaged sets the "is_managed" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableIsManaged(b *bool) *GroupHistoryCreate {
	if b != nil {
		ghc.SetIsManaged(*b)
	}
	return ghc
}

// SetGravatarLogoURL sets the "gravatar_logo_url" field.
func (ghc *GroupHistoryCreate) SetGravatarLogoURL(s string) *GroupHistoryCreate {
	ghc.mutation.SetGravatarLogoURL(s)
	return ghc
}

// SetNillableGravatarLogoURL sets the "gravatar_logo_url" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableGravatarLogoURL(s *string) *GroupHistoryCreate {
	if s != nil {
		ghc.SetGravatarLogoURL(*s)
	}
	return ghc
}

// SetLogoURL sets the "logo_url" field.
func (ghc *GroupHistoryCreate) SetLogoURL(s string) *GroupHistoryCreate {
	ghc.mutation.SetLogoURL(s)
	return ghc
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableLogoURL(s *string) *GroupHistoryCreate {
	if s != nil {
		ghc.SetLogoURL(*s)
	}
	return ghc
}

// SetDisplayName sets the "display_name" field.
func (ghc *GroupHistoryCreate) SetDisplayName(s string) *GroupHistoryCreate {
	ghc.mutation.SetDisplayName(s)
	return ghc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableDisplayName(s *string) *GroupHistoryCreate {
	if s != nil {
		ghc.SetDisplayName(*s)
	}
	return ghc
}

// SetID sets the "id" field.
func (ghc *GroupHistoryCreate) SetID(s string) *GroupHistoryCreate {
	ghc.mutation.SetID(s)
	return ghc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ghc *GroupHistoryCreate) SetNillableID(s *string) *GroupHistoryCreate {
	if s != nil {
		ghc.SetID(*s)
	}
	return ghc
}

// Mutation returns the GroupHistoryMutation object of the builder.
func (ghc *GroupHistoryCreate) Mutation() *GroupHistoryMutation {
	return ghc.mutation
}

// Save creates the GroupHistory in the database.
func (ghc *GroupHistoryCreate) Save(ctx context.Context) (*GroupHistory, error) {
	ghc.defaults()
	return withHooks(ctx, ghc.sqlSave, ghc.mutation, ghc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ghc *GroupHistoryCreate) SaveX(ctx context.Context) *GroupHistory {
	v, err := ghc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ghc *GroupHistoryCreate) Exec(ctx context.Context) error {
	_, err := ghc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghc *GroupHistoryCreate) ExecX(ctx context.Context) {
	if err := ghc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ghc *GroupHistoryCreate) defaults() {
	if _, ok := ghc.mutation.HistoryTime(); !ok {
		v := grouphistory.DefaultHistoryTime()
		ghc.mutation.SetHistoryTime(v)
	}
	if _, ok := ghc.mutation.CreatedAt(); !ok {
		v := grouphistory.DefaultCreatedAt()
		ghc.mutation.SetCreatedAt(v)
	}
	if _, ok := ghc.mutation.UpdatedAt(); !ok {
		v := grouphistory.DefaultUpdatedAt()
		ghc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ghc.mutation.MappingID(); !ok {
		v := grouphistory.DefaultMappingID()
		ghc.mutation.SetMappingID(v)
	}
	if _, ok := ghc.mutation.Tags(); !ok {
		v := grouphistory.DefaultTags
		ghc.mutation.SetTags(v)
	}
	if _, ok := ghc.mutation.IsManaged(); !ok {
		v := grouphistory.DefaultIsManaged
		ghc.mutation.SetIsManaged(v)
	}
	if _, ok := ghc.mutation.DisplayName(); !ok {
		v := grouphistory.DefaultDisplayName
		ghc.mutation.SetDisplayName(v)
	}
	if _, ok := ghc.mutation.ID(); !ok {
		v := grouphistory.DefaultID()
		ghc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ghc *GroupHistoryCreate) check() error {
	if _, ok := ghc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "GroupHistory.history_time"`)}
	}
	if _, ok := ghc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "GroupHistory.operation"`)}
	}
	if v, ok := ghc.mutation.Operation(); ok {
		if err := grouphistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "GroupHistory.operation": %w`, err)}
		}
	}
	if _, ok := ghc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "GroupHistory.mapping_id"`)}
	}
	if _, ok := ghc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "GroupHistory.name"`)}
	}
	if _, ok := ghc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`generated: missing required field "GroupHistory.display_name"`)}
	}
	return nil
}

func (ghc *GroupHistoryCreate) sqlSave(ctx context.Context) (*GroupHistory, error) {
	if err := ghc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ghc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ghc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected GroupHistory.ID type: %T", _spec.ID.Value)
		}
	}
	ghc.mutation.id = &_node.ID
	ghc.mutation.done = true
	return _node, nil
}

func (ghc *GroupHistoryCreate) createSpec() (*GroupHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupHistory{config: ghc.config}
		_spec = sqlgraph.NewCreateSpec(grouphistory.Table, sqlgraph.NewFieldSpec(grouphistory.FieldID, field.TypeString))
	)
	_spec.Schema = ghc.schemaConfig.GroupHistory
	if id, ok := ghc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ghc.mutation.HistoryTime(); ok {
		_spec.SetField(grouphistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := ghc.mutation.Ref(); ok {
		_spec.SetField(grouphistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := ghc.mutation.Operation(); ok {
		_spec.SetField(grouphistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := ghc.mutation.CreatedAt(); ok {
		_spec.SetField(grouphistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ghc.mutation.UpdatedAt(); ok {
		_spec.SetField(grouphistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ghc.mutation.CreatedBy(); ok {
		_spec.SetField(grouphistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ghc.mutation.UpdatedBy(); ok {
		_spec.SetField(grouphistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ghc.mutation.DeletedAt(); ok {
		_spec.SetField(grouphistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ghc.mutation.DeletedBy(); ok {
		_spec.SetField(grouphistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := ghc.mutation.MappingID(); ok {
		_spec.SetField(grouphistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := ghc.mutation.Tags(); ok {
		_spec.SetField(grouphistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := ghc.mutation.OwnerID(); ok {
		_spec.SetField(grouphistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := ghc.mutation.Name(); ok {
		_spec.SetField(grouphistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ghc.mutation.Description(); ok {
		_spec.SetField(grouphistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ghc.mutation.IsManaged(); ok {
		_spec.SetField(grouphistory.FieldIsManaged, field.TypeBool, value)
		_node.IsManaged = value
	}
	if value, ok := ghc.mutation.GravatarLogoURL(); ok {
		_spec.SetField(grouphistory.FieldGravatarLogoURL, field.TypeString, value)
		_node.GravatarLogoURL = value
	}
	if value, ok := ghc.mutation.LogoURL(); ok {
		_spec.SetField(grouphistory.FieldLogoURL, field.TypeString, value)
		_node.LogoURL = value
	}
	if value, ok := ghc.mutation.DisplayName(); ok {
		_spec.SetField(grouphistory.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	return _node, _spec
}

// GroupHistoryCreateBulk is the builder for creating many GroupHistory entities in bulk.
type GroupHistoryCreateBulk struct {
	config
	err      error
	builders []*GroupHistoryCreate
}

// Save creates the GroupHistory entities in the database.
func (ghcb *GroupHistoryCreateBulk) Save(ctx context.Context) ([]*GroupHistory, error) {
	if ghcb.err != nil {
		return nil, ghcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ghcb.builders))
	nodes := make([]*GroupHistory, len(ghcb.builders))
	mutators := make([]Mutator, len(ghcb.builders))
	for i := range ghcb.builders {
		func(i int, root context.Context) {
			builder := ghcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ghcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ghcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ghcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ghcb *GroupHistoryCreateBulk) SaveX(ctx context.Context) []*GroupHistory {
	v, err := ghcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ghcb *GroupHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ghcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ghcb *GroupHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ghcb.Exec(ctx); err != nil {
		panic(err)
	}
}
