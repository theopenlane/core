// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgproduct"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrgModuleUpdate is the builder for updating OrgModule entities.
type OrgModuleUpdate struct {
	config
	hooks     []Hook
	mutation  *OrgModuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrgModuleUpdate builder.
func (omu *OrgModuleUpdate) Where(ps ...predicate.OrgModule) *OrgModuleUpdate {
	omu.mutation.Where(ps...)
	return omu
}

// SetUpdatedAt sets the "updated_at" field.
func (omu *OrgModuleUpdate) SetUpdatedAt(t time.Time) *OrgModuleUpdate {
	omu.mutation.SetUpdatedAt(t)
	return omu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (omu *OrgModuleUpdate) ClearUpdatedAt() *OrgModuleUpdate {
	omu.mutation.ClearUpdatedAt()
	return omu
}

// SetUpdatedBy sets the "updated_by" field.
func (omu *OrgModuleUpdate) SetUpdatedBy(s string) *OrgModuleUpdate {
	omu.mutation.SetUpdatedBy(s)
	return omu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillableUpdatedBy(s *string) *OrgModuleUpdate {
	if s != nil {
		omu.SetUpdatedBy(*s)
	}
	return omu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (omu *OrgModuleUpdate) ClearUpdatedBy() *OrgModuleUpdate {
	omu.mutation.ClearUpdatedBy()
	return omu
}

// SetDeletedAt sets the "deleted_at" field.
func (omu *OrgModuleUpdate) SetDeletedAt(t time.Time) *OrgModuleUpdate {
	omu.mutation.SetDeletedAt(t)
	return omu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillableDeletedAt(t *time.Time) *OrgModuleUpdate {
	if t != nil {
		omu.SetDeletedAt(*t)
	}
	return omu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (omu *OrgModuleUpdate) ClearDeletedAt() *OrgModuleUpdate {
	omu.mutation.ClearDeletedAt()
	return omu
}

// SetDeletedBy sets the "deleted_by" field.
func (omu *OrgModuleUpdate) SetDeletedBy(s string) *OrgModuleUpdate {
	omu.mutation.SetDeletedBy(s)
	return omu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillableDeletedBy(s *string) *OrgModuleUpdate {
	if s != nil {
		omu.SetDeletedBy(*s)
	}
	return omu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (omu *OrgModuleUpdate) ClearDeletedBy() *OrgModuleUpdate {
	omu.mutation.ClearDeletedBy()
	return omu
}

// SetTags sets the "tags" field.
func (omu *OrgModuleUpdate) SetTags(s []string) *OrgModuleUpdate {
	omu.mutation.SetTags(s)
	return omu
}

// AppendTags appends s to the "tags" field.
func (omu *OrgModuleUpdate) AppendTags(s []string) *OrgModuleUpdate {
	omu.mutation.AppendTags(s)
	return omu
}

// ClearTags clears the value of the "tags" field.
func (omu *OrgModuleUpdate) ClearTags() *OrgModuleUpdate {
	omu.mutation.ClearTags()
	return omu
}

// SetOwnerID sets the "owner_id" field.
func (omu *OrgModuleUpdate) SetOwnerID(s string) *OrgModuleUpdate {
	omu.mutation.SetOwnerID(s)
	return omu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillableOwnerID(s *string) *OrgModuleUpdate {
	if s != nil {
		omu.SetOwnerID(*s)
	}
	return omu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (omu *OrgModuleUpdate) ClearOwnerID() *OrgModuleUpdate {
	omu.mutation.ClearOwnerID()
	return omu
}

// SetModule sets the "module" field.
func (omu *OrgModuleUpdate) SetModule(s string) *OrgModuleUpdate {
	omu.mutation.SetModule(s)
	return omu
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillableModule(s *string) *OrgModuleUpdate {
	if s != nil {
		omu.SetModule(*s)
	}
	return omu
}

// SetPrice sets the "price" field.
func (omu *OrgModuleUpdate) SetPrice(m models.Price) *OrgModuleUpdate {
	omu.mutation.SetPrice(m)
	return omu
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillablePrice(m *models.Price) *OrgModuleUpdate {
	if m != nil {
		omu.SetPrice(*m)
	}
	return omu
}

// ClearPrice clears the value of the "price" field.
func (omu *OrgModuleUpdate) ClearPrice() *OrgModuleUpdate {
	omu.mutation.ClearPrice()
	return omu
}

// SetStripePriceID sets the "stripe_price_id" field.
func (omu *OrgModuleUpdate) SetStripePriceID(s string) *OrgModuleUpdate {
	omu.mutation.SetStripePriceID(s)
	return omu
}

// SetNillableStripePriceID sets the "stripe_price_id" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillableStripePriceID(s *string) *OrgModuleUpdate {
	if s != nil {
		omu.SetStripePriceID(*s)
	}
	return omu
}

// ClearStripePriceID clears the value of the "stripe_price_id" field.
func (omu *OrgModuleUpdate) ClearStripePriceID() *OrgModuleUpdate {
	omu.mutation.ClearStripePriceID()
	return omu
}

// SetStatus sets the "status" field.
func (omu *OrgModuleUpdate) SetStatus(s string) *OrgModuleUpdate {
	omu.mutation.SetStatus(s)
	return omu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillableStatus(s *string) *OrgModuleUpdate {
	if s != nil {
		omu.SetStatus(*s)
	}
	return omu
}

// ClearStatus clears the value of the "status" field.
func (omu *OrgModuleUpdate) ClearStatus() *OrgModuleUpdate {
	omu.mutation.ClearStatus()
	return omu
}

// SetVisibility sets the "visibility" field.
func (omu *OrgModuleUpdate) SetVisibility(s string) *OrgModuleUpdate {
	omu.mutation.SetVisibility(s)
	return omu
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillableVisibility(s *string) *OrgModuleUpdate {
	if s != nil {
		omu.SetVisibility(*s)
	}
	return omu
}

// ClearVisibility clears the value of the "visibility" field.
func (omu *OrgModuleUpdate) ClearVisibility() *OrgModuleUpdate {
	omu.mutation.ClearVisibility()
	return omu
}

// SetActive sets the "active" field.
func (omu *OrgModuleUpdate) SetActive(b bool) *OrgModuleUpdate {
	omu.mutation.SetActive(b)
	return omu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillableActive(b *bool) *OrgModuleUpdate {
	if b != nil {
		omu.SetActive(*b)
	}
	return omu
}

// SetModuleLookupKey sets the "module_lookup_key" field.
func (omu *OrgModuleUpdate) SetModuleLookupKey(s string) *OrgModuleUpdate {
	omu.mutation.SetModuleLookupKey(s)
	return omu
}

// SetNillableModuleLookupKey sets the "module_lookup_key" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillableModuleLookupKey(s *string) *OrgModuleUpdate {
	if s != nil {
		omu.SetModuleLookupKey(*s)
	}
	return omu
}

// ClearModuleLookupKey clears the value of the "module_lookup_key" field.
func (omu *OrgModuleUpdate) ClearModuleLookupKey() *OrgModuleUpdate {
	omu.mutation.ClearModuleLookupKey()
	return omu
}

// SetSubscriptionID sets the "subscription_id" field.
func (omu *OrgModuleUpdate) SetSubscriptionID(s string) *OrgModuleUpdate {
	omu.mutation.SetSubscriptionID(s)
	return omu
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillableSubscriptionID(s *string) *OrgModuleUpdate {
	if s != nil {
		omu.SetSubscriptionID(*s)
	}
	return omu
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (omu *OrgModuleUpdate) ClearSubscriptionID() *OrgModuleUpdate {
	omu.mutation.ClearSubscriptionID()
	return omu
}

// SetPriceID sets the "price_id" field.
func (omu *OrgModuleUpdate) SetPriceID(s string) *OrgModuleUpdate {
	omu.mutation.SetPriceID(s)
	return omu
}

// SetNillablePriceID sets the "price_id" field if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillablePriceID(s *string) *OrgModuleUpdate {
	if s != nil {
		omu.SetPriceID(*s)
	}
	return omu
}

// ClearPriceID clears the value of the "price_id" field.
func (omu *OrgModuleUpdate) ClearPriceID() *OrgModuleUpdate {
	omu.mutation.ClearPriceID()
	return omu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (omu *OrgModuleUpdate) SetOwner(o *Organization) *OrgModuleUpdate {
	return omu.SetOwnerID(o.ID)
}

// SetOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID.
func (omu *OrgModuleUpdate) SetOrgSubscriptionID(id string) *OrgModuleUpdate {
	omu.mutation.SetOrgSubscriptionID(id)
	return omu
}

// SetNillableOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID if the given value is not nil.
func (omu *OrgModuleUpdate) SetNillableOrgSubscriptionID(id *string) *OrgModuleUpdate {
	if id != nil {
		omu = omu.SetOrgSubscriptionID(*id)
	}
	return omu
}

// SetOrgSubscription sets the "org_subscription" edge to the OrgSubscription entity.
func (omu *OrgModuleUpdate) SetOrgSubscription(o *OrgSubscription) *OrgModuleUpdate {
	return omu.SetOrgSubscriptionID(o.ID)
}

// AddOrgProductIDs adds the "org_products" edge to the OrgProduct entity by IDs.
func (omu *OrgModuleUpdate) AddOrgProductIDs(ids ...string) *OrgModuleUpdate {
	omu.mutation.AddOrgProductIDs(ids...)
	return omu
}

// AddOrgProducts adds the "org_products" edges to the OrgProduct entity.
func (omu *OrgModuleUpdate) AddOrgProducts(o ...*OrgProduct) *OrgModuleUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return omu.AddOrgProductIDs(ids...)
}

// AddOrgPriceIDs adds the "org_prices" edge to the OrgPrice entity by IDs.
func (omu *OrgModuleUpdate) AddOrgPriceIDs(ids ...string) *OrgModuleUpdate {
	omu.mutation.AddOrgPriceIDs(ids...)
	return omu
}

// AddOrgPrices adds the "org_prices" edges to the OrgPrice entity.
func (omu *OrgModuleUpdate) AddOrgPrices(o ...*OrgPrice) *OrgModuleUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return omu.AddOrgPriceIDs(ids...)
}

// Mutation returns the OrgModuleMutation object of the builder.
func (omu *OrgModuleUpdate) Mutation() *OrgModuleMutation {
	return omu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (omu *OrgModuleUpdate) ClearOwner() *OrgModuleUpdate {
	omu.mutation.ClearOwner()
	return omu
}

// ClearOrgSubscription clears the "org_subscription" edge to the OrgSubscription entity.
func (omu *OrgModuleUpdate) ClearOrgSubscription() *OrgModuleUpdate {
	omu.mutation.ClearOrgSubscription()
	return omu
}

// ClearOrgProducts clears all "org_products" edges to the OrgProduct entity.
func (omu *OrgModuleUpdate) ClearOrgProducts() *OrgModuleUpdate {
	omu.mutation.ClearOrgProducts()
	return omu
}

// RemoveOrgProductIDs removes the "org_products" edge to OrgProduct entities by IDs.
func (omu *OrgModuleUpdate) RemoveOrgProductIDs(ids ...string) *OrgModuleUpdate {
	omu.mutation.RemoveOrgProductIDs(ids...)
	return omu
}

// RemoveOrgProducts removes "org_products" edges to OrgProduct entities.
func (omu *OrgModuleUpdate) RemoveOrgProducts(o ...*OrgProduct) *OrgModuleUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return omu.RemoveOrgProductIDs(ids...)
}

// ClearOrgPrices clears all "org_prices" edges to the OrgPrice entity.
func (omu *OrgModuleUpdate) ClearOrgPrices() *OrgModuleUpdate {
	omu.mutation.ClearOrgPrices()
	return omu
}

// RemoveOrgPriceIDs removes the "org_prices" edge to OrgPrice entities by IDs.
func (omu *OrgModuleUpdate) RemoveOrgPriceIDs(ids ...string) *OrgModuleUpdate {
	omu.mutation.RemoveOrgPriceIDs(ids...)
	return omu
}

// RemoveOrgPrices removes "org_prices" edges to OrgPrice entities.
func (omu *OrgModuleUpdate) RemoveOrgPrices(o ...*OrgPrice) *OrgModuleUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return omu.RemoveOrgPriceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (omu *OrgModuleUpdate) Save(ctx context.Context) (int, error) {
	if err := omu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, omu.sqlSave, omu.mutation, omu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (omu *OrgModuleUpdate) SaveX(ctx context.Context) int {
	affected, err := omu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (omu *OrgModuleUpdate) Exec(ctx context.Context) error {
	_, err := omu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omu *OrgModuleUpdate) ExecX(ctx context.Context) {
	if err := omu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (omu *OrgModuleUpdate) defaults() error {
	if _, ok := omu.mutation.UpdatedAt(); !ok && !omu.mutation.UpdatedAtCleared() {
		if orgmodule.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgmodule.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgmodule.UpdateDefaultUpdatedAt()
		omu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (omu *OrgModuleUpdate) check() error {
	if v, ok := omu.mutation.OwnerID(); ok {
		if err := orgmodule.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgModule.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (omu *OrgModuleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgModuleUpdate {
	omu.modifiers = append(omu.modifiers, modifiers...)
	return omu
}

func (omu *OrgModuleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := omu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgmodule.Table, orgmodule.Columns, sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString))
	if ps := omu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if omu.mutation.CreatedAtCleared() {
		_spec.ClearField(orgmodule.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := omu.mutation.UpdatedAt(); ok {
		_spec.SetField(orgmodule.FieldUpdatedAt, field.TypeTime, value)
	}
	if omu.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgmodule.FieldUpdatedAt, field.TypeTime)
	}
	if omu.mutation.CreatedByCleared() {
		_spec.ClearField(orgmodule.FieldCreatedBy, field.TypeString)
	}
	if value, ok := omu.mutation.UpdatedBy(); ok {
		_spec.SetField(orgmodule.FieldUpdatedBy, field.TypeString, value)
	}
	if omu.mutation.UpdatedByCleared() {
		_spec.ClearField(orgmodule.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := omu.mutation.DeletedAt(); ok {
		_spec.SetField(orgmodule.FieldDeletedAt, field.TypeTime, value)
	}
	if omu.mutation.DeletedAtCleared() {
		_spec.ClearField(orgmodule.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := omu.mutation.DeletedBy(); ok {
		_spec.SetField(orgmodule.FieldDeletedBy, field.TypeString, value)
	}
	if omu.mutation.DeletedByCleared() {
		_spec.ClearField(orgmodule.FieldDeletedBy, field.TypeString)
	}
	if value, ok := omu.mutation.Tags(); ok {
		_spec.SetField(orgmodule.FieldTags, field.TypeJSON, value)
	}
	if value, ok := omu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgmodule.FieldTags, value)
		})
	}
	if omu.mutation.TagsCleared() {
		_spec.ClearField(orgmodule.FieldTags, field.TypeJSON)
	}
	if value, ok := omu.mutation.Module(); ok {
		_spec.SetField(orgmodule.FieldModule, field.TypeString, value)
	}
	if value, ok := omu.mutation.Price(); ok {
		_spec.SetField(orgmodule.FieldPrice, field.TypeJSON, value)
	}
	if omu.mutation.PriceCleared() {
		_spec.ClearField(orgmodule.FieldPrice, field.TypeJSON)
	}
	if value, ok := omu.mutation.StripePriceID(); ok {
		_spec.SetField(orgmodule.FieldStripePriceID, field.TypeString, value)
	}
	if omu.mutation.StripePriceIDCleared() {
		_spec.ClearField(orgmodule.FieldStripePriceID, field.TypeString)
	}
	if value, ok := omu.mutation.Status(); ok {
		_spec.SetField(orgmodule.FieldStatus, field.TypeString, value)
	}
	if omu.mutation.StatusCleared() {
		_spec.ClearField(orgmodule.FieldStatus, field.TypeString)
	}
	if value, ok := omu.mutation.Visibility(); ok {
		_spec.SetField(orgmodule.FieldVisibility, field.TypeString, value)
	}
	if omu.mutation.VisibilityCleared() {
		_spec.ClearField(orgmodule.FieldVisibility, field.TypeString)
	}
	if value, ok := omu.mutation.Active(); ok {
		_spec.SetField(orgmodule.FieldActive, field.TypeBool, value)
	}
	if value, ok := omu.mutation.ModuleLookupKey(); ok {
		_spec.SetField(orgmodule.FieldModuleLookupKey, field.TypeString, value)
	}
	if omu.mutation.ModuleLookupKeyCleared() {
		_spec.ClearField(orgmodule.FieldModuleLookupKey, field.TypeString)
	}
	if value, ok := omu.mutation.PriceID(); ok {
		_spec.SetField(orgmodule.FieldPriceID, field.TypeString, value)
	}
	if omu.mutation.PriceIDCleared() {
		_spec.ClearField(orgmodule.FieldPriceID, field.TypeString)
	}
	if omu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OwnerTable,
			Columns: []string{orgmodule.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = omu.schemaConfig.OrgModule
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OwnerTable,
			Columns: []string{orgmodule.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = omu.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if omu.mutation.OrgSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OrgSubscriptionTable,
			Columns: []string{orgmodule.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = omu.schemaConfig.OrgModule
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omu.mutation.OrgSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OrgSubscriptionTable,
			Columns: []string{orgmodule.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = omu.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if omu.mutation.OrgProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmodule.OrgProductsTable,
			Columns: []string{orgmodule.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = omu.schemaConfig.OrgProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omu.mutation.RemovedOrgProductsIDs(); len(nodes) > 0 && !omu.mutation.OrgProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmodule.OrgProductsTable,
			Columns: []string{orgmodule.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = omu.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omu.mutation.OrgProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmodule.OrgProductsTable,
			Columns: []string{orgmodule.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = omu.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if omu.mutation.OrgPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgmodule.OrgPricesTable,
			Columns: orgmodule.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = omu.schemaConfig.OrgModuleOrgPrices
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omu.mutation.RemovedOrgPricesIDs(); len(nodes) > 0 && !omu.mutation.OrgPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgmodule.OrgPricesTable,
			Columns: orgmodule.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = omu.schemaConfig.OrgModuleOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omu.mutation.OrgPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgmodule.OrgPricesTable,
			Columns: orgmodule.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = omu.schemaConfig.OrgModuleOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = omu.schemaConfig.OrgModule
	ctx = internal.NewSchemaConfigContext(ctx, omu.schemaConfig)
	_spec.AddModifiers(omu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, omu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgmodule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	omu.mutation.done = true
	return n, nil
}

// OrgModuleUpdateOne is the builder for updating a single OrgModule entity.
type OrgModuleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrgModuleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (omuo *OrgModuleUpdateOne) SetUpdatedAt(t time.Time) *OrgModuleUpdateOne {
	omuo.mutation.SetUpdatedAt(t)
	return omuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (omuo *OrgModuleUpdateOne) ClearUpdatedAt() *OrgModuleUpdateOne {
	omuo.mutation.ClearUpdatedAt()
	return omuo
}

// SetUpdatedBy sets the "updated_by" field.
func (omuo *OrgModuleUpdateOne) SetUpdatedBy(s string) *OrgModuleUpdateOne {
	omuo.mutation.SetUpdatedBy(s)
	return omuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillableUpdatedBy(s *string) *OrgModuleUpdateOne {
	if s != nil {
		omuo.SetUpdatedBy(*s)
	}
	return omuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (omuo *OrgModuleUpdateOne) ClearUpdatedBy() *OrgModuleUpdateOne {
	omuo.mutation.ClearUpdatedBy()
	return omuo
}

// SetDeletedAt sets the "deleted_at" field.
func (omuo *OrgModuleUpdateOne) SetDeletedAt(t time.Time) *OrgModuleUpdateOne {
	omuo.mutation.SetDeletedAt(t)
	return omuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillableDeletedAt(t *time.Time) *OrgModuleUpdateOne {
	if t != nil {
		omuo.SetDeletedAt(*t)
	}
	return omuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (omuo *OrgModuleUpdateOne) ClearDeletedAt() *OrgModuleUpdateOne {
	omuo.mutation.ClearDeletedAt()
	return omuo
}

// SetDeletedBy sets the "deleted_by" field.
func (omuo *OrgModuleUpdateOne) SetDeletedBy(s string) *OrgModuleUpdateOne {
	omuo.mutation.SetDeletedBy(s)
	return omuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillableDeletedBy(s *string) *OrgModuleUpdateOne {
	if s != nil {
		omuo.SetDeletedBy(*s)
	}
	return omuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (omuo *OrgModuleUpdateOne) ClearDeletedBy() *OrgModuleUpdateOne {
	omuo.mutation.ClearDeletedBy()
	return omuo
}

// SetTags sets the "tags" field.
func (omuo *OrgModuleUpdateOne) SetTags(s []string) *OrgModuleUpdateOne {
	omuo.mutation.SetTags(s)
	return omuo
}

// AppendTags appends s to the "tags" field.
func (omuo *OrgModuleUpdateOne) AppendTags(s []string) *OrgModuleUpdateOne {
	omuo.mutation.AppendTags(s)
	return omuo
}

// ClearTags clears the value of the "tags" field.
func (omuo *OrgModuleUpdateOne) ClearTags() *OrgModuleUpdateOne {
	omuo.mutation.ClearTags()
	return omuo
}

// SetOwnerID sets the "owner_id" field.
func (omuo *OrgModuleUpdateOne) SetOwnerID(s string) *OrgModuleUpdateOne {
	omuo.mutation.SetOwnerID(s)
	return omuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillableOwnerID(s *string) *OrgModuleUpdateOne {
	if s != nil {
		omuo.SetOwnerID(*s)
	}
	return omuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (omuo *OrgModuleUpdateOne) ClearOwnerID() *OrgModuleUpdateOne {
	omuo.mutation.ClearOwnerID()
	return omuo
}

// SetModule sets the "module" field.
func (omuo *OrgModuleUpdateOne) SetModule(s string) *OrgModuleUpdateOne {
	omuo.mutation.SetModule(s)
	return omuo
}

// SetNillableModule sets the "module" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillableModule(s *string) *OrgModuleUpdateOne {
	if s != nil {
		omuo.SetModule(*s)
	}
	return omuo
}

// SetPrice sets the "price" field.
func (omuo *OrgModuleUpdateOne) SetPrice(m models.Price) *OrgModuleUpdateOne {
	omuo.mutation.SetPrice(m)
	return omuo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillablePrice(m *models.Price) *OrgModuleUpdateOne {
	if m != nil {
		omuo.SetPrice(*m)
	}
	return omuo
}

// ClearPrice clears the value of the "price" field.
func (omuo *OrgModuleUpdateOne) ClearPrice() *OrgModuleUpdateOne {
	omuo.mutation.ClearPrice()
	return omuo
}

// SetStripePriceID sets the "stripe_price_id" field.
func (omuo *OrgModuleUpdateOne) SetStripePriceID(s string) *OrgModuleUpdateOne {
	omuo.mutation.SetStripePriceID(s)
	return omuo
}

// SetNillableStripePriceID sets the "stripe_price_id" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillableStripePriceID(s *string) *OrgModuleUpdateOne {
	if s != nil {
		omuo.SetStripePriceID(*s)
	}
	return omuo
}

// ClearStripePriceID clears the value of the "stripe_price_id" field.
func (omuo *OrgModuleUpdateOne) ClearStripePriceID() *OrgModuleUpdateOne {
	omuo.mutation.ClearStripePriceID()
	return omuo
}

// SetStatus sets the "status" field.
func (omuo *OrgModuleUpdateOne) SetStatus(s string) *OrgModuleUpdateOne {
	omuo.mutation.SetStatus(s)
	return omuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillableStatus(s *string) *OrgModuleUpdateOne {
	if s != nil {
		omuo.SetStatus(*s)
	}
	return omuo
}

// ClearStatus clears the value of the "status" field.
func (omuo *OrgModuleUpdateOne) ClearStatus() *OrgModuleUpdateOne {
	omuo.mutation.ClearStatus()
	return omuo
}

// SetVisibility sets the "visibility" field.
func (omuo *OrgModuleUpdateOne) SetVisibility(s string) *OrgModuleUpdateOne {
	omuo.mutation.SetVisibility(s)
	return omuo
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillableVisibility(s *string) *OrgModuleUpdateOne {
	if s != nil {
		omuo.SetVisibility(*s)
	}
	return omuo
}

// ClearVisibility clears the value of the "visibility" field.
func (omuo *OrgModuleUpdateOne) ClearVisibility() *OrgModuleUpdateOne {
	omuo.mutation.ClearVisibility()
	return omuo
}

// SetActive sets the "active" field.
func (omuo *OrgModuleUpdateOne) SetActive(b bool) *OrgModuleUpdateOne {
	omuo.mutation.SetActive(b)
	return omuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillableActive(b *bool) *OrgModuleUpdateOne {
	if b != nil {
		omuo.SetActive(*b)
	}
	return omuo
}

// SetModuleLookupKey sets the "module_lookup_key" field.
func (omuo *OrgModuleUpdateOne) SetModuleLookupKey(s string) *OrgModuleUpdateOne {
	omuo.mutation.SetModuleLookupKey(s)
	return omuo
}

// SetNillableModuleLookupKey sets the "module_lookup_key" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillableModuleLookupKey(s *string) *OrgModuleUpdateOne {
	if s != nil {
		omuo.SetModuleLookupKey(*s)
	}
	return omuo
}

// ClearModuleLookupKey clears the value of the "module_lookup_key" field.
func (omuo *OrgModuleUpdateOne) ClearModuleLookupKey() *OrgModuleUpdateOne {
	omuo.mutation.ClearModuleLookupKey()
	return omuo
}

// SetSubscriptionID sets the "subscription_id" field.
func (omuo *OrgModuleUpdateOne) SetSubscriptionID(s string) *OrgModuleUpdateOne {
	omuo.mutation.SetSubscriptionID(s)
	return omuo
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillableSubscriptionID(s *string) *OrgModuleUpdateOne {
	if s != nil {
		omuo.SetSubscriptionID(*s)
	}
	return omuo
}

// ClearSubscriptionID clears the value of the "subscription_id" field.
func (omuo *OrgModuleUpdateOne) ClearSubscriptionID() *OrgModuleUpdateOne {
	omuo.mutation.ClearSubscriptionID()
	return omuo
}

// SetPriceID sets the "price_id" field.
func (omuo *OrgModuleUpdateOne) SetPriceID(s string) *OrgModuleUpdateOne {
	omuo.mutation.SetPriceID(s)
	return omuo
}

// SetNillablePriceID sets the "price_id" field if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillablePriceID(s *string) *OrgModuleUpdateOne {
	if s != nil {
		omuo.SetPriceID(*s)
	}
	return omuo
}

// ClearPriceID clears the value of the "price_id" field.
func (omuo *OrgModuleUpdateOne) ClearPriceID() *OrgModuleUpdateOne {
	omuo.mutation.ClearPriceID()
	return omuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (omuo *OrgModuleUpdateOne) SetOwner(o *Organization) *OrgModuleUpdateOne {
	return omuo.SetOwnerID(o.ID)
}

// SetOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID.
func (omuo *OrgModuleUpdateOne) SetOrgSubscriptionID(id string) *OrgModuleUpdateOne {
	omuo.mutation.SetOrgSubscriptionID(id)
	return omuo
}

// SetNillableOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID if the given value is not nil.
func (omuo *OrgModuleUpdateOne) SetNillableOrgSubscriptionID(id *string) *OrgModuleUpdateOne {
	if id != nil {
		omuo = omuo.SetOrgSubscriptionID(*id)
	}
	return omuo
}

// SetOrgSubscription sets the "org_subscription" edge to the OrgSubscription entity.
func (omuo *OrgModuleUpdateOne) SetOrgSubscription(o *OrgSubscription) *OrgModuleUpdateOne {
	return omuo.SetOrgSubscriptionID(o.ID)
}

// AddOrgProductIDs adds the "org_products" edge to the OrgProduct entity by IDs.
func (omuo *OrgModuleUpdateOne) AddOrgProductIDs(ids ...string) *OrgModuleUpdateOne {
	omuo.mutation.AddOrgProductIDs(ids...)
	return omuo
}

// AddOrgProducts adds the "org_products" edges to the OrgProduct entity.
func (omuo *OrgModuleUpdateOne) AddOrgProducts(o ...*OrgProduct) *OrgModuleUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return omuo.AddOrgProductIDs(ids...)
}

// AddOrgPriceIDs adds the "org_prices" edge to the OrgPrice entity by IDs.
func (omuo *OrgModuleUpdateOne) AddOrgPriceIDs(ids ...string) *OrgModuleUpdateOne {
	omuo.mutation.AddOrgPriceIDs(ids...)
	return omuo
}

// AddOrgPrices adds the "org_prices" edges to the OrgPrice entity.
func (omuo *OrgModuleUpdateOne) AddOrgPrices(o ...*OrgPrice) *OrgModuleUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return omuo.AddOrgPriceIDs(ids...)
}

// Mutation returns the OrgModuleMutation object of the builder.
func (omuo *OrgModuleUpdateOne) Mutation() *OrgModuleMutation {
	return omuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (omuo *OrgModuleUpdateOne) ClearOwner() *OrgModuleUpdateOne {
	omuo.mutation.ClearOwner()
	return omuo
}

// ClearOrgSubscription clears the "org_subscription" edge to the OrgSubscription entity.
func (omuo *OrgModuleUpdateOne) ClearOrgSubscription() *OrgModuleUpdateOne {
	omuo.mutation.ClearOrgSubscription()
	return omuo
}

// ClearOrgProducts clears all "org_products" edges to the OrgProduct entity.
func (omuo *OrgModuleUpdateOne) ClearOrgProducts() *OrgModuleUpdateOne {
	omuo.mutation.ClearOrgProducts()
	return omuo
}

// RemoveOrgProductIDs removes the "org_products" edge to OrgProduct entities by IDs.
func (omuo *OrgModuleUpdateOne) RemoveOrgProductIDs(ids ...string) *OrgModuleUpdateOne {
	omuo.mutation.RemoveOrgProductIDs(ids...)
	return omuo
}

// RemoveOrgProducts removes "org_products" edges to OrgProduct entities.
func (omuo *OrgModuleUpdateOne) RemoveOrgProducts(o ...*OrgProduct) *OrgModuleUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return omuo.RemoveOrgProductIDs(ids...)
}

// ClearOrgPrices clears all "org_prices" edges to the OrgPrice entity.
func (omuo *OrgModuleUpdateOne) ClearOrgPrices() *OrgModuleUpdateOne {
	omuo.mutation.ClearOrgPrices()
	return omuo
}

// RemoveOrgPriceIDs removes the "org_prices" edge to OrgPrice entities by IDs.
func (omuo *OrgModuleUpdateOne) RemoveOrgPriceIDs(ids ...string) *OrgModuleUpdateOne {
	omuo.mutation.RemoveOrgPriceIDs(ids...)
	return omuo
}

// RemoveOrgPrices removes "org_prices" edges to OrgPrice entities.
func (omuo *OrgModuleUpdateOne) RemoveOrgPrices(o ...*OrgPrice) *OrgModuleUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return omuo.RemoveOrgPriceIDs(ids...)
}

// Where appends a list predicates to the OrgModuleUpdate builder.
func (omuo *OrgModuleUpdateOne) Where(ps ...predicate.OrgModule) *OrgModuleUpdateOne {
	omuo.mutation.Where(ps...)
	return omuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (omuo *OrgModuleUpdateOne) Select(field string, fields ...string) *OrgModuleUpdateOne {
	omuo.fields = append([]string{field}, fields...)
	return omuo
}

// Save executes the query and returns the updated OrgModule entity.
func (omuo *OrgModuleUpdateOne) Save(ctx context.Context) (*OrgModule, error) {
	if err := omuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, omuo.sqlSave, omuo.mutation, omuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (omuo *OrgModuleUpdateOne) SaveX(ctx context.Context) *OrgModule {
	node, err := omuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (omuo *OrgModuleUpdateOne) Exec(ctx context.Context) error {
	_, err := omuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omuo *OrgModuleUpdateOne) ExecX(ctx context.Context) {
	if err := omuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (omuo *OrgModuleUpdateOne) defaults() error {
	if _, ok := omuo.mutation.UpdatedAt(); !ok && !omuo.mutation.UpdatedAtCleared() {
		if orgmodule.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgmodule.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgmodule.UpdateDefaultUpdatedAt()
		omuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (omuo *OrgModuleUpdateOne) check() error {
	if v, ok := omuo.mutation.OwnerID(); ok {
		if err := orgmodule.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgModule.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (omuo *OrgModuleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrgModuleUpdateOne {
	omuo.modifiers = append(omuo.modifiers, modifiers...)
	return omuo
}

func (omuo *OrgModuleUpdateOne) sqlSave(ctx context.Context) (_node *OrgModule, err error) {
	if err := omuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(orgmodule.Table, orgmodule.Columns, sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString))
	id, ok := omuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OrgModule.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := omuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgmodule.FieldID)
		for _, f := range fields {
			if !orgmodule.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != orgmodule.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := omuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if omuo.mutation.CreatedAtCleared() {
		_spec.ClearField(orgmodule.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := omuo.mutation.UpdatedAt(); ok {
		_spec.SetField(orgmodule.FieldUpdatedAt, field.TypeTime, value)
	}
	if omuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(orgmodule.FieldUpdatedAt, field.TypeTime)
	}
	if omuo.mutation.CreatedByCleared() {
		_spec.ClearField(orgmodule.FieldCreatedBy, field.TypeString)
	}
	if value, ok := omuo.mutation.UpdatedBy(); ok {
		_spec.SetField(orgmodule.FieldUpdatedBy, field.TypeString, value)
	}
	if omuo.mutation.UpdatedByCleared() {
		_spec.ClearField(orgmodule.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := omuo.mutation.DeletedAt(); ok {
		_spec.SetField(orgmodule.FieldDeletedAt, field.TypeTime, value)
	}
	if omuo.mutation.DeletedAtCleared() {
		_spec.ClearField(orgmodule.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := omuo.mutation.DeletedBy(); ok {
		_spec.SetField(orgmodule.FieldDeletedBy, field.TypeString, value)
	}
	if omuo.mutation.DeletedByCleared() {
		_spec.ClearField(orgmodule.FieldDeletedBy, field.TypeString)
	}
	if value, ok := omuo.mutation.Tags(); ok {
		_spec.SetField(orgmodule.FieldTags, field.TypeJSON, value)
	}
	if value, ok := omuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, orgmodule.FieldTags, value)
		})
	}
	if omuo.mutation.TagsCleared() {
		_spec.ClearField(orgmodule.FieldTags, field.TypeJSON)
	}
	if value, ok := omuo.mutation.Module(); ok {
		_spec.SetField(orgmodule.FieldModule, field.TypeString, value)
	}
	if value, ok := omuo.mutation.Price(); ok {
		_spec.SetField(orgmodule.FieldPrice, field.TypeJSON, value)
	}
	if omuo.mutation.PriceCleared() {
		_spec.ClearField(orgmodule.FieldPrice, field.TypeJSON)
	}
	if value, ok := omuo.mutation.StripePriceID(); ok {
		_spec.SetField(orgmodule.FieldStripePriceID, field.TypeString, value)
	}
	if omuo.mutation.StripePriceIDCleared() {
		_spec.ClearField(orgmodule.FieldStripePriceID, field.TypeString)
	}
	if value, ok := omuo.mutation.Status(); ok {
		_spec.SetField(orgmodule.FieldStatus, field.TypeString, value)
	}
	if omuo.mutation.StatusCleared() {
		_spec.ClearField(orgmodule.FieldStatus, field.TypeString)
	}
	if value, ok := omuo.mutation.Visibility(); ok {
		_spec.SetField(orgmodule.FieldVisibility, field.TypeString, value)
	}
	if omuo.mutation.VisibilityCleared() {
		_spec.ClearField(orgmodule.FieldVisibility, field.TypeString)
	}
	if value, ok := omuo.mutation.Active(); ok {
		_spec.SetField(orgmodule.FieldActive, field.TypeBool, value)
	}
	if value, ok := omuo.mutation.ModuleLookupKey(); ok {
		_spec.SetField(orgmodule.FieldModuleLookupKey, field.TypeString, value)
	}
	if omuo.mutation.ModuleLookupKeyCleared() {
		_spec.ClearField(orgmodule.FieldModuleLookupKey, field.TypeString)
	}
	if value, ok := omuo.mutation.PriceID(); ok {
		_spec.SetField(orgmodule.FieldPriceID, field.TypeString, value)
	}
	if omuo.mutation.PriceIDCleared() {
		_spec.ClearField(orgmodule.FieldPriceID, field.TypeString)
	}
	if omuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OwnerTable,
			Columns: []string{orgmodule.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = omuo.schemaConfig.OrgModule
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OwnerTable,
			Columns: []string{orgmodule.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = omuo.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if omuo.mutation.OrgSubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OrgSubscriptionTable,
			Columns: []string{orgmodule.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = omuo.schemaConfig.OrgModule
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omuo.mutation.OrgSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OrgSubscriptionTable,
			Columns: []string{orgmodule.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = omuo.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if omuo.mutation.OrgProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmodule.OrgProductsTable,
			Columns: []string{orgmodule.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = omuo.schemaConfig.OrgProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omuo.mutation.RemovedOrgProductsIDs(); len(nodes) > 0 && !omuo.mutation.OrgProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmodule.OrgProductsTable,
			Columns: []string{orgmodule.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = omuo.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omuo.mutation.OrgProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmodule.OrgProductsTable,
			Columns: []string{orgmodule.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = omuo.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if omuo.mutation.OrgPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgmodule.OrgPricesTable,
			Columns: orgmodule.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = omuo.schemaConfig.OrgModuleOrgPrices
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omuo.mutation.RemovedOrgPricesIDs(); len(nodes) > 0 && !omuo.mutation.OrgPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgmodule.OrgPricesTable,
			Columns: orgmodule.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = omuo.schemaConfig.OrgModuleOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := omuo.mutation.OrgPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgmodule.OrgPricesTable,
			Columns: orgmodule.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = omuo.schemaConfig.OrgModuleOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = omuo.schemaConfig.OrgModule
	ctx = internal.NewSchemaConfigContext(ctx, omuo.schemaConfig)
	_spec.AddModifiers(omuo.modifiers...)
	_node = &OrgModule{config: omuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, omuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{orgmodule.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	omuo.mutation.done = true
	return _node, nil
}
