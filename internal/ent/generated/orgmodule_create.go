// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/pkg/models"
)

// OrgModuleCreate is the builder for creating a OrgModule entity.
type OrgModuleCreate struct {
	config
	mutation *OrgModuleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (omc *OrgModuleCreate) SetCreatedAt(t time.Time) *OrgModuleCreate {
	omc.mutation.SetCreatedAt(t)
	return omc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableCreatedAt(t *time.Time) *OrgModuleCreate {
	if t != nil {
		omc.SetCreatedAt(*t)
	}
	return omc
}

// SetUpdatedAt sets the "updated_at" field.
func (omc *OrgModuleCreate) SetUpdatedAt(t time.Time) *OrgModuleCreate {
	omc.mutation.SetUpdatedAt(t)
	return omc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableUpdatedAt(t *time.Time) *OrgModuleCreate {
	if t != nil {
		omc.SetUpdatedAt(*t)
	}
	return omc
}

// SetCreatedBy sets the "created_by" field.
func (omc *OrgModuleCreate) SetCreatedBy(s string) *OrgModuleCreate {
	omc.mutation.SetCreatedBy(s)
	return omc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableCreatedBy(s *string) *OrgModuleCreate {
	if s != nil {
		omc.SetCreatedBy(*s)
	}
	return omc
}

// SetUpdatedBy sets the "updated_by" field.
func (omc *OrgModuleCreate) SetUpdatedBy(s string) *OrgModuleCreate {
	omc.mutation.SetUpdatedBy(s)
	return omc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableUpdatedBy(s *string) *OrgModuleCreate {
	if s != nil {
		omc.SetUpdatedBy(*s)
	}
	return omc
}

// SetDeletedAt sets the "deleted_at" field.
func (omc *OrgModuleCreate) SetDeletedAt(t time.Time) *OrgModuleCreate {
	omc.mutation.SetDeletedAt(t)
	return omc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableDeletedAt(t *time.Time) *OrgModuleCreate {
	if t != nil {
		omc.SetDeletedAt(*t)
	}
	return omc
}

// SetDeletedBy sets the "deleted_by" field.
func (omc *OrgModuleCreate) SetDeletedBy(s string) *OrgModuleCreate {
	omc.mutation.SetDeletedBy(s)
	return omc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableDeletedBy(s *string) *OrgModuleCreate {
	if s != nil {
		omc.SetDeletedBy(*s)
	}
	return omc
}

// SetTags sets the "tags" field.
func (omc *OrgModuleCreate) SetTags(s []string) *OrgModuleCreate {
	omc.mutation.SetTags(s)
	return omc
}

// SetOwnerID sets the "owner_id" field.
func (omc *OrgModuleCreate) SetOwnerID(s string) *OrgModuleCreate {
	omc.mutation.SetOwnerID(s)
	return omc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableOwnerID(s *string) *OrgModuleCreate {
	if s != nil {
		omc.SetOwnerID(*s)
	}
	return omc
}

// SetModule sets the "module" field.
func (omc *OrgModuleCreate) SetModule(s string) *OrgModuleCreate {
	omc.mutation.SetModule(s)
	return omc
}

// SetPrice sets the "price" field.
func (omc *OrgModuleCreate) SetPrice(m models.Price) *OrgModuleCreate {
	omc.mutation.SetPrice(m)
	return omc
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillablePrice(m *models.Price) *OrgModuleCreate {
	if m != nil {
		omc.SetPrice(*m)
	}
	return omc
}

// SetStripePriceID sets the "stripe_price_id" field.
func (omc *OrgModuleCreate) SetStripePriceID(s string) *OrgModuleCreate {
	omc.mutation.SetStripePriceID(s)
	return omc
}

// SetNillableStripePriceID sets the "stripe_price_id" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableStripePriceID(s *string) *OrgModuleCreate {
	if s != nil {
		omc.SetStripePriceID(*s)
	}
	return omc
}

// SetStatus sets the "status" field.
func (omc *OrgModuleCreate) SetStatus(s string) *OrgModuleCreate {
	omc.mutation.SetStatus(s)
	return omc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableStatus(s *string) *OrgModuleCreate {
	if s != nil {
		omc.SetStatus(*s)
	}
	return omc
}

// SetActive sets the "active" field.
func (omc *OrgModuleCreate) SetActive(b bool) *OrgModuleCreate {
	omc.mutation.SetActive(b)
	return omc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableActive(b *bool) *OrgModuleCreate {
	if b != nil {
		omc.SetActive(*b)
	}
	return omc
}

// SetTrialExpiresAt sets the "trial_expires_at" field.
func (omc *OrgModuleCreate) SetTrialExpiresAt(t time.Time) *OrgModuleCreate {
	omc.mutation.SetTrialExpiresAt(t)
	return omc
}

// SetNillableTrialExpiresAt sets the "trial_expires_at" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableTrialExpiresAt(t *time.Time) *OrgModuleCreate {
	if t != nil {
		omc.SetTrialExpiresAt(*t)
	}
	return omc
}

// SetExpiresAt sets the "expires_at" field.
func (omc *OrgModuleCreate) SetExpiresAt(t time.Time) *OrgModuleCreate {
	omc.mutation.SetExpiresAt(t)
	return omc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableExpiresAt(t *time.Time) *OrgModuleCreate {
	if t != nil {
		omc.SetExpiresAt(*t)
	}
	return omc
}

// SetSubscriptionID sets the "subscription_id" field.
func (omc *OrgModuleCreate) SetSubscriptionID(s string) *OrgModuleCreate {
	omc.mutation.SetSubscriptionID(s)
	return omc
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableSubscriptionID(s *string) *OrgModuleCreate {
	if s != nil {
		omc.SetSubscriptionID(*s)
	}
	return omc
}

// SetID sets the "id" field.
func (omc *OrgModuleCreate) SetID(s string) *OrgModuleCreate {
	omc.mutation.SetID(s)
	return omc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableID(s *string) *OrgModuleCreate {
	if s != nil {
		omc.SetID(*s)
	}
	return omc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (omc *OrgModuleCreate) SetOwner(o *Organization) *OrgModuleCreate {
	return omc.SetOwnerID(o.ID)
}

// SetOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID.
func (omc *OrgModuleCreate) SetOrgSubscriptionID(id string) *OrgModuleCreate {
	omc.mutation.SetOrgSubscriptionID(id)
	return omc
}

// SetNillableOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID if the given value is not nil.
func (omc *OrgModuleCreate) SetNillableOrgSubscriptionID(id *string) *OrgModuleCreate {
	if id != nil {
		omc = omc.SetOrgSubscriptionID(*id)
	}
	return omc
}

// SetOrgSubscription sets the "org_subscription" edge to the OrgSubscription entity.
func (omc *OrgModuleCreate) SetOrgSubscription(o *OrgSubscription) *OrgModuleCreate {
	return omc.SetOrgSubscriptionID(o.ID)
}

// Mutation returns the OrgModuleMutation object of the builder.
func (omc *OrgModuleCreate) Mutation() *OrgModuleMutation {
	return omc.mutation
}

// Save creates the OrgModule in the database.
func (omc *OrgModuleCreate) Save(ctx context.Context) (*OrgModule, error) {
	if err := omc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, omc.sqlSave, omc.mutation, omc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (omc *OrgModuleCreate) SaveX(ctx context.Context) *OrgModule {
	v, err := omc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (omc *OrgModuleCreate) Exec(ctx context.Context) error {
	_, err := omc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omc *OrgModuleCreate) ExecX(ctx context.Context) {
	if err := omc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (omc *OrgModuleCreate) defaults() error {
	if _, ok := omc.mutation.CreatedAt(); !ok {
		if orgmodule.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgmodule.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := orgmodule.DefaultCreatedAt()
		omc.mutation.SetCreatedAt(v)
	}
	if _, ok := omc.mutation.UpdatedAt(); !ok {
		if orgmodule.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgmodule.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgmodule.DefaultUpdatedAt()
		omc.mutation.SetUpdatedAt(v)
	}
	if _, ok := omc.mutation.Tags(); !ok {
		v := orgmodule.DefaultTags
		omc.mutation.SetTags(v)
	}
	if _, ok := omc.mutation.Active(); !ok {
		v := orgmodule.DefaultActive
		omc.mutation.SetActive(v)
	}
	if _, ok := omc.mutation.ID(); !ok {
		if orgmodule.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized orgmodule.DefaultID (forgotten import generated/runtime?)")
		}
		v := orgmodule.DefaultID()
		omc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (omc *OrgModuleCreate) check() error {
	if v, ok := omc.mutation.OwnerID(); ok {
		if err := orgmodule.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgModule.owner_id": %w`, err)}
		}
	}
	if _, ok := omc.mutation.Module(); !ok {
		return &ValidationError{Name: "module", err: errors.New(`generated: missing required field "OrgModule.module"`)}
	}
	if _, ok := omc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`generated: missing required field "OrgModule.active"`)}
	}
	return nil
}

func (omc *OrgModuleCreate) sqlSave(ctx context.Context) (*OrgModule, error) {
	if err := omc.check(); err != nil {
		return nil, err
	}
	_node, _spec := omc.createSpec()
	if err := sqlgraph.CreateNode(ctx, omc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrgModule.ID type: %T", _spec.ID.Value)
		}
	}
	omc.mutation.id = &_node.ID
	omc.mutation.done = true
	return _node, nil
}

func (omc *OrgModuleCreate) createSpec() (*OrgModule, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgModule{config: omc.config}
		_spec = sqlgraph.NewCreateSpec(orgmodule.Table, sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString))
	)
	_spec.Schema = omc.schemaConfig.OrgModule
	if id, ok := omc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := omc.mutation.CreatedAt(); ok {
		_spec.SetField(orgmodule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := omc.mutation.UpdatedAt(); ok {
		_spec.SetField(orgmodule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := omc.mutation.CreatedBy(); ok {
		_spec.SetField(orgmodule.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := omc.mutation.UpdatedBy(); ok {
		_spec.SetField(orgmodule.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := omc.mutation.DeletedAt(); ok {
		_spec.SetField(orgmodule.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := omc.mutation.DeletedBy(); ok {
		_spec.SetField(orgmodule.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := omc.mutation.Tags(); ok {
		_spec.SetField(orgmodule.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := omc.mutation.Module(); ok {
		_spec.SetField(orgmodule.FieldModule, field.TypeString, value)
		_node.Module = value
	}
	if value, ok := omc.mutation.Price(); ok {
		_spec.SetField(orgmodule.FieldPrice, field.TypeJSON, value)
		_node.Price = value
	}
	if value, ok := omc.mutation.StripePriceID(); ok {
		_spec.SetField(orgmodule.FieldStripePriceID, field.TypeString, value)
		_node.StripePriceID = value
	}
	if value, ok := omc.mutation.Status(); ok {
		_spec.SetField(orgmodule.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := omc.mutation.Active(); ok {
		_spec.SetField(orgmodule.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := omc.mutation.TrialExpiresAt(); ok {
		_spec.SetField(orgmodule.FieldTrialExpiresAt, field.TypeTime, value)
		_node.TrialExpiresAt = &value
	}
	if value, ok := omc.mutation.ExpiresAt(); ok {
		_spec.SetField(orgmodule.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if nodes := omc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OwnerTable,
			Columns: []string{orgmodule.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = omc.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := omc.mutation.OrgSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OrgSubscriptionTable,
			Columns: []string{orgmodule.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = omc.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrgModuleCreateBulk is the builder for creating many OrgModule entities in bulk.
type OrgModuleCreateBulk struct {
	config
	err      error
	builders []*OrgModuleCreate
}

// Save creates the OrgModule entities in the database.
func (omcb *OrgModuleCreateBulk) Save(ctx context.Context) ([]*OrgModule, error) {
	if omcb.err != nil {
		return nil, omcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(omcb.builders))
	nodes := make([]*OrgModule, len(omcb.builders))
	mutators := make([]Mutator, len(omcb.builders))
	for i := range omcb.builders {
		func(i int, root context.Context) {
			builder := omcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgModuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, omcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, omcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, omcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (omcb *OrgModuleCreateBulk) SaveX(ctx context.Context) []*OrgModule {
	v, err := omcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (omcb *OrgModuleCreateBulk) Exec(ctx context.Context) error {
	_, err := omcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (omcb *OrgModuleCreateBulk) ExecX(ctx context.Context) {
	if err := omcb.Exec(ctx); err != nil {
		panic(err)
	}
}
