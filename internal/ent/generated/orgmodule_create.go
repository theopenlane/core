// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgproduct"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/pkg/models"
)

// OrgModuleCreate is the builder for creating a OrgModule entity.
type OrgModuleCreate struct {
	config
	mutation *OrgModuleMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *OrgModuleCreate) SetCreatedAt(v time.Time) *OrgModuleCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableCreatedAt(v *time.Time) *OrgModuleCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OrgModuleCreate) SetUpdatedAt(v time.Time) *OrgModuleCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableUpdatedAt(v *time.Time) *OrgModuleCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *OrgModuleCreate) SetCreatedBy(v string) *OrgModuleCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableCreatedBy(v *string) *OrgModuleCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *OrgModuleCreate) SetUpdatedBy(v string) *OrgModuleCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableUpdatedBy(v *string) *OrgModuleCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *OrgModuleCreate) SetDeletedAt(v time.Time) *OrgModuleCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableDeletedAt(v *time.Time) *OrgModuleCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *OrgModuleCreate) SetDeletedBy(v string) *OrgModuleCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableDeletedBy(v *string) *OrgModuleCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *OrgModuleCreate) SetTags(v []string) *OrgModuleCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *OrgModuleCreate) SetOwnerID(v string) *OrgModuleCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableOwnerID(v *string) *OrgModuleCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetModule sets the "module" field.
func (_c *OrgModuleCreate) SetModule(v models.OrgModule) *OrgModuleCreate {
	_c.mutation.SetModule(v)
	return _c
}

// SetPrice sets the "price" field.
func (_c *OrgModuleCreate) SetPrice(v models.Price) *OrgModuleCreate {
	_c.mutation.SetPrice(v)
	return _c
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillablePrice(v *models.Price) *OrgModuleCreate {
	if v != nil {
		_c.SetPrice(*v)
	}
	return _c
}

// SetStripePriceID sets the "stripe_price_id" field.
func (_c *OrgModuleCreate) SetStripePriceID(v string) *OrgModuleCreate {
	_c.mutation.SetStripePriceID(v)
	return _c
}

// SetNillableStripePriceID sets the "stripe_price_id" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableStripePriceID(v *string) *OrgModuleCreate {
	if v != nil {
		_c.SetStripePriceID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *OrgModuleCreate) SetStatus(v string) *OrgModuleCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableStatus(v *string) *OrgModuleCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetVisibility sets the "visibility" field.
func (_c *OrgModuleCreate) SetVisibility(v string) *OrgModuleCreate {
	_c.mutation.SetVisibility(v)
	return _c
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableVisibility(v *string) *OrgModuleCreate {
	if v != nil {
		_c.SetVisibility(*v)
	}
	return _c
}

// SetActive sets the "active" field.
func (_c *OrgModuleCreate) SetActive(v bool) *OrgModuleCreate {
	_c.mutation.SetActive(v)
	return _c
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableActive(v *bool) *OrgModuleCreate {
	if v != nil {
		_c.SetActive(*v)
	}
	return _c
}

// SetModuleLookupKey sets the "module_lookup_key" field.
func (_c *OrgModuleCreate) SetModuleLookupKey(v string) *OrgModuleCreate {
	_c.mutation.SetModuleLookupKey(v)
	return _c
}

// SetNillableModuleLookupKey sets the "module_lookup_key" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableModuleLookupKey(v *string) *OrgModuleCreate {
	if v != nil {
		_c.SetModuleLookupKey(*v)
	}
	return _c
}

// SetSubscriptionID sets the "subscription_id" field.
func (_c *OrgModuleCreate) SetSubscriptionID(v string) *OrgModuleCreate {
	_c.mutation.SetSubscriptionID(v)
	return _c
}

// SetNillableSubscriptionID sets the "subscription_id" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableSubscriptionID(v *string) *OrgModuleCreate {
	if v != nil {
		_c.SetSubscriptionID(*v)
	}
	return _c
}

// SetPriceID sets the "price_id" field.
func (_c *OrgModuleCreate) SetPriceID(v string) *OrgModuleCreate {
	_c.mutation.SetPriceID(v)
	return _c
}

// SetNillablePriceID sets the "price_id" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillablePriceID(v *string) *OrgModuleCreate {
	if v != nil {
		_c.SetPriceID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OrgModuleCreate) SetID(v string) *OrgModuleCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableID(v *string) *OrgModuleCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *OrgModuleCreate) SetOwner(v *Organization) *OrgModuleCreate {
	return _c.SetOwnerID(v.ID)
}

// SetOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID.
func (_c *OrgModuleCreate) SetOrgSubscriptionID(id string) *OrgModuleCreate {
	_c.mutation.SetOrgSubscriptionID(id)
	return _c
}

// SetNillableOrgSubscriptionID sets the "org_subscription" edge to the OrgSubscription entity by ID if the given value is not nil.
func (_c *OrgModuleCreate) SetNillableOrgSubscriptionID(id *string) *OrgModuleCreate {
	if id != nil {
		_c = _c.SetOrgSubscriptionID(*id)
	}
	return _c
}

// SetOrgSubscription sets the "org_subscription" edge to the OrgSubscription entity.
func (_c *OrgModuleCreate) SetOrgSubscription(v *OrgSubscription) *OrgModuleCreate {
	return _c.SetOrgSubscriptionID(v.ID)
}

// AddOrgProductIDs adds the "org_products" edge to the OrgProduct entity by IDs.
func (_c *OrgModuleCreate) AddOrgProductIDs(ids ...string) *OrgModuleCreate {
	_c.mutation.AddOrgProductIDs(ids...)
	return _c
}

// AddOrgProducts adds the "org_products" edges to the OrgProduct entity.
func (_c *OrgModuleCreate) AddOrgProducts(v ...*OrgProduct) *OrgModuleCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOrgProductIDs(ids...)
}

// AddOrgPriceIDs adds the "org_prices" edge to the OrgPrice entity by IDs.
func (_c *OrgModuleCreate) AddOrgPriceIDs(ids ...string) *OrgModuleCreate {
	_c.mutation.AddOrgPriceIDs(ids...)
	return _c
}

// AddOrgPrices adds the "org_prices" edges to the OrgPrice entity.
func (_c *OrgModuleCreate) AddOrgPrices(v ...*OrgPrice) *OrgModuleCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOrgPriceIDs(ids...)
}

// Mutation returns the OrgModuleMutation object of the builder.
func (_c *OrgModuleCreate) Mutation() *OrgModuleMutation {
	return _c.mutation
}

// Save creates the OrgModule in the database.
func (_c *OrgModuleCreate) Save(ctx context.Context) (*OrgModule, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrgModuleCreate) SaveX(ctx context.Context) *OrgModule {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrgModuleCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrgModuleCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrgModuleCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if orgmodule.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgmodule.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := orgmodule.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if orgmodule.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgmodule.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgmodule.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := orgmodule.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.Active(); !ok {
		v := orgmodule.DefaultActive
		_c.mutation.SetActive(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if orgmodule.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized orgmodule.DefaultID (forgotten import generated/runtime?)")
		}
		v := orgmodule.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrgModuleCreate) check() error {
	if v, ok := _c.mutation.OwnerID(); ok {
		if err := orgmodule.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgModule.owner_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Module(); !ok {
		return &ValidationError{Name: "module", err: errors.New(`generated: missing required field "OrgModule.module"`)}
	}
	if v, ok := _c.mutation.Module(); ok {
		if err := orgmodule.ModuleValidator(string(v)); err != nil {
			return &ValidationError{Name: "module", err: fmt.Errorf(`generated: validator failed for field "OrgModule.module": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`generated: missing required field "OrgModule.active"`)}
	}
	return nil
}

func (_c *OrgModuleCreate) sqlSave(ctx context.Context) (*OrgModule, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrgModule.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrgModuleCreate) createSpec() (*OrgModule, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgModule{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(orgmodule.Table, sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.OrgModule
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(orgmodule.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(orgmodule.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(orgmodule.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(orgmodule.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(orgmodule.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(orgmodule.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(orgmodule.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Module(); ok {
		_spec.SetField(orgmodule.FieldModule, field.TypeString, value)
		_node.Module = value
	}
	if value, ok := _c.mutation.Price(); ok {
		_spec.SetField(orgmodule.FieldPrice, field.TypeJSON, value)
		_node.Price = value
	}
	if value, ok := _c.mutation.StripePriceID(); ok {
		_spec.SetField(orgmodule.FieldStripePriceID, field.TypeString, value)
		_node.StripePriceID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(orgmodule.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Visibility(); ok {
		_spec.SetField(orgmodule.FieldVisibility, field.TypeString, value)
		_node.Visibility = value
	}
	if value, ok := _c.mutation.Active(); ok {
		_spec.SetField(orgmodule.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := _c.mutation.ModuleLookupKey(); ok {
		_spec.SetField(orgmodule.FieldModuleLookupKey, field.TypeString, value)
		_node.ModuleLookupKey = value
	}
	if value, ok := _c.mutation.PriceID(); ok {
		_spec.SetField(orgmodule.FieldPriceID, field.TypeString, value)
		_node.PriceID = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OwnerTable,
			Columns: []string{orgmodule.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrgSubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgmodule.OrgSubscriptionTable,
			Columns: []string{orgmodule.OrgSubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubscriptionID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrgProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   orgmodule.OrgProductsTable,
			Columns: []string{orgmodule.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrgPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   orgmodule.OrgPricesTable,
			Columns: orgmodule.OrgPricesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrgModuleOrgPrices
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrgModuleCreateBulk is the builder for creating many OrgModule entities in bulk.
type OrgModuleCreateBulk struct {
	config
	err      error
	builders []*OrgModuleCreate
}

// Save creates the OrgModule entities in the database.
func (_c *OrgModuleCreateBulk) Save(ctx context.Context) ([]*OrgModule, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OrgModule, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgModuleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrgModuleCreateBulk) SaveX(ctx context.Context) []*OrgModule {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrgModuleCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrgModuleCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
