// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/assessment"
	"github.com/theopenlane/core/internal/ent/generated/assessmentresponse"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// AssessmentUpdate is the builder for updating Assessment entities.
type AssessmentUpdate struct {
	config
	hooks     []Hook
	mutation  *AssessmentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssessmentUpdate builder.
func (au *AssessmentUpdate) Where(ps ...predicate.Assessment) *AssessmentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AssessmentUpdate) SetUpdatedAt(t time.Time) *AssessmentUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AssessmentUpdate) ClearUpdatedAt() *AssessmentUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetUpdatedBy sets the "updated_by" field.
func (au *AssessmentUpdate) SetUpdatedBy(s string) *AssessmentUpdate {
	au.mutation.SetUpdatedBy(s)
	return au
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (au *AssessmentUpdate) SetNillableUpdatedBy(s *string) *AssessmentUpdate {
	if s != nil {
		au.SetUpdatedBy(*s)
	}
	return au
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (au *AssessmentUpdate) ClearUpdatedBy() *AssessmentUpdate {
	au.mutation.ClearUpdatedBy()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AssessmentUpdate) SetDeletedAt(t time.Time) *AssessmentUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AssessmentUpdate) SetNillableDeletedAt(t *time.Time) *AssessmentUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AssessmentUpdate) ClearDeletedAt() *AssessmentUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetDeletedBy sets the "deleted_by" field.
func (au *AssessmentUpdate) SetDeletedBy(s string) *AssessmentUpdate {
	au.mutation.SetDeletedBy(s)
	return au
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (au *AssessmentUpdate) SetNillableDeletedBy(s *string) *AssessmentUpdate {
	if s != nil {
		au.SetDeletedBy(*s)
	}
	return au
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (au *AssessmentUpdate) ClearDeletedBy() *AssessmentUpdate {
	au.mutation.ClearDeletedBy()
	return au
}

// SetTags sets the "tags" field.
func (au *AssessmentUpdate) SetTags(s []string) *AssessmentUpdate {
	au.mutation.SetTags(s)
	return au
}

// AppendTags appends s to the "tags" field.
func (au *AssessmentUpdate) AppendTags(s []string) *AssessmentUpdate {
	au.mutation.AppendTags(s)
	return au
}

// ClearTags clears the value of the "tags" field.
func (au *AssessmentUpdate) ClearTags() *AssessmentUpdate {
	au.mutation.ClearTags()
	return au
}

// SetOwnerID sets the "owner_id" field.
func (au *AssessmentUpdate) SetOwnerID(s string) *AssessmentUpdate {
	au.mutation.SetOwnerID(s)
	return au
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (au *AssessmentUpdate) SetNillableOwnerID(s *string) *AssessmentUpdate {
	if s != nil {
		au.SetOwnerID(*s)
	}
	return au
}

// ClearOwnerID clears the value of the "owner_id" field.
func (au *AssessmentUpdate) ClearOwnerID() *AssessmentUpdate {
	au.mutation.ClearOwnerID()
	return au
}

// SetName sets the "name" field.
func (au *AssessmentUpdate) SetName(s string) *AssessmentUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AssessmentUpdate) SetNillableName(s *string) *AssessmentUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetAssessmentType sets the "assessment_type" field.
func (au *AssessmentUpdate) SetAssessmentType(et enums.AssessmentType) *AssessmentUpdate {
	au.mutation.SetAssessmentType(et)
	return au
}

// SetNillableAssessmentType sets the "assessment_type" field if the given value is not nil.
func (au *AssessmentUpdate) SetNillableAssessmentType(et *enums.AssessmentType) *AssessmentUpdate {
	if et != nil {
		au.SetAssessmentType(*et)
	}
	return au
}

// SetQuestionnaireID sets the "questionnaire_id" field.
func (au *AssessmentUpdate) SetQuestionnaireID(s string) *AssessmentUpdate {
	au.mutation.SetQuestionnaireID(s)
	return au
}

// SetNillableQuestionnaireID sets the "questionnaire_id" field if the given value is not nil.
func (au *AssessmentUpdate) SetNillableQuestionnaireID(s *string) *AssessmentUpdate {
	if s != nil {
		au.SetQuestionnaireID(*s)
	}
	return au
}

// ClearQuestionnaireID clears the value of the "questionnaire_id" field.
func (au *AssessmentUpdate) ClearQuestionnaireID() *AssessmentUpdate {
	au.mutation.ClearQuestionnaireID()
	return au
}

// SetOwner sets the "owner" edge to the Organization entity.
func (au *AssessmentUpdate) SetOwner(o *Organization) *AssessmentUpdate {
	return au.SetOwnerID(o.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (au *AssessmentUpdate) AddUserIDs(ids ...string) *AssessmentUpdate {
	au.mutation.AddUserIDs(ids...)
	return au
}

// AddUsers adds the "users" edges to the User entity.
func (au *AssessmentUpdate) AddUsers(u ...*User) *AssessmentUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.AddUserIDs(ids...)
}

// AddAssessmentResponseIDs adds the "assessment_responses" edge to the AssessmentResponse entity by IDs.
func (au *AssessmentUpdate) AddAssessmentResponseIDs(ids ...string) *AssessmentUpdate {
	au.mutation.AddAssessmentResponseIDs(ids...)
	return au
}

// AddAssessmentResponses adds the "assessment_responses" edges to the AssessmentResponse entity.
func (au *AssessmentUpdate) AddAssessmentResponses(a ...*AssessmentResponse) *AssessmentUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAssessmentResponseIDs(ids...)
}

// Mutation returns the AssessmentMutation object of the builder.
func (au *AssessmentUpdate) Mutation() *AssessmentMutation {
	return au.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (au *AssessmentUpdate) ClearOwner() *AssessmentUpdate {
	au.mutation.ClearOwner()
	return au
}

// ClearUsers clears all "users" edges to the User entity.
func (au *AssessmentUpdate) ClearUsers() *AssessmentUpdate {
	au.mutation.ClearUsers()
	return au
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (au *AssessmentUpdate) RemoveUserIDs(ids ...string) *AssessmentUpdate {
	au.mutation.RemoveUserIDs(ids...)
	return au
}

// RemoveUsers removes "users" edges to User entities.
func (au *AssessmentUpdate) RemoveUsers(u ...*User) *AssessmentUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.RemoveUserIDs(ids...)
}

// ClearAssessmentResponses clears all "assessment_responses" edges to the AssessmentResponse entity.
func (au *AssessmentUpdate) ClearAssessmentResponses() *AssessmentUpdate {
	au.mutation.ClearAssessmentResponses()
	return au
}

// RemoveAssessmentResponseIDs removes the "assessment_responses" edge to AssessmentResponse entities by IDs.
func (au *AssessmentUpdate) RemoveAssessmentResponseIDs(ids ...string) *AssessmentUpdate {
	au.mutation.RemoveAssessmentResponseIDs(ids...)
	return au
}

// RemoveAssessmentResponses removes "assessment_responses" edges to AssessmentResponse entities.
func (au *AssessmentUpdate) RemoveAssessmentResponses(a ...*AssessmentResponse) *AssessmentUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAssessmentResponseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssessmentUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssessmentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssessmentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssessmentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AssessmentUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		if assessment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized assessment.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := assessment.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AssessmentUpdate) check() error {
	if v, ok := au.mutation.OwnerID(); ok {
		if err := assessment.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Assessment.owner_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.Name(); ok {
		if err := assessment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Assessment.name": %w`, err)}
		}
	}
	if v, ok := au.mutation.AssessmentType(); ok {
		if err := assessment.AssessmentTypeValidator(v); err != nil {
			return &ValidationError{Name: "assessment_type", err: fmt.Errorf(`generated: validator failed for field "Assessment.assessment_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AssessmentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssessmentUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AssessmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(assessment.Table, assessment.Columns, sqlgraph.NewFieldSpec(assessment.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if au.mutation.CreatedAtCleared() {
		_spec.ClearField(assessment.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(assessment.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(assessment.FieldUpdatedAt, field.TypeTime)
	}
	if au.mutation.CreatedByCleared() {
		_spec.ClearField(assessment.FieldCreatedBy, field.TypeString)
	}
	if value, ok := au.mutation.UpdatedBy(); ok {
		_spec.SetField(assessment.FieldUpdatedBy, field.TypeString, value)
	}
	if au.mutation.UpdatedByCleared() {
		_spec.ClearField(assessment.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(assessment.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(assessment.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.DeletedBy(); ok {
		_spec.SetField(assessment.FieldDeletedBy, field.TypeString, value)
	}
	if au.mutation.DeletedByCleared() {
		_spec.ClearField(assessment.FieldDeletedBy, field.TypeString)
	}
	if value, ok := au.mutation.Tags(); ok {
		_spec.SetField(assessment.FieldTags, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assessment.FieldTags, value)
		})
	}
	if au.mutation.TagsCleared() {
		_spec.ClearField(assessment.FieldTags, field.TypeJSON)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(assessment.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.AssessmentType(); ok {
		_spec.SetField(assessment.FieldAssessmentType, field.TypeEnum, value)
	}
	if value, ok := au.mutation.QuestionnaireID(); ok {
		_spec.SetField(assessment.FieldQuestionnaireID, field.TypeString, value)
	}
	if au.mutation.QuestionnaireIDCleared() {
		_spec.ClearField(assessment.FieldQuestionnaireID, field.TypeString)
	}
	if au.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assessment.OwnerTable,
			Columns: []string{assessment.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Assessment
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assessment.OwnerTable,
			Columns: []string{assessment.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Assessment
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assessment.UsersTable,
			Columns: assessment.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.AssessmentUsers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedUsersIDs(); len(nodes) > 0 && !au.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assessment.UsersTable,
			Columns: assessment.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.AssessmentUsers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assessment.UsersTable,
			Columns: assessment.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.AssessmentUsers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AssessmentResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assessment.AssessmentResponsesTable,
			Columns: []string{assessment.AssessmentResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assessmentresponse.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.AssessmentResponse
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAssessmentResponsesIDs(); len(nodes) > 0 && !au.mutation.AssessmentResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assessment.AssessmentResponsesTable,
			Columns: []string{assessment.AssessmentResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assessmentresponse.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.AssessmentResponse
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AssessmentResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assessment.AssessmentResponsesTable,
			Columns: []string{assessment.AssessmentResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assessmentresponse.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.AssessmentResponse
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = au.schemaConfig.Assessment
	ctx = internal.NewSchemaConfigContext(ctx, au.schemaConfig)
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assessment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AssessmentUpdateOne is the builder for updating a single Assessment entity.
type AssessmentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssessmentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AssessmentUpdateOne) SetUpdatedAt(t time.Time) *AssessmentUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AssessmentUpdateOne) ClearUpdatedAt() *AssessmentUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetUpdatedBy sets the "updated_by" field.
func (auo *AssessmentUpdateOne) SetUpdatedBy(s string) *AssessmentUpdateOne {
	auo.mutation.SetUpdatedBy(s)
	return auo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auo *AssessmentUpdateOne) SetNillableUpdatedBy(s *string) *AssessmentUpdateOne {
	if s != nil {
		auo.SetUpdatedBy(*s)
	}
	return auo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (auo *AssessmentUpdateOne) ClearUpdatedBy() *AssessmentUpdateOne {
	auo.mutation.ClearUpdatedBy()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AssessmentUpdateOne) SetDeletedAt(t time.Time) *AssessmentUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AssessmentUpdateOne) SetNillableDeletedAt(t *time.Time) *AssessmentUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AssessmentUpdateOne) ClearDeletedAt() *AssessmentUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetDeletedBy sets the "deleted_by" field.
func (auo *AssessmentUpdateOne) SetDeletedBy(s string) *AssessmentUpdateOne {
	auo.mutation.SetDeletedBy(s)
	return auo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (auo *AssessmentUpdateOne) SetNillableDeletedBy(s *string) *AssessmentUpdateOne {
	if s != nil {
		auo.SetDeletedBy(*s)
	}
	return auo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (auo *AssessmentUpdateOne) ClearDeletedBy() *AssessmentUpdateOne {
	auo.mutation.ClearDeletedBy()
	return auo
}

// SetTags sets the "tags" field.
func (auo *AssessmentUpdateOne) SetTags(s []string) *AssessmentUpdateOne {
	auo.mutation.SetTags(s)
	return auo
}

// AppendTags appends s to the "tags" field.
func (auo *AssessmentUpdateOne) AppendTags(s []string) *AssessmentUpdateOne {
	auo.mutation.AppendTags(s)
	return auo
}

// ClearTags clears the value of the "tags" field.
func (auo *AssessmentUpdateOne) ClearTags() *AssessmentUpdateOne {
	auo.mutation.ClearTags()
	return auo
}

// SetOwnerID sets the "owner_id" field.
func (auo *AssessmentUpdateOne) SetOwnerID(s string) *AssessmentUpdateOne {
	auo.mutation.SetOwnerID(s)
	return auo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (auo *AssessmentUpdateOne) SetNillableOwnerID(s *string) *AssessmentUpdateOne {
	if s != nil {
		auo.SetOwnerID(*s)
	}
	return auo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (auo *AssessmentUpdateOne) ClearOwnerID() *AssessmentUpdateOne {
	auo.mutation.ClearOwnerID()
	return auo
}

// SetName sets the "name" field.
func (auo *AssessmentUpdateOne) SetName(s string) *AssessmentUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AssessmentUpdateOne) SetNillableName(s *string) *AssessmentUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetAssessmentType sets the "assessment_type" field.
func (auo *AssessmentUpdateOne) SetAssessmentType(et enums.AssessmentType) *AssessmentUpdateOne {
	auo.mutation.SetAssessmentType(et)
	return auo
}

// SetNillableAssessmentType sets the "assessment_type" field if the given value is not nil.
func (auo *AssessmentUpdateOne) SetNillableAssessmentType(et *enums.AssessmentType) *AssessmentUpdateOne {
	if et != nil {
		auo.SetAssessmentType(*et)
	}
	return auo
}

// SetQuestionnaireID sets the "questionnaire_id" field.
func (auo *AssessmentUpdateOne) SetQuestionnaireID(s string) *AssessmentUpdateOne {
	auo.mutation.SetQuestionnaireID(s)
	return auo
}

// SetNillableQuestionnaireID sets the "questionnaire_id" field if the given value is not nil.
func (auo *AssessmentUpdateOne) SetNillableQuestionnaireID(s *string) *AssessmentUpdateOne {
	if s != nil {
		auo.SetQuestionnaireID(*s)
	}
	return auo
}

// ClearQuestionnaireID clears the value of the "questionnaire_id" field.
func (auo *AssessmentUpdateOne) ClearQuestionnaireID() *AssessmentUpdateOne {
	auo.mutation.ClearQuestionnaireID()
	return auo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (auo *AssessmentUpdateOne) SetOwner(o *Organization) *AssessmentUpdateOne {
	return auo.SetOwnerID(o.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (auo *AssessmentUpdateOne) AddUserIDs(ids ...string) *AssessmentUpdateOne {
	auo.mutation.AddUserIDs(ids...)
	return auo
}

// AddUsers adds the "users" edges to the User entity.
func (auo *AssessmentUpdateOne) AddUsers(u ...*User) *AssessmentUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.AddUserIDs(ids...)
}

// AddAssessmentResponseIDs adds the "assessment_responses" edge to the AssessmentResponse entity by IDs.
func (auo *AssessmentUpdateOne) AddAssessmentResponseIDs(ids ...string) *AssessmentUpdateOne {
	auo.mutation.AddAssessmentResponseIDs(ids...)
	return auo
}

// AddAssessmentResponses adds the "assessment_responses" edges to the AssessmentResponse entity.
func (auo *AssessmentUpdateOne) AddAssessmentResponses(a ...*AssessmentResponse) *AssessmentUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAssessmentResponseIDs(ids...)
}

// Mutation returns the AssessmentMutation object of the builder.
func (auo *AssessmentUpdateOne) Mutation() *AssessmentMutation {
	return auo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (auo *AssessmentUpdateOne) ClearOwner() *AssessmentUpdateOne {
	auo.mutation.ClearOwner()
	return auo
}

// ClearUsers clears all "users" edges to the User entity.
func (auo *AssessmentUpdateOne) ClearUsers() *AssessmentUpdateOne {
	auo.mutation.ClearUsers()
	return auo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (auo *AssessmentUpdateOne) RemoveUserIDs(ids ...string) *AssessmentUpdateOne {
	auo.mutation.RemoveUserIDs(ids...)
	return auo
}

// RemoveUsers removes "users" edges to User entities.
func (auo *AssessmentUpdateOne) RemoveUsers(u ...*User) *AssessmentUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.RemoveUserIDs(ids...)
}

// ClearAssessmentResponses clears all "assessment_responses" edges to the AssessmentResponse entity.
func (auo *AssessmentUpdateOne) ClearAssessmentResponses() *AssessmentUpdateOne {
	auo.mutation.ClearAssessmentResponses()
	return auo
}

// RemoveAssessmentResponseIDs removes the "assessment_responses" edge to AssessmentResponse entities by IDs.
func (auo *AssessmentUpdateOne) RemoveAssessmentResponseIDs(ids ...string) *AssessmentUpdateOne {
	auo.mutation.RemoveAssessmentResponseIDs(ids...)
	return auo
}

// RemoveAssessmentResponses removes "assessment_responses" edges to AssessmentResponse entities.
func (auo *AssessmentUpdateOne) RemoveAssessmentResponses(a ...*AssessmentResponse) *AssessmentUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAssessmentResponseIDs(ids...)
}

// Where appends a list predicates to the AssessmentUpdate builder.
func (auo *AssessmentUpdateOne) Where(ps ...predicate.Assessment) *AssessmentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssessmentUpdateOne) Select(field string, fields ...string) *AssessmentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Assessment entity.
func (auo *AssessmentUpdateOne) Save(ctx context.Context) (*Assessment, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssessmentUpdateOne) SaveX(ctx context.Context) *Assessment {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssessmentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssessmentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AssessmentUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		if assessment.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized assessment.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := assessment.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AssessmentUpdateOne) check() error {
	if v, ok := auo.mutation.OwnerID(); ok {
		if err := assessment.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Assessment.owner_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Name(); ok {
		if err := assessment.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Assessment.name": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AssessmentType(); ok {
		if err := assessment.AssessmentTypeValidator(v); err != nil {
			return &ValidationError{Name: "assessment_type", err: fmt.Errorf(`generated: validator failed for field "Assessment.assessment_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AssessmentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssessmentUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AssessmentUpdateOne) sqlSave(ctx context.Context) (_node *Assessment, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(assessment.Table, assessment.Columns, sqlgraph.NewFieldSpec(assessment.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Assessment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assessment.FieldID)
		for _, f := range fields {
			if !assessment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != assessment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.ClearField(assessment.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(assessment.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(assessment.FieldUpdatedAt, field.TypeTime)
	}
	if auo.mutation.CreatedByCleared() {
		_spec.ClearField(assessment.FieldCreatedBy, field.TypeString)
	}
	if value, ok := auo.mutation.UpdatedBy(); ok {
		_spec.SetField(assessment.FieldUpdatedBy, field.TypeString, value)
	}
	if auo.mutation.UpdatedByCleared() {
		_spec.ClearField(assessment.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(assessment.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(assessment.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.DeletedBy(); ok {
		_spec.SetField(assessment.FieldDeletedBy, field.TypeString, value)
	}
	if auo.mutation.DeletedByCleared() {
		_spec.ClearField(assessment.FieldDeletedBy, field.TypeString)
	}
	if value, ok := auo.mutation.Tags(); ok {
		_spec.SetField(assessment.FieldTags, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, assessment.FieldTags, value)
		})
	}
	if auo.mutation.TagsCleared() {
		_spec.ClearField(assessment.FieldTags, field.TypeJSON)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(assessment.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.AssessmentType(); ok {
		_spec.SetField(assessment.FieldAssessmentType, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.QuestionnaireID(); ok {
		_spec.SetField(assessment.FieldQuestionnaireID, field.TypeString, value)
	}
	if auo.mutation.QuestionnaireIDCleared() {
		_spec.ClearField(assessment.FieldQuestionnaireID, field.TypeString)
	}
	if auo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assessment.OwnerTable,
			Columns: []string{assessment.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Assessment
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   assessment.OwnerTable,
			Columns: []string{assessment.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Assessment
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assessment.UsersTable,
			Columns: assessment.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.AssessmentUsers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !auo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assessment.UsersTable,
			Columns: assessment.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.AssessmentUsers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   assessment.UsersTable,
			Columns: assessment.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.AssessmentUsers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AssessmentResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assessment.AssessmentResponsesTable,
			Columns: []string{assessment.AssessmentResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assessmentresponse.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.AssessmentResponse
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAssessmentResponsesIDs(); len(nodes) > 0 && !auo.mutation.AssessmentResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assessment.AssessmentResponsesTable,
			Columns: []string{assessment.AssessmentResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assessmentresponse.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.AssessmentResponse
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AssessmentResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   assessment.AssessmentResponsesTable,
			Columns: []string{assessment.AssessmentResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(assessmentresponse.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.AssessmentResponse
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = auo.schemaConfig.Assessment
	ctx = internal.NewSchemaConfigContext(ctx, auo.schemaConfig)
	_spec.AddModifiers(auo.modifiers...)
	_node = &Assessment{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{assessment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
