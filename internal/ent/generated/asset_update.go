// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// AssetUpdate is the builder for updating Asset entities.
type AssetUpdate struct {
	config
	hooks     []Hook
	mutation  *AssetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AssetUpdate builder.
func (au *AssetUpdate) Where(ps ...predicate.Asset) *AssetUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AssetUpdate) SetUpdatedAt(t time.Time) *AssetUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AssetUpdate) ClearUpdatedAt() *AssetUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetUpdatedBy sets the "updated_by" field.
func (au *AssetUpdate) SetUpdatedBy(s string) *AssetUpdate {
	au.mutation.SetUpdatedBy(s)
	return au
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (au *AssetUpdate) SetNillableUpdatedBy(s *string) *AssetUpdate {
	if s != nil {
		au.SetUpdatedBy(*s)
	}
	return au
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (au *AssetUpdate) ClearUpdatedBy() *AssetUpdate {
	au.mutation.ClearUpdatedBy()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AssetUpdate) SetDeletedAt(t time.Time) *AssetUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AssetUpdate) SetNillableDeletedAt(t *time.Time) *AssetUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AssetUpdate) ClearDeletedAt() *AssetUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetDeletedBy sets the "deleted_by" field.
func (au *AssetUpdate) SetDeletedBy(s string) *AssetUpdate {
	au.mutation.SetDeletedBy(s)
	return au
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (au *AssetUpdate) SetNillableDeletedBy(s *string) *AssetUpdate {
	if s != nil {
		au.SetDeletedBy(*s)
	}
	return au
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (au *AssetUpdate) ClearDeletedBy() *AssetUpdate {
	au.mutation.ClearDeletedBy()
	return au
}

// SetTags sets the "tags" field.
func (au *AssetUpdate) SetTags(s []string) *AssetUpdate {
	au.mutation.SetTags(s)
	return au
}

// AppendTags appends s to the "tags" field.
func (au *AssetUpdate) AppendTags(s []string) *AssetUpdate {
	au.mutation.AppendTags(s)
	return au
}

// ClearTags clears the value of the "tags" field.
func (au *AssetUpdate) ClearTags() *AssetUpdate {
	au.mutation.ClearTags()
	return au
}

// SetOwnerID sets the "owner_id" field.
func (au *AssetUpdate) SetOwnerID(s string) *AssetUpdate {
	au.mutation.SetOwnerID(s)
	return au
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (au *AssetUpdate) SetNillableOwnerID(s *string) *AssetUpdate {
	if s != nil {
		au.SetOwnerID(*s)
	}
	return au
}

// ClearOwnerID clears the value of the "owner_id" field.
func (au *AssetUpdate) ClearOwnerID() *AssetUpdate {
	au.mutation.ClearOwnerID()
	return au
}

// SetAssetType sets the "asset_type" field.
func (au *AssetUpdate) SetAssetType(et enums.AssetType) *AssetUpdate {
	au.mutation.SetAssetType(et)
	return au
}

// SetNillableAssetType sets the "asset_type" field if the given value is not nil.
func (au *AssetUpdate) SetNillableAssetType(et *enums.AssetType) *AssetUpdate {
	if et != nil {
		au.SetAssetType(*et)
	}
	return au
}

// SetName sets the "name" field.
func (au *AssetUpdate) SetName(s string) *AssetUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *AssetUpdate) SetNillableName(s *string) *AssetUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetDescription sets the "description" field.
func (au *AssetUpdate) SetDescription(s string) *AssetUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AssetUpdate) SetNillableDescription(s *string) *AssetUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AssetUpdate) ClearDescription() *AssetUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetIdentifier sets the "identifier" field.
func (au *AssetUpdate) SetIdentifier(s string) *AssetUpdate {
	au.mutation.SetIdentifier(s)
	return au
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (au *AssetUpdate) SetNillableIdentifier(s *string) *AssetUpdate {
	if s != nil {
		au.SetIdentifier(*s)
	}
	return au
}

// ClearIdentifier clears the value of the "identifier" field.
func (au *AssetUpdate) ClearIdentifier() *AssetUpdate {
	au.mutation.ClearIdentifier()
	return au
}

// SetWebsite sets the "website" field.
func (au *AssetUpdate) SetWebsite(s string) *AssetUpdate {
	au.mutation.SetWebsite(s)
	return au
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (au *AssetUpdate) SetNillableWebsite(s *string) *AssetUpdate {
	if s != nil {
		au.SetWebsite(*s)
	}
	return au
}

// ClearWebsite clears the value of the "website" field.
func (au *AssetUpdate) ClearWebsite() *AssetUpdate {
	au.mutation.ClearWebsite()
	return au
}

// SetCpe sets the "cpe" field.
func (au *AssetUpdate) SetCpe(s string) *AssetUpdate {
	au.mutation.SetCpe(s)
	return au
}

// SetNillableCpe sets the "cpe" field if the given value is not nil.
func (au *AssetUpdate) SetNillableCpe(s *string) *AssetUpdate {
	if s != nil {
		au.SetCpe(*s)
	}
	return au
}

// ClearCpe clears the value of the "cpe" field.
func (au *AssetUpdate) ClearCpe() *AssetUpdate {
	au.mutation.ClearCpe()
	return au
}

// SetCategories sets the "categories" field.
func (au *AssetUpdate) SetCategories(s []string) *AssetUpdate {
	au.mutation.SetCategories(s)
	return au
}

// AppendCategories appends s to the "categories" field.
func (au *AssetUpdate) AppendCategories(s []string) *AssetUpdate {
	au.mutation.AppendCategories(s)
	return au
}

// ClearCategories clears the value of the "categories" field.
func (au *AssetUpdate) ClearCategories() *AssetUpdate {
	au.mutation.ClearCategories()
	return au
}

// SetOwner sets the "owner" edge to the Organization entity.
func (au *AssetUpdate) SetOwner(o *Organization) *AssetUpdate {
	return au.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (au *AssetUpdate) AddBlockedGroupIDs(ids ...string) *AssetUpdate {
	au.mutation.AddBlockedGroupIDs(ids...)
	return au
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (au *AssetUpdate) AddBlockedGroups(g ...*Group) *AssetUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return au.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (au *AssetUpdate) AddEditorIDs(ids ...string) *AssetUpdate {
	au.mutation.AddEditorIDs(ids...)
	return au
}

// AddEditors adds the "editors" edges to the Group entity.
func (au *AssetUpdate) AddEditors(g ...*Group) *AssetUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return au.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (au *AssetUpdate) AddViewerIDs(ids ...string) *AssetUpdate {
	au.mutation.AddViewerIDs(ids...)
	return au
}

// AddViewers adds the "viewers" edges to the Group entity.
func (au *AssetUpdate) AddViewers(g ...*Group) *AssetUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return au.AddViewerIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (au *AssetUpdate) AddScanIDs(ids ...string) *AssetUpdate {
	au.mutation.AddScanIDs(ids...)
	return au
}

// AddScans adds the "scans" edges to the Scan entity.
func (au *AssetUpdate) AddScans(s ...*Scan) *AssetUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddScanIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (au *AssetUpdate) AddEntityIDs(ids ...string) *AssetUpdate {
	au.mutation.AddEntityIDs(ids...)
	return au
}

// AddEntities adds the "entities" edges to the Entity entity.
func (au *AssetUpdate) AddEntities(e ...*Entity) *AssetUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.AddEntityIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (au *AssetUpdate) AddControlIDs(ids ...string) *AssetUpdate {
	au.mutation.AddControlIDs(ids...)
	return au
}

// AddControls adds the "controls" edges to the Control entity.
func (au *AssetUpdate) AddControls(c ...*Control) *AssetUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddControlIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (au *AssetUpdate) Mutation() *AssetMutation {
	return au.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (au *AssetUpdate) ClearOwner() *AssetUpdate {
	au.mutation.ClearOwner()
	return au
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (au *AssetUpdate) ClearBlockedGroups() *AssetUpdate {
	au.mutation.ClearBlockedGroups()
	return au
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (au *AssetUpdate) RemoveBlockedGroupIDs(ids ...string) *AssetUpdate {
	au.mutation.RemoveBlockedGroupIDs(ids...)
	return au
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (au *AssetUpdate) RemoveBlockedGroups(g ...*Group) *AssetUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return au.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (au *AssetUpdate) ClearEditors() *AssetUpdate {
	au.mutation.ClearEditors()
	return au
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (au *AssetUpdate) RemoveEditorIDs(ids ...string) *AssetUpdate {
	au.mutation.RemoveEditorIDs(ids...)
	return au
}

// RemoveEditors removes "editors" edges to Group entities.
func (au *AssetUpdate) RemoveEditors(g ...*Group) *AssetUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return au.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (au *AssetUpdate) ClearViewers() *AssetUpdate {
	au.mutation.ClearViewers()
	return au
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (au *AssetUpdate) RemoveViewerIDs(ids ...string) *AssetUpdate {
	au.mutation.RemoveViewerIDs(ids...)
	return au
}

// RemoveViewers removes "viewers" edges to Group entities.
func (au *AssetUpdate) RemoveViewers(g ...*Group) *AssetUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return au.RemoveViewerIDs(ids...)
}

// ClearScans clears all "scans" edges to the Scan entity.
func (au *AssetUpdate) ClearScans() *AssetUpdate {
	au.mutation.ClearScans()
	return au
}

// RemoveScanIDs removes the "scans" edge to Scan entities by IDs.
func (au *AssetUpdate) RemoveScanIDs(ids ...string) *AssetUpdate {
	au.mutation.RemoveScanIDs(ids...)
	return au
}

// RemoveScans removes "scans" edges to Scan entities.
func (au *AssetUpdate) RemoveScans(s ...*Scan) *AssetUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveScanIDs(ids...)
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (au *AssetUpdate) ClearEntities() *AssetUpdate {
	au.mutation.ClearEntities()
	return au
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (au *AssetUpdate) RemoveEntityIDs(ids ...string) *AssetUpdate {
	au.mutation.RemoveEntityIDs(ids...)
	return au
}

// RemoveEntities removes "entities" edges to Entity entities.
func (au *AssetUpdate) RemoveEntities(e ...*Entity) *AssetUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return au.RemoveEntityIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (au *AssetUpdate) ClearControls() *AssetUpdate {
	au.mutation.ClearControls()
	return au
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (au *AssetUpdate) RemoveControlIDs(ids ...string) *AssetUpdate {
	au.mutation.RemoveControlIDs(ids...)
	return au
}

// RemoveControls removes "controls" edges to Control entities.
func (au *AssetUpdate) RemoveControls(c ...*Control) *AssetUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveControlIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AssetUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AssetUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AssetUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AssetUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AssetUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		if asset.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized asset.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := asset.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AssetUpdate) check() error {
	if v, ok := au.mutation.OwnerID(); ok {
		if err := asset.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Asset.owner_id": %w`, err)}
		}
	}
	if v, ok := au.mutation.AssetType(); ok {
		if err := asset.AssetTypeValidator(v); err != nil {
			return &ValidationError{Name: "asset_type", err: fmt.Errorf(`generated: validator failed for field "Asset.asset_type": %w`, err)}
		}
	}
	if v, ok := au.mutation.Name(); ok {
		if err := asset.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Asset.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AssetUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AssetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if au.mutation.CreatedAtCleared() {
		_spec.ClearField(asset.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(asset.FieldUpdatedAt, field.TypeTime)
	}
	if au.mutation.CreatedByCleared() {
		_spec.ClearField(asset.FieldCreatedBy, field.TypeString)
	}
	if value, ok := au.mutation.UpdatedBy(); ok {
		_spec.SetField(asset.FieldUpdatedBy, field.TypeString, value)
	}
	if au.mutation.UpdatedByCleared() {
		_spec.ClearField(asset.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(asset.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(asset.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.DeletedBy(); ok {
		_spec.SetField(asset.FieldDeletedBy, field.TypeString, value)
	}
	if au.mutation.DeletedByCleared() {
		_spec.ClearField(asset.FieldDeletedBy, field.TypeString)
	}
	if value, ok := au.mutation.Tags(); ok {
		_spec.SetField(asset.FieldTags, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, asset.FieldTags, value)
		})
	}
	if au.mutation.TagsCleared() {
		_spec.ClearField(asset.FieldTags, field.TypeJSON)
	}
	if value, ok := au.mutation.AssetType(); ok {
		_spec.SetField(asset.FieldAssetType, field.TypeEnum, value)
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(asset.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(asset.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.Identifier(); ok {
		_spec.SetField(asset.FieldIdentifier, field.TypeString, value)
	}
	if au.mutation.IdentifierCleared() {
		_spec.ClearField(asset.FieldIdentifier, field.TypeString)
	}
	if value, ok := au.mutation.Website(); ok {
		_spec.SetField(asset.FieldWebsite, field.TypeString, value)
	}
	if au.mutation.WebsiteCleared() {
		_spec.ClearField(asset.FieldWebsite, field.TypeString)
	}
	if value, ok := au.mutation.Cpe(); ok {
		_spec.SetField(asset.FieldCpe, field.TypeString, value)
	}
	if au.mutation.CpeCleared() {
		_spec.ClearField(asset.FieldCpe, field.TypeString)
	}
	if value, ok := au.mutation.Categories(); ok {
		_spec.SetField(asset.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := au.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, asset.FieldCategories, value)
		})
	}
	if au.mutation.CategoriesCleared() {
		_spec.ClearField(asset.FieldCategories, field.TypeJSON)
	}
	if au.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.OwnerTable,
			Columns: []string{asset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Asset
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.OwnerTable,
			Columns: []string{asset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Asset
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.BlockedGroupsTable,
			Columns: []string{asset.BlockedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !au.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.BlockedGroupsTable,
			Columns: []string{asset.BlockedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.BlockedGroupsTable,
			Columns: []string{asset.BlockedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EditorsTable,
			Columns: []string{asset.EditorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !au.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EditorsTable,
			Columns: []string{asset.EditorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EditorsTable,
			Columns: []string{asset.EditorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ViewersTable,
			Columns: []string{asset.ViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedViewersIDs(); len(nodes) > 0 && !au.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ViewersTable,
			Columns: []string{asset.ViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ViewersTable,
			Columns: []string{asset.ViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ScansTable,
			Columns: asset.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.ScanAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedScansIDs(); len(nodes) > 0 && !au.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ScansTable,
			Columns: asset.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ScansTable,
			Columns: asset.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.EntitiesTable,
			Columns: asset.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.EntityAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !au.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.EntitiesTable,
			Columns: asset.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.EntityAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.EntitiesTable,
			Columns: asset.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.EntityAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ControlsTable,
			Columns: asset.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.ControlAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedControlsIDs(); len(nodes) > 0 && !au.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ControlsTable,
			Columns: asset.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.ControlAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ControlsTable,
			Columns: asset.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = au.schemaConfig.ControlAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = au.schemaConfig.Asset
	ctx = internal.NewSchemaConfigContext(ctx, au.schemaConfig)
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AssetUpdateOne is the builder for updating a single Asset entity.
type AssetUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AssetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AssetUpdateOne) SetUpdatedAt(t time.Time) *AssetUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AssetUpdateOne) ClearUpdatedAt() *AssetUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetUpdatedBy sets the "updated_by" field.
func (auo *AssetUpdateOne) SetUpdatedBy(s string) *AssetUpdateOne {
	auo.mutation.SetUpdatedBy(s)
	return auo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableUpdatedBy(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetUpdatedBy(*s)
	}
	return auo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (auo *AssetUpdateOne) ClearUpdatedBy() *AssetUpdateOne {
	auo.mutation.ClearUpdatedBy()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AssetUpdateOne) SetDeletedAt(t time.Time) *AssetUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableDeletedAt(t *time.Time) *AssetUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AssetUpdateOne) ClearDeletedAt() *AssetUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetDeletedBy sets the "deleted_by" field.
func (auo *AssetUpdateOne) SetDeletedBy(s string) *AssetUpdateOne {
	auo.mutation.SetDeletedBy(s)
	return auo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableDeletedBy(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetDeletedBy(*s)
	}
	return auo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (auo *AssetUpdateOne) ClearDeletedBy() *AssetUpdateOne {
	auo.mutation.ClearDeletedBy()
	return auo
}

// SetTags sets the "tags" field.
func (auo *AssetUpdateOne) SetTags(s []string) *AssetUpdateOne {
	auo.mutation.SetTags(s)
	return auo
}

// AppendTags appends s to the "tags" field.
func (auo *AssetUpdateOne) AppendTags(s []string) *AssetUpdateOne {
	auo.mutation.AppendTags(s)
	return auo
}

// ClearTags clears the value of the "tags" field.
func (auo *AssetUpdateOne) ClearTags() *AssetUpdateOne {
	auo.mutation.ClearTags()
	return auo
}

// SetOwnerID sets the "owner_id" field.
func (auo *AssetUpdateOne) SetOwnerID(s string) *AssetUpdateOne {
	auo.mutation.SetOwnerID(s)
	return auo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableOwnerID(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetOwnerID(*s)
	}
	return auo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (auo *AssetUpdateOne) ClearOwnerID() *AssetUpdateOne {
	auo.mutation.ClearOwnerID()
	return auo
}

// SetAssetType sets the "asset_type" field.
func (auo *AssetUpdateOne) SetAssetType(et enums.AssetType) *AssetUpdateOne {
	auo.mutation.SetAssetType(et)
	return auo
}

// SetNillableAssetType sets the "asset_type" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableAssetType(et *enums.AssetType) *AssetUpdateOne {
	if et != nil {
		auo.SetAssetType(*et)
	}
	return auo
}

// SetName sets the "name" field.
func (auo *AssetUpdateOne) SetName(s string) *AssetUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableName(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetDescription sets the "description" field.
func (auo *AssetUpdateOne) SetDescription(s string) *AssetUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableDescription(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AssetUpdateOne) ClearDescription() *AssetUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetIdentifier sets the "identifier" field.
func (auo *AssetUpdateOne) SetIdentifier(s string) *AssetUpdateOne {
	auo.mutation.SetIdentifier(s)
	return auo
}

// SetNillableIdentifier sets the "identifier" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableIdentifier(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetIdentifier(*s)
	}
	return auo
}

// ClearIdentifier clears the value of the "identifier" field.
func (auo *AssetUpdateOne) ClearIdentifier() *AssetUpdateOne {
	auo.mutation.ClearIdentifier()
	return auo
}

// SetWebsite sets the "website" field.
func (auo *AssetUpdateOne) SetWebsite(s string) *AssetUpdateOne {
	auo.mutation.SetWebsite(s)
	return auo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableWebsite(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetWebsite(*s)
	}
	return auo
}

// ClearWebsite clears the value of the "website" field.
func (auo *AssetUpdateOne) ClearWebsite() *AssetUpdateOne {
	auo.mutation.ClearWebsite()
	return auo
}

// SetCpe sets the "cpe" field.
func (auo *AssetUpdateOne) SetCpe(s string) *AssetUpdateOne {
	auo.mutation.SetCpe(s)
	return auo
}

// SetNillableCpe sets the "cpe" field if the given value is not nil.
func (auo *AssetUpdateOne) SetNillableCpe(s *string) *AssetUpdateOne {
	if s != nil {
		auo.SetCpe(*s)
	}
	return auo
}

// ClearCpe clears the value of the "cpe" field.
func (auo *AssetUpdateOne) ClearCpe() *AssetUpdateOne {
	auo.mutation.ClearCpe()
	return auo
}

// SetCategories sets the "categories" field.
func (auo *AssetUpdateOne) SetCategories(s []string) *AssetUpdateOne {
	auo.mutation.SetCategories(s)
	return auo
}

// AppendCategories appends s to the "categories" field.
func (auo *AssetUpdateOne) AppendCategories(s []string) *AssetUpdateOne {
	auo.mutation.AppendCategories(s)
	return auo
}

// ClearCategories clears the value of the "categories" field.
func (auo *AssetUpdateOne) ClearCategories() *AssetUpdateOne {
	auo.mutation.ClearCategories()
	return auo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (auo *AssetUpdateOne) SetOwner(o *Organization) *AssetUpdateOne {
	return auo.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (auo *AssetUpdateOne) AddBlockedGroupIDs(ids ...string) *AssetUpdateOne {
	auo.mutation.AddBlockedGroupIDs(ids...)
	return auo
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (auo *AssetUpdateOne) AddBlockedGroups(g ...*Group) *AssetUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return auo.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (auo *AssetUpdateOne) AddEditorIDs(ids ...string) *AssetUpdateOne {
	auo.mutation.AddEditorIDs(ids...)
	return auo
}

// AddEditors adds the "editors" edges to the Group entity.
func (auo *AssetUpdateOne) AddEditors(g ...*Group) *AssetUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return auo.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (auo *AssetUpdateOne) AddViewerIDs(ids ...string) *AssetUpdateOne {
	auo.mutation.AddViewerIDs(ids...)
	return auo
}

// AddViewers adds the "viewers" edges to the Group entity.
func (auo *AssetUpdateOne) AddViewers(g ...*Group) *AssetUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return auo.AddViewerIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (auo *AssetUpdateOne) AddScanIDs(ids ...string) *AssetUpdateOne {
	auo.mutation.AddScanIDs(ids...)
	return auo
}

// AddScans adds the "scans" edges to the Scan entity.
func (auo *AssetUpdateOne) AddScans(s ...*Scan) *AssetUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddScanIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (auo *AssetUpdateOne) AddEntityIDs(ids ...string) *AssetUpdateOne {
	auo.mutation.AddEntityIDs(ids...)
	return auo
}

// AddEntities adds the "entities" edges to the Entity entity.
func (auo *AssetUpdateOne) AddEntities(e ...*Entity) *AssetUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.AddEntityIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (auo *AssetUpdateOne) AddControlIDs(ids ...string) *AssetUpdateOne {
	auo.mutation.AddControlIDs(ids...)
	return auo
}

// AddControls adds the "controls" edges to the Control entity.
func (auo *AssetUpdateOne) AddControls(c ...*Control) *AssetUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddControlIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (auo *AssetUpdateOne) Mutation() *AssetMutation {
	return auo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (auo *AssetUpdateOne) ClearOwner() *AssetUpdateOne {
	auo.mutation.ClearOwner()
	return auo
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (auo *AssetUpdateOne) ClearBlockedGroups() *AssetUpdateOne {
	auo.mutation.ClearBlockedGroups()
	return auo
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (auo *AssetUpdateOne) RemoveBlockedGroupIDs(ids ...string) *AssetUpdateOne {
	auo.mutation.RemoveBlockedGroupIDs(ids...)
	return auo
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (auo *AssetUpdateOne) RemoveBlockedGroups(g ...*Group) *AssetUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return auo.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (auo *AssetUpdateOne) ClearEditors() *AssetUpdateOne {
	auo.mutation.ClearEditors()
	return auo
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (auo *AssetUpdateOne) RemoveEditorIDs(ids ...string) *AssetUpdateOne {
	auo.mutation.RemoveEditorIDs(ids...)
	return auo
}

// RemoveEditors removes "editors" edges to Group entities.
func (auo *AssetUpdateOne) RemoveEditors(g ...*Group) *AssetUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return auo.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (auo *AssetUpdateOne) ClearViewers() *AssetUpdateOne {
	auo.mutation.ClearViewers()
	return auo
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (auo *AssetUpdateOne) RemoveViewerIDs(ids ...string) *AssetUpdateOne {
	auo.mutation.RemoveViewerIDs(ids...)
	return auo
}

// RemoveViewers removes "viewers" edges to Group entities.
func (auo *AssetUpdateOne) RemoveViewers(g ...*Group) *AssetUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return auo.RemoveViewerIDs(ids...)
}

// ClearScans clears all "scans" edges to the Scan entity.
func (auo *AssetUpdateOne) ClearScans() *AssetUpdateOne {
	auo.mutation.ClearScans()
	return auo
}

// RemoveScanIDs removes the "scans" edge to Scan entities by IDs.
func (auo *AssetUpdateOne) RemoveScanIDs(ids ...string) *AssetUpdateOne {
	auo.mutation.RemoveScanIDs(ids...)
	return auo
}

// RemoveScans removes "scans" edges to Scan entities.
func (auo *AssetUpdateOne) RemoveScans(s ...*Scan) *AssetUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveScanIDs(ids...)
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (auo *AssetUpdateOne) ClearEntities() *AssetUpdateOne {
	auo.mutation.ClearEntities()
	return auo
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (auo *AssetUpdateOne) RemoveEntityIDs(ids ...string) *AssetUpdateOne {
	auo.mutation.RemoveEntityIDs(ids...)
	return auo
}

// RemoveEntities removes "entities" edges to Entity entities.
func (auo *AssetUpdateOne) RemoveEntities(e ...*Entity) *AssetUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return auo.RemoveEntityIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (auo *AssetUpdateOne) ClearControls() *AssetUpdateOne {
	auo.mutation.ClearControls()
	return auo
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (auo *AssetUpdateOne) RemoveControlIDs(ids ...string) *AssetUpdateOne {
	auo.mutation.RemoveControlIDs(ids...)
	return auo
}

// RemoveControls removes "controls" edges to Control entities.
func (auo *AssetUpdateOne) RemoveControls(c ...*Control) *AssetUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveControlIDs(ids...)
}

// Where appends a list predicates to the AssetUpdate builder.
func (auo *AssetUpdateOne) Where(ps ...predicate.Asset) *AssetUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AssetUpdateOne) Select(field string, fields ...string) *AssetUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Asset entity.
func (auo *AssetUpdateOne) Save(ctx context.Context) (*Asset, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AssetUpdateOne) SaveX(ctx context.Context) *Asset {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AssetUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AssetUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AssetUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		if asset.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized asset.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := asset.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AssetUpdateOne) check() error {
	if v, ok := auo.mutation.OwnerID(); ok {
		if err := asset.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Asset.owner_id": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AssetType(); ok {
		if err := asset.AssetTypeValidator(v); err != nil {
			return &ValidationError{Name: "asset_type", err: fmt.Errorf(`generated: validator failed for field "Asset.asset_type": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Name(); ok {
		if err := asset.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Asset.name": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AssetUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AssetUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AssetUpdateOne) sqlSave(ctx context.Context) (_node *Asset, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Asset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asset.FieldID)
		for _, f := range fields {
			if !asset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != asset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.ClearField(asset.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(asset.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(asset.FieldUpdatedAt, field.TypeTime)
	}
	if auo.mutation.CreatedByCleared() {
		_spec.ClearField(asset.FieldCreatedBy, field.TypeString)
	}
	if value, ok := auo.mutation.UpdatedBy(); ok {
		_spec.SetField(asset.FieldUpdatedBy, field.TypeString, value)
	}
	if auo.mutation.UpdatedByCleared() {
		_spec.ClearField(asset.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(asset.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(asset.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.DeletedBy(); ok {
		_spec.SetField(asset.FieldDeletedBy, field.TypeString, value)
	}
	if auo.mutation.DeletedByCleared() {
		_spec.ClearField(asset.FieldDeletedBy, field.TypeString)
	}
	if value, ok := auo.mutation.Tags(); ok {
		_spec.SetField(asset.FieldTags, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, asset.FieldTags, value)
		})
	}
	if auo.mutation.TagsCleared() {
		_spec.ClearField(asset.FieldTags, field.TypeJSON)
	}
	if value, ok := auo.mutation.AssetType(); ok {
		_spec.SetField(asset.FieldAssetType, field.TypeEnum, value)
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.SetField(asset.FieldName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(asset.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(asset.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.Identifier(); ok {
		_spec.SetField(asset.FieldIdentifier, field.TypeString, value)
	}
	if auo.mutation.IdentifierCleared() {
		_spec.ClearField(asset.FieldIdentifier, field.TypeString)
	}
	if value, ok := auo.mutation.Website(); ok {
		_spec.SetField(asset.FieldWebsite, field.TypeString, value)
	}
	if auo.mutation.WebsiteCleared() {
		_spec.ClearField(asset.FieldWebsite, field.TypeString)
	}
	if value, ok := auo.mutation.Cpe(); ok {
		_spec.SetField(asset.FieldCpe, field.TypeString, value)
	}
	if auo.mutation.CpeCleared() {
		_spec.ClearField(asset.FieldCpe, field.TypeString)
	}
	if value, ok := auo.mutation.Categories(); ok {
		_spec.SetField(asset.FieldCategories, field.TypeJSON, value)
	}
	if value, ok := auo.mutation.AppendedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, asset.FieldCategories, value)
		})
	}
	if auo.mutation.CategoriesCleared() {
		_spec.ClearField(asset.FieldCategories, field.TypeJSON)
	}
	if auo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.OwnerTable,
			Columns: []string{asset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Asset
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   asset.OwnerTable,
			Columns: []string{asset.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Asset
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.BlockedGroupsTable,
			Columns: []string{asset.BlockedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !auo.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.BlockedGroupsTable,
			Columns: []string{asset.BlockedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.BlockedGroupsTable,
			Columns: []string{asset.BlockedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EditorsTable,
			Columns: []string{asset.EditorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !auo.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EditorsTable,
			Columns: []string{asset.EditorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.EditorsTable,
			Columns: []string{asset.EditorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ViewersTable,
			Columns: []string{asset.ViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedViewersIDs(); len(nodes) > 0 && !auo.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ViewersTable,
			Columns: []string{asset.ViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.ViewersTable,
			Columns: []string{asset.ViewersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ScansTable,
			Columns: asset.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.ScanAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedScansIDs(); len(nodes) > 0 && !auo.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ScansTable,
			Columns: asset.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ScansTable,
			Columns: asset.ScansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.EntitiesTable,
			Columns: asset.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.EntityAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !auo.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.EntitiesTable,
			Columns: asset.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.EntityAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.EntitiesTable,
			Columns: asset.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.EntityAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ControlsTable,
			Columns: asset.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.ControlAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !auo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ControlsTable,
			Columns: asset.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.ControlAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   asset.ControlsTable,
			Columns: asset.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = auo.schemaConfig.ControlAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = auo.schemaConfig.Asset
	ctx = internal.NewSchemaConfigContext(ctx, auo.schemaConfig)
	_spec.AddModifiers(auo.modifiers...)
	_node = &Asset{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
