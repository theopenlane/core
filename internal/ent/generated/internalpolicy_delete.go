// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
)

// InternalPolicyDelete is the builder for deleting a InternalPolicy entity.
type InternalPolicyDelete struct {
	config
	hooks    []Hook
	mutation *InternalPolicyMutation
}

// Where appends a list predicates to the InternalPolicyDelete builder.
func (ipd *InternalPolicyDelete) Where(ps ...predicate.InternalPolicy) *InternalPolicyDelete {
	ipd.mutation.Where(ps...)
	return ipd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ipd *InternalPolicyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ipd.sqlExec, ipd.mutation, ipd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ipd *InternalPolicyDelete) ExecX(ctx context.Context) int {
	n, err := ipd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ipd *InternalPolicyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(internalpolicy.Table, sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString))
	_spec.Node.Schema = ipd.schemaConfig.InternalPolicy
	ctx = internal.NewSchemaConfigContext(ctx, ipd.schemaConfig)
	if ps := ipd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ipd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ipd.mutation.done = true
	return affected, err
}

// InternalPolicyDeleteOne is the builder for deleting a single InternalPolicy entity.
type InternalPolicyDeleteOne struct {
	ipd *InternalPolicyDelete
}

// Where appends a list predicates to the InternalPolicyDelete builder.
func (ipdo *InternalPolicyDeleteOne) Where(ps ...predicate.InternalPolicy) *InternalPolicyDeleteOne {
	ipdo.ipd.mutation.Where(ps...)
	return ipdo
}

// Exec executes the deletion query.
func (ipdo *InternalPolicyDeleteOne) Exec(ctx context.Context) error {
	n, err := ipdo.ipd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{internalpolicy.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ipdo *InternalPolicyDeleteOne) ExecX(ctx context.Context) {
	if err := ipdo.Exec(ctx); err != nil {
		panic(err)
	}
}
