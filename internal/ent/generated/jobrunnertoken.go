// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnertoken"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// JobRunnerToken is the model entity for the JobRunnerToken schema.
type JobRunnerToken struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// when the token expires
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// LastUsedAt holds the value of the "last_used_at" field.
	LastUsedAt *time.Time `json:"last_used_at,omitempty"`
	// whether the token is active
	IsActive bool `json:"is_active,omitempty"`
	// the reason the token was revoked
	RevokedReason *string `json:"revoked_reason,omitempty"`
	// the user who revoked the token
	RevokedBy *string `json:"revoked_by,omitempty"`
	// when the token was revoked
	RevokedAt *time.Time `json:"revoked_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobRunnerTokenQuery when eager-loading is set.
	Edges        JobRunnerTokenEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobRunnerTokenEdges holds the relations/edges for other nodes in the graph.
type JobRunnerTokenEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// JobRunners holds the value of the job_runners edge.
	JobRunners []*JobRunner `json:"job_runners,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedJobRunners map[string][]*JobRunner
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobRunnerTokenEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// JobRunnersOrErr returns the JobRunners value or an error if the edge
// was not loaded in eager-loading.
func (e JobRunnerTokenEdges) JobRunnersOrErr() ([]*JobRunner, error) {
	if e.loadedTypes[1] {
		return e.JobRunners, nil
	}
	return nil, &NotLoadedError{edge: "job_runners"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobRunnerToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobrunnertoken.FieldTags:
			values[i] = new([]byte)
		case jobrunnertoken.FieldIsActive:
			values[i] = new(sql.NullBool)
		case jobrunnertoken.FieldID, jobrunnertoken.FieldCreatedBy, jobrunnertoken.FieldUpdatedBy, jobrunnertoken.FieldDeletedBy, jobrunnertoken.FieldOwnerID, jobrunnertoken.FieldToken, jobrunnertoken.FieldRevokedReason, jobrunnertoken.FieldRevokedBy:
			values[i] = new(sql.NullString)
		case jobrunnertoken.FieldCreatedAt, jobrunnertoken.FieldUpdatedAt, jobrunnertoken.FieldDeletedAt, jobrunnertoken.FieldExpiresAt, jobrunnertoken.FieldLastUsedAt, jobrunnertoken.FieldRevokedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobRunnerToken fields.
func (jrt *JobRunnerToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobrunnertoken.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				jrt.ID = value.String
			}
		case jobrunnertoken.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jrt.CreatedAt = value.Time
			}
		case jobrunnertoken.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jrt.UpdatedAt = value.Time
			}
		case jobrunnertoken.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				jrt.CreatedBy = value.String
			}
		case jobrunnertoken.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				jrt.UpdatedBy = value.String
			}
		case jobrunnertoken.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				jrt.DeletedAt = value.Time
			}
		case jobrunnertoken.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				jrt.DeletedBy = value.String
			}
		case jobrunnertoken.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &jrt.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case jobrunnertoken.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				jrt.OwnerID = value.String
			}
		case jobrunnertoken.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				jrt.Token = value.String
			}
		case jobrunnertoken.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				jrt.ExpiresAt = new(time.Time)
				*jrt.ExpiresAt = value.Time
			}
		case jobrunnertoken.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				jrt.LastUsedAt = new(time.Time)
				*jrt.LastUsedAt = value.Time
			}
		case jobrunnertoken.FieldIsActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				jrt.IsActive = value.Bool
			}
		case jobrunnertoken.FieldRevokedReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revoked_reason", values[i])
			} else if value.Valid {
				jrt.RevokedReason = new(string)
				*jrt.RevokedReason = value.String
			}
		case jobrunnertoken.FieldRevokedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revoked_by", values[i])
			} else if value.Valid {
				jrt.RevokedBy = new(string)
				*jrt.RevokedBy = value.String
			}
		case jobrunnertoken.FieldRevokedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field revoked_at", values[i])
			} else if value.Valid {
				jrt.RevokedAt = new(time.Time)
				*jrt.RevokedAt = value.Time
			}
		default:
			jrt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobRunnerToken.
// This includes values selected through modifiers, order, etc.
func (jrt *JobRunnerToken) Value(name string) (ent.Value, error) {
	return jrt.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the JobRunnerToken entity.
func (jrt *JobRunnerToken) QueryOwner() *OrganizationQuery {
	return NewJobRunnerTokenClient(jrt.config).QueryOwner(jrt)
}

// QueryJobRunners queries the "job_runners" edge of the JobRunnerToken entity.
func (jrt *JobRunnerToken) QueryJobRunners() *JobRunnerQuery {
	return NewJobRunnerTokenClient(jrt.config).QueryJobRunners(jrt)
}

// Update returns a builder for updating this JobRunnerToken.
// Note that you need to call JobRunnerToken.Unwrap() before calling this method if this JobRunnerToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (jrt *JobRunnerToken) Update() *JobRunnerTokenUpdateOne {
	return NewJobRunnerTokenClient(jrt.config).UpdateOne(jrt)
}

// Unwrap unwraps the JobRunnerToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jrt *JobRunnerToken) Unwrap() *JobRunnerToken {
	_tx, ok := jrt.config.driver.(*txDriver)
	if !ok {
		panic("generated: JobRunnerToken is not a transactional entity")
	}
	jrt.config.driver = _tx.drv
	return jrt
}

// String implements the fmt.Stringer.
func (jrt *JobRunnerToken) String() string {
	var builder strings.Builder
	builder.WriteString("JobRunnerToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jrt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(jrt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jrt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(jrt.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(jrt.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(jrt.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(jrt.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", jrt.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(jrt.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(jrt.Token)
	builder.WriteString(", ")
	if v := jrt.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := jrt.LastUsedAt; v != nil {
		builder.WriteString("last_used_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", jrt.IsActive))
	builder.WriteString(", ")
	if v := jrt.RevokedReason; v != nil {
		builder.WriteString("revoked_reason=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := jrt.RevokedBy; v != nil {
		builder.WriteString("revoked_by=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := jrt.RevokedAt; v != nil {
		builder.WriteString("revoked_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedJobRunners returns the JobRunners named value or an error if the edge was not
// loaded in eager-loading with this name.
func (jrt *JobRunnerToken) NamedJobRunners(name string) ([]*JobRunner, error) {
	if jrt.Edges.namedJobRunners == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := jrt.Edges.namedJobRunners[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (jrt *JobRunnerToken) appendNamedJobRunners(name string, edges ...*JobRunner) {
	if jrt.Edges.namedJobRunners == nil {
		jrt.Edges.namedJobRunners = make(map[string][]*JobRunner)
	}
	if len(edges) == 0 {
		jrt.Edges.namedJobRunners[name] = []*JobRunner{}
	} else {
		jrt.Edges.namedJobRunners[name] = append(jrt.Edges.namedJobRunners[name], edges...)
	}
}

// JobRunnerTokens is a parsable slice of JobRunnerToken.
type JobRunnerTokens []*JobRunnerToken
