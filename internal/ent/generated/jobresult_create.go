// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/jobresult"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/pkg/enums"
)

// JobResultCreate is the builder for creating a JobResult entity.
type JobResultCreate struct {
	config
	mutation *JobResultMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *JobResultCreate) SetCreatedAt(v time.Time) *JobResultCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *JobResultCreate) SetNillableCreatedAt(v *time.Time) *JobResultCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *JobResultCreate) SetUpdatedAt(v time.Time) *JobResultCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *JobResultCreate) SetNillableUpdatedAt(v *time.Time) *JobResultCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *JobResultCreate) SetCreatedBy(v string) *JobResultCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *JobResultCreate) SetNillableCreatedBy(v *string) *JobResultCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *JobResultCreate) SetUpdatedBy(v string) *JobResultCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *JobResultCreate) SetNillableUpdatedBy(v *string) *JobResultCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *JobResultCreate) SetDeletedAt(v time.Time) *JobResultCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *JobResultCreate) SetNillableDeletedAt(v *time.Time) *JobResultCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *JobResultCreate) SetDeletedBy(v string) *JobResultCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *JobResultCreate) SetNillableDeletedBy(v *string) *JobResultCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *JobResultCreate) SetOwnerID(v string) *JobResultCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *JobResultCreate) SetNillableOwnerID(v *string) *JobResultCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetScheduledJobID sets the "scheduled_job_id" field.
func (_c *JobResultCreate) SetScheduledJobID(v string) *JobResultCreate {
	_c.mutation.SetScheduledJobID(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *JobResultCreate) SetStatus(v enums.JobExecutionStatus) *JobResultCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetExitCode sets the "exit_code" field.
func (_c *JobResultCreate) SetExitCode(v int) *JobResultCreate {
	_c.mutation.SetExitCode(v)
	return _c
}

// SetFinishedAt sets the "finished_at" field.
func (_c *JobResultCreate) SetFinishedAt(v time.Time) *JobResultCreate {
	_c.mutation.SetFinishedAt(v)
	return _c
}

// SetNillableFinishedAt sets the "finished_at" field if the given value is not nil.
func (_c *JobResultCreate) SetNillableFinishedAt(v *time.Time) *JobResultCreate {
	if v != nil {
		_c.SetFinishedAt(*v)
	}
	return _c
}

// SetStartedAt sets the "started_at" field.
func (_c *JobResultCreate) SetStartedAt(v time.Time) *JobResultCreate {
	_c.mutation.SetStartedAt(v)
	return _c
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (_c *JobResultCreate) SetNillableStartedAt(v *time.Time) *JobResultCreate {
	if v != nil {
		_c.SetStartedAt(*v)
	}
	return _c
}

// SetFileID sets the "file_id" field.
func (_c *JobResultCreate) SetFileID(v string) *JobResultCreate {
	_c.mutation.SetFileID(v)
	return _c
}

// SetLog sets the "log" field.
func (_c *JobResultCreate) SetLog(v string) *JobResultCreate {
	_c.mutation.SetLog(v)
	return _c
}

// SetNillableLog sets the "log" field if the given value is not nil.
func (_c *JobResultCreate) SetNillableLog(v *string) *JobResultCreate {
	if v != nil {
		_c.SetLog(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *JobResultCreate) SetID(v string) *JobResultCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *JobResultCreate) SetNillableID(v *string) *JobResultCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *JobResultCreate) SetOwner(v *Organization) *JobResultCreate {
	return _c.SetOwnerID(v.ID)
}

// SetScheduledJob sets the "scheduled_job" edge to the ScheduledJob entity.
func (_c *JobResultCreate) SetScheduledJob(v *ScheduledJob) *JobResultCreate {
	return _c.SetScheduledJobID(v.ID)
}

// SetFile sets the "file" edge to the File entity.
func (_c *JobResultCreate) SetFile(v *File) *JobResultCreate {
	return _c.SetFileID(v.ID)
}

// Mutation returns the JobResultMutation object of the builder.
func (_c *JobResultCreate) Mutation() *JobResultMutation {
	return _c.mutation
}

// Save creates the JobResult in the database.
func (_c *JobResultCreate) Save(ctx context.Context) (*JobResult, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *JobResultCreate) SaveX(ctx context.Context) *JobResult {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *JobResultCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *JobResultCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *JobResultCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if jobresult.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobresult.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := jobresult.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if jobresult.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized jobresult.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := jobresult.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.FinishedAt(); !ok {
		if jobresult.DefaultFinishedAt == nil {
			return fmt.Errorf("generated: uninitialized jobresult.DefaultFinishedAt (forgotten import generated/runtime?)")
		}
		v := jobresult.DefaultFinishedAt()
		_c.mutation.SetFinishedAt(v)
	}
	if _, ok := _c.mutation.StartedAt(); !ok {
		if jobresult.DefaultStartedAt == nil {
			return fmt.Errorf("generated: uninitialized jobresult.DefaultStartedAt (forgotten import generated/runtime?)")
		}
		v := jobresult.DefaultStartedAt()
		_c.mutation.SetStartedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if jobresult.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized jobresult.DefaultID (forgotten import generated/runtime?)")
		}
		v := jobresult.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *JobResultCreate) check() error {
	if v, ok := _c.mutation.OwnerID(); ok {
		if err := jobresult.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "JobResult.owner_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ScheduledJobID(); !ok {
		return &ValidationError{Name: "scheduled_job_id", err: errors.New(`generated: missing required field "JobResult.scheduled_job_id"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "JobResult.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := jobresult.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "JobResult.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ExitCode(); !ok {
		return &ValidationError{Name: "exit_code", err: errors.New(`generated: missing required field "JobResult.exit_code"`)}
	}
	if v, ok := _c.mutation.ExitCode(); ok {
		if err := jobresult.ExitCodeValidator(v); err != nil {
			return &ValidationError{Name: "exit_code", err: fmt.Errorf(`generated: validator failed for field "JobResult.exit_code": %w`, err)}
		}
	}
	if _, ok := _c.mutation.FinishedAt(); !ok {
		return &ValidationError{Name: "finished_at", err: errors.New(`generated: missing required field "JobResult.finished_at"`)}
	}
	if _, ok := _c.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`generated: missing required field "JobResult.started_at"`)}
	}
	if _, ok := _c.mutation.FileID(); !ok {
		return &ValidationError{Name: "file_id", err: errors.New(`generated: missing required field "JobResult.file_id"`)}
	}
	if len(_c.mutation.ScheduledJobIDs()) == 0 {
		return &ValidationError{Name: "scheduled_job", err: errors.New(`generated: missing required edge "JobResult.scheduled_job"`)}
	}
	if len(_c.mutation.FileIDs()) == 0 {
		return &ValidationError{Name: "file", err: errors.New(`generated: missing required edge "JobResult.file"`)}
	}
	return nil
}

func (_c *JobResultCreate) sqlSave(ctx context.Context) (*JobResult, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected JobResult.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *JobResultCreate) createSpec() (*JobResult, *sqlgraph.CreateSpec) {
	var (
		_node = &JobResult{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(jobresult.Table, sqlgraph.NewFieldSpec(jobresult.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.JobResult
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(jobresult.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(jobresult.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(jobresult.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(jobresult.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(jobresult.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(jobresult.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(jobresult.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.ExitCode(); ok {
		_spec.SetField(jobresult.FieldExitCode, field.TypeInt, value)
		_node.ExitCode = &value
	}
	if value, ok := _c.mutation.FinishedAt(); ok {
		_spec.SetField(jobresult.FieldFinishedAt, field.TypeTime, value)
		_node.FinishedAt = value
	}
	if value, ok := _c.mutation.StartedAt(); ok {
		_spec.SetField(jobresult.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := _c.mutation.Log(); ok {
		_spec.SetField(jobresult.FieldLog, field.TypeString, value)
		_node.Log = &value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobresult.OwnerTable,
			Columns: []string{jobresult.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ScheduledJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobresult.ScheduledJobTable,
			Columns: []string{jobresult.ScheduledJobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScheduledJobID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   jobresult.FileTable,
			Columns: []string{jobresult.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FileID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobResultCreateBulk is the builder for creating many JobResult entities in bulk.
type JobResultCreateBulk struct {
	config
	err      error
	builders []*JobResultCreate
}

// Save creates the JobResult entities in the database.
func (_c *JobResultCreateBulk) Save(ctx context.Context) ([]*JobResult, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*JobResult, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobResultMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *JobResultCreateBulk) SaveX(ctx context.Context) []*JobResult {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *JobResultCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *JobResultCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
