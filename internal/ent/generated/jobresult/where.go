// Code generated by ent, DO NOT EDIT.

package jobresult

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldDeletedBy, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldOwnerID, v))
}

// ScheduledJobID applies equality check predicate on the "scheduled_job_id" field. It's identical to ScheduledJobIDEQ.
func ScheduledJobID(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldScheduledJobID, v))
}

// ExitCode applies equality check predicate on the "exit_code" field. It's identical to ExitCodeEQ.
func ExitCode(v int) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldExitCode, v))
}

// FinishedAt applies equality check predicate on the "finished_at" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldFinishedAt, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldStartedAt, v))
}

// FileID applies equality check predicate on the "file_id" field. It's identical to FileIDEQ.
func FileID(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldFileID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContainsFold(FieldDeletedBy, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.JobResult {
	return predicate.JobResult(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContainsFold(FieldOwnerID, v))
}

// ScheduledJobIDEQ applies the EQ predicate on the "scheduled_job_id" field.
func ScheduledJobIDEQ(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldScheduledJobID, v))
}

// ScheduledJobIDNEQ applies the NEQ predicate on the "scheduled_job_id" field.
func ScheduledJobIDNEQ(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldScheduledJobID, v))
}

// ScheduledJobIDIn applies the In predicate on the "scheduled_job_id" field.
func ScheduledJobIDIn(vs ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldScheduledJobID, vs...))
}

// ScheduledJobIDNotIn applies the NotIn predicate on the "scheduled_job_id" field.
func ScheduledJobIDNotIn(vs ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldScheduledJobID, vs...))
}

// ScheduledJobIDGT applies the GT predicate on the "scheduled_job_id" field.
func ScheduledJobIDGT(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldScheduledJobID, v))
}

// ScheduledJobIDGTE applies the GTE predicate on the "scheduled_job_id" field.
func ScheduledJobIDGTE(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldScheduledJobID, v))
}

// ScheduledJobIDLT applies the LT predicate on the "scheduled_job_id" field.
func ScheduledJobIDLT(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldScheduledJobID, v))
}

// ScheduledJobIDLTE applies the LTE predicate on the "scheduled_job_id" field.
func ScheduledJobIDLTE(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldScheduledJobID, v))
}

// ScheduledJobIDContains applies the Contains predicate on the "scheduled_job_id" field.
func ScheduledJobIDContains(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContains(FieldScheduledJobID, v))
}

// ScheduledJobIDHasPrefix applies the HasPrefix predicate on the "scheduled_job_id" field.
func ScheduledJobIDHasPrefix(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldHasPrefix(FieldScheduledJobID, v))
}

// ScheduledJobIDHasSuffix applies the HasSuffix predicate on the "scheduled_job_id" field.
func ScheduledJobIDHasSuffix(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldHasSuffix(FieldScheduledJobID, v))
}

// ScheduledJobIDEqualFold applies the EqualFold predicate on the "scheduled_job_id" field.
func ScheduledJobIDEqualFold(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEqualFold(FieldScheduledJobID, v))
}

// ScheduledJobIDContainsFold applies the ContainsFold predicate on the "scheduled_job_id" field.
func ScheduledJobIDContainsFold(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContainsFold(FieldScheduledJobID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v enums.JobExecutionStatus) predicate.JobResult {
	vc := v
	return predicate.JobResult(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v enums.JobExecutionStatus) predicate.JobResult {
	vc := v
	return predicate.JobResult(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...enums.JobExecutionStatus) predicate.JobResult {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobResult(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...enums.JobExecutionStatus) predicate.JobResult {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.JobResult(sql.FieldNotIn(FieldStatus, v...))
}

// ExitCodeEQ applies the EQ predicate on the "exit_code" field.
func ExitCodeEQ(v int) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldExitCode, v))
}

// ExitCodeNEQ applies the NEQ predicate on the "exit_code" field.
func ExitCodeNEQ(v int) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldExitCode, v))
}

// ExitCodeIn applies the In predicate on the "exit_code" field.
func ExitCodeIn(vs ...int) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldExitCode, vs...))
}

// ExitCodeNotIn applies the NotIn predicate on the "exit_code" field.
func ExitCodeNotIn(vs ...int) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldExitCode, vs...))
}

// ExitCodeGT applies the GT predicate on the "exit_code" field.
func ExitCodeGT(v int) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldExitCode, v))
}

// ExitCodeGTE applies the GTE predicate on the "exit_code" field.
func ExitCodeGTE(v int) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldExitCode, v))
}

// ExitCodeLT applies the LT predicate on the "exit_code" field.
func ExitCodeLT(v int) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldExitCode, v))
}

// ExitCodeLTE applies the LTE predicate on the "exit_code" field.
func ExitCodeLTE(v int) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldExitCode, v))
}

// FinishedAtEQ applies the EQ predicate on the "finished_at" field.
func FinishedAtEQ(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finished_at" field.
func FinishedAtNEQ(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finished_at" field.
func FinishedAtIn(vs ...time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finished_at" field.
func FinishedAtNotIn(vs ...time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finished_at" field.
func FinishedAtGT(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finished_at" field.
func FinishedAtGTE(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finished_at" field.
func FinishedAtLT(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finished_at" field.
func FinishedAtLTE(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldFinishedAt, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldStartedAt, v))
}

// FileIDEQ applies the EQ predicate on the "file_id" field.
func FileIDEQ(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEQ(FieldFileID, v))
}

// FileIDNEQ applies the NEQ predicate on the "file_id" field.
func FileIDNEQ(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNEQ(FieldFileID, v))
}

// FileIDIn applies the In predicate on the "file_id" field.
func FileIDIn(vs ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldIn(FieldFileID, vs...))
}

// FileIDNotIn applies the NotIn predicate on the "file_id" field.
func FileIDNotIn(vs ...string) predicate.JobResult {
	return predicate.JobResult(sql.FieldNotIn(FieldFileID, vs...))
}

// FileIDGT applies the GT predicate on the "file_id" field.
func FileIDGT(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGT(FieldFileID, v))
}

// FileIDGTE applies the GTE predicate on the "file_id" field.
func FileIDGTE(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldGTE(FieldFileID, v))
}

// FileIDLT applies the LT predicate on the "file_id" field.
func FileIDLT(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLT(FieldFileID, v))
}

// FileIDLTE applies the LTE predicate on the "file_id" field.
func FileIDLTE(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldLTE(FieldFileID, v))
}

// FileIDContains applies the Contains predicate on the "file_id" field.
func FileIDContains(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContains(FieldFileID, v))
}

// FileIDHasPrefix applies the HasPrefix predicate on the "file_id" field.
func FileIDHasPrefix(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldHasPrefix(FieldFileID, v))
}

// FileIDHasSuffix applies the HasSuffix predicate on the "file_id" field.
func FileIDHasSuffix(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldHasSuffix(FieldFileID, v))
}

// FileIDEqualFold applies the EqualFold predicate on the "file_id" field.
func FileIDEqualFold(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldEqualFold(FieldFileID, v))
}

// FileIDContainsFold applies the ContainsFold predicate on the "file_id" field.
func FileIDContainsFold(v string) predicate.JobResult {
	return predicate.JobResult(sql.FieldContainsFold(FieldFileID, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.JobResult {
	return predicate.JobResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.JobResult
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Organization) predicate.JobResult {
	return predicate.JobResult(func(s *sql.Selector) {
		step := newOwnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.JobResult
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScheduledJob applies the HasEdge predicate on the "scheduled_job" edge.
func HasScheduledJob() predicate.JobResult {
	return predicate.JobResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ScheduledJobTable, ScheduledJobColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ScheduledJob
		step.Edge.Schema = schemaConfig.JobResult
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScheduledJobWith applies the HasEdge predicate on the "scheduled_job" edge with a given conditions (other predicates).
func HasScheduledJobWith(preds ...predicate.ScheduledJob) predicate.JobResult {
	return predicate.JobResult(func(s *sql.Selector) {
		step := newScheduledJobStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ScheduledJob
		step.Edge.Schema = schemaConfig.JobResult
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFile applies the HasEdge predicate on the "file" edge.
func HasFile() predicate.JobResult {
	return predicate.JobResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, FileTable, FileColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.JobResult
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFileWith applies the HasEdge predicate on the "file" edge with a given conditions (other predicates).
func HasFileWith(preds ...predicate.File) predicate.JobResult {
	return predicate.JobResult(func(s *sql.Selector) {
		step := newFileStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.JobResult
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobResult) predicate.JobResult {
	return predicate.JobResult(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobResult) predicate.JobResult {
	return predicate.JobResult(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobResult) predicate.JobResult {
	return predicate.JobResult(sql.NotPredicates(p))
}
