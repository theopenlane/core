// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/usersettinghistory"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// UserSettingHistoryQuery is the builder for querying UserSettingHistory entities.
type UserSettingHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []usersettinghistory.OrderOption
	inters     []Interceptor
	predicates []predicate.UserSettingHistory
	loadTotal  []func(context.Context, []*UserSettingHistory) error
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserSettingHistoryQuery builder.
func (ushq *UserSettingHistoryQuery) Where(ps ...predicate.UserSettingHistory) *UserSettingHistoryQuery {
	ushq.predicates = append(ushq.predicates, ps...)
	return ushq
}

// Limit the number of records to be returned by this query.
func (ushq *UserSettingHistoryQuery) Limit(limit int) *UserSettingHistoryQuery {
	ushq.ctx.Limit = &limit
	return ushq
}

// Offset to start from.
func (ushq *UserSettingHistoryQuery) Offset(offset int) *UserSettingHistoryQuery {
	ushq.ctx.Offset = &offset
	return ushq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ushq *UserSettingHistoryQuery) Unique(unique bool) *UserSettingHistoryQuery {
	ushq.ctx.Unique = &unique
	return ushq
}

// Order specifies how the records should be ordered.
func (ushq *UserSettingHistoryQuery) Order(o ...usersettinghistory.OrderOption) *UserSettingHistoryQuery {
	ushq.order = append(ushq.order, o...)
	return ushq
}

// First returns the first UserSettingHistory entity from the query.
// Returns a *NotFoundError when no UserSettingHistory was found.
func (ushq *UserSettingHistoryQuery) First(ctx context.Context) (*UserSettingHistory, error) {
	nodes, err := ushq.Limit(1).All(setContextOp(ctx, ushq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usersettinghistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ushq *UserSettingHistoryQuery) FirstX(ctx context.Context) *UserSettingHistory {
	node, err := ushq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UserSettingHistory ID from the query.
// Returns a *NotFoundError when no UserSettingHistory ID was found.
func (ushq *UserSettingHistoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ushq.Limit(1).IDs(setContextOp(ctx, ushq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{usersettinghistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ushq *UserSettingHistoryQuery) FirstIDX(ctx context.Context) string {
	id, err := ushq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UserSettingHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserSettingHistory entity is found.
// Returns a *NotFoundError when no UserSettingHistory entities are found.
func (ushq *UserSettingHistoryQuery) Only(ctx context.Context) (*UserSettingHistory, error) {
	nodes, err := ushq.Limit(2).All(setContextOp(ctx, ushq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usersettinghistory.Label}
	default:
		return nil, &NotSingularError{usersettinghistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ushq *UserSettingHistoryQuery) OnlyX(ctx context.Context) *UserSettingHistory {
	node, err := ushq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UserSettingHistory ID in the query.
// Returns a *NotSingularError when more than one UserSettingHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (ushq *UserSettingHistoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ushq.Limit(2).IDs(setContextOp(ctx, ushq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{usersettinghistory.Label}
	default:
		err = &NotSingularError{usersettinghistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ushq *UserSettingHistoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := ushq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UserSettingHistories.
func (ushq *UserSettingHistoryQuery) All(ctx context.Context) ([]*UserSettingHistory, error) {
	ctx = setContextOp(ctx, ushq.ctx, ent.OpQueryAll)
	if err := ushq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserSettingHistory, *UserSettingHistoryQuery]()
	return withInterceptors[[]*UserSettingHistory](ctx, ushq, qr, ushq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ushq *UserSettingHistoryQuery) AllX(ctx context.Context) []*UserSettingHistory {
	nodes, err := ushq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UserSettingHistory IDs.
func (ushq *UserSettingHistoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ushq.ctx.Unique == nil && ushq.path != nil {
		ushq.Unique(true)
	}
	ctx = setContextOp(ctx, ushq.ctx, ent.OpQueryIDs)
	if err = ushq.Select(usersettinghistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ushq *UserSettingHistoryQuery) IDsX(ctx context.Context) []string {
	ids, err := ushq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ushq *UserSettingHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ushq.ctx, ent.OpQueryCount)
	if err := ushq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ushq, querierCount[*UserSettingHistoryQuery](), ushq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ushq *UserSettingHistoryQuery) CountX(ctx context.Context) int {
	count, err := ushq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ushq *UserSettingHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ushq.ctx, ent.OpQueryExist)
	switch _, err := ushq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ushq *UserSettingHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := ushq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserSettingHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ushq *UserSettingHistoryQuery) Clone() *UserSettingHistoryQuery {
	if ushq == nil {
		return nil
	}
	return &UserSettingHistoryQuery{
		config:     ushq.config,
		ctx:        ushq.ctx.Clone(),
		order:      append([]usersettinghistory.OrderOption{}, ushq.order...),
		inters:     append([]Interceptor{}, ushq.inters...),
		predicates: append([]predicate.UserSettingHistory{}, ushq.predicates...),
		// clone intermediate query.
		sql:       ushq.sql.Clone(),
		path:      ushq.path,
		modifiers: append([]func(*sql.Selector){}, ushq.modifiers...),
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserSettingHistory.Query().
//		GroupBy(usersettinghistory.FieldHistoryTime).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (ushq *UserSettingHistoryQuery) GroupBy(field string, fields ...string) *UserSettingHistoryGroupBy {
	ushq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserSettingHistoryGroupBy{build: ushq}
	grbuild.flds = &ushq.ctx.Fields
	grbuild.label = usersettinghistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//	}
//
//	client.UserSettingHistory.Query().
//		Select(usersettinghistory.FieldHistoryTime).
//		Scan(ctx, &v)
func (ushq *UserSettingHistoryQuery) Select(fields ...string) *UserSettingHistorySelect {
	ushq.ctx.Fields = append(ushq.ctx.Fields, fields...)
	sbuild := &UserSettingHistorySelect{UserSettingHistoryQuery: ushq}
	sbuild.label = usersettinghistory.Label
	sbuild.flds, sbuild.scan = &ushq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSettingHistorySelect configured with the given aggregations.
func (ushq *UserSettingHistoryQuery) Aggregate(fns ...AggregateFunc) *UserSettingHistorySelect {
	return ushq.Select().Aggregate(fns...)
}

func (ushq *UserSettingHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ushq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ushq); err != nil {
				return err
			}
		}
	}
	for _, f := range ushq.ctx.Fields {
		if !usersettinghistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if ushq.path != nil {
		prev, err := ushq.path(ctx)
		if err != nil {
			return err
		}
		ushq.sql = prev
	}
	return nil
}

func (ushq *UserSettingHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserSettingHistory, error) {
	var (
		nodes = []*UserSettingHistory{}
		_spec = ushq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserSettingHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserSettingHistory{config: ushq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = ushq.schemaConfig.UserSettingHistory
	ctx = internal.NewSchemaConfigContext(ctx, ushq.schemaConfig)
	if len(ushq.modifiers) > 0 {
		_spec.Modifiers = ushq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ushq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range ushq.loadTotal {
		if err := ushq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ushq *UserSettingHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ushq.querySpec()
	_spec.Node.Schema = ushq.schemaConfig.UserSettingHistory
	ctx = internal.NewSchemaConfigContext(ctx, ushq.schemaConfig)
	if len(ushq.modifiers) > 0 {
		_spec.Modifiers = ushq.modifiers
	}
	_spec.Node.Columns = ushq.ctx.Fields
	if len(ushq.ctx.Fields) > 0 {
		_spec.Unique = ushq.ctx.Unique != nil && *ushq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ushq.driver, _spec)
}

func (ushq *UserSettingHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usersettinghistory.Table, usersettinghistory.Columns, sqlgraph.NewFieldSpec(usersettinghistory.FieldID, field.TypeString))
	_spec.From = ushq.sql
	if unique := ushq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ushq.path != nil {
		_spec.Unique = true
	}
	if fields := ushq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersettinghistory.FieldID)
		for i := range fields {
			if fields[i] != usersettinghistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ushq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ushq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ushq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ushq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ushq *UserSettingHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ushq.driver.Dialect())
	t1 := builder.Table(usersettinghistory.Table)
	columns := ushq.ctx.Fields
	if len(columns) == 0 {
		columns = usersettinghistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ushq.sql != nil {
		selector = ushq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ushq.ctx.Unique != nil && *ushq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(ushq.schemaConfig.UserSettingHistory)
	ctx = internal.NewSchemaConfigContext(ctx, ushq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range ushq.modifiers {
		m(selector)
	}
	for _, p := range ushq.predicates {
		p(selector)
	}
	for _, p := range ushq.order {
		p(selector)
	}
	if offset := ushq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ushq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ushq *UserSettingHistoryQuery) Modify(modifiers ...func(s *sql.Selector)) *UserSettingHistorySelect {
	ushq.modifiers = append(ushq.modifiers, modifiers...)
	return ushq.Select()
}

// UserSettingHistoryGroupBy is the group-by builder for UserSettingHistory entities.
type UserSettingHistoryGroupBy struct {
	selector
	build *UserSettingHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ushgb *UserSettingHistoryGroupBy) Aggregate(fns ...AggregateFunc) *UserSettingHistoryGroupBy {
	ushgb.fns = append(ushgb.fns, fns...)
	return ushgb
}

// Scan applies the selector query and scans the result into the given value.
func (ushgb *UserSettingHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ushgb.build.ctx, ent.OpQueryGroupBy)
	if err := ushgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserSettingHistoryQuery, *UserSettingHistoryGroupBy](ctx, ushgb.build, ushgb, ushgb.build.inters, v)
}

func (ushgb *UserSettingHistoryGroupBy) sqlScan(ctx context.Context, root *UserSettingHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ushgb.fns))
	for _, fn := range ushgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ushgb.flds)+len(ushgb.fns))
		for _, f := range *ushgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ushgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ushgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSettingHistorySelect is the builder for selecting fields of UserSettingHistory entities.
type UserSettingHistorySelect struct {
	*UserSettingHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ushs *UserSettingHistorySelect) Aggregate(fns ...AggregateFunc) *UserSettingHistorySelect {
	ushs.fns = append(ushs.fns, fns...)
	return ushs
}

// Scan applies the selector query and scans the result into the given value.
func (ushs *UserSettingHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ushs.ctx, ent.OpQuerySelect)
	if err := ushs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserSettingHistoryQuery, *UserSettingHistorySelect](ctx, ushs.UserSettingHistoryQuery, ushs, ushs.inters, v)
}

func (ushs *UserSettingHistorySelect) sqlScan(ctx context.Context, root *UserSettingHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ushs.fns))
	for _, fn := range ushs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ushs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ushs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ushs *UserSettingHistorySelect) Modify(modifiers ...func(s *sql.Selector)) *UserSettingHistorySelect {
	ushs.modifiers = append(ushs.modifiers, modifiers...)
	return ushs
}
