// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/subcontrolhistory"
	"github.com/theopenlane/entx/history"
)

// SubcontrolHistory is the model entity for the SubcontrolHistory schema.
type SubcontrolHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the subcontrol
	Name string `json:"name,omitempty"`
	// description of the subcontrol
	Description string `json:"description,omitempty"`
	// status of the subcontrol
	Status string `json:"status,omitempty"`
	// type of the subcontrol
	SubcontrolType string `json:"subcontrol_type,omitempty"`
	// version of the control
	Version string `json:"version,omitempty"`
	// number of the subcontrol
	SubcontrolNumber string `json:"subcontrol_number,omitempty"`
	// subcontrol family
	Family string `json:"family,omitempty"`
	// subcontrol class
	Class string `json:"class,omitempty"`
	// source of the control, e.g. framework, template, user-defined, etc.
	Source string `json:"source,omitempty"`
	// mapped frameworks that the subcontrol is part of
	MappedFrameworks string `json:"mapped_frameworks,omitempty"`
	// implementation evidence of the subcontrol
	ImplementationEvidence string `json:"implementation_evidence,omitempty"`
	// implementation status
	ImplementationStatus string `json:"implementation_status,omitempty"`
	// date the subcontrol was implemented
	ImplementationDate time.Time `json:"implementation_date,omitempty"`
	// implementation verification
	ImplementationVerification string `json:"implementation_verification,omitempty"`
	// date the subcontrol implementation was verified
	ImplementationVerificationDate time.Time `json:"implementation_verification_date,omitempty"`
	// json data details of the subcontrol
	Details map[string]interface{} `json:"details,omitempty"`
	// example evidence to provide for the control
	ExampleEvidence string `json:"example_evidence,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubcontrolHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subcontrolhistory.FieldTags, subcontrolhistory.FieldDetails:
			values[i] = new([]byte)
		case subcontrolhistory.FieldOperation:
			values[i] = new(history.OpType)
		case subcontrolhistory.FieldID, subcontrolhistory.FieldRef, subcontrolhistory.FieldCreatedBy, subcontrolhistory.FieldUpdatedBy, subcontrolhistory.FieldDeletedBy, subcontrolhistory.FieldDisplayID, subcontrolhistory.FieldOwnerID, subcontrolhistory.FieldName, subcontrolhistory.FieldDescription, subcontrolhistory.FieldStatus, subcontrolhistory.FieldSubcontrolType, subcontrolhistory.FieldVersion, subcontrolhistory.FieldSubcontrolNumber, subcontrolhistory.FieldFamily, subcontrolhistory.FieldClass, subcontrolhistory.FieldSource, subcontrolhistory.FieldMappedFrameworks, subcontrolhistory.FieldImplementationEvidence, subcontrolhistory.FieldImplementationStatus, subcontrolhistory.FieldImplementationVerification, subcontrolhistory.FieldExampleEvidence:
			values[i] = new(sql.NullString)
		case subcontrolhistory.FieldHistoryTime, subcontrolhistory.FieldCreatedAt, subcontrolhistory.FieldUpdatedAt, subcontrolhistory.FieldDeletedAt, subcontrolhistory.FieldImplementationDate, subcontrolhistory.FieldImplementationVerificationDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubcontrolHistory fields.
func (sh *SubcontrolHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subcontrolhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sh.ID = value.String
			}
		case subcontrolhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				sh.HistoryTime = value.Time
			}
		case subcontrolhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				sh.Ref = value.String
			}
		case subcontrolhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				sh.Operation = *value
			}
		case subcontrolhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sh.CreatedAt = value.Time
			}
		case subcontrolhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sh.UpdatedAt = value.Time
			}
		case subcontrolhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sh.CreatedBy = value.String
			}
		case subcontrolhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sh.UpdatedBy = value.String
			}
		case subcontrolhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sh.DeletedAt = value.Time
			}
		case subcontrolhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				sh.DeletedBy = value.String
			}
		case subcontrolhistory.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				sh.DisplayID = value.String
			}
		case subcontrolhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case subcontrolhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				sh.OwnerID = value.String
			}
		case subcontrolhistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sh.Name = value.String
			}
		case subcontrolhistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sh.Description = value.String
			}
		case subcontrolhistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sh.Status = value.String
			}
		case subcontrolhistory.FieldSubcontrolType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcontrol_type", values[i])
			} else if value.Valid {
				sh.SubcontrolType = value.String
			}
		case subcontrolhistory.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				sh.Version = value.String
			}
		case subcontrolhistory.FieldSubcontrolNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcontrol_number", values[i])
			} else if value.Valid {
				sh.SubcontrolNumber = value.String
			}
		case subcontrolhistory.FieldFamily:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field family", values[i])
			} else if value.Valid {
				sh.Family = value.String
			}
		case subcontrolhistory.FieldClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class", values[i])
			} else if value.Valid {
				sh.Class = value.String
			}
		case subcontrolhistory.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				sh.Source = value.String
			}
		case subcontrolhistory.FieldMappedFrameworks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapped_frameworks", values[i])
			} else if value.Valid {
				sh.MappedFrameworks = value.String
			}
		case subcontrolhistory.FieldImplementationEvidence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_evidence", values[i])
			} else if value.Valid {
				sh.ImplementationEvidence = value.String
			}
		case subcontrolhistory.FieldImplementationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_status", values[i])
			} else if value.Valid {
				sh.ImplementationStatus = value.String
			}
		case subcontrolhistory.FieldImplementationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_date", values[i])
			} else if value.Valid {
				sh.ImplementationDate = value.Time
			}
		case subcontrolhistory.FieldImplementationVerification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_verification", values[i])
			} else if value.Valid {
				sh.ImplementationVerification = value.String
			}
		case subcontrolhistory.FieldImplementationVerificationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_verification_date", values[i])
			} else if value.Valid {
				sh.ImplementationVerificationDate = value.Time
			}
		case subcontrolhistory.FieldDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sh.Details); err != nil {
					return fmt.Errorf("unmarshal field details: %w", err)
				}
			}
		case subcontrolhistory.FieldExampleEvidence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field example_evidence", values[i])
			} else if value.Valid {
				sh.ExampleEvidence = value.String
			}
		default:
			sh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubcontrolHistory.
// This includes values selected through modifiers, order, etc.
func (sh *SubcontrolHistory) Value(name string) (ent.Value, error) {
	return sh.selectValues.Get(name)
}

// Update returns a builder for updating this SubcontrolHistory.
// Note that you need to call SubcontrolHistory.Unwrap() before calling this method if this SubcontrolHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (sh *SubcontrolHistory) Update() *SubcontrolHistoryUpdateOne {
	return NewSubcontrolHistoryClient(sh.config).UpdateOne(sh)
}

// Unwrap unwraps the SubcontrolHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sh *SubcontrolHistory) Unwrap() *SubcontrolHistory {
	_tx, ok := sh.config.driver.(*txDriver)
	if !ok {
		panic("generated: SubcontrolHistory is not a transactional entity")
	}
	sh.config.driver = _tx.drv
	return sh
}

// String implements the fmt.Stringer.
func (sh *SubcontrolHistory) String() string {
	var builder strings.Builder
	builder.WriteString("SubcontrolHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(sh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(sh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", sh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(sh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(sh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(sh.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", sh.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(sh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sh.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sh.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(sh.Status)
	builder.WriteString(", ")
	builder.WriteString("subcontrol_type=")
	builder.WriteString(sh.SubcontrolType)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(sh.Version)
	builder.WriteString(", ")
	builder.WriteString("subcontrol_number=")
	builder.WriteString(sh.SubcontrolNumber)
	builder.WriteString(", ")
	builder.WriteString("family=")
	builder.WriteString(sh.Family)
	builder.WriteString(", ")
	builder.WriteString("class=")
	builder.WriteString(sh.Class)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(sh.Source)
	builder.WriteString(", ")
	builder.WriteString("mapped_frameworks=")
	builder.WriteString(sh.MappedFrameworks)
	builder.WriteString(", ")
	builder.WriteString("implementation_evidence=")
	builder.WriteString(sh.ImplementationEvidence)
	builder.WriteString(", ")
	builder.WriteString("implementation_status=")
	builder.WriteString(sh.ImplementationStatus)
	builder.WriteString(", ")
	builder.WriteString("implementation_date=")
	builder.WriteString(sh.ImplementationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("implementation_verification=")
	builder.WriteString(sh.ImplementationVerification)
	builder.WriteString(", ")
	builder.WriteString("implementation_verification_date=")
	builder.WriteString(sh.ImplementationVerificationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(fmt.Sprintf("%v", sh.Details))
	builder.WriteString(", ")
	builder.WriteString("example_evidence=")
	builder.WriteString(sh.ExampleEvidence)
	builder.WriteByte(')')
	return builder.String()
}

// SubcontrolHistories is a parsable slice of SubcontrolHistory.
type SubcontrolHistories []*SubcontrolHistory
