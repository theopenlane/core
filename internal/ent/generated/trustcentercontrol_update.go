// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentercontrol"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterControlUpdate is the builder for updating TrustCenterControl entities.
type TrustCenterControlUpdate struct {
	config
	hooks     []Hook
	mutation  *TrustCenterControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrustCenterControlUpdate builder.
func (_u *TrustCenterControlUpdate) Where(ps ...predicate.TrustCenterControl) *TrustCenterControlUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterControlUpdate) SetUpdatedAt(v time.Time) *TrustCenterControlUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterControlUpdate) ClearUpdatedAt() *TrustCenterControlUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterControlUpdate) SetUpdatedBy(v string) *TrustCenterControlUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterControlUpdate) SetNillableUpdatedBy(v *string) *TrustCenterControlUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterControlUpdate) ClearUpdatedBy() *TrustCenterControlUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterControlUpdate) SetDeletedAt(v time.Time) *TrustCenterControlUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterControlUpdate) SetNillableDeletedAt(v *time.Time) *TrustCenterControlUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterControlUpdate) ClearDeletedAt() *TrustCenterControlUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterControlUpdate) SetDeletedBy(v string) *TrustCenterControlUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterControlUpdate) SetNillableDeletedBy(v *string) *TrustCenterControlUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterControlUpdate) ClearDeletedBy() *TrustCenterControlUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TrustCenterControlUpdate) SetTags(v []string) *TrustCenterControlUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TrustCenterControlUpdate) AppendTags(v []string) *TrustCenterControlUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TrustCenterControlUpdate) ClearTags() *TrustCenterControlUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetControlID sets the "control_id" field.
func (_u *TrustCenterControlUpdate) SetControlID(v string) *TrustCenterControlUpdate {
	_u.mutation.SetControlID(v)
	return _u
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (_u *TrustCenterControlUpdate) SetNillableControlID(v *string) *TrustCenterControlUpdate {
	if v != nil {
		_u.SetControlID(*v)
	}
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterControlUpdate) SetTrustCenterID(v string) *TrustCenterControlUpdate {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterControlUpdate) SetNillableTrustCenterID(v *string) *TrustCenterControlUpdate {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterControlUpdate) ClearTrustCenterID() *TrustCenterControlUpdate {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetTrustCenter sets the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterControlUpdate) SetTrustCenter(v *TrustCenter) *TrustCenterControlUpdate {
	return _u.SetTrustCenterID(v.ID)
}

// SetControl sets the "control" edge to the Control entity.
func (_u *TrustCenterControlUpdate) SetControl(v *Control) *TrustCenterControlUpdate {
	return _u.SetControlID(v.ID)
}

// Mutation returns the TrustCenterControlMutation object of the builder.
func (_u *TrustCenterControlUpdate) Mutation() *TrustCenterControlMutation {
	return _u.mutation
}

// ClearTrustCenter clears the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterControlUpdate) ClearTrustCenter() *TrustCenterControlUpdate {
	_u.mutation.ClearTrustCenter()
	return _u
}

// ClearControl clears the "control" edge to the Control entity.
func (_u *TrustCenterControlUpdate) ClearControl() *TrustCenterControlUpdate {
	_u.mutation.ClearControl()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TrustCenterControlUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterControlUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TrustCenterControlUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterControlUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterControlUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcentercontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentercontrol.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentercontrol.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterControlUpdate) check() error {
	if v, ok := _u.mutation.ControlID(); ok {
		if err := trustcentercontrol.ControlIDValidator(v); err != nil {
			return &ValidationError{Name: "control_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterControl.control_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TrustCenterID(); ok {
		if err := trustcentercontrol.TrustCenterIDValidator(v); err != nil {
			return &ValidationError{Name: "trust_center_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterControl.trust_center_id": %w`, err)}
		}
	}
	if _u.mutation.ControlCleared() && len(_u.mutation.ControlIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "TrustCenterControl.control"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterControlUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterControlUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterControlUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcentercontrol.Table, trustcentercontrol.Columns, sqlgraph.NewFieldSpec(trustcentercontrol.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentercontrol.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentercontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentercontrol.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentercontrol.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentercontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentercontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentercontrol.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentercontrol.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentercontrol.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentercontrol.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(trustcentercontrol.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcentercontrol.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(trustcentercontrol.FieldTags, field.TypeJSON)
	}
	if _u.mutation.TrustCenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercontrol.TrustCenterTable,
			Columns: []string{trustcentercontrol.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterControl
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercontrol.TrustCenterTable,
			Columns: []string{trustcentercontrol.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterControl
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercontrol.ControlTable,
			Columns: []string{trustcentercontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterControl
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercontrol.ControlTable,
			Columns: []string{trustcentercontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterControl
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterControl
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentercontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TrustCenterControlUpdateOne is the builder for updating a single TrustCenterControl entity.
type TrustCenterControlUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrustCenterControlMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterControlUpdateOne) SetUpdatedAt(v time.Time) *TrustCenterControlUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterControlUpdateOne) ClearUpdatedAt() *TrustCenterControlUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterControlUpdateOne) SetUpdatedBy(v string) *TrustCenterControlUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterControlUpdateOne) SetNillableUpdatedBy(v *string) *TrustCenterControlUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterControlUpdateOne) ClearUpdatedBy() *TrustCenterControlUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterControlUpdateOne) SetDeletedAt(v time.Time) *TrustCenterControlUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterControlUpdateOne) SetNillableDeletedAt(v *time.Time) *TrustCenterControlUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterControlUpdateOne) ClearDeletedAt() *TrustCenterControlUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterControlUpdateOne) SetDeletedBy(v string) *TrustCenterControlUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterControlUpdateOne) SetNillableDeletedBy(v *string) *TrustCenterControlUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterControlUpdateOne) ClearDeletedBy() *TrustCenterControlUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TrustCenterControlUpdateOne) SetTags(v []string) *TrustCenterControlUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TrustCenterControlUpdateOne) AppendTags(v []string) *TrustCenterControlUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TrustCenterControlUpdateOne) ClearTags() *TrustCenterControlUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetControlID sets the "control_id" field.
func (_u *TrustCenterControlUpdateOne) SetControlID(v string) *TrustCenterControlUpdateOne {
	_u.mutation.SetControlID(v)
	return _u
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (_u *TrustCenterControlUpdateOne) SetNillableControlID(v *string) *TrustCenterControlUpdateOne {
	if v != nil {
		_u.SetControlID(*v)
	}
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterControlUpdateOne) SetTrustCenterID(v string) *TrustCenterControlUpdateOne {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterControlUpdateOne) SetNillableTrustCenterID(v *string) *TrustCenterControlUpdateOne {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterControlUpdateOne) ClearTrustCenterID() *TrustCenterControlUpdateOne {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetTrustCenter sets the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterControlUpdateOne) SetTrustCenter(v *TrustCenter) *TrustCenterControlUpdateOne {
	return _u.SetTrustCenterID(v.ID)
}

// SetControl sets the "control" edge to the Control entity.
func (_u *TrustCenterControlUpdateOne) SetControl(v *Control) *TrustCenterControlUpdateOne {
	return _u.SetControlID(v.ID)
}

// Mutation returns the TrustCenterControlMutation object of the builder.
func (_u *TrustCenterControlUpdateOne) Mutation() *TrustCenterControlMutation {
	return _u.mutation
}

// ClearTrustCenter clears the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterControlUpdateOne) ClearTrustCenter() *TrustCenterControlUpdateOne {
	_u.mutation.ClearTrustCenter()
	return _u
}

// ClearControl clears the "control" edge to the Control entity.
func (_u *TrustCenterControlUpdateOne) ClearControl() *TrustCenterControlUpdateOne {
	_u.mutation.ClearControl()
	return _u
}

// Where appends a list predicates to the TrustCenterControlUpdate builder.
func (_u *TrustCenterControlUpdateOne) Where(ps ...predicate.TrustCenterControl) *TrustCenterControlUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TrustCenterControlUpdateOne) Select(field string, fields ...string) *TrustCenterControlUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TrustCenterControl entity.
func (_u *TrustCenterControlUpdateOne) Save(ctx context.Context) (*TrustCenterControl, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterControlUpdateOne) SaveX(ctx context.Context) *TrustCenterControl {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TrustCenterControlUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterControlUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterControlUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcentercontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentercontrol.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentercontrol.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterControlUpdateOne) check() error {
	if v, ok := _u.mutation.ControlID(); ok {
		if err := trustcentercontrol.ControlIDValidator(v); err != nil {
			return &ValidationError{Name: "control_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterControl.control_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TrustCenterID(); ok {
		if err := trustcentercontrol.TrustCenterIDValidator(v); err != nil {
			return &ValidationError{Name: "trust_center_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterControl.trust_center_id": %w`, err)}
		}
	}
	if _u.mutation.ControlCleared() && len(_u.mutation.ControlIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "TrustCenterControl.control"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterControlUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterControlUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterControlUpdateOne) sqlSave(ctx context.Context) (_node *TrustCenterControl, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcentercontrol.Table, trustcentercontrol.Columns, sqlgraph.NewFieldSpec(trustcentercontrol.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TrustCenterControl.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcentercontrol.FieldID)
		for _, f := range fields {
			if !trustcentercontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != trustcentercontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentercontrol.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentercontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentercontrol.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentercontrol.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentercontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentercontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentercontrol.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentercontrol.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentercontrol.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentercontrol.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(trustcentercontrol.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcentercontrol.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(trustcentercontrol.FieldTags, field.TypeJSON)
	}
	if _u.mutation.TrustCenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercontrol.TrustCenterTable,
			Columns: []string{trustcentercontrol.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterControl
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercontrol.TrustCenterTable,
			Columns: []string{trustcentercontrol.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterControl
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercontrol.ControlTable,
			Columns: []string{trustcentercontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterControl
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercontrol.ControlTable,
			Columns: []string{trustcentercontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterControl
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterControl
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TrustCenterControl{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentercontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
