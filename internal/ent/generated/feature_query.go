// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// FeatureQuery is the builder for querying Feature entities.
type FeatureQuery struct {
	config
	ctx               *QueryContext
	order             []feature.OrderOption
	inters            []Interceptor
	predicates        []predicate.Feature
	withOwner         *OrganizationQuery
	withPlans         *EntitlementPlanQuery
	withEvents        *EventQuery
	withFeatures      *EntitlementPlanFeatureQuery
	loadTotal         []func(context.Context, []*Feature) error
	modifiers         []func(*sql.Selector)
	withNamedPlans    map[string]*EntitlementPlanQuery
	withNamedEvents   map[string]*EventQuery
	withNamedFeatures map[string]*EntitlementPlanFeatureQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FeatureQuery builder.
func (fq *FeatureQuery) Where(ps ...predicate.Feature) *FeatureQuery {
	fq.predicates = append(fq.predicates, ps...)
	return fq
}

// Limit the number of records to be returned by this query.
func (fq *FeatureQuery) Limit(limit int) *FeatureQuery {
	fq.ctx.Limit = &limit
	return fq
}

// Offset to start from.
func (fq *FeatureQuery) Offset(offset int) *FeatureQuery {
	fq.ctx.Offset = &offset
	return fq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fq *FeatureQuery) Unique(unique bool) *FeatureQuery {
	fq.ctx.Unique = &unique
	return fq
}

// Order specifies how the records should be ordered.
func (fq *FeatureQuery) Order(o ...feature.OrderOption) *FeatureQuery {
	fq.order = append(fq.order, o...)
	return fq
}

// QueryOwner chains the current query on the "owner" edge.
func (fq *FeatureQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, feature.OwnerTable, feature.OwnerColumn),
		)
		schemaConfig := fq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Feature
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlans chains the current query on the "plans" edge.
func (fq *FeatureQuery) QueryPlans() *EntitlementPlanQuery {
	query := (&EntitlementPlanClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, selector),
			sqlgraph.To(entitlementplan.Table, entitlementplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, feature.PlansTable, feature.PlansPrimaryKey...),
		)
		schemaConfig := fq.schemaConfig
		step.To.Schema = schemaConfig.EntitlementPlan
		step.Edge.Schema = schemaConfig.EntitlementPlanFeature
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (fq *FeatureQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, feature.EventsTable, feature.EventsPrimaryKey...),
		)
		schemaConfig := fq.schemaConfig
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.FeatureEvents
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeatures chains the current query on the "features" edge.
func (fq *FeatureQuery) QueryFeatures() *EntitlementPlanFeatureQuery {
	query := (&EntitlementPlanFeatureClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, selector),
			sqlgraph.To(entitlementplanfeature.Table, entitlementplanfeature.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, feature.FeaturesTable, feature.FeaturesColumn),
		)
		schemaConfig := fq.schemaConfig
		step.To.Schema = schemaConfig.EntitlementPlanFeature
		step.Edge.Schema = schemaConfig.EntitlementPlanFeature
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Feature entity from the query.
// Returns a *NotFoundError when no Feature was found.
func (fq *FeatureQuery) First(ctx context.Context) (*Feature, error) {
	nodes, err := fq.Limit(1).All(setContextOp(ctx, fq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{feature.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fq *FeatureQuery) FirstX(ctx context.Context) *Feature {
	node, err := fq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Feature ID from the query.
// Returns a *NotFoundError when no Feature ID was found.
func (fq *FeatureQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = fq.Limit(1).IDs(setContextOp(ctx, fq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{feature.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fq *FeatureQuery) FirstIDX(ctx context.Context) string {
	id, err := fq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Feature entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Feature entity is found.
// Returns a *NotFoundError when no Feature entities are found.
func (fq *FeatureQuery) Only(ctx context.Context) (*Feature, error) {
	nodes, err := fq.Limit(2).All(setContextOp(ctx, fq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{feature.Label}
	default:
		return nil, &NotSingularError{feature.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fq *FeatureQuery) OnlyX(ctx context.Context) *Feature {
	node, err := fq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Feature ID in the query.
// Returns a *NotSingularError when more than one Feature ID is found.
// Returns a *NotFoundError when no entities are found.
func (fq *FeatureQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = fq.Limit(2).IDs(setContextOp(ctx, fq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{feature.Label}
	default:
		err = &NotSingularError{feature.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fq *FeatureQuery) OnlyIDX(ctx context.Context) string {
	id, err := fq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Features.
func (fq *FeatureQuery) All(ctx context.Context) ([]*Feature, error) {
	ctx = setContextOp(ctx, fq.ctx, ent.OpQueryAll)
	if err := fq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Feature, *FeatureQuery]()
	return withInterceptors[[]*Feature](ctx, fq, qr, fq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fq *FeatureQuery) AllX(ctx context.Context) []*Feature {
	nodes, err := fq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Feature IDs.
func (fq *FeatureQuery) IDs(ctx context.Context) (ids []string, err error) {
	if fq.ctx.Unique == nil && fq.path != nil {
		fq.Unique(true)
	}
	ctx = setContextOp(ctx, fq.ctx, ent.OpQueryIDs)
	if err = fq.Select(feature.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fq *FeatureQuery) IDsX(ctx context.Context) []string {
	ids, err := fq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fq *FeatureQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fq.ctx, ent.OpQueryCount)
	if err := fq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fq, querierCount[*FeatureQuery](), fq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fq *FeatureQuery) CountX(ctx context.Context) int {
	count, err := fq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fq *FeatureQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fq.ctx, ent.OpQueryExist)
	switch _, err := fq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fq *FeatureQuery) ExistX(ctx context.Context) bool {
	exist, err := fq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FeatureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fq *FeatureQuery) Clone() *FeatureQuery {
	if fq == nil {
		return nil
	}
	return &FeatureQuery{
		config:       fq.config,
		ctx:          fq.ctx.Clone(),
		order:        append([]feature.OrderOption{}, fq.order...),
		inters:       append([]Interceptor{}, fq.inters...),
		predicates:   append([]predicate.Feature{}, fq.predicates...),
		withOwner:    fq.withOwner.Clone(),
		withPlans:    fq.withPlans.Clone(),
		withEvents:   fq.withEvents.Clone(),
		withFeatures: fq.withFeatures.Clone(),
		// clone intermediate query.
		sql:       fq.sql.Clone(),
		path:      fq.path,
		modifiers: append([]func(*sql.Selector){}, fq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithOwner(opts ...func(*OrganizationQuery)) *FeatureQuery {
	query := (&OrganizationClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withOwner = query
	return fq
}

// WithPlans tells the query-builder to eager-load the nodes that are connected to
// the "plans" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithPlans(opts ...func(*EntitlementPlanQuery)) *FeatureQuery {
	query := (&EntitlementPlanClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withPlans = query
	return fq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithEvents(opts ...func(*EventQuery)) *FeatureQuery {
	query := (&EventClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withEvents = query
	return fq
}

// WithFeatures tells the query-builder to eager-load the nodes that are connected to
// the "features" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithFeatures(opts ...func(*EntitlementPlanFeatureQuery)) *FeatureQuery {
	query := (&EntitlementPlanFeatureClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withFeatures = query
	return fq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Feature.Query().
//		GroupBy(feature.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (fq *FeatureQuery) GroupBy(field string, fields ...string) *FeatureGroupBy {
	fq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FeatureGroupBy{build: fq}
	grbuild.flds = &fq.ctx.Fields
	grbuild.label = feature.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Feature.Query().
//		Select(feature.FieldCreatedAt).
//		Scan(ctx, &v)
func (fq *FeatureQuery) Select(fields ...string) *FeatureSelect {
	fq.ctx.Fields = append(fq.ctx.Fields, fields...)
	sbuild := &FeatureSelect{FeatureQuery: fq}
	sbuild.label = feature.Label
	sbuild.flds, sbuild.scan = &fq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FeatureSelect configured with the given aggregations.
func (fq *FeatureQuery) Aggregate(fns ...AggregateFunc) *FeatureSelect {
	return fq.Select().Aggregate(fns...)
}

func (fq *FeatureQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fq); err != nil {
				return err
			}
		}
	}
	for _, f := range fq.ctx.Fields {
		if !feature.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if fq.path != nil {
		prev, err := fq.path(ctx)
		if err != nil {
			return err
		}
		fq.sql = prev
	}
	if feature.Policy == nil {
		return errors.New("generated: uninitialized feature.Policy (forgotten import generated/runtime?)")
	}
	if err := feature.Policy.EvalQuery(ctx, fq); err != nil {
		return err
	}
	return nil
}

func (fq *FeatureQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Feature, error) {
	var (
		nodes       = []*Feature{}
		_spec       = fq.querySpec()
		loadedTypes = [4]bool{
			fq.withOwner != nil,
			fq.withPlans != nil,
			fq.withEvents != nil,
			fq.withFeatures != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Feature).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Feature{config: fq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = fq.schemaConfig.Feature
	ctx = internal.NewSchemaConfigContext(ctx, fq.schemaConfig)
	if len(fq.modifiers) > 0 {
		_spec.Modifiers = fq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fq.withOwner; query != nil {
		if err := fq.loadOwner(ctx, query, nodes, nil,
			func(n *Feature, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := fq.withPlans; query != nil {
		if err := fq.loadPlans(ctx, query, nodes,
			func(n *Feature) { n.Edges.Plans = []*EntitlementPlan{} },
			func(n *Feature, e *EntitlementPlan) { n.Edges.Plans = append(n.Edges.Plans, e) }); err != nil {
			return nil, err
		}
	}
	if query := fq.withEvents; query != nil {
		if err := fq.loadEvents(ctx, query, nodes,
			func(n *Feature) { n.Edges.Events = []*Event{} },
			func(n *Feature, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := fq.withFeatures; query != nil {
		if err := fq.loadFeatures(ctx, query, nodes,
			func(n *Feature) { n.Edges.Features = []*EntitlementPlanFeature{} },
			func(n *Feature, e *EntitlementPlanFeature) { n.Edges.Features = append(n.Edges.Features, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedPlans {
		if err := fq.loadPlans(ctx, query, nodes,
			func(n *Feature) { n.appendNamedPlans(name) },
			func(n *Feature, e *EntitlementPlan) { n.appendNamedPlans(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedEvents {
		if err := fq.loadEvents(ctx, query, nodes,
			func(n *Feature) { n.appendNamedEvents(name) },
			func(n *Feature, e *Event) { n.appendNamedEvents(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedFeatures {
		if err := fq.loadFeatures(ctx, query, nodes,
			func(n *Feature) { n.appendNamedFeatures(name) },
			func(n *Feature, e *EntitlementPlanFeature) { n.appendNamedFeatures(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range fq.loadTotal {
		if err := fq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fq *FeatureQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*Feature, init func(*Feature), assign func(*Feature, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Feature)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (fq *FeatureQuery) loadPlans(ctx context.Context, query *EntitlementPlanQuery, nodes []*Feature, init func(*Feature), assign func(*Feature, *EntitlementPlan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Feature)
	nids := make(map[string]map[*Feature]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(feature.PlansTable)
		joinT.Schema(fq.schemaConfig.EntitlementPlanFeature)
		s.Join(joinT).On(s.C(entitlementplan.FieldID), joinT.C(feature.PlansPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(feature.PlansPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(feature.PlansPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Feature]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*EntitlementPlan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "plans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (fq *FeatureQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*Feature, init func(*Feature), assign func(*Feature, *Event)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Feature)
	nids := make(map[string]map[*Feature]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(feature.EventsTable)
		joinT.Schema(fq.schemaConfig.FeatureEvents)
		s.Join(joinT).On(s.C(event.FieldID), joinT.C(feature.EventsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(feature.EventsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(feature.EventsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Feature]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Event](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "events" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (fq *FeatureQuery) loadFeatures(ctx context.Context, query *EntitlementPlanFeatureQuery, nodes []*Feature, init func(*Feature), assign func(*Feature, *EntitlementPlanFeature)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Feature)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(entitlementplanfeature.FieldFeatureID)
	}
	query.Where(predicate.EntitlementPlanFeature(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(feature.FeaturesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.FeatureID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "feature_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (fq *FeatureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fq.querySpec()
	_spec.Node.Schema = fq.schemaConfig.Feature
	ctx = internal.NewSchemaConfigContext(ctx, fq.schemaConfig)
	if len(fq.modifiers) > 0 {
		_spec.Modifiers = fq.modifiers
	}
	_spec.Node.Columns = fq.ctx.Fields
	if len(fq.ctx.Fields) > 0 {
		_spec.Unique = fq.ctx.Unique != nil && *fq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fq.driver, _spec)
}

func (fq *FeatureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(feature.Table, feature.Columns, sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString))
	_spec.From = fq.sql
	if unique := fq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fq.path != nil {
		_spec.Unique = true
	}
	if fields := fq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feature.FieldID)
		for i := range fields {
			if fields[i] != feature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if fq.withOwner != nil {
			_spec.Node.AddColumnOnce(feature.FieldOwnerID)
		}
	}
	if ps := fq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fq *FeatureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fq.driver.Dialect())
	t1 := builder.Table(feature.Table)
	columns := fq.ctx.Fields
	if len(columns) == 0 {
		columns = feature.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fq.sql != nil {
		selector = fq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fq.ctx.Unique != nil && *fq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(fq.schemaConfig.Feature)
	ctx = internal.NewSchemaConfigContext(ctx, fq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range fq.modifiers {
		m(selector)
	}
	for _, p := range fq.predicates {
		p(selector)
	}
	for _, p := range fq.order {
		p(selector)
	}
	if offset := fq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (fq *FeatureQuery) Modify(modifiers ...func(s *sql.Selector)) *FeatureSelect {
	fq.modifiers = append(fq.modifiers, modifiers...)
	return fq.Select()
}

// WithNamedPlans tells the query-builder to eager-load the nodes that are connected to the "plans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithNamedPlans(name string, opts ...func(*EntitlementPlanQuery)) *FeatureQuery {
	query := (&EntitlementPlanClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedPlans == nil {
		fq.withNamedPlans = make(map[string]*EntitlementPlanQuery)
	}
	fq.withNamedPlans[name] = query
	return fq
}

// WithNamedEvents tells the query-builder to eager-load the nodes that are connected to the "events"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithNamedEvents(name string, opts ...func(*EventQuery)) *FeatureQuery {
	query := (&EventClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedEvents == nil {
		fq.withNamedEvents = make(map[string]*EventQuery)
	}
	fq.withNamedEvents[name] = query
	return fq
}

// WithNamedFeatures tells the query-builder to eager-load the nodes that are connected to the "features"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithNamedFeatures(name string, opts ...func(*EntitlementPlanFeatureQuery)) *FeatureQuery {
	query := (&EntitlementPlanFeatureClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedFeatures == nil {
		fq.withNamedFeatures = make(map[string]*EntitlementPlanFeatureQuery)
	}
	fq.withNamedFeatures[name] = query
	return fq
}

// FeatureGroupBy is the group-by builder for Feature entities.
type FeatureGroupBy struct {
	selector
	build *FeatureQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fgb *FeatureGroupBy) Aggregate(fns ...AggregateFunc) *FeatureGroupBy {
	fgb.fns = append(fgb.fns, fns...)
	return fgb
}

// Scan applies the selector query and scans the result into the given value.
func (fgb *FeatureGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fgb.build.ctx, ent.OpQueryGroupBy)
	if err := fgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeatureQuery, *FeatureGroupBy](ctx, fgb.build, fgb, fgb.build.inters, v)
}

func (fgb *FeatureGroupBy) sqlScan(ctx context.Context, root *FeatureQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fgb.fns))
	for _, fn := range fgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fgb.flds)+len(fgb.fns))
		for _, f := range *fgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FeatureSelect is the builder for selecting fields of Feature entities.
type FeatureSelect struct {
	*FeatureQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fs *FeatureSelect) Aggregate(fns ...AggregateFunc) *FeatureSelect {
	fs.fns = append(fs.fns, fns...)
	return fs
}

// Scan applies the selector query and scans the result into the given value.
func (fs *FeatureSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fs.ctx, ent.OpQuerySelect)
	if err := fs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeatureQuery, *FeatureSelect](ctx, fs.FeatureQuery, fs, fs.inters, v)
}

func (fs *FeatureSelect) sqlScan(ctx context.Context, root *FeatureQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fs.fns))
	for _, fn := range fs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (fs *FeatureSelect) Modify(modifiers ...func(s *sql.Selector)) *FeatureSelect {
	fs.modifiers = append(fs.modifiers, modifiers...)
	return fs
}
