// Code generated by ent, DO NOT EDIT.

package template

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
)

const (
	// Label holds the string label denoting the template type in the database.
	Label = "template"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldSystemOwned holds the string denoting the system_owned field in the database.
	FieldSystemOwned = "system_owned"
	// FieldInternalNotes holds the string denoting the internal_notes field in the database.
	FieldInternalNotes = "internal_notes"
	// FieldSystemInternalID holds the string denoting the system_internal_id field in the database.
	FieldSystemInternalID = "system_internal_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTemplateType holds the string denoting the template_type field in the database.
	FieldTemplateType = "template_type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldJsonconfig holds the string denoting the jsonconfig field in the database.
	FieldJsonconfig = "jsonconfig"
	// FieldUischema holds the string denoting the uischema field in the database.
	FieldUischema = "uischema"
	// FieldTrustCenterID holds the string denoting the trust_center_id field in the database.
	FieldTrustCenterID = "trust_center_id"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeDocuments holds the string denoting the documents edge name in mutations.
	EdgeDocuments = "documents"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "files"
	// EdgeTrustCenter holds the string denoting the trust_center edge name in mutations.
	EdgeTrustCenter = "trust_center"
	// Table holds the table name of the template in the database.
	Table = "templates"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "templates"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// DocumentsTable is the table that holds the documents relation/edge.
	DocumentsTable = "document_data"
	// DocumentsInverseTable is the table name for the DocumentData entity.
	// It exists in this package in order to avoid circular dependency with the "documentdata" package.
	DocumentsInverseTable = "document_data"
	// DocumentsColumn is the table column denoting the documents relation/edge.
	DocumentsColumn = "template_id"
	// FilesTable is the table that holds the files relation/edge. The primary key declared below.
	FilesTable = "template_files"
	// FilesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FilesInverseTable = "files"
	// TrustCenterTable is the table that holds the trust_center relation/edge.
	TrustCenterTable = "templates"
	// TrustCenterInverseTable is the table name for the TrustCenter entity.
	// It exists in this package in order to avoid circular dependency with the "trustcenter" package.
	TrustCenterInverseTable = "trust_centers"
	// TrustCenterColumn is the table column denoting the trust_center relation/edge.
	TrustCenterColumn = "trust_center_id"
)

// Columns holds all SQL columns for template fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTags,
	FieldOwnerID,
	FieldSystemOwned,
	FieldInternalNotes,
	FieldSystemInternalID,
	FieldName,
	FieldTemplateType,
	FieldDescription,
	FieldKind,
	FieldJsonconfig,
	FieldUischema,
	FieldTrustCenterID,
}

var (
	// FilesPrimaryKey and FilesColumn2 are the table columns denoting the
	// primary key for the files relation (M2M).
	FilesPrimaryKey = []string{"template_id", "file_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [10]ent.Hook
	Interceptors [4]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	OwnerIDValidator func(string) error
	// DefaultSystemOwned holds the default value on creation for the "system_owned" field.
	DefaultSystemOwned bool
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

const DefaultTemplateType enums.DocumentType = "DOCUMENT"

// TemplateTypeValidator is a validator for the "template_type" field enum values. It is called by the builders before save.
func TemplateTypeValidator(tt enums.DocumentType) error {
	switch tt.String() {
	case "ROOTTEMPLATE", "DOCUMENT":
		return nil
	default:
		return fmt.Errorf("template: invalid enum value for template_type field: %q", tt)
	}
}

const DefaultKind enums.TemplateKind = "QUESTIONNAIRE"

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k enums.TemplateKind) error {
	switch k.String() {
	case "QUESTIONNAIRE", "TRUSTCENTER_NDA":
		return nil
	default:
		return fmt.Errorf("template: invalid enum value for kind field: %q", k)
	}
}

// OrderOption defines the ordering options for the Template queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// BySystemOwned orders the results by the system_owned field.
func BySystemOwned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemOwned, opts...).ToFunc()
}

// ByInternalNotes orders the results by the internal_notes field.
func ByInternalNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalNotes, opts...).ToFunc()
}

// BySystemInternalID orders the results by the system_internal_id field.
func BySystemInternalID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemInternalID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTemplateType orders the results by the template_type field.
func ByTemplateType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemplateType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByTrustCenterID orders the results by the trust_center_id field.
func ByTrustCenterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrustCenterID, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByDocumentsCount orders the results by documents count.
func ByDocumentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDocumentsStep(), opts...)
	}
}

// ByDocuments orders the results by documents terms.
func ByDocuments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFilesCount orders the results by files count.
func ByFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFilesStep(), opts...)
	}
}

// ByFiles orders the results by files terms.
func ByFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTrustCenterField orders the results by trust_center field.
func ByTrustCenterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrustCenterStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newDocumentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DocumentsTable, DocumentsColumn),
	)
}
func newFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FilesTable, FilesPrimaryKey...),
	)
}
func newTrustCenterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrustCenterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TrustCenterTable, TrustCenterColumn),
	)
}

var (
	// enums.DocumentType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.DocumentType)(nil)
	// enums.DocumentType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.DocumentType)(nil)
)

var (
	// enums.TemplateKind must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.TemplateKind)(nil)
	// enums.TemplateKind must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.TemplateKind)(nil)
)
