// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/controlhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx/history"
)

// ControlHistoryCreate is the builder for creating a ControlHistory entity.
type ControlHistoryCreate struct {
	config
	mutation *ControlHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (_c *ControlHistoryCreate) SetHistoryTime(v time.Time) *ControlHistoryCreate {
	_c.mutation.SetHistoryTime(v)
	return _c
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableHistoryTime(v *time.Time) *ControlHistoryCreate {
	if v != nil {
		_c.SetHistoryTime(*v)
	}
	return _c
}

// SetRef sets the "ref" field.
func (_c *ControlHistoryCreate) SetRef(v string) *ControlHistoryCreate {
	_c.mutation.SetRef(v)
	return _c
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableRef(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetRef(*v)
	}
	return _c
}

// SetOperation sets the "operation" field.
func (_c *ControlHistoryCreate) SetOperation(v history.OpType) *ControlHistoryCreate {
	_c.mutation.SetOperation(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ControlHistoryCreate) SetCreatedAt(v time.Time) *ControlHistoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableCreatedAt(v *time.Time) *ControlHistoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ControlHistoryCreate) SetUpdatedAt(v time.Time) *ControlHistoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableUpdatedAt(v *time.Time) *ControlHistoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *ControlHistoryCreate) SetCreatedBy(v string) *ControlHistoryCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableCreatedBy(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *ControlHistoryCreate) SetUpdatedBy(v string) *ControlHistoryCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableUpdatedBy(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *ControlHistoryCreate) SetDeletedAt(v time.Time) *ControlHistoryCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableDeletedAt(v *time.Time) *ControlHistoryCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *ControlHistoryCreate) SetDeletedBy(v string) *ControlHistoryCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableDeletedBy(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetDisplayID sets the "display_id" field.
func (_c *ControlHistoryCreate) SetDisplayID(v string) *ControlHistoryCreate {
	_c.mutation.SetDisplayID(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *ControlHistoryCreate) SetTags(v []string) *ControlHistoryCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *ControlHistoryCreate) SetTitle(v string) *ControlHistoryCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableTitle(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetTitle(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *ControlHistoryCreate) SetDescription(v string) *ControlHistoryCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableDescription(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetReferenceID sets the "reference_id" field.
func (_c *ControlHistoryCreate) SetReferenceID(v string) *ControlHistoryCreate {
	_c.mutation.SetReferenceID(v)
	return _c
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableReferenceID(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetReferenceID(*v)
	}
	return _c
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (_c *ControlHistoryCreate) SetAuditorReferenceID(v string) *ControlHistoryCreate {
	_c.mutation.SetAuditorReferenceID(v)
	return _c
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableAuditorReferenceID(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetAuditorReferenceID(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *ControlHistoryCreate) SetStatus(v enums.ControlStatus) *ControlHistoryCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableStatus(v *enums.ControlStatus) *ControlHistoryCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetSource sets the "source" field.
func (_c *ControlHistoryCreate) SetSource(v enums.ControlSource) *ControlHistoryCreate {
	_c.mutation.SetSource(v)
	return _c
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableSource(v *enums.ControlSource) *ControlHistoryCreate {
	if v != nil {
		_c.SetSource(*v)
	}
	return _c
}

// SetReferenceFramework sets the "reference_framework" field.
func (_c *ControlHistoryCreate) SetReferenceFramework(v string) *ControlHistoryCreate {
	_c.mutation.SetReferenceFramework(v)
	return _c
}

// SetNillableReferenceFramework sets the "reference_framework" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableReferenceFramework(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetReferenceFramework(*v)
	}
	return _c
}

// SetControlType sets the "control_type" field.
func (_c *ControlHistoryCreate) SetControlType(v enums.ControlType) *ControlHistoryCreate {
	_c.mutation.SetControlType(v)
	return _c
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableControlType(v *enums.ControlType) *ControlHistoryCreate {
	if v != nil {
		_c.SetControlType(*v)
	}
	return _c
}

// SetCategory sets the "category" field.
func (_c *ControlHistoryCreate) SetCategory(v string) *ControlHistoryCreate {
	_c.mutation.SetCategory(v)
	return _c
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableCategory(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetCategory(*v)
	}
	return _c
}

// SetCategoryID sets the "category_id" field.
func (_c *ControlHistoryCreate) SetCategoryID(v string) *ControlHistoryCreate {
	_c.mutation.SetCategoryID(v)
	return _c
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableCategoryID(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetCategoryID(*v)
	}
	return _c
}

// SetSubcategory sets the "subcategory" field.
func (_c *ControlHistoryCreate) SetSubcategory(v string) *ControlHistoryCreate {
	_c.mutation.SetSubcategory(v)
	return _c
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableSubcategory(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetSubcategory(*v)
	}
	return _c
}

// SetMappedCategories sets the "mapped_categories" field.
func (_c *ControlHistoryCreate) SetMappedCategories(v []string) *ControlHistoryCreate {
	_c.mutation.SetMappedCategories(v)
	return _c
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (_c *ControlHistoryCreate) SetAssessmentObjectives(v []models.AssessmentObjective) *ControlHistoryCreate {
	_c.mutation.SetAssessmentObjectives(v)
	return _c
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (_c *ControlHistoryCreate) SetAssessmentMethods(v []models.AssessmentMethod) *ControlHistoryCreate {
	_c.mutation.SetAssessmentMethods(v)
	return _c
}

// SetControlQuestions sets the "control_questions" field.
func (_c *ControlHistoryCreate) SetControlQuestions(v []string) *ControlHistoryCreate {
	_c.mutation.SetControlQuestions(v)
	return _c
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (_c *ControlHistoryCreate) SetImplementationGuidance(v []models.ImplementationGuidance) *ControlHistoryCreate {
	_c.mutation.SetImplementationGuidance(v)
	return _c
}

// SetExampleEvidence sets the "example_evidence" field.
func (_c *ControlHistoryCreate) SetExampleEvidence(v []models.ExampleEvidence) *ControlHistoryCreate {
	_c.mutation.SetExampleEvidence(v)
	return _c
}

// SetReferences sets the "references" field.
func (_c *ControlHistoryCreate) SetReferences(v []models.Reference) *ControlHistoryCreate {
	_c.mutation.SetReferences(v)
	return _c
}

// SetControlOwnerID sets the "control_owner_id" field.
func (_c *ControlHistoryCreate) SetControlOwnerID(v string) *ControlHistoryCreate {
	_c.mutation.SetControlOwnerID(v)
	return _c
}

// SetNillableControlOwnerID sets the "control_owner_id" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableControlOwnerID(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetControlOwnerID(*v)
	}
	return _c
}

// SetDelegateID sets the "delegate_id" field.
func (_c *ControlHistoryCreate) SetDelegateID(v string) *ControlHistoryCreate {
	_c.mutation.SetDelegateID(v)
	return _c
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableDelegateID(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetDelegateID(*v)
	}
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *ControlHistoryCreate) SetOwnerID(v string) *ControlHistoryCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableOwnerID(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetSystemOwned sets the "system_owned" field.
func (_c *ControlHistoryCreate) SetSystemOwned(v bool) *ControlHistoryCreate {
	_c.mutation.SetSystemOwned(v)
	return _c
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableSystemOwned(v *bool) *ControlHistoryCreate {
	if v != nil {
		_c.SetSystemOwned(*v)
	}
	return _c
}

// SetInternalNotes sets the "internal_notes" field.
func (_c *ControlHistoryCreate) SetInternalNotes(v string) *ControlHistoryCreate {
	_c.mutation.SetInternalNotes(v)
	return _c
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableInternalNotes(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetInternalNotes(*v)
	}
	return _c
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_c *ControlHistoryCreate) SetSystemInternalID(v string) *ControlHistoryCreate {
	_c.mutation.SetSystemInternalID(v)
	return _c
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableSystemInternalID(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetSystemInternalID(*v)
	}
	return _c
}

// SetRefCode sets the "ref_code" field.
func (_c *ControlHistoryCreate) SetRefCode(v string) *ControlHistoryCreate {
	_c.mutation.SetRefCode(v)
	return _c
}

// SetStandardID sets the "standard_id" field.
func (_c *ControlHistoryCreate) SetStandardID(v string) *ControlHistoryCreate {
	_c.mutation.SetStandardID(v)
	return _c
}

// SetNillableStandardID sets the "standard_id" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableStandardID(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetStandardID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ControlHistoryCreate) SetID(v string) *ControlHistoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ControlHistoryCreate) SetNillableID(v *string) *ControlHistoryCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the ControlHistoryMutation object of the builder.
func (_c *ControlHistoryCreate) Mutation() *ControlHistoryMutation {
	return _c.mutation
}

// Save creates the ControlHistory in the database.
func (_c *ControlHistoryCreate) Save(ctx context.Context) (*ControlHistory, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ControlHistoryCreate) SaveX(ctx context.Context) *ControlHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ControlHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ControlHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ControlHistoryCreate) defaults() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		if controlhistory.DefaultHistoryTime == nil {
			return fmt.Errorf("generated: uninitialized controlhistory.DefaultHistoryTime (forgotten import generated/runtime?)")
		}
		v := controlhistory.DefaultHistoryTime()
		_c.mutation.SetHistoryTime(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if controlhistory.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlhistory.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := controlhistory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if controlhistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized controlhistory.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := controlhistory.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := controlhistory.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := controlhistory.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Source(); !ok {
		v := controlhistory.DefaultSource
		_c.mutation.SetSource(v)
	}
	if _, ok := _c.mutation.ControlType(); !ok {
		v := controlhistory.DefaultControlType
		_c.mutation.SetControlType(v)
	}
	if _, ok := _c.mutation.SystemOwned(); !ok {
		v := controlhistory.DefaultSystemOwned
		_c.mutation.SetSystemOwned(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if controlhistory.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized controlhistory.DefaultID (forgotten import generated/runtime?)")
		}
		v := controlhistory.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *ControlHistoryCreate) check() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "ControlHistory.history_time"`)}
	}
	if _, ok := _c.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "ControlHistory.operation"`)}
	}
	if v, ok := _c.mutation.Operation(); ok {
		if err := controlhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "ControlHistory.operation": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "ControlHistory.display_id"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := controlhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ControlHistory.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Source(); ok {
		if err := controlhistory.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "ControlHistory.source": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ControlType(); ok {
		if err := controlhistory.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "ControlHistory.control_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.RefCode(); !ok {
		return &ValidationError{Name: "ref_code", err: errors.New(`generated: missing required field "ControlHistory.ref_code"`)}
	}
	return nil
}

func (_c *ControlHistoryCreate) sqlSave(ctx context.Context) (*ControlHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ControlHistory.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ControlHistoryCreate) createSpec() (*ControlHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ControlHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(controlhistory.Table, sqlgraph.NewFieldSpec(controlhistory.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.ControlHistory
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.HistoryTime(); ok {
		_spec.SetField(controlhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := _c.mutation.Ref(); ok {
		_spec.SetField(controlhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := _c.mutation.Operation(); ok {
		_spec.SetField(controlhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(controlhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(controlhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(controlhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(controlhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(controlhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(controlhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.DisplayID(); ok {
		_spec.SetField(controlhistory.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(controlhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(controlhistory.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(controlhistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.ReferenceID(); ok {
		_spec.SetField(controlhistory.FieldReferenceID, field.TypeString, value)
		_node.ReferenceID = value
	}
	if value, ok := _c.mutation.AuditorReferenceID(); ok {
		_spec.SetField(controlhistory.FieldAuditorReferenceID, field.TypeString, value)
		_node.AuditorReferenceID = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(controlhistory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Source(); ok {
		_spec.SetField(controlhistory.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	if value, ok := _c.mutation.ReferenceFramework(); ok {
		_spec.SetField(controlhistory.FieldReferenceFramework, field.TypeString, value)
		_node.ReferenceFramework = &value
	}
	if value, ok := _c.mutation.ControlType(); ok {
		_spec.SetField(controlhistory.FieldControlType, field.TypeEnum, value)
		_node.ControlType = value
	}
	if value, ok := _c.mutation.Category(); ok {
		_spec.SetField(controlhistory.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := _c.mutation.CategoryID(); ok {
		_spec.SetField(controlhistory.FieldCategoryID, field.TypeString, value)
		_node.CategoryID = value
	}
	if value, ok := _c.mutation.Subcategory(); ok {
		_spec.SetField(controlhistory.FieldSubcategory, field.TypeString, value)
		_node.Subcategory = value
	}
	if value, ok := _c.mutation.MappedCategories(); ok {
		_spec.SetField(controlhistory.FieldMappedCategories, field.TypeJSON, value)
		_node.MappedCategories = value
	}
	if value, ok := _c.mutation.AssessmentObjectives(); ok {
		_spec.SetField(controlhistory.FieldAssessmentObjectives, field.TypeJSON, value)
		_node.AssessmentObjectives = value
	}
	if value, ok := _c.mutation.AssessmentMethods(); ok {
		_spec.SetField(controlhistory.FieldAssessmentMethods, field.TypeJSON, value)
		_node.AssessmentMethods = value
	}
	if value, ok := _c.mutation.ControlQuestions(); ok {
		_spec.SetField(controlhistory.FieldControlQuestions, field.TypeJSON, value)
		_node.ControlQuestions = value
	}
	if value, ok := _c.mutation.ImplementationGuidance(); ok {
		_spec.SetField(controlhistory.FieldImplementationGuidance, field.TypeJSON, value)
		_node.ImplementationGuidance = value
	}
	if value, ok := _c.mutation.ExampleEvidence(); ok {
		_spec.SetField(controlhistory.FieldExampleEvidence, field.TypeJSON, value)
		_node.ExampleEvidence = value
	}
	if value, ok := _c.mutation.References(); ok {
		_spec.SetField(controlhistory.FieldReferences, field.TypeJSON, value)
		_node.References = value
	}
	if value, ok := _c.mutation.ControlOwnerID(); ok {
		_spec.SetField(controlhistory.FieldControlOwnerID, field.TypeString, value)
		_node.ControlOwnerID = &value
	}
	if value, ok := _c.mutation.DelegateID(); ok {
		_spec.SetField(controlhistory.FieldDelegateID, field.TypeString, value)
		_node.DelegateID = value
	}
	if value, ok := _c.mutation.OwnerID(); ok {
		_spec.SetField(controlhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := _c.mutation.SystemOwned(); ok {
		_spec.SetField(controlhistory.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := _c.mutation.InternalNotes(); ok {
		_spec.SetField(controlhistory.FieldInternalNotes, field.TypeString, value)
		_node.InternalNotes = &value
	}
	if value, ok := _c.mutation.SystemInternalID(); ok {
		_spec.SetField(controlhistory.FieldSystemInternalID, field.TypeString, value)
		_node.SystemInternalID = &value
	}
	if value, ok := _c.mutation.RefCode(); ok {
		_spec.SetField(controlhistory.FieldRefCode, field.TypeString, value)
		_node.RefCode = value
	}
	if value, ok := _c.mutation.StandardID(); ok {
		_spec.SetField(controlhistory.FieldStandardID, field.TypeString, value)
		_node.StandardID = value
	}
	return _node, _spec
}

// ControlHistoryCreateBulk is the builder for creating many ControlHistory entities in bulk.
type ControlHistoryCreateBulk struct {
	config
	err      error
	builders []*ControlHistoryCreate
}

// Save creates the ControlHistory entities in the database.
func (_c *ControlHistoryCreateBulk) Save(ctx context.Context) ([]*ControlHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ControlHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ControlHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ControlHistoryCreateBulk) SaveX(ctx context.Context) []*ControlHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ControlHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ControlHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
