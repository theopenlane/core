// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EventQuery is the builder for querying Event entities.
type EventQuery struct {
	config
	ctx                          *QueryContext
	order                        []event.OrderOption
	inters                       []Interceptor
	predicates                   []predicate.Event
	withUser                     *UserQuery
	withGroup                    *GroupQuery
	withIntegration              *IntegrationQuery
	withOrganization             *OrganizationQuery
	withInvite                   *InviteQuery
	withPersonalAccessToken      *PersonalAccessTokenQuery
	withHush                     *HushQuery
	withOrgmembership            *OrgMembershipQuery
	withGroupmembership          *GroupMembershipQuery
	withSubscriber               *SubscriberQuery
	withFile                     *FileQuery
	withFKs                      bool
	loadTotal                    []func(context.Context, []*Event) error
	modifiers                    []func(*sql.Selector)
	withNamedUser                map[string]*UserQuery
	withNamedGroup               map[string]*GroupQuery
	withNamedIntegration         map[string]*IntegrationQuery
	withNamedOrganization        map[string]*OrganizationQuery
	withNamedInvite              map[string]*InviteQuery
	withNamedPersonalAccessToken map[string]*PersonalAccessTokenQuery
	withNamedHush                map[string]*HushQuery
	withNamedOrgmembership       map[string]*OrgMembershipQuery
	withNamedGroupmembership     map[string]*GroupMembershipQuery
	withNamedSubscriber          map[string]*SubscriberQuery
	withNamedFile                map[string]*FileQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EventQuery builder.
func (eq *EventQuery) Where(ps ...predicate.Event) *EventQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EventQuery) Limit(limit int) *EventQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *EventQuery) Offset(offset int) *EventQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EventQuery) Unique(unique bool) *EventQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EventQuery) Order(o ...event.OrderOption) *EventQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryUser chains the current query on the "user" edge.
func (eq *EventQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.UserTable, event.UserPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserEvents
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroup chains the current query on the "group" edge.
func (eq *EventQuery) QueryGroup() *GroupQuery {
	query := (&GroupClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.GroupTable, event.GroupPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupEvents
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIntegration chains the current query on the "integration" edge.
func (eq *EventQuery) QueryIntegration() *IntegrationQuery {
	query := (&IntegrationClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(integration.Table, integration.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.IntegrationTable, event.IntegrationPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Integration
		step.Edge.Schema = schemaConfig.IntegrationEvents
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (eq *EventQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.OrganizationTable, event.OrganizationPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrganizationEvents
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvite chains the current query on the "invite" edge.
func (eq *EventQuery) QueryInvite() *InviteQuery {
	query := (&InviteClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.InviteTable, event.InvitePrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Invite
		step.Edge.Schema = schemaConfig.InviteEvents
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPersonalAccessToken chains the current query on the "personal_access_token" edge.
func (eq *EventQuery) QueryPersonalAccessToken() *PersonalAccessTokenQuery {
	query := (&PersonalAccessTokenClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(personalaccesstoken.Table, personalaccesstoken.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.PersonalAccessTokenTable, event.PersonalAccessTokenPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.PersonalAccessToken
		step.Edge.Schema = schemaConfig.PersonalAccessTokenEvents
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHush chains the current query on the "hush" edge.
func (eq *EventQuery) QueryHush() *HushQuery {
	query := (&HushClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(hush.Table, hush.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.HushTable, event.HushPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Hush
		step.Edge.Schema = schemaConfig.HushEvents
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgmembership chains the current query on the "orgmembership" edge.
func (eq *EventQuery) QueryOrgmembership() *OrgMembershipQuery {
	query := (&OrgMembershipClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(orgmembership.Table, orgmembership.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.OrgmembershipTable, event.OrgmembershipPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.OrgMembership
		step.Edge.Schema = schemaConfig.OrgMembershipEvents
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroupmembership chains the current query on the "groupmembership" edge.
func (eq *EventQuery) QueryGroupmembership() *GroupMembershipQuery {
	query := (&GroupMembershipClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(groupmembership.Table, groupmembership.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.GroupmembershipTable, event.GroupmembershipPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.GroupMembership
		step.Edge.Schema = schemaConfig.GroupMembershipEvents
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscriber chains the current query on the "subscriber" edge.
func (eq *EventQuery) QuerySubscriber() *SubscriberQuery {
	query := (&SubscriberClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(subscriber.Table, subscriber.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.SubscriberTable, event.SubscriberPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Subscriber
		step.Edge.Schema = schemaConfig.SubscriberEvents
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFile chains the current query on the "file" edge.
func (eq *EventQuery) QueryFile() *FileQuery {
	query := (&FileClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.FileTable, event.FilePrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.FileEvents
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Event entity from the query.
// Returns a *NotFoundError when no Event was found.
func (eq *EventQuery) First(ctx context.Context) (*Event, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{event.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EventQuery) FirstX(ctx context.Context) *Event {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Event ID from the query.
// Returns a *NotFoundError when no Event ID was found.
func (eq *EventQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{event.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EventQuery) FirstIDX(ctx context.Context) string {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Event entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Event entity is found.
// Returns a *NotFoundError when no Event entities are found.
func (eq *EventQuery) Only(ctx context.Context) (*Event, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{event.Label}
	default:
		return nil, &NotSingularError{event.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EventQuery) OnlyX(ctx context.Context) *Event {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Event ID in the query.
// Returns a *NotSingularError when more than one Event ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EventQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{event.Label}
	default:
		err = &NotSingularError{event.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EventQuery) OnlyIDX(ctx context.Context) string {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Events.
func (eq *EventQuery) All(ctx context.Context) ([]*Event, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryAll)
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Event, *EventQuery]()
	return withInterceptors[[]*Event](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EventQuery) AllX(ctx context.Context) []*Event {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Event IDs.
func (eq *EventQuery) IDs(ctx context.Context) (ids []string, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryIDs)
	if err = eq.Select(event.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EventQuery) IDsX(ctx context.Context) []string {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EventQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryCount)
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EventQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EventQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EventQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryExist)
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EventQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EventQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EventQuery) Clone() *EventQuery {
	if eq == nil {
		return nil
	}
	return &EventQuery{
		config:                  eq.config,
		ctx:                     eq.ctx.Clone(),
		order:                   append([]event.OrderOption{}, eq.order...),
		inters:                  append([]Interceptor{}, eq.inters...),
		predicates:              append([]predicate.Event{}, eq.predicates...),
		withUser:                eq.withUser.Clone(),
		withGroup:               eq.withGroup.Clone(),
		withIntegration:         eq.withIntegration.Clone(),
		withOrganization:        eq.withOrganization.Clone(),
		withInvite:              eq.withInvite.Clone(),
		withPersonalAccessToken: eq.withPersonalAccessToken.Clone(),
		withHush:                eq.withHush.Clone(),
		withOrgmembership:       eq.withOrgmembership.Clone(),
		withGroupmembership:     eq.withGroupmembership.Clone(),
		withSubscriber:          eq.withSubscriber.Clone(),
		withFile:                eq.withFile.Clone(),
		// clone intermediate query.
		sql:       eq.sql.Clone(),
		path:      eq.path,
		modifiers: append([]func(*sql.Selector){}, eq.modifiers...),
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithUser(opts ...func(*UserQuery)) *EventQuery {
	query := (&UserClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withUser = query
	return eq
}

// WithGroup tells the query-builder to eager-load the nodes that are connected to
// the "group" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithGroup(opts ...func(*GroupQuery)) *EventQuery {
	query := (&GroupClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withGroup = query
	return eq
}

// WithIntegration tells the query-builder to eager-load the nodes that are connected to
// the "integration" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithIntegration(opts ...func(*IntegrationQuery)) *EventQuery {
	query := (&IntegrationClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withIntegration = query
	return eq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithOrganization(opts ...func(*OrganizationQuery)) *EventQuery {
	query := (&OrganizationClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withOrganization = query
	return eq
}

// WithInvite tells the query-builder to eager-load the nodes that are connected to
// the "invite" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithInvite(opts ...func(*InviteQuery)) *EventQuery {
	query := (&InviteClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withInvite = query
	return eq
}

// WithPersonalAccessToken tells the query-builder to eager-load the nodes that are connected to
// the "personal_access_token" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithPersonalAccessToken(opts ...func(*PersonalAccessTokenQuery)) *EventQuery {
	query := (&PersonalAccessTokenClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withPersonalAccessToken = query
	return eq
}

// WithHush tells the query-builder to eager-load the nodes that are connected to
// the "hush" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithHush(opts ...func(*HushQuery)) *EventQuery {
	query := (&HushClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withHush = query
	return eq
}

// WithOrgmembership tells the query-builder to eager-load the nodes that are connected to
// the "orgmembership" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithOrgmembership(opts ...func(*OrgMembershipQuery)) *EventQuery {
	query := (&OrgMembershipClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withOrgmembership = query
	return eq
}

// WithGroupmembership tells the query-builder to eager-load the nodes that are connected to
// the "groupmembership" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithGroupmembership(opts ...func(*GroupMembershipQuery)) *EventQuery {
	query := (&GroupMembershipClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withGroupmembership = query
	return eq
}

// WithSubscriber tells the query-builder to eager-load the nodes that are connected to
// the "subscriber" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithSubscriber(opts ...func(*SubscriberQuery)) *EventQuery {
	query := (&SubscriberClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withSubscriber = query
	return eq
}

// WithFile tells the query-builder to eager-load the nodes that are connected to
// the "file" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithFile(opts ...func(*FileQuery)) *EventQuery {
	query := (&FileClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withFile = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Event.Query().
//		GroupBy(event.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (eq *EventQuery) GroupBy(field string, fields ...string) *EventGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EventGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = event.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Event.Query().
//		Select(event.FieldCreatedAt).
//		Scan(ctx, &v)
func (eq *EventQuery) Select(fields ...string) *EventSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &EventSelect{EventQuery: eq}
	sbuild.label = event.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EventSelect configured with the given aggregations.
func (eq *EventQuery) Aggregate(fns ...AggregateFunc) *EventSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EventQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !event.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	return nil
}

func (eq *EventQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Event, error) {
	var (
		nodes       = []*Event{}
		withFKs     = eq.withFKs
		_spec       = eq.querySpec()
		loadedTypes = [11]bool{
			eq.withUser != nil,
			eq.withGroup != nil,
			eq.withIntegration != nil,
			eq.withOrganization != nil,
			eq.withInvite != nil,
			eq.withPersonalAccessToken != nil,
			eq.withHush != nil,
			eq.withOrgmembership != nil,
			eq.withGroupmembership != nil,
			eq.withSubscriber != nil,
			eq.withFile != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, event.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Event).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Event{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = eq.schemaConfig.Event
	ctx = internal.NewSchemaConfigContext(ctx, eq.schemaConfig)
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withUser; query != nil {
		if err := eq.loadUser(ctx, query, nodes,
			func(n *Event) { n.Edges.User = []*User{} },
			func(n *Event, e *User) { n.Edges.User = append(n.Edges.User, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withGroup; query != nil {
		if err := eq.loadGroup(ctx, query, nodes,
			func(n *Event) { n.Edges.Group = []*Group{} },
			func(n *Event, e *Group) { n.Edges.Group = append(n.Edges.Group, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withIntegration; query != nil {
		if err := eq.loadIntegration(ctx, query, nodes,
			func(n *Event) { n.Edges.Integration = []*Integration{} },
			func(n *Event, e *Integration) { n.Edges.Integration = append(n.Edges.Integration, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withOrganization; query != nil {
		if err := eq.loadOrganization(ctx, query, nodes,
			func(n *Event) { n.Edges.Organization = []*Organization{} },
			func(n *Event, e *Organization) { n.Edges.Organization = append(n.Edges.Organization, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withInvite; query != nil {
		if err := eq.loadInvite(ctx, query, nodes,
			func(n *Event) { n.Edges.Invite = []*Invite{} },
			func(n *Event, e *Invite) { n.Edges.Invite = append(n.Edges.Invite, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withPersonalAccessToken; query != nil {
		if err := eq.loadPersonalAccessToken(ctx, query, nodes,
			func(n *Event) { n.Edges.PersonalAccessToken = []*PersonalAccessToken{} },
			func(n *Event, e *PersonalAccessToken) {
				n.Edges.PersonalAccessToken = append(n.Edges.PersonalAccessToken, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withHush; query != nil {
		if err := eq.loadHush(ctx, query, nodes,
			func(n *Event) { n.Edges.Hush = []*Hush{} },
			func(n *Event, e *Hush) { n.Edges.Hush = append(n.Edges.Hush, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withOrgmembership; query != nil {
		if err := eq.loadOrgmembership(ctx, query, nodes,
			func(n *Event) { n.Edges.Orgmembership = []*OrgMembership{} },
			func(n *Event, e *OrgMembership) { n.Edges.Orgmembership = append(n.Edges.Orgmembership, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withGroupmembership; query != nil {
		if err := eq.loadGroupmembership(ctx, query, nodes,
			func(n *Event) { n.Edges.Groupmembership = []*GroupMembership{} },
			func(n *Event, e *GroupMembership) { n.Edges.Groupmembership = append(n.Edges.Groupmembership, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withSubscriber; query != nil {
		if err := eq.loadSubscriber(ctx, query, nodes,
			func(n *Event) { n.Edges.Subscriber = []*Subscriber{} },
			func(n *Event, e *Subscriber) { n.Edges.Subscriber = append(n.Edges.Subscriber, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withFile; query != nil {
		if err := eq.loadFile(ctx, query, nodes,
			func(n *Event) { n.Edges.File = []*File{} },
			func(n *Event, e *File) { n.Edges.File = append(n.Edges.File, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedUser {
		if err := eq.loadUser(ctx, query, nodes,
			func(n *Event) { n.appendNamedUser(name) },
			func(n *Event, e *User) { n.appendNamedUser(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedGroup {
		if err := eq.loadGroup(ctx, query, nodes,
			func(n *Event) { n.appendNamedGroup(name) },
			func(n *Event, e *Group) { n.appendNamedGroup(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedIntegration {
		if err := eq.loadIntegration(ctx, query, nodes,
			func(n *Event) { n.appendNamedIntegration(name) },
			func(n *Event, e *Integration) { n.appendNamedIntegration(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedOrganization {
		if err := eq.loadOrganization(ctx, query, nodes,
			func(n *Event) { n.appendNamedOrganization(name) },
			func(n *Event, e *Organization) { n.appendNamedOrganization(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedInvite {
		if err := eq.loadInvite(ctx, query, nodes,
			func(n *Event) { n.appendNamedInvite(name) },
			func(n *Event, e *Invite) { n.appendNamedInvite(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedPersonalAccessToken {
		if err := eq.loadPersonalAccessToken(ctx, query, nodes,
			func(n *Event) { n.appendNamedPersonalAccessToken(name) },
			func(n *Event, e *PersonalAccessToken) { n.appendNamedPersonalAccessToken(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedHush {
		if err := eq.loadHush(ctx, query, nodes,
			func(n *Event) { n.appendNamedHush(name) },
			func(n *Event, e *Hush) { n.appendNamedHush(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedOrgmembership {
		if err := eq.loadOrgmembership(ctx, query, nodes,
			func(n *Event) { n.appendNamedOrgmembership(name) },
			func(n *Event, e *OrgMembership) { n.appendNamedOrgmembership(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedGroupmembership {
		if err := eq.loadGroupmembership(ctx, query, nodes,
			func(n *Event) { n.appendNamedGroupmembership(name) },
			func(n *Event, e *GroupMembership) { n.appendNamedGroupmembership(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedSubscriber {
		if err := eq.loadSubscriber(ctx, query, nodes,
			func(n *Event) { n.appendNamedSubscriber(name) },
			func(n *Event, e *Subscriber) { n.appendNamedSubscriber(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedFile {
		if err := eq.loadFile(ctx, query, nodes,
			func(n *Event) { n.appendNamedFile(name) },
			func(n *Event, e *File) { n.appendNamedFile(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range eq.loadTotal {
		if err := eq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EventQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*Event, init func(*Event), assign func(*Event, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.UserTable)
		joinT.Schema(eq.schemaConfig.UserEvents)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(event.UserPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.UserPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.UserPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "user" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EventQuery) loadGroup(ctx context.Context, query *GroupQuery, nodes []*Event, init func(*Event), assign func(*Event, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.GroupTable)
		joinT.Schema(eq.schemaConfig.GroupEvents)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(event.GroupPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.GroupPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.GroupPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "group" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EventQuery) loadIntegration(ctx context.Context, query *IntegrationQuery, nodes []*Event, init func(*Event), assign func(*Event, *Integration)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.IntegrationTable)
		joinT.Schema(eq.schemaConfig.IntegrationEvents)
		s.Join(joinT).On(s.C(integration.FieldID), joinT.C(event.IntegrationPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.IntegrationPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.IntegrationPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Integration](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "integration" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EventQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*Event, init func(*Event), assign func(*Event, *Organization)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.OrganizationTable)
		joinT.Schema(eq.schemaConfig.OrganizationEvents)
		s.Join(joinT).On(s.C(organization.FieldID), joinT.C(event.OrganizationPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.OrganizationPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.OrganizationPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Organization](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "organization" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EventQuery) loadInvite(ctx context.Context, query *InviteQuery, nodes []*Event, init func(*Event), assign func(*Event, *Invite)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.InviteTable)
		joinT.Schema(eq.schemaConfig.InviteEvents)
		s.Join(joinT).On(s.C(invite.FieldID), joinT.C(event.InvitePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.InvitePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.InvitePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Invite](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "invite" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EventQuery) loadPersonalAccessToken(ctx context.Context, query *PersonalAccessTokenQuery, nodes []*Event, init func(*Event), assign func(*Event, *PersonalAccessToken)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.PersonalAccessTokenTable)
		joinT.Schema(eq.schemaConfig.PersonalAccessTokenEvents)
		s.Join(joinT).On(s.C(personalaccesstoken.FieldID), joinT.C(event.PersonalAccessTokenPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.PersonalAccessTokenPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.PersonalAccessTokenPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*PersonalAccessToken](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "personal_access_token" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EventQuery) loadHush(ctx context.Context, query *HushQuery, nodes []*Event, init func(*Event), assign func(*Event, *Hush)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.HushTable)
		joinT.Schema(eq.schemaConfig.HushEvents)
		s.Join(joinT).On(s.C(hush.FieldID), joinT.C(event.HushPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.HushPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.HushPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Hush](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "hush" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EventQuery) loadOrgmembership(ctx context.Context, query *OrgMembershipQuery, nodes []*Event, init func(*Event), assign func(*Event, *OrgMembership)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.OrgmembershipTable)
		joinT.Schema(eq.schemaConfig.OrgMembershipEvents)
		s.Join(joinT).On(s.C(orgmembership.FieldID), joinT.C(event.OrgmembershipPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.OrgmembershipPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.OrgmembershipPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*OrgMembership](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "orgmembership" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EventQuery) loadGroupmembership(ctx context.Context, query *GroupMembershipQuery, nodes []*Event, init func(*Event), assign func(*Event, *GroupMembership)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.GroupmembershipTable)
		joinT.Schema(eq.schemaConfig.GroupMembershipEvents)
		s.Join(joinT).On(s.C(groupmembership.FieldID), joinT.C(event.GroupmembershipPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.GroupmembershipPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.GroupmembershipPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*GroupMembership](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "groupmembership" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EventQuery) loadSubscriber(ctx context.Context, query *SubscriberQuery, nodes []*Event, init func(*Event), assign func(*Event, *Subscriber)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.SubscriberTable)
		joinT.Schema(eq.schemaConfig.SubscriberEvents)
		s.Join(joinT).On(s.C(subscriber.FieldID), joinT.C(event.SubscriberPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.SubscriberPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.SubscriberPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Subscriber](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subscriber" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EventQuery) loadFile(ctx context.Context, query *FileQuery, nodes []*Event, init func(*Event), assign func(*Event, *File)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.FileTable)
		joinT.Schema(eq.schemaConfig.FileEvents)
		s.Join(joinT).On(s.C(file.FieldID), joinT.C(event.FilePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.FilePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.FilePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*File](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "file" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (eq *EventQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Schema = eq.schemaConfig.Event
	ctx = internal.NewSchemaConfigContext(ctx, eq.schemaConfig)
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EventQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for i := range fields {
			if fields[i] != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EventQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(event.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = event.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(eq.schemaConfig.Event)
	ctx = internal.NewSchemaConfigContext(ctx, eq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range eq.modifiers {
		m(selector)
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (eq *EventQuery) Modify(modifiers ...func(s *sql.Selector)) *EventSelect {
	eq.modifiers = append(eq.modifiers, modifiers...)
	return eq.Select()
}

// WithNamedUser tells the query-builder to eager-load the nodes that are connected to the "user"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithNamedUser(name string, opts ...func(*UserQuery)) *EventQuery {
	query := (&UserClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedUser == nil {
		eq.withNamedUser = make(map[string]*UserQuery)
	}
	eq.withNamedUser[name] = query
	return eq
}

// WithNamedGroup tells the query-builder to eager-load the nodes that are connected to the "group"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithNamedGroup(name string, opts ...func(*GroupQuery)) *EventQuery {
	query := (&GroupClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedGroup == nil {
		eq.withNamedGroup = make(map[string]*GroupQuery)
	}
	eq.withNamedGroup[name] = query
	return eq
}

// WithNamedIntegration tells the query-builder to eager-load the nodes that are connected to the "integration"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithNamedIntegration(name string, opts ...func(*IntegrationQuery)) *EventQuery {
	query := (&IntegrationClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedIntegration == nil {
		eq.withNamedIntegration = make(map[string]*IntegrationQuery)
	}
	eq.withNamedIntegration[name] = query
	return eq
}

// WithNamedOrganization tells the query-builder to eager-load the nodes that are connected to the "organization"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithNamedOrganization(name string, opts ...func(*OrganizationQuery)) *EventQuery {
	query := (&OrganizationClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedOrganization == nil {
		eq.withNamedOrganization = make(map[string]*OrganizationQuery)
	}
	eq.withNamedOrganization[name] = query
	return eq
}

// WithNamedInvite tells the query-builder to eager-load the nodes that are connected to the "invite"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithNamedInvite(name string, opts ...func(*InviteQuery)) *EventQuery {
	query := (&InviteClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedInvite == nil {
		eq.withNamedInvite = make(map[string]*InviteQuery)
	}
	eq.withNamedInvite[name] = query
	return eq
}

// WithNamedPersonalAccessToken tells the query-builder to eager-load the nodes that are connected to the "personal_access_token"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithNamedPersonalAccessToken(name string, opts ...func(*PersonalAccessTokenQuery)) *EventQuery {
	query := (&PersonalAccessTokenClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedPersonalAccessToken == nil {
		eq.withNamedPersonalAccessToken = make(map[string]*PersonalAccessTokenQuery)
	}
	eq.withNamedPersonalAccessToken[name] = query
	return eq
}

// WithNamedHush tells the query-builder to eager-load the nodes that are connected to the "hush"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithNamedHush(name string, opts ...func(*HushQuery)) *EventQuery {
	query := (&HushClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedHush == nil {
		eq.withNamedHush = make(map[string]*HushQuery)
	}
	eq.withNamedHush[name] = query
	return eq
}

// WithNamedOrgmembership tells the query-builder to eager-load the nodes that are connected to the "orgmembership"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithNamedOrgmembership(name string, opts ...func(*OrgMembershipQuery)) *EventQuery {
	query := (&OrgMembershipClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedOrgmembership == nil {
		eq.withNamedOrgmembership = make(map[string]*OrgMembershipQuery)
	}
	eq.withNamedOrgmembership[name] = query
	return eq
}

// WithNamedGroupmembership tells the query-builder to eager-load the nodes that are connected to the "groupmembership"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithNamedGroupmembership(name string, opts ...func(*GroupMembershipQuery)) *EventQuery {
	query := (&GroupMembershipClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedGroupmembership == nil {
		eq.withNamedGroupmembership = make(map[string]*GroupMembershipQuery)
	}
	eq.withNamedGroupmembership[name] = query
	return eq
}

// WithNamedSubscriber tells the query-builder to eager-load the nodes that are connected to the "subscriber"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithNamedSubscriber(name string, opts ...func(*SubscriberQuery)) *EventQuery {
	query := (&SubscriberClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedSubscriber == nil {
		eq.withNamedSubscriber = make(map[string]*SubscriberQuery)
	}
	eq.withNamedSubscriber[name] = query
	return eq
}

// WithNamedFile tells the query-builder to eager-load the nodes that are connected to the "file"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EventQuery) WithNamedFile(name string, opts ...func(*FileQuery)) *EventQuery {
	query := (&FileClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedFile == nil {
		eq.withNamedFile = make(map[string]*FileQuery)
	}
	eq.withNamedFile[name] = query
	return eq
}

// EventGroupBy is the group-by builder for Event entities.
type EventGroupBy struct {
	selector
	build *EventQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EventGroupBy) Aggregate(fns ...AggregateFunc) *EventGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EventGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, ent.OpQueryGroupBy)
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventQuery, *EventGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EventGroupBy) sqlScan(ctx context.Context, root *EventQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EventSelect is the builder for selecting fields of Event entities.
type EventSelect struct {
	*EventQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EventSelect) Aggregate(fns ...AggregateFunc) *EventSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EventSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, ent.OpQuerySelect)
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventQuery, *EventSelect](ctx, es.EventQuery, es, es.inters, v)
}

func (es *EventSelect) sqlScan(ctx context.Context, root *EventQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (es *EventSelect) Modify(modifiers ...func(s *sql.Selector)) *EventSelect {
	es.modifiers = append(es.modifiers, modifiers...)
	return es
}
