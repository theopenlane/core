// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EventQuery is the builder for querying Event entities.
type EventQuery struct {
	config
	ctx                           *QueryContext
	order                         []event.OrderOption
	inters                        []Interceptor
	predicates                    []predicate.Event
	withUsers                     *UserQuery
	withGroups                    *GroupQuery
	withIntegrations              *IntegrationQuery
	withOrganizations             *OrganizationQuery
	withInvites                   *InviteQuery
	withPersonalAccessTokens      *PersonalAccessTokenQuery
	withSecrets                   *HushQuery
	withOrgMemberships            *OrgMembershipQuery
	withGroupMemberships          *GroupMembershipQuery
	withSubscribers               *SubscriberQuery
	withFiles                     *FileQuery
	withOrgSubscriptions          *OrgSubscriptionQuery
	withFKs                       bool
	loadTotal                     []func(context.Context, []*Event) error
	modifiers                     []func(*sql.Selector)
	withNamedUsers                map[string]*UserQuery
	withNamedGroups               map[string]*GroupQuery
	withNamedIntegrations         map[string]*IntegrationQuery
	withNamedOrganizations        map[string]*OrganizationQuery
	withNamedInvites              map[string]*InviteQuery
	withNamedPersonalAccessTokens map[string]*PersonalAccessTokenQuery
	withNamedSecrets              map[string]*HushQuery
	withNamedOrgMemberships       map[string]*OrgMembershipQuery
	withNamedGroupMemberships     map[string]*GroupMembershipQuery
	withNamedSubscribers          map[string]*SubscriberQuery
	withNamedFiles                map[string]*FileQuery
	withNamedOrgSubscriptions     map[string]*OrgSubscriptionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EventQuery builder.
func (_q *EventQuery) Where(ps ...predicate.Event) *EventQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *EventQuery) Limit(limit int) *EventQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *EventQuery) Offset(offset int) *EventQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *EventQuery) Unique(unique bool) *EventQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *EventQuery) Order(o ...event.OrderOption) *EventQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryUsers chains the current query on the "users" edge.
func (_q *EventQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.UsersTable, event.UsersPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroups chains the current query on the "groups" edge.
func (_q *EventQuery) QueryGroups() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.GroupsTable, event.GroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIntegrations chains the current query on the "integrations" edge.
func (_q *EventQuery) QueryIntegrations() *IntegrationQuery {
	query := (&IntegrationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(integration.Table, integration.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.IntegrationsTable, event.IntegrationsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Integration
		step.Edge.Schema = schemaConfig.IntegrationEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganizations chains the current query on the "organizations" edge.
func (_q *EventQuery) QueryOrganizations() *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.OrganizationsTable, event.OrganizationsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrganizationEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvites chains the current query on the "invites" edge.
func (_q *EventQuery) QueryInvites() *InviteQuery {
	query := (&InviteClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.InvitesTable, event.InvitesPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Invite
		step.Edge.Schema = schemaConfig.InviteEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPersonalAccessTokens chains the current query on the "personal_access_tokens" edge.
func (_q *EventQuery) QueryPersonalAccessTokens() *PersonalAccessTokenQuery {
	query := (&PersonalAccessTokenClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(personalaccesstoken.Table, personalaccesstoken.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.PersonalAccessTokensTable, event.PersonalAccessTokensPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.PersonalAccessToken
		step.Edge.Schema = schemaConfig.PersonalAccessTokenEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySecrets chains the current query on the "secrets" edge.
func (_q *EventQuery) QuerySecrets() *HushQuery {
	query := (&HushClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(hush.Table, hush.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.SecretsTable, event.SecretsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Hush
		step.Edge.Schema = schemaConfig.HushEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgMemberships chains the current query on the "org_memberships" edge.
func (_q *EventQuery) QueryOrgMemberships() *OrgMembershipQuery {
	query := (&OrgMembershipClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(orgmembership.Table, orgmembership.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.OrgMembershipsTable, event.OrgMembershipsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.OrgMembership
		step.Edge.Schema = schemaConfig.OrgMembershipEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroupMemberships chains the current query on the "group_memberships" edge.
func (_q *EventQuery) QueryGroupMemberships() *GroupMembershipQuery {
	query := (&GroupMembershipClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(groupmembership.Table, groupmembership.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.GroupMembershipsTable, event.GroupMembershipsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.GroupMembership
		step.Edge.Schema = schemaConfig.GroupMembershipEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribers chains the current query on the "subscribers" edge.
func (_q *EventQuery) QuerySubscribers() *SubscriberQuery {
	query := (&SubscriberClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(subscriber.Table, subscriber.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.SubscribersTable, event.SubscribersPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Subscriber
		step.Edge.Schema = schemaConfig.SubscriberEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFiles chains the current query on the "files" edge.
func (_q *EventQuery) QueryFiles() *FileQuery {
	query := (&FileClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.FilesTable, event.FilesPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.FileEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgSubscriptions chains the current query on the "org_subscriptions" edge.
func (_q *EventQuery) QueryOrgSubscriptions() *OrgSubscriptionQuery {
	query := (&OrgSubscriptionClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(event.Table, event.FieldID, selector),
			sqlgraph.To(orgsubscription.Table, orgsubscription.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, event.OrgSubscriptionsTable, event.OrgSubscriptionsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.OrgSubscription
		step.Edge.Schema = schemaConfig.OrgSubscriptionEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Event entity from the query.
// Returns a *NotFoundError when no Event was found.
func (_q *EventQuery) First(ctx context.Context) (*Event, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{event.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *EventQuery) FirstX(ctx context.Context) *Event {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Event ID from the query.
// Returns a *NotFoundError when no Event ID was found.
func (_q *EventQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{event.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *EventQuery) FirstIDX(ctx context.Context) string {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Event entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Event entity is found.
// Returns a *NotFoundError when no Event entities are found.
func (_q *EventQuery) Only(ctx context.Context) (*Event, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{event.Label}
	default:
		return nil, &NotSingularError{event.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *EventQuery) OnlyX(ctx context.Context) *Event {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Event ID in the query.
// Returns a *NotSingularError when more than one Event ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *EventQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{event.Label}
	default:
		err = &NotSingularError{event.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *EventQuery) OnlyIDX(ctx context.Context) string {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Events.
func (_q *EventQuery) All(ctx context.Context) ([]*Event, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Event, *EventQuery]()
	return withInterceptors[[]*Event](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *EventQuery) AllX(ctx context.Context) []*Event {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Event IDs.
func (_q *EventQuery) IDs(ctx context.Context) (ids []string, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(event.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *EventQuery) IDsX(ctx context.Context) []string {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *EventQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*EventQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *EventQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *EventQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *EventQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EventQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *EventQuery) Clone() *EventQuery {
	if _q == nil {
		return nil
	}
	return &EventQuery{
		config:                   _q.config,
		ctx:                      _q.ctx.Clone(),
		order:                    append([]event.OrderOption{}, _q.order...),
		inters:                   append([]Interceptor{}, _q.inters...),
		predicates:               append([]predicate.Event{}, _q.predicates...),
		withUsers:                _q.withUsers.Clone(),
		withGroups:               _q.withGroups.Clone(),
		withIntegrations:         _q.withIntegrations.Clone(),
		withOrganizations:        _q.withOrganizations.Clone(),
		withInvites:              _q.withInvites.Clone(),
		withPersonalAccessTokens: _q.withPersonalAccessTokens.Clone(),
		withSecrets:              _q.withSecrets.Clone(),
		withOrgMemberships:       _q.withOrgMemberships.Clone(),
		withGroupMemberships:     _q.withGroupMemberships.Clone(),
		withSubscribers:          _q.withSubscribers.Clone(),
		withFiles:                _q.withFiles.Clone(),
		withOrgSubscriptions:     _q.withOrgSubscriptions.Clone(),
		// clone intermediate query.
		sql:       _q.sql.Clone(),
		path:      _q.path,
		modifiers: append([]func(*sql.Selector){}, _q.modifiers...),
	}
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithUsers(opts ...func(*UserQuery)) *EventQuery {
	query := (&UserClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withUsers = query
	return _q
}

// WithGroups tells the query-builder to eager-load the nodes that are connected to
// the "groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithGroups(opts ...func(*GroupQuery)) *EventQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withGroups = query
	return _q
}

// WithIntegrations tells the query-builder to eager-load the nodes that are connected to
// the "integrations" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithIntegrations(opts ...func(*IntegrationQuery)) *EventQuery {
	query := (&IntegrationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withIntegrations = query
	return _q
}

// WithOrganizations tells the query-builder to eager-load the nodes that are connected to
// the "organizations" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithOrganizations(opts ...func(*OrganizationQuery)) *EventQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOrganizations = query
	return _q
}

// WithInvites tells the query-builder to eager-load the nodes that are connected to
// the "invites" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithInvites(opts ...func(*InviteQuery)) *EventQuery {
	query := (&InviteClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withInvites = query
	return _q
}

// WithPersonalAccessTokens tells the query-builder to eager-load the nodes that are connected to
// the "personal_access_tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithPersonalAccessTokens(opts ...func(*PersonalAccessTokenQuery)) *EventQuery {
	query := (&PersonalAccessTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPersonalAccessTokens = query
	return _q
}

// WithSecrets tells the query-builder to eager-load the nodes that are connected to
// the "secrets" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithSecrets(opts ...func(*HushQuery)) *EventQuery {
	query := (&HushClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSecrets = query
	return _q
}

// WithOrgMemberships tells the query-builder to eager-load the nodes that are connected to
// the "org_memberships" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithOrgMemberships(opts ...func(*OrgMembershipQuery)) *EventQuery {
	query := (&OrgMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOrgMemberships = query
	return _q
}

// WithGroupMemberships tells the query-builder to eager-load the nodes that are connected to
// the "group_memberships" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithGroupMemberships(opts ...func(*GroupMembershipQuery)) *EventQuery {
	query := (&GroupMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withGroupMemberships = query
	return _q
}

// WithSubscribers tells the query-builder to eager-load the nodes that are connected to
// the "subscribers" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithSubscribers(opts ...func(*SubscriberQuery)) *EventQuery {
	query := (&SubscriberClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSubscribers = query
	return _q
}

// WithFiles tells the query-builder to eager-load the nodes that are connected to
// the "files" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithFiles(opts ...func(*FileQuery)) *EventQuery {
	query := (&FileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withFiles = query
	return _q
}

// WithOrgSubscriptions tells the query-builder to eager-load the nodes that are connected to
// the "org_subscriptions" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithOrgSubscriptions(opts ...func(*OrgSubscriptionQuery)) *EventQuery {
	query := (&OrgSubscriptionClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOrgSubscriptions = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Event.Query().
//		GroupBy(event.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (_q *EventQuery) GroupBy(field string, fields ...string) *EventGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EventGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = event.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Event.Query().
//		Select(event.FieldCreatedAt).
//		Scan(ctx, &v)
func (_q *EventQuery) Select(fields ...string) *EventSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &EventSelect{EventQuery: _q}
	sbuild.label = event.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EventSelect configured with the given aggregations.
func (_q *EventQuery) Aggregate(fns ...AggregateFunc) *EventSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *EventQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !event.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	if event.Policy == nil {
		return errors.New("generated: uninitialized event.Policy (forgotten import generated/runtime?)")
	}
	if err := event.Policy.EvalQuery(ctx, _q); err != nil {
		return err
	}
	return nil
}

func (_q *EventQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Event, error) {
	var (
		nodes       = []*Event{}
		withFKs     = _q.withFKs
		_spec       = _q.querySpec()
		loadedTypes = [12]bool{
			_q.withUsers != nil,
			_q.withGroups != nil,
			_q.withIntegrations != nil,
			_q.withOrganizations != nil,
			_q.withInvites != nil,
			_q.withPersonalAccessTokens != nil,
			_q.withSecrets != nil,
			_q.withOrgMemberships != nil,
			_q.withGroupMemberships != nil,
			_q.withSubscribers != nil,
			_q.withFiles != nil,
			_q.withOrgSubscriptions != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, event.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Event).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Event{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = _q.schemaConfig.Event
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withUsers; query != nil {
		if err := _q.loadUsers(ctx, query, nodes,
			func(n *Event) { n.Edges.Users = []*User{} },
			func(n *Event, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withGroups; query != nil {
		if err := _q.loadGroups(ctx, query, nodes,
			func(n *Event) { n.Edges.Groups = []*Group{} },
			func(n *Event, e *Group) { n.Edges.Groups = append(n.Edges.Groups, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withIntegrations; query != nil {
		if err := _q.loadIntegrations(ctx, query, nodes,
			func(n *Event) { n.Edges.Integrations = []*Integration{} },
			func(n *Event, e *Integration) { n.Edges.Integrations = append(n.Edges.Integrations, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withOrganizations; query != nil {
		if err := _q.loadOrganizations(ctx, query, nodes,
			func(n *Event) { n.Edges.Organizations = []*Organization{} },
			func(n *Event, e *Organization) { n.Edges.Organizations = append(n.Edges.Organizations, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withInvites; query != nil {
		if err := _q.loadInvites(ctx, query, nodes,
			func(n *Event) { n.Edges.Invites = []*Invite{} },
			func(n *Event, e *Invite) { n.Edges.Invites = append(n.Edges.Invites, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withPersonalAccessTokens; query != nil {
		if err := _q.loadPersonalAccessTokens(ctx, query, nodes,
			func(n *Event) { n.Edges.PersonalAccessTokens = []*PersonalAccessToken{} },
			func(n *Event, e *PersonalAccessToken) {
				n.Edges.PersonalAccessTokens = append(n.Edges.PersonalAccessTokens, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withSecrets; query != nil {
		if err := _q.loadSecrets(ctx, query, nodes,
			func(n *Event) { n.Edges.Secrets = []*Hush{} },
			func(n *Event, e *Hush) { n.Edges.Secrets = append(n.Edges.Secrets, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withOrgMemberships; query != nil {
		if err := _q.loadOrgMemberships(ctx, query, nodes,
			func(n *Event) { n.Edges.OrgMemberships = []*OrgMembership{} },
			func(n *Event, e *OrgMembership) { n.Edges.OrgMemberships = append(n.Edges.OrgMemberships, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withGroupMemberships; query != nil {
		if err := _q.loadGroupMemberships(ctx, query, nodes,
			func(n *Event) { n.Edges.GroupMemberships = []*GroupMembership{} },
			func(n *Event, e *GroupMembership) { n.Edges.GroupMemberships = append(n.Edges.GroupMemberships, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSubscribers; query != nil {
		if err := _q.loadSubscribers(ctx, query, nodes,
			func(n *Event) { n.Edges.Subscribers = []*Subscriber{} },
			func(n *Event, e *Subscriber) { n.Edges.Subscribers = append(n.Edges.Subscribers, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withFiles; query != nil {
		if err := _q.loadFiles(ctx, query, nodes,
			func(n *Event) { n.Edges.Files = []*File{} },
			func(n *Event, e *File) { n.Edges.Files = append(n.Edges.Files, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withOrgSubscriptions; query != nil {
		if err := _q.loadOrgSubscriptions(ctx, query, nodes,
			func(n *Event) { n.Edges.OrgSubscriptions = []*OrgSubscription{} },
			func(n *Event, e *OrgSubscription) { n.Edges.OrgSubscriptions = append(n.Edges.OrgSubscriptions, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedUsers {
		if err := _q.loadUsers(ctx, query, nodes,
			func(n *Event) { n.appendNamedUsers(name) },
			func(n *Event, e *User) { n.appendNamedUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedGroups {
		if err := _q.loadGroups(ctx, query, nodes,
			func(n *Event) { n.appendNamedGroups(name) },
			func(n *Event, e *Group) { n.appendNamedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedIntegrations {
		if err := _q.loadIntegrations(ctx, query, nodes,
			func(n *Event) { n.appendNamedIntegrations(name) },
			func(n *Event, e *Integration) { n.appendNamedIntegrations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedOrganizations {
		if err := _q.loadOrganizations(ctx, query, nodes,
			func(n *Event) { n.appendNamedOrganizations(name) },
			func(n *Event, e *Organization) { n.appendNamedOrganizations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedInvites {
		if err := _q.loadInvites(ctx, query, nodes,
			func(n *Event) { n.appendNamedInvites(name) },
			func(n *Event, e *Invite) { n.appendNamedInvites(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedPersonalAccessTokens {
		if err := _q.loadPersonalAccessTokens(ctx, query, nodes,
			func(n *Event) { n.appendNamedPersonalAccessTokens(name) },
			func(n *Event, e *PersonalAccessToken) { n.appendNamedPersonalAccessTokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedSecrets {
		if err := _q.loadSecrets(ctx, query, nodes,
			func(n *Event) { n.appendNamedSecrets(name) },
			func(n *Event, e *Hush) { n.appendNamedSecrets(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedOrgMemberships {
		if err := _q.loadOrgMemberships(ctx, query, nodes,
			func(n *Event) { n.appendNamedOrgMemberships(name) },
			func(n *Event, e *OrgMembership) { n.appendNamedOrgMemberships(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedGroupMemberships {
		if err := _q.loadGroupMemberships(ctx, query, nodes,
			func(n *Event) { n.appendNamedGroupMemberships(name) },
			func(n *Event, e *GroupMembership) { n.appendNamedGroupMemberships(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedSubscribers {
		if err := _q.loadSubscribers(ctx, query, nodes,
			func(n *Event) { n.appendNamedSubscribers(name) },
			func(n *Event, e *Subscriber) { n.appendNamedSubscribers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedFiles {
		if err := _q.loadFiles(ctx, query, nodes,
			func(n *Event) { n.appendNamedFiles(name) },
			func(n *Event, e *File) { n.appendNamedFiles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedOrgSubscriptions {
		if err := _q.loadOrgSubscriptions(ctx, query, nodes,
			func(n *Event) { n.appendNamedOrgSubscriptions(name) },
			func(n *Event, e *OrgSubscription) { n.appendNamedOrgSubscriptions(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range _q.loadTotal {
		if err := _q.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *EventQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*Event, init func(*Event), assign func(*Event, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.UsersTable)
		joinT.Schema(_q.schemaConfig.UserEvents)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(event.UsersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.UsersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.UsersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *EventQuery) loadGroups(ctx context.Context, query *GroupQuery, nodes []*Event, init func(*Event), assign func(*Event, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.GroupsTable)
		joinT.Schema(_q.schemaConfig.GroupEvents)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(event.GroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.GroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.GroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *EventQuery) loadIntegrations(ctx context.Context, query *IntegrationQuery, nodes []*Event, init func(*Event), assign func(*Event, *Integration)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.IntegrationsTable)
		joinT.Schema(_q.schemaConfig.IntegrationEvents)
		s.Join(joinT).On(s.C(integration.FieldID), joinT.C(event.IntegrationsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.IntegrationsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.IntegrationsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Integration](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "integrations" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *EventQuery) loadOrganizations(ctx context.Context, query *OrganizationQuery, nodes []*Event, init func(*Event), assign func(*Event, *Organization)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.OrganizationsTable)
		joinT.Schema(_q.schemaConfig.OrganizationEvents)
		s.Join(joinT).On(s.C(organization.FieldID), joinT.C(event.OrganizationsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.OrganizationsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.OrganizationsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Organization](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "organizations" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *EventQuery) loadInvites(ctx context.Context, query *InviteQuery, nodes []*Event, init func(*Event), assign func(*Event, *Invite)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.InvitesTable)
		joinT.Schema(_q.schemaConfig.InviteEvents)
		s.Join(joinT).On(s.C(invite.FieldID), joinT.C(event.InvitesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.InvitesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.InvitesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Invite](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "invites" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *EventQuery) loadPersonalAccessTokens(ctx context.Context, query *PersonalAccessTokenQuery, nodes []*Event, init func(*Event), assign func(*Event, *PersonalAccessToken)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.PersonalAccessTokensTable)
		joinT.Schema(_q.schemaConfig.PersonalAccessTokenEvents)
		s.Join(joinT).On(s.C(personalaccesstoken.FieldID), joinT.C(event.PersonalAccessTokensPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.PersonalAccessTokensPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.PersonalAccessTokensPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*PersonalAccessToken](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "personal_access_tokens" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *EventQuery) loadSecrets(ctx context.Context, query *HushQuery, nodes []*Event, init func(*Event), assign func(*Event, *Hush)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.SecretsTable)
		joinT.Schema(_q.schemaConfig.HushEvents)
		s.Join(joinT).On(s.C(hush.FieldID), joinT.C(event.SecretsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.SecretsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.SecretsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Hush](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "secrets" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *EventQuery) loadOrgMemberships(ctx context.Context, query *OrgMembershipQuery, nodes []*Event, init func(*Event), assign func(*Event, *OrgMembership)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.OrgMembershipsTable)
		joinT.Schema(_q.schemaConfig.OrgMembershipEvents)
		s.Join(joinT).On(s.C(orgmembership.FieldID), joinT.C(event.OrgMembershipsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.OrgMembershipsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.OrgMembershipsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*OrgMembership](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "org_memberships" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *EventQuery) loadGroupMemberships(ctx context.Context, query *GroupMembershipQuery, nodes []*Event, init func(*Event), assign func(*Event, *GroupMembership)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.GroupMembershipsTable)
		joinT.Schema(_q.schemaConfig.GroupMembershipEvents)
		s.Join(joinT).On(s.C(groupmembership.FieldID), joinT.C(event.GroupMembershipsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.GroupMembershipsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.GroupMembershipsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*GroupMembership](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "group_memberships" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *EventQuery) loadSubscribers(ctx context.Context, query *SubscriberQuery, nodes []*Event, init func(*Event), assign func(*Event, *Subscriber)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.SubscribersTable)
		joinT.Schema(_q.schemaConfig.SubscriberEvents)
		s.Join(joinT).On(s.C(subscriber.FieldID), joinT.C(event.SubscribersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.SubscribersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.SubscribersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Subscriber](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subscribers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *EventQuery) loadFiles(ctx context.Context, query *FileQuery, nodes []*Event, init func(*Event), assign func(*Event, *File)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.FilesTable)
		joinT.Schema(_q.schemaConfig.FileEvents)
		s.Join(joinT).On(s.C(file.FieldID), joinT.C(event.FilesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.FilesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.FilesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*File](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "files" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *EventQuery) loadOrgSubscriptions(ctx context.Context, query *OrgSubscriptionQuery, nodes []*Event, init func(*Event), assign func(*Event, *OrgSubscription)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Event)
	nids := make(map[string]map[*Event]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(event.OrgSubscriptionsTable)
		joinT.Schema(_q.schemaConfig.OrgSubscriptionEvents)
		s.Join(joinT).On(s.C(orgsubscription.FieldID), joinT.C(event.OrgSubscriptionsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(event.OrgSubscriptionsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(event.OrgSubscriptionsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Event]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*OrgSubscription](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "org_subscriptions" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (_q *EventQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Schema = _q.schemaConfig.Event
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *EventQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(event.Table, event.Columns, sqlgraph.NewFieldSpec(event.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, event.FieldID)
		for i := range fields {
			if fields[i] != event.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *EventQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(event.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = event.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(_q.schemaConfig.Event)
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_q *EventQuery) Modify(modifiers ...func(s *sql.Selector)) *EventSelect {
	_q.modifiers = append(_q.modifiers, modifiers...)
	return _q.Select()
}

// WithNamedUsers tells the query-builder to eager-load the nodes that are connected to the "users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithNamedUsers(name string, opts ...func(*UserQuery)) *EventQuery {
	query := (&UserClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedUsers == nil {
		_q.withNamedUsers = make(map[string]*UserQuery)
	}
	_q.withNamedUsers[name] = query
	return _q
}

// WithNamedGroups tells the query-builder to eager-load the nodes that are connected to the "groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithNamedGroups(name string, opts ...func(*GroupQuery)) *EventQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedGroups == nil {
		_q.withNamedGroups = make(map[string]*GroupQuery)
	}
	_q.withNamedGroups[name] = query
	return _q
}

// WithNamedIntegrations tells the query-builder to eager-load the nodes that are connected to the "integrations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithNamedIntegrations(name string, opts ...func(*IntegrationQuery)) *EventQuery {
	query := (&IntegrationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedIntegrations == nil {
		_q.withNamedIntegrations = make(map[string]*IntegrationQuery)
	}
	_q.withNamedIntegrations[name] = query
	return _q
}

// WithNamedOrganizations tells the query-builder to eager-load the nodes that are connected to the "organizations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithNamedOrganizations(name string, opts ...func(*OrganizationQuery)) *EventQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedOrganizations == nil {
		_q.withNamedOrganizations = make(map[string]*OrganizationQuery)
	}
	_q.withNamedOrganizations[name] = query
	return _q
}

// WithNamedInvites tells the query-builder to eager-load the nodes that are connected to the "invites"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithNamedInvites(name string, opts ...func(*InviteQuery)) *EventQuery {
	query := (&InviteClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedInvites == nil {
		_q.withNamedInvites = make(map[string]*InviteQuery)
	}
	_q.withNamedInvites[name] = query
	return _q
}

// WithNamedPersonalAccessTokens tells the query-builder to eager-load the nodes that are connected to the "personal_access_tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithNamedPersonalAccessTokens(name string, opts ...func(*PersonalAccessTokenQuery)) *EventQuery {
	query := (&PersonalAccessTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedPersonalAccessTokens == nil {
		_q.withNamedPersonalAccessTokens = make(map[string]*PersonalAccessTokenQuery)
	}
	_q.withNamedPersonalAccessTokens[name] = query
	return _q
}

// WithNamedSecrets tells the query-builder to eager-load the nodes that are connected to the "secrets"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithNamedSecrets(name string, opts ...func(*HushQuery)) *EventQuery {
	query := (&HushClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedSecrets == nil {
		_q.withNamedSecrets = make(map[string]*HushQuery)
	}
	_q.withNamedSecrets[name] = query
	return _q
}

// WithNamedOrgMemberships tells the query-builder to eager-load the nodes that are connected to the "org_memberships"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithNamedOrgMemberships(name string, opts ...func(*OrgMembershipQuery)) *EventQuery {
	query := (&OrgMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedOrgMemberships == nil {
		_q.withNamedOrgMemberships = make(map[string]*OrgMembershipQuery)
	}
	_q.withNamedOrgMemberships[name] = query
	return _q
}

// WithNamedGroupMemberships tells the query-builder to eager-load the nodes that are connected to the "group_memberships"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithNamedGroupMemberships(name string, opts ...func(*GroupMembershipQuery)) *EventQuery {
	query := (&GroupMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedGroupMemberships == nil {
		_q.withNamedGroupMemberships = make(map[string]*GroupMembershipQuery)
	}
	_q.withNamedGroupMemberships[name] = query
	return _q
}

// WithNamedSubscribers tells the query-builder to eager-load the nodes that are connected to the "subscribers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithNamedSubscribers(name string, opts ...func(*SubscriberQuery)) *EventQuery {
	query := (&SubscriberClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedSubscribers == nil {
		_q.withNamedSubscribers = make(map[string]*SubscriberQuery)
	}
	_q.withNamedSubscribers[name] = query
	return _q
}

// WithNamedFiles tells the query-builder to eager-load the nodes that are connected to the "files"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithNamedFiles(name string, opts ...func(*FileQuery)) *EventQuery {
	query := (&FileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedFiles == nil {
		_q.withNamedFiles = make(map[string]*FileQuery)
	}
	_q.withNamedFiles[name] = query
	return _q
}

// WithNamedOrgSubscriptions tells the query-builder to eager-load the nodes that are connected to the "org_subscriptions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *EventQuery) WithNamedOrgSubscriptions(name string, opts ...func(*OrgSubscriptionQuery)) *EventQuery {
	query := (&OrgSubscriptionClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedOrgSubscriptions == nil {
		_q.withNamedOrgSubscriptions = make(map[string]*OrgSubscriptionQuery)
	}
	_q.withNamedOrgSubscriptions[name] = query
	return _q
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (eq *EventQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryIDs)
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return eq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, eq, qr, eq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// EventGroupBy is the group-by builder for Event entities.
type EventGroupBy struct {
	selector
	build *EventQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *EventGroupBy) Aggregate(fns ...AggregateFunc) *EventGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *EventGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventQuery, *EventGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *EventGroupBy) sqlScan(ctx context.Context, root *EventQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EventSelect is the builder for selecting fields of Event entities.
type EventSelect struct {
	*EventQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *EventSelect) Aggregate(fns ...AggregateFunc) *EventSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *EventSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EventQuery, *EventSelect](ctx, _s.EventQuery, _s, _s.inters, v)
}

func (_s *EventSelect) sqlScan(ctx context.Context, root *EventQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_s *EventSelect) Modify(modifiers ...func(s *sql.Selector)) *EventSelect {
	_s.modifiers = append(_s.modifiers, modifiers...)
	return _s
}
