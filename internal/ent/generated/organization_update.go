// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/entitlement"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/oauthprovider"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/webhook"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks     []Hook
	mutation  *OrganizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ou *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *OrganizationUpdate) SetUpdatedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetUpdatedAt(t)
	return ou
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ou *OrganizationUpdate) ClearUpdatedAt() *OrganizationUpdate {
	ou.mutation.ClearUpdatedAt()
	return ou
}

// SetUpdatedBy sets the "updated_by" field.
func (ou *OrganizationUpdate) SetUpdatedBy(s string) *OrganizationUpdate {
	ou.mutation.SetUpdatedBy(s)
	return ou
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableUpdatedBy(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetUpdatedBy(*s)
	}
	return ou
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ou *OrganizationUpdate) ClearUpdatedBy() *OrganizationUpdate {
	ou.mutation.ClearUpdatedBy()
	return ou
}

// SetTags sets the "tags" field.
func (ou *OrganizationUpdate) SetTags(s []string) *OrganizationUpdate {
	ou.mutation.SetTags(s)
	return ou
}

// AppendTags appends s to the "tags" field.
func (ou *OrganizationUpdate) AppendTags(s []string) *OrganizationUpdate {
	ou.mutation.AppendTags(s)
	return ou
}

// ClearTags clears the value of the "tags" field.
func (ou *OrganizationUpdate) ClearTags() *OrganizationUpdate {
	ou.mutation.ClearTags()
	return ou
}

// SetDeletedAt sets the "deleted_at" field.
func (ou *OrganizationUpdate) SetDeletedAt(t time.Time) *OrganizationUpdate {
	ou.mutation.SetDeletedAt(t)
	return ou
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDeletedAt(t *time.Time) *OrganizationUpdate {
	if t != nil {
		ou.SetDeletedAt(*t)
	}
	return ou
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ou *OrganizationUpdate) ClearDeletedAt() *OrganizationUpdate {
	ou.mutation.ClearDeletedAt()
	return ou
}

// SetDeletedBy sets the "deleted_by" field.
func (ou *OrganizationUpdate) SetDeletedBy(s string) *OrganizationUpdate {
	ou.mutation.SetDeletedBy(s)
	return ou
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDeletedBy(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetDeletedBy(*s)
	}
	return ou
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ou *OrganizationUpdate) ClearDeletedBy() *OrganizationUpdate {
	ou.mutation.ClearDeletedBy()
	return ou
}

// SetName sets the "name" field.
func (ou *OrganizationUpdate) SetName(s string) *OrganizationUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableName(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetDisplayName sets the "display_name" field.
func (ou *OrganizationUpdate) SetDisplayName(s string) *OrganizationUpdate {
	ou.mutation.SetDisplayName(s)
	return ou
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDisplayName(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetDisplayName(*s)
	}
	return ou
}

// SetDescription sets the "description" field.
func (ou *OrganizationUpdate) SetDescription(s string) *OrganizationUpdate {
	ou.mutation.SetDescription(s)
	return ou
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDescription(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetDescription(*s)
	}
	return ou
}

// ClearDescription clears the value of the "description" field.
func (ou *OrganizationUpdate) ClearDescription() *OrganizationUpdate {
	ou.mutation.ClearDescription()
	return ou
}

// SetAvatarRemoteURL sets the "avatar_remote_url" field.
func (ou *OrganizationUpdate) SetAvatarRemoteURL(s string) *OrganizationUpdate {
	ou.mutation.SetAvatarRemoteURL(s)
	return ou
}

// SetNillableAvatarRemoteURL sets the "avatar_remote_url" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableAvatarRemoteURL(s *string) *OrganizationUpdate {
	if s != nil {
		ou.SetAvatarRemoteURL(*s)
	}
	return ou
}

// ClearAvatarRemoteURL clears the value of the "avatar_remote_url" field.
func (ou *OrganizationUpdate) ClearAvatarRemoteURL() *OrganizationUpdate {
	ou.mutation.ClearAvatarRemoteURL()
	return ou
}

// SetDedicatedDb sets the "dedicated_db" field.
func (ou *OrganizationUpdate) SetDedicatedDb(b bool) *OrganizationUpdate {
	ou.mutation.SetDedicatedDb(b)
	return ou
}

// SetNillableDedicatedDb sets the "dedicated_db" field if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableDedicatedDb(b *bool) *OrganizationUpdate {
	if b != nil {
		ou.SetDedicatedDb(*b)
	}
	return ou
}

// AddChildIDs adds the "children" edge to the Organization entity by IDs.
func (ou *OrganizationUpdate) AddChildIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddChildIDs(ids...)
	return ou
}

// AddChildren adds the "children" edges to the Organization entity.
func (ou *OrganizationUpdate) AddChildren(o ...*Organization) *OrganizationUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddChildIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (ou *OrganizationUpdate) AddGroupIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddGroupIDs(ids...)
	return ou
}

// AddGroups adds the "groups" edges to the Group entity.
func (ou *OrganizationUpdate) AddGroups(g ...*Group) *OrganizationUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.AddGroupIDs(ids...)
}

// AddTemplateIDs adds the "templates" edge to the Template entity by IDs.
func (ou *OrganizationUpdate) AddTemplateIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddTemplateIDs(ids...)
	return ou
}

// AddTemplates adds the "templates" edges to the Template entity.
func (ou *OrganizationUpdate) AddTemplates(t ...*Template) *OrganizationUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.AddTemplateIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (ou *OrganizationUpdate) AddIntegrationIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddIntegrationIDs(ids...)
	return ou
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (ou *OrganizationUpdate) AddIntegrations(i ...*Integration) *OrganizationUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.AddIntegrationIDs(ids...)
}

// SetSettingID sets the "setting" edge to the OrganizationSetting entity by ID.
func (ou *OrganizationUpdate) SetSettingID(id string) *OrganizationUpdate {
	ou.mutation.SetSettingID(id)
	return ou
}

// SetNillableSettingID sets the "setting" edge to the OrganizationSetting entity by ID if the given value is not nil.
func (ou *OrganizationUpdate) SetNillableSettingID(id *string) *OrganizationUpdate {
	if id != nil {
		ou = ou.SetSettingID(*id)
	}
	return ou
}

// SetSetting sets the "setting" edge to the OrganizationSetting entity.
func (ou *OrganizationUpdate) SetSetting(o *OrganizationSetting) *OrganizationUpdate {
	return ou.SetSettingID(o.ID)
}

// AddDocumentdatumIDs adds the "documentdata" edge to the DocumentData entity by IDs.
func (ou *OrganizationUpdate) AddDocumentdatumIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddDocumentdatumIDs(ids...)
	return ou
}

// AddDocumentdata adds the "documentdata" edges to the DocumentData entity.
func (ou *OrganizationUpdate) AddDocumentdata(d ...*DocumentData) *OrganizationUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ou.AddDocumentdatumIDs(ids...)
}

// AddEntitlementIDs adds the "entitlements" edge to the Entitlement entity by IDs.
func (ou *OrganizationUpdate) AddEntitlementIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddEntitlementIDs(ids...)
	return ou
}

// AddEntitlements adds the "entitlements" edges to the Entitlement entity.
func (ou *OrganizationUpdate) AddEntitlements(e ...*Entitlement) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.AddEntitlementIDs(ids...)
}

// AddOrganizationEntitlementIDs adds the "organization_entitlement" edge to the Entitlement entity by IDs.
func (ou *OrganizationUpdate) AddOrganizationEntitlementIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddOrganizationEntitlementIDs(ids...)
	return ou
}

// AddOrganizationEntitlement adds the "organization_entitlement" edges to the Entitlement entity.
func (ou *OrganizationUpdate) AddOrganizationEntitlement(e ...*Entitlement) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.AddOrganizationEntitlementIDs(ids...)
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (ou *OrganizationUpdate) AddPersonalAccessTokenIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddPersonalAccessTokenIDs(ids...)
	return ou
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (ou *OrganizationUpdate) AddPersonalAccessTokens(p ...*PersonalAccessToken) *OrganizationUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.AddPersonalAccessTokenIDs(ids...)
}

// AddAPITokenIDs adds the "api_tokens" edge to the APIToken entity by IDs.
func (ou *OrganizationUpdate) AddAPITokenIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddAPITokenIDs(ids...)
	return ou
}

// AddAPITokens adds the "api_tokens" edges to the APIToken entity.
func (ou *OrganizationUpdate) AddAPITokens(a ...*APIToken) *OrganizationUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.AddAPITokenIDs(ids...)
}

// AddOauthproviderIDs adds the "oauthprovider" edge to the OauthProvider entity by IDs.
func (ou *OrganizationUpdate) AddOauthproviderIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddOauthproviderIDs(ids...)
	return ou
}

// AddOauthprovider adds the "oauthprovider" edges to the OauthProvider entity.
func (ou *OrganizationUpdate) AddOauthprovider(o ...*OauthProvider) *OrganizationUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddOauthproviderIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ou *OrganizationUpdate) AddUserIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddUserIDs(ids...)
	return ou
}

// AddUsers adds the "users" edges to the User entity.
func (ou *OrganizationUpdate) AddUsers(u ...*User) *OrganizationUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.AddUserIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (ou *OrganizationUpdate) AddInviteIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddInviteIDs(ids...)
	return ou
}

// AddInvites adds the "invites" edges to the Invite entity.
func (ou *OrganizationUpdate) AddInvites(i ...*Invite) *OrganizationUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.AddInviteIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the Subscriber entity by IDs.
func (ou *OrganizationUpdate) AddSubscriberIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddSubscriberIDs(ids...)
	return ou
}

// AddSubscribers adds the "subscribers" edges to the Subscriber entity.
func (ou *OrganizationUpdate) AddSubscribers(s ...*Subscriber) *OrganizationUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.AddSubscriberIDs(ids...)
}

// AddWebhookIDs adds the "webhooks" edge to the Webhook entity by IDs.
func (ou *OrganizationUpdate) AddWebhookIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddWebhookIDs(ids...)
	return ou
}

// AddWebhooks adds the "webhooks" edges to the Webhook entity.
func (ou *OrganizationUpdate) AddWebhooks(w ...*Webhook) *OrganizationUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ou.AddWebhookIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (ou *OrganizationUpdate) AddEventIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddEventIDs(ids...)
	return ou
}

// AddEvents adds the "events" edges to the Event entity.
func (ou *OrganizationUpdate) AddEvents(e ...*Event) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.AddEventIDs(ids...)
}

// AddSecretIDs adds the "secrets" edge to the Hush entity by IDs.
func (ou *OrganizationUpdate) AddSecretIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddSecretIDs(ids...)
	return ou
}

// AddSecrets adds the "secrets" edges to the Hush entity.
func (ou *OrganizationUpdate) AddSecrets(h ...*Hush) *OrganizationUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ou.AddSecretIDs(ids...)
}

// AddFeatureIDs adds the "features" edge to the Feature entity by IDs.
func (ou *OrganizationUpdate) AddFeatureIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddFeatureIDs(ids...)
	return ou
}

// AddFeatures adds the "features" edges to the Feature entity.
func (ou *OrganizationUpdate) AddFeatures(f ...*Feature) *OrganizationUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ou.AddFeatureIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (ou *OrganizationUpdate) AddFileIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddFileIDs(ids...)
	return ou
}

// AddFiles adds the "files" edges to the File entity.
func (ou *OrganizationUpdate) AddFiles(f ...*File) *OrganizationUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ou.AddFileIDs(ids...)
}

// AddEntitlementplanIDs adds the "entitlementplans" edge to the EntitlementPlan entity by IDs.
func (ou *OrganizationUpdate) AddEntitlementplanIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddEntitlementplanIDs(ids...)
	return ou
}

// AddEntitlementplans adds the "entitlementplans" edges to the EntitlementPlan entity.
func (ou *OrganizationUpdate) AddEntitlementplans(e ...*EntitlementPlan) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.AddEntitlementplanIDs(ids...)
}

// AddEntitlementplanfeatureIDs adds the "entitlementplanfeatures" edge to the EntitlementPlanFeature entity by IDs.
func (ou *OrganizationUpdate) AddEntitlementplanfeatureIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddEntitlementplanfeatureIDs(ids...)
	return ou
}

// AddEntitlementplanfeatures adds the "entitlementplanfeatures" edges to the EntitlementPlanFeature entity.
func (ou *OrganizationUpdate) AddEntitlementplanfeatures(e ...*EntitlementPlanFeature) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.AddEntitlementplanfeatureIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (ou *OrganizationUpdate) AddEntityIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddEntityIDs(ids...)
	return ou
}

// AddEntities adds the "entities" edges to the Entity entity.
func (ou *OrganizationUpdate) AddEntities(e ...*Entity) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.AddEntityIDs(ids...)
}

// AddEntitytypeIDs adds the "entitytypes" edge to the EntityType entity by IDs.
func (ou *OrganizationUpdate) AddEntitytypeIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddEntitytypeIDs(ids...)
	return ou
}

// AddEntitytypes adds the "entitytypes" edges to the EntityType entity.
func (ou *OrganizationUpdate) AddEntitytypes(e ...*EntityType) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.AddEntitytypeIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (ou *OrganizationUpdate) AddContactIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddContactIDs(ids...)
	return ou
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (ou *OrganizationUpdate) AddContacts(c ...*Contact) *OrganizationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.AddContactIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (ou *OrganizationUpdate) AddNoteIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddNoteIDs(ids...)
	return ou
}

// AddNotes adds the "notes" edges to the Note entity.
func (ou *OrganizationUpdate) AddNotes(n ...*Note) *OrganizationUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ou.AddNoteIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ou *OrganizationUpdate) AddTaskIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddTaskIDs(ids...)
	return ou
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ou *OrganizationUpdate) AddTasks(t ...*Task) *OrganizationUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.AddTaskIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the OrgMembership entity by IDs.
func (ou *OrganizationUpdate) AddMemberIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.AddMemberIDs(ids...)
	return ou
}

// AddMembers adds the "members" edges to the OrgMembership entity.
func (ou *OrganizationUpdate) AddMembers(o ...*OrgMembership) *OrganizationUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.AddMemberIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ou *OrganizationUpdate) Mutation() *OrganizationMutation {
	return ou.mutation
}

// ClearChildren clears all "children" edges to the Organization entity.
func (ou *OrganizationUpdate) ClearChildren() *OrganizationUpdate {
	ou.mutation.ClearChildren()
	return ou
}

// RemoveChildIDs removes the "children" edge to Organization entities by IDs.
func (ou *OrganizationUpdate) RemoveChildIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveChildIDs(ids...)
	return ou
}

// RemoveChildren removes "children" edges to Organization entities.
func (ou *OrganizationUpdate) RemoveChildren(o ...*Organization) *OrganizationUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveChildIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (ou *OrganizationUpdate) ClearGroups() *OrganizationUpdate {
	ou.mutation.ClearGroups()
	return ou
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (ou *OrganizationUpdate) RemoveGroupIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveGroupIDs(ids...)
	return ou
}

// RemoveGroups removes "groups" edges to Group entities.
func (ou *OrganizationUpdate) RemoveGroups(g ...*Group) *OrganizationUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ou.RemoveGroupIDs(ids...)
}

// ClearTemplates clears all "templates" edges to the Template entity.
func (ou *OrganizationUpdate) ClearTemplates() *OrganizationUpdate {
	ou.mutation.ClearTemplates()
	return ou
}

// RemoveTemplateIDs removes the "templates" edge to Template entities by IDs.
func (ou *OrganizationUpdate) RemoveTemplateIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveTemplateIDs(ids...)
	return ou
}

// RemoveTemplates removes "templates" edges to Template entities.
func (ou *OrganizationUpdate) RemoveTemplates(t ...*Template) *OrganizationUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.RemoveTemplateIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (ou *OrganizationUpdate) ClearIntegrations() *OrganizationUpdate {
	ou.mutation.ClearIntegrations()
	return ou
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (ou *OrganizationUpdate) RemoveIntegrationIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveIntegrationIDs(ids...)
	return ou
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (ou *OrganizationUpdate) RemoveIntegrations(i ...*Integration) *OrganizationUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.RemoveIntegrationIDs(ids...)
}

// ClearSetting clears the "setting" edge to the OrganizationSetting entity.
func (ou *OrganizationUpdate) ClearSetting() *OrganizationUpdate {
	ou.mutation.ClearSetting()
	return ou
}

// ClearDocumentdata clears all "documentdata" edges to the DocumentData entity.
func (ou *OrganizationUpdate) ClearDocumentdata() *OrganizationUpdate {
	ou.mutation.ClearDocumentdata()
	return ou
}

// RemoveDocumentdatumIDs removes the "documentdata" edge to DocumentData entities by IDs.
func (ou *OrganizationUpdate) RemoveDocumentdatumIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveDocumentdatumIDs(ids...)
	return ou
}

// RemoveDocumentdata removes "documentdata" edges to DocumentData entities.
func (ou *OrganizationUpdate) RemoveDocumentdata(d ...*DocumentData) *OrganizationUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ou.RemoveDocumentdatumIDs(ids...)
}

// ClearEntitlements clears all "entitlements" edges to the Entitlement entity.
func (ou *OrganizationUpdate) ClearEntitlements() *OrganizationUpdate {
	ou.mutation.ClearEntitlements()
	return ou
}

// RemoveEntitlementIDs removes the "entitlements" edge to Entitlement entities by IDs.
func (ou *OrganizationUpdate) RemoveEntitlementIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveEntitlementIDs(ids...)
	return ou
}

// RemoveEntitlements removes "entitlements" edges to Entitlement entities.
func (ou *OrganizationUpdate) RemoveEntitlements(e ...*Entitlement) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.RemoveEntitlementIDs(ids...)
}

// ClearOrganizationEntitlement clears all "organization_entitlement" edges to the Entitlement entity.
func (ou *OrganizationUpdate) ClearOrganizationEntitlement() *OrganizationUpdate {
	ou.mutation.ClearOrganizationEntitlement()
	return ou
}

// RemoveOrganizationEntitlementIDs removes the "organization_entitlement" edge to Entitlement entities by IDs.
func (ou *OrganizationUpdate) RemoveOrganizationEntitlementIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveOrganizationEntitlementIDs(ids...)
	return ou
}

// RemoveOrganizationEntitlement removes "organization_entitlement" edges to Entitlement entities.
func (ou *OrganizationUpdate) RemoveOrganizationEntitlement(e ...*Entitlement) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.RemoveOrganizationEntitlementIDs(ids...)
}

// ClearPersonalAccessTokens clears all "personal_access_tokens" edges to the PersonalAccessToken entity.
func (ou *OrganizationUpdate) ClearPersonalAccessTokens() *OrganizationUpdate {
	ou.mutation.ClearPersonalAccessTokens()
	return ou
}

// RemovePersonalAccessTokenIDs removes the "personal_access_tokens" edge to PersonalAccessToken entities by IDs.
func (ou *OrganizationUpdate) RemovePersonalAccessTokenIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemovePersonalAccessTokenIDs(ids...)
	return ou
}

// RemovePersonalAccessTokens removes "personal_access_tokens" edges to PersonalAccessToken entities.
func (ou *OrganizationUpdate) RemovePersonalAccessTokens(p ...*PersonalAccessToken) *OrganizationUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ou.RemovePersonalAccessTokenIDs(ids...)
}

// ClearAPITokens clears all "api_tokens" edges to the APIToken entity.
func (ou *OrganizationUpdate) ClearAPITokens() *OrganizationUpdate {
	ou.mutation.ClearAPITokens()
	return ou
}

// RemoveAPITokenIDs removes the "api_tokens" edge to APIToken entities by IDs.
func (ou *OrganizationUpdate) RemoveAPITokenIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveAPITokenIDs(ids...)
	return ou
}

// RemoveAPITokens removes "api_tokens" edges to APIToken entities.
func (ou *OrganizationUpdate) RemoveAPITokens(a ...*APIToken) *OrganizationUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ou.RemoveAPITokenIDs(ids...)
}

// ClearOauthprovider clears all "oauthprovider" edges to the OauthProvider entity.
func (ou *OrganizationUpdate) ClearOauthprovider() *OrganizationUpdate {
	ou.mutation.ClearOauthprovider()
	return ou
}

// RemoveOauthproviderIDs removes the "oauthprovider" edge to OauthProvider entities by IDs.
func (ou *OrganizationUpdate) RemoveOauthproviderIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveOauthproviderIDs(ids...)
	return ou
}

// RemoveOauthprovider removes "oauthprovider" edges to OauthProvider entities.
func (ou *OrganizationUpdate) RemoveOauthprovider(o ...*OauthProvider) *OrganizationUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveOauthproviderIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (ou *OrganizationUpdate) ClearUsers() *OrganizationUpdate {
	ou.mutation.ClearUsers()
	return ou
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ou *OrganizationUpdate) RemoveUserIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveUserIDs(ids...)
	return ou
}

// RemoveUsers removes "users" edges to User entities.
func (ou *OrganizationUpdate) RemoveUsers(u ...*User) *OrganizationUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ou.RemoveUserIDs(ids...)
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (ou *OrganizationUpdate) ClearInvites() *OrganizationUpdate {
	ou.mutation.ClearInvites()
	return ou
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (ou *OrganizationUpdate) RemoveInviteIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveInviteIDs(ids...)
	return ou
}

// RemoveInvites removes "invites" edges to Invite entities.
func (ou *OrganizationUpdate) RemoveInvites(i ...*Invite) *OrganizationUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ou.RemoveInviteIDs(ids...)
}

// ClearSubscribers clears all "subscribers" edges to the Subscriber entity.
func (ou *OrganizationUpdate) ClearSubscribers() *OrganizationUpdate {
	ou.mutation.ClearSubscribers()
	return ou
}

// RemoveSubscriberIDs removes the "subscribers" edge to Subscriber entities by IDs.
func (ou *OrganizationUpdate) RemoveSubscriberIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveSubscriberIDs(ids...)
	return ou
}

// RemoveSubscribers removes "subscribers" edges to Subscriber entities.
func (ou *OrganizationUpdate) RemoveSubscribers(s ...*Subscriber) *OrganizationUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ou.RemoveSubscriberIDs(ids...)
}

// ClearWebhooks clears all "webhooks" edges to the Webhook entity.
func (ou *OrganizationUpdate) ClearWebhooks() *OrganizationUpdate {
	ou.mutation.ClearWebhooks()
	return ou
}

// RemoveWebhookIDs removes the "webhooks" edge to Webhook entities by IDs.
func (ou *OrganizationUpdate) RemoveWebhookIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveWebhookIDs(ids...)
	return ou
}

// RemoveWebhooks removes "webhooks" edges to Webhook entities.
func (ou *OrganizationUpdate) RemoveWebhooks(w ...*Webhook) *OrganizationUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ou.RemoveWebhookIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (ou *OrganizationUpdate) ClearEvents() *OrganizationUpdate {
	ou.mutation.ClearEvents()
	return ou
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (ou *OrganizationUpdate) RemoveEventIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveEventIDs(ids...)
	return ou
}

// RemoveEvents removes "events" edges to Event entities.
func (ou *OrganizationUpdate) RemoveEvents(e ...*Event) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.RemoveEventIDs(ids...)
}

// ClearSecrets clears all "secrets" edges to the Hush entity.
func (ou *OrganizationUpdate) ClearSecrets() *OrganizationUpdate {
	ou.mutation.ClearSecrets()
	return ou
}

// RemoveSecretIDs removes the "secrets" edge to Hush entities by IDs.
func (ou *OrganizationUpdate) RemoveSecretIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveSecretIDs(ids...)
	return ou
}

// RemoveSecrets removes "secrets" edges to Hush entities.
func (ou *OrganizationUpdate) RemoveSecrets(h ...*Hush) *OrganizationUpdate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ou.RemoveSecretIDs(ids...)
}

// ClearFeatures clears all "features" edges to the Feature entity.
func (ou *OrganizationUpdate) ClearFeatures() *OrganizationUpdate {
	ou.mutation.ClearFeatures()
	return ou
}

// RemoveFeatureIDs removes the "features" edge to Feature entities by IDs.
func (ou *OrganizationUpdate) RemoveFeatureIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveFeatureIDs(ids...)
	return ou
}

// RemoveFeatures removes "features" edges to Feature entities.
func (ou *OrganizationUpdate) RemoveFeatures(f ...*Feature) *OrganizationUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ou.RemoveFeatureIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (ou *OrganizationUpdate) ClearFiles() *OrganizationUpdate {
	ou.mutation.ClearFiles()
	return ou
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (ou *OrganizationUpdate) RemoveFileIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveFileIDs(ids...)
	return ou
}

// RemoveFiles removes "files" edges to File entities.
func (ou *OrganizationUpdate) RemoveFiles(f ...*File) *OrganizationUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ou.RemoveFileIDs(ids...)
}

// ClearEntitlementplans clears all "entitlementplans" edges to the EntitlementPlan entity.
func (ou *OrganizationUpdate) ClearEntitlementplans() *OrganizationUpdate {
	ou.mutation.ClearEntitlementplans()
	return ou
}

// RemoveEntitlementplanIDs removes the "entitlementplans" edge to EntitlementPlan entities by IDs.
func (ou *OrganizationUpdate) RemoveEntitlementplanIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveEntitlementplanIDs(ids...)
	return ou
}

// RemoveEntitlementplans removes "entitlementplans" edges to EntitlementPlan entities.
func (ou *OrganizationUpdate) RemoveEntitlementplans(e ...*EntitlementPlan) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.RemoveEntitlementplanIDs(ids...)
}

// ClearEntitlementplanfeatures clears all "entitlementplanfeatures" edges to the EntitlementPlanFeature entity.
func (ou *OrganizationUpdate) ClearEntitlementplanfeatures() *OrganizationUpdate {
	ou.mutation.ClearEntitlementplanfeatures()
	return ou
}

// RemoveEntitlementplanfeatureIDs removes the "entitlementplanfeatures" edge to EntitlementPlanFeature entities by IDs.
func (ou *OrganizationUpdate) RemoveEntitlementplanfeatureIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveEntitlementplanfeatureIDs(ids...)
	return ou
}

// RemoveEntitlementplanfeatures removes "entitlementplanfeatures" edges to EntitlementPlanFeature entities.
func (ou *OrganizationUpdate) RemoveEntitlementplanfeatures(e ...*EntitlementPlanFeature) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.RemoveEntitlementplanfeatureIDs(ids...)
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (ou *OrganizationUpdate) ClearEntities() *OrganizationUpdate {
	ou.mutation.ClearEntities()
	return ou
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (ou *OrganizationUpdate) RemoveEntityIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveEntityIDs(ids...)
	return ou
}

// RemoveEntities removes "entities" edges to Entity entities.
func (ou *OrganizationUpdate) RemoveEntities(e ...*Entity) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.RemoveEntityIDs(ids...)
}

// ClearEntitytypes clears all "entitytypes" edges to the EntityType entity.
func (ou *OrganizationUpdate) ClearEntitytypes() *OrganizationUpdate {
	ou.mutation.ClearEntitytypes()
	return ou
}

// RemoveEntitytypeIDs removes the "entitytypes" edge to EntityType entities by IDs.
func (ou *OrganizationUpdate) RemoveEntitytypeIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveEntitytypeIDs(ids...)
	return ou
}

// RemoveEntitytypes removes "entitytypes" edges to EntityType entities.
func (ou *OrganizationUpdate) RemoveEntitytypes(e ...*EntityType) *OrganizationUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ou.RemoveEntitytypeIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the Contact entity.
func (ou *OrganizationUpdate) ClearContacts() *OrganizationUpdate {
	ou.mutation.ClearContacts()
	return ou
}

// RemoveContactIDs removes the "contacts" edge to Contact entities by IDs.
func (ou *OrganizationUpdate) RemoveContactIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveContactIDs(ids...)
	return ou
}

// RemoveContacts removes "contacts" edges to Contact entities.
func (ou *OrganizationUpdate) RemoveContacts(c ...*Contact) *OrganizationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.RemoveContactIDs(ids...)
}

// ClearNotes clears all "notes" edges to the Note entity.
func (ou *OrganizationUpdate) ClearNotes() *OrganizationUpdate {
	ou.mutation.ClearNotes()
	return ou
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (ou *OrganizationUpdate) RemoveNoteIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveNoteIDs(ids...)
	return ou
}

// RemoveNotes removes "notes" edges to Note entities.
func (ou *OrganizationUpdate) RemoveNotes(n ...*Note) *OrganizationUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ou.RemoveNoteIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (ou *OrganizationUpdate) ClearTasks() *OrganizationUpdate {
	ou.mutation.ClearTasks()
	return ou
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (ou *OrganizationUpdate) RemoveTaskIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveTaskIDs(ids...)
	return ou
}

// RemoveTasks removes "tasks" edges to Task entities.
func (ou *OrganizationUpdate) RemoveTasks(t ...*Task) *OrganizationUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ou.RemoveTaskIDs(ids...)
}

// ClearMembers clears all "members" edges to the OrgMembership entity.
func (ou *OrganizationUpdate) ClearMembers() *OrganizationUpdate {
	ou.mutation.ClearMembers()
	return ou
}

// RemoveMemberIDs removes the "members" edge to OrgMembership entities by IDs.
func (ou *OrganizationUpdate) RemoveMemberIDs(ids ...string) *OrganizationUpdate {
	ou.mutation.RemoveMemberIDs(ids...)
	return ou
}

// RemoveMembers removes "members" edges to OrgMembership entities.
func (ou *OrganizationUpdate) RemoveMembers(o ...*OrgMembership) *OrganizationUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ou.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	if err := ou.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrganizationUpdate) defaults() error {
	if _, ok := ou.mutation.UpdatedAt(); !ok && !ou.mutation.UpdatedAtCleared() {
		if organization.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organization.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organization.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrganizationUpdate) check() error {
	if v, ok := ou.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := ou.mutation.DisplayName(); ok {
		if err := organization.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Organization.display_name": %w`, err)}
		}
	}
	if v, ok := ou.mutation.AvatarRemoteURL(); ok {
		if err := organization.AvatarRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_remote_url", err: fmt.Errorf(`generated: validator failed for field "Organization.avatar_remote_url": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ou *OrganizationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationUpdate {
	ou.modifiers = append(ou.modifiers, modifiers...)
	return ou
}

func (ou *OrganizationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ou.mutation.CreatedAtCleared() {
		_spec.ClearField(organization.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if ou.mutation.UpdatedAtCleared() {
		_spec.ClearField(organization.FieldUpdatedAt, field.TypeTime)
	}
	if ou.mutation.CreatedByCleared() {
		_spec.ClearField(organization.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ou.mutation.UpdatedBy(); ok {
		_spec.SetField(organization.FieldUpdatedBy, field.TypeString, value)
	}
	if ou.mutation.UpdatedByCleared() {
		_spec.ClearField(organization.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ou.mutation.Tags(); ok {
		_spec.SetField(organization.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ou.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldTags, value)
		})
	}
	if ou.mutation.TagsCleared() {
		_spec.ClearField(organization.FieldTags, field.TypeJSON)
	}
	if value, ok := ou.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
	}
	if ou.mutation.DeletedAtCleared() {
		_spec.ClearField(organization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ou.mutation.DeletedBy(); ok {
		_spec.SetField(organization.FieldDeletedBy, field.TypeString, value)
	}
	if ou.mutation.DeletedByCleared() {
		_spec.ClearField(organization.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.DisplayName(); ok {
		_spec.SetField(organization.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if ou.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if ou.mutation.PersonalOrgCleared() {
		_spec.ClearField(organization.FieldPersonalOrg, field.TypeBool)
	}
	if value, ok := ou.mutation.AvatarRemoteURL(); ok {
		_spec.SetField(organization.FieldAvatarRemoteURL, field.TypeString, value)
	}
	if ou.mutation.AvatarRemoteURLCleared() {
		_spec.ClearField(organization.FieldAvatarRemoteURL, field.TypeString)
	}
	if value, ok := ou.mutation.DedicatedDb(); ok {
		_spec.SetField(organization.FieldDedicatedDb, field.TypeBool, value)
	}
	if ou.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Organization
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ou.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !ou.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Template
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedTemplatesIDs(); len(nodes) > 0 && !ou.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Template
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Template
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Integration
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !ou.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.DocumentdataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentdataTable,
			Columns: []string{organization.DocumentdataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.DocumentData
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedDocumentdataIDs(); len(nodes) > 0 && !ou.mutation.DocumentdataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentdataTable,
			Columns: []string{organization.DocumentdataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.DocumentData
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.DocumentdataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentdataTable,
			Columns: []string{organization.DocumentdataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.DocumentData
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementsTable,
			Columns: []string{organization.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Entitlement
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedEntitlementsIDs(); len(nodes) > 0 && !ou.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementsTable,
			Columns: []string{organization.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.EntitlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementsTable,
			Columns: []string{organization.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrganizationEntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationEntitlementTable,
			Columns: []string{organization.OrganizationEntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Entitlement
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOrganizationEntitlementIDs(); len(nodes) > 0 && !ou.mutation.OrganizationEntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationEntitlementTable,
			Columns: []string{organization.OrganizationEntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrganizationEntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationEntitlementTable,
			Columns: []string{organization.OrganizationEntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationPersonalAccessTokens
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedPersonalAccessTokensIDs(); len(nodes) > 0 && !ou.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationPersonalAccessTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationPersonalAccessTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.APIToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedAPITokensIDs(); len(nodes) > 0 && !ou.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.APIToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.APIToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OauthproviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthproviderTable,
			Columns: []string{organization.OauthproviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OauthProvider
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedOauthproviderIDs(); len(nodes) > 0 && !ou.mutation.OauthproviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthproviderTable,
			Columns: []string{organization.OauthproviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OauthProvider
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OauthproviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthproviderTable,
			Columns: []string{organization.OauthproviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OauthProvider
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrgMembership
		createE := &OrgMembershipCreate{config: ou.config, mutation: newOrgMembershipMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ou.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: ou.config, mutation: newOrgMembershipMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: ou.config, mutation: newOrgMembershipMutation(ou.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Invite
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !ou.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Invite
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Invite
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Subscriber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedSubscribersIDs(); len(nodes) > 0 && !ou.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Subscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Subscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.WebhooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Webhook
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedWebhooksIDs(); len(nodes) > 0 && !ou.mutation.WebhooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Webhook
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.WebhooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Webhook
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedEventsIDs(); len(nodes) > 0 && !ou.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: organization.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationSecrets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedSecretsIDs(); len(nodes) > 0 && !ou.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: organization.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationSecrets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: organization.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationSecrets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeaturesTable,
			Columns: []string{organization.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Feature
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !ou.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeaturesTable,
			Columns: []string{organization.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Feature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeaturesTable,
			Columns: []string{organization.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Feature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedFilesIDs(); len(nodes) > 0 && !ou.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.EntitlementplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplansTable,
			Columns: []string{organization.EntitlementplansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.EntitlementPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedEntitlementplansIDs(); len(nodes) > 0 && !ou.mutation.EntitlementplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplansTable,
			Columns: []string{organization.EntitlementplansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.EntitlementPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.EntitlementplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplansTable,
			Columns: []string{organization.EntitlementplansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.EntitlementPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.EntitlementplanfeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplanfeaturesTable,
			Columns: []string{organization.EntitlementplanfeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.EntitlementPlanFeature
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedEntitlementplanfeaturesIDs(); len(nodes) > 0 && !ou.mutation.EntitlementplanfeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplanfeaturesTable,
			Columns: []string{organization.EntitlementplanfeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.EntitlementplanfeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplanfeaturesTable,
			Columns: []string{organization.EntitlementplanfeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !ou.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.EntitytypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitytypesTable,
			Columns: []string{organization.EntitytypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.EntityType
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedEntitytypesIDs(); len(nodes) > 0 && !ou.mutation.EntitytypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitytypesTable,
			Columns: []string{organization.EntitytypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.EntitytypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitytypesTable,
			Columns: []string{organization.EntitytypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Contact
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedContactsIDs(); len(nodes) > 0 && !ou.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedNotesIDs(); len(nodes) > 0 && !ou.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: organization.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedTasksIDs(); len(nodes) > 0 && !ou.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: organization.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: organization.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrganizationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrgMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedMembersIDs(); len(nodes) > 0 && !ou.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = ou.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ou.schemaConfig.Organization
	ctx = internal.NewSchemaConfigContext(ctx, ou.schemaConfig)
	_spec.AddModifiers(ou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrganizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *OrganizationUpdateOne) SetUpdatedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetUpdatedAt(t)
	return ouo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ouo *OrganizationUpdateOne) ClearUpdatedAt() *OrganizationUpdateOne {
	ouo.mutation.ClearUpdatedAt()
	return ouo
}

// SetUpdatedBy sets the "updated_by" field.
func (ouo *OrganizationUpdateOne) SetUpdatedBy(s string) *OrganizationUpdateOne {
	ouo.mutation.SetUpdatedBy(s)
	return ouo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableUpdatedBy(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetUpdatedBy(*s)
	}
	return ouo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ouo *OrganizationUpdateOne) ClearUpdatedBy() *OrganizationUpdateOne {
	ouo.mutation.ClearUpdatedBy()
	return ouo
}

// SetTags sets the "tags" field.
func (ouo *OrganizationUpdateOne) SetTags(s []string) *OrganizationUpdateOne {
	ouo.mutation.SetTags(s)
	return ouo
}

// AppendTags appends s to the "tags" field.
func (ouo *OrganizationUpdateOne) AppendTags(s []string) *OrganizationUpdateOne {
	ouo.mutation.AppendTags(s)
	return ouo
}

// ClearTags clears the value of the "tags" field.
func (ouo *OrganizationUpdateOne) ClearTags() *OrganizationUpdateOne {
	ouo.mutation.ClearTags()
	return ouo
}

// SetDeletedAt sets the "deleted_at" field.
func (ouo *OrganizationUpdateOne) SetDeletedAt(t time.Time) *OrganizationUpdateOne {
	ouo.mutation.SetDeletedAt(t)
	return ouo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDeletedAt(t *time.Time) *OrganizationUpdateOne {
	if t != nil {
		ouo.SetDeletedAt(*t)
	}
	return ouo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ouo *OrganizationUpdateOne) ClearDeletedAt() *OrganizationUpdateOne {
	ouo.mutation.ClearDeletedAt()
	return ouo
}

// SetDeletedBy sets the "deleted_by" field.
func (ouo *OrganizationUpdateOne) SetDeletedBy(s string) *OrganizationUpdateOne {
	ouo.mutation.SetDeletedBy(s)
	return ouo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDeletedBy(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetDeletedBy(*s)
	}
	return ouo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ouo *OrganizationUpdateOne) ClearDeletedBy() *OrganizationUpdateOne {
	ouo.mutation.ClearDeletedBy()
	return ouo
}

// SetName sets the "name" field.
func (ouo *OrganizationUpdateOne) SetName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableName(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetDisplayName sets the "display_name" field.
func (ouo *OrganizationUpdateOne) SetDisplayName(s string) *OrganizationUpdateOne {
	ouo.mutation.SetDisplayName(s)
	return ouo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDisplayName(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetDisplayName(*s)
	}
	return ouo
}

// SetDescription sets the "description" field.
func (ouo *OrganizationUpdateOne) SetDescription(s string) *OrganizationUpdateOne {
	ouo.mutation.SetDescription(s)
	return ouo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDescription(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetDescription(*s)
	}
	return ouo
}

// ClearDescription clears the value of the "description" field.
func (ouo *OrganizationUpdateOne) ClearDescription() *OrganizationUpdateOne {
	ouo.mutation.ClearDescription()
	return ouo
}

// SetAvatarRemoteURL sets the "avatar_remote_url" field.
func (ouo *OrganizationUpdateOne) SetAvatarRemoteURL(s string) *OrganizationUpdateOne {
	ouo.mutation.SetAvatarRemoteURL(s)
	return ouo
}

// SetNillableAvatarRemoteURL sets the "avatar_remote_url" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableAvatarRemoteURL(s *string) *OrganizationUpdateOne {
	if s != nil {
		ouo.SetAvatarRemoteURL(*s)
	}
	return ouo
}

// ClearAvatarRemoteURL clears the value of the "avatar_remote_url" field.
func (ouo *OrganizationUpdateOne) ClearAvatarRemoteURL() *OrganizationUpdateOne {
	ouo.mutation.ClearAvatarRemoteURL()
	return ouo
}

// SetDedicatedDb sets the "dedicated_db" field.
func (ouo *OrganizationUpdateOne) SetDedicatedDb(b bool) *OrganizationUpdateOne {
	ouo.mutation.SetDedicatedDb(b)
	return ouo
}

// SetNillableDedicatedDb sets the "dedicated_db" field if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableDedicatedDb(b *bool) *OrganizationUpdateOne {
	if b != nil {
		ouo.SetDedicatedDb(*b)
	}
	return ouo
}

// AddChildIDs adds the "children" edge to the Organization entity by IDs.
func (ouo *OrganizationUpdateOne) AddChildIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddChildIDs(ids...)
	return ouo
}

// AddChildren adds the "children" edges to the Organization entity.
func (ouo *OrganizationUpdateOne) AddChildren(o ...*Organization) *OrganizationUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddChildIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (ouo *OrganizationUpdateOne) AddGroupIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddGroupIDs(ids...)
	return ouo
}

// AddGroups adds the "groups" edges to the Group entity.
func (ouo *OrganizationUpdateOne) AddGroups(g ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.AddGroupIDs(ids...)
}

// AddTemplateIDs adds the "templates" edge to the Template entity by IDs.
func (ouo *OrganizationUpdateOne) AddTemplateIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddTemplateIDs(ids...)
	return ouo
}

// AddTemplates adds the "templates" edges to the Template entity.
func (ouo *OrganizationUpdateOne) AddTemplates(t ...*Template) *OrganizationUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.AddTemplateIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (ouo *OrganizationUpdateOne) AddIntegrationIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddIntegrationIDs(ids...)
	return ouo
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (ouo *OrganizationUpdateOne) AddIntegrations(i ...*Integration) *OrganizationUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.AddIntegrationIDs(ids...)
}

// SetSettingID sets the "setting" edge to the OrganizationSetting entity by ID.
func (ouo *OrganizationUpdateOne) SetSettingID(id string) *OrganizationUpdateOne {
	ouo.mutation.SetSettingID(id)
	return ouo
}

// SetNillableSettingID sets the "setting" edge to the OrganizationSetting entity by ID if the given value is not nil.
func (ouo *OrganizationUpdateOne) SetNillableSettingID(id *string) *OrganizationUpdateOne {
	if id != nil {
		ouo = ouo.SetSettingID(*id)
	}
	return ouo
}

// SetSetting sets the "setting" edge to the OrganizationSetting entity.
func (ouo *OrganizationUpdateOne) SetSetting(o *OrganizationSetting) *OrganizationUpdateOne {
	return ouo.SetSettingID(o.ID)
}

// AddDocumentdatumIDs adds the "documentdata" edge to the DocumentData entity by IDs.
func (ouo *OrganizationUpdateOne) AddDocumentdatumIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddDocumentdatumIDs(ids...)
	return ouo
}

// AddDocumentdata adds the "documentdata" edges to the DocumentData entity.
func (ouo *OrganizationUpdateOne) AddDocumentdata(d ...*DocumentData) *OrganizationUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ouo.AddDocumentdatumIDs(ids...)
}

// AddEntitlementIDs adds the "entitlements" edge to the Entitlement entity by IDs.
func (ouo *OrganizationUpdateOne) AddEntitlementIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddEntitlementIDs(ids...)
	return ouo
}

// AddEntitlements adds the "entitlements" edges to the Entitlement entity.
func (ouo *OrganizationUpdateOne) AddEntitlements(e ...*Entitlement) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.AddEntitlementIDs(ids...)
}

// AddOrganizationEntitlementIDs adds the "organization_entitlement" edge to the Entitlement entity by IDs.
func (ouo *OrganizationUpdateOne) AddOrganizationEntitlementIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddOrganizationEntitlementIDs(ids...)
	return ouo
}

// AddOrganizationEntitlement adds the "organization_entitlement" edges to the Entitlement entity.
func (ouo *OrganizationUpdateOne) AddOrganizationEntitlement(e ...*Entitlement) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.AddOrganizationEntitlementIDs(ids...)
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (ouo *OrganizationUpdateOne) AddPersonalAccessTokenIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddPersonalAccessTokenIDs(ids...)
	return ouo
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (ouo *OrganizationUpdateOne) AddPersonalAccessTokens(p ...*PersonalAccessToken) *OrganizationUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.AddPersonalAccessTokenIDs(ids...)
}

// AddAPITokenIDs adds the "api_tokens" edge to the APIToken entity by IDs.
func (ouo *OrganizationUpdateOne) AddAPITokenIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddAPITokenIDs(ids...)
	return ouo
}

// AddAPITokens adds the "api_tokens" edges to the APIToken entity.
func (ouo *OrganizationUpdateOne) AddAPITokens(a ...*APIToken) *OrganizationUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.AddAPITokenIDs(ids...)
}

// AddOauthproviderIDs adds the "oauthprovider" edge to the OauthProvider entity by IDs.
func (ouo *OrganizationUpdateOne) AddOauthproviderIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddOauthproviderIDs(ids...)
	return ouo
}

// AddOauthprovider adds the "oauthprovider" edges to the OauthProvider entity.
func (ouo *OrganizationUpdateOne) AddOauthprovider(o ...*OauthProvider) *OrganizationUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddOauthproviderIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (ouo *OrganizationUpdateOne) AddUserIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddUserIDs(ids...)
	return ouo
}

// AddUsers adds the "users" edges to the User entity.
func (ouo *OrganizationUpdateOne) AddUsers(u ...*User) *OrganizationUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.AddUserIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (ouo *OrganizationUpdateOne) AddInviteIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddInviteIDs(ids...)
	return ouo
}

// AddInvites adds the "invites" edges to the Invite entity.
func (ouo *OrganizationUpdateOne) AddInvites(i ...*Invite) *OrganizationUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.AddInviteIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the Subscriber entity by IDs.
func (ouo *OrganizationUpdateOne) AddSubscriberIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddSubscriberIDs(ids...)
	return ouo
}

// AddSubscribers adds the "subscribers" edges to the Subscriber entity.
func (ouo *OrganizationUpdateOne) AddSubscribers(s ...*Subscriber) *OrganizationUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.AddSubscriberIDs(ids...)
}

// AddWebhookIDs adds the "webhooks" edge to the Webhook entity by IDs.
func (ouo *OrganizationUpdateOne) AddWebhookIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddWebhookIDs(ids...)
	return ouo
}

// AddWebhooks adds the "webhooks" edges to the Webhook entity.
func (ouo *OrganizationUpdateOne) AddWebhooks(w ...*Webhook) *OrganizationUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ouo.AddWebhookIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (ouo *OrganizationUpdateOne) AddEventIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddEventIDs(ids...)
	return ouo
}

// AddEvents adds the "events" edges to the Event entity.
func (ouo *OrganizationUpdateOne) AddEvents(e ...*Event) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.AddEventIDs(ids...)
}

// AddSecretIDs adds the "secrets" edge to the Hush entity by IDs.
func (ouo *OrganizationUpdateOne) AddSecretIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddSecretIDs(ids...)
	return ouo
}

// AddSecrets adds the "secrets" edges to the Hush entity.
func (ouo *OrganizationUpdateOne) AddSecrets(h ...*Hush) *OrganizationUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ouo.AddSecretIDs(ids...)
}

// AddFeatureIDs adds the "features" edge to the Feature entity by IDs.
func (ouo *OrganizationUpdateOne) AddFeatureIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddFeatureIDs(ids...)
	return ouo
}

// AddFeatures adds the "features" edges to the Feature entity.
func (ouo *OrganizationUpdateOne) AddFeatures(f ...*Feature) *OrganizationUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ouo.AddFeatureIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (ouo *OrganizationUpdateOne) AddFileIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddFileIDs(ids...)
	return ouo
}

// AddFiles adds the "files" edges to the File entity.
func (ouo *OrganizationUpdateOne) AddFiles(f ...*File) *OrganizationUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ouo.AddFileIDs(ids...)
}

// AddEntitlementplanIDs adds the "entitlementplans" edge to the EntitlementPlan entity by IDs.
func (ouo *OrganizationUpdateOne) AddEntitlementplanIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddEntitlementplanIDs(ids...)
	return ouo
}

// AddEntitlementplans adds the "entitlementplans" edges to the EntitlementPlan entity.
func (ouo *OrganizationUpdateOne) AddEntitlementplans(e ...*EntitlementPlan) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.AddEntitlementplanIDs(ids...)
}

// AddEntitlementplanfeatureIDs adds the "entitlementplanfeatures" edge to the EntitlementPlanFeature entity by IDs.
func (ouo *OrganizationUpdateOne) AddEntitlementplanfeatureIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddEntitlementplanfeatureIDs(ids...)
	return ouo
}

// AddEntitlementplanfeatures adds the "entitlementplanfeatures" edges to the EntitlementPlanFeature entity.
func (ouo *OrganizationUpdateOne) AddEntitlementplanfeatures(e ...*EntitlementPlanFeature) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.AddEntitlementplanfeatureIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (ouo *OrganizationUpdateOne) AddEntityIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddEntityIDs(ids...)
	return ouo
}

// AddEntities adds the "entities" edges to the Entity entity.
func (ouo *OrganizationUpdateOne) AddEntities(e ...*Entity) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.AddEntityIDs(ids...)
}

// AddEntitytypeIDs adds the "entitytypes" edge to the EntityType entity by IDs.
func (ouo *OrganizationUpdateOne) AddEntitytypeIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddEntitytypeIDs(ids...)
	return ouo
}

// AddEntitytypes adds the "entitytypes" edges to the EntityType entity.
func (ouo *OrganizationUpdateOne) AddEntitytypes(e ...*EntityType) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.AddEntitytypeIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (ouo *OrganizationUpdateOne) AddContactIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddContactIDs(ids...)
	return ouo
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (ouo *OrganizationUpdateOne) AddContacts(c ...*Contact) *OrganizationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.AddContactIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (ouo *OrganizationUpdateOne) AddNoteIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddNoteIDs(ids...)
	return ouo
}

// AddNotes adds the "notes" edges to the Note entity.
func (ouo *OrganizationUpdateOne) AddNotes(n ...*Note) *OrganizationUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ouo.AddNoteIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ouo *OrganizationUpdateOne) AddTaskIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddTaskIDs(ids...)
	return ouo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ouo *OrganizationUpdateOne) AddTasks(t ...*Task) *OrganizationUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.AddTaskIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the OrgMembership entity by IDs.
func (ouo *OrganizationUpdateOne) AddMemberIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.AddMemberIDs(ids...)
	return ouo
}

// AddMembers adds the "members" edges to the OrgMembership entity.
func (ouo *OrganizationUpdateOne) AddMembers(o ...*OrgMembership) *OrganizationUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.AddMemberIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (ouo *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return ouo.mutation
}

// ClearChildren clears all "children" edges to the Organization entity.
func (ouo *OrganizationUpdateOne) ClearChildren() *OrganizationUpdateOne {
	ouo.mutation.ClearChildren()
	return ouo
}

// RemoveChildIDs removes the "children" edge to Organization entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveChildIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveChildIDs(ids...)
	return ouo
}

// RemoveChildren removes "children" edges to Organization entities.
func (ouo *OrganizationUpdateOne) RemoveChildren(o ...*Organization) *OrganizationUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveChildIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (ouo *OrganizationUpdateOne) ClearGroups() *OrganizationUpdateOne {
	ouo.mutation.ClearGroups()
	return ouo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveGroupIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveGroupIDs(ids...)
	return ouo
}

// RemoveGroups removes "groups" edges to Group entities.
func (ouo *OrganizationUpdateOne) RemoveGroups(g ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ouo.RemoveGroupIDs(ids...)
}

// ClearTemplates clears all "templates" edges to the Template entity.
func (ouo *OrganizationUpdateOne) ClearTemplates() *OrganizationUpdateOne {
	ouo.mutation.ClearTemplates()
	return ouo
}

// RemoveTemplateIDs removes the "templates" edge to Template entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveTemplateIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveTemplateIDs(ids...)
	return ouo
}

// RemoveTemplates removes "templates" edges to Template entities.
func (ouo *OrganizationUpdateOne) RemoveTemplates(t ...*Template) *OrganizationUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.RemoveTemplateIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (ouo *OrganizationUpdateOne) ClearIntegrations() *OrganizationUpdateOne {
	ouo.mutation.ClearIntegrations()
	return ouo
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveIntegrationIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveIntegrationIDs(ids...)
	return ouo
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (ouo *OrganizationUpdateOne) RemoveIntegrations(i ...*Integration) *OrganizationUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.RemoveIntegrationIDs(ids...)
}

// ClearSetting clears the "setting" edge to the OrganizationSetting entity.
func (ouo *OrganizationUpdateOne) ClearSetting() *OrganizationUpdateOne {
	ouo.mutation.ClearSetting()
	return ouo
}

// ClearDocumentdata clears all "documentdata" edges to the DocumentData entity.
func (ouo *OrganizationUpdateOne) ClearDocumentdata() *OrganizationUpdateOne {
	ouo.mutation.ClearDocumentdata()
	return ouo
}

// RemoveDocumentdatumIDs removes the "documentdata" edge to DocumentData entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveDocumentdatumIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveDocumentdatumIDs(ids...)
	return ouo
}

// RemoveDocumentdata removes "documentdata" edges to DocumentData entities.
func (ouo *OrganizationUpdateOne) RemoveDocumentdata(d ...*DocumentData) *OrganizationUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return ouo.RemoveDocumentdatumIDs(ids...)
}

// ClearEntitlements clears all "entitlements" edges to the Entitlement entity.
func (ouo *OrganizationUpdateOne) ClearEntitlements() *OrganizationUpdateOne {
	ouo.mutation.ClearEntitlements()
	return ouo
}

// RemoveEntitlementIDs removes the "entitlements" edge to Entitlement entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveEntitlementIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveEntitlementIDs(ids...)
	return ouo
}

// RemoveEntitlements removes "entitlements" edges to Entitlement entities.
func (ouo *OrganizationUpdateOne) RemoveEntitlements(e ...*Entitlement) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.RemoveEntitlementIDs(ids...)
}

// ClearOrganizationEntitlement clears all "organization_entitlement" edges to the Entitlement entity.
func (ouo *OrganizationUpdateOne) ClearOrganizationEntitlement() *OrganizationUpdateOne {
	ouo.mutation.ClearOrganizationEntitlement()
	return ouo
}

// RemoveOrganizationEntitlementIDs removes the "organization_entitlement" edge to Entitlement entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveOrganizationEntitlementIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveOrganizationEntitlementIDs(ids...)
	return ouo
}

// RemoveOrganizationEntitlement removes "organization_entitlement" edges to Entitlement entities.
func (ouo *OrganizationUpdateOne) RemoveOrganizationEntitlement(e ...*Entitlement) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.RemoveOrganizationEntitlementIDs(ids...)
}

// ClearPersonalAccessTokens clears all "personal_access_tokens" edges to the PersonalAccessToken entity.
func (ouo *OrganizationUpdateOne) ClearPersonalAccessTokens() *OrganizationUpdateOne {
	ouo.mutation.ClearPersonalAccessTokens()
	return ouo
}

// RemovePersonalAccessTokenIDs removes the "personal_access_tokens" edge to PersonalAccessToken entities by IDs.
func (ouo *OrganizationUpdateOne) RemovePersonalAccessTokenIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemovePersonalAccessTokenIDs(ids...)
	return ouo
}

// RemovePersonalAccessTokens removes "personal_access_tokens" edges to PersonalAccessToken entities.
func (ouo *OrganizationUpdateOne) RemovePersonalAccessTokens(p ...*PersonalAccessToken) *OrganizationUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ouo.RemovePersonalAccessTokenIDs(ids...)
}

// ClearAPITokens clears all "api_tokens" edges to the APIToken entity.
func (ouo *OrganizationUpdateOne) ClearAPITokens() *OrganizationUpdateOne {
	ouo.mutation.ClearAPITokens()
	return ouo
}

// RemoveAPITokenIDs removes the "api_tokens" edge to APIToken entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveAPITokenIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveAPITokenIDs(ids...)
	return ouo
}

// RemoveAPITokens removes "api_tokens" edges to APIToken entities.
func (ouo *OrganizationUpdateOne) RemoveAPITokens(a ...*APIToken) *OrganizationUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ouo.RemoveAPITokenIDs(ids...)
}

// ClearOauthprovider clears all "oauthprovider" edges to the OauthProvider entity.
func (ouo *OrganizationUpdateOne) ClearOauthprovider() *OrganizationUpdateOne {
	ouo.mutation.ClearOauthprovider()
	return ouo
}

// RemoveOauthproviderIDs removes the "oauthprovider" edge to OauthProvider entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveOauthproviderIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveOauthproviderIDs(ids...)
	return ouo
}

// RemoveOauthprovider removes "oauthprovider" edges to OauthProvider entities.
func (ouo *OrganizationUpdateOne) RemoveOauthprovider(o ...*OauthProvider) *OrganizationUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveOauthproviderIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (ouo *OrganizationUpdateOne) ClearUsers() *OrganizationUpdateOne {
	ouo.mutation.ClearUsers()
	return ouo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveUserIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveUserIDs(ids...)
	return ouo
}

// RemoveUsers removes "users" edges to User entities.
func (ouo *OrganizationUpdateOne) RemoveUsers(u ...*User) *OrganizationUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ouo.RemoveUserIDs(ids...)
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (ouo *OrganizationUpdateOne) ClearInvites() *OrganizationUpdateOne {
	ouo.mutation.ClearInvites()
	return ouo
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveInviteIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveInviteIDs(ids...)
	return ouo
}

// RemoveInvites removes "invites" edges to Invite entities.
func (ouo *OrganizationUpdateOne) RemoveInvites(i ...*Invite) *OrganizationUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ouo.RemoveInviteIDs(ids...)
}

// ClearSubscribers clears all "subscribers" edges to the Subscriber entity.
func (ouo *OrganizationUpdateOne) ClearSubscribers() *OrganizationUpdateOne {
	ouo.mutation.ClearSubscribers()
	return ouo
}

// RemoveSubscriberIDs removes the "subscribers" edge to Subscriber entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveSubscriberIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveSubscriberIDs(ids...)
	return ouo
}

// RemoveSubscribers removes "subscribers" edges to Subscriber entities.
func (ouo *OrganizationUpdateOne) RemoveSubscribers(s ...*Subscriber) *OrganizationUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ouo.RemoveSubscriberIDs(ids...)
}

// ClearWebhooks clears all "webhooks" edges to the Webhook entity.
func (ouo *OrganizationUpdateOne) ClearWebhooks() *OrganizationUpdateOne {
	ouo.mutation.ClearWebhooks()
	return ouo
}

// RemoveWebhookIDs removes the "webhooks" edge to Webhook entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveWebhookIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveWebhookIDs(ids...)
	return ouo
}

// RemoveWebhooks removes "webhooks" edges to Webhook entities.
func (ouo *OrganizationUpdateOne) RemoveWebhooks(w ...*Webhook) *OrganizationUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ouo.RemoveWebhookIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (ouo *OrganizationUpdateOne) ClearEvents() *OrganizationUpdateOne {
	ouo.mutation.ClearEvents()
	return ouo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveEventIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveEventIDs(ids...)
	return ouo
}

// RemoveEvents removes "events" edges to Event entities.
func (ouo *OrganizationUpdateOne) RemoveEvents(e ...*Event) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.RemoveEventIDs(ids...)
}

// ClearSecrets clears all "secrets" edges to the Hush entity.
func (ouo *OrganizationUpdateOne) ClearSecrets() *OrganizationUpdateOne {
	ouo.mutation.ClearSecrets()
	return ouo
}

// RemoveSecretIDs removes the "secrets" edge to Hush entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveSecretIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveSecretIDs(ids...)
	return ouo
}

// RemoveSecrets removes "secrets" edges to Hush entities.
func (ouo *OrganizationUpdateOne) RemoveSecrets(h ...*Hush) *OrganizationUpdateOne {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return ouo.RemoveSecretIDs(ids...)
}

// ClearFeatures clears all "features" edges to the Feature entity.
func (ouo *OrganizationUpdateOne) ClearFeatures() *OrganizationUpdateOne {
	ouo.mutation.ClearFeatures()
	return ouo
}

// RemoveFeatureIDs removes the "features" edge to Feature entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveFeatureIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveFeatureIDs(ids...)
	return ouo
}

// RemoveFeatures removes "features" edges to Feature entities.
func (ouo *OrganizationUpdateOne) RemoveFeatures(f ...*Feature) *OrganizationUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ouo.RemoveFeatureIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (ouo *OrganizationUpdateOne) ClearFiles() *OrganizationUpdateOne {
	ouo.mutation.ClearFiles()
	return ouo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveFileIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveFileIDs(ids...)
	return ouo
}

// RemoveFiles removes "files" edges to File entities.
func (ouo *OrganizationUpdateOne) RemoveFiles(f ...*File) *OrganizationUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ouo.RemoveFileIDs(ids...)
}

// ClearEntitlementplans clears all "entitlementplans" edges to the EntitlementPlan entity.
func (ouo *OrganizationUpdateOne) ClearEntitlementplans() *OrganizationUpdateOne {
	ouo.mutation.ClearEntitlementplans()
	return ouo
}

// RemoveEntitlementplanIDs removes the "entitlementplans" edge to EntitlementPlan entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveEntitlementplanIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveEntitlementplanIDs(ids...)
	return ouo
}

// RemoveEntitlementplans removes "entitlementplans" edges to EntitlementPlan entities.
func (ouo *OrganizationUpdateOne) RemoveEntitlementplans(e ...*EntitlementPlan) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.RemoveEntitlementplanIDs(ids...)
}

// ClearEntitlementplanfeatures clears all "entitlementplanfeatures" edges to the EntitlementPlanFeature entity.
func (ouo *OrganizationUpdateOne) ClearEntitlementplanfeatures() *OrganizationUpdateOne {
	ouo.mutation.ClearEntitlementplanfeatures()
	return ouo
}

// RemoveEntitlementplanfeatureIDs removes the "entitlementplanfeatures" edge to EntitlementPlanFeature entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveEntitlementplanfeatureIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveEntitlementplanfeatureIDs(ids...)
	return ouo
}

// RemoveEntitlementplanfeatures removes "entitlementplanfeatures" edges to EntitlementPlanFeature entities.
func (ouo *OrganizationUpdateOne) RemoveEntitlementplanfeatures(e ...*EntitlementPlanFeature) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.RemoveEntitlementplanfeatureIDs(ids...)
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (ouo *OrganizationUpdateOne) ClearEntities() *OrganizationUpdateOne {
	ouo.mutation.ClearEntities()
	return ouo
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveEntityIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveEntityIDs(ids...)
	return ouo
}

// RemoveEntities removes "entities" edges to Entity entities.
func (ouo *OrganizationUpdateOne) RemoveEntities(e ...*Entity) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.RemoveEntityIDs(ids...)
}

// ClearEntitytypes clears all "entitytypes" edges to the EntityType entity.
func (ouo *OrganizationUpdateOne) ClearEntitytypes() *OrganizationUpdateOne {
	ouo.mutation.ClearEntitytypes()
	return ouo
}

// RemoveEntitytypeIDs removes the "entitytypes" edge to EntityType entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveEntitytypeIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveEntitytypeIDs(ids...)
	return ouo
}

// RemoveEntitytypes removes "entitytypes" edges to EntityType entities.
func (ouo *OrganizationUpdateOne) RemoveEntitytypes(e ...*EntityType) *OrganizationUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ouo.RemoveEntitytypeIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the Contact entity.
func (ouo *OrganizationUpdateOne) ClearContacts() *OrganizationUpdateOne {
	ouo.mutation.ClearContacts()
	return ouo
}

// RemoveContactIDs removes the "contacts" edge to Contact entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveContactIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveContactIDs(ids...)
	return ouo
}

// RemoveContacts removes "contacts" edges to Contact entities.
func (ouo *OrganizationUpdateOne) RemoveContacts(c ...*Contact) *OrganizationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.RemoveContactIDs(ids...)
}

// ClearNotes clears all "notes" edges to the Note entity.
func (ouo *OrganizationUpdateOne) ClearNotes() *OrganizationUpdateOne {
	ouo.mutation.ClearNotes()
	return ouo
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveNoteIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveNoteIDs(ids...)
	return ouo
}

// RemoveNotes removes "notes" edges to Note entities.
func (ouo *OrganizationUpdateOne) RemoveNotes(n ...*Note) *OrganizationUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ouo.RemoveNoteIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (ouo *OrganizationUpdateOne) ClearTasks() *OrganizationUpdateOne {
	ouo.mutation.ClearTasks()
	return ouo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveTaskIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveTaskIDs(ids...)
	return ouo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (ouo *OrganizationUpdateOne) RemoveTasks(t ...*Task) *OrganizationUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ouo.RemoveTaskIDs(ids...)
}

// ClearMembers clears all "members" edges to the OrgMembership entity.
func (ouo *OrganizationUpdateOne) ClearMembers() *OrganizationUpdateOne {
	ouo.mutation.ClearMembers()
	return ouo
}

// RemoveMemberIDs removes the "members" edge to OrgMembership entities by IDs.
func (ouo *OrganizationUpdateOne) RemoveMemberIDs(ids ...string) *OrganizationUpdateOne {
	ouo.mutation.RemoveMemberIDs(ids...)
	return ouo
}

// RemoveMembers removes "members" edges to OrgMembership entities.
func (ouo *OrganizationUpdateOne) RemoveMembers(o ...*OrgMembership) *OrganizationUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return ouo.RemoveMemberIDs(ids...)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (ouo *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Organization entity.
func (ouo *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	if err := ouo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrganizationUpdateOne) defaults() error {
	if _, ok := ouo.mutation.UpdatedAt(); !ok && !ouo.mutation.UpdatedAtCleared() {
		if organization.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organization.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organization.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrganizationUpdateOne) check() error {
	if v, ok := ouo.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.DisplayName(); ok {
		if err := organization.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Organization.display_name": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.AvatarRemoteURL(); ok {
		if err := organization.AvatarRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_remote_url", err: fmt.Errorf(`generated: validator failed for field "Organization.avatar_remote_url": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouo *OrganizationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationUpdateOne {
	ouo.modifiers = append(ouo.modifiers, modifiers...)
	return ouo
}

func (ouo *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ouo.mutation.CreatedAtCleared() {
		_spec.ClearField(organization.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if ouo.mutation.UpdatedAtCleared() {
		_spec.ClearField(organization.FieldUpdatedAt, field.TypeTime)
	}
	if ouo.mutation.CreatedByCleared() {
		_spec.ClearField(organization.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ouo.mutation.UpdatedBy(); ok {
		_spec.SetField(organization.FieldUpdatedBy, field.TypeString, value)
	}
	if ouo.mutation.UpdatedByCleared() {
		_spec.ClearField(organization.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ouo.mutation.Tags(); ok {
		_spec.SetField(organization.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ouo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldTags, value)
		})
	}
	if ouo.mutation.TagsCleared() {
		_spec.ClearField(organization.FieldTags, field.TypeJSON)
	}
	if value, ok := ouo.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
	}
	if ouo.mutation.DeletedAtCleared() {
		_spec.ClearField(organization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ouo.mutation.DeletedBy(); ok {
		_spec.SetField(organization.FieldDeletedBy, field.TypeString, value)
	}
	if ouo.mutation.DeletedByCleared() {
		_spec.ClearField(organization.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.DisplayName(); ok {
		_spec.SetField(organization.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if ouo.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if ouo.mutation.PersonalOrgCleared() {
		_spec.ClearField(organization.FieldPersonalOrg, field.TypeBool)
	}
	if value, ok := ouo.mutation.AvatarRemoteURL(); ok {
		_spec.SetField(organization.FieldAvatarRemoteURL, field.TypeString, value)
	}
	if ouo.mutation.AvatarRemoteURLCleared() {
		_spec.ClearField(organization.FieldAvatarRemoteURL, field.TypeString)
	}
	if value, ok := ouo.mutation.DedicatedDb(); ok {
		_spec.SetField(organization.FieldDedicatedDb, field.TypeBool, value)
	}
	if ouo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Organization
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !ouo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !ouo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Template
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedTemplatesIDs(); len(nodes) > 0 && !ouo.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Template
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Template
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Integration
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !ouo.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.DocumentdataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentdataTable,
			Columns: []string{organization.DocumentdataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.DocumentData
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedDocumentdataIDs(); len(nodes) > 0 && !ouo.mutation.DocumentdataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentdataTable,
			Columns: []string{organization.DocumentdataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.DocumentData
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.DocumentdataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentdataTable,
			Columns: []string{organization.DocumentdataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.DocumentData
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementsTable,
			Columns: []string{organization.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Entitlement
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedEntitlementsIDs(); len(nodes) > 0 && !ouo.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementsTable,
			Columns: []string{organization.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.EntitlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementsTable,
			Columns: []string{organization.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrganizationEntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationEntitlementTable,
			Columns: []string{organization.OrganizationEntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Entitlement
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOrganizationEntitlementIDs(); len(nodes) > 0 && !ouo.mutation.OrganizationEntitlementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationEntitlementTable,
			Columns: []string{organization.OrganizationEntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrganizationEntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationEntitlementTable,
			Columns: []string{organization.OrganizationEntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationPersonalAccessTokens
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedPersonalAccessTokensIDs(); len(nodes) > 0 && !ouo.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationPersonalAccessTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationPersonalAccessTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.APIToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedAPITokensIDs(); len(nodes) > 0 && !ouo.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.APIToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.APIToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OauthproviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthproviderTable,
			Columns: []string{organization.OauthproviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OauthProvider
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedOauthproviderIDs(); len(nodes) > 0 && !ouo.mutation.OauthproviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthproviderTable,
			Columns: []string{organization.OauthproviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OauthProvider
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OauthproviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthproviderTable,
			Columns: []string{organization.OauthproviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OauthProvider
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrgMembership
		createE := &OrgMembershipCreate{config: ouo.config, mutation: newOrgMembershipMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !ouo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: ouo.config, mutation: newOrgMembershipMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: ouo.config, mutation: newOrgMembershipMutation(ouo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Invite
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !ouo.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Invite
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Invite
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Subscriber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedSubscribersIDs(); len(nodes) > 0 && !ouo.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Subscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Subscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.WebhooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Webhook
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedWebhooksIDs(); len(nodes) > 0 && !ouo.mutation.WebhooksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Webhook
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.WebhooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Webhook
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !ouo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: organization.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationSecrets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedSecretsIDs(); len(nodes) > 0 && !ouo.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: organization.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationSecrets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: organization.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationSecrets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeaturesTable,
			Columns: []string{organization.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Feature
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !ouo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeaturesTable,
			Columns: []string{organization.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Feature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeaturesTable,
			Columns: []string{organization.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Feature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !ouo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.EntitlementplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplansTable,
			Columns: []string{organization.EntitlementplansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.EntitlementPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedEntitlementplansIDs(); len(nodes) > 0 && !ouo.mutation.EntitlementplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplansTable,
			Columns: []string{organization.EntitlementplansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.EntitlementPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.EntitlementplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplansTable,
			Columns: []string{organization.EntitlementplansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.EntitlementPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.EntitlementplanfeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplanfeaturesTable,
			Columns: []string{organization.EntitlementplanfeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.EntitlementPlanFeature
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedEntitlementplanfeaturesIDs(); len(nodes) > 0 && !ouo.mutation.EntitlementplanfeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplanfeaturesTable,
			Columns: []string{organization.EntitlementplanfeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.EntitlementplanfeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplanfeaturesTable,
			Columns: []string{organization.EntitlementplanfeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !ouo.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.EntitytypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitytypesTable,
			Columns: []string{organization.EntitytypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.EntityType
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedEntitytypesIDs(); len(nodes) > 0 && !ouo.mutation.EntitytypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitytypesTable,
			Columns: []string{organization.EntitytypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.EntitytypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitytypesTable,
			Columns: []string{organization.EntitytypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Contact
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedContactsIDs(); len(nodes) > 0 && !ouo.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedNotesIDs(); len(nodes) > 0 && !ouo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: organization.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !ouo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: organization.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: organization.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrganizationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrgMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !ouo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = ouo.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ouo.schemaConfig.Organization
	ctx = internal.NewSchemaConfigContext(ctx, ouo.schemaConfig)
	_spec.AddModifiers(ouo.modifiers...)
	_node = &Organization{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
