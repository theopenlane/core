// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/dnsverification"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/export"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/jobresult"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnerregistrationtoken"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnertoken"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplate"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgproduct"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobrun"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks     []Hook
	mutation  *OrganizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (_u *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrganizationUpdate) SetUpdatedAt(v time.Time) *OrganizationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrganizationUpdate) ClearUpdatedAt() *OrganizationUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *OrganizationUpdate) SetUpdatedBy(v string) *OrganizationUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableUpdatedBy(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *OrganizationUpdate) ClearUpdatedBy() *OrganizationUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *OrganizationUpdate) SetDeletedAt(v time.Time) *OrganizationUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableDeletedAt(v *time.Time) *OrganizationUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *OrganizationUpdate) ClearDeletedAt() *OrganizationUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *OrganizationUpdate) SetDeletedBy(v string) *OrganizationUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableDeletedBy(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *OrganizationUpdate) ClearDeletedBy() *OrganizationUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *OrganizationUpdate) SetTags(v []string) *OrganizationUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *OrganizationUpdate) AppendTags(v []string) *OrganizationUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *OrganizationUpdate) ClearTags() *OrganizationUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetName sets the "name" field.
func (_u *OrganizationUpdate) SetName(v string) *OrganizationUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableName(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *OrganizationUpdate) SetDisplayName(v string) *OrganizationUpdate {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableDisplayName(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *OrganizationUpdate) SetDescription(v string) *OrganizationUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableDescription(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *OrganizationUpdate) ClearDescription() *OrganizationUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetAvatarRemoteURL sets the "avatar_remote_url" field.
func (_u *OrganizationUpdate) SetAvatarRemoteURL(v string) *OrganizationUpdate {
	_u.mutation.SetAvatarRemoteURL(v)
	return _u
}

// SetNillableAvatarRemoteURL sets the "avatar_remote_url" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableAvatarRemoteURL(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetAvatarRemoteURL(*v)
	}
	return _u
}

// ClearAvatarRemoteURL clears the value of the "avatar_remote_url" field.
func (_u *OrganizationUpdate) ClearAvatarRemoteURL() *OrganizationUpdate {
	_u.mutation.ClearAvatarRemoteURL()
	return _u
}

// SetAvatarLocalFileID sets the "avatar_local_file_id" field.
func (_u *OrganizationUpdate) SetAvatarLocalFileID(v string) *OrganizationUpdate {
	_u.mutation.SetAvatarLocalFileID(v)
	return _u
}

// SetNillableAvatarLocalFileID sets the "avatar_local_file_id" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableAvatarLocalFileID(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetAvatarLocalFileID(*v)
	}
	return _u
}

// ClearAvatarLocalFileID clears the value of the "avatar_local_file_id" field.
func (_u *OrganizationUpdate) ClearAvatarLocalFileID() *OrganizationUpdate {
	_u.mutation.ClearAvatarLocalFileID()
	return _u
}

// SetAvatarUpdatedAt sets the "avatar_updated_at" field.
func (_u *OrganizationUpdate) SetAvatarUpdatedAt(v time.Time) *OrganizationUpdate {
	_u.mutation.SetAvatarUpdatedAt(v)
	return _u
}

// ClearAvatarUpdatedAt clears the value of the "avatar_updated_at" field.
func (_u *OrganizationUpdate) ClearAvatarUpdatedAt() *OrganizationUpdate {
	_u.mutation.ClearAvatarUpdatedAt()
	return _u
}

// SetDedicatedDb sets the "dedicated_db" field.
func (_u *OrganizationUpdate) SetDedicatedDb(v bool) *OrganizationUpdate {
	_u.mutation.SetDedicatedDb(v)
	return _u
}

// SetNillableDedicatedDb sets the "dedicated_db" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableDedicatedDb(v *bool) *OrganizationUpdate {
	if v != nil {
		_u.SetDedicatedDb(*v)
	}
	return _u
}

// AddControlCreatorIDs adds the "control_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddControlCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddControlCreatorIDs(ids...)
	return _u
}

// AddControlCreators adds the "control_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddControlCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlCreatorIDs(ids...)
}

// AddControlImplementationCreatorIDs adds the "control_implementation_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddControlImplementationCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddControlImplementationCreatorIDs(ids...)
	return _u
}

// AddControlImplementationCreators adds the "control_implementation_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddControlImplementationCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationCreatorIDs(ids...)
}

// AddControlObjectiveCreatorIDs adds the "control_objective_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddControlObjectiveCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddControlObjectiveCreatorIDs(ids...)
	return _u
}

// AddControlObjectiveCreators adds the "control_objective_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddControlObjectiveCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveCreatorIDs(ids...)
}

// AddEvidenceCreatorIDs adds the "evidence_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddEvidenceCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddEvidenceCreatorIDs(ids...)
	return _u
}

// AddEvidenceCreators adds the "evidence_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddEvidenceCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEvidenceCreatorIDs(ids...)
}

// AddGroupCreatorIDs adds the "group_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddGroupCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddGroupCreatorIDs(ids...)
	return _u
}

// AddGroupCreators adds the "group_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddGroupCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupCreatorIDs(ids...)
}

// AddInternalPolicyCreatorIDs adds the "internal_policy_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddInternalPolicyCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddInternalPolicyCreatorIDs(ids...)
	return _u
}

// AddInternalPolicyCreators adds the "internal_policy_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddInternalPolicyCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyCreatorIDs(ids...)
}

// AddMappedControlCreatorIDs adds the "mapped_control_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddMappedControlCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddMappedControlCreatorIDs(ids...)
	return _u
}

// AddMappedControlCreators adds the "mapped_control_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddMappedControlCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedControlCreatorIDs(ids...)
}

// AddNarrativeCreatorIDs adds the "narrative_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddNarrativeCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddNarrativeCreatorIDs(ids...)
	return _u
}

// AddNarrativeCreators adds the "narrative_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddNarrativeCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeCreatorIDs(ids...)
}

// AddProcedureCreatorIDs adds the "procedure_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddProcedureCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddProcedureCreatorIDs(ids...)
	return _u
}

// AddProcedureCreators adds the "procedure_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddProcedureCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureCreatorIDs(ids...)
}

// AddProgramCreatorIDs adds the "program_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddProgramCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddProgramCreatorIDs(ids...)
	return _u
}

// AddProgramCreators adds the "program_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddProgramCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramCreatorIDs(ids...)
}

// AddRiskCreatorIDs adds the "risk_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddRiskCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddRiskCreatorIDs(ids...)
	return _u
}

// AddRiskCreators adds the "risk_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddRiskCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskCreatorIDs(ids...)
}

// AddScheduledJobCreatorIDs adds the "scheduled_job_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddScheduledJobCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddScheduledJobCreatorIDs(ids...)
	return _u
}

// AddScheduledJobCreators adds the "scheduled_job_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddScheduledJobCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledJobCreatorIDs(ids...)
}

// AddStandardCreatorIDs adds the "standard_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddStandardCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddStandardCreatorIDs(ids...)
	return _u
}

// AddStandardCreators adds the "standard_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddStandardCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStandardCreatorIDs(ids...)
}

// AddTemplateCreatorIDs adds the "template_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddTemplateCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddTemplateCreatorIDs(ids...)
	return _u
}

// AddTemplateCreators adds the "template_creators" edges to the Group entity.
func (_u *OrganizationUpdate) AddTemplateCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTemplateCreatorIDs(ids...)
}

// AddChildIDs adds the "children" edge to the Organization entity by IDs.
func (_u *OrganizationUpdate) AddChildIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Organization entity.
func (_u *OrganizationUpdate) AddChildren(v ...*Organization) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// SetSettingID sets the "setting" edge to the OrganizationSetting entity by ID.
func (_u *OrganizationUpdate) SetSettingID(id string) *OrganizationUpdate {
	_u.mutation.SetSettingID(id)
	return _u
}

// SetNillableSettingID sets the "setting" edge to the OrganizationSetting entity by ID if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableSettingID(id *string) *OrganizationUpdate {
	if id != nil {
		_u = _u.SetSettingID(*id)
	}
	return _u
}

// SetSetting sets the "setting" edge to the OrganizationSetting entity.
func (_u *OrganizationUpdate) SetSetting(v *OrganizationSetting) *OrganizationUpdate {
	return _u.SetSettingID(v.ID)
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (_u *OrganizationUpdate) AddPersonalAccessTokenIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddPersonalAccessTokenIDs(ids...)
	return _u
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (_u *OrganizationUpdate) AddPersonalAccessTokens(v ...*PersonalAccessToken) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPersonalAccessTokenIDs(ids...)
}

// AddAPITokenIDs adds the "api_tokens" edge to the APIToken entity by IDs.
func (_u *OrganizationUpdate) AddAPITokenIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddAPITokenIDs(ids...)
	return _u
}

// AddAPITokens adds the "api_tokens" edges to the APIToken entity.
func (_u *OrganizationUpdate) AddAPITokens(v ...*APIToken) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAPITokenIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *OrganizationUpdate) AddUserIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *OrganizationUpdate) AddUsers(v ...*User) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *OrganizationUpdate) AddFileIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *OrganizationUpdate) AddFiles(v ...*File) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *OrganizationUpdate) AddEventIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *OrganizationUpdate) AddEvents(v ...*Event) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// AddSecretIDs adds the "secrets" edge to the Hush entity by IDs.
func (_u *OrganizationUpdate) AddSecretIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddSecretIDs(ids...)
	return _u
}

// AddSecrets adds the "secrets" edges to the Hush entity.
func (_u *OrganizationUpdate) AddSecrets(v ...*Hush) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSecretIDs(ids...)
}

// SetAvatarFileID sets the "avatar_file" edge to the File entity by ID.
func (_u *OrganizationUpdate) SetAvatarFileID(id string) *OrganizationUpdate {
	_u.mutation.SetAvatarFileID(id)
	return _u
}

// SetNillableAvatarFileID sets the "avatar_file" edge to the File entity by ID if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableAvatarFileID(id *string) *OrganizationUpdate {
	if id != nil {
		_u = _u.SetAvatarFileID(*id)
	}
	return _u
}

// SetAvatarFile sets the "avatar_file" edge to the File entity.
func (_u *OrganizationUpdate) SetAvatarFile(v *File) *OrganizationUpdate {
	return _u.SetAvatarFileID(v.ID)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (_u *OrganizationUpdate) AddGroupIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddGroupIDs(ids...)
	return _u
}

// AddGroups adds the "groups" edges to the Group entity.
func (_u *OrganizationUpdate) AddGroups(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupIDs(ids...)
}

// AddTemplateIDs adds the "templates" edge to the Template entity by IDs.
func (_u *OrganizationUpdate) AddTemplateIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddTemplateIDs(ids...)
	return _u
}

// AddTemplates adds the "templates" edges to the Template entity.
func (_u *OrganizationUpdate) AddTemplates(v ...*Template) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTemplateIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (_u *OrganizationUpdate) AddIntegrationIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddIntegrationIDs(ids...)
	return _u
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (_u *OrganizationUpdate) AddIntegrations(v ...*Integration) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddIntegrationIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the DocumentData entity by IDs.
func (_u *OrganizationUpdate) AddDocumentIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddDocumentIDs(ids...)
	return _u
}

// AddDocuments adds the "documents" edges to the DocumentData entity.
func (_u *OrganizationUpdate) AddDocuments(v ...*DocumentData) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDocumentIDs(ids...)
}

// AddOrgSubscriptionIDs adds the "org_subscriptions" edge to the OrgSubscription entity by IDs.
func (_u *OrganizationUpdate) AddOrgSubscriptionIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddOrgSubscriptionIDs(ids...)
	return _u
}

// AddOrgSubscriptions adds the "org_subscriptions" edges to the OrgSubscription entity.
func (_u *OrganizationUpdate) AddOrgSubscriptions(v ...*OrgSubscription) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrgSubscriptionIDs(ids...)
}

// AddOrgProductIDs adds the "org_products" edge to the OrgProduct entity by IDs.
func (_u *OrganizationUpdate) AddOrgProductIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddOrgProductIDs(ids...)
	return _u
}

// AddOrgProducts adds the "org_products" edges to the OrgProduct entity.
func (_u *OrganizationUpdate) AddOrgProducts(v ...*OrgProduct) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrgProductIDs(ids...)
}

// AddOrgPriceIDs adds the "org_prices" edge to the OrgPrice entity by IDs.
func (_u *OrganizationUpdate) AddOrgPriceIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddOrgPriceIDs(ids...)
	return _u
}

// AddOrgPrices adds the "org_prices" edges to the OrgPrice entity.
func (_u *OrganizationUpdate) AddOrgPrices(v ...*OrgPrice) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrgPriceIDs(ids...)
}

// AddOrgModuleIDs adds the "org_modules" edge to the OrgModule entity by IDs.
func (_u *OrganizationUpdate) AddOrgModuleIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddOrgModuleIDs(ids...)
	return _u
}

// AddOrgModules adds the "org_modules" edges to the OrgModule entity.
func (_u *OrganizationUpdate) AddOrgModules(v ...*OrgModule) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrgModuleIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (_u *OrganizationUpdate) AddInviteIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddInviteIDs(ids...)
	return _u
}

// AddInvites adds the "invites" edges to the Invite entity.
func (_u *OrganizationUpdate) AddInvites(v ...*Invite) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInviteIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the Subscriber entity by IDs.
func (_u *OrganizationUpdate) AddSubscriberIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddSubscriberIDs(ids...)
	return _u
}

// AddSubscribers adds the "subscribers" edges to the Subscriber entity.
func (_u *OrganizationUpdate) AddSubscribers(v ...*Subscriber) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubscriberIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_u *OrganizationUpdate) AddEntityIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_u *OrganizationUpdate) AddEntities(v ...*Entity) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// AddEntityTypeIDs adds the "entity_types" edge to the EntityType entity by IDs.
func (_u *OrganizationUpdate) AddEntityTypeIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddEntityTypeIDs(ids...)
	return _u
}

// AddEntityTypes adds the "entity_types" edges to the EntityType entity.
func (_u *OrganizationUpdate) AddEntityTypes(v ...*EntityType) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityTypeIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (_u *OrganizationUpdate) AddContactIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddContactIDs(ids...)
	return _u
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (_u *OrganizationUpdate) AddContacts(v ...*Contact) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddContactIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (_u *OrganizationUpdate) AddNoteIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddNoteIDs(ids...)
	return _u
}

// AddNotes adds the "notes" edges to the Note entity.
func (_u *OrganizationUpdate) AddNotes(v ...*Note) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNoteIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *OrganizationUpdate) AddTaskIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *OrganizationUpdate) AddTasks(v ...*Task) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *OrganizationUpdate) AddProgramIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *OrganizationUpdate) AddPrograms(v ...*Program) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_u *OrganizationUpdate) AddProcedureIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddProcedureIDs(ids...)
	return _u
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_u *OrganizationUpdate) AddProcedures(v ...*Procedure) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_u *OrganizationUpdate) AddInternalPolicyIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddInternalPolicyIDs(ids...)
	return _u
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_u *OrganizationUpdate) AddInternalPolicies(v ...*InternalPolicy) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *OrganizationUpdate) AddRiskIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *OrganizationUpdate) AddRisks(v ...*Risk) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_u *OrganizationUpdate) AddControlObjectiveIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddControlObjectiveIDs(ids...)
	return _u
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_u *OrganizationUpdate) AddControlObjectives(v ...*ControlObjective) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_u *OrganizationUpdate) AddNarrativeIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddNarrativeIDs(ids...)
	return _u
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_u *OrganizationUpdate) AddNarratives(v ...*Narrative) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *OrganizationUpdate) AddControlIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *OrganizationUpdate) AddControls(v ...*Control) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *OrganizationUpdate) AddSubcontrolIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *OrganizationUpdate) AddSubcontrols(v ...*Subcontrol) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_u *OrganizationUpdate) AddControlImplementationIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddControlImplementationIDs(ids...)
	return _u
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_u *OrganizationUpdate) AddControlImplementations(v ...*ControlImplementation) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationIDs(ids...)
}

// AddMappedControlIDs adds the "mapped_controls" edge to the MappedControl entity by IDs.
func (_u *OrganizationUpdate) AddMappedControlIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddMappedControlIDs(ids...)
	return _u
}

// AddMappedControls adds the "mapped_controls" edges to the MappedControl entity.
func (_u *OrganizationUpdate) AddMappedControls(v ...*MappedControl) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedControlIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (_u *OrganizationUpdate) AddEvidenceIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddEvidenceIDs(ids...)
	return _u
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (_u *OrganizationUpdate) AddEvidence(v ...*Evidence) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEvidenceIDs(ids...)
}

// AddStandardIDs adds the "standards" edge to the Standard entity by IDs.
func (_u *OrganizationUpdate) AddStandardIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddStandardIDs(ids...)
	return _u
}

// AddStandards adds the "standards" edges to the Standard entity.
func (_u *OrganizationUpdate) AddStandards(v ...*Standard) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStandardIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_u *OrganizationUpdate) AddActionPlanIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddActionPlanIDs(ids...)
	return _u
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_u *OrganizationUpdate) AddActionPlans(v ...*ActionPlan) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActionPlanIDs(ids...)
}

// AddCustomDomainIDs adds the "custom_domains" edge to the CustomDomain entity by IDs.
func (_u *OrganizationUpdate) AddCustomDomainIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddCustomDomainIDs(ids...)
	return _u
}

// AddCustomDomains adds the "custom_domains" edges to the CustomDomain entity.
func (_u *OrganizationUpdate) AddCustomDomains(v ...*CustomDomain) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCustomDomainIDs(ids...)
}

// AddJobRunnerIDs adds the "job_runners" edge to the JobRunner entity by IDs.
func (_u *OrganizationUpdate) AddJobRunnerIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddJobRunnerIDs(ids...)
	return _u
}

// AddJobRunners adds the "job_runners" edges to the JobRunner entity.
func (_u *OrganizationUpdate) AddJobRunners(v ...*JobRunner) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobRunnerIDs(ids...)
}

// AddJobRunnerTokenIDs adds the "job_runner_tokens" edge to the JobRunnerToken entity by IDs.
func (_u *OrganizationUpdate) AddJobRunnerTokenIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddJobRunnerTokenIDs(ids...)
	return _u
}

// AddJobRunnerTokens adds the "job_runner_tokens" edges to the JobRunnerToken entity.
func (_u *OrganizationUpdate) AddJobRunnerTokens(v ...*JobRunnerToken) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobRunnerTokenIDs(ids...)
}

// AddJobRunnerRegistrationTokenIDs adds the "job_runner_registration_tokens" edge to the JobRunnerRegistrationToken entity by IDs.
func (_u *OrganizationUpdate) AddJobRunnerRegistrationTokenIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddJobRunnerRegistrationTokenIDs(ids...)
	return _u
}

// AddJobRunnerRegistrationTokens adds the "job_runner_registration_tokens" edges to the JobRunnerRegistrationToken entity.
func (_u *OrganizationUpdate) AddJobRunnerRegistrationTokens(v ...*JobRunnerRegistrationToken) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobRunnerRegistrationTokenIDs(ids...)
}

// AddDNSVerificationIDs adds the "dns_verifications" edge to the DNSVerification entity by IDs.
func (_u *OrganizationUpdate) AddDNSVerificationIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddDNSVerificationIDs(ids...)
	return _u
}

// AddDNSVerifications adds the "dns_verifications" edges to the DNSVerification entity.
func (_u *OrganizationUpdate) AddDNSVerifications(v ...*DNSVerification) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDNSVerificationIDs(ids...)
}

// AddJobTemplateIDs adds the "job_templates" edge to the JobTemplate entity by IDs.
func (_u *OrganizationUpdate) AddJobTemplateIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddJobTemplateIDs(ids...)
	return _u
}

// AddJobTemplates adds the "job_templates" edges to the JobTemplate entity.
func (_u *OrganizationUpdate) AddJobTemplates(v ...*JobTemplate) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobTemplateIDs(ids...)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (_u *OrganizationUpdate) AddScheduledJobIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddScheduledJobIDs(ids...)
	return _u
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *OrganizationUpdate) AddScheduledJobs(v ...*ScheduledJob) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledJobIDs(ids...)
}

// AddJobResultIDs adds the "job_results" edge to the JobResult entity by IDs.
func (_u *OrganizationUpdate) AddJobResultIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddJobResultIDs(ids...)
	return _u
}

// AddJobResults adds the "job_results" edges to the JobResult entity.
func (_u *OrganizationUpdate) AddJobResults(v ...*JobResult) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobResultIDs(ids...)
}

// AddScheduledJobRunIDs adds the "scheduled_job_runs" edge to the ScheduledJobRun entity by IDs.
func (_u *OrganizationUpdate) AddScheduledJobRunIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddScheduledJobRunIDs(ids...)
	return _u
}

// AddScheduledJobRuns adds the "scheduled_job_runs" edges to the ScheduledJobRun entity.
func (_u *OrganizationUpdate) AddScheduledJobRuns(v ...*ScheduledJobRun) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledJobRunIDs(ids...)
}

// AddTrustCenterIDs adds the "trust_centers" edge to the TrustCenter entity by IDs.
func (_u *OrganizationUpdate) AddTrustCenterIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddTrustCenterIDs(ids...)
	return _u
}

// AddTrustCenters adds the "trust_centers" edges to the TrustCenter entity.
func (_u *OrganizationUpdate) AddTrustCenters(v ...*TrustCenter) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTrustCenterIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_u *OrganizationUpdate) AddAssetIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddAssetIDs(ids...)
	return _u
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_u *OrganizationUpdate) AddAssets(v ...*Asset) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssetIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (_u *OrganizationUpdate) AddScanIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddScanIDs(ids...)
	return _u
}

// AddScans adds the "scans" edges to the Scan entity.
func (_u *OrganizationUpdate) AddScans(v ...*Scan) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanIDs(ids...)
}

// AddSubprocessorIDs adds the "subprocessors" edge to the Subprocessor entity by IDs.
func (_u *OrganizationUpdate) AddSubprocessorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddSubprocessorIDs(ids...)
	return _u
}

// AddSubprocessors adds the "subprocessors" edges to the Subprocessor entity.
func (_u *OrganizationUpdate) AddSubprocessors(v ...*Subprocessor) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubprocessorIDs(ids...)
}

// AddExportIDs adds the "exports" edge to the Export entity by IDs.
func (_u *OrganizationUpdate) AddExportIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddExportIDs(ids...)
	return _u
}

// AddExports adds the "exports" edges to the Export entity.
func (_u *OrganizationUpdate) AddExports(v ...*Export) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExportIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the OrgMembership entity by IDs.
func (_u *OrganizationUpdate) AddMemberIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.AddMemberIDs(ids...)
	return _u
}

// AddMembers adds the "members" edges to the OrgMembership entity.
func (_u *OrganizationUpdate) AddMembers(v ...*OrgMembership) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (_u *OrganizationUpdate) Mutation() *OrganizationMutation {
	return _u.mutation
}

// ClearControlCreators clears all "control_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearControlCreators() *OrganizationUpdate {
	_u.mutation.ClearControlCreators()
	return _u
}

// RemoveControlCreatorIDs removes the "control_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveControlCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveControlCreatorIDs(ids...)
	return _u
}

// RemoveControlCreators removes "control_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveControlCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlCreatorIDs(ids...)
}

// ClearControlImplementationCreators clears all "control_implementation_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearControlImplementationCreators() *OrganizationUpdate {
	_u.mutation.ClearControlImplementationCreators()
	return _u
}

// RemoveControlImplementationCreatorIDs removes the "control_implementation_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveControlImplementationCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveControlImplementationCreatorIDs(ids...)
	return _u
}

// RemoveControlImplementationCreators removes "control_implementation_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveControlImplementationCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationCreatorIDs(ids...)
}

// ClearControlObjectiveCreators clears all "control_objective_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearControlObjectiveCreators() *OrganizationUpdate {
	_u.mutation.ClearControlObjectiveCreators()
	return _u
}

// RemoveControlObjectiveCreatorIDs removes the "control_objective_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveControlObjectiveCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveControlObjectiveCreatorIDs(ids...)
	return _u
}

// RemoveControlObjectiveCreators removes "control_objective_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveControlObjectiveCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveCreatorIDs(ids...)
}

// ClearEvidenceCreators clears all "evidence_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearEvidenceCreators() *OrganizationUpdate {
	_u.mutation.ClearEvidenceCreators()
	return _u
}

// RemoveEvidenceCreatorIDs removes the "evidence_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveEvidenceCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveEvidenceCreatorIDs(ids...)
	return _u
}

// RemoveEvidenceCreators removes "evidence_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveEvidenceCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEvidenceCreatorIDs(ids...)
}

// ClearGroupCreators clears all "group_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearGroupCreators() *OrganizationUpdate {
	_u.mutation.ClearGroupCreators()
	return _u
}

// RemoveGroupCreatorIDs removes the "group_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveGroupCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveGroupCreatorIDs(ids...)
	return _u
}

// RemoveGroupCreators removes "group_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveGroupCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupCreatorIDs(ids...)
}

// ClearInternalPolicyCreators clears all "internal_policy_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearInternalPolicyCreators() *OrganizationUpdate {
	_u.mutation.ClearInternalPolicyCreators()
	return _u
}

// RemoveInternalPolicyCreatorIDs removes the "internal_policy_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveInternalPolicyCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveInternalPolicyCreatorIDs(ids...)
	return _u
}

// RemoveInternalPolicyCreators removes "internal_policy_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveInternalPolicyCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyCreatorIDs(ids...)
}

// ClearMappedControlCreators clears all "mapped_control_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearMappedControlCreators() *OrganizationUpdate {
	_u.mutation.ClearMappedControlCreators()
	return _u
}

// RemoveMappedControlCreatorIDs removes the "mapped_control_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveMappedControlCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveMappedControlCreatorIDs(ids...)
	return _u
}

// RemoveMappedControlCreators removes "mapped_control_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveMappedControlCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedControlCreatorIDs(ids...)
}

// ClearNarrativeCreators clears all "narrative_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearNarrativeCreators() *OrganizationUpdate {
	_u.mutation.ClearNarrativeCreators()
	return _u
}

// RemoveNarrativeCreatorIDs removes the "narrative_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveNarrativeCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveNarrativeCreatorIDs(ids...)
	return _u
}

// RemoveNarrativeCreators removes "narrative_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveNarrativeCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeCreatorIDs(ids...)
}

// ClearProcedureCreators clears all "procedure_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearProcedureCreators() *OrganizationUpdate {
	_u.mutation.ClearProcedureCreators()
	return _u
}

// RemoveProcedureCreatorIDs removes the "procedure_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveProcedureCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveProcedureCreatorIDs(ids...)
	return _u
}

// RemoveProcedureCreators removes "procedure_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveProcedureCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureCreatorIDs(ids...)
}

// ClearProgramCreators clears all "program_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearProgramCreators() *OrganizationUpdate {
	_u.mutation.ClearProgramCreators()
	return _u
}

// RemoveProgramCreatorIDs removes the "program_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveProgramCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveProgramCreatorIDs(ids...)
	return _u
}

// RemoveProgramCreators removes "program_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveProgramCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramCreatorIDs(ids...)
}

// ClearRiskCreators clears all "risk_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearRiskCreators() *OrganizationUpdate {
	_u.mutation.ClearRiskCreators()
	return _u
}

// RemoveRiskCreatorIDs removes the "risk_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveRiskCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveRiskCreatorIDs(ids...)
	return _u
}

// RemoveRiskCreators removes "risk_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveRiskCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskCreatorIDs(ids...)
}

// ClearScheduledJobCreators clears all "scheduled_job_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearScheduledJobCreators() *OrganizationUpdate {
	_u.mutation.ClearScheduledJobCreators()
	return _u
}

// RemoveScheduledJobCreatorIDs removes the "scheduled_job_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveScheduledJobCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveScheduledJobCreatorIDs(ids...)
	return _u
}

// RemoveScheduledJobCreators removes "scheduled_job_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveScheduledJobCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledJobCreatorIDs(ids...)
}

// ClearStandardCreators clears all "standard_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearStandardCreators() *OrganizationUpdate {
	_u.mutation.ClearStandardCreators()
	return _u
}

// RemoveStandardCreatorIDs removes the "standard_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveStandardCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveStandardCreatorIDs(ids...)
	return _u
}

// RemoveStandardCreators removes "standard_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveStandardCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStandardCreatorIDs(ids...)
}

// ClearTemplateCreators clears all "template_creators" edges to the Group entity.
func (_u *OrganizationUpdate) ClearTemplateCreators() *OrganizationUpdate {
	_u.mutation.ClearTemplateCreators()
	return _u
}

// RemoveTemplateCreatorIDs removes the "template_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveTemplateCreatorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveTemplateCreatorIDs(ids...)
	return _u
}

// RemoveTemplateCreators removes "template_creators" edges to Group entities.
func (_u *OrganizationUpdate) RemoveTemplateCreators(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTemplateCreatorIDs(ids...)
}

// ClearChildren clears all "children" edges to the Organization entity.
func (_u *OrganizationUpdate) ClearChildren() *OrganizationUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Organization entities by IDs.
func (_u *OrganizationUpdate) RemoveChildIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Organization entities.
func (_u *OrganizationUpdate) RemoveChildren(v ...*Organization) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearSetting clears the "setting" edge to the OrganizationSetting entity.
func (_u *OrganizationUpdate) ClearSetting() *OrganizationUpdate {
	_u.mutation.ClearSetting()
	return _u
}

// ClearPersonalAccessTokens clears all "personal_access_tokens" edges to the PersonalAccessToken entity.
func (_u *OrganizationUpdate) ClearPersonalAccessTokens() *OrganizationUpdate {
	_u.mutation.ClearPersonalAccessTokens()
	return _u
}

// RemovePersonalAccessTokenIDs removes the "personal_access_tokens" edge to PersonalAccessToken entities by IDs.
func (_u *OrganizationUpdate) RemovePersonalAccessTokenIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemovePersonalAccessTokenIDs(ids...)
	return _u
}

// RemovePersonalAccessTokens removes "personal_access_tokens" edges to PersonalAccessToken entities.
func (_u *OrganizationUpdate) RemovePersonalAccessTokens(v ...*PersonalAccessToken) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePersonalAccessTokenIDs(ids...)
}

// ClearAPITokens clears all "api_tokens" edges to the APIToken entity.
func (_u *OrganizationUpdate) ClearAPITokens() *OrganizationUpdate {
	_u.mutation.ClearAPITokens()
	return _u
}

// RemoveAPITokenIDs removes the "api_tokens" edge to APIToken entities by IDs.
func (_u *OrganizationUpdate) RemoveAPITokenIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveAPITokenIDs(ids...)
	return _u
}

// RemoveAPITokens removes "api_tokens" edges to APIToken entities.
func (_u *OrganizationUpdate) RemoveAPITokens(v ...*APIToken) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAPITokenIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *OrganizationUpdate) ClearUsers() *OrganizationUpdate {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *OrganizationUpdate) RemoveUserIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *OrganizationUpdate) RemoveUsers(v ...*User) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *OrganizationUpdate) ClearFiles() *OrganizationUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *OrganizationUpdate) RemoveFileIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *OrganizationUpdate) RemoveFiles(v ...*File) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *OrganizationUpdate) ClearEvents() *OrganizationUpdate {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *OrganizationUpdate) RemoveEventIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *OrganizationUpdate) RemoveEvents(v ...*Event) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// ClearSecrets clears all "secrets" edges to the Hush entity.
func (_u *OrganizationUpdate) ClearSecrets() *OrganizationUpdate {
	_u.mutation.ClearSecrets()
	return _u
}

// RemoveSecretIDs removes the "secrets" edge to Hush entities by IDs.
func (_u *OrganizationUpdate) RemoveSecretIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveSecretIDs(ids...)
	return _u
}

// RemoveSecrets removes "secrets" edges to Hush entities.
func (_u *OrganizationUpdate) RemoveSecrets(v ...*Hush) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSecretIDs(ids...)
}

// ClearAvatarFile clears the "avatar_file" edge to the File entity.
func (_u *OrganizationUpdate) ClearAvatarFile() *OrganizationUpdate {
	_u.mutation.ClearAvatarFile()
	return _u
}

// ClearGroups clears all "groups" edges to the Group entity.
func (_u *OrganizationUpdate) ClearGroups() *OrganizationUpdate {
	_u.mutation.ClearGroups()
	return _u
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (_u *OrganizationUpdate) RemoveGroupIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveGroupIDs(ids...)
	return _u
}

// RemoveGroups removes "groups" edges to Group entities.
func (_u *OrganizationUpdate) RemoveGroups(v ...*Group) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupIDs(ids...)
}

// ClearTemplates clears all "templates" edges to the Template entity.
func (_u *OrganizationUpdate) ClearTemplates() *OrganizationUpdate {
	_u.mutation.ClearTemplates()
	return _u
}

// RemoveTemplateIDs removes the "templates" edge to Template entities by IDs.
func (_u *OrganizationUpdate) RemoveTemplateIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveTemplateIDs(ids...)
	return _u
}

// RemoveTemplates removes "templates" edges to Template entities.
func (_u *OrganizationUpdate) RemoveTemplates(v ...*Template) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTemplateIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (_u *OrganizationUpdate) ClearIntegrations() *OrganizationUpdate {
	_u.mutation.ClearIntegrations()
	return _u
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (_u *OrganizationUpdate) RemoveIntegrationIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveIntegrationIDs(ids...)
	return _u
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (_u *OrganizationUpdate) RemoveIntegrations(v ...*Integration) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveIntegrationIDs(ids...)
}

// ClearDocuments clears all "documents" edges to the DocumentData entity.
func (_u *OrganizationUpdate) ClearDocuments() *OrganizationUpdate {
	_u.mutation.ClearDocuments()
	return _u
}

// RemoveDocumentIDs removes the "documents" edge to DocumentData entities by IDs.
func (_u *OrganizationUpdate) RemoveDocumentIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveDocumentIDs(ids...)
	return _u
}

// RemoveDocuments removes "documents" edges to DocumentData entities.
func (_u *OrganizationUpdate) RemoveDocuments(v ...*DocumentData) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDocumentIDs(ids...)
}

// ClearOrgSubscriptions clears all "org_subscriptions" edges to the OrgSubscription entity.
func (_u *OrganizationUpdate) ClearOrgSubscriptions() *OrganizationUpdate {
	_u.mutation.ClearOrgSubscriptions()
	return _u
}

// RemoveOrgSubscriptionIDs removes the "org_subscriptions" edge to OrgSubscription entities by IDs.
func (_u *OrganizationUpdate) RemoveOrgSubscriptionIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveOrgSubscriptionIDs(ids...)
	return _u
}

// RemoveOrgSubscriptions removes "org_subscriptions" edges to OrgSubscription entities.
func (_u *OrganizationUpdate) RemoveOrgSubscriptions(v ...*OrgSubscription) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrgSubscriptionIDs(ids...)
}

// ClearOrgProducts clears all "org_products" edges to the OrgProduct entity.
func (_u *OrganizationUpdate) ClearOrgProducts() *OrganizationUpdate {
	_u.mutation.ClearOrgProducts()
	return _u
}

// RemoveOrgProductIDs removes the "org_products" edge to OrgProduct entities by IDs.
func (_u *OrganizationUpdate) RemoveOrgProductIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveOrgProductIDs(ids...)
	return _u
}

// RemoveOrgProducts removes "org_products" edges to OrgProduct entities.
func (_u *OrganizationUpdate) RemoveOrgProducts(v ...*OrgProduct) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrgProductIDs(ids...)
}

// ClearOrgPrices clears all "org_prices" edges to the OrgPrice entity.
func (_u *OrganizationUpdate) ClearOrgPrices() *OrganizationUpdate {
	_u.mutation.ClearOrgPrices()
	return _u
}

// RemoveOrgPriceIDs removes the "org_prices" edge to OrgPrice entities by IDs.
func (_u *OrganizationUpdate) RemoveOrgPriceIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveOrgPriceIDs(ids...)
	return _u
}

// RemoveOrgPrices removes "org_prices" edges to OrgPrice entities.
func (_u *OrganizationUpdate) RemoveOrgPrices(v ...*OrgPrice) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrgPriceIDs(ids...)
}

// ClearOrgModules clears all "org_modules" edges to the OrgModule entity.
func (_u *OrganizationUpdate) ClearOrgModules() *OrganizationUpdate {
	_u.mutation.ClearOrgModules()
	return _u
}

// RemoveOrgModuleIDs removes the "org_modules" edge to OrgModule entities by IDs.
func (_u *OrganizationUpdate) RemoveOrgModuleIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveOrgModuleIDs(ids...)
	return _u
}

// RemoveOrgModules removes "org_modules" edges to OrgModule entities.
func (_u *OrganizationUpdate) RemoveOrgModules(v ...*OrgModule) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrgModuleIDs(ids...)
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (_u *OrganizationUpdate) ClearInvites() *OrganizationUpdate {
	_u.mutation.ClearInvites()
	return _u
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (_u *OrganizationUpdate) RemoveInviteIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveInviteIDs(ids...)
	return _u
}

// RemoveInvites removes "invites" edges to Invite entities.
func (_u *OrganizationUpdate) RemoveInvites(v ...*Invite) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInviteIDs(ids...)
}

// ClearSubscribers clears all "subscribers" edges to the Subscriber entity.
func (_u *OrganizationUpdate) ClearSubscribers() *OrganizationUpdate {
	_u.mutation.ClearSubscribers()
	return _u
}

// RemoveSubscriberIDs removes the "subscribers" edge to Subscriber entities by IDs.
func (_u *OrganizationUpdate) RemoveSubscriberIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveSubscriberIDs(ids...)
	return _u
}

// RemoveSubscribers removes "subscribers" edges to Subscriber entities.
func (_u *OrganizationUpdate) RemoveSubscribers(v ...*Subscriber) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubscriberIDs(ids...)
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (_u *OrganizationUpdate) ClearEntities() *OrganizationUpdate {
	_u.mutation.ClearEntities()
	return _u
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (_u *OrganizationUpdate) RemoveEntityIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntities removes "entities" edges to Entity entities.
func (_u *OrganizationUpdate) RemoveEntities(v ...*Entity) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// ClearEntityTypes clears all "entity_types" edges to the EntityType entity.
func (_u *OrganizationUpdate) ClearEntityTypes() *OrganizationUpdate {
	_u.mutation.ClearEntityTypes()
	return _u
}

// RemoveEntityTypeIDs removes the "entity_types" edge to EntityType entities by IDs.
func (_u *OrganizationUpdate) RemoveEntityTypeIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveEntityTypeIDs(ids...)
	return _u
}

// RemoveEntityTypes removes "entity_types" edges to EntityType entities.
func (_u *OrganizationUpdate) RemoveEntityTypes(v ...*EntityType) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityTypeIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the Contact entity.
func (_u *OrganizationUpdate) ClearContacts() *OrganizationUpdate {
	_u.mutation.ClearContacts()
	return _u
}

// RemoveContactIDs removes the "contacts" edge to Contact entities by IDs.
func (_u *OrganizationUpdate) RemoveContactIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveContactIDs(ids...)
	return _u
}

// RemoveContacts removes "contacts" edges to Contact entities.
func (_u *OrganizationUpdate) RemoveContacts(v ...*Contact) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveContactIDs(ids...)
}

// ClearNotes clears all "notes" edges to the Note entity.
func (_u *OrganizationUpdate) ClearNotes() *OrganizationUpdate {
	_u.mutation.ClearNotes()
	return _u
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (_u *OrganizationUpdate) RemoveNoteIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveNoteIDs(ids...)
	return _u
}

// RemoveNotes removes "notes" edges to Note entities.
func (_u *OrganizationUpdate) RemoveNotes(v ...*Note) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNoteIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *OrganizationUpdate) ClearTasks() *OrganizationUpdate {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *OrganizationUpdate) RemoveTaskIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *OrganizationUpdate) RemoveTasks(v ...*Task) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *OrganizationUpdate) ClearPrograms() *OrganizationUpdate {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *OrganizationUpdate) RemoveProgramIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *OrganizationUpdate) RemovePrograms(v ...*Program) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (_u *OrganizationUpdate) ClearProcedures() *OrganizationUpdate {
	_u.mutation.ClearProcedures()
	return _u
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (_u *OrganizationUpdate) RemoveProcedureIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveProcedureIDs(ids...)
	return _u
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (_u *OrganizationUpdate) RemoveProcedures(v ...*Procedure) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (_u *OrganizationUpdate) ClearInternalPolicies() *OrganizationUpdate {
	_u.mutation.ClearInternalPolicies()
	return _u
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (_u *OrganizationUpdate) RemoveInternalPolicyIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveInternalPolicyIDs(ids...)
	return _u
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (_u *OrganizationUpdate) RemoveInternalPolicies(v ...*InternalPolicy) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *OrganizationUpdate) ClearRisks() *OrganizationUpdate {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *OrganizationUpdate) RemoveRiskIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *OrganizationUpdate) RemoveRisks(v ...*Risk) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (_u *OrganizationUpdate) ClearControlObjectives() *OrganizationUpdate {
	_u.mutation.ClearControlObjectives()
	return _u
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (_u *OrganizationUpdate) RemoveControlObjectiveIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveControlObjectiveIDs(ids...)
	return _u
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (_u *OrganizationUpdate) RemoveControlObjectives(v ...*ControlObjective) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (_u *OrganizationUpdate) ClearNarratives() *OrganizationUpdate {
	_u.mutation.ClearNarratives()
	return _u
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (_u *OrganizationUpdate) RemoveNarrativeIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveNarrativeIDs(ids...)
	return _u
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (_u *OrganizationUpdate) RemoveNarratives(v ...*Narrative) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *OrganizationUpdate) ClearControls() *OrganizationUpdate {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *OrganizationUpdate) RemoveControlIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *OrganizationUpdate) RemoveControls(v ...*Control) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *OrganizationUpdate) ClearSubcontrols() *OrganizationUpdate {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *OrganizationUpdate) RemoveSubcontrolIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *OrganizationUpdate) RemoveSubcontrols(v ...*Subcontrol) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearControlImplementations clears all "control_implementations" edges to the ControlImplementation entity.
func (_u *OrganizationUpdate) ClearControlImplementations() *OrganizationUpdate {
	_u.mutation.ClearControlImplementations()
	return _u
}

// RemoveControlImplementationIDs removes the "control_implementations" edge to ControlImplementation entities by IDs.
func (_u *OrganizationUpdate) RemoveControlImplementationIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveControlImplementationIDs(ids...)
	return _u
}

// RemoveControlImplementations removes "control_implementations" edges to ControlImplementation entities.
func (_u *OrganizationUpdate) RemoveControlImplementations(v ...*ControlImplementation) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationIDs(ids...)
}

// ClearMappedControls clears all "mapped_controls" edges to the MappedControl entity.
func (_u *OrganizationUpdate) ClearMappedControls() *OrganizationUpdate {
	_u.mutation.ClearMappedControls()
	return _u
}

// RemoveMappedControlIDs removes the "mapped_controls" edge to MappedControl entities by IDs.
func (_u *OrganizationUpdate) RemoveMappedControlIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveMappedControlIDs(ids...)
	return _u
}

// RemoveMappedControls removes "mapped_controls" edges to MappedControl entities.
func (_u *OrganizationUpdate) RemoveMappedControls(v ...*MappedControl) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedControlIDs(ids...)
}

// ClearEvidence clears all "evidence" edges to the Evidence entity.
func (_u *OrganizationUpdate) ClearEvidence() *OrganizationUpdate {
	_u.mutation.ClearEvidence()
	return _u
}

// RemoveEvidenceIDs removes the "evidence" edge to Evidence entities by IDs.
func (_u *OrganizationUpdate) RemoveEvidenceIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveEvidenceIDs(ids...)
	return _u
}

// RemoveEvidence removes "evidence" edges to Evidence entities.
func (_u *OrganizationUpdate) RemoveEvidence(v ...*Evidence) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEvidenceIDs(ids...)
}

// ClearStandards clears all "standards" edges to the Standard entity.
func (_u *OrganizationUpdate) ClearStandards() *OrganizationUpdate {
	_u.mutation.ClearStandards()
	return _u
}

// RemoveStandardIDs removes the "standards" edge to Standard entities by IDs.
func (_u *OrganizationUpdate) RemoveStandardIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveStandardIDs(ids...)
	return _u
}

// RemoveStandards removes "standards" edges to Standard entities.
func (_u *OrganizationUpdate) RemoveStandards(v ...*Standard) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStandardIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (_u *OrganizationUpdate) ClearActionPlans() *OrganizationUpdate {
	_u.mutation.ClearActionPlans()
	return _u
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (_u *OrganizationUpdate) RemoveActionPlanIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveActionPlanIDs(ids...)
	return _u
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (_u *OrganizationUpdate) RemoveActionPlans(v ...*ActionPlan) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActionPlanIDs(ids...)
}

// ClearCustomDomains clears all "custom_domains" edges to the CustomDomain entity.
func (_u *OrganizationUpdate) ClearCustomDomains() *OrganizationUpdate {
	_u.mutation.ClearCustomDomains()
	return _u
}

// RemoveCustomDomainIDs removes the "custom_domains" edge to CustomDomain entities by IDs.
func (_u *OrganizationUpdate) RemoveCustomDomainIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveCustomDomainIDs(ids...)
	return _u
}

// RemoveCustomDomains removes "custom_domains" edges to CustomDomain entities.
func (_u *OrganizationUpdate) RemoveCustomDomains(v ...*CustomDomain) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCustomDomainIDs(ids...)
}

// ClearJobRunners clears all "job_runners" edges to the JobRunner entity.
func (_u *OrganizationUpdate) ClearJobRunners() *OrganizationUpdate {
	_u.mutation.ClearJobRunners()
	return _u
}

// RemoveJobRunnerIDs removes the "job_runners" edge to JobRunner entities by IDs.
func (_u *OrganizationUpdate) RemoveJobRunnerIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveJobRunnerIDs(ids...)
	return _u
}

// RemoveJobRunners removes "job_runners" edges to JobRunner entities.
func (_u *OrganizationUpdate) RemoveJobRunners(v ...*JobRunner) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobRunnerIDs(ids...)
}

// ClearJobRunnerTokens clears all "job_runner_tokens" edges to the JobRunnerToken entity.
func (_u *OrganizationUpdate) ClearJobRunnerTokens() *OrganizationUpdate {
	_u.mutation.ClearJobRunnerTokens()
	return _u
}

// RemoveJobRunnerTokenIDs removes the "job_runner_tokens" edge to JobRunnerToken entities by IDs.
func (_u *OrganizationUpdate) RemoveJobRunnerTokenIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveJobRunnerTokenIDs(ids...)
	return _u
}

// RemoveJobRunnerTokens removes "job_runner_tokens" edges to JobRunnerToken entities.
func (_u *OrganizationUpdate) RemoveJobRunnerTokens(v ...*JobRunnerToken) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobRunnerTokenIDs(ids...)
}

// ClearJobRunnerRegistrationTokens clears all "job_runner_registration_tokens" edges to the JobRunnerRegistrationToken entity.
func (_u *OrganizationUpdate) ClearJobRunnerRegistrationTokens() *OrganizationUpdate {
	_u.mutation.ClearJobRunnerRegistrationTokens()
	return _u
}

// RemoveJobRunnerRegistrationTokenIDs removes the "job_runner_registration_tokens" edge to JobRunnerRegistrationToken entities by IDs.
func (_u *OrganizationUpdate) RemoveJobRunnerRegistrationTokenIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveJobRunnerRegistrationTokenIDs(ids...)
	return _u
}

// RemoveJobRunnerRegistrationTokens removes "job_runner_registration_tokens" edges to JobRunnerRegistrationToken entities.
func (_u *OrganizationUpdate) RemoveJobRunnerRegistrationTokens(v ...*JobRunnerRegistrationToken) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobRunnerRegistrationTokenIDs(ids...)
}

// ClearDNSVerifications clears all "dns_verifications" edges to the DNSVerification entity.
func (_u *OrganizationUpdate) ClearDNSVerifications() *OrganizationUpdate {
	_u.mutation.ClearDNSVerifications()
	return _u
}

// RemoveDNSVerificationIDs removes the "dns_verifications" edge to DNSVerification entities by IDs.
func (_u *OrganizationUpdate) RemoveDNSVerificationIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveDNSVerificationIDs(ids...)
	return _u
}

// RemoveDNSVerifications removes "dns_verifications" edges to DNSVerification entities.
func (_u *OrganizationUpdate) RemoveDNSVerifications(v ...*DNSVerification) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDNSVerificationIDs(ids...)
}

// ClearJobTemplates clears all "job_templates" edges to the JobTemplate entity.
func (_u *OrganizationUpdate) ClearJobTemplates() *OrganizationUpdate {
	_u.mutation.ClearJobTemplates()
	return _u
}

// RemoveJobTemplateIDs removes the "job_templates" edge to JobTemplate entities by IDs.
func (_u *OrganizationUpdate) RemoveJobTemplateIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveJobTemplateIDs(ids...)
	return _u
}

// RemoveJobTemplates removes "job_templates" edges to JobTemplate entities.
func (_u *OrganizationUpdate) RemoveJobTemplates(v ...*JobTemplate) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobTemplateIDs(ids...)
}

// ClearScheduledJobs clears all "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *OrganizationUpdate) ClearScheduledJobs() *OrganizationUpdate {
	_u.mutation.ClearScheduledJobs()
	return _u
}

// RemoveScheduledJobIDs removes the "scheduled_jobs" edge to ScheduledJob entities by IDs.
func (_u *OrganizationUpdate) RemoveScheduledJobIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveScheduledJobIDs(ids...)
	return _u
}

// RemoveScheduledJobs removes "scheduled_jobs" edges to ScheduledJob entities.
func (_u *OrganizationUpdate) RemoveScheduledJobs(v ...*ScheduledJob) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledJobIDs(ids...)
}

// ClearJobResults clears all "job_results" edges to the JobResult entity.
func (_u *OrganizationUpdate) ClearJobResults() *OrganizationUpdate {
	_u.mutation.ClearJobResults()
	return _u
}

// RemoveJobResultIDs removes the "job_results" edge to JobResult entities by IDs.
func (_u *OrganizationUpdate) RemoveJobResultIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveJobResultIDs(ids...)
	return _u
}

// RemoveJobResults removes "job_results" edges to JobResult entities.
func (_u *OrganizationUpdate) RemoveJobResults(v ...*JobResult) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobResultIDs(ids...)
}

// ClearScheduledJobRuns clears all "scheduled_job_runs" edges to the ScheduledJobRun entity.
func (_u *OrganizationUpdate) ClearScheduledJobRuns() *OrganizationUpdate {
	_u.mutation.ClearScheduledJobRuns()
	return _u
}

// RemoveScheduledJobRunIDs removes the "scheduled_job_runs" edge to ScheduledJobRun entities by IDs.
func (_u *OrganizationUpdate) RemoveScheduledJobRunIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveScheduledJobRunIDs(ids...)
	return _u
}

// RemoveScheduledJobRuns removes "scheduled_job_runs" edges to ScheduledJobRun entities.
func (_u *OrganizationUpdate) RemoveScheduledJobRuns(v ...*ScheduledJobRun) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledJobRunIDs(ids...)
}

// ClearTrustCenters clears all "trust_centers" edges to the TrustCenter entity.
func (_u *OrganizationUpdate) ClearTrustCenters() *OrganizationUpdate {
	_u.mutation.ClearTrustCenters()
	return _u
}

// RemoveTrustCenterIDs removes the "trust_centers" edge to TrustCenter entities by IDs.
func (_u *OrganizationUpdate) RemoveTrustCenterIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveTrustCenterIDs(ids...)
	return _u
}

// RemoveTrustCenters removes "trust_centers" edges to TrustCenter entities.
func (_u *OrganizationUpdate) RemoveTrustCenters(v ...*TrustCenter) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTrustCenterIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (_u *OrganizationUpdate) ClearAssets() *OrganizationUpdate {
	_u.mutation.ClearAssets()
	return _u
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (_u *OrganizationUpdate) RemoveAssetIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveAssetIDs(ids...)
	return _u
}

// RemoveAssets removes "assets" edges to Asset entities.
func (_u *OrganizationUpdate) RemoveAssets(v ...*Asset) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssetIDs(ids...)
}

// ClearScans clears all "scans" edges to the Scan entity.
func (_u *OrganizationUpdate) ClearScans() *OrganizationUpdate {
	_u.mutation.ClearScans()
	return _u
}

// RemoveScanIDs removes the "scans" edge to Scan entities by IDs.
func (_u *OrganizationUpdate) RemoveScanIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveScanIDs(ids...)
	return _u
}

// RemoveScans removes "scans" edges to Scan entities.
func (_u *OrganizationUpdate) RemoveScans(v ...*Scan) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanIDs(ids...)
}

// ClearSubprocessors clears all "subprocessors" edges to the Subprocessor entity.
func (_u *OrganizationUpdate) ClearSubprocessors() *OrganizationUpdate {
	_u.mutation.ClearSubprocessors()
	return _u
}

// RemoveSubprocessorIDs removes the "subprocessors" edge to Subprocessor entities by IDs.
func (_u *OrganizationUpdate) RemoveSubprocessorIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveSubprocessorIDs(ids...)
	return _u
}

// RemoveSubprocessors removes "subprocessors" edges to Subprocessor entities.
func (_u *OrganizationUpdate) RemoveSubprocessors(v ...*Subprocessor) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubprocessorIDs(ids...)
}

// ClearExports clears all "exports" edges to the Export entity.
func (_u *OrganizationUpdate) ClearExports() *OrganizationUpdate {
	_u.mutation.ClearExports()
	return _u
}

// RemoveExportIDs removes the "exports" edge to Export entities by IDs.
func (_u *OrganizationUpdate) RemoveExportIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveExportIDs(ids...)
	return _u
}

// RemoveExports removes "exports" edges to Export entities.
func (_u *OrganizationUpdate) RemoveExports(v ...*Export) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExportIDs(ids...)
}

// ClearMembers clears all "members" edges to the OrgMembership entity.
func (_u *OrganizationUpdate) ClearMembers() *OrganizationUpdate {
	_u.mutation.ClearMembers()
	return _u
}

// RemoveMemberIDs removes the "members" edge to OrgMembership entities by IDs.
func (_u *OrganizationUpdate) RemoveMemberIDs(ids ...string) *OrganizationUpdate {
	_u.mutation.RemoveMemberIDs(ids...)
	return _u
}

// RemoveMembers removes "members" edges to OrgMembership entities.
func (_u *OrganizationUpdate) RemoveMembers(v ...*OrgMembership) *OrganizationUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrganizationUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if organization.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organization.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organization.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	if _, ok := _u.mutation.AvatarUpdatedAt(); !ok && !_u.mutation.AvatarUpdatedAtCleared() {
		if organization.UpdateDefaultAvatarUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organization.UpdateDefaultAvatarUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organization.UpdateDefaultAvatarUpdatedAt()
		_u.mutation.SetAvatarUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrganizationUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DisplayName(); ok {
		if err := organization.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Organization.display_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AvatarRemoteURL(); ok {
		if err := organization.AvatarRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_remote_url", err: fmt.Errorf(`generated: validator failed for field "Organization.avatar_remote_url": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OrganizationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OrganizationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(organization.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(organization.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(organization.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(organization.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(organization.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(organization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(organization.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(organization.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(organization.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(organization.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(organization.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if _u.mutation.PersonalOrgCleared() {
		_spec.ClearField(organization.FieldPersonalOrg, field.TypeBool)
	}
	if value, ok := _u.mutation.AvatarRemoteURL(); ok {
		_spec.SetField(organization.FieldAvatarRemoteURL, field.TypeString, value)
	}
	if _u.mutation.AvatarRemoteURLCleared() {
		_spec.ClearField(organization.FieldAvatarRemoteURL, field.TypeString)
	}
	if value, ok := _u.mutation.AvatarUpdatedAt(); ok {
		_spec.SetField(organization.FieldAvatarUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.AvatarUpdatedAtCleared() {
		_spec.ClearField(organization.FieldAvatarUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DedicatedDb(); ok {
		_spec.SetField(organization.FieldDedicatedDb, field.TypeBool, value)
	}
	if _u.mutation.ControlCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlCreatorsTable,
			Columns: []string{organization.ControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlCreatorsIDs(); len(nodes) > 0 && !_u.mutation.ControlCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlCreatorsTable,
			Columns: []string{organization.ControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlCreatorsTable,
			Columns: []string{organization.ControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationCreatorsTable,
			Columns: []string{organization.ControlImplementationCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationCreatorsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationCreatorsTable,
			Columns: []string{organization.ControlImplementationCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationCreatorsTable,
			Columns: []string{organization.ControlImplementationCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectiveCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectiveCreatorsTable,
			Columns: []string{organization.ControlObjectiveCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectiveCreatorsIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectiveCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectiveCreatorsTable,
			Columns: []string{organization.ControlObjectiveCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectiveCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectiveCreatorsTable,
			Columns: []string{organization.ControlObjectiveCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EvidenceCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceCreatorsTable,
			Columns: []string{organization.EvidenceCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEvidenceCreatorsIDs(); len(nodes) > 0 && !_u.mutation.EvidenceCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceCreatorsTable,
			Columns: []string{organization.EvidenceCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EvidenceCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceCreatorsTable,
			Columns: []string{organization.EvidenceCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupCreatorsTable,
			Columns: []string{organization.GroupCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupCreatorsIDs(); len(nodes) > 0 && !_u.mutation.GroupCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupCreatorsTable,
			Columns: []string{organization.GroupCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupCreatorsTable,
			Columns: []string{organization.GroupCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPolicyCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPolicyCreatorsTable,
			Columns: []string{organization.InternalPolicyCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPolicyCreatorsIDs(); len(nodes) > 0 && !_u.mutation.InternalPolicyCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPolicyCreatorsTable,
			Columns: []string{organization.InternalPolicyCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPolicyCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPolicyCreatorsTable,
			Columns: []string{organization.InternalPolicyCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedControlCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlCreatorsTable,
			Columns: []string{organization.MappedControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedControlCreatorsIDs(); len(nodes) > 0 && !_u.mutation.MappedControlCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlCreatorsTable,
			Columns: []string{organization.MappedControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedControlCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlCreatorsTable,
			Columns: []string{organization.MappedControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativeCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativeCreatorsTable,
			Columns: []string{organization.NarrativeCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativeCreatorsIDs(); len(nodes) > 0 && !_u.mutation.NarrativeCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativeCreatorsTable,
			Columns: []string{organization.NarrativeCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativeCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativeCreatorsTable,
			Columns: []string{organization.NarrativeCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProcedureCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProcedureCreatorsTable,
			Columns: []string{organization.ProcedureCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProcedureCreatorsIDs(); len(nodes) > 0 && !_u.mutation.ProcedureCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProcedureCreatorsTable,
			Columns: []string{organization.ProcedureCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProcedureCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProcedureCreatorsTable,
			Columns: []string{organization.ProcedureCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramCreatorsTable,
			Columns: []string{organization.ProgramCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramCreatorsIDs(); len(nodes) > 0 && !_u.mutation.ProgramCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramCreatorsTable,
			Columns: []string{organization.ProgramCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramCreatorsTable,
			Columns: []string{organization.ProgramCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RiskCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RiskCreatorsTable,
			Columns: []string{organization.RiskCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRiskCreatorsIDs(); len(nodes) > 0 && !_u.mutation.RiskCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RiskCreatorsTable,
			Columns: []string{organization.RiskCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RiskCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RiskCreatorsTable,
			Columns: []string{organization.RiskCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledJobCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobCreatorsTable,
			Columns: []string{organization.ScheduledJobCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledJobCreatorsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledJobCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobCreatorsTable,
			Columns: []string{organization.ScheduledJobCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledJobCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobCreatorsTable,
			Columns: []string{organization.ScheduledJobCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StandardCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardCreatorsTable,
			Columns: []string{organization.StandardCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStandardCreatorsIDs(); len(nodes) > 0 && !_u.mutation.StandardCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardCreatorsTable,
			Columns: []string{organization.StandardCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StandardCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardCreatorsTable,
			Columns: []string{organization.StandardCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TemplateCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplateCreatorsTable,
			Columns: []string{organization.TemplateCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTemplateCreatorsIDs(); len(nodes) > 0 && !_u.mutation.TemplateCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplateCreatorsTable,
			Columns: []string{organization.TemplateCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TemplateCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplateCreatorsTable,
			Columns: []string{organization.TemplateCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Organization
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationPersonalAccessTokens
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPersonalAccessTokensIDs(); len(nodes) > 0 && !_u.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationPersonalAccessTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationPersonalAccessTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.APIToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAPITokensIDs(); len(nodes) > 0 && !_u.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.APIToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.APIToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembership
		createE := &OrgMembershipCreate{config: _u.config, mutation: newOrgMembershipMutation(_u.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: _u.config, mutation: newOrgMembershipMutation(_u.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: _u.config, mutation: newOrgMembershipMutation(_u.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: []string{organization.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Hush
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSecretsIDs(); len(nodes) > 0 && !_u.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: []string{organization.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Hush
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: []string{organization.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Hush
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AvatarFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.AvatarFileTable,
			Columns: []string{organization.AvatarFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Organization
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AvatarFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.AvatarFileTable,
			Columns: []string{organization.AvatarFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !_u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Template
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTemplatesIDs(); len(nodes) > 0 && !_u.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Template
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Template
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Integration
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !_u.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentsTable,
			Columns: []string{organization.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DocumentData
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !_u.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentsTable,
			Columns: []string{organization.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DocumentData
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentsTable,
			Columns: []string{organization.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DocumentData
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrgSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgSubscriptionsTable,
			Columns: []string{organization.OrgSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscription
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrgSubscriptionsIDs(); len(nodes) > 0 && !_u.mutation.OrgSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgSubscriptionsTable,
			Columns: []string{organization.OrgSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscription
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrgSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgSubscriptionsTable,
			Columns: []string{organization.OrgSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscription
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrgProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgProductsTable,
			Columns: []string{organization.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrgProductsIDs(); len(nodes) > 0 && !_u.mutation.OrgProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgProductsTable,
			Columns: []string{organization.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrgProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgProductsTable,
			Columns: []string{organization.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrgPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgPricesTable,
			Columns: []string{organization.OrgPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgPrice
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrgPricesIDs(); len(nodes) > 0 && !_u.mutation.OrgPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgPricesTable,
			Columns: []string{organization.OrgPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrgPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgPricesTable,
			Columns: []string{organization.OrgPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrgModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgModulesTable,
			Columns: []string{organization.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgModule
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrgModulesIDs(); len(nodes) > 0 && !_u.mutation.OrgModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgModulesTable,
			Columns: []string{organization.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrgModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgModulesTable,
			Columns: []string{organization.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Invite
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !_u.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Invite
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Invite
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subscriber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubscribersIDs(); len(nodes) > 0 && !_u.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !_u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntityTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntityTypesTable,
			Columns: []string{organization.EntityTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityType
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntityTypesIDs(); len(nodes) > 0 && !_u.mutation.EntityTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntityTypesTable,
			Columns: []string{organization.EntityTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntityTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntityTypesTable,
			Columns: []string{organization.EntityTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Contact
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedContactsIDs(); len(nodes) > 0 && !_u.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNotesIDs(); len(nodes) > 0 && !_u.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: []string{organization.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Task
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: []string{organization.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: []string{organization.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramsTable,
			Columns: []string{organization.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Program
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramsTable,
			Columns: []string{organization.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramsTable,
			Columns: []string{organization.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProceduresTable,
			Columns: []string{organization.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !_u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProceduresTable,
			Columns: []string{organization.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProceduresTable,
			Columns: []string{organization.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPoliciesTable,
			Columns: []string{organization.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !_u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPoliciesTable,
			Columns: []string{organization.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPoliciesTable,
			Columns: []string{organization.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RisksTable,
			Columns: []string{organization.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RisksTable,
			Columns: []string{organization.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RisksTable,
			Columns: []string{organization.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectivesTable,
			Columns: []string{organization.ControlObjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjective
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectivesTable,
			Columns: []string{organization.ControlObjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjective
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectivesTable,
			Columns: []string{organization.ControlObjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjective
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativesTable,
			Columns: []string{organization.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Narrative
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !_u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativesTable,
			Columns: []string{organization.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativesTable,
			Columns: []string{organization.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlsTable,
			Columns: []string{organization.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlsTable,
			Columns: []string{organization.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlsTable,
			Columns: []string{organization.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubcontrolsTable,
			Columns: []string{organization.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubcontrolsTable,
			Columns: []string{organization.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubcontrolsTable,
			Columns: []string{organization.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationsTable,
			Columns: []string{organization.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationsTable,
			Columns: []string{organization.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationsTable,
			Columns: []string{organization.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlsTable,
			Columns: []string{organization.MappedControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControl
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedControlsIDs(); len(nodes) > 0 && !_u.mutation.MappedControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlsTable,
			Columns: []string{organization.MappedControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControl
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlsTable,
			Columns: []string{organization.MappedControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControl
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceTable,
			Columns: []string{organization.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Evidence
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEvidenceIDs(); len(nodes) > 0 && !_u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceTable,
			Columns: []string{organization.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Evidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceTable,
			Columns: []string{organization.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Evidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StandardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardsTable,
			Columns: []string{organization.StandardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Standard
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStandardsIDs(); len(nodes) > 0 && !_u.mutation.StandardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardsTable,
			Columns: []string{organization.StandardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Standard
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StandardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardsTable,
			Columns: []string{organization.StandardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Standard
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActionPlansTable,
			Columns: []string{organization.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !_u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActionPlansTable,
			Columns: []string{organization.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActionPlansTable,
			Columns: []string{organization.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CustomDomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.CustomDomainsTable,
			Columns: []string{organization.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCustomDomainsIDs(); len(nodes) > 0 && !_u.mutation.CustomDomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.CustomDomainsTable,
			Columns: []string{organization.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CustomDomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.CustomDomainsTable,
			Columns: []string{organization.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobRunnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnersTable,
			Columns: []string{organization.JobRunnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunner
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobRunnersIDs(); len(nodes) > 0 && !_u.mutation.JobRunnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnersTable,
			Columns: []string{organization.JobRunnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobRunnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnersTable,
			Columns: []string{organization.JobRunnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobRunnerTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerTokensTable,
			Columns: []string{organization.JobRunnerTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobRunnerTokensIDs(); len(nodes) > 0 && !_u.mutation.JobRunnerTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerTokensTable,
			Columns: []string{organization.JobRunnerTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobRunnerTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerTokensTable,
			Columns: []string{organization.JobRunnerTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobRunnerRegistrationTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerRegistrationTokensTable,
			Columns: []string{organization.JobRunnerRegistrationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnerregistrationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerRegistrationToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobRunnerRegistrationTokensIDs(); len(nodes) > 0 && !_u.mutation.JobRunnerRegistrationTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerRegistrationTokensTable,
			Columns: []string{organization.JobRunnerRegistrationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnerregistrationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerRegistrationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobRunnerRegistrationTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerRegistrationTokensTable,
			Columns: []string{organization.JobRunnerRegistrationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnerregistrationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerRegistrationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DNSVerificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DNSVerificationsTable,
			Columns: []string{organization.DNSVerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DNSVerification
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDNSVerificationsIDs(); len(nodes) > 0 && !_u.mutation.DNSVerificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DNSVerificationsTable,
			Columns: []string{organization.DNSVerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DNSVerification
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DNSVerificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DNSVerificationsTable,
			Columns: []string{organization.DNSVerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DNSVerification
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobTemplatesTable,
			Columns: []string{organization.JobTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobTemplate
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobTemplatesIDs(); len(nodes) > 0 && !_u.mutation.JobTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobTemplatesTable,
			Columns: []string{organization.JobTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobTemplatesTable,
			Columns: []string{organization.JobTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobsTable,
			Columns: []string{organization.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledJobsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobsTable,
			Columns: []string{organization.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobsTable,
			Columns: []string{organization.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobResultsTable,
			Columns: []string{organization.JobResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresult.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobResult
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobResultsIDs(); len(nodes) > 0 && !_u.mutation.JobResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobResultsTable,
			Columns: []string{organization.JobResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresult.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobResultsTable,
			Columns: []string{organization.JobResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresult.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledJobRunsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobRunsTable,
			Columns: []string{organization.ScheduledJobRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjobrun.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobRun
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledJobRunsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledJobRunsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobRunsTable,
			Columns: []string{organization.ScheduledJobRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjobrun.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobRun
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledJobRunsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobRunsTable,
			Columns: []string{organization.ScheduledJobRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjobrun.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobRun
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TrustCentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TrustCentersTable,
			Columns: []string{organization.TrustCentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTrustCentersIDs(); len(nodes) > 0 && !_u.mutation.TrustCentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TrustCentersTable,
			Columns: []string{organization.TrustCentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TrustCentersTable,
			Columns: []string{organization.TrustCentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AssetsTable,
			Columns: []string{organization.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Asset
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !_u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AssetsTable,
			Columns: []string{organization.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Asset
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AssetsTable,
			Columns: []string{organization.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Asset
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScansTable,
			Columns: []string{organization.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScansIDs(); len(nodes) > 0 && !_u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScansTable,
			Columns: []string{organization.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScansTable,
			Columns: []string{organization.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubprocessorsTable,
			Columns: []string{organization.SubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubprocessorsIDs(); len(nodes) > 0 && !_u.mutation.SubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubprocessorsTable,
			Columns: []string{organization.SubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubprocessorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubprocessorsTable,
			Columns: []string{organization.SubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ExportsTable,
			Columns: []string{organization.ExportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(export.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Export
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExportsIDs(); len(nodes) > 0 && !_u.mutation.ExportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ExportsTable,
			Columns: []string{organization.ExportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(export.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Export
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ExportsTable,
			Columns: []string{organization.ExportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(export.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Export
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMembersIDs(); len(nodes) > 0 && !_u.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Organization
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrganizationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrganizationUpdateOne) SetUpdatedAt(v time.Time) *OrganizationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrganizationUpdateOne) ClearUpdatedAt() *OrganizationUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *OrganizationUpdateOne) SetUpdatedBy(v string) *OrganizationUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableUpdatedBy(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *OrganizationUpdateOne) ClearUpdatedBy() *OrganizationUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *OrganizationUpdateOne) SetDeletedAt(v time.Time) *OrganizationUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableDeletedAt(v *time.Time) *OrganizationUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *OrganizationUpdateOne) ClearDeletedAt() *OrganizationUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *OrganizationUpdateOne) SetDeletedBy(v string) *OrganizationUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableDeletedBy(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *OrganizationUpdateOne) ClearDeletedBy() *OrganizationUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *OrganizationUpdateOne) SetTags(v []string) *OrganizationUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *OrganizationUpdateOne) AppendTags(v []string) *OrganizationUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *OrganizationUpdateOne) ClearTags() *OrganizationUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetName sets the "name" field.
func (_u *OrganizationUpdateOne) SetName(v string) *OrganizationUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableName(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDisplayName sets the "display_name" field.
func (_u *OrganizationUpdateOne) SetDisplayName(v string) *OrganizationUpdateOne {
	_u.mutation.SetDisplayName(v)
	return _u
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableDisplayName(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetDisplayName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *OrganizationUpdateOne) SetDescription(v string) *OrganizationUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableDescription(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *OrganizationUpdateOne) ClearDescription() *OrganizationUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetAvatarRemoteURL sets the "avatar_remote_url" field.
func (_u *OrganizationUpdateOne) SetAvatarRemoteURL(v string) *OrganizationUpdateOne {
	_u.mutation.SetAvatarRemoteURL(v)
	return _u
}

// SetNillableAvatarRemoteURL sets the "avatar_remote_url" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableAvatarRemoteURL(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetAvatarRemoteURL(*v)
	}
	return _u
}

// ClearAvatarRemoteURL clears the value of the "avatar_remote_url" field.
func (_u *OrganizationUpdateOne) ClearAvatarRemoteURL() *OrganizationUpdateOne {
	_u.mutation.ClearAvatarRemoteURL()
	return _u
}

// SetAvatarLocalFileID sets the "avatar_local_file_id" field.
func (_u *OrganizationUpdateOne) SetAvatarLocalFileID(v string) *OrganizationUpdateOne {
	_u.mutation.SetAvatarLocalFileID(v)
	return _u
}

// SetNillableAvatarLocalFileID sets the "avatar_local_file_id" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableAvatarLocalFileID(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetAvatarLocalFileID(*v)
	}
	return _u
}

// ClearAvatarLocalFileID clears the value of the "avatar_local_file_id" field.
func (_u *OrganizationUpdateOne) ClearAvatarLocalFileID() *OrganizationUpdateOne {
	_u.mutation.ClearAvatarLocalFileID()
	return _u
}

// SetAvatarUpdatedAt sets the "avatar_updated_at" field.
func (_u *OrganizationUpdateOne) SetAvatarUpdatedAt(v time.Time) *OrganizationUpdateOne {
	_u.mutation.SetAvatarUpdatedAt(v)
	return _u
}

// ClearAvatarUpdatedAt clears the value of the "avatar_updated_at" field.
func (_u *OrganizationUpdateOne) ClearAvatarUpdatedAt() *OrganizationUpdateOne {
	_u.mutation.ClearAvatarUpdatedAt()
	return _u
}

// SetDedicatedDb sets the "dedicated_db" field.
func (_u *OrganizationUpdateOne) SetDedicatedDb(v bool) *OrganizationUpdateOne {
	_u.mutation.SetDedicatedDb(v)
	return _u
}

// SetNillableDedicatedDb sets the "dedicated_db" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableDedicatedDb(v *bool) *OrganizationUpdateOne {
	if v != nil {
		_u.SetDedicatedDb(*v)
	}
	return _u
}

// AddControlCreatorIDs adds the "control_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddControlCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddControlCreatorIDs(ids...)
	return _u
}

// AddControlCreators adds the "control_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddControlCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlCreatorIDs(ids...)
}

// AddControlImplementationCreatorIDs adds the "control_implementation_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddControlImplementationCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddControlImplementationCreatorIDs(ids...)
	return _u
}

// AddControlImplementationCreators adds the "control_implementation_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddControlImplementationCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationCreatorIDs(ids...)
}

// AddControlObjectiveCreatorIDs adds the "control_objective_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddControlObjectiveCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddControlObjectiveCreatorIDs(ids...)
	return _u
}

// AddControlObjectiveCreators adds the "control_objective_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddControlObjectiveCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveCreatorIDs(ids...)
}

// AddEvidenceCreatorIDs adds the "evidence_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddEvidenceCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddEvidenceCreatorIDs(ids...)
	return _u
}

// AddEvidenceCreators adds the "evidence_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddEvidenceCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEvidenceCreatorIDs(ids...)
}

// AddGroupCreatorIDs adds the "group_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddGroupCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddGroupCreatorIDs(ids...)
	return _u
}

// AddGroupCreators adds the "group_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddGroupCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupCreatorIDs(ids...)
}

// AddInternalPolicyCreatorIDs adds the "internal_policy_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddInternalPolicyCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddInternalPolicyCreatorIDs(ids...)
	return _u
}

// AddInternalPolicyCreators adds the "internal_policy_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddInternalPolicyCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyCreatorIDs(ids...)
}

// AddMappedControlCreatorIDs adds the "mapped_control_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddMappedControlCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddMappedControlCreatorIDs(ids...)
	return _u
}

// AddMappedControlCreators adds the "mapped_control_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddMappedControlCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedControlCreatorIDs(ids...)
}

// AddNarrativeCreatorIDs adds the "narrative_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddNarrativeCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddNarrativeCreatorIDs(ids...)
	return _u
}

// AddNarrativeCreators adds the "narrative_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddNarrativeCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeCreatorIDs(ids...)
}

// AddProcedureCreatorIDs adds the "procedure_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddProcedureCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddProcedureCreatorIDs(ids...)
	return _u
}

// AddProcedureCreators adds the "procedure_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddProcedureCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureCreatorIDs(ids...)
}

// AddProgramCreatorIDs adds the "program_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddProgramCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddProgramCreatorIDs(ids...)
	return _u
}

// AddProgramCreators adds the "program_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddProgramCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramCreatorIDs(ids...)
}

// AddRiskCreatorIDs adds the "risk_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddRiskCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddRiskCreatorIDs(ids...)
	return _u
}

// AddRiskCreators adds the "risk_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddRiskCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskCreatorIDs(ids...)
}

// AddScheduledJobCreatorIDs adds the "scheduled_job_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddScheduledJobCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddScheduledJobCreatorIDs(ids...)
	return _u
}

// AddScheduledJobCreators adds the "scheduled_job_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddScheduledJobCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledJobCreatorIDs(ids...)
}

// AddStandardCreatorIDs adds the "standard_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddStandardCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddStandardCreatorIDs(ids...)
	return _u
}

// AddStandardCreators adds the "standard_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddStandardCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStandardCreatorIDs(ids...)
}

// AddTemplateCreatorIDs adds the "template_creators" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddTemplateCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddTemplateCreatorIDs(ids...)
	return _u
}

// AddTemplateCreators adds the "template_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddTemplateCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTemplateCreatorIDs(ids...)
}

// AddChildIDs adds the "children" edge to the Organization entity by IDs.
func (_u *OrganizationUpdateOne) AddChildIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Organization entity.
func (_u *OrganizationUpdateOne) AddChildren(v ...*Organization) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// SetSettingID sets the "setting" edge to the OrganizationSetting entity by ID.
func (_u *OrganizationUpdateOne) SetSettingID(id string) *OrganizationUpdateOne {
	_u.mutation.SetSettingID(id)
	return _u
}

// SetNillableSettingID sets the "setting" edge to the OrganizationSetting entity by ID if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableSettingID(id *string) *OrganizationUpdateOne {
	if id != nil {
		_u = _u.SetSettingID(*id)
	}
	return _u
}

// SetSetting sets the "setting" edge to the OrganizationSetting entity.
func (_u *OrganizationUpdateOne) SetSetting(v *OrganizationSetting) *OrganizationUpdateOne {
	return _u.SetSettingID(v.ID)
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (_u *OrganizationUpdateOne) AddPersonalAccessTokenIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddPersonalAccessTokenIDs(ids...)
	return _u
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (_u *OrganizationUpdateOne) AddPersonalAccessTokens(v ...*PersonalAccessToken) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddPersonalAccessTokenIDs(ids...)
}

// AddAPITokenIDs adds the "api_tokens" edge to the APIToken entity by IDs.
func (_u *OrganizationUpdateOne) AddAPITokenIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddAPITokenIDs(ids...)
	return _u
}

// AddAPITokens adds the "api_tokens" edges to the APIToken entity.
func (_u *OrganizationUpdateOne) AddAPITokens(v ...*APIToken) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAPITokenIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_u *OrganizationUpdateOne) AddUserIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddUserIDs(ids...)
	return _u
}

// AddUsers adds the "users" edges to the User entity.
func (_u *OrganizationUpdateOne) AddUsers(v ...*User) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddUserIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *OrganizationUpdateOne) AddFileIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *OrganizationUpdateOne) AddFiles(v ...*File) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *OrganizationUpdateOne) AddEventIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *OrganizationUpdateOne) AddEvents(v ...*Event) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// AddSecretIDs adds the "secrets" edge to the Hush entity by IDs.
func (_u *OrganizationUpdateOne) AddSecretIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddSecretIDs(ids...)
	return _u
}

// AddSecrets adds the "secrets" edges to the Hush entity.
func (_u *OrganizationUpdateOne) AddSecrets(v ...*Hush) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSecretIDs(ids...)
}

// SetAvatarFileID sets the "avatar_file" edge to the File entity by ID.
func (_u *OrganizationUpdateOne) SetAvatarFileID(id string) *OrganizationUpdateOne {
	_u.mutation.SetAvatarFileID(id)
	return _u
}

// SetNillableAvatarFileID sets the "avatar_file" edge to the File entity by ID if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableAvatarFileID(id *string) *OrganizationUpdateOne {
	if id != nil {
		_u = _u.SetAvatarFileID(*id)
	}
	return _u
}

// SetAvatarFile sets the "avatar_file" edge to the File entity.
func (_u *OrganizationUpdateOne) SetAvatarFile(v *File) *OrganizationUpdateOne {
	return _u.SetAvatarFileID(v.ID)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (_u *OrganizationUpdateOne) AddGroupIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddGroupIDs(ids...)
	return _u
}

// AddGroups adds the "groups" edges to the Group entity.
func (_u *OrganizationUpdateOne) AddGroups(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGroupIDs(ids...)
}

// AddTemplateIDs adds the "templates" edge to the Template entity by IDs.
func (_u *OrganizationUpdateOne) AddTemplateIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddTemplateIDs(ids...)
	return _u
}

// AddTemplates adds the "templates" edges to the Template entity.
func (_u *OrganizationUpdateOne) AddTemplates(v ...*Template) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTemplateIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (_u *OrganizationUpdateOne) AddIntegrationIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddIntegrationIDs(ids...)
	return _u
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (_u *OrganizationUpdateOne) AddIntegrations(v ...*Integration) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddIntegrationIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the DocumentData entity by IDs.
func (_u *OrganizationUpdateOne) AddDocumentIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddDocumentIDs(ids...)
	return _u
}

// AddDocuments adds the "documents" edges to the DocumentData entity.
func (_u *OrganizationUpdateOne) AddDocuments(v ...*DocumentData) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDocumentIDs(ids...)
}

// AddOrgSubscriptionIDs adds the "org_subscriptions" edge to the OrgSubscription entity by IDs.
func (_u *OrganizationUpdateOne) AddOrgSubscriptionIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddOrgSubscriptionIDs(ids...)
	return _u
}

// AddOrgSubscriptions adds the "org_subscriptions" edges to the OrgSubscription entity.
func (_u *OrganizationUpdateOne) AddOrgSubscriptions(v ...*OrgSubscription) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrgSubscriptionIDs(ids...)
}

// AddOrgProductIDs adds the "org_products" edge to the OrgProduct entity by IDs.
func (_u *OrganizationUpdateOne) AddOrgProductIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddOrgProductIDs(ids...)
	return _u
}

// AddOrgProducts adds the "org_products" edges to the OrgProduct entity.
func (_u *OrganizationUpdateOne) AddOrgProducts(v ...*OrgProduct) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrgProductIDs(ids...)
}

// AddOrgPriceIDs adds the "org_prices" edge to the OrgPrice entity by IDs.
func (_u *OrganizationUpdateOne) AddOrgPriceIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddOrgPriceIDs(ids...)
	return _u
}

// AddOrgPrices adds the "org_prices" edges to the OrgPrice entity.
func (_u *OrganizationUpdateOne) AddOrgPrices(v ...*OrgPrice) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrgPriceIDs(ids...)
}

// AddOrgModuleIDs adds the "org_modules" edge to the OrgModule entity by IDs.
func (_u *OrganizationUpdateOne) AddOrgModuleIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddOrgModuleIDs(ids...)
	return _u
}

// AddOrgModules adds the "org_modules" edges to the OrgModule entity.
func (_u *OrganizationUpdateOne) AddOrgModules(v ...*OrgModule) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddOrgModuleIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (_u *OrganizationUpdateOne) AddInviteIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddInviteIDs(ids...)
	return _u
}

// AddInvites adds the "invites" edges to the Invite entity.
func (_u *OrganizationUpdateOne) AddInvites(v ...*Invite) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInviteIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the Subscriber entity by IDs.
func (_u *OrganizationUpdateOne) AddSubscriberIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddSubscriberIDs(ids...)
	return _u
}

// AddSubscribers adds the "subscribers" edges to the Subscriber entity.
func (_u *OrganizationUpdateOne) AddSubscribers(v ...*Subscriber) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubscriberIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_u *OrganizationUpdateOne) AddEntityIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_u *OrganizationUpdateOne) AddEntities(v ...*Entity) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// AddEntityTypeIDs adds the "entity_types" edge to the EntityType entity by IDs.
func (_u *OrganizationUpdateOne) AddEntityTypeIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddEntityTypeIDs(ids...)
	return _u
}

// AddEntityTypes adds the "entity_types" edges to the EntityType entity.
func (_u *OrganizationUpdateOne) AddEntityTypes(v ...*EntityType) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityTypeIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (_u *OrganizationUpdateOne) AddContactIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddContactIDs(ids...)
	return _u
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (_u *OrganizationUpdateOne) AddContacts(v ...*Contact) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddContactIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (_u *OrganizationUpdateOne) AddNoteIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddNoteIDs(ids...)
	return _u
}

// AddNotes adds the "notes" edges to the Note entity.
func (_u *OrganizationUpdateOne) AddNotes(v ...*Note) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNoteIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *OrganizationUpdateOne) AddTaskIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *OrganizationUpdateOne) AddTasks(v ...*Task) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *OrganizationUpdateOne) AddProgramIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *OrganizationUpdateOne) AddPrograms(v ...*Program) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_u *OrganizationUpdateOne) AddProcedureIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddProcedureIDs(ids...)
	return _u
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_u *OrganizationUpdateOne) AddProcedures(v ...*Procedure) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_u *OrganizationUpdateOne) AddInternalPolicyIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddInternalPolicyIDs(ids...)
	return _u
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_u *OrganizationUpdateOne) AddInternalPolicies(v ...*InternalPolicy) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *OrganizationUpdateOne) AddRiskIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *OrganizationUpdateOne) AddRisks(v ...*Risk) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_u *OrganizationUpdateOne) AddControlObjectiveIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddControlObjectiveIDs(ids...)
	return _u
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_u *OrganizationUpdateOne) AddControlObjectives(v ...*ControlObjective) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_u *OrganizationUpdateOne) AddNarrativeIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddNarrativeIDs(ids...)
	return _u
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_u *OrganizationUpdateOne) AddNarratives(v ...*Narrative) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *OrganizationUpdateOne) AddControlIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *OrganizationUpdateOne) AddControls(v ...*Control) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *OrganizationUpdateOne) AddSubcontrolIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *OrganizationUpdateOne) AddSubcontrols(v ...*Subcontrol) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_u *OrganizationUpdateOne) AddControlImplementationIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddControlImplementationIDs(ids...)
	return _u
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_u *OrganizationUpdateOne) AddControlImplementations(v ...*ControlImplementation) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationIDs(ids...)
}

// AddMappedControlIDs adds the "mapped_controls" edge to the MappedControl entity by IDs.
func (_u *OrganizationUpdateOne) AddMappedControlIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddMappedControlIDs(ids...)
	return _u
}

// AddMappedControls adds the "mapped_controls" edges to the MappedControl entity.
func (_u *OrganizationUpdateOne) AddMappedControls(v ...*MappedControl) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedControlIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (_u *OrganizationUpdateOne) AddEvidenceIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddEvidenceIDs(ids...)
	return _u
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (_u *OrganizationUpdateOne) AddEvidence(v ...*Evidence) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEvidenceIDs(ids...)
}

// AddStandardIDs adds the "standards" edge to the Standard entity by IDs.
func (_u *OrganizationUpdateOne) AddStandardIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddStandardIDs(ids...)
	return _u
}

// AddStandards adds the "standards" edges to the Standard entity.
func (_u *OrganizationUpdateOne) AddStandards(v ...*Standard) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStandardIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_u *OrganizationUpdateOne) AddActionPlanIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddActionPlanIDs(ids...)
	return _u
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_u *OrganizationUpdateOne) AddActionPlans(v ...*ActionPlan) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActionPlanIDs(ids...)
}

// AddCustomDomainIDs adds the "custom_domains" edge to the CustomDomain entity by IDs.
func (_u *OrganizationUpdateOne) AddCustomDomainIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddCustomDomainIDs(ids...)
	return _u
}

// AddCustomDomains adds the "custom_domains" edges to the CustomDomain entity.
func (_u *OrganizationUpdateOne) AddCustomDomains(v ...*CustomDomain) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCustomDomainIDs(ids...)
}

// AddJobRunnerIDs adds the "job_runners" edge to the JobRunner entity by IDs.
func (_u *OrganizationUpdateOne) AddJobRunnerIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddJobRunnerIDs(ids...)
	return _u
}

// AddJobRunners adds the "job_runners" edges to the JobRunner entity.
func (_u *OrganizationUpdateOne) AddJobRunners(v ...*JobRunner) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobRunnerIDs(ids...)
}

// AddJobRunnerTokenIDs adds the "job_runner_tokens" edge to the JobRunnerToken entity by IDs.
func (_u *OrganizationUpdateOne) AddJobRunnerTokenIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddJobRunnerTokenIDs(ids...)
	return _u
}

// AddJobRunnerTokens adds the "job_runner_tokens" edges to the JobRunnerToken entity.
func (_u *OrganizationUpdateOne) AddJobRunnerTokens(v ...*JobRunnerToken) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobRunnerTokenIDs(ids...)
}

// AddJobRunnerRegistrationTokenIDs adds the "job_runner_registration_tokens" edge to the JobRunnerRegistrationToken entity by IDs.
func (_u *OrganizationUpdateOne) AddJobRunnerRegistrationTokenIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddJobRunnerRegistrationTokenIDs(ids...)
	return _u
}

// AddJobRunnerRegistrationTokens adds the "job_runner_registration_tokens" edges to the JobRunnerRegistrationToken entity.
func (_u *OrganizationUpdateOne) AddJobRunnerRegistrationTokens(v ...*JobRunnerRegistrationToken) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobRunnerRegistrationTokenIDs(ids...)
}

// AddDNSVerificationIDs adds the "dns_verifications" edge to the DNSVerification entity by IDs.
func (_u *OrganizationUpdateOne) AddDNSVerificationIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddDNSVerificationIDs(ids...)
	return _u
}

// AddDNSVerifications adds the "dns_verifications" edges to the DNSVerification entity.
func (_u *OrganizationUpdateOne) AddDNSVerifications(v ...*DNSVerification) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDNSVerificationIDs(ids...)
}

// AddJobTemplateIDs adds the "job_templates" edge to the JobTemplate entity by IDs.
func (_u *OrganizationUpdateOne) AddJobTemplateIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddJobTemplateIDs(ids...)
	return _u
}

// AddJobTemplates adds the "job_templates" edges to the JobTemplate entity.
func (_u *OrganizationUpdateOne) AddJobTemplates(v ...*JobTemplate) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobTemplateIDs(ids...)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (_u *OrganizationUpdateOne) AddScheduledJobIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddScheduledJobIDs(ids...)
	return _u
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *OrganizationUpdateOne) AddScheduledJobs(v ...*ScheduledJob) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledJobIDs(ids...)
}

// AddJobResultIDs adds the "job_results" edge to the JobResult entity by IDs.
func (_u *OrganizationUpdateOne) AddJobResultIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddJobResultIDs(ids...)
	return _u
}

// AddJobResults adds the "job_results" edges to the JobResult entity.
func (_u *OrganizationUpdateOne) AddJobResults(v ...*JobResult) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddJobResultIDs(ids...)
}

// AddScheduledJobRunIDs adds the "scheduled_job_runs" edge to the ScheduledJobRun entity by IDs.
func (_u *OrganizationUpdateOne) AddScheduledJobRunIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddScheduledJobRunIDs(ids...)
	return _u
}

// AddScheduledJobRuns adds the "scheduled_job_runs" edges to the ScheduledJobRun entity.
func (_u *OrganizationUpdateOne) AddScheduledJobRuns(v ...*ScheduledJobRun) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledJobRunIDs(ids...)
}

// AddTrustCenterIDs adds the "trust_centers" edge to the TrustCenter entity by IDs.
func (_u *OrganizationUpdateOne) AddTrustCenterIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddTrustCenterIDs(ids...)
	return _u
}

// AddTrustCenters adds the "trust_centers" edges to the TrustCenter entity.
func (_u *OrganizationUpdateOne) AddTrustCenters(v ...*TrustCenter) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTrustCenterIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_u *OrganizationUpdateOne) AddAssetIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddAssetIDs(ids...)
	return _u
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_u *OrganizationUpdateOne) AddAssets(v ...*Asset) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssetIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (_u *OrganizationUpdateOne) AddScanIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddScanIDs(ids...)
	return _u
}

// AddScans adds the "scans" edges to the Scan entity.
func (_u *OrganizationUpdateOne) AddScans(v ...*Scan) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanIDs(ids...)
}

// AddSubprocessorIDs adds the "subprocessors" edge to the Subprocessor entity by IDs.
func (_u *OrganizationUpdateOne) AddSubprocessorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddSubprocessorIDs(ids...)
	return _u
}

// AddSubprocessors adds the "subprocessors" edges to the Subprocessor entity.
func (_u *OrganizationUpdateOne) AddSubprocessors(v ...*Subprocessor) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubprocessorIDs(ids...)
}

// AddExportIDs adds the "exports" edge to the Export entity by IDs.
func (_u *OrganizationUpdateOne) AddExportIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddExportIDs(ids...)
	return _u
}

// AddExports adds the "exports" edges to the Export entity.
func (_u *OrganizationUpdateOne) AddExports(v ...*Export) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddExportIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the OrgMembership entity by IDs.
func (_u *OrganizationUpdateOne) AddMemberIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.AddMemberIDs(ids...)
	return _u
}

// AddMembers adds the "members" edges to the OrgMembership entity.
func (_u *OrganizationUpdateOne) AddMembers(v ...*OrgMembership) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMemberIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (_u *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return _u.mutation
}

// ClearControlCreators clears all "control_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearControlCreators() *OrganizationUpdateOne {
	_u.mutation.ClearControlCreators()
	return _u
}

// RemoveControlCreatorIDs removes the "control_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveControlCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveControlCreatorIDs(ids...)
	return _u
}

// RemoveControlCreators removes "control_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveControlCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlCreatorIDs(ids...)
}

// ClearControlImplementationCreators clears all "control_implementation_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearControlImplementationCreators() *OrganizationUpdateOne {
	_u.mutation.ClearControlImplementationCreators()
	return _u
}

// RemoveControlImplementationCreatorIDs removes the "control_implementation_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveControlImplementationCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveControlImplementationCreatorIDs(ids...)
	return _u
}

// RemoveControlImplementationCreators removes "control_implementation_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveControlImplementationCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationCreatorIDs(ids...)
}

// ClearControlObjectiveCreators clears all "control_objective_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearControlObjectiveCreators() *OrganizationUpdateOne {
	_u.mutation.ClearControlObjectiveCreators()
	return _u
}

// RemoveControlObjectiveCreatorIDs removes the "control_objective_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveControlObjectiveCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveControlObjectiveCreatorIDs(ids...)
	return _u
}

// RemoveControlObjectiveCreators removes "control_objective_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveControlObjectiveCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveCreatorIDs(ids...)
}

// ClearEvidenceCreators clears all "evidence_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearEvidenceCreators() *OrganizationUpdateOne {
	_u.mutation.ClearEvidenceCreators()
	return _u
}

// RemoveEvidenceCreatorIDs removes the "evidence_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveEvidenceCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveEvidenceCreatorIDs(ids...)
	return _u
}

// RemoveEvidenceCreators removes "evidence_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveEvidenceCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEvidenceCreatorIDs(ids...)
}

// ClearGroupCreators clears all "group_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearGroupCreators() *OrganizationUpdateOne {
	_u.mutation.ClearGroupCreators()
	return _u
}

// RemoveGroupCreatorIDs removes the "group_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveGroupCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveGroupCreatorIDs(ids...)
	return _u
}

// RemoveGroupCreators removes "group_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveGroupCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupCreatorIDs(ids...)
}

// ClearInternalPolicyCreators clears all "internal_policy_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearInternalPolicyCreators() *OrganizationUpdateOne {
	_u.mutation.ClearInternalPolicyCreators()
	return _u
}

// RemoveInternalPolicyCreatorIDs removes the "internal_policy_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveInternalPolicyCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveInternalPolicyCreatorIDs(ids...)
	return _u
}

// RemoveInternalPolicyCreators removes "internal_policy_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveInternalPolicyCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyCreatorIDs(ids...)
}

// ClearMappedControlCreators clears all "mapped_control_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearMappedControlCreators() *OrganizationUpdateOne {
	_u.mutation.ClearMappedControlCreators()
	return _u
}

// RemoveMappedControlCreatorIDs removes the "mapped_control_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveMappedControlCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveMappedControlCreatorIDs(ids...)
	return _u
}

// RemoveMappedControlCreators removes "mapped_control_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveMappedControlCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedControlCreatorIDs(ids...)
}

// ClearNarrativeCreators clears all "narrative_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearNarrativeCreators() *OrganizationUpdateOne {
	_u.mutation.ClearNarrativeCreators()
	return _u
}

// RemoveNarrativeCreatorIDs removes the "narrative_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveNarrativeCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveNarrativeCreatorIDs(ids...)
	return _u
}

// RemoveNarrativeCreators removes "narrative_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveNarrativeCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeCreatorIDs(ids...)
}

// ClearProcedureCreators clears all "procedure_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearProcedureCreators() *OrganizationUpdateOne {
	_u.mutation.ClearProcedureCreators()
	return _u
}

// RemoveProcedureCreatorIDs removes the "procedure_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveProcedureCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveProcedureCreatorIDs(ids...)
	return _u
}

// RemoveProcedureCreators removes "procedure_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveProcedureCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureCreatorIDs(ids...)
}

// ClearProgramCreators clears all "program_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearProgramCreators() *OrganizationUpdateOne {
	_u.mutation.ClearProgramCreators()
	return _u
}

// RemoveProgramCreatorIDs removes the "program_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveProgramCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveProgramCreatorIDs(ids...)
	return _u
}

// RemoveProgramCreators removes "program_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveProgramCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramCreatorIDs(ids...)
}

// ClearRiskCreators clears all "risk_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearRiskCreators() *OrganizationUpdateOne {
	_u.mutation.ClearRiskCreators()
	return _u
}

// RemoveRiskCreatorIDs removes the "risk_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveRiskCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveRiskCreatorIDs(ids...)
	return _u
}

// RemoveRiskCreators removes "risk_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveRiskCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskCreatorIDs(ids...)
}

// ClearScheduledJobCreators clears all "scheduled_job_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearScheduledJobCreators() *OrganizationUpdateOne {
	_u.mutation.ClearScheduledJobCreators()
	return _u
}

// RemoveScheduledJobCreatorIDs removes the "scheduled_job_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveScheduledJobCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveScheduledJobCreatorIDs(ids...)
	return _u
}

// RemoveScheduledJobCreators removes "scheduled_job_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveScheduledJobCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledJobCreatorIDs(ids...)
}

// ClearStandardCreators clears all "standard_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearStandardCreators() *OrganizationUpdateOne {
	_u.mutation.ClearStandardCreators()
	return _u
}

// RemoveStandardCreatorIDs removes the "standard_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveStandardCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveStandardCreatorIDs(ids...)
	return _u
}

// RemoveStandardCreators removes "standard_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveStandardCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStandardCreatorIDs(ids...)
}

// ClearTemplateCreators clears all "template_creators" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearTemplateCreators() *OrganizationUpdateOne {
	_u.mutation.ClearTemplateCreators()
	return _u
}

// RemoveTemplateCreatorIDs removes the "template_creators" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveTemplateCreatorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveTemplateCreatorIDs(ids...)
	return _u
}

// RemoveTemplateCreators removes "template_creators" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveTemplateCreators(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTemplateCreatorIDs(ids...)
}

// ClearChildren clears all "children" edges to the Organization entity.
func (_u *OrganizationUpdateOne) ClearChildren() *OrganizationUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Organization entities by IDs.
func (_u *OrganizationUpdateOne) RemoveChildIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Organization entities.
func (_u *OrganizationUpdateOne) RemoveChildren(v ...*Organization) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// ClearSetting clears the "setting" edge to the OrganizationSetting entity.
func (_u *OrganizationUpdateOne) ClearSetting() *OrganizationUpdateOne {
	_u.mutation.ClearSetting()
	return _u
}

// ClearPersonalAccessTokens clears all "personal_access_tokens" edges to the PersonalAccessToken entity.
func (_u *OrganizationUpdateOne) ClearPersonalAccessTokens() *OrganizationUpdateOne {
	_u.mutation.ClearPersonalAccessTokens()
	return _u
}

// RemovePersonalAccessTokenIDs removes the "personal_access_tokens" edge to PersonalAccessToken entities by IDs.
func (_u *OrganizationUpdateOne) RemovePersonalAccessTokenIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemovePersonalAccessTokenIDs(ids...)
	return _u
}

// RemovePersonalAccessTokens removes "personal_access_tokens" edges to PersonalAccessToken entities.
func (_u *OrganizationUpdateOne) RemovePersonalAccessTokens(v ...*PersonalAccessToken) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemovePersonalAccessTokenIDs(ids...)
}

// ClearAPITokens clears all "api_tokens" edges to the APIToken entity.
func (_u *OrganizationUpdateOne) ClearAPITokens() *OrganizationUpdateOne {
	_u.mutation.ClearAPITokens()
	return _u
}

// RemoveAPITokenIDs removes the "api_tokens" edge to APIToken entities by IDs.
func (_u *OrganizationUpdateOne) RemoveAPITokenIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveAPITokenIDs(ids...)
	return _u
}

// RemoveAPITokens removes "api_tokens" edges to APIToken entities.
func (_u *OrganizationUpdateOne) RemoveAPITokens(v ...*APIToken) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAPITokenIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (_u *OrganizationUpdateOne) ClearUsers() *OrganizationUpdateOne {
	_u.mutation.ClearUsers()
	return _u
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (_u *OrganizationUpdateOne) RemoveUserIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveUserIDs(ids...)
	return _u
}

// RemoveUsers removes "users" edges to User entities.
func (_u *OrganizationUpdateOne) RemoveUsers(v ...*User) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveUserIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *OrganizationUpdateOne) ClearFiles() *OrganizationUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *OrganizationUpdateOne) RemoveFileIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *OrganizationUpdateOne) RemoveFiles(v ...*File) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *OrganizationUpdateOne) ClearEvents() *OrganizationUpdateOne {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *OrganizationUpdateOne) RemoveEventIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *OrganizationUpdateOne) RemoveEvents(v ...*Event) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// ClearSecrets clears all "secrets" edges to the Hush entity.
func (_u *OrganizationUpdateOne) ClearSecrets() *OrganizationUpdateOne {
	_u.mutation.ClearSecrets()
	return _u
}

// RemoveSecretIDs removes the "secrets" edge to Hush entities by IDs.
func (_u *OrganizationUpdateOne) RemoveSecretIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveSecretIDs(ids...)
	return _u
}

// RemoveSecrets removes "secrets" edges to Hush entities.
func (_u *OrganizationUpdateOne) RemoveSecrets(v ...*Hush) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSecretIDs(ids...)
}

// ClearAvatarFile clears the "avatar_file" edge to the File entity.
func (_u *OrganizationUpdateOne) ClearAvatarFile() *OrganizationUpdateOne {
	_u.mutation.ClearAvatarFile()
	return _u
}

// ClearGroups clears all "groups" edges to the Group entity.
func (_u *OrganizationUpdateOne) ClearGroups() *OrganizationUpdateOne {
	_u.mutation.ClearGroups()
	return _u
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (_u *OrganizationUpdateOne) RemoveGroupIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveGroupIDs(ids...)
	return _u
}

// RemoveGroups removes "groups" edges to Group entities.
func (_u *OrganizationUpdateOne) RemoveGroups(v ...*Group) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGroupIDs(ids...)
}

// ClearTemplates clears all "templates" edges to the Template entity.
func (_u *OrganizationUpdateOne) ClearTemplates() *OrganizationUpdateOne {
	_u.mutation.ClearTemplates()
	return _u
}

// RemoveTemplateIDs removes the "templates" edge to Template entities by IDs.
func (_u *OrganizationUpdateOne) RemoveTemplateIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveTemplateIDs(ids...)
	return _u
}

// RemoveTemplates removes "templates" edges to Template entities.
func (_u *OrganizationUpdateOne) RemoveTemplates(v ...*Template) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTemplateIDs(ids...)
}

// ClearIntegrations clears all "integrations" edges to the Integration entity.
func (_u *OrganizationUpdateOne) ClearIntegrations() *OrganizationUpdateOne {
	_u.mutation.ClearIntegrations()
	return _u
}

// RemoveIntegrationIDs removes the "integrations" edge to Integration entities by IDs.
func (_u *OrganizationUpdateOne) RemoveIntegrationIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveIntegrationIDs(ids...)
	return _u
}

// RemoveIntegrations removes "integrations" edges to Integration entities.
func (_u *OrganizationUpdateOne) RemoveIntegrations(v ...*Integration) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveIntegrationIDs(ids...)
}

// ClearDocuments clears all "documents" edges to the DocumentData entity.
func (_u *OrganizationUpdateOne) ClearDocuments() *OrganizationUpdateOne {
	_u.mutation.ClearDocuments()
	return _u
}

// RemoveDocumentIDs removes the "documents" edge to DocumentData entities by IDs.
func (_u *OrganizationUpdateOne) RemoveDocumentIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveDocumentIDs(ids...)
	return _u
}

// RemoveDocuments removes "documents" edges to DocumentData entities.
func (_u *OrganizationUpdateOne) RemoveDocuments(v ...*DocumentData) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDocumentIDs(ids...)
}

// ClearOrgSubscriptions clears all "org_subscriptions" edges to the OrgSubscription entity.
func (_u *OrganizationUpdateOne) ClearOrgSubscriptions() *OrganizationUpdateOne {
	_u.mutation.ClearOrgSubscriptions()
	return _u
}

// RemoveOrgSubscriptionIDs removes the "org_subscriptions" edge to OrgSubscription entities by IDs.
func (_u *OrganizationUpdateOne) RemoveOrgSubscriptionIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveOrgSubscriptionIDs(ids...)
	return _u
}

// RemoveOrgSubscriptions removes "org_subscriptions" edges to OrgSubscription entities.
func (_u *OrganizationUpdateOne) RemoveOrgSubscriptions(v ...*OrgSubscription) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrgSubscriptionIDs(ids...)
}

// ClearOrgProducts clears all "org_products" edges to the OrgProduct entity.
func (_u *OrganizationUpdateOne) ClearOrgProducts() *OrganizationUpdateOne {
	_u.mutation.ClearOrgProducts()
	return _u
}

// RemoveOrgProductIDs removes the "org_products" edge to OrgProduct entities by IDs.
func (_u *OrganizationUpdateOne) RemoveOrgProductIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveOrgProductIDs(ids...)
	return _u
}

// RemoveOrgProducts removes "org_products" edges to OrgProduct entities.
func (_u *OrganizationUpdateOne) RemoveOrgProducts(v ...*OrgProduct) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrgProductIDs(ids...)
}

// ClearOrgPrices clears all "org_prices" edges to the OrgPrice entity.
func (_u *OrganizationUpdateOne) ClearOrgPrices() *OrganizationUpdateOne {
	_u.mutation.ClearOrgPrices()
	return _u
}

// RemoveOrgPriceIDs removes the "org_prices" edge to OrgPrice entities by IDs.
func (_u *OrganizationUpdateOne) RemoveOrgPriceIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveOrgPriceIDs(ids...)
	return _u
}

// RemoveOrgPrices removes "org_prices" edges to OrgPrice entities.
func (_u *OrganizationUpdateOne) RemoveOrgPrices(v ...*OrgPrice) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrgPriceIDs(ids...)
}

// ClearOrgModules clears all "org_modules" edges to the OrgModule entity.
func (_u *OrganizationUpdateOne) ClearOrgModules() *OrganizationUpdateOne {
	_u.mutation.ClearOrgModules()
	return _u
}

// RemoveOrgModuleIDs removes the "org_modules" edge to OrgModule entities by IDs.
func (_u *OrganizationUpdateOne) RemoveOrgModuleIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveOrgModuleIDs(ids...)
	return _u
}

// RemoveOrgModules removes "org_modules" edges to OrgModule entities.
func (_u *OrganizationUpdateOne) RemoveOrgModules(v ...*OrgModule) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveOrgModuleIDs(ids...)
}

// ClearInvites clears all "invites" edges to the Invite entity.
func (_u *OrganizationUpdateOne) ClearInvites() *OrganizationUpdateOne {
	_u.mutation.ClearInvites()
	return _u
}

// RemoveInviteIDs removes the "invites" edge to Invite entities by IDs.
func (_u *OrganizationUpdateOne) RemoveInviteIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveInviteIDs(ids...)
	return _u
}

// RemoveInvites removes "invites" edges to Invite entities.
func (_u *OrganizationUpdateOne) RemoveInvites(v ...*Invite) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInviteIDs(ids...)
}

// ClearSubscribers clears all "subscribers" edges to the Subscriber entity.
func (_u *OrganizationUpdateOne) ClearSubscribers() *OrganizationUpdateOne {
	_u.mutation.ClearSubscribers()
	return _u
}

// RemoveSubscriberIDs removes the "subscribers" edge to Subscriber entities by IDs.
func (_u *OrganizationUpdateOne) RemoveSubscriberIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveSubscriberIDs(ids...)
	return _u
}

// RemoveSubscribers removes "subscribers" edges to Subscriber entities.
func (_u *OrganizationUpdateOne) RemoveSubscribers(v ...*Subscriber) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubscriberIDs(ids...)
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (_u *OrganizationUpdateOne) ClearEntities() *OrganizationUpdateOne {
	_u.mutation.ClearEntities()
	return _u
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (_u *OrganizationUpdateOne) RemoveEntityIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntities removes "entities" edges to Entity entities.
func (_u *OrganizationUpdateOne) RemoveEntities(v ...*Entity) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// ClearEntityTypes clears all "entity_types" edges to the EntityType entity.
func (_u *OrganizationUpdateOne) ClearEntityTypes() *OrganizationUpdateOne {
	_u.mutation.ClearEntityTypes()
	return _u
}

// RemoveEntityTypeIDs removes the "entity_types" edge to EntityType entities by IDs.
func (_u *OrganizationUpdateOne) RemoveEntityTypeIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveEntityTypeIDs(ids...)
	return _u
}

// RemoveEntityTypes removes "entity_types" edges to EntityType entities.
func (_u *OrganizationUpdateOne) RemoveEntityTypes(v ...*EntityType) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityTypeIDs(ids...)
}

// ClearContacts clears all "contacts" edges to the Contact entity.
func (_u *OrganizationUpdateOne) ClearContacts() *OrganizationUpdateOne {
	_u.mutation.ClearContacts()
	return _u
}

// RemoveContactIDs removes the "contacts" edge to Contact entities by IDs.
func (_u *OrganizationUpdateOne) RemoveContactIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveContactIDs(ids...)
	return _u
}

// RemoveContacts removes "contacts" edges to Contact entities.
func (_u *OrganizationUpdateOne) RemoveContacts(v ...*Contact) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveContactIDs(ids...)
}

// ClearNotes clears all "notes" edges to the Note entity.
func (_u *OrganizationUpdateOne) ClearNotes() *OrganizationUpdateOne {
	_u.mutation.ClearNotes()
	return _u
}

// RemoveNoteIDs removes the "notes" edge to Note entities by IDs.
func (_u *OrganizationUpdateOne) RemoveNoteIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveNoteIDs(ids...)
	return _u
}

// RemoveNotes removes "notes" edges to Note entities.
func (_u *OrganizationUpdateOne) RemoveNotes(v ...*Note) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNoteIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *OrganizationUpdateOne) ClearTasks() *OrganizationUpdateOne {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *OrganizationUpdateOne) RemoveTaskIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *OrganizationUpdateOne) RemoveTasks(v ...*Task) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *OrganizationUpdateOne) ClearPrograms() *OrganizationUpdateOne {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *OrganizationUpdateOne) RemoveProgramIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *OrganizationUpdateOne) RemovePrograms(v ...*Program) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (_u *OrganizationUpdateOne) ClearProcedures() *OrganizationUpdateOne {
	_u.mutation.ClearProcedures()
	return _u
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (_u *OrganizationUpdateOne) RemoveProcedureIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveProcedureIDs(ids...)
	return _u
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (_u *OrganizationUpdateOne) RemoveProcedures(v ...*Procedure) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (_u *OrganizationUpdateOne) ClearInternalPolicies() *OrganizationUpdateOne {
	_u.mutation.ClearInternalPolicies()
	return _u
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (_u *OrganizationUpdateOne) RemoveInternalPolicyIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveInternalPolicyIDs(ids...)
	return _u
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (_u *OrganizationUpdateOne) RemoveInternalPolicies(v ...*InternalPolicy) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *OrganizationUpdateOne) ClearRisks() *OrganizationUpdateOne {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *OrganizationUpdateOne) RemoveRiskIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *OrganizationUpdateOne) RemoveRisks(v ...*Risk) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (_u *OrganizationUpdateOne) ClearControlObjectives() *OrganizationUpdateOne {
	_u.mutation.ClearControlObjectives()
	return _u
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (_u *OrganizationUpdateOne) RemoveControlObjectiveIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveControlObjectiveIDs(ids...)
	return _u
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (_u *OrganizationUpdateOne) RemoveControlObjectives(v ...*ControlObjective) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (_u *OrganizationUpdateOne) ClearNarratives() *OrganizationUpdateOne {
	_u.mutation.ClearNarratives()
	return _u
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (_u *OrganizationUpdateOne) RemoveNarrativeIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveNarrativeIDs(ids...)
	return _u
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (_u *OrganizationUpdateOne) RemoveNarratives(v ...*Narrative) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *OrganizationUpdateOne) ClearControls() *OrganizationUpdateOne {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *OrganizationUpdateOne) RemoveControlIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *OrganizationUpdateOne) RemoveControls(v ...*Control) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *OrganizationUpdateOne) ClearSubcontrols() *OrganizationUpdateOne {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *OrganizationUpdateOne) RemoveSubcontrolIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *OrganizationUpdateOne) RemoveSubcontrols(v ...*Subcontrol) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearControlImplementations clears all "control_implementations" edges to the ControlImplementation entity.
func (_u *OrganizationUpdateOne) ClearControlImplementations() *OrganizationUpdateOne {
	_u.mutation.ClearControlImplementations()
	return _u
}

// RemoveControlImplementationIDs removes the "control_implementations" edge to ControlImplementation entities by IDs.
func (_u *OrganizationUpdateOne) RemoveControlImplementationIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveControlImplementationIDs(ids...)
	return _u
}

// RemoveControlImplementations removes "control_implementations" edges to ControlImplementation entities.
func (_u *OrganizationUpdateOne) RemoveControlImplementations(v ...*ControlImplementation) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationIDs(ids...)
}

// ClearMappedControls clears all "mapped_controls" edges to the MappedControl entity.
func (_u *OrganizationUpdateOne) ClearMappedControls() *OrganizationUpdateOne {
	_u.mutation.ClearMappedControls()
	return _u
}

// RemoveMappedControlIDs removes the "mapped_controls" edge to MappedControl entities by IDs.
func (_u *OrganizationUpdateOne) RemoveMappedControlIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveMappedControlIDs(ids...)
	return _u
}

// RemoveMappedControls removes "mapped_controls" edges to MappedControl entities.
func (_u *OrganizationUpdateOne) RemoveMappedControls(v ...*MappedControl) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedControlIDs(ids...)
}

// ClearEvidence clears all "evidence" edges to the Evidence entity.
func (_u *OrganizationUpdateOne) ClearEvidence() *OrganizationUpdateOne {
	_u.mutation.ClearEvidence()
	return _u
}

// RemoveEvidenceIDs removes the "evidence" edge to Evidence entities by IDs.
func (_u *OrganizationUpdateOne) RemoveEvidenceIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveEvidenceIDs(ids...)
	return _u
}

// RemoveEvidence removes "evidence" edges to Evidence entities.
func (_u *OrganizationUpdateOne) RemoveEvidence(v ...*Evidence) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEvidenceIDs(ids...)
}

// ClearStandards clears all "standards" edges to the Standard entity.
func (_u *OrganizationUpdateOne) ClearStandards() *OrganizationUpdateOne {
	_u.mutation.ClearStandards()
	return _u
}

// RemoveStandardIDs removes the "standards" edge to Standard entities by IDs.
func (_u *OrganizationUpdateOne) RemoveStandardIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveStandardIDs(ids...)
	return _u
}

// RemoveStandards removes "standards" edges to Standard entities.
func (_u *OrganizationUpdateOne) RemoveStandards(v ...*Standard) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStandardIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (_u *OrganizationUpdateOne) ClearActionPlans() *OrganizationUpdateOne {
	_u.mutation.ClearActionPlans()
	return _u
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (_u *OrganizationUpdateOne) RemoveActionPlanIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveActionPlanIDs(ids...)
	return _u
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (_u *OrganizationUpdateOne) RemoveActionPlans(v ...*ActionPlan) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActionPlanIDs(ids...)
}

// ClearCustomDomains clears all "custom_domains" edges to the CustomDomain entity.
func (_u *OrganizationUpdateOne) ClearCustomDomains() *OrganizationUpdateOne {
	_u.mutation.ClearCustomDomains()
	return _u
}

// RemoveCustomDomainIDs removes the "custom_domains" edge to CustomDomain entities by IDs.
func (_u *OrganizationUpdateOne) RemoveCustomDomainIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveCustomDomainIDs(ids...)
	return _u
}

// RemoveCustomDomains removes "custom_domains" edges to CustomDomain entities.
func (_u *OrganizationUpdateOne) RemoveCustomDomains(v ...*CustomDomain) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCustomDomainIDs(ids...)
}

// ClearJobRunners clears all "job_runners" edges to the JobRunner entity.
func (_u *OrganizationUpdateOne) ClearJobRunners() *OrganizationUpdateOne {
	_u.mutation.ClearJobRunners()
	return _u
}

// RemoveJobRunnerIDs removes the "job_runners" edge to JobRunner entities by IDs.
func (_u *OrganizationUpdateOne) RemoveJobRunnerIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveJobRunnerIDs(ids...)
	return _u
}

// RemoveJobRunners removes "job_runners" edges to JobRunner entities.
func (_u *OrganizationUpdateOne) RemoveJobRunners(v ...*JobRunner) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobRunnerIDs(ids...)
}

// ClearJobRunnerTokens clears all "job_runner_tokens" edges to the JobRunnerToken entity.
func (_u *OrganizationUpdateOne) ClearJobRunnerTokens() *OrganizationUpdateOne {
	_u.mutation.ClearJobRunnerTokens()
	return _u
}

// RemoveJobRunnerTokenIDs removes the "job_runner_tokens" edge to JobRunnerToken entities by IDs.
func (_u *OrganizationUpdateOne) RemoveJobRunnerTokenIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveJobRunnerTokenIDs(ids...)
	return _u
}

// RemoveJobRunnerTokens removes "job_runner_tokens" edges to JobRunnerToken entities.
func (_u *OrganizationUpdateOne) RemoveJobRunnerTokens(v ...*JobRunnerToken) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobRunnerTokenIDs(ids...)
}

// ClearJobRunnerRegistrationTokens clears all "job_runner_registration_tokens" edges to the JobRunnerRegistrationToken entity.
func (_u *OrganizationUpdateOne) ClearJobRunnerRegistrationTokens() *OrganizationUpdateOne {
	_u.mutation.ClearJobRunnerRegistrationTokens()
	return _u
}

// RemoveJobRunnerRegistrationTokenIDs removes the "job_runner_registration_tokens" edge to JobRunnerRegistrationToken entities by IDs.
func (_u *OrganizationUpdateOne) RemoveJobRunnerRegistrationTokenIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveJobRunnerRegistrationTokenIDs(ids...)
	return _u
}

// RemoveJobRunnerRegistrationTokens removes "job_runner_registration_tokens" edges to JobRunnerRegistrationToken entities.
func (_u *OrganizationUpdateOne) RemoveJobRunnerRegistrationTokens(v ...*JobRunnerRegistrationToken) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobRunnerRegistrationTokenIDs(ids...)
}

// ClearDNSVerifications clears all "dns_verifications" edges to the DNSVerification entity.
func (_u *OrganizationUpdateOne) ClearDNSVerifications() *OrganizationUpdateOne {
	_u.mutation.ClearDNSVerifications()
	return _u
}

// RemoveDNSVerificationIDs removes the "dns_verifications" edge to DNSVerification entities by IDs.
func (_u *OrganizationUpdateOne) RemoveDNSVerificationIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveDNSVerificationIDs(ids...)
	return _u
}

// RemoveDNSVerifications removes "dns_verifications" edges to DNSVerification entities.
func (_u *OrganizationUpdateOne) RemoveDNSVerifications(v ...*DNSVerification) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDNSVerificationIDs(ids...)
}

// ClearJobTemplates clears all "job_templates" edges to the JobTemplate entity.
func (_u *OrganizationUpdateOne) ClearJobTemplates() *OrganizationUpdateOne {
	_u.mutation.ClearJobTemplates()
	return _u
}

// RemoveJobTemplateIDs removes the "job_templates" edge to JobTemplate entities by IDs.
func (_u *OrganizationUpdateOne) RemoveJobTemplateIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveJobTemplateIDs(ids...)
	return _u
}

// RemoveJobTemplates removes "job_templates" edges to JobTemplate entities.
func (_u *OrganizationUpdateOne) RemoveJobTemplates(v ...*JobTemplate) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobTemplateIDs(ids...)
}

// ClearScheduledJobs clears all "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *OrganizationUpdateOne) ClearScheduledJobs() *OrganizationUpdateOne {
	_u.mutation.ClearScheduledJobs()
	return _u
}

// RemoveScheduledJobIDs removes the "scheduled_jobs" edge to ScheduledJob entities by IDs.
func (_u *OrganizationUpdateOne) RemoveScheduledJobIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveScheduledJobIDs(ids...)
	return _u
}

// RemoveScheduledJobs removes "scheduled_jobs" edges to ScheduledJob entities.
func (_u *OrganizationUpdateOne) RemoveScheduledJobs(v ...*ScheduledJob) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledJobIDs(ids...)
}

// ClearJobResults clears all "job_results" edges to the JobResult entity.
func (_u *OrganizationUpdateOne) ClearJobResults() *OrganizationUpdateOne {
	_u.mutation.ClearJobResults()
	return _u
}

// RemoveJobResultIDs removes the "job_results" edge to JobResult entities by IDs.
func (_u *OrganizationUpdateOne) RemoveJobResultIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveJobResultIDs(ids...)
	return _u
}

// RemoveJobResults removes "job_results" edges to JobResult entities.
func (_u *OrganizationUpdateOne) RemoveJobResults(v ...*JobResult) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveJobResultIDs(ids...)
}

// ClearScheduledJobRuns clears all "scheduled_job_runs" edges to the ScheduledJobRun entity.
func (_u *OrganizationUpdateOne) ClearScheduledJobRuns() *OrganizationUpdateOne {
	_u.mutation.ClearScheduledJobRuns()
	return _u
}

// RemoveScheduledJobRunIDs removes the "scheduled_job_runs" edge to ScheduledJobRun entities by IDs.
func (_u *OrganizationUpdateOne) RemoveScheduledJobRunIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveScheduledJobRunIDs(ids...)
	return _u
}

// RemoveScheduledJobRuns removes "scheduled_job_runs" edges to ScheduledJobRun entities.
func (_u *OrganizationUpdateOne) RemoveScheduledJobRuns(v ...*ScheduledJobRun) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledJobRunIDs(ids...)
}

// ClearTrustCenters clears all "trust_centers" edges to the TrustCenter entity.
func (_u *OrganizationUpdateOne) ClearTrustCenters() *OrganizationUpdateOne {
	_u.mutation.ClearTrustCenters()
	return _u
}

// RemoveTrustCenterIDs removes the "trust_centers" edge to TrustCenter entities by IDs.
func (_u *OrganizationUpdateOne) RemoveTrustCenterIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveTrustCenterIDs(ids...)
	return _u
}

// RemoveTrustCenters removes "trust_centers" edges to TrustCenter entities.
func (_u *OrganizationUpdateOne) RemoveTrustCenters(v ...*TrustCenter) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTrustCenterIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (_u *OrganizationUpdateOne) ClearAssets() *OrganizationUpdateOne {
	_u.mutation.ClearAssets()
	return _u
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (_u *OrganizationUpdateOne) RemoveAssetIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveAssetIDs(ids...)
	return _u
}

// RemoveAssets removes "assets" edges to Asset entities.
func (_u *OrganizationUpdateOne) RemoveAssets(v ...*Asset) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssetIDs(ids...)
}

// ClearScans clears all "scans" edges to the Scan entity.
func (_u *OrganizationUpdateOne) ClearScans() *OrganizationUpdateOne {
	_u.mutation.ClearScans()
	return _u
}

// RemoveScanIDs removes the "scans" edge to Scan entities by IDs.
func (_u *OrganizationUpdateOne) RemoveScanIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveScanIDs(ids...)
	return _u
}

// RemoveScans removes "scans" edges to Scan entities.
func (_u *OrganizationUpdateOne) RemoveScans(v ...*Scan) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanIDs(ids...)
}

// ClearSubprocessors clears all "subprocessors" edges to the Subprocessor entity.
func (_u *OrganizationUpdateOne) ClearSubprocessors() *OrganizationUpdateOne {
	_u.mutation.ClearSubprocessors()
	return _u
}

// RemoveSubprocessorIDs removes the "subprocessors" edge to Subprocessor entities by IDs.
func (_u *OrganizationUpdateOne) RemoveSubprocessorIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveSubprocessorIDs(ids...)
	return _u
}

// RemoveSubprocessors removes "subprocessors" edges to Subprocessor entities.
func (_u *OrganizationUpdateOne) RemoveSubprocessors(v ...*Subprocessor) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubprocessorIDs(ids...)
}

// ClearExports clears all "exports" edges to the Export entity.
func (_u *OrganizationUpdateOne) ClearExports() *OrganizationUpdateOne {
	_u.mutation.ClearExports()
	return _u
}

// RemoveExportIDs removes the "exports" edge to Export entities by IDs.
func (_u *OrganizationUpdateOne) RemoveExportIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveExportIDs(ids...)
	return _u
}

// RemoveExports removes "exports" edges to Export entities.
func (_u *OrganizationUpdateOne) RemoveExports(v ...*Export) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveExportIDs(ids...)
}

// ClearMembers clears all "members" edges to the OrgMembership entity.
func (_u *OrganizationUpdateOne) ClearMembers() *OrganizationUpdateOne {
	_u.mutation.ClearMembers()
	return _u
}

// RemoveMemberIDs removes the "members" edge to OrgMembership entities by IDs.
func (_u *OrganizationUpdateOne) RemoveMemberIDs(ids ...string) *OrganizationUpdateOne {
	_u.mutation.RemoveMemberIDs(ids...)
	return _u
}

// RemoveMembers removes "members" edges to OrgMembership entities.
func (_u *OrganizationUpdateOne) RemoveMembers(v ...*OrgMembership) *OrganizationUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMemberIDs(ids...)
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (_u *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Organization entity.
func (_u *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrganizationUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if organization.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organization.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organization.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	if _, ok := _u.mutation.AvatarUpdatedAt(); !ok && !_u.mutation.AvatarUpdatedAtCleared() {
		if organization.UpdateDefaultAvatarUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organization.UpdateDefaultAvatarUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organization.UpdateDefaultAvatarUpdatedAt()
		_u.mutation.SetAvatarUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrganizationUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DisplayName(); ok {
		if err := organization.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Organization.display_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AvatarRemoteURL(); ok {
		if err := organization.AvatarRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_remote_url", err: fmt.Errorf(`generated: validator failed for field "Organization.avatar_remote_url": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OrganizationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(organization.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(organization.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(organization.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(organization.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(organization.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(organization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(organization.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(organization.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(organization.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organization.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(organization.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.DisplayName(); ok {
		_spec.SetField(organization.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if _u.mutation.PersonalOrgCleared() {
		_spec.ClearField(organization.FieldPersonalOrg, field.TypeBool)
	}
	if value, ok := _u.mutation.AvatarRemoteURL(); ok {
		_spec.SetField(organization.FieldAvatarRemoteURL, field.TypeString, value)
	}
	if _u.mutation.AvatarRemoteURLCleared() {
		_spec.ClearField(organization.FieldAvatarRemoteURL, field.TypeString)
	}
	if value, ok := _u.mutation.AvatarUpdatedAt(); ok {
		_spec.SetField(organization.FieldAvatarUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.AvatarUpdatedAtCleared() {
		_spec.ClearField(organization.FieldAvatarUpdatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DedicatedDb(); ok {
		_spec.SetField(organization.FieldDedicatedDb, field.TypeBool, value)
	}
	if _u.mutation.ControlCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlCreatorsTable,
			Columns: []string{organization.ControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlCreatorsIDs(); len(nodes) > 0 && !_u.mutation.ControlCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlCreatorsTable,
			Columns: []string{organization.ControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlCreatorsTable,
			Columns: []string{organization.ControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationCreatorsTable,
			Columns: []string{organization.ControlImplementationCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationCreatorsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationCreatorsTable,
			Columns: []string{organization.ControlImplementationCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationCreatorsTable,
			Columns: []string{organization.ControlImplementationCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectiveCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectiveCreatorsTable,
			Columns: []string{organization.ControlObjectiveCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectiveCreatorsIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectiveCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectiveCreatorsTable,
			Columns: []string{organization.ControlObjectiveCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectiveCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectiveCreatorsTable,
			Columns: []string{organization.ControlObjectiveCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EvidenceCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceCreatorsTable,
			Columns: []string{organization.EvidenceCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEvidenceCreatorsIDs(); len(nodes) > 0 && !_u.mutation.EvidenceCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceCreatorsTable,
			Columns: []string{organization.EvidenceCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EvidenceCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceCreatorsTable,
			Columns: []string{organization.EvidenceCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupCreatorsTable,
			Columns: []string{organization.GroupCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupCreatorsIDs(); len(nodes) > 0 && !_u.mutation.GroupCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupCreatorsTable,
			Columns: []string{organization.GroupCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupCreatorsTable,
			Columns: []string{organization.GroupCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPolicyCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPolicyCreatorsTable,
			Columns: []string{organization.InternalPolicyCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPolicyCreatorsIDs(); len(nodes) > 0 && !_u.mutation.InternalPolicyCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPolicyCreatorsTable,
			Columns: []string{organization.InternalPolicyCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPolicyCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPolicyCreatorsTable,
			Columns: []string{organization.InternalPolicyCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedControlCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlCreatorsTable,
			Columns: []string{organization.MappedControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedControlCreatorsIDs(); len(nodes) > 0 && !_u.mutation.MappedControlCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlCreatorsTable,
			Columns: []string{organization.MappedControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedControlCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlCreatorsTable,
			Columns: []string{organization.MappedControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativeCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativeCreatorsTable,
			Columns: []string{organization.NarrativeCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativeCreatorsIDs(); len(nodes) > 0 && !_u.mutation.NarrativeCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativeCreatorsTable,
			Columns: []string{organization.NarrativeCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativeCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativeCreatorsTable,
			Columns: []string{organization.NarrativeCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProcedureCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProcedureCreatorsTable,
			Columns: []string{organization.ProcedureCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProcedureCreatorsIDs(); len(nodes) > 0 && !_u.mutation.ProcedureCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProcedureCreatorsTable,
			Columns: []string{organization.ProcedureCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProcedureCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProcedureCreatorsTable,
			Columns: []string{organization.ProcedureCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramCreatorsTable,
			Columns: []string{organization.ProgramCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramCreatorsIDs(); len(nodes) > 0 && !_u.mutation.ProgramCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramCreatorsTable,
			Columns: []string{organization.ProgramCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramCreatorsTable,
			Columns: []string{organization.ProgramCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RiskCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RiskCreatorsTable,
			Columns: []string{organization.RiskCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRiskCreatorsIDs(); len(nodes) > 0 && !_u.mutation.RiskCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RiskCreatorsTable,
			Columns: []string{organization.RiskCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RiskCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RiskCreatorsTable,
			Columns: []string{organization.RiskCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledJobCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobCreatorsTable,
			Columns: []string{organization.ScheduledJobCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledJobCreatorsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledJobCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobCreatorsTable,
			Columns: []string{organization.ScheduledJobCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledJobCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobCreatorsTable,
			Columns: []string{organization.ScheduledJobCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StandardCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardCreatorsTable,
			Columns: []string{organization.StandardCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStandardCreatorsIDs(); len(nodes) > 0 && !_u.mutation.StandardCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardCreatorsTable,
			Columns: []string{organization.StandardCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StandardCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardCreatorsTable,
			Columns: []string{organization.StandardCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TemplateCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplateCreatorsTable,
			Columns: []string{organization.TemplateCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTemplateCreatorsIDs(); len(nodes) > 0 && !_u.mutation.TemplateCreatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplateCreatorsTable,
			Columns: []string{organization.TemplateCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TemplateCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplateCreatorsTable,
			Columns: []string{organization.TemplateCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Organization
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationPersonalAccessTokens
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedPersonalAccessTokensIDs(); len(nodes) > 0 && !_u.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationPersonalAccessTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationPersonalAccessTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.APIToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAPITokensIDs(); len(nodes) > 0 && !_u.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.APIToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.APIToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembership
		createE := &OrgMembershipCreate{config: _u.config, mutation: newOrgMembershipMutation(_u.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedUsersIDs(); len(nodes) > 0 && !_u.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: _u.config, mutation: newOrgMembershipMutation(_u.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: _u.config, mutation: newOrgMembershipMutation(_u.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: []string{organization.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Hush
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSecretsIDs(); len(nodes) > 0 && !_u.mutation.SecretsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: []string{organization.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Hush
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: []string{organization.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Hush
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AvatarFileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.AvatarFileTable,
			Columns: []string{organization.AvatarFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Organization
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AvatarFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.AvatarFileTable,
			Columns: []string{organization.AvatarFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !_u.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Template
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTemplatesIDs(); len(nodes) > 0 && !_u.mutation.TemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Template
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Template
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Integration
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !_u.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentsTable,
			Columns: []string{organization.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DocumentData
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDocumentsIDs(); len(nodes) > 0 && !_u.mutation.DocumentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentsTable,
			Columns: []string{organization.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DocumentData
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentsTable,
			Columns: []string{organization.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DocumentData
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrgSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgSubscriptionsTable,
			Columns: []string{organization.OrgSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscription
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrgSubscriptionsIDs(); len(nodes) > 0 && !_u.mutation.OrgSubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgSubscriptionsTable,
			Columns: []string{organization.OrgSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscription
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrgSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgSubscriptionsTable,
			Columns: []string{organization.OrgSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgSubscription
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrgProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgProductsTable,
			Columns: []string{organization.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgProduct
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrgProductsIDs(); len(nodes) > 0 && !_u.mutation.OrgProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgProductsTable,
			Columns: []string{organization.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrgProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgProductsTable,
			Columns: []string{organization.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrgPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgPricesTable,
			Columns: []string{organization.OrgPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgPrice
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrgPricesIDs(); len(nodes) > 0 && !_u.mutation.OrgPricesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgPricesTable,
			Columns: []string{organization.OrgPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrgPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgPricesTable,
			Columns: []string{organization.OrgPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OrgModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgModulesTable,
			Columns: []string{organization.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgModule
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedOrgModulesIDs(); len(nodes) > 0 && !_u.mutation.OrgModulesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgModulesTable,
			Columns: []string{organization.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrgModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgModulesTable,
			Columns: []string{organization.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Invite
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInvitesIDs(); len(nodes) > 0 && !_u.mutation.InvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Invite
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Invite
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subscriber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubscribersIDs(); len(nodes) > 0 && !_u.mutation.SubscribersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !_u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntityTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntityTypesTable,
			Columns: []string{organization.EntityTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityType
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntityTypesIDs(); len(nodes) > 0 && !_u.mutation.EntityTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntityTypesTable,
			Columns: []string{organization.EntityTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntityTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntityTypesTable,
			Columns: []string{organization.EntityTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Contact
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedContactsIDs(); len(nodes) > 0 && !_u.mutation.ContactsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNotesIDs(); len(nodes) > 0 && !_u.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: []string{organization.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Task
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: []string{organization.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: []string{organization.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramsTable,
			Columns: []string{organization.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Program
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramsTable,
			Columns: []string{organization.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramsTable,
			Columns: []string{organization.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProceduresTable,
			Columns: []string{organization.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !_u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProceduresTable,
			Columns: []string{organization.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProceduresTable,
			Columns: []string{organization.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPoliciesTable,
			Columns: []string{organization.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !_u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPoliciesTable,
			Columns: []string{organization.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPoliciesTable,
			Columns: []string{organization.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RisksTable,
			Columns: []string{organization.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RisksTable,
			Columns: []string{organization.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RisksTable,
			Columns: []string{organization.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectivesTable,
			Columns: []string{organization.ControlObjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjective
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectivesTable,
			Columns: []string{organization.ControlObjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjective
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectivesTable,
			Columns: []string{organization.ControlObjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlObjective
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativesTable,
			Columns: []string{organization.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Narrative
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !_u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativesTable,
			Columns: []string{organization.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativesTable,
			Columns: []string{organization.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlsTable,
			Columns: []string{organization.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlsTable,
			Columns: []string{organization.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlsTable,
			Columns: []string{organization.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubcontrolsTable,
			Columns: []string{organization.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubcontrolsTable,
			Columns: []string{organization.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubcontrolsTable,
			Columns: []string{organization.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationsTable,
			Columns: []string{organization.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationsTable,
			Columns: []string{organization.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationsTable,
			Columns: []string{organization.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlsTable,
			Columns: []string{organization.MappedControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControl
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedControlsIDs(); len(nodes) > 0 && !_u.mutation.MappedControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlsTable,
			Columns: []string{organization.MappedControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControl
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlsTable,
			Columns: []string{organization.MappedControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControl
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceTable,
			Columns: []string{organization.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Evidence
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEvidenceIDs(); len(nodes) > 0 && !_u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceTable,
			Columns: []string{organization.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Evidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceTable,
			Columns: []string{organization.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Evidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StandardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardsTable,
			Columns: []string{organization.StandardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Standard
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStandardsIDs(); len(nodes) > 0 && !_u.mutation.StandardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardsTable,
			Columns: []string{organization.StandardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Standard
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StandardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardsTable,
			Columns: []string{organization.StandardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Standard
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActionPlansTable,
			Columns: []string{organization.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !_u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActionPlansTable,
			Columns: []string{organization.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActionPlansTable,
			Columns: []string{organization.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CustomDomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.CustomDomainsTable,
			Columns: []string{organization.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCustomDomainsIDs(); len(nodes) > 0 && !_u.mutation.CustomDomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.CustomDomainsTable,
			Columns: []string{organization.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CustomDomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.CustomDomainsTable,
			Columns: []string{organization.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobRunnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnersTable,
			Columns: []string{organization.JobRunnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunner
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobRunnersIDs(); len(nodes) > 0 && !_u.mutation.JobRunnersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnersTable,
			Columns: []string{organization.JobRunnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobRunnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnersTable,
			Columns: []string{organization.JobRunnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobRunnerTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerTokensTable,
			Columns: []string{organization.JobRunnerTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobRunnerTokensIDs(); len(nodes) > 0 && !_u.mutation.JobRunnerTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerTokensTable,
			Columns: []string{organization.JobRunnerTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobRunnerTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerTokensTable,
			Columns: []string{organization.JobRunnerTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobRunnerRegistrationTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerRegistrationTokensTable,
			Columns: []string{organization.JobRunnerRegistrationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnerregistrationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerRegistrationToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobRunnerRegistrationTokensIDs(); len(nodes) > 0 && !_u.mutation.JobRunnerRegistrationTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerRegistrationTokensTable,
			Columns: []string{organization.JobRunnerRegistrationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnerregistrationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerRegistrationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobRunnerRegistrationTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerRegistrationTokensTable,
			Columns: []string{organization.JobRunnerRegistrationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnerregistrationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobRunnerRegistrationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DNSVerificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DNSVerificationsTable,
			Columns: []string{organization.DNSVerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DNSVerification
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDNSVerificationsIDs(); len(nodes) > 0 && !_u.mutation.DNSVerificationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DNSVerificationsTable,
			Columns: []string{organization.DNSVerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DNSVerification
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DNSVerificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DNSVerificationsTable,
			Columns: []string{organization.DNSVerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.DNSVerification
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobTemplatesTable,
			Columns: []string{organization.JobTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobTemplate
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobTemplatesIDs(); len(nodes) > 0 && !_u.mutation.JobTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobTemplatesTable,
			Columns: []string{organization.JobTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobTemplatesTable,
			Columns: []string{organization.JobTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobsTable,
			Columns: []string{organization.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledJobsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobsTable,
			Columns: []string{organization.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobsTable,
			Columns: []string{organization.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.JobResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobResultsTable,
			Columns: []string{organization.JobResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresult.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobResult
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedJobResultsIDs(); len(nodes) > 0 && !_u.mutation.JobResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobResultsTable,
			Columns: []string{organization.JobResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresult.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobResultsTable,
			Columns: []string{organization.JobResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresult.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledJobRunsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobRunsTable,
			Columns: []string{organization.ScheduledJobRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjobrun.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobRun
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledJobRunsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledJobRunsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobRunsTable,
			Columns: []string{organization.ScheduledJobRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjobrun.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobRun
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledJobRunsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobRunsTable,
			Columns: []string{organization.ScheduledJobRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjobrun.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobRun
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TrustCentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TrustCentersTable,
			Columns: []string{organization.TrustCentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTrustCentersIDs(); len(nodes) > 0 && !_u.mutation.TrustCentersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TrustCentersTable,
			Columns: []string{organization.TrustCentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TrustCentersTable,
			Columns: []string{organization.TrustCentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AssetsTable,
			Columns: []string{organization.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Asset
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !_u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AssetsTable,
			Columns: []string{organization.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Asset
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AssetsTable,
			Columns: []string{organization.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Asset
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScansTable,
			Columns: []string{organization.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScansIDs(); len(nodes) > 0 && !_u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScansTable,
			Columns: []string{organization.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScansTable,
			Columns: []string{organization.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubprocessorsTable,
			Columns: []string{organization.SubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubprocessorsIDs(); len(nodes) > 0 && !_u.mutation.SubprocessorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubprocessorsTable,
			Columns: []string{organization.SubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubprocessorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubprocessorsTable,
			Columns: []string{organization.SubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ExportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ExportsTable,
			Columns: []string{organization.ExportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(export.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Export
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedExportsIDs(); len(nodes) > 0 && !_u.mutation.ExportsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ExportsTable,
			Columns: []string{organization.ExportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(export.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Export
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ExportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ExportsTable,
			Columns: []string{organization.ExportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(export.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Export
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMembersIDs(); len(nodes) > 0 && !_u.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Organization
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Organization{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
