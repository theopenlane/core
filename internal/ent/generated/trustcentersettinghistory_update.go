// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersettinghistory"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterSettingHistoryUpdate is the builder for updating TrustCenterSettingHistory entities.
type TrustCenterSettingHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *TrustCenterSettingHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrustCenterSettingHistoryUpdate builder.
func (_u *TrustCenterSettingHistoryUpdate) Where(ps ...predicate.TrustCenterSettingHistory) *TrustCenterSettingHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterSettingHistoryUpdate) SetUpdatedAt(v time.Time) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearUpdatedAt() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterSettingHistoryUpdate) SetUpdatedBy(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableUpdatedBy(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearUpdatedBy() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterSettingHistoryUpdate) SetDeletedAt(v time.Time) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableDeletedAt(v *time.Time) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearDeletedAt() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterSettingHistoryUpdate) SetDeletedBy(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableDeletedBy(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearDeletedBy() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterSettingHistoryUpdate) SetTrustCenterID(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableTrustCenterID(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearTrustCenterID() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *TrustCenterSettingHistoryUpdate) SetTitle(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableTitle(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearTitle() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearTitle()
	return _u
}

// SetOverview sets the "overview" field.
func (_u *TrustCenterSettingHistoryUpdate) SetOverview(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetOverview(v)
	return _u
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableOverview(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetOverview(*v)
	}
	return _u
}

// ClearOverview clears the value of the "overview" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearOverview() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearOverview()
	return _u
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (_u *TrustCenterSettingHistoryUpdate) SetLogoRemoteURL(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetLogoRemoteURL(v)
	return _u
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableLogoRemoteURL(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetLogoRemoteURL(*v)
	}
	return _u
}

// ClearLogoRemoteURL clears the value of the "logo_remote_url" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearLogoRemoteURL() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearLogoRemoteURL()
	return _u
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (_u *TrustCenterSettingHistoryUpdate) SetLogoLocalFileID(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetLogoLocalFileID(v)
	return _u
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableLogoLocalFileID(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetLogoLocalFileID(*v)
	}
	return _u
}

// ClearLogoLocalFileID clears the value of the "logo_local_file_id" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearLogoLocalFileID() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearLogoLocalFileID()
	return _u
}

// SetFaviconRemoteURL sets the "favicon_remote_url" field.
func (_u *TrustCenterSettingHistoryUpdate) SetFaviconRemoteURL(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetFaviconRemoteURL(v)
	return _u
}

// SetNillableFaviconRemoteURL sets the "favicon_remote_url" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableFaviconRemoteURL(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetFaviconRemoteURL(*v)
	}
	return _u
}

// ClearFaviconRemoteURL clears the value of the "favicon_remote_url" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearFaviconRemoteURL() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearFaviconRemoteURL()
	return _u
}

// SetFaviconLocalFileID sets the "favicon_local_file_id" field.
func (_u *TrustCenterSettingHistoryUpdate) SetFaviconLocalFileID(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetFaviconLocalFileID(v)
	return _u
}

// SetNillableFaviconLocalFileID sets the "favicon_local_file_id" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableFaviconLocalFileID(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetFaviconLocalFileID(*v)
	}
	return _u
}

// ClearFaviconLocalFileID clears the value of the "favicon_local_file_id" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearFaviconLocalFileID() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearFaviconLocalFileID()
	return _u
}

// SetThemeMode sets the "theme_mode" field.
func (_u *TrustCenterSettingHistoryUpdate) SetThemeMode(v enums.TrustCenterThemeMode) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetThemeMode(v)
	return _u
}

// SetNillableThemeMode sets the "theme_mode" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableThemeMode(v *enums.TrustCenterThemeMode) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetThemeMode(*v)
	}
	return _u
}

// ClearThemeMode clears the value of the "theme_mode" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearThemeMode() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearThemeMode()
	return _u
}

// SetPrimaryColor sets the "primary_color" field.
func (_u *TrustCenterSettingHistoryUpdate) SetPrimaryColor(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetPrimaryColor(v)
	return _u
}

// SetNillablePrimaryColor sets the "primary_color" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillablePrimaryColor(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetPrimaryColor(*v)
	}
	return _u
}

// ClearPrimaryColor clears the value of the "primary_color" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearPrimaryColor() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearPrimaryColor()
	return _u
}

// SetFont sets the "font" field.
func (_u *TrustCenterSettingHistoryUpdate) SetFont(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetFont(v)
	return _u
}

// SetNillableFont sets the "font" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableFont(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetFont(*v)
	}
	return _u
}

// ClearFont clears the value of the "font" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearFont() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearFont()
	return _u
}

// SetForegroundColor sets the "foreground_color" field.
func (_u *TrustCenterSettingHistoryUpdate) SetForegroundColor(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetForegroundColor(v)
	return _u
}

// SetNillableForegroundColor sets the "foreground_color" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableForegroundColor(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetForegroundColor(*v)
	}
	return _u
}

// ClearForegroundColor clears the value of the "foreground_color" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearForegroundColor() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearForegroundColor()
	return _u
}

// SetBackgroundColor sets the "background_color" field.
func (_u *TrustCenterSettingHistoryUpdate) SetBackgroundColor(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetBackgroundColor(v)
	return _u
}

// SetNillableBackgroundColor sets the "background_color" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableBackgroundColor(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetBackgroundColor(*v)
	}
	return _u
}

// ClearBackgroundColor clears the value of the "background_color" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearBackgroundColor() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearBackgroundColor()
	return _u
}

// SetAccentColor sets the "accent_color" field.
func (_u *TrustCenterSettingHistoryUpdate) SetAccentColor(v string) *TrustCenterSettingHistoryUpdate {
	_u.mutation.SetAccentColor(v)
	return _u
}

// SetNillableAccentColor sets the "accent_color" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdate) SetNillableAccentColor(v *string) *TrustCenterSettingHistoryUpdate {
	if v != nil {
		_u.SetAccentColor(*v)
	}
	return _u
}

// ClearAccentColor clears the value of the "accent_color" field.
func (_u *TrustCenterSettingHistoryUpdate) ClearAccentColor() *TrustCenterSettingHistoryUpdate {
	_u.mutation.ClearAccentColor()
	return _u
}

// Mutation returns the TrustCenterSettingHistoryMutation object of the builder.
func (_u *TrustCenterSettingHistoryUpdate) Mutation() *TrustCenterSettingHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TrustCenterSettingHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterSettingHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TrustCenterSettingHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterSettingHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterSettingHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcentersettinghistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersettinghistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersettinghistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterSettingHistoryUpdate) check() error {
	if v, ok := _u.mutation.ThemeMode(); ok {
		if err := trustcentersettinghistory.ThemeModeValidator(v); err != nil {
			return &ValidationError{Name: "theme_mode", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSettingHistory.theme_mode": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterSettingHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterSettingHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterSettingHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcentersettinghistory.Table, trustcentersettinghistory.Columns, sqlgraph.NewFieldSpec(trustcentersettinghistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersettinghistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersettinghistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersettinghistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersettinghistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.TrustCenterID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldTrustCenterID, field.TypeString, value)
	}
	if _u.mutation.TrustCenterIDCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldTrustCenterID, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(trustcentersettinghistory.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldTitle, field.TypeString)
	}
	if value, ok := _u.mutation.Overview(); ok {
		_spec.SetField(trustcentersettinghistory.FieldOverview, field.TypeString, value)
	}
	if _u.mutation.OverviewCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldOverview, field.TypeString)
	}
	if value, ok := _u.mutation.LogoRemoteURL(); ok {
		_spec.SetField(trustcentersettinghistory.FieldLogoRemoteURL, field.TypeString, value)
	}
	if _u.mutation.LogoRemoteURLCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldLogoRemoteURL, field.TypeString)
	}
	if value, ok := _u.mutation.LogoLocalFileID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldLogoLocalFileID, field.TypeString, value)
	}
	if _u.mutation.LogoLocalFileIDCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldLogoLocalFileID, field.TypeString)
	}
	if value, ok := _u.mutation.FaviconRemoteURL(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFaviconRemoteURL, field.TypeString, value)
	}
	if _u.mutation.FaviconRemoteURLCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldFaviconRemoteURL, field.TypeString)
	}
	if value, ok := _u.mutation.FaviconLocalFileID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFaviconLocalFileID, field.TypeString, value)
	}
	if _u.mutation.FaviconLocalFileIDCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldFaviconLocalFileID, field.TypeString)
	}
	if value, ok := _u.mutation.ThemeMode(); ok {
		_spec.SetField(trustcentersettinghistory.FieldThemeMode, field.TypeEnum, value)
	}
	if _u.mutation.ThemeModeCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldThemeMode, field.TypeEnum)
	}
	if value, ok := _u.mutation.PrimaryColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldPrimaryColor, field.TypeString, value)
	}
	if _u.mutation.PrimaryColorCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldPrimaryColor, field.TypeString)
	}
	if value, ok := _u.mutation.Font(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFont, field.TypeString, value)
	}
	if _u.mutation.FontCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldFont, field.TypeString)
	}
	if value, ok := _u.mutation.ForegroundColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldForegroundColor, field.TypeString, value)
	}
	if _u.mutation.ForegroundColorCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldForegroundColor, field.TypeString)
	}
	if value, ok := _u.mutation.BackgroundColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldBackgroundColor, field.TypeString, value)
	}
	if _u.mutation.BackgroundColorCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldBackgroundColor, field.TypeString)
	}
	if value, ok := _u.mutation.AccentColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldAccentColor, field.TypeString, value)
	}
	if _u.mutation.AccentColorCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldAccentColor, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterSettingHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentersettinghistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TrustCenterSettingHistoryUpdateOne is the builder for updating a single TrustCenterSettingHistory entity.
type TrustCenterSettingHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrustCenterSettingHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetUpdatedAt(v time.Time) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearUpdatedAt() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetUpdatedBy(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableUpdatedBy(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearUpdatedBy() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetDeletedAt(v time.Time) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearDeletedAt() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetDeletedBy(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableDeletedBy(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearDeletedBy() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetTrustCenterID(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableTrustCenterID(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearTrustCenterID() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetTitle(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableTitle(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// ClearTitle clears the value of the "title" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearTitle() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearTitle()
	return _u
}

// SetOverview sets the "overview" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetOverview(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetOverview(v)
	return _u
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableOverview(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetOverview(*v)
	}
	return _u
}

// ClearOverview clears the value of the "overview" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearOverview() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearOverview()
	return _u
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetLogoRemoteURL(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetLogoRemoteURL(v)
	return _u
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableLogoRemoteURL(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetLogoRemoteURL(*v)
	}
	return _u
}

// ClearLogoRemoteURL clears the value of the "logo_remote_url" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearLogoRemoteURL() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearLogoRemoteURL()
	return _u
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetLogoLocalFileID(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetLogoLocalFileID(v)
	return _u
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableLogoLocalFileID(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetLogoLocalFileID(*v)
	}
	return _u
}

// ClearLogoLocalFileID clears the value of the "logo_local_file_id" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearLogoLocalFileID() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearLogoLocalFileID()
	return _u
}

// SetFaviconRemoteURL sets the "favicon_remote_url" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetFaviconRemoteURL(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetFaviconRemoteURL(v)
	return _u
}

// SetNillableFaviconRemoteURL sets the "favicon_remote_url" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableFaviconRemoteURL(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetFaviconRemoteURL(*v)
	}
	return _u
}

// ClearFaviconRemoteURL clears the value of the "favicon_remote_url" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearFaviconRemoteURL() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearFaviconRemoteURL()
	return _u
}

// SetFaviconLocalFileID sets the "favicon_local_file_id" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetFaviconLocalFileID(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetFaviconLocalFileID(v)
	return _u
}

// SetNillableFaviconLocalFileID sets the "favicon_local_file_id" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableFaviconLocalFileID(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetFaviconLocalFileID(*v)
	}
	return _u
}

// ClearFaviconLocalFileID clears the value of the "favicon_local_file_id" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearFaviconLocalFileID() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearFaviconLocalFileID()
	return _u
}

// SetThemeMode sets the "theme_mode" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetThemeMode(v enums.TrustCenterThemeMode) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetThemeMode(v)
	return _u
}

// SetNillableThemeMode sets the "theme_mode" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableThemeMode(v *enums.TrustCenterThemeMode) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetThemeMode(*v)
	}
	return _u
}

// ClearThemeMode clears the value of the "theme_mode" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearThemeMode() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearThemeMode()
	return _u
}

// SetPrimaryColor sets the "primary_color" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetPrimaryColor(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetPrimaryColor(v)
	return _u
}

// SetNillablePrimaryColor sets the "primary_color" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillablePrimaryColor(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetPrimaryColor(*v)
	}
	return _u
}

// ClearPrimaryColor clears the value of the "primary_color" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearPrimaryColor() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearPrimaryColor()
	return _u
}

// SetFont sets the "font" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetFont(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetFont(v)
	return _u
}

// SetNillableFont sets the "font" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableFont(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetFont(*v)
	}
	return _u
}

// ClearFont clears the value of the "font" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearFont() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearFont()
	return _u
}

// SetForegroundColor sets the "foreground_color" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetForegroundColor(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetForegroundColor(v)
	return _u
}

// SetNillableForegroundColor sets the "foreground_color" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableForegroundColor(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetForegroundColor(*v)
	}
	return _u
}

// ClearForegroundColor clears the value of the "foreground_color" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearForegroundColor() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearForegroundColor()
	return _u
}

// SetBackgroundColor sets the "background_color" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetBackgroundColor(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetBackgroundColor(v)
	return _u
}

// SetNillableBackgroundColor sets the "background_color" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableBackgroundColor(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetBackgroundColor(*v)
	}
	return _u
}

// ClearBackgroundColor clears the value of the "background_color" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearBackgroundColor() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearBackgroundColor()
	return _u
}

// SetAccentColor sets the "accent_color" field.
func (_u *TrustCenterSettingHistoryUpdateOne) SetAccentColor(v string) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.SetAccentColor(v)
	return _u
}

// SetNillableAccentColor sets the "accent_color" field if the given value is not nil.
func (_u *TrustCenterSettingHistoryUpdateOne) SetNillableAccentColor(v *string) *TrustCenterSettingHistoryUpdateOne {
	if v != nil {
		_u.SetAccentColor(*v)
	}
	return _u
}

// ClearAccentColor clears the value of the "accent_color" field.
func (_u *TrustCenterSettingHistoryUpdateOne) ClearAccentColor() *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.ClearAccentColor()
	return _u
}

// Mutation returns the TrustCenterSettingHistoryMutation object of the builder.
func (_u *TrustCenterSettingHistoryUpdateOne) Mutation() *TrustCenterSettingHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the TrustCenterSettingHistoryUpdate builder.
func (_u *TrustCenterSettingHistoryUpdateOne) Where(ps ...predicate.TrustCenterSettingHistory) *TrustCenterSettingHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TrustCenterSettingHistoryUpdateOne) Select(field string, fields ...string) *TrustCenterSettingHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TrustCenterSettingHistory entity.
func (_u *TrustCenterSettingHistoryUpdateOne) Save(ctx context.Context) (*TrustCenterSettingHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterSettingHistoryUpdateOne) SaveX(ctx context.Context) *TrustCenterSettingHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TrustCenterSettingHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterSettingHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterSettingHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcentersettinghistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersettinghistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersettinghistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterSettingHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.ThemeMode(); ok {
		if err := trustcentersettinghistory.ThemeModeValidator(v); err != nil {
			return &ValidationError{Name: "theme_mode", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSettingHistory.theme_mode": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterSettingHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterSettingHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterSettingHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TrustCenterSettingHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcentersettinghistory.Table, trustcentersettinghistory.Columns, sqlgraph.NewFieldSpec(trustcentersettinghistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TrustCenterSettingHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcentersettinghistory.FieldID)
		for _, f := range fields {
			if !trustcentersettinghistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != trustcentersettinghistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersettinghistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersettinghistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersettinghistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersettinghistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.TrustCenterID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldTrustCenterID, field.TypeString, value)
	}
	if _u.mutation.TrustCenterIDCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldTrustCenterID, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(trustcentersettinghistory.FieldTitle, field.TypeString, value)
	}
	if _u.mutation.TitleCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldTitle, field.TypeString)
	}
	if value, ok := _u.mutation.Overview(); ok {
		_spec.SetField(trustcentersettinghistory.FieldOverview, field.TypeString, value)
	}
	if _u.mutation.OverviewCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldOverview, field.TypeString)
	}
	if value, ok := _u.mutation.LogoRemoteURL(); ok {
		_spec.SetField(trustcentersettinghistory.FieldLogoRemoteURL, field.TypeString, value)
	}
	if _u.mutation.LogoRemoteURLCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldLogoRemoteURL, field.TypeString)
	}
	if value, ok := _u.mutation.LogoLocalFileID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldLogoLocalFileID, field.TypeString, value)
	}
	if _u.mutation.LogoLocalFileIDCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldLogoLocalFileID, field.TypeString)
	}
	if value, ok := _u.mutation.FaviconRemoteURL(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFaviconRemoteURL, field.TypeString, value)
	}
	if _u.mutation.FaviconRemoteURLCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldFaviconRemoteURL, field.TypeString)
	}
	if value, ok := _u.mutation.FaviconLocalFileID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFaviconLocalFileID, field.TypeString, value)
	}
	if _u.mutation.FaviconLocalFileIDCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldFaviconLocalFileID, field.TypeString)
	}
	if value, ok := _u.mutation.ThemeMode(); ok {
		_spec.SetField(trustcentersettinghistory.FieldThemeMode, field.TypeEnum, value)
	}
	if _u.mutation.ThemeModeCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldThemeMode, field.TypeEnum)
	}
	if value, ok := _u.mutation.PrimaryColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldPrimaryColor, field.TypeString, value)
	}
	if _u.mutation.PrimaryColorCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldPrimaryColor, field.TypeString)
	}
	if value, ok := _u.mutation.Font(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFont, field.TypeString, value)
	}
	if _u.mutation.FontCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldFont, field.TypeString)
	}
	if value, ok := _u.mutation.ForegroundColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldForegroundColor, field.TypeString, value)
	}
	if _u.mutation.ForegroundColorCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldForegroundColor, field.TypeString)
	}
	if value, ok := _u.mutation.BackgroundColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldBackgroundColor, field.TypeString, value)
	}
	if _u.mutation.BackgroundColorCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldBackgroundColor, field.TypeString)
	}
	if value, ok := _u.mutation.AccentColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldAccentColor, field.TypeString, value)
	}
	if _u.mutation.AccentColorCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldAccentColor, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterSettingHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TrustCenterSettingHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentersettinghistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
