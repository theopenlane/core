// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersettinghistory"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterSettingHistoryUpdate is the builder for updating TrustCenterSettingHistory entities.
type TrustCenterSettingHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *TrustCenterSettingHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrustCenterSettingHistoryUpdate builder.
func (tcshu *TrustCenterSettingHistoryUpdate) Where(ps ...predicate.TrustCenterSettingHistory) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.Where(ps...)
	return tcshu
}

// SetUpdatedAt sets the "updated_at" field.
func (tcshu *TrustCenterSettingHistoryUpdate) SetUpdatedAt(t time.Time) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.SetUpdatedAt(t)
	return tcshu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tcshu *TrustCenterSettingHistoryUpdate) ClearUpdatedAt() *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.ClearUpdatedAt()
	return tcshu
}

// SetUpdatedBy sets the "updated_by" field.
func (tcshu *TrustCenterSettingHistoryUpdate) SetUpdatedBy(s string) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.SetUpdatedBy(s)
	return tcshu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcshu *TrustCenterSettingHistoryUpdate) SetNillableUpdatedBy(s *string) *TrustCenterSettingHistoryUpdate {
	if s != nil {
		tcshu.SetUpdatedBy(*s)
	}
	return tcshu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tcshu *TrustCenterSettingHistoryUpdate) ClearUpdatedBy() *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.ClearUpdatedBy()
	return tcshu
}

// SetDeletedAt sets the "deleted_at" field.
func (tcshu *TrustCenterSettingHistoryUpdate) SetDeletedAt(t time.Time) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.SetDeletedAt(t)
	return tcshu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcshu *TrustCenterSettingHistoryUpdate) SetNillableDeletedAt(t *time.Time) *TrustCenterSettingHistoryUpdate {
	if t != nil {
		tcshu.SetDeletedAt(*t)
	}
	return tcshu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tcshu *TrustCenterSettingHistoryUpdate) ClearDeletedAt() *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.ClearDeletedAt()
	return tcshu
}

// SetDeletedBy sets the "deleted_by" field.
func (tcshu *TrustCenterSettingHistoryUpdate) SetDeletedBy(s string) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.SetDeletedBy(s)
	return tcshu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcshu *TrustCenterSettingHistoryUpdate) SetNillableDeletedBy(s *string) *TrustCenterSettingHistoryUpdate {
	if s != nil {
		tcshu.SetDeletedBy(*s)
	}
	return tcshu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tcshu *TrustCenterSettingHistoryUpdate) ClearDeletedBy() *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.ClearDeletedBy()
	return tcshu
}

// SetTrustCenterID sets the "trust_center_id" field.
func (tcshu *TrustCenterSettingHistoryUpdate) SetTrustCenterID(s string) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.SetTrustCenterID(s)
	return tcshu
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (tcshu *TrustCenterSettingHistoryUpdate) SetNillableTrustCenterID(s *string) *TrustCenterSettingHistoryUpdate {
	if s != nil {
		tcshu.SetTrustCenterID(*s)
	}
	return tcshu
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (tcshu *TrustCenterSettingHistoryUpdate) ClearTrustCenterID() *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.ClearTrustCenterID()
	return tcshu
}

// SetTitle sets the "title" field.
func (tcshu *TrustCenterSettingHistoryUpdate) SetTitle(s string) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.SetTitle(s)
	return tcshu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tcshu *TrustCenterSettingHistoryUpdate) SetNillableTitle(s *string) *TrustCenterSettingHistoryUpdate {
	if s != nil {
		tcshu.SetTitle(*s)
	}
	return tcshu
}

// ClearTitle clears the value of the "title" field.
func (tcshu *TrustCenterSettingHistoryUpdate) ClearTitle() *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.ClearTitle()
	return tcshu
}

// SetOverview sets the "overview" field.
func (tcshu *TrustCenterSettingHistoryUpdate) SetOverview(s string) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.SetOverview(s)
	return tcshu
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (tcshu *TrustCenterSettingHistoryUpdate) SetNillableOverview(s *string) *TrustCenterSettingHistoryUpdate {
	if s != nil {
		tcshu.SetOverview(*s)
	}
	return tcshu
}

// ClearOverview clears the value of the "overview" field.
func (tcshu *TrustCenterSettingHistoryUpdate) ClearOverview() *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.ClearOverview()
	return tcshu
}

// SetPrimaryColor sets the "primary_color" field.
func (tcshu *TrustCenterSettingHistoryUpdate) SetPrimaryColor(s string) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.SetPrimaryColor(s)
	return tcshu
}

// SetNillablePrimaryColor sets the "primary_color" field if the given value is not nil.
func (tcshu *TrustCenterSettingHistoryUpdate) SetNillablePrimaryColor(s *string) *TrustCenterSettingHistoryUpdate {
	if s != nil {
		tcshu.SetPrimaryColor(*s)
	}
	return tcshu
}

// ClearPrimaryColor clears the value of the "primary_color" field.
func (tcshu *TrustCenterSettingHistoryUpdate) ClearPrimaryColor() *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.ClearPrimaryColor()
	return tcshu
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (tcshu *TrustCenterSettingHistoryUpdate) SetLogoRemoteURL(s string) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.SetLogoRemoteURL(s)
	return tcshu
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (tcshu *TrustCenterSettingHistoryUpdate) SetNillableLogoRemoteURL(s *string) *TrustCenterSettingHistoryUpdate {
	if s != nil {
		tcshu.SetLogoRemoteURL(*s)
	}
	return tcshu
}

// ClearLogoRemoteURL clears the value of the "logo_remote_url" field.
func (tcshu *TrustCenterSettingHistoryUpdate) ClearLogoRemoteURL() *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.ClearLogoRemoteURL()
	return tcshu
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (tcshu *TrustCenterSettingHistoryUpdate) SetLogoLocalFileID(s string) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.SetLogoLocalFileID(s)
	return tcshu
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (tcshu *TrustCenterSettingHistoryUpdate) SetNillableLogoLocalFileID(s *string) *TrustCenterSettingHistoryUpdate {
	if s != nil {
		tcshu.SetLogoLocalFileID(*s)
	}
	return tcshu
}

// ClearLogoLocalFileID clears the value of the "logo_local_file_id" field.
func (tcshu *TrustCenterSettingHistoryUpdate) ClearLogoLocalFileID() *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.ClearLogoLocalFileID()
	return tcshu
}

// SetFaviconRemoteURL sets the "favicon_remote_url" field.
func (tcshu *TrustCenterSettingHistoryUpdate) SetFaviconRemoteURL(s string) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.SetFaviconRemoteURL(s)
	return tcshu
}

// SetNillableFaviconRemoteURL sets the "favicon_remote_url" field if the given value is not nil.
func (tcshu *TrustCenterSettingHistoryUpdate) SetNillableFaviconRemoteURL(s *string) *TrustCenterSettingHistoryUpdate {
	if s != nil {
		tcshu.SetFaviconRemoteURL(*s)
	}
	return tcshu
}

// ClearFaviconRemoteURL clears the value of the "favicon_remote_url" field.
func (tcshu *TrustCenterSettingHistoryUpdate) ClearFaviconRemoteURL() *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.ClearFaviconRemoteURL()
	return tcshu
}

// SetFaviconLocalFileID sets the "favicon_local_file_id" field.
func (tcshu *TrustCenterSettingHistoryUpdate) SetFaviconLocalFileID(s string) *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.SetFaviconLocalFileID(s)
	return tcshu
}

// SetNillableFaviconLocalFileID sets the "favicon_local_file_id" field if the given value is not nil.
func (tcshu *TrustCenterSettingHistoryUpdate) SetNillableFaviconLocalFileID(s *string) *TrustCenterSettingHistoryUpdate {
	if s != nil {
		tcshu.SetFaviconLocalFileID(*s)
	}
	return tcshu
}

// ClearFaviconLocalFileID clears the value of the "favicon_local_file_id" field.
func (tcshu *TrustCenterSettingHistoryUpdate) ClearFaviconLocalFileID() *TrustCenterSettingHistoryUpdate {
	tcshu.mutation.ClearFaviconLocalFileID()
	return tcshu
}

// Mutation returns the TrustCenterSettingHistoryMutation object of the builder.
func (tcshu *TrustCenterSettingHistoryUpdate) Mutation() *TrustCenterSettingHistoryMutation {
	return tcshu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcshu *TrustCenterSettingHistoryUpdate) Save(ctx context.Context) (int, error) {
	tcshu.defaults()
	return withHooks(ctx, tcshu.sqlSave, tcshu.mutation, tcshu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcshu *TrustCenterSettingHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := tcshu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcshu *TrustCenterSettingHistoryUpdate) Exec(ctx context.Context) error {
	_, err := tcshu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcshu *TrustCenterSettingHistoryUpdate) ExecX(ctx context.Context) {
	if err := tcshu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcshu *TrustCenterSettingHistoryUpdate) defaults() {
	if _, ok := tcshu.mutation.UpdatedAt(); !ok && !tcshu.mutation.UpdatedAtCleared() {
		v := trustcentersettinghistory.UpdateDefaultUpdatedAt()
		tcshu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcshu *TrustCenterSettingHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterSettingHistoryUpdate {
	tcshu.modifiers = append(tcshu.modifiers, modifiers...)
	return tcshu
}

func (tcshu *TrustCenterSettingHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(trustcentersettinghistory.Table, trustcentersettinghistory.Columns, sqlgraph.NewFieldSpec(trustcentersettinghistory.FieldID, field.TypeString))
	if ps := tcshu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tcshu.mutation.RefCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldRef, field.TypeString)
	}
	if tcshu.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tcshu.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersettinghistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcshu.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldUpdatedAt, field.TypeTime)
	}
	if tcshu.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tcshu.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersettinghistory.FieldUpdatedBy, field.TypeString, value)
	}
	if tcshu.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tcshu.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersettinghistory.FieldDeletedAt, field.TypeTime, value)
	}
	if tcshu.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tcshu.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersettinghistory.FieldDeletedBy, field.TypeString, value)
	}
	if tcshu.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tcshu.mutation.TrustCenterID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldTrustCenterID, field.TypeString, value)
	}
	if tcshu.mutation.TrustCenterIDCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldTrustCenterID, field.TypeString)
	}
	if value, ok := tcshu.mutation.Title(); ok {
		_spec.SetField(trustcentersettinghistory.FieldTitle, field.TypeString, value)
	}
	if tcshu.mutation.TitleCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldTitle, field.TypeString)
	}
	if value, ok := tcshu.mutation.Overview(); ok {
		_spec.SetField(trustcentersettinghistory.FieldOverview, field.TypeString, value)
	}
	if tcshu.mutation.OverviewCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldOverview, field.TypeString)
	}
	if value, ok := tcshu.mutation.PrimaryColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldPrimaryColor, field.TypeString, value)
	}
	if tcshu.mutation.PrimaryColorCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldPrimaryColor, field.TypeString)
	}
	if value, ok := tcshu.mutation.LogoRemoteURL(); ok {
		_spec.SetField(trustcentersettinghistory.FieldLogoRemoteURL, field.TypeString, value)
	}
	if tcshu.mutation.LogoRemoteURLCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldLogoRemoteURL, field.TypeString)
	}
	if value, ok := tcshu.mutation.LogoLocalFileID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldLogoLocalFileID, field.TypeString, value)
	}
	if tcshu.mutation.LogoLocalFileIDCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldLogoLocalFileID, field.TypeString)
	}
	if value, ok := tcshu.mutation.FaviconRemoteURL(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFaviconRemoteURL, field.TypeString, value)
	}
	if tcshu.mutation.FaviconRemoteURLCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldFaviconRemoteURL, field.TypeString)
	}
	if value, ok := tcshu.mutation.FaviconLocalFileID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFaviconLocalFileID, field.TypeString, value)
	}
	if tcshu.mutation.FaviconLocalFileIDCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldFaviconLocalFileID, field.TypeString)
	}
	_spec.Node.Schema = tcshu.schemaConfig.TrustCenterSettingHistory
	ctx = internal.NewSchemaConfigContext(ctx, tcshu.schemaConfig)
	_spec.AddModifiers(tcshu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tcshu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentersettinghistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcshu.mutation.done = true
	return n, nil
}

// TrustCenterSettingHistoryUpdateOne is the builder for updating a single TrustCenterSettingHistory entity.
type TrustCenterSettingHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrustCenterSettingHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetUpdatedAt(t time.Time) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.SetUpdatedAt(t)
	return tcshuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ClearUpdatedAt() *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.ClearUpdatedAt()
	return tcshuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetUpdatedBy(s string) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.SetUpdatedBy(s)
	return tcshuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetNillableUpdatedBy(s *string) *TrustCenterSettingHistoryUpdateOne {
	if s != nil {
		tcshuo.SetUpdatedBy(*s)
	}
	return tcshuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ClearUpdatedBy() *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.ClearUpdatedBy()
	return tcshuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetDeletedAt(t time.Time) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.SetDeletedAt(t)
	return tcshuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *TrustCenterSettingHistoryUpdateOne {
	if t != nil {
		tcshuo.SetDeletedAt(*t)
	}
	return tcshuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ClearDeletedAt() *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.ClearDeletedAt()
	return tcshuo
}

// SetDeletedBy sets the "deleted_by" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetDeletedBy(s string) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.SetDeletedBy(s)
	return tcshuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetNillableDeletedBy(s *string) *TrustCenterSettingHistoryUpdateOne {
	if s != nil {
		tcshuo.SetDeletedBy(*s)
	}
	return tcshuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ClearDeletedBy() *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.ClearDeletedBy()
	return tcshuo
}

// SetTrustCenterID sets the "trust_center_id" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetTrustCenterID(s string) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.SetTrustCenterID(s)
	return tcshuo
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetNillableTrustCenterID(s *string) *TrustCenterSettingHistoryUpdateOne {
	if s != nil {
		tcshuo.SetTrustCenterID(*s)
	}
	return tcshuo
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ClearTrustCenterID() *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.ClearTrustCenterID()
	return tcshuo
}

// SetTitle sets the "title" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetTitle(s string) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.SetTitle(s)
	return tcshuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetNillableTitle(s *string) *TrustCenterSettingHistoryUpdateOne {
	if s != nil {
		tcshuo.SetTitle(*s)
	}
	return tcshuo
}

// ClearTitle clears the value of the "title" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ClearTitle() *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.ClearTitle()
	return tcshuo
}

// SetOverview sets the "overview" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetOverview(s string) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.SetOverview(s)
	return tcshuo
}

// SetNillableOverview sets the "overview" field if the given value is not nil.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetNillableOverview(s *string) *TrustCenterSettingHistoryUpdateOne {
	if s != nil {
		tcshuo.SetOverview(*s)
	}
	return tcshuo
}

// ClearOverview clears the value of the "overview" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ClearOverview() *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.ClearOverview()
	return tcshuo
}

// SetPrimaryColor sets the "primary_color" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetPrimaryColor(s string) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.SetPrimaryColor(s)
	return tcshuo
}

// SetNillablePrimaryColor sets the "primary_color" field if the given value is not nil.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetNillablePrimaryColor(s *string) *TrustCenterSettingHistoryUpdateOne {
	if s != nil {
		tcshuo.SetPrimaryColor(*s)
	}
	return tcshuo
}

// ClearPrimaryColor clears the value of the "primary_color" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ClearPrimaryColor() *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.ClearPrimaryColor()
	return tcshuo
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetLogoRemoteURL(s string) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.SetLogoRemoteURL(s)
	return tcshuo
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetNillableLogoRemoteURL(s *string) *TrustCenterSettingHistoryUpdateOne {
	if s != nil {
		tcshuo.SetLogoRemoteURL(*s)
	}
	return tcshuo
}

// ClearLogoRemoteURL clears the value of the "logo_remote_url" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ClearLogoRemoteURL() *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.ClearLogoRemoteURL()
	return tcshuo
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetLogoLocalFileID(s string) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.SetLogoLocalFileID(s)
	return tcshuo
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetNillableLogoLocalFileID(s *string) *TrustCenterSettingHistoryUpdateOne {
	if s != nil {
		tcshuo.SetLogoLocalFileID(*s)
	}
	return tcshuo
}

// ClearLogoLocalFileID clears the value of the "logo_local_file_id" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ClearLogoLocalFileID() *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.ClearLogoLocalFileID()
	return tcshuo
}

// SetFaviconRemoteURL sets the "favicon_remote_url" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetFaviconRemoteURL(s string) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.SetFaviconRemoteURL(s)
	return tcshuo
}

// SetNillableFaviconRemoteURL sets the "favicon_remote_url" field if the given value is not nil.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetNillableFaviconRemoteURL(s *string) *TrustCenterSettingHistoryUpdateOne {
	if s != nil {
		tcshuo.SetFaviconRemoteURL(*s)
	}
	return tcshuo
}

// ClearFaviconRemoteURL clears the value of the "favicon_remote_url" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ClearFaviconRemoteURL() *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.ClearFaviconRemoteURL()
	return tcshuo
}

// SetFaviconLocalFileID sets the "favicon_local_file_id" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetFaviconLocalFileID(s string) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.SetFaviconLocalFileID(s)
	return tcshuo
}

// SetNillableFaviconLocalFileID sets the "favicon_local_file_id" field if the given value is not nil.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SetNillableFaviconLocalFileID(s *string) *TrustCenterSettingHistoryUpdateOne {
	if s != nil {
		tcshuo.SetFaviconLocalFileID(*s)
	}
	return tcshuo
}

// ClearFaviconLocalFileID clears the value of the "favicon_local_file_id" field.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ClearFaviconLocalFileID() *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.ClearFaviconLocalFileID()
	return tcshuo
}

// Mutation returns the TrustCenterSettingHistoryMutation object of the builder.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) Mutation() *TrustCenterSettingHistoryMutation {
	return tcshuo.mutation
}

// Where appends a list predicates to the TrustCenterSettingHistoryUpdate builder.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) Where(ps ...predicate.TrustCenterSettingHistory) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.mutation.Where(ps...)
	return tcshuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) Select(field string, fields ...string) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.fields = append([]string{field}, fields...)
	return tcshuo
}

// Save executes the query and returns the updated TrustCenterSettingHistory entity.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) Save(ctx context.Context) (*TrustCenterSettingHistory, error) {
	tcshuo.defaults()
	return withHooks(ctx, tcshuo.sqlSave, tcshuo.mutation, tcshuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) SaveX(ctx context.Context) *TrustCenterSettingHistory {
	node, err := tcshuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := tcshuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := tcshuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) defaults() {
	if _, ok := tcshuo.mutation.UpdatedAt(); !ok && !tcshuo.mutation.UpdatedAtCleared() {
		v := trustcentersettinghistory.UpdateDefaultUpdatedAt()
		tcshuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcshuo *TrustCenterSettingHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterSettingHistoryUpdateOne {
	tcshuo.modifiers = append(tcshuo.modifiers, modifiers...)
	return tcshuo
}

func (tcshuo *TrustCenterSettingHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TrustCenterSettingHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(trustcentersettinghistory.Table, trustcentersettinghistory.Columns, sqlgraph.NewFieldSpec(trustcentersettinghistory.FieldID, field.TypeString))
	id, ok := tcshuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TrustCenterSettingHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcshuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcentersettinghistory.FieldID)
		for _, f := range fields {
			if !trustcentersettinghistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != trustcentersettinghistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcshuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tcshuo.mutation.RefCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldRef, field.TypeString)
	}
	if tcshuo.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tcshuo.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersettinghistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcshuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldUpdatedAt, field.TypeTime)
	}
	if tcshuo.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tcshuo.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersettinghistory.FieldUpdatedBy, field.TypeString, value)
	}
	if tcshuo.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tcshuo.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersettinghistory.FieldDeletedAt, field.TypeTime, value)
	}
	if tcshuo.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tcshuo.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersettinghistory.FieldDeletedBy, field.TypeString, value)
	}
	if tcshuo.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tcshuo.mutation.TrustCenterID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldTrustCenterID, field.TypeString, value)
	}
	if tcshuo.mutation.TrustCenterIDCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldTrustCenterID, field.TypeString)
	}
	if value, ok := tcshuo.mutation.Title(); ok {
		_spec.SetField(trustcentersettinghistory.FieldTitle, field.TypeString, value)
	}
	if tcshuo.mutation.TitleCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldTitle, field.TypeString)
	}
	if value, ok := tcshuo.mutation.Overview(); ok {
		_spec.SetField(trustcentersettinghistory.FieldOverview, field.TypeString, value)
	}
	if tcshuo.mutation.OverviewCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldOverview, field.TypeString)
	}
	if value, ok := tcshuo.mutation.PrimaryColor(); ok {
		_spec.SetField(trustcentersettinghistory.FieldPrimaryColor, field.TypeString, value)
	}
	if tcshuo.mutation.PrimaryColorCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldPrimaryColor, field.TypeString)
	}
	if value, ok := tcshuo.mutation.LogoRemoteURL(); ok {
		_spec.SetField(trustcentersettinghistory.FieldLogoRemoteURL, field.TypeString, value)
	}
	if tcshuo.mutation.LogoRemoteURLCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldLogoRemoteURL, field.TypeString)
	}
	if value, ok := tcshuo.mutation.LogoLocalFileID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldLogoLocalFileID, field.TypeString, value)
	}
	if tcshuo.mutation.LogoLocalFileIDCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldLogoLocalFileID, field.TypeString)
	}
	if value, ok := tcshuo.mutation.FaviconRemoteURL(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFaviconRemoteURL, field.TypeString, value)
	}
	if tcshuo.mutation.FaviconRemoteURLCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldFaviconRemoteURL, field.TypeString)
	}
	if value, ok := tcshuo.mutation.FaviconLocalFileID(); ok {
		_spec.SetField(trustcentersettinghistory.FieldFaviconLocalFileID, field.TypeString, value)
	}
	if tcshuo.mutation.FaviconLocalFileIDCleared() {
		_spec.ClearField(trustcentersettinghistory.FieldFaviconLocalFileID, field.TypeString)
	}
	_spec.Node.Schema = tcshuo.schemaConfig.TrustCenterSettingHistory
	ctx = internal.NewSchemaConfigContext(ctx, tcshuo.schemaConfig)
	_spec.AddModifiers(tcshuo.modifiers...)
	_node = &TrustCenterSettingHistory{config: tcshuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcshuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentersettinghistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcshuo.mutation.done = true
	return _node, nil
}
