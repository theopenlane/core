// Code generated by ent, DO NOT EDIT.

package grouphistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/entx/history"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContainsFold(FieldID, id))
}

// HistoryTime applies equality check predicate on the "history_time" field. It's identical to HistoryTimeEQ.
func HistoryTime(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldRef, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldDeletedBy, v))
}

// DisplayID applies equality check predicate on the "display_id" field. It's identical to DisplayIDEQ.
func DisplayID(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldDisplayID, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldOwnerID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldDescription, v))
}

// IsManaged applies equality check predicate on the "is_managed" field. It's identical to IsManagedEQ.
func IsManaged(v bool) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldIsManaged, v))
}

// GravatarLogoURL applies equality check predicate on the "gravatar_logo_url" field. It's identical to GravatarLogoURLEQ.
func GravatarLogoURL(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldGravatarLogoURL, v))
}

// LogoURL applies equality check predicate on the "logo_url" field. It's identical to LogoURLEQ.
func LogoURL(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldLogoURL, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldDisplayName, v))
}

// HistoryTimeEQ applies the EQ predicate on the "history_time" field.
func HistoryTimeEQ(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// HistoryTimeNEQ applies the NEQ predicate on the "history_time" field.
func HistoryTimeNEQ(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldHistoryTime, v))
}

// HistoryTimeIn applies the In predicate on the "history_time" field.
func HistoryTimeIn(vs ...time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldHistoryTime, vs...))
}

// HistoryTimeNotIn applies the NotIn predicate on the "history_time" field.
func HistoryTimeNotIn(vs ...time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldHistoryTime, vs...))
}

// HistoryTimeGT applies the GT predicate on the "history_time" field.
func HistoryTimeGT(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldHistoryTime, v))
}

// HistoryTimeGTE applies the GTE predicate on the "history_time" field.
func HistoryTimeGTE(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldHistoryTime, v))
}

// HistoryTimeLT applies the LT predicate on the "history_time" field.
func HistoryTimeLT(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldHistoryTime, v))
}

// HistoryTimeLTE applies the LTE predicate on the "history_time" field.
func HistoryTimeLTE(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldHistoryTime, v))
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldRef, v))
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldRef, v))
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldRef, vs...))
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldRef, vs...))
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldRef, v))
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldRef, v))
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldRef, v))
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldRef, v))
}

// RefContains applies the Contains predicate on the "ref" field.
func RefContains(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContains(FieldRef, v))
}

// RefHasPrefix applies the HasPrefix predicate on the "ref" field.
func RefHasPrefix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasPrefix(FieldRef, v))
}

// RefHasSuffix applies the HasSuffix predicate on the "ref" field.
func RefHasSuffix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasSuffix(FieldRef, v))
}

// RefIsNil applies the IsNil predicate on the "ref" field.
func RefIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldRef))
}

// RefNotNil applies the NotNil predicate on the "ref" field.
func RefNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldRef))
}

// RefEqualFold applies the EqualFold predicate on the "ref" field.
func RefEqualFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEqualFold(FieldRef, v))
}

// RefContainsFold applies the ContainsFold predicate on the "ref" field.
func RefContainsFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContainsFold(FieldRef, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v history.OpType) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v history.OpType) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...history.OpType) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...history.OpType) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldOperation, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContainsFold(FieldDeletedBy, v))
}

// DisplayIDEQ applies the EQ predicate on the "display_id" field.
func DisplayIDEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldDisplayID, v))
}

// DisplayIDNEQ applies the NEQ predicate on the "display_id" field.
func DisplayIDNEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldDisplayID, v))
}

// DisplayIDIn applies the In predicate on the "display_id" field.
func DisplayIDIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldDisplayID, vs...))
}

// DisplayIDNotIn applies the NotIn predicate on the "display_id" field.
func DisplayIDNotIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldDisplayID, vs...))
}

// DisplayIDGT applies the GT predicate on the "display_id" field.
func DisplayIDGT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldDisplayID, v))
}

// DisplayIDGTE applies the GTE predicate on the "display_id" field.
func DisplayIDGTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldDisplayID, v))
}

// DisplayIDLT applies the LT predicate on the "display_id" field.
func DisplayIDLT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldDisplayID, v))
}

// DisplayIDLTE applies the LTE predicate on the "display_id" field.
func DisplayIDLTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldDisplayID, v))
}

// DisplayIDContains applies the Contains predicate on the "display_id" field.
func DisplayIDContains(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContains(FieldDisplayID, v))
}

// DisplayIDHasPrefix applies the HasPrefix predicate on the "display_id" field.
func DisplayIDHasPrefix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasPrefix(FieldDisplayID, v))
}

// DisplayIDHasSuffix applies the HasSuffix predicate on the "display_id" field.
func DisplayIDHasSuffix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasSuffix(FieldDisplayID, v))
}

// DisplayIDEqualFold applies the EqualFold predicate on the "display_id" field.
func DisplayIDEqualFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEqualFold(FieldDisplayID, v))
}

// DisplayIDContainsFold applies the ContainsFold predicate on the "display_id" field.
func DisplayIDContainsFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContainsFold(FieldDisplayID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldTags))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContainsFold(FieldOwnerID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContainsFold(FieldDescription, v))
}

// IsManagedEQ applies the EQ predicate on the "is_managed" field.
func IsManagedEQ(v bool) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldIsManaged, v))
}

// IsManagedNEQ applies the NEQ predicate on the "is_managed" field.
func IsManagedNEQ(v bool) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldIsManaged, v))
}

// IsManagedIsNil applies the IsNil predicate on the "is_managed" field.
func IsManagedIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldIsManaged))
}

// IsManagedNotNil applies the NotNil predicate on the "is_managed" field.
func IsManagedNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldIsManaged))
}

// GravatarLogoURLEQ applies the EQ predicate on the "gravatar_logo_url" field.
func GravatarLogoURLEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldGravatarLogoURL, v))
}

// GravatarLogoURLNEQ applies the NEQ predicate on the "gravatar_logo_url" field.
func GravatarLogoURLNEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldGravatarLogoURL, v))
}

// GravatarLogoURLIn applies the In predicate on the "gravatar_logo_url" field.
func GravatarLogoURLIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldGravatarLogoURL, vs...))
}

// GravatarLogoURLNotIn applies the NotIn predicate on the "gravatar_logo_url" field.
func GravatarLogoURLNotIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldGravatarLogoURL, vs...))
}

// GravatarLogoURLGT applies the GT predicate on the "gravatar_logo_url" field.
func GravatarLogoURLGT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldGravatarLogoURL, v))
}

// GravatarLogoURLGTE applies the GTE predicate on the "gravatar_logo_url" field.
func GravatarLogoURLGTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldGravatarLogoURL, v))
}

// GravatarLogoURLLT applies the LT predicate on the "gravatar_logo_url" field.
func GravatarLogoURLLT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldGravatarLogoURL, v))
}

// GravatarLogoURLLTE applies the LTE predicate on the "gravatar_logo_url" field.
func GravatarLogoURLLTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldGravatarLogoURL, v))
}

// GravatarLogoURLContains applies the Contains predicate on the "gravatar_logo_url" field.
func GravatarLogoURLContains(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContains(FieldGravatarLogoURL, v))
}

// GravatarLogoURLHasPrefix applies the HasPrefix predicate on the "gravatar_logo_url" field.
func GravatarLogoURLHasPrefix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasPrefix(FieldGravatarLogoURL, v))
}

// GravatarLogoURLHasSuffix applies the HasSuffix predicate on the "gravatar_logo_url" field.
func GravatarLogoURLHasSuffix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasSuffix(FieldGravatarLogoURL, v))
}

// GravatarLogoURLIsNil applies the IsNil predicate on the "gravatar_logo_url" field.
func GravatarLogoURLIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldGravatarLogoURL))
}

// GravatarLogoURLNotNil applies the NotNil predicate on the "gravatar_logo_url" field.
func GravatarLogoURLNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldGravatarLogoURL))
}

// GravatarLogoURLEqualFold applies the EqualFold predicate on the "gravatar_logo_url" field.
func GravatarLogoURLEqualFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEqualFold(FieldGravatarLogoURL, v))
}

// GravatarLogoURLContainsFold applies the ContainsFold predicate on the "gravatar_logo_url" field.
func GravatarLogoURLContainsFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContainsFold(FieldGravatarLogoURL, v))
}

// LogoURLEQ applies the EQ predicate on the "logo_url" field.
func LogoURLEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldLogoURL, v))
}

// LogoURLNEQ applies the NEQ predicate on the "logo_url" field.
func LogoURLNEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldLogoURL, v))
}

// LogoURLIn applies the In predicate on the "logo_url" field.
func LogoURLIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldLogoURL, vs...))
}

// LogoURLNotIn applies the NotIn predicate on the "logo_url" field.
func LogoURLNotIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldLogoURL, vs...))
}

// LogoURLGT applies the GT predicate on the "logo_url" field.
func LogoURLGT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldLogoURL, v))
}

// LogoURLGTE applies the GTE predicate on the "logo_url" field.
func LogoURLGTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldLogoURL, v))
}

// LogoURLLT applies the LT predicate on the "logo_url" field.
func LogoURLLT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldLogoURL, v))
}

// LogoURLLTE applies the LTE predicate on the "logo_url" field.
func LogoURLLTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldLogoURL, v))
}

// LogoURLContains applies the Contains predicate on the "logo_url" field.
func LogoURLContains(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContains(FieldLogoURL, v))
}

// LogoURLHasPrefix applies the HasPrefix predicate on the "logo_url" field.
func LogoURLHasPrefix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasPrefix(FieldLogoURL, v))
}

// LogoURLHasSuffix applies the HasSuffix predicate on the "logo_url" field.
func LogoURLHasSuffix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasSuffix(FieldLogoURL, v))
}

// LogoURLIsNil applies the IsNil predicate on the "logo_url" field.
func LogoURLIsNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIsNull(FieldLogoURL))
}

// LogoURLNotNil applies the NotNil predicate on the "logo_url" field.
func LogoURLNotNil() predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotNull(FieldLogoURL))
}

// LogoURLEqualFold applies the EqualFold predicate on the "logo_url" field.
func LogoURLEqualFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEqualFold(FieldLogoURL, v))
}

// LogoURLContainsFold applies the ContainsFold predicate on the "logo_url" field.
func LogoURLContainsFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContainsFold(FieldLogoURL, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.GroupHistory {
	return predicate.GroupHistory(sql.FieldContainsFold(FieldDisplayName, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GroupHistory) predicate.GroupHistory {
	return predicate.GroupHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GroupHistory) predicate.GroupHistory {
	return predicate.GroupHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GroupHistory) predicate.GroupHistory {
	return predicate.GroupHistory(sql.NotPredicates(p))
}
