// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/dnsverification"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/pkg/enums"
)

// DNSVerification is the model entity for the DNSVerification schema.
type DNSVerification struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// The ID of the custom domain in cloudflare
	CloudflareHostnameID string `json:"cloudflare_hostname_id,omitempty"`
	// the name of the dns txt record
	DNSTxtRecord string `json:"dns_txt_record,omitempty"`
	// the expected value of the dns txt record
	DNSTxtValue string `json:"dns_txt_value,omitempty"`
	// Status of the domain verification
	DNSVerificationStatus enums.DNSVerificationStatus `json:"dns_verification_status,omitempty"`
	// Reason of the dns verification status, for giving the user diagnostic info
	DNSVerificationStatusReason string `json:"dns_verification_status_reason,omitempty"`
	// Path under /.well-known/acme-challenge/ to serve the ACME challenge
	AcmeChallengePath string `json:"acme_challenge_path,omitempty"`
	// the expected value of the acme challenge record
	ExpectedAcmeChallengeValue string `json:"expected_acme_challenge_value,omitempty"`
	// Status of the ACME challenge validation
	AcmeChallengeStatus enums.SSLVerificationStatus `json:"acme_challenge_status,omitempty"`
	// Reason of the ACME status, for giving the user diagnostic info
	AcmeChallengeStatusReason string `json:"acme_challenge_status_reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DNSVerificationQuery when eager-loading is set.
	Edges        DNSVerificationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DNSVerificationEdges holds the relations/edges for other nodes in the graph.
type DNSVerificationEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// CustomDomains holds the value of the custom_domains edge.
	CustomDomains []*CustomDomain `json:"custom_domains,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedCustomDomains map[string][]*CustomDomain
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DNSVerificationEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// CustomDomainsOrErr returns the CustomDomains value or an error if the edge
// was not loaded in eager-loading.
func (e DNSVerificationEdges) CustomDomainsOrErr() ([]*CustomDomain, error) {
	if e.loadedTypes[1] {
		return e.CustomDomains, nil
	}
	return nil, &NotLoadedError{edge: "custom_domains"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DNSVerification) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dnsverification.FieldTags:
			values[i] = new([]byte)
		case dnsverification.FieldID, dnsverification.FieldCreatedBy, dnsverification.FieldUpdatedBy, dnsverification.FieldDeletedBy, dnsverification.FieldOwnerID, dnsverification.FieldCloudflareHostnameID, dnsverification.FieldDNSTxtRecord, dnsverification.FieldDNSTxtValue, dnsverification.FieldDNSVerificationStatus, dnsverification.FieldDNSVerificationStatusReason, dnsverification.FieldAcmeChallengePath, dnsverification.FieldExpectedAcmeChallengeValue, dnsverification.FieldAcmeChallengeStatus, dnsverification.FieldAcmeChallengeStatusReason:
			values[i] = new(sql.NullString)
		case dnsverification.FieldCreatedAt, dnsverification.FieldUpdatedAt, dnsverification.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DNSVerification fields.
func (_m *DNSVerification) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dnsverification.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case dnsverification.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case dnsverification.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case dnsverification.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case dnsverification.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case dnsverification.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case dnsverification.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case dnsverification.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case dnsverification.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case dnsverification.FieldCloudflareHostnameID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cloudflare_hostname_id", values[i])
			} else if value.Valid {
				_m.CloudflareHostnameID = value.String
			}
		case dnsverification.FieldDNSTxtRecord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_txt_record", values[i])
			} else if value.Valid {
				_m.DNSTxtRecord = value.String
			}
		case dnsverification.FieldDNSTxtValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_txt_value", values[i])
			} else if value.Valid {
				_m.DNSTxtValue = value.String
			}
		case dnsverification.FieldDNSVerificationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_verification_status", values[i])
			} else if value.Valid {
				_m.DNSVerificationStatus = enums.DNSVerificationStatus(value.String)
			}
		case dnsverification.FieldDNSVerificationStatusReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_verification_status_reason", values[i])
			} else if value.Valid {
				_m.DNSVerificationStatusReason = value.String
			}
		case dnsverification.FieldAcmeChallengePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field acme_challenge_path", values[i])
			} else if value.Valid {
				_m.AcmeChallengePath = value.String
			}
		case dnsverification.FieldExpectedAcmeChallengeValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field expected_acme_challenge_value", values[i])
			} else if value.Valid {
				_m.ExpectedAcmeChallengeValue = value.String
			}
		case dnsverification.FieldAcmeChallengeStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field acme_challenge_status", values[i])
			} else if value.Valid {
				_m.AcmeChallengeStatus = enums.SSLVerificationStatus(value.String)
			}
		case dnsverification.FieldAcmeChallengeStatusReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field acme_challenge_status_reason", values[i])
			} else if value.Valid {
				_m.AcmeChallengeStatusReason = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DNSVerification.
// This includes values selected through modifiers, order, etc.
func (_m *DNSVerification) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the DNSVerification entity.
func (_m *DNSVerification) QueryOwner() *OrganizationQuery {
	return NewDNSVerificationClient(_m.config).QueryOwner(_m)
}

// QueryCustomDomains queries the "custom_domains" edge of the DNSVerification entity.
func (_m *DNSVerification) QueryCustomDomains() *CustomDomainQuery {
	return NewDNSVerificationClient(_m.config).QueryCustomDomains(_m)
}

// Update returns a builder for updating this DNSVerification.
// Note that you need to call DNSVerification.Unwrap() before calling this method if this DNSVerification
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *DNSVerification) Update() *DNSVerificationUpdateOne {
	return NewDNSVerificationClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the DNSVerification entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *DNSVerification) Unwrap() *DNSVerification {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: DNSVerification is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *DNSVerification) String() string {
	var builder strings.Builder
	builder.WriteString("DNSVerification(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("cloudflare_hostname_id=")
	builder.WriteString(_m.CloudflareHostnameID)
	builder.WriteString(", ")
	builder.WriteString("dns_txt_record=")
	builder.WriteString(_m.DNSTxtRecord)
	builder.WriteString(", ")
	builder.WriteString("dns_txt_value=")
	builder.WriteString(_m.DNSTxtValue)
	builder.WriteString(", ")
	builder.WriteString("dns_verification_status=")
	builder.WriteString(fmt.Sprintf("%v", _m.DNSVerificationStatus))
	builder.WriteString(", ")
	builder.WriteString("dns_verification_status_reason=")
	builder.WriteString(_m.DNSVerificationStatusReason)
	builder.WriteString(", ")
	builder.WriteString("acme_challenge_path=")
	builder.WriteString(_m.AcmeChallengePath)
	builder.WriteString(", ")
	builder.WriteString("expected_acme_challenge_value=")
	builder.WriteString(_m.ExpectedAcmeChallengeValue)
	builder.WriteString(", ")
	builder.WriteString("acme_challenge_status=")
	builder.WriteString(fmt.Sprintf("%v", _m.AcmeChallengeStatus))
	builder.WriteString(", ")
	builder.WriteString("acme_challenge_status_reason=")
	builder.WriteString(_m.AcmeChallengeStatusReason)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCustomDomains returns the CustomDomains named value or an error if the edge was not
// loaded in eager-loading with this name.
func (_m *DNSVerification) NamedCustomDomains(name string) ([]*CustomDomain, error) {
	if _m.Edges.namedCustomDomains == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := _m.Edges.namedCustomDomains[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (_m *DNSVerification) appendNamedCustomDomains(name string, edges ...*CustomDomain) {
	if _m.Edges.namedCustomDomains == nil {
		_m.Edges.namedCustomDomains = make(map[string][]*CustomDomain)
	}
	if len(edges) == 0 {
		_m.Edges.namedCustomDomains[name] = []*CustomDomain{}
	} else {
		_m.Edges.namedCustomDomains[name] = append(_m.Edges.namedCustomDomains[name], edges...)
	}
}

// DNSVerifications is a parsable slice of DNSVerification.
type DNSVerifications []*DNSVerification
