// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ControlImplementationQuery is the builder for querying ControlImplementation entities.
type ControlImplementationQuery struct {
	config
	ctx               *QueryContext
	order             []controlimplementation.OrderOption
	inters            []Interceptor
	predicates        []predicate.ControlImplementation
	withControls      *ControlQuery
	loadTotal         []func(context.Context, []*ControlImplementation) error
	modifiers         []func(*sql.Selector)
	withNamedControls map[string]*ControlQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ControlImplementationQuery builder.
func (ciq *ControlImplementationQuery) Where(ps ...predicate.ControlImplementation) *ControlImplementationQuery {
	ciq.predicates = append(ciq.predicates, ps...)
	return ciq
}

// Limit the number of records to be returned by this query.
func (ciq *ControlImplementationQuery) Limit(limit int) *ControlImplementationQuery {
	ciq.ctx.Limit = &limit
	return ciq
}

// Offset to start from.
func (ciq *ControlImplementationQuery) Offset(offset int) *ControlImplementationQuery {
	ciq.ctx.Offset = &offset
	return ciq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ciq *ControlImplementationQuery) Unique(unique bool) *ControlImplementationQuery {
	ciq.ctx.Unique = &unique
	return ciq
}

// Order specifies how the records should be ordered.
func (ciq *ControlImplementationQuery) Order(o ...controlimplementation.OrderOption) *ControlImplementationQuery {
	ciq.order = append(ciq.order, o...)
	return ciq
}

// QueryControls chains the current query on the "controls" edge.
func (ciq *ControlImplementationQuery) QueryControls() *ControlQuery {
	query := (&ControlClient{config: ciq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ciq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ciq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(controlimplementation.Table, controlimplementation.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, controlimplementation.ControlsTable, controlimplementation.ControlsPrimaryKey...),
		)
		schemaConfig := ciq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlControlImplementations
		fromU = sqlgraph.SetNeighbors(ciq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ControlImplementation entity from the query.
// Returns a *NotFoundError when no ControlImplementation was found.
func (ciq *ControlImplementationQuery) First(ctx context.Context) (*ControlImplementation, error) {
	nodes, err := ciq.Limit(1).All(setContextOp(ctx, ciq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{controlimplementation.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ciq *ControlImplementationQuery) FirstX(ctx context.Context) *ControlImplementation {
	node, err := ciq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ControlImplementation ID from the query.
// Returns a *NotFoundError when no ControlImplementation ID was found.
func (ciq *ControlImplementationQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ciq.Limit(1).IDs(setContextOp(ctx, ciq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{controlimplementation.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ciq *ControlImplementationQuery) FirstIDX(ctx context.Context) string {
	id, err := ciq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ControlImplementation entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ControlImplementation entity is found.
// Returns a *NotFoundError when no ControlImplementation entities are found.
func (ciq *ControlImplementationQuery) Only(ctx context.Context) (*ControlImplementation, error) {
	nodes, err := ciq.Limit(2).All(setContextOp(ctx, ciq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{controlimplementation.Label}
	default:
		return nil, &NotSingularError{controlimplementation.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ciq *ControlImplementationQuery) OnlyX(ctx context.Context) *ControlImplementation {
	node, err := ciq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ControlImplementation ID in the query.
// Returns a *NotSingularError when more than one ControlImplementation ID is found.
// Returns a *NotFoundError when no entities are found.
func (ciq *ControlImplementationQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ciq.Limit(2).IDs(setContextOp(ctx, ciq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{controlimplementation.Label}
	default:
		err = &NotSingularError{controlimplementation.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ciq *ControlImplementationQuery) OnlyIDX(ctx context.Context) string {
	id, err := ciq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ControlImplementations.
func (ciq *ControlImplementationQuery) All(ctx context.Context) ([]*ControlImplementation, error) {
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryAll)
	if err := ciq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ControlImplementation, *ControlImplementationQuery]()
	return withInterceptors[[]*ControlImplementation](ctx, ciq, qr, ciq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ciq *ControlImplementationQuery) AllX(ctx context.Context) []*ControlImplementation {
	nodes, err := ciq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ControlImplementation IDs.
func (ciq *ControlImplementationQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ciq.ctx.Unique == nil && ciq.path != nil {
		ciq.Unique(true)
	}
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryIDs)
	if err = ciq.Select(controlimplementation.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ciq *ControlImplementationQuery) IDsX(ctx context.Context) []string {
	ids, err := ciq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ciq *ControlImplementationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryCount)
	if err := ciq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ciq, querierCount[*ControlImplementationQuery](), ciq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ciq *ControlImplementationQuery) CountX(ctx context.Context) int {
	count, err := ciq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ciq *ControlImplementationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryExist)
	switch _, err := ciq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ciq *ControlImplementationQuery) ExistX(ctx context.Context) bool {
	exist, err := ciq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ControlImplementationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ciq *ControlImplementationQuery) Clone() *ControlImplementationQuery {
	if ciq == nil {
		return nil
	}
	return &ControlImplementationQuery{
		config:       ciq.config,
		ctx:          ciq.ctx.Clone(),
		order:        append([]controlimplementation.OrderOption{}, ciq.order...),
		inters:       append([]Interceptor{}, ciq.inters...),
		predicates:   append([]predicate.ControlImplementation{}, ciq.predicates...),
		withControls: ciq.withControls.Clone(),
		// clone intermediate query.
		sql:       ciq.sql.Clone(),
		path:      ciq.path,
		modifiers: append([]func(*sql.Selector){}, ciq.modifiers...),
	}
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (ciq *ControlImplementationQuery) WithControls(opts ...func(*ControlQuery)) *ControlImplementationQuery {
	query := (&ControlClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ciq.withControls = query
	return ciq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ControlImplementation.Query().
//		GroupBy(controlimplementation.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (ciq *ControlImplementationQuery) GroupBy(field string, fields ...string) *ControlImplementationGroupBy {
	ciq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ControlImplementationGroupBy{build: ciq}
	grbuild.flds = &ciq.ctx.Fields
	grbuild.label = controlimplementation.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.ControlImplementation.Query().
//		Select(controlimplementation.FieldCreatedAt).
//		Scan(ctx, &v)
func (ciq *ControlImplementationQuery) Select(fields ...string) *ControlImplementationSelect {
	ciq.ctx.Fields = append(ciq.ctx.Fields, fields...)
	sbuild := &ControlImplementationSelect{ControlImplementationQuery: ciq}
	sbuild.label = controlimplementation.Label
	sbuild.flds, sbuild.scan = &ciq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ControlImplementationSelect configured with the given aggregations.
func (ciq *ControlImplementationQuery) Aggregate(fns ...AggregateFunc) *ControlImplementationSelect {
	return ciq.Select().Aggregate(fns...)
}

func (ciq *ControlImplementationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ciq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ciq); err != nil {
				return err
			}
		}
	}
	for _, f := range ciq.ctx.Fields {
		if !controlimplementation.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if ciq.path != nil {
		prev, err := ciq.path(ctx)
		if err != nil {
			return err
		}
		ciq.sql = prev
	}
	if controlimplementation.Policy == nil {
		return errors.New("generated: uninitialized controlimplementation.Policy (forgotten import generated/runtime?)")
	}
	if err := controlimplementation.Policy.EvalQuery(ctx, ciq); err != nil {
		return err
	}
	return nil
}

func (ciq *ControlImplementationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ControlImplementation, error) {
	var (
		nodes       = []*ControlImplementation{}
		_spec       = ciq.querySpec()
		loadedTypes = [1]bool{
			ciq.withControls != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ControlImplementation).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ControlImplementation{config: ciq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = ciq.schemaConfig.ControlImplementation
	ctx = internal.NewSchemaConfigContext(ctx, ciq.schemaConfig)
	if len(ciq.modifiers) > 0 {
		_spec.Modifiers = ciq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ciq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ciq.withControls; query != nil {
		if err := ciq.loadControls(ctx, query, nodes,
			func(n *ControlImplementation) { n.Edges.Controls = []*Control{} },
			func(n *ControlImplementation, e *Control) { n.Edges.Controls = append(n.Edges.Controls, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range ciq.withNamedControls {
		if err := ciq.loadControls(ctx, query, nodes,
			func(n *ControlImplementation) { n.appendNamedControls(name) },
			func(n *ControlImplementation, e *Control) { n.appendNamedControls(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range ciq.loadTotal {
		if err := ciq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ciq *ControlImplementationQuery) loadControls(ctx context.Context, query *ControlQuery, nodes []*ControlImplementation, init func(*ControlImplementation), assign func(*ControlImplementation, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*ControlImplementation)
	nids := make(map[string]map[*ControlImplementation]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(controlimplementation.ControlsTable)
		joinT.Schema(ciq.schemaConfig.ControlControlImplementations)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(controlimplementation.ControlsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(controlimplementation.ControlsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(controlimplementation.ControlsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*ControlImplementation]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "controls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (ciq *ControlImplementationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ciq.querySpec()
	_spec.Node.Schema = ciq.schemaConfig.ControlImplementation
	ctx = internal.NewSchemaConfigContext(ctx, ciq.schemaConfig)
	if len(ciq.modifiers) > 0 {
		_spec.Modifiers = ciq.modifiers
	}
	_spec.Node.Columns = ciq.ctx.Fields
	if len(ciq.ctx.Fields) > 0 {
		_spec.Unique = ciq.ctx.Unique != nil && *ciq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ciq.driver, _spec)
}

func (ciq *ControlImplementationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(controlimplementation.Table, controlimplementation.Columns, sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString))
	_spec.From = ciq.sql
	if unique := ciq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ciq.path != nil {
		_spec.Unique = true
	}
	if fields := ciq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, controlimplementation.FieldID)
		for i := range fields {
			if fields[i] != controlimplementation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ciq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ciq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ciq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ciq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ciq *ControlImplementationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ciq.driver.Dialect())
	t1 := builder.Table(controlimplementation.Table)
	columns := ciq.ctx.Fields
	if len(columns) == 0 {
		columns = controlimplementation.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ciq.sql != nil {
		selector = ciq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ciq.ctx.Unique != nil && *ciq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(ciq.schemaConfig.ControlImplementation)
	ctx = internal.NewSchemaConfigContext(ctx, ciq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range ciq.modifiers {
		m(selector)
	}
	for _, p := range ciq.predicates {
		p(selector)
	}
	for _, p := range ciq.order {
		p(selector)
	}
	if offset := ciq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ciq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ciq *ControlImplementationQuery) Modify(modifiers ...func(s *sql.Selector)) *ControlImplementationSelect {
	ciq.modifiers = append(ciq.modifiers, modifiers...)
	return ciq.Select()
}

// WithNamedControls tells the query-builder to eager-load the nodes that are connected to the "controls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (ciq *ControlImplementationQuery) WithNamedControls(name string, opts ...func(*ControlQuery)) *ControlImplementationQuery {
	query := (&ControlClient{config: ciq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if ciq.withNamedControls == nil {
		ciq.withNamedControls = make(map[string]*ControlQuery)
	}
	ciq.withNamedControls[name] = query
	return ciq
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (ciq *ControlImplementationQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ciq.ctx, ent.OpQueryIDs)
	if err := ciq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return ciq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, ciq, qr, ciq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// ControlImplementationGroupBy is the group-by builder for ControlImplementation entities.
type ControlImplementationGroupBy struct {
	selector
	build *ControlImplementationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (cigb *ControlImplementationGroupBy) Aggregate(fns ...AggregateFunc) *ControlImplementationGroupBy {
	cigb.fns = append(cigb.fns, fns...)
	return cigb
}

// Scan applies the selector query and scans the result into the given value.
func (cigb *ControlImplementationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cigb.build.ctx, ent.OpQueryGroupBy)
	if err := cigb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ControlImplementationQuery, *ControlImplementationGroupBy](ctx, cigb.build, cigb, cigb.build.inters, v)
}

func (cigb *ControlImplementationGroupBy) sqlScan(ctx context.Context, root *ControlImplementationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(cigb.fns))
	for _, fn := range cigb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*cigb.flds)+len(cigb.fns))
		for _, f := range *cigb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*cigb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cigb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ControlImplementationSelect is the builder for selecting fields of ControlImplementation entities.
type ControlImplementationSelect struct {
	*ControlImplementationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (cis *ControlImplementationSelect) Aggregate(fns ...AggregateFunc) *ControlImplementationSelect {
	cis.fns = append(cis.fns, fns...)
	return cis
}

// Scan applies the selector query and scans the result into the given value.
func (cis *ControlImplementationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, cis.ctx, ent.OpQuerySelect)
	if err := cis.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ControlImplementationQuery, *ControlImplementationSelect](ctx, cis.ControlImplementationQuery, cis, cis.inters, v)
}

func (cis *ControlImplementationSelect) sqlScan(ctx context.Context, root *ControlImplementationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(cis.fns))
	for _, fn := range cis.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*cis.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := cis.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (cis *ControlImplementationSelect) Modify(modifiers ...func(s *sql.Selector)) *ControlImplementationSelect {
	cis.modifiers = append(cis.modifiers, modifiers...)
	return cis
}
