// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/emailverificationtoken"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/passwordresettoken"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/programmembership"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/tfasetting"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"
	"github.com/theopenlane/core/internal/ent/generated/webauthn"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                              *QueryContext
	order                            []user.OrderOption
	inters                           []Interceptor
	predicates                       []predicate.User
	withPersonalAccessTokens         *PersonalAccessTokenQuery
	withTfaSettings                  *TFASettingQuery
	withSetting                      *UserSettingQuery
	withEmailVerificationTokens      *EmailVerificationTokenQuery
	withPasswordResetTokens          *PasswordResetTokenQuery
	withGroups                       *GroupQuery
	withOrganizations                *OrganizationQuery
	withWebauthns                    *WebauthnQuery
	withFiles                        *FileQuery
	withAvatarFile                   *FileQuery
	withEvents                       *EventQuery
	withActionPlans                  *ActionPlanQuery
	withSubcontrols                  *SubcontrolQuery
	withAssignerTasks                *TaskQuery
	withAssigneeTasks                *TaskQuery
	withPrograms                     *ProgramQuery
	withGroupMemberships             *GroupMembershipQuery
	withOrgMemberships               *OrgMembershipQuery
	withProgramMemberships           *ProgramMembershipQuery
	loadTotal                        []func(context.Context, []*User) error
	modifiers                        []func(*sql.Selector)
	withNamedPersonalAccessTokens    map[string]*PersonalAccessTokenQuery
	withNamedTfaSettings             map[string]*TFASettingQuery
	withNamedEmailVerificationTokens map[string]*EmailVerificationTokenQuery
	withNamedPasswordResetTokens     map[string]*PasswordResetTokenQuery
	withNamedGroups                  map[string]*GroupQuery
	withNamedOrganizations           map[string]*OrganizationQuery
	withNamedWebauthns               map[string]*WebauthnQuery
	withNamedFiles                   map[string]*FileQuery
	withNamedEvents                  map[string]*EventQuery
	withNamedActionPlans             map[string]*ActionPlanQuery
	withNamedSubcontrols             map[string]*SubcontrolQuery
	withNamedAssignerTasks           map[string]*TaskQuery
	withNamedAssigneeTasks           map[string]*TaskQuery
	withNamedPrograms                map[string]*ProgramQuery
	withNamedGroupMemberships        map[string]*GroupMembershipQuery
	withNamedOrgMemberships          map[string]*OrgMembershipQuery
	withNamedProgramMemberships      map[string]*ProgramMembershipQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (_q *UserQuery) Where(ps ...predicate.User) *UserQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *UserQuery) Limit(limit int) *UserQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *UserQuery) Offset(offset int) *UserQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *UserQuery) Unique(unique bool) *UserQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *UserQuery) Order(o ...user.OrderOption) *UserQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryPersonalAccessTokens chains the current query on the "personal_access_tokens" edge.
func (_q *UserQuery) QueryPersonalAccessTokens() *PersonalAccessTokenQuery {
	query := (&PersonalAccessTokenClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(personalaccesstoken.Table, personalaccesstoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PersonalAccessTokensTable, user.PersonalAccessTokensColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.PersonalAccessToken
		step.Edge.Schema = schemaConfig.PersonalAccessToken
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTfaSettings chains the current query on the "tfa_settings" edge.
func (_q *UserQuery) QueryTfaSettings() *TFASettingQuery {
	query := (&TFASettingClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(tfasetting.Table, tfasetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TfaSettingsTable, user.TfaSettingsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.TFASetting
		step.Edge.Schema = schemaConfig.TFASetting
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySetting chains the current query on the "setting" edge.
func (_q *UserQuery) QuerySetting() *UserSettingQuery {
	query := (&UserSettingClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(usersetting.Table, usersetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.SettingTable, user.SettingColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.UserSetting
		step.Edge.Schema = schemaConfig.UserSetting
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEmailVerificationTokens chains the current query on the "email_verification_tokens" edge.
func (_q *UserQuery) QueryEmailVerificationTokens() *EmailVerificationTokenQuery {
	query := (&EmailVerificationTokenClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(emailverificationtoken.Table, emailverificationtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EmailVerificationTokensTable, user.EmailVerificationTokensColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.EmailVerificationToken
		step.Edge.Schema = schemaConfig.EmailVerificationToken
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPasswordResetTokens chains the current query on the "password_reset_tokens" edge.
func (_q *UserQuery) QueryPasswordResetTokens() *PasswordResetTokenQuery {
	query := (&PasswordResetTokenClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(passwordresettoken.Table, passwordresettoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PasswordResetTokensTable, user.PasswordResetTokensColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.PasswordResetToken
		step.Edge.Schema = schemaConfig.PasswordResetToken
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroups chains the current query on the "groups" edge.
func (_q *UserQuery) QueryGroups() *GroupQuery {
	query := (&GroupClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.GroupsTable, user.GroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupMembership
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganizations chains the current query on the "organizations" edge.
func (_q *UserQuery) QueryOrganizations() *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.OrganizationsTable, user.OrganizationsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgMembership
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWebauthns chains the current query on the "webauthns" edge.
func (_q *UserQuery) QueryWebauthns() *WebauthnQuery {
	query := (&WebauthnClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(webauthn.Table, webauthn.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.WebauthnsTable, user.WebauthnsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Webauthn
		step.Edge.Schema = schemaConfig.Webauthn
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFiles chains the current query on the "files" edge.
func (_q *UserQuery) QueryFiles() *FileQuery {
	query := (&FileClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.FilesTable, user.FilesPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.UserFiles
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAvatarFile chains the current query on the "avatar_file" edge.
func (_q *UserQuery) QueryAvatarFile() *FileQuery {
	query := (&FileClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, user.AvatarFileTable, user.AvatarFileColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.User
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (_q *UserQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.EventsTable, user.EventsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.UserEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActionPlans chains the current query on the "action_plans" edge.
func (_q *UserQuery) QueryActionPlans() *ActionPlanQuery {
	query := (&ActionPlanClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(actionplan.Table, actionplan.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ActionPlansTable, user.ActionPlansColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ActionPlan
		step.Edge.Schema = schemaConfig.ActionPlan
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubcontrols chains the current query on the "subcontrols" edge.
func (_q *UserQuery) QuerySubcontrols() *SubcontrolQuery {
	query := (&SubcontrolClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(subcontrol.Table, subcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SubcontrolsTable, user.SubcontrolsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.Subcontrol
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignerTasks chains the current query on the "assigner_tasks" edge.
func (_q *UserQuery) QueryAssignerTasks() *TaskQuery {
	query := (&TaskClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AssignerTasksTable, user.AssignerTasksColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.Task
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssigneeTasks chains the current query on the "assignee_tasks" edge.
func (_q *UserQuery) QueryAssigneeTasks() *TaskQuery {
	query := (&TaskClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.AssigneeTasksTable, user.AssigneeTasksColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.Task
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrograms chains the current query on the "programs" edge.
func (_q *UserQuery) QueryPrograms() *ProgramQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.ProgramsTable, user.ProgramsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramMembership
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroupMemberships chains the current query on the "group_memberships" edge.
func (_q *UserQuery) QueryGroupMemberships() *GroupMembershipQuery {
	query := (&GroupMembershipClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(groupmembership.Table, groupmembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.GroupMembershipsTable, user.GroupMembershipsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.GroupMembership
		step.Edge.Schema = schemaConfig.GroupMembership
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgMemberships chains the current query on the "org_memberships" edge.
func (_q *UserQuery) QueryOrgMemberships() *OrgMembershipQuery {
	query := (&OrgMembershipClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(orgmembership.Table, orgmembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.OrgMembershipsTable, user.OrgMembershipsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.OrgMembership
		step.Edge.Schema = schemaConfig.OrgMembership
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgramMemberships chains the current query on the "program_memberships" edge.
func (_q *UserQuery) QueryProgramMemberships() *ProgramMembershipQuery {
	query := (&ProgramMembershipClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(programmembership.Table, programmembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.ProgramMembershipsTable, user.ProgramMembershipsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ProgramMembership
		step.Edge.Schema = schemaConfig.ProgramMembership
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (_q *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *UserQuery) FirstX(ctx context.Context) *User {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (_q *UserQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *UserQuery) FirstIDX(ctx context.Context) string {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (_q *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *UserQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *UserQuery) OnlyIDX(ctx context.Context) string {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (_q *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (_q *UserQuery) IDs(ctx context.Context) (ids []string, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *UserQuery) IDsX(ctx context.Context) []string {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*UserQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *UserQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *UserQuery) Clone() *UserQuery {
	if _q == nil {
		return nil
	}
	return &UserQuery{
		config:                      _q.config,
		ctx:                         _q.ctx.Clone(),
		order:                       append([]user.OrderOption{}, _q.order...),
		inters:                      append([]Interceptor{}, _q.inters...),
		predicates:                  append([]predicate.User{}, _q.predicates...),
		withPersonalAccessTokens:    _q.withPersonalAccessTokens.Clone(),
		withTfaSettings:             _q.withTfaSettings.Clone(),
		withSetting:                 _q.withSetting.Clone(),
		withEmailVerificationTokens: _q.withEmailVerificationTokens.Clone(),
		withPasswordResetTokens:     _q.withPasswordResetTokens.Clone(),
		withGroups:                  _q.withGroups.Clone(),
		withOrganizations:           _q.withOrganizations.Clone(),
		withWebauthns:               _q.withWebauthns.Clone(),
		withFiles:                   _q.withFiles.Clone(),
		withAvatarFile:              _q.withAvatarFile.Clone(),
		withEvents:                  _q.withEvents.Clone(),
		withActionPlans:             _q.withActionPlans.Clone(),
		withSubcontrols:             _q.withSubcontrols.Clone(),
		withAssignerTasks:           _q.withAssignerTasks.Clone(),
		withAssigneeTasks:           _q.withAssigneeTasks.Clone(),
		withPrograms:                _q.withPrograms.Clone(),
		withGroupMemberships:        _q.withGroupMemberships.Clone(),
		withOrgMemberships:          _q.withOrgMemberships.Clone(),
		withProgramMemberships:      _q.withProgramMemberships.Clone(),
		// clone intermediate query.
		sql:       _q.sql.Clone(),
		path:      _q.path,
		modifiers: append([]func(*sql.Selector){}, _q.modifiers...),
	}
}

// WithPersonalAccessTokens tells the query-builder to eager-load the nodes that are connected to
// the "personal_access_tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithPersonalAccessTokens(opts ...func(*PersonalAccessTokenQuery)) *UserQuery {
	query := (&PersonalAccessTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPersonalAccessTokens = query
	return _q
}

// WithTfaSettings tells the query-builder to eager-load the nodes that are connected to
// the "tfa_settings" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithTfaSettings(opts ...func(*TFASettingQuery)) *UserQuery {
	query := (&TFASettingClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTfaSettings = query
	return _q
}

// WithSetting tells the query-builder to eager-load the nodes that are connected to
// the "setting" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithSetting(opts ...func(*UserSettingQuery)) *UserQuery {
	query := (&UserSettingClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSetting = query
	return _q
}

// WithEmailVerificationTokens tells the query-builder to eager-load the nodes that are connected to
// the "email_verification_tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithEmailVerificationTokens(opts ...func(*EmailVerificationTokenQuery)) *UserQuery {
	query := (&EmailVerificationTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEmailVerificationTokens = query
	return _q
}

// WithPasswordResetTokens tells the query-builder to eager-load the nodes that are connected to
// the "password_reset_tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithPasswordResetTokens(opts ...func(*PasswordResetTokenQuery)) *UserQuery {
	query := (&PasswordResetTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPasswordResetTokens = query
	return _q
}

// WithGroups tells the query-builder to eager-load the nodes that are connected to
// the "groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithGroups(opts ...func(*GroupQuery)) *UserQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withGroups = query
	return _q
}

// WithOrganizations tells the query-builder to eager-load the nodes that are connected to
// the "organizations" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithOrganizations(opts ...func(*OrganizationQuery)) *UserQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOrganizations = query
	return _q
}

// WithWebauthns tells the query-builder to eager-load the nodes that are connected to
// the "webauthns" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithWebauthns(opts ...func(*WebauthnQuery)) *UserQuery {
	query := (&WebauthnClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withWebauthns = query
	return _q
}

// WithFiles tells the query-builder to eager-load the nodes that are connected to
// the "files" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithFiles(opts ...func(*FileQuery)) *UserQuery {
	query := (&FileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withFiles = query
	return _q
}

// WithAvatarFile tells the query-builder to eager-load the nodes that are connected to
// the "avatar_file" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithAvatarFile(opts ...func(*FileQuery)) *UserQuery {
	query := (&FileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAvatarFile = query
	return _q
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithEvents(opts ...func(*EventQuery)) *UserQuery {
	query := (&EventClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEvents = query
	return _q
}

// WithActionPlans tells the query-builder to eager-load the nodes that are connected to
// the "action_plans" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithActionPlans(opts ...func(*ActionPlanQuery)) *UserQuery {
	query := (&ActionPlanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withActionPlans = query
	return _q
}

// WithSubcontrols tells the query-builder to eager-load the nodes that are connected to
// the "subcontrols" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithSubcontrols(opts ...func(*SubcontrolQuery)) *UserQuery {
	query := (&SubcontrolClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSubcontrols = query
	return _q
}

// WithAssignerTasks tells the query-builder to eager-load the nodes that are connected to
// the "assigner_tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithAssignerTasks(opts ...func(*TaskQuery)) *UserQuery {
	query := (&TaskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAssignerTasks = query
	return _q
}

// WithAssigneeTasks tells the query-builder to eager-load the nodes that are connected to
// the "assignee_tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithAssigneeTasks(opts ...func(*TaskQuery)) *UserQuery {
	query := (&TaskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withAssigneeTasks = query
	return _q
}

// WithPrograms tells the query-builder to eager-load the nodes that are connected to
// the "programs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithPrograms(opts ...func(*ProgramQuery)) *UserQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withPrograms = query
	return _q
}

// WithGroupMemberships tells the query-builder to eager-load the nodes that are connected to
// the "group_memberships" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithGroupMemberships(opts ...func(*GroupMembershipQuery)) *UserQuery {
	query := (&GroupMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withGroupMemberships = query
	return _q
}

// WithOrgMemberships tells the query-builder to eager-load the nodes that are connected to
// the "org_memberships" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithOrgMemberships(opts ...func(*OrgMembershipQuery)) *UserQuery {
	query := (&OrgMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOrgMemberships = query
	return _q
}

// WithProgramMemberships tells the query-builder to eager-load the nodes that are connected to
// the "program_memberships" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithProgramMemberships(opts ...func(*ProgramMembershipQuery)) *UserQuery {
	query := (&ProgramMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProgramMemberships = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (_q *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldCreatedAt).
//		Scan(ctx, &v)
func (_q *UserQuery) Select(fields ...string) *UserSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: _q}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (_q *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	if user.Policy == nil {
		return errors.New("generated: uninitialized user.Policy (forgotten import generated/runtime?)")
	}
	if err := user.Policy.EvalQuery(ctx, _q); err != nil {
		return err
	}
	return nil
}

func (_q *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = _q.querySpec()
		loadedTypes = [19]bool{
			_q.withPersonalAccessTokens != nil,
			_q.withTfaSettings != nil,
			_q.withSetting != nil,
			_q.withEmailVerificationTokens != nil,
			_q.withPasswordResetTokens != nil,
			_q.withGroups != nil,
			_q.withOrganizations != nil,
			_q.withWebauthns != nil,
			_q.withFiles != nil,
			_q.withAvatarFile != nil,
			_q.withEvents != nil,
			_q.withActionPlans != nil,
			_q.withSubcontrols != nil,
			_q.withAssignerTasks != nil,
			_q.withAssigneeTasks != nil,
			_q.withPrograms != nil,
			_q.withGroupMemberships != nil,
			_q.withOrgMemberships != nil,
			_q.withProgramMemberships != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = _q.schemaConfig.User
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withPersonalAccessTokens; query != nil {
		if err := _q.loadPersonalAccessTokens(ctx, query, nodes,
			func(n *User) { n.Edges.PersonalAccessTokens = []*PersonalAccessToken{} },
			func(n *User, e *PersonalAccessToken) {
				n.Edges.PersonalAccessTokens = append(n.Edges.PersonalAccessTokens, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withTfaSettings; query != nil {
		if err := _q.loadTfaSettings(ctx, query, nodes,
			func(n *User) { n.Edges.TfaSettings = []*TFASetting{} },
			func(n *User, e *TFASetting) { n.Edges.TfaSettings = append(n.Edges.TfaSettings, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSetting; query != nil {
		if err := _q.loadSetting(ctx, query, nodes, nil,
			func(n *User, e *UserSetting) { n.Edges.Setting = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEmailVerificationTokens; query != nil {
		if err := _q.loadEmailVerificationTokens(ctx, query, nodes,
			func(n *User) { n.Edges.EmailVerificationTokens = []*EmailVerificationToken{} },
			func(n *User, e *EmailVerificationToken) {
				n.Edges.EmailVerificationTokens = append(n.Edges.EmailVerificationTokens, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withPasswordResetTokens; query != nil {
		if err := _q.loadPasswordResetTokens(ctx, query, nodes,
			func(n *User) { n.Edges.PasswordResetTokens = []*PasswordResetToken{} },
			func(n *User, e *PasswordResetToken) {
				n.Edges.PasswordResetTokens = append(n.Edges.PasswordResetTokens, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withGroups; query != nil {
		if err := _q.loadGroups(ctx, query, nodes,
			func(n *User) { n.Edges.Groups = []*Group{} },
			func(n *User, e *Group) { n.Edges.Groups = append(n.Edges.Groups, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withOrganizations; query != nil {
		if err := _q.loadOrganizations(ctx, query, nodes,
			func(n *User) { n.Edges.Organizations = []*Organization{} },
			func(n *User, e *Organization) { n.Edges.Organizations = append(n.Edges.Organizations, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withWebauthns; query != nil {
		if err := _q.loadWebauthns(ctx, query, nodes,
			func(n *User) { n.Edges.Webauthns = []*Webauthn{} },
			func(n *User, e *Webauthn) { n.Edges.Webauthns = append(n.Edges.Webauthns, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withFiles; query != nil {
		if err := _q.loadFiles(ctx, query, nodes,
			func(n *User) { n.Edges.Files = []*File{} },
			func(n *User, e *File) { n.Edges.Files = append(n.Edges.Files, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withAvatarFile; query != nil {
		if err := _q.loadAvatarFile(ctx, query, nodes, nil,
			func(n *User, e *File) { n.Edges.AvatarFile = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEvents; query != nil {
		if err := _q.loadEvents(ctx, query, nodes,
			func(n *User) { n.Edges.Events = []*Event{} },
			func(n *User, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withActionPlans; query != nil {
		if err := _q.loadActionPlans(ctx, query, nodes,
			func(n *User) { n.Edges.ActionPlans = []*ActionPlan{} },
			func(n *User, e *ActionPlan) { n.Edges.ActionPlans = append(n.Edges.ActionPlans, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withSubcontrols; query != nil {
		if err := _q.loadSubcontrols(ctx, query, nodes,
			func(n *User) { n.Edges.Subcontrols = []*Subcontrol{} },
			func(n *User, e *Subcontrol) { n.Edges.Subcontrols = append(n.Edges.Subcontrols, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withAssignerTasks; query != nil {
		if err := _q.loadAssignerTasks(ctx, query, nodes,
			func(n *User) { n.Edges.AssignerTasks = []*Task{} },
			func(n *User, e *Task) { n.Edges.AssignerTasks = append(n.Edges.AssignerTasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withAssigneeTasks; query != nil {
		if err := _q.loadAssigneeTasks(ctx, query, nodes,
			func(n *User) { n.Edges.AssigneeTasks = []*Task{} },
			func(n *User, e *Task) { n.Edges.AssigneeTasks = append(n.Edges.AssigneeTasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withPrograms; query != nil {
		if err := _q.loadPrograms(ctx, query, nodes,
			func(n *User) { n.Edges.Programs = []*Program{} },
			func(n *User, e *Program) { n.Edges.Programs = append(n.Edges.Programs, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withGroupMemberships; query != nil {
		if err := _q.loadGroupMemberships(ctx, query, nodes,
			func(n *User) { n.Edges.GroupMemberships = []*GroupMembership{} },
			func(n *User, e *GroupMembership) { n.Edges.GroupMemberships = append(n.Edges.GroupMemberships, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withOrgMemberships; query != nil {
		if err := _q.loadOrgMemberships(ctx, query, nodes,
			func(n *User) { n.Edges.OrgMemberships = []*OrgMembership{} },
			func(n *User, e *OrgMembership) { n.Edges.OrgMemberships = append(n.Edges.OrgMemberships, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProgramMemberships; query != nil {
		if err := _q.loadProgramMemberships(ctx, query, nodes,
			func(n *User) { n.Edges.ProgramMemberships = []*ProgramMembership{} },
			func(n *User, e *ProgramMembership) {
				n.Edges.ProgramMemberships = append(n.Edges.ProgramMemberships, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedPersonalAccessTokens {
		if err := _q.loadPersonalAccessTokens(ctx, query, nodes,
			func(n *User) { n.appendNamedPersonalAccessTokens(name) },
			func(n *User, e *PersonalAccessToken) { n.appendNamedPersonalAccessTokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedTfaSettings {
		if err := _q.loadTfaSettings(ctx, query, nodes,
			func(n *User) { n.appendNamedTfaSettings(name) },
			func(n *User, e *TFASetting) { n.appendNamedTfaSettings(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEmailVerificationTokens {
		if err := _q.loadEmailVerificationTokens(ctx, query, nodes,
			func(n *User) { n.appendNamedEmailVerificationTokens(name) },
			func(n *User, e *EmailVerificationToken) { n.appendNamedEmailVerificationTokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedPasswordResetTokens {
		if err := _q.loadPasswordResetTokens(ctx, query, nodes,
			func(n *User) { n.appendNamedPasswordResetTokens(name) },
			func(n *User, e *PasswordResetToken) { n.appendNamedPasswordResetTokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedGroups {
		if err := _q.loadGroups(ctx, query, nodes,
			func(n *User) { n.appendNamedGroups(name) },
			func(n *User, e *Group) { n.appendNamedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedOrganizations {
		if err := _q.loadOrganizations(ctx, query, nodes,
			func(n *User) { n.appendNamedOrganizations(name) },
			func(n *User, e *Organization) { n.appendNamedOrganizations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedWebauthns {
		if err := _q.loadWebauthns(ctx, query, nodes,
			func(n *User) { n.appendNamedWebauthns(name) },
			func(n *User, e *Webauthn) { n.appendNamedWebauthns(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedFiles {
		if err := _q.loadFiles(ctx, query, nodes,
			func(n *User) { n.appendNamedFiles(name) },
			func(n *User, e *File) { n.appendNamedFiles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEvents {
		if err := _q.loadEvents(ctx, query, nodes,
			func(n *User) { n.appendNamedEvents(name) },
			func(n *User, e *Event) { n.appendNamedEvents(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedActionPlans {
		if err := _q.loadActionPlans(ctx, query, nodes,
			func(n *User) { n.appendNamedActionPlans(name) },
			func(n *User, e *ActionPlan) { n.appendNamedActionPlans(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedSubcontrols {
		if err := _q.loadSubcontrols(ctx, query, nodes,
			func(n *User) { n.appendNamedSubcontrols(name) },
			func(n *User, e *Subcontrol) { n.appendNamedSubcontrols(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedAssignerTasks {
		if err := _q.loadAssignerTasks(ctx, query, nodes,
			func(n *User) { n.appendNamedAssignerTasks(name) },
			func(n *User, e *Task) { n.appendNamedAssignerTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedAssigneeTasks {
		if err := _q.loadAssigneeTasks(ctx, query, nodes,
			func(n *User) { n.appendNamedAssigneeTasks(name) },
			func(n *User, e *Task) { n.appendNamedAssigneeTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedPrograms {
		if err := _q.loadPrograms(ctx, query, nodes,
			func(n *User) { n.appendNamedPrograms(name) },
			func(n *User, e *Program) { n.appendNamedPrograms(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedGroupMemberships {
		if err := _q.loadGroupMemberships(ctx, query, nodes,
			func(n *User) { n.appendNamedGroupMemberships(name) },
			func(n *User, e *GroupMembership) { n.appendNamedGroupMemberships(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedOrgMemberships {
		if err := _q.loadOrgMemberships(ctx, query, nodes,
			func(n *User) { n.appendNamedOrgMemberships(name) },
			func(n *User, e *OrgMembership) { n.appendNamedOrgMemberships(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedProgramMemberships {
		if err := _q.loadProgramMemberships(ctx, query, nodes,
			func(n *User) { n.appendNamedProgramMemberships(name) },
			func(n *User, e *ProgramMembership) { n.appendNamedProgramMemberships(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range _q.loadTotal {
		if err := _q.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *UserQuery) loadPersonalAccessTokens(ctx context.Context, query *PersonalAccessTokenQuery, nodes []*User, init func(*User), assign func(*User, *PersonalAccessToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(personalaccesstoken.FieldOwnerID)
	}
	query.Where(predicate.PersonalAccessToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.PersonalAccessTokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadTfaSettings(ctx context.Context, query *TFASettingQuery, nodes []*User, init func(*User), assign func(*User, *TFASetting)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(tfasetting.FieldOwnerID)
	}
	query.Where(predicate.TFASetting(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.TfaSettingsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadSetting(ctx context.Context, query *UserSettingQuery, nodes []*User, init func(*User), assign func(*User, *UserSetting)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(usersetting.FieldUserID)
	}
	query.Where(predicate.UserSetting(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.SettingColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadEmailVerificationTokens(ctx context.Context, query *EmailVerificationTokenQuery, nodes []*User, init func(*User), assign func(*User, *EmailVerificationToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(emailverificationtoken.FieldOwnerID)
	}
	query.Where(predicate.EmailVerificationToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.EmailVerificationTokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadPasswordResetTokens(ctx context.Context, query *PasswordResetTokenQuery, nodes []*User, init func(*User), assign func(*User, *PasswordResetToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(passwordresettoken.FieldOwnerID)
	}
	query.Where(predicate.PasswordResetToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.PasswordResetTokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadGroups(ctx context.Context, query *GroupQuery, nodes []*User, init func(*User), assign func(*User, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*User)
	nids := make(map[string]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.GroupsTable)
		joinT.Schema(_q.schemaConfig.GroupMembership)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(user.GroupsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.GroupsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.GroupsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *UserQuery) loadOrganizations(ctx context.Context, query *OrganizationQuery, nodes []*User, init func(*User), assign func(*User, *Organization)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*User)
	nids := make(map[string]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.OrganizationsTable)
		joinT.Schema(_q.schemaConfig.OrgMembership)
		s.Join(joinT).On(s.C(organization.FieldID), joinT.C(user.OrganizationsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.OrganizationsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.OrganizationsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Organization](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "organizations" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *UserQuery) loadWebauthns(ctx context.Context, query *WebauthnQuery, nodes []*User, init func(*User), assign func(*User, *Webauthn)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(webauthn.FieldOwnerID)
	}
	query.Where(predicate.Webauthn(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.WebauthnsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadFiles(ctx context.Context, query *FileQuery, nodes []*User, init func(*User), assign func(*User, *File)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*User)
	nids := make(map[string]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.FilesTable)
		joinT.Schema(_q.schemaConfig.UserFiles)
		s.Join(joinT).On(s.C(file.FieldID), joinT.C(user.FilesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.FilesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.FilesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*File](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "files" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *UserQuery) loadAvatarFile(ctx context.Context, query *FileQuery, nodes []*User, init func(*User), assign func(*User, *File)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*User)
	for i := range nodes {
		if nodes[i].AvatarLocalFileID == nil {
			continue
		}
		fk := *nodes[i].AvatarLocalFileID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(file.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "avatar_local_file_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *UserQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*User, init func(*User), assign func(*User, *Event)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*User)
	nids := make(map[string]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.EventsTable)
		joinT.Schema(_q.schemaConfig.UserEvents)
		s.Join(joinT).On(s.C(event.FieldID), joinT.C(user.EventsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.EventsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.EventsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Event](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "events" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *UserQuery) loadActionPlans(ctx context.Context, query *ActionPlanQuery, nodes []*User, init func(*User), assign func(*User, *ActionPlan)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.ActionPlan(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ActionPlansColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_action_plans
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_action_plans" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_action_plans" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadSubcontrols(ctx context.Context, query *SubcontrolQuery, nodes []*User, init func(*User), assign func(*User, *Subcontrol)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Subcontrol(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.SubcontrolsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_subcontrols
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_subcontrols" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_subcontrols" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadAssignerTasks(ctx context.Context, query *TaskQuery, nodes []*User, init func(*User), assign func(*User, *Task)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(task.FieldAssignerID)
	}
	query.Where(predicate.Task(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.AssignerTasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AssignerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "assigner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadAssigneeTasks(ctx context.Context, query *TaskQuery, nodes []*User, init func(*User), assign func(*User, *Task)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(task.FieldAssigneeID)
	}
	query.Where(predicate.Task(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.AssigneeTasksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AssigneeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "assignee_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadPrograms(ctx context.Context, query *ProgramQuery, nodes []*User, init func(*User), assign func(*User, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*User)
	nids := make(map[string]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.ProgramsTable)
		joinT.Schema(_q.schemaConfig.ProgramMembership)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(user.ProgramsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.ProgramsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.ProgramsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "programs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *UserQuery) loadGroupMemberships(ctx context.Context, query *GroupMembershipQuery, nodes []*User, init func(*User), assign func(*User, *GroupMembership)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(groupmembership.FieldUserID)
	}
	query.Where(predicate.GroupMembership(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.GroupMembershipsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadOrgMemberships(ctx context.Context, query *OrgMembershipQuery, nodes []*User, init func(*User), assign func(*User, *OrgMembership)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgmembership.FieldUserID)
	}
	query.Where(predicate.OrgMembership(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.OrgMembershipsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *UserQuery) loadProgramMemberships(ctx context.Context, query *ProgramMembershipQuery, nodes []*User, init func(*User), assign func(*User, *ProgramMembership)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(programmembership.FieldUserID)
	}
	query.Where(predicate.ProgramMembership(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ProgramMembershipsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Schema = _q.schemaConfig.User
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if _q.withAvatarFile != nil {
			_spec.Node.AddColumnOnce(user.FieldAvatarLocalFileID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(_q.schemaConfig.User)
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_q *UserQuery) Modify(modifiers ...func(s *sql.Selector)) *UserSelect {
	_q.modifiers = append(_q.modifiers, modifiers...)
	return _q.Select()
}

// WithNamedPersonalAccessTokens tells the query-builder to eager-load the nodes that are connected to the "personal_access_tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedPersonalAccessTokens(name string, opts ...func(*PersonalAccessTokenQuery)) *UserQuery {
	query := (&PersonalAccessTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedPersonalAccessTokens == nil {
		_q.withNamedPersonalAccessTokens = make(map[string]*PersonalAccessTokenQuery)
	}
	_q.withNamedPersonalAccessTokens[name] = query
	return _q
}

// WithNamedTfaSettings tells the query-builder to eager-load the nodes that are connected to the "tfa_settings"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedTfaSettings(name string, opts ...func(*TFASettingQuery)) *UserQuery {
	query := (&TFASettingClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedTfaSettings == nil {
		_q.withNamedTfaSettings = make(map[string]*TFASettingQuery)
	}
	_q.withNamedTfaSettings[name] = query
	return _q
}

// WithNamedEmailVerificationTokens tells the query-builder to eager-load the nodes that are connected to the "email_verification_tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedEmailVerificationTokens(name string, opts ...func(*EmailVerificationTokenQuery)) *UserQuery {
	query := (&EmailVerificationTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEmailVerificationTokens == nil {
		_q.withNamedEmailVerificationTokens = make(map[string]*EmailVerificationTokenQuery)
	}
	_q.withNamedEmailVerificationTokens[name] = query
	return _q
}

// WithNamedPasswordResetTokens tells the query-builder to eager-load the nodes that are connected to the "password_reset_tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedPasswordResetTokens(name string, opts ...func(*PasswordResetTokenQuery)) *UserQuery {
	query := (&PasswordResetTokenClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedPasswordResetTokens == nil {
		_q.withNamedPasswordResetTokens = make(map[string]*PasswordResetTokenQuery)
	}
	_q.withNamedPasswordResetTokens[name] = query
	return _q
}

// WithNamedGroups tells the query-builder to eager-load the nodes that are connected to the "groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedGroups(name string, opts ...func(*GroupQuery)) *UserQuery {
	query := (&GroupClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedGroups == nil {
		_q.withNamedGroups = make(map[string]*GroupQuery)
	}
	_q.withNamedGroups[name] = query
	return _q
}

// WithNamedOrganizations tells the query-builder to eager-load the nodes that are connected to the "organizations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedOrganizations(name string, opts ...func(*OrganizationQuery)) *UserQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedOrganizations == nil {
		_q.withNamedOrganizations = make(map[string]*OrganizationQuery)
	}
	_q.withNamedOrganizations[name] = query
	return _q
}

// WithNamedWebauthns tells the query-builder to eager-load the nodes that are connected to the "webauthns"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedWebauthns(name string, opts ...func(*WebauthnQuery)) *UserQuery {
	query := (&WebauthnClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedWebauthns == nil {
		_q.withNamedWebauthns = make(map[string]*WebauthnQuery)
	}
	_q.withNamedWebauthns[name] = query
	return _q
}

// WithNamedFiles tells the query-builder to eager-load the nodes that are connected to the "files"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedFiles(name string, opts ...func(*FileQuery)) *UserQuery {
	query := (&FileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedFiles == nil {
		_q.withNamedFiles = make(map[string]*FileQuery)
	}
	_q.withNamedFiles[name] = query
	return _q
}

// WithNamedEvents tells the query-builder to eager-load the nodes that are connected to the "events"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedEvents(name string, opts ...func(*EventQuery)) *UserQuery {
	query := (&EventClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEvents == nil {
		_q.withNamedEvents = make(map[string]*EventQuery)
	}
	_q.withNamedEvents[name] = query
	return _q
}

// WithNamedActionPlans tells the query-builder to eager-load the nodes that are connected to the "action_plans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedActionPlans(name string, opts ...func(*ActionPlanQuery)) *UserQuery {
	query := (&ActionPlanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedActionPlans == nil {
		_q.withNamedActionPlans = make(map[string]*ActionPlanQuery)
	}
	_q.withNamedActionPlans[name] = query
	return _q
}

// WithNamedSubcontrols tells the query-builder to eager-load the nodes that are connected to the "subcontrols"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedSubcontrols(name string, opts ...func(*SubcontrolQuery)) *UserQuery {
	query := (&SubcontrolClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedSubcontrols == nil {
		_q.withNamedSubcontrols = make(map[string]*SubcontrolQuery)
	}
	_q.withNamedSubcontrols[name] = query
	return _q
}

// WithNamedAssignerTasks tells the query-builder to eager-load the nodes that are connected to the "assigner_tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedAssignerTasks(name string, opts ...func(*TaskQuery)) *UserQuery {
	query := (&TaskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedAssignerTasks == nil {
		_q.withNamedAssignerTasks = make(map[string]*TaskQuery)
	}
	_q.withNamedAssignerTasks[name] = query
	return _q
}

// WithNamedAssigneeTasks tells the query-builder to eager-load the nodes that are connected to the "assignee_tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedAssigneeTasks(name string, opts ...func(*TaskQuery)) *UserQuery {
	query := (&TaskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedAssigneeTasks == nil {
		_q.withNamedAssigneeTasks = make(map[string]*TaskQuery)
	}
	_q.withNamedAssigneeTasks[name] = query
	return _q
}

// WithNamedPrograms tells the query-builder to eager-load the nodes that are connected to the "programs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedPrograms(name string, opts ...func(*ProgramQuery)) *UserQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedPrograms == nil {
		_q.withNamedPrograms = make(map[string]*ProgramQuery)
	}
	_q.withNamedPrograms[name] = query
	return _q
}

// WithNamedGroupMemberships tells the query-builder to eager-load the nodes that are connected to the "group_memberships"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedGroupMemberships(name string, opts ...func(*GroupMembershipQuery)) *UserQuery {
	query := (&GroupMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedGroupMemberships == nil {
		_q.withNamedGroupMemberships = make(map[string]*GroupMembershipQuery)
	}
	_q.withNamedGroupMemberships[name] = query
	return _q
}

// WithNamedOrgMemberships tells the query-builder to eager-load the nodes that are connected to the "org_memberships"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedOrgMemberships(name string, opts ...func(*OrgMembershipQuery)) *UserQuery {
	query := (&OrgMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedOrgMemberships == nil {
		_q.withNamedOrgMemberships = make(map[string]*OrgMembershipQuery)
	}
	_q.withNamedOrgMemberships[name] = query
	return _q
}

// WithNamedProgramMemberships tells the query-builder to eager-load the nodes that are connected to the "program_memberships"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *UserQuery) WithNamedProgramMemberships(name string, opts ...func(*ProgramMembershipQuery)) *UserQuery {
	query := (&ProgramMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedProgramMemberships == nil {
		_q.withNamedProgramMemberships = make(map[string]*ProgramMembershipQuery)
	}
	_q.withNamedProgramMemberships[name] = query
	return _q
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (uq *UserQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryIDs)
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return uq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, uq, qr, uq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, _s.UserQuery, _s, _s.inters, v)
}

func (_s *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_s *UserSelect) Modify(modifiers ...func(s *sql.Selector)) *UserSelect {
	_s.modifiers = append(_s.modifiers, modifiers...)
	return _s
}
