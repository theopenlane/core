// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/contacthistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ContactHistoryUpdate is the builder for updating ContactHistory entities.
type ContactHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ContactHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ContactHistoryUpdate builder.
func (chu *ContactHistoryUpdate) Where(ps ...predicate.ContactHistory) *ContactHistoryUpdate {
	chu.mutation.Where(ps...)
	return chu
}

// SetUpdatedAt sets the "updated_at" field.
func (chu *ContactHistoryUpdate) SetUpdatedAt(t time.Time) *ContactHistoryUpdate {
	chu.mutation.SetUpdatedAt(t)
	return chu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (chu *ContactHistoryUpdate) ClearUpdatedAt() *ContactHistoryUpdate {
	chu.mutation.ClearUpdatedAt()
	return chu
}

// SetUpdatedByID sets the "updated_by_id" field.
func (chu *ContactHistoryUpdate) SetUpdatedByID(s string) *ContactHistoryUpdate {
	chu.mutation.SetUpdatedByID(s)
	return chu
}

// SetNillableUpdatedByID sets the "updated_by_id" field if the given value is not nil.
func (chu *ContactHistoryUpdate) SetNillableUpdatedByID(s *string) *ContactHistoryUpdate {
	if s != nil {
		chu.SetUpdatedByID(*s)
	}
	return chu
}

// ClearUpdatedByID clears the value of the "updated_by_id" field.
func (chu *ContactHistoryUpdate) ClearUpdatedByID() *ContactHistoryUpdate {
	chu.mutation.ClearUpdatedByID()
	return chu
}

// SetUpdatedByUserID sets the "updated_by_user_id" field.
func (chu *ContactHistoryUpdate) SetUpdatedByUserID(s string) *ContactHistoryUpdate {
	chu.mutation.SetUpdatedByUserID(s)
	return chu
}

// SetNillableUpdatedByUserID sets the "updated_by_user_id" field if the given value is not nil.
func (chu *ContactHistoryUpdate) SetNillableUpdatedByUserID(s *string) *ContactHistoryUpdate {
	if s != nil {
		chu.SetUpdatedByUserID(*s)
	}
	return chu
}

// ClearUpdatedByUserID clears the value of the "updated_by_user_id" field.
func (chu *ContactHistoryUpdate) ClearUpdatedByUserID() *ContactHistoryUpdate {
	chu.mutation.ClearUpdatedByUserID()
	return chu
}

// SetUpdatedByServiceID sets the "updated_by_service_id" field.
func (chu *ContactHistoryUpdate) SetUpdatedByServiceID(s string) *ContactHistoryUpdate {
	chu.mutation.SetUpdatedByServiceID(s)
	return chu
}

// SetNillableUpdatedByServiceID sets the "updated_by_service_id" field if the given value is not nil.
func (chu *ContactHistoryUpdate) SetNillableUpdatedByServiceID(s *string) *ContactHistoryUpdate {
	if s != nil {
		chu.SetUpdatedByServiceID(*s)
	}
	return chu
}

// ClearUpdatedByServiceID clears the value of the "updated_by_service_id" field.
func (chu *ContactHistoryUpdate) ClearUpdatedByServiceID() *ContactHistoryUpdate {
	chu.mutation.ClearUpdatedByServiceID()
	return chu
}

// SetTags sets the "tags" field.
func (chu *ContactHistoryUpdate) SetTags(s []string) *ContactHistoryUpdate {
	chu.mutation.SetTags(s)
	return chu
}

// AppendTags appends s to the "tags" field.
func (chu *ContactHistoryUpdate) AppendTags(s []string) *ContactHistoryUpdate {
	chu.mutation.AppendTags(s)
	return chu
}

// ClearTags clears the value of the "tags" field.
func (chu *ContactHistoryUpdate) ClearTags() *ContactHistoryUpdate {
	chu.mutation.ClearTags()
	return chu
}

// SetOwnerID sets the "owner_id" field.
func (chu *ContactHistoryUpdate) SetOwnerID(s string) *ContactHistoryUpdate {
	chu.mutation.SetOwnerID(s)
	return chu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (chu *ContactHistoryUpdate) SetNillableOwnerID(s *string) *ContactHistoryUpdate {
	if s != nil {
		chu.SetOwnerID(*s)
	}
	return chu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (chu *ContactHistoryUpdate) ClearOwnerID() *ContactHistoryUpdate {
	chu.mutation.ClearOwnerID()
	return chu
}

// SetFullName sets the "full_name" field.
func (chu *ContactHistoryUpdate) SetFullName(s string) *ContactHistoryUpdate {
	chu.mutation.SetFullName(s)
	return chu
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (chu *ContactHistoryUpdate) SetNillableFullName(s *string) *ContactHistoryUpdate {
	if s != nil {
		chu.SetFullName(*s)
	}
	return chu
}

// SetTitle sets the "title" field.
func (chu *ContactHistoryUpdate) SetTitle(s string) *ContactHistoryUpdate {
	chu.mutation.SetTitle(s)
	return chu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (chu *ContactHistoryUpdate) SetNillableTitle(s *string) *ContactHistoryUpdate {
	if s != nil {
		chu.SetTitle(*s)
	}
	return chu
}

// ClearTitle clears the value of the "title" field.
func (chu *ContactHistoryUpdate) ClearTitle() *ContactHistoryUpdate {
	chu.mutation.ClearTitle()
	return chu
}

// SetCompany sets the "company" field.
func (chu *ContactHistoryUpdate) SetCompany(s string) *ContactHistoryUpdate {
	chu.mutation.SetCompany(s)
	return chu
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (chu *ContactHistoryUpdate) SetNillableCompany(s *string) *ContactHistoryUpdate {
	if s != nil {
		chu.SetCompany(*s)
	}
	return chu
}

// ClearCompany clears the value of the "company" field.
func (chu *ContactHistoryUpdate) ClearCompany() *ContactHistoryUpdate {
	chu.mutation.ClearCompany()
	return chu
}

// SetEmail sets the "email" field.
func (chu *ContactHistoryUpdate) SetEmail(s string) *ContactHistoryUpdate {
	chu.mutation.SetEmail(s)
	return chu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (chu *ContactHistoryUpdate) SetNillableEmail(s *string) *ContactHistoryUpdate {
	if s != nil {
		chu.SetEmail(*s)
	}
	return chu
}

// ClearEmail clears the value of the "email" field.
func (chu *ContactHistoryUpdate) ClearEmail() *ContactHistoryUpdate {
	chu.mutation.ClearEmail()
	return chu
}

// SetPhoneNumber sets the "phone_number" field.
func (chu *ContactHistoryUpdate) SetPhoneNumber(s string) *ContactHistoryUpdate {
	chu.mutation.SetPhoneNumber(s)
	return chu
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (chu *ContactHistoryUpdate) SetNillablePhoneNumber(s *string) *ContactHistoryUpdate {
	if s != nil {
		chu.SetPhoneNumber(*s)
	}
	return chu
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (chu *ContactHistoryUpdate) ClearPhoneNumber() *ContactHistoryUpdate {
	chu.mutation.ClearPhoneNumber()
	return chu
}

// SetAddress sets the "address" field.
func (chu *ContactHistoryUpdate) SetAddress(s string) *ContactHistoryUpdate {
	chu.mutation.SetAddress(s)
	return chu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (chu *ContactHistoryUpdate) SetNillableAddress(s *string) *ContactHistoryUpdate {
	if s != nil {
		chu.SetAddress(*s)
	}
	return chu
}

// ClearAddress clears the value of the "address" field.
func (chu *ContactHistoryUpdate) ClearAddress() *ContactHistoryUpdate {
	chu.mutation.ClearAddress()
	return chu
}

// SetStatus sets the "status" field.
func (chu *ContactHistoryUpdate) SetStatus(es enums.UserStatus) *ContactHistoryUpdate {
	chu.mutation.SetStatus(es)
	return chu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (chu *ContactHistoryUpdate) SetNillableStatus(es *enums.UserStatus) *ContactHistoryUpdate {
	if es != nil {
		chu.SetStatus(*es)
	}
	return chu
}

// Mutation returns the ContactHistoryMutation object of the builder.
func (chu *ContactHistoryUpdate) Mutation() *ContactHistoryMutation {
	return chu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (chu *ContactHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := chu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, chu.sqlSave, chu.mutation, chu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chu *ContactHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := chu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (chu *ContactHistoryUpdate) Exec(ctx context.Context) error {
	_, err := chu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chu *ContactHistoryUpdate) ExecX(ctx context.Context) {
	if err := chu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chu *ContactHistoryUpdate) defaults() error {
	if _, ok := chu.mutation.UpdatedAt(); !ok && !chu.mutation.UpdatedAtCleared() {
		if contacthistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contacthistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contacthistory.UpdateDefaultUpdatedAt()
		chu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (chu *ContactHistoryUpdate) check() error {
	if v, ok := chu.mutation.Status(); ok {
		if err := contacthistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ContactHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (chu *ContactHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContactHistoryUpdate {
	chu.modifiers = append(chu.modifiers, modifiers...)
	return chu
}

func (chu *ContactHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := chu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(contacthistory.Table, contacthistory.Columns, sqlgraph.NewFieldSpec(contacthistory.FieldID, field.TypeString))
	if ps := chu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if chu.mutation.RefCleared() {
		_spec.ClearField(contacthistory.FieldRef, field.TypeString)
	}
	if chu.mutation.UpdatedByCleared() {
		_spec.ClearField(contacthistory.FieldUpdatedBy, field.TypeString)
	}
	if chu.mutation.CreatedAtCleared() {
		_spec.ClearField(contacthistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := chu.mutation.UpdatedAt(); ok {
		_spec.SetField(contacthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if chu.mutation.UpdatedAtCleared() {
		_spec.ClearField(contacthistory.FieldUpdatedAt, field.TypeTime)
	}
	if chu.mutation.CreatedByIDCleared() {
		_spec.ClearField(contacthistory.FieldCreatedByID, field.TypeString)
	}
	if value, ok := chu.mutation.UpdatedByID(); ok {
		_spec.SetField(contacthistory.FieldUpdatedByID, field.TypeString, value)
	}
	if chu.mutation.UpdatedByIDCleared() {
		_spec.ClearField(contacthistory.FieldUpdatedByID, field.TypeString)
	}
	if chu.mutation.CreatedByUserIDCleared() {
		_spec.ClearField(contacthistory.FieldCreatedByUserID, field.TypeString)
	}
	if value, ok := chu.mutation.UpdatedByUserID(); ok {
		_spec.SetField(contacthistory.FieldUpdatedByUserID, field.TypeString, value)
	}
	if chu.mutation.UpdatedByUserIDCleared() {
		_spec.ClearField(contacthistory.FieldUpdatedByUserID, field.TypeString)
	}
	if chu.mutation.CreatedByServiceIDCleared() {
		_spec.ClearField(contacthistory.FieldCreatedByServiceID, field.TypeString)
	}
	if value, ok := chu.mutation.UpdatedByServiceID(); ok {
		_spec.SetField(contacthistory.FieldUpdatedByServiceID, field.TypeString, value)
	}
	if chu.mutation.UpdatedByServiceIDCleared() {
		_spec.ClearField(contacthistory.FieldUpdatedByServiceID, field.TypeString)
	}
	if chu.mutation.DeletedAtCleared() {
		_spec.ClearField(contacthistory.FieldDeletedAt, field.TypeTime)
	}
	if chu.mutation.DeletedByIDCleared() {
		_spec.ClearField(contacthistory.FieldDeletedByID, field.TypeString)
	}
	if value, ok := chu.mutation.Tags(); ok {
		_spec.SetField(contacthistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := chu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, contacthistory.FieldTags, value)
		})
	}
	if chu.mutation.TagsCleared() {
		_spec.ClearField(contacthistory.FieldTags, field.TypeJSON)
	}
	if value, ok := chu.mutation.OwnerID(); ok {
		_spec.SetField(contacthistory.FieldOwnerID, field.TypeString, value)
	}
	if chu.mutation.OwnerIDCleared() {
		_spec.ClearField(contacthistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := chu.mutation.FullName(); ok {
		_spec.SetField(contacthistory.FieldFullName, field.TypeString, value)
	}
	if value, ok := chu.mutation.Title(); ok {
		_spec.SetField(contacthistory.FieldTitle, field.TypeString, value)
	}
	if chu.mutation.TitleCleared() {
		_spec.ClearField(contacthistory.FieldTitle, field.TypeString)
	}
	if value, ok := chu.mutation.Company(); ok {
		_spec.SetField(contacthistory.FieldCompany, field.TypeString, value)
	}
	if chu.mutation.CompanyCleared() {
		_spec.ClearField(contacthistory.FieldCompany, field.TypeString)
	}
	if value, ok := chu.mutation.Email(); ok {
		_spec.SetField(contacthistory.FieldEmail, field.TypeString, value)
	}
	if chu.mutation.EmailCleared() {
		_spec.ClearField(contacthistory.FieldEmail, field.TypeString)
	}
	if value, ok := chu.mutation.PhoneNumber(); ok {
		_spec.SetField(contacthistory.FieldPhoneNumber, field.TypeString, value)
	}
	if chu.mutation.PhoneNumberCleared() {
		_spec.ClearField(contacthistory.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := chu.mutation.Address(); ok {
		_spec.SetField(contacthistory.FieldAddress, field.TypeString, value)
	}
	if chu.mutation.AddressCleared() {
		_spec.ClearField(contacthistory.FieldAddress, field.TypeString)
	}
	if value, ok := chu.mutation.Status(); ok {
		_spec.SetField(contacthistory.FieldStatus, field.TypeEnum, value)
	}
	_spec.Node.Schema = chu.schemaConfig.ContactHistory
	ctx = internal.NewSchemaConfigContext(ctx, chu.schemaConfig)
	_spec.AddModifiers(chu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, chu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contacthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	chu.mutation.done = true
	return n, nil
}

// ContactHistoryUpdateOne is the builder for updating a single ContactHistory entity.
type ContactHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ContactHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (chuo *ContactHistoryUpdateOne) SetUpdatedAt(t time.Time) *ContactHistoryUpdateOne {
	chuo.mutation.SetUpdatedAt(t)
	return chuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (chuo *ContactHistoryUpdateOne) ClearUpdatedAt() *ContactHistoryUpdateOne {
	chuo.mutation.ClearUpdatedAt()
	return chuo
}

// SetUpdatedByID sets the "updated_by_id" field.
func (chuo *ContactHistoryUpdateOne) SetUpdatedByID(s string) *ContactHistoryUpdateOne {
	chuo.mutation.SetUpdatedByID(s)
	return chuo
}

// SetNillableUpdatedByID sets the "updated_by_id" field if the given value is not nil.
func (chuo *ContactHistoryUpdateOne) SetNillableUpdatedByID(s *string) *ContactHistoryUpdateOne {
	if s != nil {
		chuo.SetUpdatedByID(*s)
	}
	return chuo
}

// ClearUpdatedByID clears the value of the "updated_by_id" field.
func (chuo *ContactHistoryUpdateOne) ClearUpdatedByID() *ContactHistoryUpdateOne {
	chuo.mutation.ClearUpdatedByID()
	return chuo
}

// SetUpdatedByUserID sets the "updated_by_user_id" field.
func (chuo *ContactHistoryUpdateOne) SetUpdatedByUserID(s string) *ContactHistoryUpdateOne {
	chuo.mutation.SetUpdatedByUserID(s)
	return chuo
}

// SetNillableUpdatedByUserID sets the "updated_by_user_id" field if the given value is not nil.
func (chuo *ContactHistoryUpdateOne) SetNillableUpdatedByUserID(s *string) *ContactHistoryUpdateOne {
	if s != nil {
		chuo.SetUpdatedByUserID(*s)
	}
	return chuo
}

// ClearUpdatedByUserID clears the value of the "updated_by_user_id" field.
func (chuo *ContactHistoryUpdateOne) ClearUpdatedByUserID() *ContactHistoryUpdateOne {
	chuo.mutation.ClearUpdatedByUserID()
	return chuo
}

// SetUpdatedByServiceID sets the "updated_by_service_id" field.
func (chuo *ContactHistoryUpdateOne) SetUpdatedByServiceID(s string) *ContactHistoryUpdateOne {
	chuo.mutation.SetUpdatedByServiceID(s)
	return chuo
}

// SetNillableUpdatedByServiceID sets the "updated_by_service_id" field if the given value is not nil.
func (chuo *ContactHistoryUpdateOne) SetNillableUpdatedByServiceID(s *string) *ContactHistoryUpdateOne {
	if s != nil {
		chuo.SetUpdatedByServiceID(*s)
	}
	return chuo
}

// ClearUpdatedByServiceID clears the value of the "updated_by_service_id" field.
func (chuo *ContactHistoryUpdateOne) ClearUpdatedByServiceID() *ContactHistoryUpdateOne {
	chuo.mutation.ClearUpdatedByServiceID()
	return chuo
}

// SetTags sets the "tags" field.
func (chuo *ContactHistoryUpdateOne) SetTags(s []string) *ContactHistoryUpdateOne {
	chuo.mutation.SetTags(s)
	return chuo
}

// AppendTags appends s to the "tags" field.
func (chuo *ContactHistoryUpdateOne) AppendTags(s []string) *ContactHistoryUpdateOne {
	chuo.mutation.AppendTags(s)
	return chuo
}

// ClearTags clears the value of the "tags" field.
func (chuo *ContactHistoryUpdateOne) ClearTags() *ContactHistoryUpdateOne {
	chuo.mutation.ClearTags()
	return chuo
}

// SetOwnerID sets the "owner_id" field.
func (chuo *ContactHistoryUpdateOne) SetOwnerID(s string) *ContactHistoryUpdateOne {
	chuo.mutation.SetOwnerID(s)
	return chuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (chuo *ContactHistoryUpdateOne) SetNillableOwnerID(s *string) *ContactHistoryUpdateOne {
	if s != nil {
		chuo.SetOwnerID(*s)
	}
	return chuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (chuo *ContactHistoryUpdateOne) ClearOwnerID() *ContactHistoryUpdateOne {
	chuo.mutation.ClearOwnerID()
	return chuo
}

// SetFullName sets the "full_name" field.
func (chuo *ContactHistoryUpdateOne) SetFullName(s string) *ContactHistoryUpdateOne {
	chuo.mutation.SetFullName(s)
	return chuo
}

// SetNillableFullName sets the "full_name" field if the given value is not nil.
func (chuo *ContactHistoryUpdateOne) SetNillableFullName(s *string) *ContactHistoryUpdateOne {
	if s != nil {
		chuo.SetFullName(*s)
	}
	return chuo
}

// SetTitle sets the "title" field.
func (chuo *ContactHistoryUpdateOne) SetTitle(s string) *ContactHistoryUpdateOne {
	chuo.mutation.SetTitle(s)
	return chuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (chuo *ContactHistoryUpdateOne) SetNillableTitle(s *string) *ContactHistoryUpdateOne {
	if s != nil {
		chuo.SetTitle(*s)
	}
	return chuo
}

// ClearTitle clears the value of the "title" field.
func (chuo *ContactHistoryUpdateOne) ClearTitle() *ContactHistoryUpdateOne {
	chuo.mutation.ClearTitle()
	return chuo
}

// SetCompany sets the "company" field.
func (chuo *ContactHistoryUpdateOne) SetCompany(s string) *ContactHistoryUpdateOne {
	chuo.mutation.SetCompany(s)
	return chuo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (chuo *ContactHistoryUpdateOne) SetNillableCompany(s *string) *ContactHistoryUpdateOne {
	if s != nil {
		chuo.SetCompany(*s)
	}
	return chuo
}

// ClearCompany clears the value of the "company" field.
func (chuo *ContactHistoryUpdateOne) ClearCompany() *ContactHistoryUpdateOne {
	chuo.mutation.ClearCompany()
	return chuo
}

// SetEmail sets the "email" field.
func (chuo *ContactHistoryUpdateOne) SetEmail(s string) *ContactHistoryUpdateOne {
	chuo.mutation.SetEmail(s)
	return chuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (chuo *ContactHistoryUpdateOne) SetNillableEmail(s *string) *ContactHistoryUpdateOne {
	if s != nil {
		chuo.SetEmail(*s)
	}
	return chuo
}

// ClearEmail clears the value of the "email" field.
func (chuo *ContactHistoryUpdateOne) ClearEmail() *ContactHistoryUpdateOne {
	chuo.mutation.ClearEmail()
	return chuo
}

// SetPhoneNumber sets the "phone_number" field.
func (chuo *ContactHistoryUpdateOne) SetPhoneNumber(s string) *ContactHistoryUpdateOne {
	chuo.mutation.SetPhoneNumber(s)
	return chuo
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (chuo *ContactHistoryUpdateOne) SetNillablePhoneNumber(s *string) *ContactHistoryUpdateOne {
	if s != nil {
		chuo.SetPhoneNumber(*s)
	}
	return chuo
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (chuo *ContactHistoryUpdateOne) ClearPhoneNumber() *ContactHistoryUpdateOne {
	chuo.mutation.ClearPhoneNumber()
	return chuo
}

// SetAddress sets the "address" field.
func (chuo *ContactHistoryUpdateOne) SetAddress(s string) *ContactHistoryUpdateOne {
	chuo.mutation.SetAddress(s)
	return chuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (chuo *ContactHistoryUpdateOne) SetNillableAddress(s *string) *ContactHistoryUpdateOne {
	if s != nil {
		chuo.SetAddress(*s)
	}
	return chuo
}

// ClearAddress clears the value of the "address" field.
func (chuo *ContactHistoryUpdateOne) ClearAddress() *ContactHistoryUpdateOne {
	chuo.mutation.ClearAddress()
	return chuo
}

// SetStatus sets the "status" field.
func (chuo *ContactHistoryUpdateOne) SetStatus(es enums.UserStatus) *ContactHistoryUpdateOne {
	chuo.mutation.SetStatus(es)
	return chuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (chuo *ContactHistoryUpdateOne) SetNillableStatus(es *enums.UserStatus) *ContactHistoryUpdateOne {
	if es != nil {
		chuo.SetStatus(*es)
	}
	return chuo
}

// Mutation returns the ContactHistoryMutation object of the builder.
func (chuo *ContactHistoryUpdateOne) Mutation() *ContactHistoryMutation {
	return chuo.mutation
}

// Where appends a list predicates to the ContactHistoryUpdate builder.
func (chuo *ContactHistoryUpdateOne) Where(ps ...predicate.ContactHistory) *ContactHistoryUpdateOne {
	chuo.mutation.Where(ps...)
	return chuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (chuo *ContactHistoryUpdateOne) Select(field string, fields ...string) *ContactHistoryUpdateOne {
	chuo.fields = append([]string{field}, fields...)
	return chuo
}

// Save executes the query and returns the updated ContactHistory entity.
func (chuo *ContactHistoryUpdateOne) Save(ctx context.Context) (*ContactHistory, error) {
	if err := chuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, chuo.sqlSave, chuo.mutation, chuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (chuo *ContactHistoryUpdateOne) SaveX(ctx context.Context) *ContactHistory {
	node, err := chuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (chuo *ContactHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := chuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (chuo *ContactHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := chuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (chuo *ContactHistoryUpdateOne) defaults() error {
	if _, ok := chuo.mutation.UpdatedAt(); !ok && !chuo.mutation.UpdatedAtCleared() {
		if contacthistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contacthistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contacthistory.UpdateDefaultUpdatedAt()
		chuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (chuo *ContactHistoryUpdateOne) check() error {
	if v, ok := chuo.mutation.Status(); ok {
		if err := contacthistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ContactHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (chuo *ContactHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ContactHistoryUpdateOne {
	chuo.modifiers = append(chuo.modifiers, modifiers...)
	return chuo
}

func (chuo *ContactHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ContactHistory, err error) {
	if err := chuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(contacthistory.Table, contacthistory.Columns, sqlgraph.NewFieldSpec(contacthistory.FieldID, field.TypeString))
	id, ok := chuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ContactHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := chuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, contacthistory.FieldID)
		for _, f := range fields {
			if !contacthistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != contacthistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := chuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if chuo.mutation.RefCleared() {
		_spec.ClearField(contacthistory.FieldRef, field.TypeString)
	}
	if chuo.mutation.UpdatedByCleared() {
		_spec.ClearField(contacthistory.FieldUpdatedBy, field.TypeString)
	}
	if chuo.mutation.CreatedAtCleared() {
		_spec.ClearField(contacthistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := chuo.mutation.UpdatedAt(); ok {
		_spec.SetField(contacthistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if chuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(contacthistory.FieldUpdatedAt, field.TypeTime)
	}
	if chuo.mutation.CreatedByIDCleared() {
		_spec.ClearField(contacthistory.FieldCreatedByID, field.TypeString)
	}
	if value, ok := chuo.mutation.UpdatedByID(); ok {
		_spec.SetField(contacthistory.FieldUpdatedByID, field.TypeString, value)
	}
	if chuo.mutation.UpdatedByIDCleared() {
		_spec.ClearField(contacthistory.FieldUpdatedByID, field.TypeString)
	}
	if chuo.mutation.CreatedByUserIDCleared() {
		_spec.ClearField(contacthistory.FieldCreatedByUserID, field.TypeString)
	}
	if value, ok := chuo.mutation.UpdatedByUserID(); ok {
		_spec.SetField(contacthistory.FieldUpdatedByUserID, field.TypeString, value)
	}
	if chuo.mutation.UpdatedByUserIDCleared() {
		_spec.ClearField(contacthistory.FieldUpdatedByUserID, field.TypeString)
	}
	if chuo.mutation.CreatedByServiceIDCleared() {
		_spec.ClearField(contacthistory.FieldCreatedByServiceID, field.TypeString)
	}
	if value, ok := chuo.mutation.UpdatedByServiceID(); ok {
		_spec.SetField(contacthistory.FieldUpdatedByServiceID, field.TypeString, value)
	}
	if chuo.mutation.UpdatedByServiceIDCleared() {
		_spec.ClearField(contacthistory.FieldUpdatedByServiceID, field.TypeString)
	}
	if chuo.mutation.DeletedAtCleared() {
		_spec.ClearField(contacthistory.FieldDeletedAt, field.TypeTime)
	}
	if chuo.mutation.DeletedByIDCleared() {
		_spec.ClearField(contacthistory.FieldDeletedByID, field.TypeString)
	}
	if value, ok := chuo.mutation.Tags(); ok {
		_spec.SetField(contacthistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := chuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, contacthistory.FieldTags, value)
		})
	}
	if chuo.mutation.TagsCleared() {
		_spec.ClearField(contacthistory.FieldTags, field.TypeJSON)
	}
	if value, ok := chuo.mutation.OwnerID(); ok {
		_spec.SetField(contacthistory.FieldOwnerID, field.TypeString, value)
	}
	if chuo.mutation.OwnerIDCleared() {
		_spec.ClearField(contacthistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := chuo.mutation.FullName(); ok {
		_spec.SetField(contacthistory.FieldFullName, field.TypeString, value)
	}
	if value, ok := chuo.mutation.Title(); ok {
		_spec.SetField(contacthistory.FieldTitle, field.TypeString, value)
	}
	if chuo.mutation.TitleCleared() {
		_spec.ClearField(contacthistory.FieldTitle, field.TypeString)
	}
	if value, ok := chuo.mutation.Company(); ok {
		_spec.SetField(contacthistory.FieldCompany, field.TypeString, value)
	}
	if chuo.mutation.CompanyCleared() {
		_spec.ClearField(contacthistory.FieldCompany, field.TypeString)
	}
	if value, ok := chuo.mutation.Email(); ok {
		_spec.SetField(contacthistory.FieldEmail, field.TypeString, value)
	}
	if chuo.mutation.EmailCleared() {
		_spec.ClearField(contacthistory.FieldEmail, field.TypeString)
	}
	if value, ok := chuo.mutation.PhoneNumber(); ok {
		_spec.SetField(contacthistory.FieldPhoneNumber, field.TypeString, value)
	}
	if chuo.mutation.PhoneNumberCleared() {
		_spec.ClearField(contacthistory.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := chuo.mutation.Address(); ok {
		_spec.SetField(contacthistory.FieldAddress, field.TypeString, value)
	}
	if chuo.mutation.AddressCleared() {
		_spec.ClearField(contacthistory.FieldAddress, field.TypeString)
	}
	if value, ok := chuo.mutation.Status(); ok {
		_spec.SetField(contacthistory.FieldStatus, field.TypeEnum, value)
	}
	_spec.Node.Schema = chuo.schemaConfig.ContactHistory
	ctx = internal.NewSchemaConfigContext(ctx, chuo.schemaConfig)
	_spec.AddModifiers(chuo.modifiers...)
	_node = &ContactHistory{config: chuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, chuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contacthistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	chuo.mutation.done = true
	return _node, nil
}
