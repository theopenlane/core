// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// SubcontrolUpdate is the builder for updating Subcontrol entities.
type SubcontrolUpdate struct {
	config
	hooks     []Hook
	mutation  *SubcontrolMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubcontrolUpdate builder.
func (_u *SubcontrolUpdate) Where(ps ...predicate.Subcontrol) *SubcontrolUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubcontrolUpdate) SetUpdatedAt(v time.Time) *SubcontrolUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SubcontrolUpdate) ClearUpdatedAt() *SubcontrolUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *SubcontrolUpdate) SetUpdatedBy(v string) *SubcontrolUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableUpdatedBy(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *SubcontrolUpdate) ClearUpdatedBy() *SubcontrolUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubcontrolUpdate) SetDeletedAt(v time.Time) *SubcontrolUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableDeletedAt(v *time.Time) *SubcontrolUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubcontrolUpdate) ClearDeletedAt() *SubcontrolUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *SubcontrolUpdate) SetDeletedBy(v string) *SubcontrolUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableDeletedBy(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *SubcontrolUpdate) ClearDeletedBy() *SubcontrolUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *SubcontrolUpdate) SetTags(v []string) *SubcontrolUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *SubcontrolUpdate) AppendTags(v []string) *SubcontrolUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *SubcontrolUpdate) ClearTags() *SubcontrolUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetDescription sets the "description" field.
func (_u *SubcontrolUpdate) SetDescription(v string) *SubcontrolUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableDescription(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *SubcontrolUpdate) ClearDescription() *SubcontrolUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetReferenceID sets the "reference_id" field.
func (_u *SubcontrolUpdate) SetReferenceID(v string) *SubcontrolUpdate {
	_u.mutation.SetReferenceID(v)
	return _u
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableReferenceID(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetReferenceID(*v)
	}
	return _u
}

// ClearReferenceID clears the value of the "reference_id" field.
func (_u *SubcontrolUpdate) ClearReferenceID() *SubcontrolUpdate {
	_u.mutation.ClearReferenceID()
	return _u
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (_u *SubcontrolUpdate) SetAuditorReferenceID(v string) *SubcontrolUpdate {
	_u.mutation.SetAuditorReferenceID(v)
	return _u
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableAuditorReferenceID(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetAuditorReferenceID(*v)
	}
	return _u
}

// ClearAuditorReferenceID clears the value of the "auditor_reference_id" field.
func (_u *SubcontrolUpdate) ClearAuditorReferenceID() *SubcontrolUpdate {
	_u.mutation.ClearAuditorReferenceID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *SubcontrolUpdate) SetStatus(v enums.ControlStatus) *SubcontrolUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableStatus(v *enums.ControlStatus) *SubcontrolUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *SubcontrolUpdate) ClearStatus() *SubcontrolUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetSource sets the "source" field.
func (_u *SubcontrolUpdate) SetSource(v enums.ControlSource) *SubcontrolUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableSource(v *enums.ControlSource) *SubcontrolUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *SubcontrolUpdate) ClearSource() *SubcontrolUpdate {
	_u.mutation.ClearSource()
	return _u
}

// SetReferenceFramework sets the "reference_framework" field.
func (_u *SubcontrolUpdate) SetReferenceFramework(v string) *SubcontrolUpdate {
	_u.mutation.SetReferenceFramework(v)
	return _u
}

// SetNillableReferenceFramework sets the "reference_framework" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableReferenceFramework(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetReferenceFramework(*v)
	}
	return _u
}

// ClearReferenceFramework clears the value of the "reference_framework" field.
func (_u *SubcontrolUpdate) ClearReferenceFramework() *SubcontrolUpdate {
	_u.mutation.ClearReferenceFramework()
	return _u
}

// SetControlType sets the "control_type" field.
func (_u *SubcontrolUpdate) SetControlType(v enums.ControlType) *SubcontrolUpdate {
	_u.mutation.SetControlType(v)
	return _u
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableControlType(v *enums.ControlType) *SubcontrolUpdate {
	if v != nil {
		_u.SetControlType(*v)
	}
	return _u
}

// ClearControlType clears the value of the "control_type" field.
func (_u *SubcontrolUpdate) ClearControlType() *SubcontrolUpdate {
	_u.mutation.ClearControlType()
	return _u
}

// SetCategory sets the "category" field.
func (_u *SubcontrolUpdate) SetCategory(v string) *SubcontrolUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableCategory(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *SubcontrolUpdate) ClearCategory() *SubcontrolUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *SubcontrolUpdate) SetCategoryID(v string) *SubcontrolUpdate {
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableCategoryID(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// ClearCategoryID clears the value of the "category_id" field.
func (_u *SubcontrolUpdate) ClearCategoryID() *SubcontrolUpdate {
	_u.mutation.ClearCategoryID()
	return _u
}

// SetSubcategory sets the "subcategory" field.
func (_u *SubcontrolUpdate) SetSubcategory(v string) *SubcontrolUpdate {
	_u.mutation.SetSubcategory(v)
	return _u
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableSubcategory(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetSubcategory(*v)
	}
	return _u
}

// ClearSubcategory clears the value of the "subcategory" field.
func (_u *SubcontrolUpdate) ClearSubcategory() *SubcontrolUpdate {
	_u.mutation.ClearSubcategory()
	return _u
}

// SetMappedCategories sets the "mapped_categories" field.
func (_u *SubcontrolUpdate) SetMappedCategories(v []string) *SubcontrolUpdate {
	_u.mutation.SetMappedCategories(v)
	return _u
}

// AppendMappedCategories appends value to the "mapped_categories" field.
func (_u *SubcontrolUpdate) AppendMappedCategories(v []string) *SubcontrolUpdate {
	_u.mutation.AppendMappedCategories(v)
	return _u
}

// ClearMappedCategories clears the value of the "mapped_categories" field.
func (_u *SubcontrolUpdate) ClearMappedCategories() *SubcontrolUpdate {
	_u.mutation.ClearMappedCategories()
	return _u
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (_u *SubcontrolUpdate) SetAssessmentObjectives(v []models.AssessmentObjective) *SubcontrolUpdate {
	_u.mutation.SetAssessmentObjectives(v)
	return _u
}

// AppendAssessmentObjectives appends value to the "assessment_objectives" field.
func (_u *SubcontrolUpdate) AppendAssessmentObjectives(v []models.AssessmentObjective) *SubcontrolUpdate {
	_u.mutation.AppendAssessmentObjectives(v)
	return _u
}

// ClearAssessmentObjectives clears the value of the "assessment_objectives" field.
func (_u *SubcontrolUpdate) ClearAssessmentObjectives() *SubcontrolUpdate {
	_u.mutation.ClearAssessmentObjectives()
	return _u
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (_u *SubcontrolUpdate) SetAssessmentMethods(v []models.AssessmentMethod) *SubcontrolUpdate {
	_u.mutation.SetAssessmentMethods(v)
	return _u
}

// AppendAssessmentMethods appends value to the "assessment_methods" field.
func (_u *SubcontrolUpdate) AppendAssessmentMethods(v []models.AssessmentMethod) *SubcontrolUpdate {
	_u.mutation.AppendAssessmentMethods(v)
	return _u
}

// ClearAssessmentMethods clears the value of the "assessment_methods" field.
func (_u *SubcontrolUpdate) ClearAssessmentMethods() *SubcontrolUpdate {
	_u.mutation.ClearAssessmentMethods()
	return _u
}

// SetControlQuestions sets the "control_questions" field.
func (_u *SubcontrolUpdate) SetControlQuestions(v []string) *SubcontrolUpdate {
	_u.mutation.SetControlQuestions(v)
	return _u
}

// AppendControlQuestions appends value to the "control_questions" field.
func (_u *SubcontrolUpdate) AppendControlQuestions(v []string) *SubcontrolUpdate {
	_u.mutation.AppendControlQuestions(v)
	return _u
}

// ClearControlQuestions clears the value of the "control_questions" field.
func (_u *SubcontrolUpdate) ClearControlQuestions() *SubcontrolUpdate {
	_u.mutation.ClearControlQuestions()
	return _u
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (_u *SubcontrolUpdate) SetImplementationGuidance(v []models.ImplementationGuidance) *SubcontrolUpdate {
	_u.mutation.SetImplementationGuidance(v)
	return _u
}

// AppendImplementationGuidance appends value to the "implementation_guidance" field.
func (_u *SubcontrolUpdate) AppendImplementationGuidance(v []models.ImplementationGuidance) *SubcontrolUpdate {
	_u.mutation.AppendImplementationGuidance(v)
	return _u
}

// ClearImplementationGuidance clears the value of the "implementation_guidance" field.
func (_u *SubcontrolUpdate) ClearImplementationGuidance() *SubcontrolUpdate {
	_u.mutation.ClearImplementationGuidance()
	return _u
}

// SetExampleEvidence sets the "example_evidence" field.
func (_u *SubcontrolUpdate) SetExampleEvidence(v []models.ExampleEvidence) *SubcontrolUpdate {
	_u.mutation.SetExampleEvidence(v)
	return _u
}

// AppendExampleEvidence appends value to the "example_evidence" field.
func (_u *SubcontrolUpdate) AppendExampleEvidence(v []models.ExampleEvidence) *SubcontrolUpdate {
	_u.mutation.AppendExampleEvidence(v)
	return _u
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (_u *SubcontrolUpdate) ClearExampleEvidence() *SubcontrolUpdate {
	_u.mutation.ClearExampleEvidence()
	return _u
}

// SetReferences sets the "references" field.
func (_u *SubcontrolUpdate) SetReferences(v []models.Reference) *SubcontrolUpdate {
	_u.mutation.SetReferences(v)
	return _u
}

// AppendReferences appends value to the "references" field.
func (_u *SubcontrolUpdate) AppendReferences(v []models.Reference) *SubcontrolUpdate {
	_u.mutation.AppendReferences(v)
	return _u
}

// ClearReferences clears the value of the "references" field.
func (_u *SubcontrolUpdate) ClearReferences() *SubcontrolUpdate {
	_u.mutation.ClearReferences()
	return _u
}

// SetControlOwnerID sets the "control_owner_id" field.
func (_u *SubcontrolUpdate) SetControlOwnerID(v string) *SubcontrolUpdate {
	_u.mutation.SetControlOwnerID(v)
	return _u
}

// SetNillableControlOwnerID sets the "control_owner_id" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableControlOwnerID(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetControlOwnerID(*v)
	}
	return _u
}

// ClearControlOwnerID clears the value of the "control_owner_id" field.
func (_u *SubcontrolUpdate) ClearControlOwnerID() *SubcontrolUpdate {
	_u.mutation.ClearControlOwnerID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *SubcontrolUpdate) SetDelegateID(v string) *SubcontrolUpdate {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableDelegateID(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *SubcontrolUpdate) ClearDelegateID() *SubcontrolUpdate {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *SubcontrolUpdate) SetInternalNotes(v string) *SubcontrolUpdate {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableInternalNotes(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *SubcontrolUpdate) ClearInternalNotes() *SubcontrolUpdate {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *SubcontrolUpdate) SetSystemInternalID(v string) *SubcontrolUpdate {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableSystemInternalID(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *SubcontrolUpdate) ClearSystemInternalID() *SubcontrolUpdate {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetRefCode sets the "ref_code" field.
func (_u *SubcontrolUpdate) SetRefCode(v string) *SubcontrolUpdate {
	_u.mutation.SetRefCode(v)
	return _u
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableRefCode(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetRefCode(*v)
	}
	return _u
}

// SetControlID sets the "control_id" field.
func (_u *SubcontrolUpdate) SetControlID(v string) *SubcontrolUpdate {
	_u.mutation.SetControlID(v)
	return _u
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (_u *SubcontrolUpdate) SetNillableControlID(v *string) *SubcontrolUpdate {
	if v != nil {
		_u.SetControlID(*v)
	}
	return _u
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (_u *SubcontrolUpdate) AddEvidenceIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.AddEvidenceIDs(ids...)
	return _u
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (_u *SubcontrolUpdate) AddEvidence(v ...*Evidence) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEvidenceIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_u *SubcontrolUpdate) AddControlObjectiveIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.AddControlObjectiveIDs(ids...)
	return _u
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_u *SubcontrolUpdate) AddControlObjectives(v ...*ControlObjective) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *SubcontrolUpdate) AddTaskIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *SubcontrolUpdate) AddTasks(v ...*Task) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_u *SubcontrolUpdate) AddNarrativeIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.AddNarrativeIDs(ids...)
	return _u
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_u *SubcontrolUpdate) AddNarratives(v ...*Narrative) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *SubcontrolUpdate) AddRiskIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *SubcontrolUpdate) AddRisks(v ...*Risk) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_u *SubcontrolUpdate) AddActionPlanIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.AddActionPlanIDs(ids...)
	return _u
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_u *SubcontrolUpdate) AddActionPlans(v ...*ActionPlan) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActionPlanIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_u *SubcontrolUpdate) AddProcedureIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.AddProcedureIDs(ids...)
	return _u
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_u *SubcontrolUpdate) AddProcedures(v ...*Procedure) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_u *SubcontrolUpdate) AddInternalPolicyIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.AddInternalPolicyIDs(ids...)
	return _u
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_u *SubcontrolUpdate) AddInternalPolicies(v ...*InternalPolicy) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyIDs(ids...)
}

// SetControlOwner sets the "control_owner" edge to the Group entity.
func (_u *SubcontrolUpdate) SetControlOwner(v *Group) *SubcontrolUpdate {
	return _u.SetControlOwnerID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_u *SubcontrolUpdate) SetDelegate(v *Group) *SubcontrolUpdate {
	return _u.SetDelegateID(v.ID)
}

// SetControl sets the "control" edge to the Control entity.
func (_u *SubcontrolUpdate) SetControl(v *Control) *SubcontrolUpdate {
	return _u.SetControlID(v.ID)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_u *SubcontrolUpdate) AddControlImplementationIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.AddControlImplementationIDs(ids...)
	return _u
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_u *SubcontrolUpdate) AddControlImplementations(v ...*ControlImplementation) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationIDs(ids...)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (_u *SubcontrolUpdate) AddScheduledJobIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.AddScheduledJobIDs(ids...)
	return _u
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *SubcontrolUpdate) AddScheduledJobs(v ...*ScheduledJob) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledJobIDs(ids...)
}

// AddMappedToSubcontrolIDs adds the "mapped_to_subcontrols" edge to the MappedControl entity by IDs.
func (_u *SubcontrolUpdate) AddMappedToSubcontrolIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.AddMappedToSubcontrolIDs(ids...)
	return _u
}

// AddMappedToSubcontrols adds the "mapped_to_subcontrols" edges to the MappedControl entity.
func (_u *SubcontrolUpdate) AddMappedToSubcontrols(v ...*MappedControl) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedToSubcontrolIDs(ids...)
}

// AddMappedFromSubcontrolIDs adds the "mapped_from_subcontrols" edge to the MappedControl entity by IDs.
func (_u *SubcontrolUpdate) AddMappedFromSubcontrolIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.AddMappedFromSubcontrolIDs(ids...)
	return _u
}

// AddMappedFromSubcontrols adds the "mapped_from_subcontrols" edges to the MappedControl entity.
func (_u *SubcontrolUpdate) AddMappedFromSubcontrols(v ...*MappedControl) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedFromSubcontrolIDs(ids...)
}

// Mutation returns the SubcontrolMutation object of the builder.
func (_u *SubcontrolUpdate) Mutation() *SubcontrolMutation {
	return _u.mutation
}

// ClearEvidence clears all "evidence" edges to the Evidence entity.
func (_u *SubcontrolUpdate) ClearEvidence() *SubcontrolUpdate {
	_u.mutation.ClearEvidence()
	return _u
}

// RemoveEvidenceIDs removes the "evidence" edge to Evidence entities by IDs.
func (_u *SubcontrolUpdate) RemoveEvidenceIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.RemoveEvidenceIDs(ids...)
	return _u
}

// RemoveEvidence removes "evidence" edges to Evidence entities.
func (_u *SubcontrolUpdate) RemoveEvidence(v ...*Evidence) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEvidenceIDs(ids...)
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (_u *SubcontrolUpdate) ClearControlObjectives() *SubcontrolUpdate {
	_u.mutation.ClearControlObjectives()
	return _u
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (_u *SubcontrolUpdate) RemoveControlObjectiveIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.RemoveControlObjectiveIDs(ids...)
	return _u
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (_u *SubcontrolUpdate) RemoveControlObjectives(v ...*ControlObjective) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *SubcontrolUpdate) ClearTasks() *SubcontrolUpdate {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *SubcontrolUpdate) RemoveTaskIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *SubcontrolUpdate) RemoveTasks(v ...*Task) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (_u *SubcontrolUpdate) ClearNarratives() *SubcontrolUpdate {
	_u.mutation.ClearNarratives()
	return _u
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (_u *SubcontrolUpdate) RemoveNarrativeIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.RemoveNarrativeIDs(ids...)
	return _u
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (_u *SubcontrolUpdate) RemoveNarratives(v ...*Narrative) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *SubcontrolUpdate) ClearRisks() *SubcontrolUpdate {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *SubcontrolUpdate) RemoveRiskIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *SubcontrolUpdate) RemoveRisks(v ...*Risk) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (_u *SubcontrolUpdate) ClearActionPlans() *SubcontrolUpdate {
	_u.mutation.ClearActionPlans()
	return _u
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (_u *SubcontrolUpdate) RemoveActionPlanIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.RemoveActionPlanIDs(ids...)
	return _u
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (_u *SubcontrolUpdate) RemoveActionPlans(v ...*ActionPlan) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActionPlanIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (_u *SubcontrolUpdate) ClearProcedures() *SubcontrolUpdate {
	_u.mutation.ClearProcedures()
	return _u
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (_u *SubcontrolUpdate) RemoveProcedureIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.RemoveProcedureIDs(ids...)
	return _u
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (_u *SubcontrolUpdate) RemoveProcedures(v ...*Procedure) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (_u *SubcontrolUpdate) ClearInternalPolicies() *SubcontrolUpdate {
	_u.mutation.ClearInternalPolicies()
	return _u
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (_u *SubcontrolUpdate) RemoveInternalPolicyIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.RemoveInternalPolicyIDs(ids...)
	return _u
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (_u *SubcontrolUpdate) RemoveInternalPolicies(v ...*InternalPolicy) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyIDs(ids...)
}

// ClearControlOwner clears the "control_owner" edge to the Group entity.
func (_u *SubcontrolUpdate) ClearControlOwner() *SubcontrolUpdate {
	_u.mutation.ClearControlOwner()
	return _u
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (_u *SubcontrolUpdate) ClearDelegate() *SubcontrolUpdate {
	_u.mutation.ClearDelegate()
	return _u
}

// ClearControl clears the "control" edge to the Control entity.
func (_u *SubcontrolUpdate) ClearControl() *SubcontrolUpdate {
	_u.mutation.ClearControl()
	return _u
}

// ClearControlImplementations clears all "control_implementations" edges to the ControlImplementation entity.
func (_u *SubcontrolUpdate) ClearControlImplementations() *SubcontrolUpdate {
	_u.mutation.ClearControlImplementations()
	return _u
}

// RemoveControlImplementationIDs removes the "control_implementations" edge to ControlImplementation entities by IDs.
func (_u *SubcontrolUpdate) RemoveControlImplementationIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.RemoveControlImplementationIDs(ids...)
	return _u
}

// RemoveControlImplementations removes "control_implementations" edges to ControlImplementation entities.
func (_u *SubcontrolUpdate) RemoveControlImplementations(v ...*ControlImplementation) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationIDs(ids...)
}

// ClearScheduledJobs clears all "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *SubcontrolUpdate) ClearScheduledJobs() *SubcontrolUpdate {
	_u.mutation.ClearScheduledJobs()
	return _u
}

// RemoveScheduledJobIDs removes the "scheduled_jobs" edge to ScheduledJob entities by IDs.
func (_u *SubcontrolUpdate) RemoveScheduledJobIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.RemoveScheduledJobIDs(ids...)
	return _u
}

// RemoveScheduledJobs removes "scheduled_jobs" edges to ScheduledJob entities.
func (_u *SubcontrolUpdate) RemoveScheduledJobs(v ...*ScheduledJob) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledJobIDs(ids...)
}

// ClearMappedToSubcontrols clears all "mapped_to_subcontrols" edges to the MappedControl entity.
func (_u *SubcontrolUpdate) ClearMappedToSubcontrols() *SubcontrolUpdate {
	_u.mutation.ClearMappedToSubcontrols()
	return _u
}

// RemoveMappedToSubcontrolIDs removes the "mapped_to_subcontrols" edge to MappedControl entities by IDs.
func (_u *SubcontrolUpdate) RemoveMappedToSubcontrolIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.RemoveMappedToSubcontrolIDs(ids...)
	return _u
}

// RemoveMappedToSubcontrols removes "mapped_to_subcontrols" edges to MappedControl entities.
func (_u *SubcontrolUpdate) RemoveMappedToSubcontrols(v ...*MappedControl) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedToSubcontrolIDs(ids...)
}

// ClearMappedFromSubcontrols clears all "mapped_from_subcontrols" edges to the MappedControl entity.
func (_u *SubcontrolUpdate) ClearMappedFromSubcontrols() *SubcontrolUpdate {
	_u.mutation.ClearMappedFromSubcontrols()
	return _u
}

// RemoveMappedFromSubcontrolIDs removes the "mapped_from_subcontrols" edge to MappedControl entities by IDs.
func (_u *SubcontrolUpdate) RemoveMappedFromSubcontrolIDs(ids ...string) *SubcontrolUpdate {
	_u.mutation.RemoveMappedFromSubcontrolIDs(ids...)
	return _u
}

// RemoveMappedFromSubcontrols removes "mapped_from_subcontrols" edges to MappedControl entities.
func (_u *SubcontrolUpdate) RemoveMappedFromSubcontrols(v ...*MappedControl) *SubcontrolUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedFromSubcontrolIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SubcontrolUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubcontrolUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SubcontrolUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubcontrolUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubcontrolUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if subcontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrol.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubcontrolUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := subcontrol.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Source(); ok {
		if err := subcontrol.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.source": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ControlType(); ok {
		if err := subcontrol.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.control_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefCode(); ok {
		if err := subcontrol.RefCodeValidator(v); err != nil {
			return &ValidationError{Name: "ref_code", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.ref_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ControlID(); ok {
		if err := subcontrol.ControlIDValidator(v); err != nil {
			return &ValidationError{Name: "control_id", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.control_id": %w`, err)}
		}
	}
	if _u.mutation.ControlCleared() && len(_u.mutation.ControlIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Subcontrol.control"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *SubcontrolUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubcontrolUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *SubcontrolUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subcontrol.Table, subcontrol.Columns, sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(subcontrol.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(subcontrol.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(subcontrol.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(subcontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrol.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subcontrol.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrol.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(subcontrol.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(subcontrol.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(subcontrol.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(subcontrol.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(subcontrol.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ReferenceID(); ok {
		_spec.SetField(subcontrol.FieldReferenceID, field.TypeString, value)
	}
	if _u.mutation.ReferenceIDCleared() {
		_spec.ClearField(subcontrol.FieldReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.AuditorReferenceID(); ok {
		_spec.SetField(subcontrol.FieldAuditorReferenceID, field.TypeString, value)
	}
	if _u.mutation.AuditorReferenceIDCleared() {
		_spec.ClearField(subcontrol.FieldAuditorReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(subcontrol.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(subcontrol.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(subcontrol.FieldSource, field.TypeEnum, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(subcontrol.FieldSource, field.TypeEnum)
	}
	if value, ok := _u.mutation.ReferenceFramework(); ok {
		_spec.SetField(subcontrol.FieldReferenceFramework, field.TypeString, value)
	}
	if _u.mutation.ReferenceFrameworkCleared() {
		_spec.ClearField(subcontrol.FieldReferenceFramework, field.TypeString)
	}
	if value, ok := _u.mutation.ControlType(); ok {
		_spec.SetField(subcontrol.FieldControlType, field.TypeEnum, value)
	}
	if _u.mutation.ControlTypeCleared() {
		_spec.ClearField(subcontrol.FieldControlType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(subcontrol.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(subcontrol.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryID(); ok {
		_spec.SetField(subcontrol.FieldCategoryID, field.TypeString, value)
	}
	if _u.mutation.CategoryIDCleared() {
		_spec.ClearField(subcontrol.FieldCategoryID, field.TypeString)
	}
	if value, ok := _u.mutation.Subcategory(); ok {
		_spec.SetField(subcontrol.FieldSubcategory, field.TypeString, value)
	}
	if _u.mutation.SubcategoryCleared() {
		_spec.ClearField(subcontrol.FieldSubcategory, field.TypeString)
	}
	if value, ok := _u.mutation.MappedCategories(); ok {
		_spec.SetField(subcontrol.FieldMappedCategories, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMappedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldMappedCategories, value)
		})
	}
	if _u.mutation.MappedCategoriesCleared() {
		_spec.ClearField(subcontrol.FieldMappedCategories, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentObjectives(); ok {
		_spec.SetField(subcontrol.FieldAssessmentObjectives, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentObjectives(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldAssessmentObjectives, value)
		})
	}
	if _u.mutation.AssessmentObjectivesCleared() {
		_spec.ClearField(subcontrol.FieldAssessmentObjectives, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentMethods(); ok {
		_spec.SetField(subcontrol.FieldAssessmentMethods, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldAssessmentMethods, value)
		})
	}
	if _u.mutation.AssessmentMethodsCleared() {
		_spec.ClearField(subcontrol.FieldAssessmentMethods, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlQuestions(); ok {
		_spec.SetField(subcontrol.FieldControlQuestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldControlQuestions, value)
		})
	}
	if _u.mutation.ControlQuestionsCleared() {
		_spec.ClearField(subcontrol.FieldControlQuestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImplementationGuidance(); ok {
		_spec.SetField(subcontrol.FieldImplementationGuidance, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImplementationGuidance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldImplementationGuidance, value)
		})
	}
	if _u.mutation.ImplementationGuidanceCleared() {
		_spec.ClearField(subcontrol.FieldImplementationGuidance, field.TypeJSON)
	}
	if value, ok := _u.mutation.ExampleEvidence(); ok {
		_spec.SetField(subcontrol.FieldExampleEvidence, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedExampleEvidence(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldExampleEvidence, value)
		})
	}
	if _u.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(subcontrol.FieldExampleEvidence, field.TypeJSON)
	}
	if value, ok := _u.mutation.References(); ok {
		_spec.SetField(subcontrol.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldReferences, value)
		})
	}
	if _u.mutation.ReferencesCleared() {
		_spec.ClearField(subcontrol.FieldReferences, field.TypeJSON)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(subcontrol.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(subcontrol.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(subcontrol.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(subcontrol.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(subcontrol.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.RefCode(); ok {
		_spec.SetField(subcontrol.FieldRefCode, field.TypeString, value)
	}
	if _u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEvidenceIDs(); len(nodes) > 0 && !_u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlObjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Narrative
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !_u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: subcontrol.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: subcontrol.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: subcontrol.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !_u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: subcontrol.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !_u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: subcontrol.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: subcontrol.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: subcontrol.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicySubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !_u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: subcontrol.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicySubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: subcontrol.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicySubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.ControlOwnerTable,
			Columns: []string{subcontrol.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.ControlOwnerTable,
			Columns: []string{subcontrol.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.DelegateTable,
			Columns: []string{subcontrol.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.DelegateTable,
			Columns: []string{subcontrol.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: []string{subcontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: []string{subcontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlImplementationsTable,
			Columns: subcontrol.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlImplementations
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlImplementationsTable,
			Columns: subcontrol.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlImplementationsTable,
			Columns: subcontrol.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ScheduledJobsTable,
			Columns: subcontrol.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledJobsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ScheduledJobsTable,
			Columns: subcontrol.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ScheduledJobsTable,
			Columns: subcontrol.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedToSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedToSubcontrolsTable,
			Columns: subcontrol.MappedToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedToSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.MappedToSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedToSubcontrolsTable,
			Columns: subcontrol.MappedToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedToSubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedToSubcontrolsTable,
			Columns: subcontrol.MappedToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedFromSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedFromSubcontrolsTable,
			Columns: subcontrol.MappedFromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedFromSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.MappedFromSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedFromSubcontrolsTable,
			Columns: subcontrol.MappedFromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedFromSubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedFromSubcontrolsTable,
			Columns: subcontrol.MappedFromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Subcontrol
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SubcontrolUpdateOne is the builder for updating a single Subcontrol entity.
type SubcontrolUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubcontrolMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubcontrolUpdateOne) SetUpdatedAt(v time.Time) *SubcontrolUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SubcontrolUpdateOne) ClearUpdatedAt() *SubcontrolUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *SubcontrolUpdateOne) SetUpdatedBy(v string) *SubcontrolUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableUpdatedBy(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *SubcontrolUpdateOne) ClearUpdatedBy() *SubcontrolUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubcontrolUpdateOne) SetDeletedAt(v time.Time) *SubcontrolUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableDeletedAt(v *time.Time) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubcontrolUpdateOne) ClearDeletedAt() *SubcontrolUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *SubcontrolUpdateOne) SetDeletedBy(v string) *SubcontrolUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableDeletedBy(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *SubcontrolUpdateOne) ClearDeletedBy() *SubcontrolUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *SubcontrolUpdateOne) SetTags(v []string) *SubcontrolUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *SubcontrolUpdateOne) AppendTags(v []string) *SubcontrolUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *SubcontrolUpdateOne) ClearTags() *SubcontrolUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetDescription sets the "description" field.
func (_u *SubcontrolUpdateOne) SetDescription(v string) *SubcontrolUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableDescription(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *SubcontrolUpdateOne) ClearDescription() *SubcontrolUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetReferenceID sets the "reference_id" field.
func (_u *SubcontrolUpdateOne) SetReferenceID(v string) *SubcontrolUpdateOne {
	_u.mutation.SetReferenceID(v)
	return _u
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableReferenceID(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetReferenceID(*v)
	}
	return _u
}

// ClearReferenceID clears the value of the "reference_id" field.
func (_u *SubcontrolUpdateOne) ClearReferenceID() *SubcontrolUpdateOne {
	_u.mutation.ClearReferenceID()
	return _u
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (_u *SubcontrolUpdateOne) SetAuditorReferenceID(v string) *SubcontrolUpdateOne {
	_u.mutation.SetAuditorReferenceID(v)
	return _u
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableAuditorReferenceID(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetAuditorReferenceID(*v)
	}
	return _u
}

// ClearAuditorReferenceID clears the value of the "auditor_reference_id" field.
func (_u *SubcontrolUpdateOne) ClearAuditorReferenceID() *SubcontrolUpdateOne {
	_u.mutation.ClearAuditorReferenceID()
	return _u
}

// SetStatus sets the "status" field.
func (_u *SubcontrolUpdateOne) SetStatus(v enums.ControlStatus) *SubcontrolUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableStatus(v *enums.ControlStatus) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *SubcontrolUpdateOne) ClearStatus() *SubcontrolUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetSource sets the "source" field.
func (_u *SubcontrolUpdateOne) SetSource(v enums.ControlSource) *SubcontrolUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableSource(v *enums.ControlSource) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *SubcontrolUpdateOne) ClearSource() *SubcontrolUpdateOne {
	_u.mutation.ClearSource()
	return _u
}

// SetReferenceFramework sets the "reference_framework" field.
func (_u *SubcontrolUpdateOne) SetReferenceFramework(v string) *SubcontrolUpdateOne {
	_u.mutation.SetReferenceFramework(v)
	return _u
}

// SetNillableReferenceFramework sets the "reference_framework" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableReferenceFramework(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetReferenceFramework(*v)
	}
	return _u
}

// ClearReferenceFramework clears the value of the "reference_framework" field.
func (_u *SubcontrolUpdateOne) ClearReferenceFramework() *SubcontrolUpdateOne {
	_u.mutation.ClearReferenceFramework()
	return _u
}

// SetControlType sets the "control_type" field.
func (_u *SubcontrolUpdateOne) SetControlType(v enums.ControlType) *SubcontrolUpdateOne {
	_u.mutation.SetControlType(v)
	return _u
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableControlType(v *enums.ControlType) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetControlType(*v)
	}
	return _u
}

// ClearControlType clears the value of the "control_type" field.
func (_u *SubcontrolUpdateOne) ClearControlType() *SubcontrolUpdateOne {
	_u.mutation.ClearControlType()
	return _u
}

// SetCategory sets the "category" field.
func (_u *SubcontrolUpdateOne) SetCategory(v string) *SubcontrolUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableCategory(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *SubcontrolUpdateOne) ClearCategory() *SubcontrolUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *SubcontrolUpdateOne) SetCategoryID(v string) *SubcontrolUpdateOne {
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableCategoryID(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// ClearCategoryID clears the value of the "category_id" field.
func (_u *SubcontrolUpdateOne) ClearCategoryID() *SubcontrolUpdateOne {
	_u.mutation.ClearCategoryID()
	return _u
}

// SetSubcategory sets the "subcategory" field.
func (_u *SubcontrolUpdateOne) SetSubcategory(v string) *SubcontrolUpdateOne {
	_u.mutation.SetSubcategory(v)
	return _u
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableSubcategory(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetSubcategory(*v)
	}
	return _u
}

// ClearSubcategory clears the value of the "subcategory" field.
func (_u *SubcontrolUpdateOne) ClearSubcategory() *SubcontrolUpdateOne {
	_u.mutation.ClearSubcategory()
	return _u
}

// SetMappedCategories sets the "mapped_categories" field.
func (_u *SubcontrolUpdateOne) SetMappedCategories(v []string) *SubcontrolUpdateOne {
	_u.mutation.SetMappedCategories(v)
	return _u
}

// AppendMappedCategories appends value to the "mapped_categories" field.
func (_u *SubcontrolUpdateOne) AppendMappedCategories(v []string) *SubcontrolUpdateOne {
	_u.mutation.AppendMappedCategories(v)
	return _u
}

// ClearMappedCategories clears the value of the "mapped_categories" field.
func (_u *SubcontrolUpdateOne) ClearMappedCategories() *SubcontrolUpdateOne {
	_u.mutation.ClearMappedCategories()
	return _u
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (_u *SubcontrolUpdateOne) SetAssessmentObjectives(v []models.AssessmentObjective) *SubcontrolUpdateOne {
	_u.mutation.SetAssessmentObjectives(v)
	return _u
}

// AppendAssessmentObjectives appends value to the "assessment_objectives" field.
func (_u *SubcontrolUpdateOne) AppendAssessmentObjectives(v []models.AssessmentObjective) *SubcontrolUpdateOne {
	_u.mutation.AppendAssessmentObjectives(v)
	return _u
}

// ClearAssessmentObjectives clears the value of the "assessment_objectives" field.
func (_u *SubcontrolUpdateOne) ClearAssessmentObjectives() *SubcontrolUpdateOne {
	_u.mutation.ClearAssessmentObjectives()
	return _u
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (_u *SubcontrolUpdateOne) SetAssessmentMethods(v []models.AssessmentMethod) *SubcontrolUpdateOne {
	_u.mutation.SetAssessmentMethods(v)
	return _u
}

// AppendAssessmentMethods appends value to the "assessment_methods" field.
func (_u *SubcontrolUpdateOne) AppendAssessmentMethods(v []models.AssessmentMethod) *SubcontrolUpdateOne {
	_u.mutation.AppendAssessmentMethods(v)
	return _u
}

// ClearAssessmentMethods clears the value of the "assessment_methods" field.
func (_u *SubcontrolUpdateOne) ClearAssessmentMethods() *SubcontrolUpdateOne {
	_u.mutation.ClearAssessmentMethods()
	return _u
}

// SetControlQuestions sets the "control_questions" field.
func (_u *SubcontrolUpdateOne) SetControlQuestions(v []string) *SubcontrolUpdateOne {
	_u.mutation.SetControlQuestions(v)
	return _u
}

// AppendControlQuestions appends value to the "control_questions" field.
func (_u *SubcontrolUpdateOne) AppendControlQuestions(v []string) *SubcontrolUpdateOne {
	_u.mutation.AppendControlQuestions(v)
	return _u
}

// ClearControlQuestions clears the value of the "control_questions" field.
func (_u *SubcontrolUpdateOne) ClearControlQuestions() *SubcontrolUpdateOne {
	_u.mutation.ClearControlQuestions()
	return _u
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (_u *SubcontrolUpdateOne) SetImplementationGuidance(v []models.ImplementationGuidance) *SubcontrolUpdateOne {
	_u.mutation.SetImplementationGuidance(v)
	return _u
}

// AppendImplementationGuidance appends value to the "implementation_guidance" field.
func (_u *SubcontrolUpdateOne) AppendImplementationGuidance(v []models.ImplementationGuidance) *SubcontrolUpdateOne {
	_u.mutation.AppendImplementationGuidance(v)
	return _u
}

// ClearImplementationGuidance clears the value of the "implementation_guidance" field.
func (_u *SubcontrolUpdateOne) ClearImplementationGuidance() *SubcontrolUpdateOne {
	_u.mutation.ClearImplementationGuidance()
	return _u
}

// SetExampleEvidence sets the "example_evidence" field.
func (_u *SubcontrolUpdateOne) SetExampleEvidence(v []models.ExampleEvidence) *SubcontrolUpdateOne {
	_u.mutation.SetExampleEvidence(v)
	return _u
}

// AppendExampleEvidence appends value to the "example_evidence" field.
func (_u *SubcontrolUpdateOne) AppendExampleEvidence(v []models.ExampleEvidence) *SubcontrolUpdateOne {
	_u.mutation.AppendExampleEvidence(v)
	return _u
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (_u *SubcontrolUpdateOne) ClearExampleEvidence() *SubcontrolUpdateOne {
	_u.mutation.ClearExampleEvidence()
	return _u
}

// SetReferences sets the "references" field.
func (_u *SubcontrolUpdateOne) SetReferences(v []models.Reference) *SubcontrolUpdateOne {
	_u.mutation.SetReferences(v)
	return _u
}

// AppendReferences appends value to the "references" field.
func (_u *SubcontrolUpdateOne) AppendReferences(v []models.Reference) *SubcontrolUpdateOne {
	_u.mutation.AppendReferences(v)
	return _u
}

// ClearReferences clears the value of the "references" field.
func (_u *SubcontrolUpdateOne) ClearReferences() *SubcontrolUpdateOne {
	_u.mutation.ClearReferences()
	return _u
}

// SetControlOwnerID sets the "control_owner_id" field.
func (_u *SubcontrolUpdateOne) SetControlOwnerID(v string) *SubcontrolUpdateOne {
	_u.mutation.SetControlOwnerID(v)
	return _u
}

// SetNillableControlOwnerID sets the "control_owner_id" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableControlOwnerID(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetControlOwnerID(*v)
	}
	return _u
}

// ClearControlOwnerID clears the value of the "control_owner_id" field.
func (_u *SubcontrolUpdateOne) ClearControlOwnerID() *SubcontrolUpdateOne {
	_u.mutation.ClearControlOwnerID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *SubcontrolUpdateOne) SetDelegateID(v string) *SubcontrolUpdateOne {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableDelegateID(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *SubcontrolUpdateOne) ClearDelegateID() *SubcontrolUpdateOne {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *SubcontrolUpdateOne) SetInternalNotes(v string) *SubcontrolUpdateOne {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableInternalNotes(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *SubcontrolUpdateOne) ClearInternalNotes() *SubcontrolUpdateOne {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *SubcontrolUpdateOne) SetSystemInternalID(v string) *SubcontrolUpdateOne {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableSystemInternalID(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *SubcontrolUpdateOne) ClearSystemInternalID() *SubcontrolUpdateOne {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetRefCode sets the "ref_code" field.
func (_u *SubcontrolUpdateOne) SetRefCode(v string) *SubcontrolUpdateOne {
	_u.mutation.SetRefCode(v)
	return _u
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableRefCode(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetRefCode(*v)
	}
	return _u
}

// SetControlID sets the "control_id" field.
func (_u *SubcontrolUpdateOne) SetControlID(v string) *SubcontrolUpdateOne {
	_u.mutation.SetControlID(v)
	return _u
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (_u *SubcontrolUpdateOne) SetNillableControlID(v *string) *SubcontrolUpdateOne {
	if v != nil {
		_u.SetControlID(*v)
	}
	return _u
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (_u *SubcontrolUpdateOne) AddEvidenceIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.AddEvidenceIDs(ids...)
	return _u
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (_u *SubcontrolUpdateOne) AddEvidence(v ...*Evidence) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEvidenceIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_u *SubcontrolUpdateOne) AddControlObjectiveIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.AddControlObjectiveIDs(ids...)
	return _u
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_u *SubcontrolUpdateOne) AddControlObjectives(v ...*ControlObjective) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlObjectiveIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *SubcontrolUpdateOne) AddTaskIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *SubcontrolUpdateOne) AddTasks(v ...*Task) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_u *SubcontrolUpdateOne) AddNarrativeIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.AddNarrativeIDs(ids...)
	return _u
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_u *SubcontrolUpdateOne) AddNarratives(v ...*Narrative) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *SubcontrolUpdateOne) AddRiskIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *SubcontrolUpdateOne) AddRisks(v ...*Risk) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_u *SubcontrolUpdateOne) AddActionPlanIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.AddActionPlanIDs(ids...)
	return _u
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_u *SubcontrolUpdateOne) AddActionPlans(v ...*ActionPlan) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActionPlanIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_u *SubcontrolUpdateOne) AddProcedureIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.AddProcedureIDs(ids...)
	return _u
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_u *SubcontrolUpdateOne) AddProcedures(v ...*Procedure) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_u *SubcontrolUpdateOne) AddInternalPolicyIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.AddInternalPolicyIDs(ids...)
	return _u
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_u *SubcontrolUpdateOne) AddInternalPolicies(v ...*InternalPolicy) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyIDs(ids...)
}

// SetControlOwner sets the "control_owner" edge to the Group entity.
func (_u *SubcontrolUpdateOne) SetControlOwner(v *Group) *SubcontrolUpdateOne {
	return _u.SetControlOwnerID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_u *SubcontrolUpdateOne) SetDelegate(v *Group) *SubcontrolUpdateOne {
	return _u.SetDelegateID(v.ID)
}

// SetControl sets the "control" edge to the Control entity.
func (_u *SubcontrolUpdateOne) SetControl(v *Control) *SubcontrolUpdateOne {
	return _u.SetControlID(v.ID)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_u *SubcontrolUpdateOne) AddControlImplementationIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.AddControlImplementationIDs(ids...)
	return _u
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_u *SubcontrolUpdateOne) AddControlImplementations(v ...*ControlImplementation) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlImplementationIDs(ids...)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (_u *SubcontrolUpdateOne) AddScheduledJobIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.AddScheduledJobIDs(ids...)
	return _u
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *SubcontrolUpdateOne) AddScheduledJobs(v ...*ScheduledJob) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScheduledJobIDs(ids...)
}

// AddMappedToSubcontrolIDs adds the "mapped_to_subcontrols" edge to the MappedControl entity by IDs.
func (_u *SubcontrolUpdateOne) AddMappedToSubcontrolIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.AddMappedToSubcontrolIDs(ids...)
	return _u
}

// AddMappedToSubcontrols adds the "mapped_to_subcontrols" edges to the MappedControl entity.
func (_u *SubcontrolUpdateOne) AddMappedToSubcontrols(v ...*MappedControl) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedToSubcontrolIDs(ids...)
}

// AddMappedFromSubcontrolIDs adds the "mapped_from_subcontrols" edge to the MappedControl entity by IDs.
func (_u *SubcontrolUpdateOne) AddMappedFromSubcontrolIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.AddMappedFromSubcontrolIDs(ids...)
	return _u
}

// AddMappedFromSubcontrols adds the "mapped_from_subcontrols" edges to the MappedControl entity.
func (_u *SubcontrolUpdateOne) AddMappedFromSubcontrols(v ...*MappedControl) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddMappedFromSubcontrolIDs(ids...)
}

// Mutation returns the SubcontrolMutation object of the builder.
func (_u *SubcontrolUpdateOne) Mutation() *SubcontrolMutation {
	return _u.mutation
}

// ClearEvidence clears all "evidence" edges to the Evidence entity.
func (_u *SubcontrolUpdateOne) ClearEvidence() *SubcontrolUpdateOne {
	_u.mutation.ClearEvidence()
	return _u
}

// RemoveEvidenceIDs removes the "evidence" edge to Evidence entities by IDs.
func (_u *SubcontrolUpdateOne) RemoveEvidenceIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.RemoveEvidenceIDs(ids...)
	return _u
}

// RemoveEvidence removes "evidence" edges to Evidence entities.
func (_u *SubcontrolUpdateOne) RemoveEvidence(v ...*Evidence) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEvidenceIDs(ids...)
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (_u *SubcontrolUpdateOne) ClearControlObjectives() *SubcontrolUpdateOne {
	_u.mutation.ClearControlObjectives()
	return _u
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (_u *SubcontrolUpdateOne) RemoveControlObjectiveIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.RemoveControlObjectiveIDs(ids...)
	return _u
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (_u *SubcontrolUpdateOne) RemoveControlObjectives(v ...*ControlObjective) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlObjectiveIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *SubcontrolUpdateOne) ClearTasks() *SubcontrolUpdateOne {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *SubcontrolUpdateOne) RemoveTaskIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *SubcontrolUpdateOne) RemoveTasks(v ...*Task) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (_u *SubcontrolUpdateOne) ClearNarratives() *SubcontrolUpdateOne {
	_u.mutation.ClearNarratives()
	return _u
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (_u *SubcontrolUpdateOne) RemoveNarrativeIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.RemoveNarrativeIDs(ids...)
	return _u
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (_u *SubcontrolUpdateOne) RemoveNarratives(v ...*Narrative) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *SubcontrolUpdateOne) ClearRisks() *SubcontrolUpdateOne {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *SubcontrolUpdateOne) RemoveRiskIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *SubcontrolUpdateOne) RemoveRisks(v ...*Risk) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (_u *SubcontrolUpdateOne) ClearActionPlans() *SubcontrolUpdateOne {
	_u.mutation.ClearActionPlans()
	return _u
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (_u *SubcontrolUpdateOne) RemoveActionPlanIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.RemoveActionPlanIDs(ids...)
	return _u
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (_u *SubcontrolUpdateOne) RemoveActionPlans(v ...*ActionPlan) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActionPlanIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (_u *SubcontrolUpdateOne) ClearProcedures() *SubcontrolUpdateOne {
	_u.mutation.ClearProcedures()
	return _u
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (_u *SubcontrolUpdateOne) RemoveProcedureIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.RemoveProcedureIDs(ids...)
	return _u
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (_u *SubcontrolUpdateOne) RemoveProcedures(v ...*Procedure) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (_u *SubcontrolUpdateOne) ClearInternalPolicies() *SubcontrolUpdateOne {
	_u.mutation.ClearInternalPolicies()
	return _u
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (_u *SubcontrolUpdateOne) RemoveInternalPolicyIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.RemoveInternalPolicyIDs(ids...)
	return _u
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (_u *SubcontrolUpdateOne) RemoveInternalPolicies(v ...*InternalPolicy) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyIDs(ids...)
}

// ClearControlOwner clears the "control_owner" edge to the Group entity.
func (_u *SubcontrolUpdateOne) ClearControlOwner() *SubcontrolUpdateOne {
	_u.mutation.ClearControlOwner()
	return _u
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (_u *SubcontrolUpdateOne) ClearDelegate() *SubcontrolUpdateOne {
	_u.mutation.ClearDelegate()
	return _u
}

// ClearControl clears the "control" edge to the Control entity.
func (_u *SubcontrolUpdateOne) ClearControl() *SubcontrolUpdateOne {
	_u.mutation.ClearControl()
	return _u
}

// ClearControlImplementations clears all "control_implementations" edges to the ControlImplementation entity.
func (_u *SubcontrolUpdateOne) ClearControlImplementations() *SubcontrolUpdateOne {
	_u.mutation.ClearControlImplementations()
	return _u
}

// RemoveControlImplementationIDs removes the "control_implementations" edge to ControlImplementation entities by IDs.
func (_u *SubcontrolUpdateOne) RemoveControlImplementationIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.RemoveControlImplementationIDs(ids...)
	return _u
}

// RemoveControlImplementations removes "control_implementations" edges to ControlImplementation entities.
func (_u *SubcontrolUpdateOne) RemoveControlImplementations(v ...*ControlImplementation) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlImplementationIDs(ids...)
}

// ClearScheduledJobs clears all "scheduled_jobs" edges to the ScheduledJob entity.
func (_u *SubcontrolUpdateOne) ClearScheduledJobs() *SubcontrolUpdateOne {
	_u.mutation.ClearScheduledJobs()
	return _u
}

// RemoveScheduledJobIDs removes the "scheduled_jobs" edge to ScheduledJob entities by IDs.
func (_u *SubcontrolUpdateOne) RemoveScheduledJobIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.RemoveScheduledJobIDs(ids...)
	return _u
}

// RemoveScheduledJobs removes "scheduled_jobs" edges to ScheduledJob entities.
func (_u *SubcontrolUpdateOne) RemoveScheduledJobs(v ...*ScheduledJob) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScheduledJobIDs(ids...)
}

// ClearMappedToSubcontrols clears all "mapped_to_subcontrols" edges to the MappedControl entity.
func (_u *SubcontrolUpdateOne) ClearMappedToSubcontrols() *SubcontrolUpdateOne {
	_u.mutation.ClearMappedToSubcontrols()
	return _u
}

// RemoveMappedToSubcontrolIDs removes the "mapped_to_subcontrols" edge to MappedControl entities by IDs.
func (_u *SubcontrolUpdateOne) RemoveMappedToSubcontrolIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.RemoveMappedToSubcontrolIDs(ids...)
	return _u
}

// RemoveMappedToSubcontrols removes "mapped_to_subcontrols" edges to MappedControl entities.
func (_u *SubcontrolUpdateOne) RemoveMappedToSubcontrols(v ...*MappedControl) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedToSubcontrolIDs(ids...)
}

// ClearMappedFromSubcontrols clears all "mapped_from_subcontrols" edges to the MappedControl entity.
func (_u *SubcontrolUpdateOne) ClearMappedFromSubcontrols() *SubcontrolUpdateOne {
	_u.mutation.ClearMappedFromSubcontrols()
	return _u
}

// RemoveMappedFromSubcontrolIDs removes the "mapped_from_subcontrols" edge to MappedControl entities by IDs.
func (_u *SubcontrolUpdateOne) RemoveMappedFromSubcontrolIDs(ids ...string) *SubcontrolUpdateOne {
	_u.mutation.RemoveMappedFromSubcontrolIDs(ids...)
	return _u
}

// RemoveMappedFromSubcontrols removes "mapped_from_subcontrols" edges to MappedControl entities.
func (_u *SubcontrolUpdateOne) RemoveMappedFromSubcontrols(v ...*MappedControl) *SubcontrolUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveMappedFromSubcontrolIDs(ids...)
}

// Where appends a list predicates to the SubcontrolUpdate builder.
func (_u *SubcontrolUpdateOne) Where(ps ...predicate.Subcontrol) *SubcontrolUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SubcontrolUpdateOne) Select(field string, fields ...string) *SubcontrolUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Subcontrol entity.
func (_u *SubcontrolUpdateOne) Save(ctx context.Context) (*Subcontrol, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubcontrolUpdateOne) SaveX(ctx context.Context) *Subcontrol {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SubcontrolUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubcontrolUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubcontrolUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if subcontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrol.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubcontrolUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := subcontrol.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Source(); ok {
		if err := subcontrol.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.source": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ControlType(); ok {
		if err := subcontrol.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.control_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RefCode(); ok {
		if err := subcontrol.RefCodeValidator(v); err != nil {
			return &ValidationError{Name: "ref_code", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.ref_code": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ControlID(); ok {
		if err := subcontrol.ControlIDValidator(v); err != nil {
			return &ValidationError{Name: "control_id", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.control_id": %w`, err)}
		}
	}
	if _u.mutation.ControlCleared() && len(_u.mutation.ControlIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Subcontrol.control"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *SubcontrolUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubcontrolUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *SubcontrolUpdateOne) sqlSave(ctx context.Context) (_node *Subcontrol, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subcontrol.Table, subcontrol.Columns, sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Subcontrol.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subcontrol.FieldID)
		for _, f := range fields {
			if !subcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(subcontrol.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(subcontrol.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(subcontrol.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(subcontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrol.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subcontrol.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrol.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(subcontrol.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(subcontrol.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(subcontrol.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(subcontrol.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(subcontrol.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.ReferenceID(); ok {
		_spec.SetField(subcontrol.FieldReferenceID, field.TypeString, value)
	}
	if _u.mutation.ReferenceIDCleared() {
		_spec.ClearField(subcontrol.FieldReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.AuditorReferenceID(); ok {
		_spec.SetField(subcontrol.FieldAuditorReferenceID, field.TypeString, value)
	}
	if _u.mutation.AuditorReferenceIDCleared() {
		_spec.ClearField(subcontrol.FieldAuditorReferenceID, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(subcontrol.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(subcontrol.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(subcontrol.FieldSource, field.TypeEnum, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(subcontrol.FieldSource, field.TypeEnum)
	}
	if value, ok := _u.mutation.ReferenceFramework(); ok {
		_spec.SetField(subcontrol.FieldReferenceFramework, field.TypeString, value)
	}
	if _u.mutation.ReferenceFrameworkCleared() {
		_spec.ClearField(subcontrol.FieldReferenceFramework, field.TypeString)
	}
	if value, ok := _u.mutation.ControlType(); ok {
		_spec.SetField(subcontrol.FieldControlType, field.TypeEnum, value)
	}
	if _u.mutation.ControlTypeCleared() {
		_spec.ClearField(subcontrol.FieldControlType, field.TypeEnum)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(subcontrol.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(subcontrol.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.CategoryID(); ok {
		_spec.SetField(subcontrol.FieldCategoryID, field.TypeString, value)
	}
	if _u.mutation.CategoryIDCleared() {
		_spec.ClearField(subcontrol.FieldCategoryID, field.TypeString)
	}
	if value, ok := _u.mutation.Subcategory(); ok {
		_spec.SetField(subcontrol.FieldSubcategory, field.TypeString, value)
	}
	if _u.mutation.SubcategoryCleared() {
		_spec.ClearField(subcontrol.FieldSubcategory, field.TypeString)
	}
	if value, ok := _u.mutation.MappedCategories(); ok {
		_spec.SetField(subcontrol.FieldMappedCategories, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedMappedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldMappedCategories, value)
		})
	}
	if _u.mutation.MappedCategoriesCleared() {
		_spec.ClearField(subcontrol.FieldMappedCategories, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentObjectives(); ok {
		_spec.SetField(subcontrol.FieldAssessmentObjectives, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentObjectives(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldAssessmentObjectives, value)
		})
	}
	if _u.mutation.AssessmentObjectivesCleared() {
		_spec.ClearField(subcontrol.FieldAssessmentObjectives, field.TypeJSON)
	}
	if value, ok := _u.mutation.AssessmentMethods(); ok {
		_spec.SetField(subcontrol.FieldAssessmentMethods, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAssessmentMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldAssessmentMethods, value)
		})
	}
	if _u.mutation.AssessmentMethodsCleared() {
		_spec.ClearField(subcontrol.FieldAssessmentMethods, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlQuestions(); ok {
		_spec.SetField(subcontrol.FieldControlQuestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldControlQuestions, value)
		})
	}
	if _u.mutation.ControlQuestionsCleared() {
		_spec.ClearField(subcontrol.FieldControlQuestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImplementationGuidance(); ok {
		_spec.SetField(subcontrol.FieldImplementationGuidance, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImplementationGuidance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldImplementationGuidance, value)
		})
	}
	if _u.mutation.ImplementationGuidanceCleared() {
		_spec.ClearField(subcontrol.FieldImplementationGuidance, field.TypeJSON)
	}
	if value, ok := _u.mutation.ExampleEvidence(); ok {
		_spec.SetField(subcontrol.FieldExampleEvidence, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedExampleEvidence(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldExampleEvidence, value)
		})
	}
	if _u.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(subcontrol.FieldExampleEvidence, field.TypeJSON)
	}
	if value, ok := _u.mutation.References(); ok {
		_spec.SetField(subcontrol.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldReferences, value)
		})
	}
	if _u.mutation.ReferencesCleared() {
		_spec.ClearField(subcontrol.FieldReferences, field.TypeJSON)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(subcontrol.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(subcontrol.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(subcontrol.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(subcontrol.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(subcontrol.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.RefCode(); ok {
		_spec.SetField(subcontrol.FieldRefCode, field.TypeString, value)
	}
	if _u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEvidenceIDs(); len(nodes) > 0 && !_u.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlObjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !_u.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Narrative
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !_u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: subcontrol.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: subcontrol.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: subcontrol.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !_u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: subcontrol.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !_u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: subcontrol.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: subcontrol.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: subcontrol.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicySubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !_u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: subcontrol.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicySubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: subcontrol.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicySubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.ControlOwnerTable,
			Columns: []string{subcontrol.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.ControlOwnerTable,
			Columns: []string{subcontrol.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.DelegateTable,
			Columns: []string{subcontrol.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.DelegateTable,
			Columns: []string{subcontrol.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: []string{subcontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: []string{subcontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlImplementationsTable,
			Columns: subcontrol.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlImplementations
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlImplementationsIDs(); len(nodes) > 0 && !_u.mutation.ControlImplementationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlImplementationsTable,
			Columns: subcontrol.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlImplementationsTable,
			Columns: subcontrol.ControlImplementationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolControlImplementations
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ScheduledJobsTable,
			Columns: subcontrol.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScheduledJobsIDs(); len(nodes) > 0 && !_u.mutation.ScheduledJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ScheduledJobsTable,
			Columns: subcontrol.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ScheduledJobsTable,
			Columns: subcontrol.ScheduledJobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedToSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedToSubcontrolsTable,
			Columns: subcontrol.MappedToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedToSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.MappedToSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedToSubcontrolsTable,
			Columns: subcontrol.MappedToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedToSubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedToSubcontrolsTable,
			Columns: subcontrol.MappedToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlToSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.MappedFromSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedFromSubcontrolsTable,
			Columns: subcontrol.MappedFromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedMappedFromSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.MappedFromSubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedFromSubcontrolsTable,
			Columns: subcontrol.MappedFromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MappedFromSubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedFromSubcontrolsTable,
			Columns: subcontrol.MappedFromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.MappedControlFromSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Subcontrol
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Subcontrol{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
