// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// SubcontrolUpdate is the builder for updating Subcontrol entities.
type SubcontrolUpdate struct {
	config
	hooks     []Hook
	mutation  *SubcontrolMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubcontrolUpdate builder.
func (su *SubcontrolUpdate) Where(ps ...predicate.Subcontrol) *SubcontrolUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubcontrolUpdate) SetUpdatedAt(t time.Time) *SubcontrolUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SubcontrolUpdate) ClearUpdatedAt() *SubcontrolUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SubcontrolUpdate) SetUpdatedBy(s string) *SubcontrolUpdate {
	su.mutation.SetUpdatedBy(s)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableUpdatedBy(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetUpdatedBy(*s)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SubcontrolUpdate) ClearUpdatedBy() *SubcontrolUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SubcontrolUpdate) SetDeletedAt(t time.Time) *SubcontrolUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableDeletedAt(t *time.Time) *SubcontrolUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SubcontrolUpdate) ClearDeletedAt() *SubcontrolUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetDeletedBy sets the "deleted_by" field.
func (su *SubcontrolUpdate) SetDeletedBy(s string) *SubcontrolUpdate {
	su.mutation.SetDeletedBy(s)
	return su
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableDeletedBy(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetDeletedBy(*s)
	}
	return su
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (su *SubcontrolUpdate) ClearDeletedBy() *SubcontrolUpdate {
	su.mutation.ClearDeletedBy()
	return su
}

// SetTags sets the "tags" field.
func (su *SubcontrolUpdate) SetTags(s []string) *SubcontrolUpdate {
	su.mutation.SetTags(s)
	return su
}

// AppendTags appends s to the "tags" field.
func (su *SubcontrolUpdate) AppendTags(s []string) *SubcontrolUpdate {
	su.mutation.AppendTags(s)
	return su
}

// ClearTags clears the value of the "tags" field.
func (su *SubcontrolUpdate) ClearTags() *SubcontrolUpdate {
	su.mutation.ClearTags()
	return su
}

// SetName sets the "name" field.
func (su *SubcontrolUpdate) SetName(s string) *SubcontrolUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableName(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SubcontrolUpdate) SetDescription(s string) *SubcontrolUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableDescription(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SubcontrolUpdate) ClearDescription() *SubcontrolUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetStatus sets the "status" field.
func (su *SubcontrolUpdate) SetStatus(s string) *SubcontrolUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableStatus(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// ClearStatus clears the value of the "status" field.
func (su *SubcontrolUpdate) ClearStatus() *SubcontrolUpdate {
	su.mutation.ClearStatus()
	return su
}

// SetSubcontrolType sets the "subcontrol_type" field.
func (su *SubcontrolUpdate) SetSubcontrolType(s string) *SubcontrolUpdate {
	su.mutation.SetSubcontrolType(s)
	return su
}

// SetNillableSubcontrolType sets the "subcontrol_type" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableSubcontrolType(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetSubcontrolType(*s)
	}
	return su
}

// ClearSubcontrolType clears the value of the "subcontrol_type" field.
func (su *SubcontrolUpdate) ClearSubcontrolType() *SubcontrolUpdate {
	su.mutation.ClearSubcontrolType()
	return su
}

// SetVersion sets the "version" field.
func (su *SubcontrolUpdate) SetVersion(s string) *SubcontrolUpdate {
	su.mutation.SetVersion(s)
	return su
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableVersion(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetVersion(*s)
	}
	return su
}

// ClearVersion clears the value of the "version" field.
func (su *SubcontrolUpdate) ClearVersion() *SubcontrolUpdate {
	su.mutation.ClearVersion()
	return su
}

// SetSubcontrolNumber sets the "subcontrol_number" field.
func (su *SubcontrolUpdate) SetSubcontrolNumber(s string) *SubcontrolUpdate {
	su.mutation.SetSubcontrolNumber(s)
	return su
}

// SetNillableSubcontrolNumber sets the "subcontrol_number" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableSubcontrolNumber(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetSubcontrolNumber(*s)
	}
	return su
}

// ClearSubcontrolNumber clears the value of the "subcontrol_number" field.
func (su *SubcontrolUpdate) ClearSubcontrolNumber() *SubcontrolUpdate {
	su.mutation.ClearSubcontrolNumber()
	return su
}

// SetFamily sets the "family" field.
func (su *SubcontrolUpdate) SetFamily(s string) *SubcontrolUpdate {
	su.mutation.SetFamily(s)
	return su
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableFamily(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetFamily(*s)
	}
	return su
}

// ClearFamily clears the value of the "family" field.
func (su *SubcontrolUpdate) ClearFamily() *SubcontrolUpdate {
	su.mutation.ClearFamily()
	return su
}

// SetClass sets the "class" field.
func (su *SubcontrolUpdate) SetClass(s string) *SubcontrolUpdate {
	su.mutation.SetClass(s)
	return su
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableClass(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetClass(*s)
	}
	return su
}

// ClearClass clears the value of the "class" field.
func (su *SubcontrolUpdate) ClearClass() *SubcontrolUpdate {
	su.mutation.ClearClass()
	return su
}

// SetSource sets the "source" field.
func (su *SubcontrolUpdate) SetSource(s string) *SubcontrolUpdate {
	su.mutation.SetSource(s)
	return su
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableSource(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetSource(*s)
	}
	return su
}

// ClearSource clears the value of the "source" field.
func (su *SubcontrolUpdate) ClearSource() *SubcontrolUpdate {
	su.mutation.ClearSource()
	return su
}

// SetMappedFrameworks sets the "mapped_frameworks" field.
func (su *SubcontrolUpdate) SetMappedFrameworks(s string) *SubcontrolUpdate {
	su.mutation.SetMappedFrameworks(s)
	return su
}

// SetNillableMappedFrameworks sets the "mapped_frameworks" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableMappedFrameworks(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetMappedFrameworks(*s)
	}
	return su
}

// ClearMappedFrameworks clears the value of the "mapped_frameworks" field.
func (su *SubcontrolUpdate) ClearMappedFrameworks() *SubcontrolUpdate {
	su.mutation.ClearMappedFrameworks()
	return su
}

// SetImplementationEvidence sets the "implementation_evidence" field.
func (su *SubcontrolUpdate) SetImplementationEvidence(s string) *SubcontrolUpdate {
	su.mutation.SetImplementationEvidence(s)
	return su
}

// SetNillableImplementationEvidence sets the "implementation_evidence" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableImplementationEvidence(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetImplementationEvidence(*s)
	}
	return su
}

// ClearImplementationEvidence clears the value of the "implementation_evidence" field.
func (su *SubcontrolUpdate) ClearImplementationEvidence() *SubcontrolUpdate {
	su.mutation.ClearImplementationEvidence()
	return su
}

// SetImplementationStatus sets the "implementation_status" field.
func (su *SubcontrolUpdate) SetImplementationStatus(s string) *SubcontrolUpdate {
	su.mutation.SetImplementationStatus(s)
	return su
}

// SetNillableImplementationStatus sets the "implementation_status" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableImplementationStatus(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetImplementationStatus(*s)
	}
	return su
}

// ClearImplementationStatus clears the value of the "implementation_status" field.
func (su *SubcontrolUpdate) ClearImplementationStatus() *SubcontrolUpdate {
	su.mutation.ClearImplementationStatus()
	return su
}

// SetImplementationDate sets the "implementation_date" field.
func (su *SubcontrolUpdate) SetImplementationDate(t time.Time) *SubcontrolUpdate {
	su.mutation.SetImplementationDate(t)
	return su
}

// SetNillableImplementationDate sets the "implementation_date" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableImplementationDate(t *time.Time) *SubcontrolUpdate {
	if t != nil {
		su.SetImplementationDate(*t)
	}
	return su
}

// ClearImplementationDate clears the value of the "implementation_date" field.
func (su *SubcontrolUpdate) ClearImplementationDate() *SubcontrolUpdate {
	su.mutation.ClearImplementationDate()
	return su
}

// SetImplementationVerification sets the "implementation_verification" field.
func (su *SubcontrolUpdate) SetImplementationVerification(s string) *SubcontrolUpdate {
	su.mutation.SetImplementationVerification(s)
	return su
}

// SetNillableImplementationVerification sets the "implementation_verification" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableImplementationVerification(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetImplementationVerification(*s)
	}
	return su
}

// ClearImplementationVerification clears the value of the "implementation_verification" field.
func (su *SubcontrolUpdate) ClearImplementationVerification() *SubcontrolUpdate {
	su.mutation.ClearImplementationVerification()
	return su
}

// SetImplementationVerificationDate sets the "implementation_verification_date" field.
func (su *SubcontrolUpdate) SetImplementationVerificationDate(t time.Time) *SubcontrolUpdate {
	su.mutation.SetImplementationVerificationDate(t)
	return su
}

// SetNillableImplementationVerificationDate sets the "implementation_verification_date" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableImplementationVerificationDate(t *time.Time) *SubcontrolUpdate {
	if t != nil {
		su.SetImplementationVerificationDate(*t)
	}
	return su
}

// ClearImplementationVerificationDate clears the value of the "implementation_verification_date" field.
func (su *SubcontrolUpdate) ClearImplementationVerificationDate() *SubcontrolUpdate {
	su.mutation.ClearImplementationVerificationDate()
	return su
}

// SetDetails sets the "details" field.
func (su *SubcontrolUpdate) SetDetails(m map[string]interface{}) *SubcontrolUpdate {
	su.mutation.SetDetails(m)
	return su
}

// ClearDetails clears the value of the "details" field.
func (su *SubcontrolUpdate) ClearDetails() *SubcontrolUpdate {
	su.mutation.ClearDetails()
	return su
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (su *SubcontrolUpdate) AddControlIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddControlIDs(ids...)
	return su
}

// AddControl adds the "control" edges to the Control entity.
func (su *SubcontrolUpdate) AddControl(c ...*Control) *SubcontrolUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddControlIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (su *SubcontrolUpdate) AddUserIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddUserIDs(ids...)
	return su
}

// AddUser adds the "user" edges to the User entity.
func (su *SubcontrolUpdate) AddUser(u ...*User) *SubcontrolUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.AddUserIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (su *SubcontrolUpdate) AddTaskIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddTaskIDs(ids...)
	return su
}

// AddTasks adds the "tasks" edges to the Task entity.
func (su *SubcontrolUpdate) AddTasks(t ...*Task) *SubcontrolUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTaskIDs(ids...)
}

// SetNotesID sets the "notes" edge to the Note entity by ID.
func (su *SubcontrolUpdate) SetNotesID(id string) *SubcontrolUpdate {
	su.mutation.SetNotesID(id)
	return su
}

// SetNillableNotesID sets the "notes" edge to the Note entity by ID if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableNotesID(id *string) *SubcontrolUpdate {
	if id != nil {
		su = su.SetNotesID(*id)
	}
	return su
}

// SetNotes sets the "notes" edge to the Note entity.
func (su *SubcontrolUpdate) SetNotes(n *Note) *SubcontrolUpdate {
	return su.SetNotesID(n.ID)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (su *SubcontrolUpdate) AddProgramIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddProgramIDs(ids...)
	return su
}

// AddPrograms adds the "programs" edges to the Program entity.
func (su *SubcontrolUpdate) AddPrograms(p ...*Program) *SubcontrolUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProgramIDs(ids...)
}

// Mutation returns the SubcontrolMutation object of the builder.
func (su *SubcontrolUpdate) Mutation() *SubcontrolMutation {
	return su.mutation
}

// ClearControl clears all "control" edges to the Control entity.
func (su *SubcontrolUpdate) ClearControl() *SubcontrolUpdate {
	su.mutation.ClearControl()
	return su
}

// RemoveControlIDs removes the "control" edge to Control entities by IDs.
func (su *SubcontrolUpdate) RemoveControlIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveControlIDs(ids...)
	return su
}

// RemoveControl removes "control" edges to Control entities.
func (su *SubcontrolUpdate) RemoveControl(c ...*Control) *SubcontrolUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveControlIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (su *SubcontrolUpdate) ClearUser() *SubcontrolUpdate {
	su.mutation.ClearUser()
	return su
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (su *SubcontrolUpdate) RemoveUserIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveUserIDs(ids...)
	return su
}

// RemoveUser removes "user" edges to User entities.
func (su *SubcontrolUpdate) RemoveUser(u ...*User) *SubcontrolUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return su.RemoveUserIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (su *SubcontrolUpdate) ClearTasks() *SubcontrolUpdate {
	su.mutation.ClearTasks()
	return su
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (su *SubcontrolUpdate) RemoveTaskIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveTaskIDs(ids...)
	return su
}

// RemoveTasks removes "tasks" edges to Task entities.
func (su *SubcontrolUpdate) RemoveTasks(t ...*Task) *SubcontrolUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTaskIDs(ids...)
}

// ClearNotes clears the "notes" edge to the Note entity.
func (su *SubcontrolUpdate) ClearNotes() *SubcontrolUpdate {
	su.mutation.ClearNotes()
	return su
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (su *SubcontrolUpdate) ClearPrograms() *SubcontrolUpdate {
	su.mutation.ClearPrograms()
	return su
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (su *SubcontrolUpdate) RemoveProgramIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveProgramIDs(ids...)
	return su
}

// RemovePrograms removes "programs" edges to Program entities.
func (su *SubcontrolUpdate) RemovePrograms(p ...*Program) *SubcontrolUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubcontrolUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubcontrolUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubcontrolUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubcontrolUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubcontrolUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		if subcontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrol.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SubcontrolUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubcontrolUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SubcontrolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subcontrol.Table, subcontrol.Columns, sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(subcontrol.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(subcontrol.FieldUpdatedAt, field.TypeTime)
	}
	if su.mutation.CreatedByCleared() {
		_spec.ClearField(subcontrol.FieldCreatedBy, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(subcontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrol.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(subcontrol.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrol.FieldDeletedBy, field.TypeString, value)
	}
	if su.mutation.DeletedByCleared() {
		_spec.ClearField(subcontrol.FieldDeletedBy, field.TypeString)
	}
	if value, ok := su.mutation.Tags(); ok {
		_spec.SetField(subcontrol.FieldTags, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldTags, value)
		})
	}
	if su.mutation.TagsCleared() {
		_spec.ClearField(subcontrol.FieldTags, field.TypeJSON)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(subcontrol.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(subcontrol.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(subcontrol.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(subcontrol.FieldStatus, field.TypeString, value)
	}
	if su.mutation.StatusCleared() {
		_spec.ClearField(subcontrol.FieldStatus, field.TypeString)
	}
	if value, ok := su.mutation.SubcontrolType(); ok {
		_spec.SetField(subcontrol.FieldSubcontrolType, field.TypeString, value)
	}
	if su.mutation.SubcontrolTypeCleared() {
		_spec.ClearField(subcontrol.FieldSubcontrolType, field.TypeString)
	}
	if value, ok := su.mutation.Version(); ok {
		_spec.SetField(subcontrol.FieldVersion, field.TypeString, value)
	}
	if su.mutation.VersionCleared() {
		_spec.ClearField(subcontrol.FieldVersion, field.TypeString)
	}
	if value, ok := su.mutation.SubcontrolNumber(); ok {
		_spec.SetField(subcontrol.FieldSubcontrolNumber, field.TypeString, value)
	}
	if su.mutation.SubcontrolNumberCleared() {
		_spec.ClearField(subcontrol.FieldSubcontrolNumber, field.TypeString)
	}
	if value, ok := su.mutation.Family(); ok {
		_spec.SetField(subcontrol.FieldFamily, field.TypeString, value)
	}
	if su.mutation.FamilyCleared() {
		_spec.ClearField(subcontrol.FieldFamily, field.TypeString)
	}
	if value, ok := su.mutation.Class(); ok {
		_spec.SetField(subcontrol.FieldClass, field.TypeString, value)
	}
	if su.mutation.ClassCleared() {
		_spec.ClearField(subcontrol.FieldClass, field.TypeString)
	}
	if value, ok := su.mutation.Source(); ok {
		_spec.SetField(subcontrol.FieldSource, field.TypeString, value)
	}
	if su.mutation.SourceCleared() {
		_spec.ClearField(subcontrol.FieldSource, field.TypeString)
	}
	if value, ok := su.mutation.MappedFrameworks(); ok {
		_spec.SetField(subcontrol.FieldMappedFrameworks, field.TypeString, value)
	}
	if su.mutation.MappedFrameworksCleared() {
		_spec.ClearField(subcontrol.FieldMappedFrameworks, field.TypeString)
	}
	if value, ok := su.mutation.ImplementationEvidence(); ok {
		_spec.SetField(subcontrol.FieldImplementationEvidence, field.TypeString, value)
	}
	if su.mutation.ImplementationEvidenceCleared() {
		_spec.ClearField(subcontrol.FieldImplementationEvidence, field.TypeString)
	}
	if value, ok := su.mutation.ImplementationStatus(); ok {
		_spec.SetField(subcontrol.FieldImplementationStatus, field.TypeString, value)
	}
	if su.mutation.ImplementationStatusCleared() {
		_spec.ClearField(subcontrol.FieldImplementationStatus, field.TypeString)
	}
	if value, ok := su.mutation.ImplementationDate(); ok {
		_spec.SetField(subcontrol.FieldImplementationDate, field.TypeTime, value)
	}
	if su.mutation.ImplementationDateCleared() {
		_spec.ClearField(subcontrol.FieldImplementationDate, field.TypeTime)
	}
	if value, ok := su.mutation.ImplementationVerification(); ok {
		_spec.SetField(subcontrol.FieldImplementationVerification, field.TypeString, value)
	}
	if su.mutation.ImplementationVerificationCleared() {
		_spec.ClearField(subcontrol.FieldImplementationVerification, field.TypeString)
	}
	if value, ok := su.mutation.ImplementationVerificationDate(); ok {
		_spec.SetField(subcontrol.FieldImplementationVerificationDate, field.TypeTime, value)
	}
	if su.mutation.ImplementationVerificationDateCleared() {
		_spec.ClearField(subcontrol.FieldImplementationVerificationDate, field.TypeTime)
	}
	if value, ok := su.mutation.Details(); ok {
		_spec.SetField(subcontrol.FieldDetails, field.TypeJSON, value)
	}
	if su.mutation.DetailsCleared() {
		_spec.ClearField(subcontrol.FieldDetails, field.TypeJSON)
	}
	if su.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: subcontrol.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ControlSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedControlIDs(); len(nodes) > 0 && !su.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: subcontrol.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: subcontrol.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.UserTable,
			Columns: subcontrol.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.UserSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedUserIDs(); len(nodes) > 0 && !su.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.UserTable,
			Columns: subcontrol.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.UserSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.UserTable,
			Columns: subcontrol.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.UserSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.SubcontrolTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTasksIDs(); len(nodes) > 0 && !su.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.NotesTable,
			Columns: []string{subcontrol.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.NotesTable,
			Columns: []string{subcontrol.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ProgramsTable,
			Columns: subcontrol.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ProgramSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !su.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ProgramsTable,
			Columns: subcontrol.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ProgramSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ProgramsTable,
			Columns: subcontrol.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ProgramSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = su.schemaConfig.Subcontrol
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubcontrolUpdateOne is the builder for updating a single Subcontrol entity.
type SubcontrolUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubcontrolMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubcontrolUpdateOne) SetUpdatedAt(t time.Time) *SubcontrolUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SubcontrolUpdateOne) ClearUpdatedAt() *SubcontrolUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SubcontrolUpdateOne) SetUpdatedBy(s string) *SubcontrolUpdateOne {
	suo.mutation.SetUpdatedBy(s)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableUpdatedBy(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetUpdatedBy(*s)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SubcontrolUpdateOne) ClearUpdatedBy() *SubcontrolUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SubcontrolUpdateOne) SetDeletedAt(t time.Time) *SubcontrolUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableDeletedAt(t *time.Time) *SubcontrolUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SubcontrolUpdateOne) ClearDeletedAt() *SubcontrolUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetDeletedBy sets the "deleted_by" field.
func (suo *SubcontrolUpdateOne) SetDeletedBy(s string) *SubcontrolUpdateOne {
	suo.mutation.SetDeletedBy(s)
	return suo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableDeletedBy(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetDeletedBy(*s)
	}
	return suo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (suo *SubcontrolUpdateOne) ClearDeletedBy() *SubcontrolUpdateOne {
	suo.mutation.ClearDeletedBy()
	return suo
}

// SetTags sets the "tags" field.
func (suo *SubcontrolUpdateOne) SetTags(s []string) *SubcontrolUpdateOne {
	suo.mutation.SetTags(s)
	return suo
}

// AppendTags appends s to the "tags" field.
func (suo *SubcontrolUpdateOne) AppendTags(s []string) *SubcontrolUpdateOne {
	suo.mutation.AppendTags(s)
	return suo
}

// ClearTags clears the value of the "tags" field.
func (suo *SubcontrolUpdateOne) ClearTags() *SubcontrolUpdateOne {
	suo.mutation.ClearTags()
	return suo
}

// SetName sets the "name" field.
func (suo *SubcontrolUpdateOne) SetName(s string) *SubcontrolUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableName(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SubcontrolUpdateOne) SetDescription(s string) *SubcontrolUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableDescription(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SubcontrolUpdateOne) ClearDescription() *SubcontrolUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetStatus sets the "status" field.
func (suo *SubcontrolUpdateOne) SetStatus(s string) *SubcontrolUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableStatus(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// ClearStatus clears the value of the "status" field.
func (suo *SubcontrolUpdateOne) ClearStatus() *SubcontrolUpdateOne {
	suo.mutation.ClearStatus()
	return suo
}

// SetSubcontrolType sets the "subcontrol_type" field.
func (suo *SubcontrolUpdateOne) SetSubcontrolType(s string) *SubcontrolUpdateOne {
	suo.mutation.SetSubcontrolType(s)
	return suo
}

// SetNillableSubcontrolType sets the "subcontrol_type" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableSubcontrolType(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetSubcontrolType(*s)
	}
	return suo
}

// ClearSubcontrolType clears the value of the "subcontrol_type" field.
func (suo *SubcontrolUpdateOne) ClearSubcontrolType() *SubcontrolUpdateOne {
	suo.mutation.ClearSubcontrolType()
	return suo
}

// SetVersion sets the "version" field.
func (suo *SubcontrolUpdateOne) SetVersion(s string) *SubcontrolUpdateOne {
	suo.mutation.SetVersion(s)
	return suo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableVersion(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetVersion(*s)
	}
	return suo
}

// ClearVersion clears the value of the "version" field.
func (suo *SubcontrolUpdateOne) ClearVersion() *SubcontrolUpdateOne {
	suo.mutation.ClearVersion()
	return suo
}

// SetSubcontrolNumber sets the "subcontrol_number" field.
func (suo *SubcontrolUpdateOne) SetSubcontrolNumber(s string) *SubcontrolUpdateOne {
	suo.mutation.SetSubcontrolNumber(s)
	return suo
}

// SetNillableSubcontrolNumber sets the "subcontrol_number" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableSubcontrolNumber(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetSubcontrolNumber(*s)
	}
	return suo
}

// ClearSubcontrolNumber clears the value of the "subcontrol_number" field.
func (suo *SubcontrolUpdateOne) ClearSubcontrolNumber() *SubcontrolUpdateOne {
	suo.mutation.ClearSubcontrolNumber()
	return suo
}

// SetFamily sets the "family" field.
func (suo *SubcontrolUpdateOne) SetFamily(s string) *SubcontrolUpdateOne {
	suo.mutation.SetFamily(s)
	return suo
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableFamily(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetFamily(*s)
	}
	return suo
}

// ClearFamily clears the value of the "family" field.
func (suo *SubcontrolUpdateOne) ClearFamily() *SubcontrolUpdateOne {
	suo.mutation.ClearFamily()
	return suo
}

// SetClass sets the "class" field.
func (suo *SubcontrolUpdateOne) SetClass(s string) *SubcontrolUpdateOne {
	suo.mutation.SetClass(s)
	return suo
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableClass(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetClass(*s)
	}
	return suo
}

// ClearClass clears the value of the "class" field.
func (suo *SubcontrolUpdateOne) ClearClass() *SubcontrolUpdateOne {
	suo.mutation.ClearClass()
	return suo
}

// SetSource sets the "source" field.
func (suo *SubcontrolUpdateOne) SetSource(s string) *SubcontrolUpdateOne {
	suo.mutation.SetSource(s)
	return suo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableSource(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetSource(*s)
	}
	return suo
}

// ClearSource clears the value of the "source" field.
func (suo *SubcontrolUpdateOne) ClearSource() *SubcontrolUpdateOne {
	suo.mutation.ClearSource()
	return suo
}

// SetMappedFrameworks sets the "mapped_frameworks" field.
func (suo *SubcontrolUpdateOne) SetMappedFrameworks(s string) *SubcontrolUpdateOne {
	suo.mutation.SetMappedFrameworks(s)
	return suo
}

// SetNillableMappedFrameworks sets the "mapped_frameworks" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableMappedFrameworks(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetMappedFrameworks(*s)
	}
	return suo
}

// ClearMappedFrameworks clears the value of the "mapped_frameworks" field.
func (suo *SubcontrolUpdateOne) ClearMappedFrameworks() *SubcontrolUpdateOne {
	suo.mutation.ClearMappedFrameworks()
	return suo
}

// SetImplementationEvidence sets the "implementation_evidence" field.
func (suo *SubcontrolUpdateOne) SetImplementationEvidence(s string) *SubcontrolUpdateOne {
	suo.mutation.SetImplementationEvidence(s)
	return suo
}

// SetNillableImplementationEvidence sets the "implementation_evidence" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableImplementationEvidence(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetImplementationEvidence(*s)
	}
	return suo
}

// ClearImplementationEvidence clears the value of the "implementation_evidence" field.
func (suo *SubcontrolUpdateOne) ClearImplementationEvidence() *SubcontrolUpdateOne {
	suo.mutation.ClearImplementationEvidence()
	return suo
}

// SetImplementationStatus sets the "implementation_status" field.
func (suo *SubcontrolUpdateOne) SetImplementationStatus(s string) *SubcontrolUpdateOne {
	suo.mutation.SetImplementationStatus(s)
	return suo
}

// SetNillableImplementationStatus sets the "implementation_status" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableImplementationStatus(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetImplementationStatus(*s)
	}
	return suo
}

// ClearImplementationStatus clears the value of the "implementation_status" field.
func (suo *SubcontrolUpdateOne) ClearImplementationStatus() *SubcontrolUpdateOne {
	suo.mutation.ClearImplementationStatus()
	return suo
}

// SetImplementationDate sets the "implementation_date" field.
func (suo *SubcontrolUpdateOne) SetImplementationDate(t time.Time) *SubcontrolUpdateOne {
	suo.mutation.SetImplementationDate(t)
	return suo
}

// SetNillableImplementationDate sets the "implementation_date" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableImplementationDate(t *time.Time) *SubcontrolUpdateOne {
	if t != nil {
		suo.SetImplementationDate(*t)
	}
	return suo
}

// ClearImplementationDate clears the value of the "implementation_date" field.
func (suo *SubcontrolUpdateOne) ClearImplementationDate() *SubcontrolUpdateOne {
	suo.mutation.ClearImplementationDate()
	return suo
}

// SetImplementationVerification sets the "implementation_verification" field.
func (suo *SubcontrolUpdateOne) SetImplementationVerification(s string) *SubcontrolUpdateOne {
	suo.mutation.SetImplementationVerification(s)
	return suo
}

// SetNillableImplementationVerification sets the "implementation_verification" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableImplementationVerification(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetImplementationVerification(*s)
	}
	return suo
}

// ClearImplementationVerification clears the value of the "implementation_verification" field.
func (suo *SubcontrolUpdateOne) ClearImplementationVerification() *SubcontrolUpdateOne {
	suo.mutation.ClearImplementationVerification()
	return suo
}

// SetImplementationVerificationDate sets the "implementation_verification_date" field.
func (suo *SubcontrolUpdateOne) SetImplementationVerificationDate(t time.Time) *SubcontrolUpdateOne {
	suo.mutation.SetImplementationVerificationDate(t)
	return suo
}

// SetNillableImplementationVerificationDate sets the "implementation_verification_date" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableImplementationVerificationDate(t *time.Time) *SubcontrolUpdateOne {
	if t != nil {
		suo.SetImplementationVerificationDate(*t)
	}
	return suo
}

// ClearImplementationVerificationDate clears the value of the "implementation_verification_date" field.
func (suo *SubcontrolUpdateOne) ClearImplementationVerificationDate() *SubcontrolUpdateOne {
	suo.mutation.ClearImplementationVerificationDate()
	return suo
}

// SetDetails sets the "details" field.
func (suo *SubcontrolUpdateOne) SetDetails(m map[string]interface{}) *SubcontrolUpdateOne {
	suo.mutation.SetDetails(m)
	return suo
}

// ClearDetails clears the value of the "details" field.
func (suo *SubcontrolUpdateOne) ClearDetails() *SubcontrolUpdateOne {
	suo.mutation.ClearDetails()
	return suo
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (suo *SubcontrolUpdateOne) AddControlIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddControlIDs(ids...)
	return suo
}

// AddControl adds the "control" edges to the Control entity.
func (suo *SubcontrolUpdateOne) AddControl(c ...*Control) *SubcontrolUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddControlIDs(ids...)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (suo *SubcontrolUpdateOne) AddUserIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddUserIDs(ids...)
	return suo
}

// AddUser adds the "user" edges to the User entity.
func (suo *SubcontrolUpdateOne) AddUser(u ...*User) *SubcontrolUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.AddUserIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (suo *SubcontrolUpdateOne) AddTaskIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddTaskIDs(ids...)
	return suo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (suo *SubcontrolUpdateOne) AddTasks(t ...*Task) *SubcontrolUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTaskIDs(ids...)
}

// SetNotesID sets the "notes" edge to the Note entity by ID.
func (suo *SubcontrolUpdateOne) SetNotesID(id string) *SubcontrolUpdateOne {
	suo.mutation.SetNotesID(id)
	return suo
}

// SetNillableNotesID sets the "notes" edge to the Note entity by ID if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableNotesID(id *string) *SubcontrolUpdateOne {
	if id != nil {
		suo = suo.SetNotesID(*id)
	}
	return suo
}

// SetNotes sets the "notes" edge to the Note entity.
func (suo *SubcontrolUpdateOne) SetNotes(n *Note) *SubcontrolUpdateOne {
	return suo.SetNotesID(n.ID)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (suo *SubcontrolUpdateOne) AddProgramIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddProgramIDs(ids...)
	return suo
}

// AddPrograms adds the "programs" edges to the Program entity.
func (suo *SubcontrolUpdateOne) AddPrograms(p ...*Program) *SubcontrolUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProgramIDs(ids...)
}

// Mutation returns the SubcontrolMutation object of the builder.
func (suo *SubcontrolUpdateOne) Mutation() *SubcontrolMutation {
	return suo.mutation
}

// ClearControl clears all "control" edges to the Control entity.
func (suo *SubcontrolUpdateOne) ClearControl() *SubcontrolUpdateOne {
	suo.mutation.ClearControl()
	return suo
}

// RemoveControlIDs removes the "control" edge to Control entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveControlIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveControlIDs(ids...)
	return suo
}

// RemoveControl removes "control" edges to Control entities.
func (suo *SubcontrolUpdateOne) RemoveControl(c ...*Control) *SubcontrolUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveControlIDs(ids...)
}

// ClearUser clears all "user" edges to the User entity.
func (suo *SubcontrolUpdateOne) ClearUser() *SubcontrolUpdateOne {
	suo.mutation.ClearUser()
	return suo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveUserIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveUserIDs(ids...)
	return suo
}

// RemoveUser removes "user" edges to User entities.
func (suo *SubcontrolUpdateOne) RemoveUser(u ...*User) *SubcontrolUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return suo.RemoveUserIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (suo *SubcontrolUpdateOne) ClearTasks() *SubcontrolUpdateOne {
	suo.mutation.ClearTasks()
	return suo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveTaskIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveTaskIDs(ids...)
	return suo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (suo *SubcontrolUpdateOne) RemoveTasks(t ...*Task) *SubcontrolUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTaskIDs(ids...)
}

// ClearNotes clears the "notes" edge to the Note entity.
func (suo *SubcontrolUpdateOne) ClearNotes() *SubcontrolUpdateOne {
	suo.mutation.ClearNotes()
	return suo
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (suo *SubcontrolUpdateOne) ClearPrograms() *SubcontrolUpdateOne {
	suo.mutation.ClearPrograms()
	return suo
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveProgramIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveProgramIDs(ids...)
	return suo
}

// RemovePrograms removes "programs" edges to Program entities.
func (suo *SubcontrolUpdateOne) RemovePrograms(p ...*Program) *SubcontrolUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the SubcontrolUpdate builder.
func (suo *SubcontrolUpdateOne) Where(ps ...predicate.Subcontrol) *SubcontrolUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubcontrolUpdateOne) Select(field string, fields ...string) *SubcontrolUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subcontrol entity.
func (suo *SubcontrolUpdateOne) Save(ctx context.Context) (*Subcontrol, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubcontrolUpdateOne) SaveX(ctx context.Context) *Subcontrol {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubcontrolUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubcontrolUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubcontrolUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		if subcontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrol.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SubcontrolUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubcontrolUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SubcontrolUpdateOne) sqlSave(ctx context.Context) (_node *Subcontrol, err error) {
	_spec := sqlgraph.NewUpdateSpec(subcontrol.Table, subcontrol.Columns, sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Subcontrol.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subcontrol.FieldID)
		for _, f := range fields {
			if !subcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(subcontrol.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(subcontrol.FieldUpdatedAt, field.TypeTime)
	}
	if suo.mutation.CreatedByCleared() {
		_spec.ClearField(subcontrol.FieldCreatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(subcontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrol.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(subcontrol.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrol.FieldDeletedBy, field.TypeString, value)
	}
	if suo.mutation.DeletedByCleared() {
		_spec.ClearField(subcontrol.FieldDeletedBy, field.TypeString)
	}
	if value, ok := suo.mutation.Tags(); ok {
		_spec.SetField(subcontrol.FieldTags, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldTags, value)
		})
	}
	if suo.mutation.TagsCleared() {
		_spec.ClearField(subcontrol.FieldTags, field.TypeJSON)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(subcontrol.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(subcontrol.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(subcontrol.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(subcontrol.FieldStatus, field.TypeString, value)
	}
	if suo.mutation.StatusCleared() {
		_spec.ClearField(subcontrol.FieldStatus, field.TypeString)
	}
	if value, ok := suo.mutation.SubcontrolType(); ok {
		_spec.SetField(subcontrol.FieldSubcontrolType, field.TypeString, value)
	}
	if suo.mutation.SubcontrolTypeCleared() {
		_spec.ClearField(subcontrol.FieldSubcontrolType, field.TypeString)
	}
	if value, ok := suo.mutation.Version(); ok {
		_spec.SetField(subcontrol.FieldVersion, field.TypeString, value)
	}
	if suo.mutation.VersionCleared() {
		_spec.ClearField(subcontrol.FieldVersion, field.TypeString)
	}
	if value, ok := suo.mutation.SubcontrolNumber(); ok {
		_spec.SetField(subcontrol.FieldSubcontrolNumber, field.TypeString, value)
	}
	if suo.mutation.SubcontrolNumberCleared() {
		_spec.ClearField(subcontrol.FieldSubcontrolNumber, field.TypeString)
	}
	if value, ok := suo.mutation.Family(); ok {
		_spec.SetField(subcontrol.FieldFamily, field.TypeString, value)
	}
	if suo.mutation.FamilyCleared() {
		_spec.ClearField(subcontrol.FieldFamily, field.TypeString)
	}
	if value, ok := suo.mutation.Class(); ok {
		_spec.SetField(subcontrol.FieldClass, field.TypeString, value)
	}
	if suo.mutation.ClassCleared() {
		_spec.ClearField(subcontrol.FieldClass, field.TypeString)
	}
	if value, ok := suo.mutation.Source(); ok {
		_spec.SetField(subcontrol.FieldSource, field.TypeString, value)
	}
	if suo.mutation.SourceCleared() {
		_spec.ClearField(subcontrol.FieldSource, field.TypeString)
	}
	if value, ok := suo.mutation.MappedFrameworks(); ok {
		_spec.SetField(subcontrol.FieldMappedFrameworks, field.TypeString, value)
	}
	if suo.mutation.MappedFrameworksCleared() {
		_spec.ClearField(subcontrol.FieldMappedFrameworks, field.TypeString)
	}
	if value, ok := suo.mutation.ImplementationEvidence(); ok {
		_spec.SetField(subcontrol.FieldImplementationEvidence, field.TypeString, value)
	}
	if suo.mutation.ImplementationEvidenceCleared() {
		_spec.ClearField(subcontrol.FieldImplementationEvidence, field.TypeString)
	}
	if value, ok := suo.mutation.ImplementationStatus(); ok {
		_spec.SetField(subcontrol.FieldImplementationStatus, field.TypeString, value)
	}
	if suo.mutation.ImplementationStatusCleared() {
		_spec.ClearField(subcontrol.FieldImplementationStatus, field.TypeString)
	}
	if value, ok := suo.mutation.ImplementationDate(); ok {
		_spec.SetField(subcontrol.FieldImplementationDate, field.TypeTime, value)
	}
	if suo.mutation.ImplementationDateCleared() {
		_spec.ClearField(subcontrol.FieldImplementationDate, field.TypeTime)
	}
	if value, ok := suo.mutation.ImplementationVerification(); ok {
		_spec.SetField(subcontrol.FieldImplementationVerification, field.TypeString, value)
	}
	if suo.mutation.ImplementationVerificationCleared() {
		_spec.ClearField(subcontrol.FieldImplementationVerification, field.TypeString)
	}
	if value, ok := suo.mutation.ImplementationVerificationDate(); ok {
		_spec.SetField(subcontrol.FieldImplementationVerificationDate, field.TypeTime, value)
	}
	if suo.mutation.ImplementationVerificationDateCleared() {
		_spec.ClearField(subcontrol.FieldImplementationVerificationDate, field.TypeTime)
	}
	if value, ok := suo.mutation.Details(); ok {
		_spec.SetField(subcontrol.FieldDetails, field.TypeJSON, value)
	}
	if suo.mutation.DetailsCleared() {
		_spec.ClearField(subcontrol.FieldDetails, field.TypeJSON)
	}
	if suo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: subcontrol.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ControlSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedControlIDs(); len(nodes) > 0 && !suo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: subcontrol.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: subcontrol.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.UserTable,
			Columns: subcontrol.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.UserSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedUserIDs(); len(nodes) > 0 && !suo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.UserTable,
			Columns: subcontrol.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.UserSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.UserTable,
			Columns: subcontrol.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.UserSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.SubcontrolTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !suo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.NotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.NotesTable,
			Columns: []string{subcontrol.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.NotesTable,
			Columns: []string{subcontrol.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ProgramsTable,
			Columns: subcontrol.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ProgramSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !suo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ProgramsTable,
			Columns: subcontrol.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ProgramSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.ProgramsTable,
			Columns: subcontrol.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ProgramSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = suo.schemaConfig.Subcontrol
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_spec.AddModifiers(suo.modifiers...)
	_node = &Subcontrol{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
