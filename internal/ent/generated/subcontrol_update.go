// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// SubcontrolUpdate is the builder for updating Subcontrol entities.
type SubcontrolUpdate struct {
	config
	hooks     []Hook
	mutation  *SubcontrolMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubcontrolUpdate builder.
func (su *SubcontrolUpdate) Where(ps ...predicate.Subcontrol) *SubcontrolUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubcontrolUpdate) SetUpdatedAt(t time.Time) *SubcontrolUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SubcontrolUpdate) ClearUpdatedAt() *SubcontrolUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SubcontrolUpdate) SetUpdatedBy(s string) *SubcontrolUpdate {
	su.mutation.SetUpdatedBy(s)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableUpdatedBy(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetUpdatedBy(*s)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SubcontrolUpdate) ClearUpdatedBy() *SubcontrolUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SubcontrolUpdate) SetDeletedAt(t time.Time) *SubcontrolUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableDeletedAt(t *time.Time) *SubcontrolUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SubcontrolUpdate) ClearDeletedAt() *SubcontrolUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetDeletedBy sets the "deleted_by" field.
func (su *SubcontrolUpdate) SetDeletedBy(s string) *SubcontrolUpdate {
	su.mutation.SetDeletedBy(s)
	return su
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableDeletedBy(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetDeletedBy(*s)
	}
	return su
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (su *SubcontrolUpdate) ClearDeletedBy() *SubcontrolUpdate {
	su.mutation.ClearDeletedBy()
	return su
}

// SetTags sets the "tags" field.
func (su *SubcontrolUpdate) SetTags(s []string) *SubcontrolUpdate {
	su.mutation.SetTags(s)
	return su
}

// AppendTags appends s to the "tags" field.
func (su *SubcontrolUpdate) AppendTags(s []string) *SubcontrolUpdate {
	su.mutation.AppendTags(s)
	return su
}

// ClearTags clears the value of the "tags" field.
func (su *SubcontrolUpdate) ClearTags() *SubcontrolUpdate {
	su.mutation.ClearTags()
	return su
}

// SetDescription sets the "description" field.
func (su *SubcontrolUpdate) SetDescription(s string) *SubcontrolUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableDescription(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SubcontrolUpdate) ClearDescription() *SubcontrolUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetReferenceID sets the "reference_id" field.
func (su *SubcontrolUpdate) SetReferenceID(s string) *SubcontrolUpdate {
	su.mutation.SetReferenceID(s)
	return su
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableReferenceID(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetReferenceID(*s)
	}
	return su
}

// ClearReferenceID clears the value of the "reference_id" field.
func (su *SubcontrolUpdate) ClearReferenceID() *SubcontrolUpdate {
	su.mutation.ClearReferenceID()
	return su
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (su *SubcontrolUpdate) SetAuditorReferenceID(s string) *SubcontrolUpdate {
	su.mutation.SetAuditorReferenceID(s)
	return su
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableAuditorReferenceID(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetAuditorReferenceID(*s)
	}
	return su
}

// ClearAuditorReferenceID clears the value of the "auditor_reference_id" field.
func (su *SubcontrolUpdate) ClearAuditorReferenceID() *SubcontrolUpdate {
	su.mutation.ClearAuditorReferenceID()
	return su
}

// SetStatus sets the "status" field.
func (su *SubcontrolUpdate) SetStatus(es enums.ControlStatus) *SubcontrolUpdate {
	su.mutation.SetStatus(es)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableStatus(es *enums.ControlStatus) *SubcontrolUpdate {
	if es != nil {
		su.SetStatus(*es)
	}
	return su
}

// ClearStatus clears the value of the "status" field.
func (su *SubcontrolUpdate) ClearStatus() *SubcontrolUpdate {
	su.mutation.ClearStatus()
	return su
}

// SetSource sets the "source" field.
func (su *SubcontrolUpdate) SetSource(es enums.ControlSource) *SubcontrolUpdate {
	su.mutation.SetSource(es)
	return su
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableSource(es *enums.ControlSource) *SubcontrolUpdate {
	if es != nil {
		su.SetSource(*es)
	}
	return su
}

// ClearSource clears the value of the "source" field.
func (su *SubcontrolUpdate) ClearSource() *SubcontrolUpdate {
	su.mutation.ClearSource()
	return su
}

// SetControlType sets the "control_type" field.
func (su *SubcontrolUpdate) SetControlType(et enums.ControlType) *SubcontrolUpdate {
	su.mutation.SetControlType(et)
	return su
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableControlType(et *enums.ControlType) *SubcontrolUpdate {
	if et != nil {
		su.SetControlType(*et)
	}
	return su
}

// ClearControlType clears the value of the "control_type" field.
func (su *SubcontrolUpdate) ClearControlType() *SubcontrolUpdate {
	su.mutation.ClearControlType()
	return su
}

// SetCategory sets the "category" field.
func (su *SubcontrolUpdate) SetCategory(s string) *SubcontrolUpdate {
	su.mutation.SetCategory(s)
	return su
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableCategory(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetCategory(*s)
	}
	return su
}

// ClearCategory clears the value of the "category" field.
func (su *SubcontrolUpdate) ClearCategory() *SubcontrolUpdate {
	su.mutation.ClearCategory()
	return su
}

// SetCategoryID sets the "category_id" field.
func (su *SubcontrolUpdate) SetCategoryID(s string) *SubcontrolUpdate {
	su.mutation.SetCategoryID(s)
	return su
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableCategoryID(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetCategoryID(*s)
	}
	return su
}

// ClearCategoryID clears the value of the "category_id" field.
func (su *SubcontrolUpdate) ClearCategoryID() *SubcontrolUpdate {
	su.mutation.ClearCategoryID()
	return su
}

// SetSubcategory sets the "subcategory" field.
func (su *SubcontrolUpdate) SetSubcategory(s string) *SubcontrolUpdate {
	su.mutation.SetSubcategory(s)
	return su
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableSubcategory(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetSubcategory(*s)
	}
	return su
}

// ClearSubcategory clears the value of the "subcategory" field.
func (su *SubcontrolUpdate) ClearSubcategory() *SubcontrolUpdate {
	su.mutation.ClearSubcategory()
	return su
}

// SetMappedCategories sets the "mapped_categories" field.
func (su *SubcontrolUpdate) SetMappedCategories(s []string) *SubcontrolUpdate {
	su.mutation.SetMappedCategories(s)
	return su
}

// AppendMappedCategories appends s to the "mapped_categories" field.
func (su *SubcontrolUpdate) AppendMappedCategories(s []string) *SubcontrolUpdate {
	su.mutation.AppendMappedCategories(s)
	return su
}

// ClearMappedCategories clears the value of the "mapped_categories" field.
func (su *SubcontrolUpdate) ClearMappedCategories() *SubcontrolUpdate {
	su.mutation.ClearMappedCategories()
	return su
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (su *SubcontrolUpdate) SetAssessmentObjectives(mo []models.AssessmentObjective) *SubcontrolUpdate {
	su.mutation.SetAssessmentObjectives(mo)
	return su
}

// AppendAssessmentObjectives appends mo to the "assessment_objectives" field.
func (su *SubcontrolUpdate) AppendAssessmentObjectives(mo []models.AssessmentObjective) *SubcontrolUpdate {
	su.mutation.AppendAssessmentObjectives(mo)
	return su
}

// ClearAssessmentObjectives clears the value of the "assessment_objectives" field.
func (su *SubcontrolUpdate) ClearAssessmentObjectives() *SubcontrolUpdate {
	su.mutation.ClearAssessmentObjectives()
	return su
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (su *SubcontrolUpdate) SetAssessmentMethods(mm []models.AssessmentMethod) *SubcontrolUpdate {
	su.mutation.SetAssessmentMethods(mm)
	return su
}

// AppendAssessmentMethods appends mm to the "assessment_methods" field.
func (su *SubcontrolUpdate) AppendAssessmentMethods(mm []models.AssessmentMethod) *SubcontrolUpdate {
	su.mutation.AppendAssessmentMethods(mm)
	return su
}

// ClearAssessmentMethods clears the value of the "assessment_methods" field.
func (su *SubcontrolUpdate) ClearAssessmentMethods() *SubcontrolUpdate {
	su.mutation.ClearAssessmentMethods()
	return su
}

// SetControlQuestions sets the "control_questions" field.
func (su *SubcontrolUpdate) SetControlQuestions(s []string) *SubcontrolUpdate {
	su.mutation.SetControlQuestions(s)
	return su
}

// AppendControlQuestions appends s to the "control_questions" field.
func (su *SubcontrolUpdate) AppendControlQuestions(s []string) *SubcontrolUpdate {
	su.mutation.AppendControlQuestions(s)
	return su
}

// ClearControlQuestions clears the value of the "control_questions" field.
func (su *SubcontrolUpdate) ClearControlQuestions() *SubcontrolUpdate {
	su.mutation.ClearControlQuestions()
	return su
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (su *SubcontrolUpdate) SetImplementationGuidance(mg []models.ImplementationGuidance) *SubcontrolUpdate {
	su.mutation.SetImplementationGuidance(mg)
	return su
}

// AppendImplementationGuidance appends mg to the "implementation_guidance" field.
func (su *SubcontrolUpdate) AppendImplementationGuidance(mg []models.ImplementationGuidance) *SubcontrolUpdate {
	su.mutation.AppendImplementationGuidance(mg)
	return su
}

// ClearImplementationGuidance clears the value of the "implementation_guidance" field.
func (su *SubcontrolUpdate) ClearImplementationGuidance() *SubcontrolUpdate {
	su.mutation.ClearImplementationGuidance()
	return su
}

// SetExampleEvidence sets the "example_evidence" field.
func (su *SubcontrolUpdate) SetExampleEvidence(me []models.ExampleEvidence) *SubcontrolUpdate {
	su.mutation.SetExampleEvidence(me)
	return su
}

// AppendExampleEvidence appends me to the "example_evidence" field.
func (su *SubcontrolUpdate) AppendExampleEvidence(me []models.ExampleEvidence) *SubcontrolUpdate {
	su.mutation.AppendExampleEvidence(me)
	return su
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (su *SubcontrolUpdate) ClearExampleEvidence() *SubcontrolUpdate {
	su.mutation.ClearExampleEvidence()
	return su
}

// SetReferences sets the "references" field.
func (su *SubcontrolUpdate) SetReferences(m []models.Reference) *SubcontrolUpdate {
	su.mutation.SetReferences(m)
	return su
}

// AppendReferences appends m to the "references" field.
func (su *SubcontrolUpdate) AppendReferences(m []models.Reference) *SubcontrolUpdate {
	su.mutation.AppendReferences(m)
	return su
}

// ClearReferences clears the value of the "references" field.
func (su *SubcontrolUpdate) ClearReferences() *SubcontrolUpdate {
	su.mutation.ClearReferences()
	return su
}

// SetRefCode sets the "ref_code" field.
func (su *SubcontrolUpdate) SetRefCode(s string) *SubcontrolUpdate {
	su.mutation.SetRefCode(s)
	return su
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableRefCode(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetRefCode(*s)
	}
	return su
}

// SetControlID sets the "control_id" field.
func (su *SubcontrolUpdate) SetControlID(s string) *SubcontrolUpdate {
	su.mutation.SetControlID(s)
	return su
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableControlID(s *string) *SubcontrolUpdate {
	if s != nil {
		su.SetControlID(*s)
	}
	return su
}

// SetControl sets the "control" edge to the Control entity.
func (su *SubcontrolUpdate) SetControl(c *Control) *SubcontrolUpdate {
	return su.SetControlID(c.ID)
}

// AddMappedControlIDs adds the "mapped_controls" edge to the MappedControl entity by IDs.
func (su *SubcontrolUpdate) AddMappedControlIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddMappedControlIDs(ids...)
	return su
}

// AddMappedControls adds the "mapped_controls" edges to the MappedControl entity.
func (su *SubcontrolUpdate) AddMappedControls(m ...*MappedControl) *SubcontrolUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return su.AddMappedControlIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (su *SubcontrolUpdate) AddEvidenceIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddEvidenceIDs(ids...)
	return su
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (su *SubcontrolUpdate) AddEvidence(e ...*Evidence) *SubcontrolUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddEvidenceIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (su *SubcontrolUpdate) AddControlObjectiveIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddControlObjectiveIDs(ids...)
	return su
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (su *SubcontrolUpdate) AddControlObjectives(c ...*ControlObjective) *SubcontrolUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddControlObjectiveIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (su *SubcontrolUpdate) AddTaskIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddTaskIDs(ids...)
	return su
}

// AddTasks adds the "tasks" edges to the Task entity.
func (su *SubcontrolUpdate) AddTasks(t ...*Task) *SubcontrolUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.AddTaskIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (su *SubcontrolUpdate) AddNarrativeIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddNarrativeIDs(ids...)
	return su
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (su *SubcontrolUpdate) AddNarratives(n ...*Narrative) *SubcontrolUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return su.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (su *SubcontrolUpdate) AddRiskIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddRiskIDs(ids...)
	return su
}

// AddRisks adds the "risks" edges to the Risk entity.
func (su *SubcontrolUpdate) AddRisks(r ...*Risk) *SubcontrolUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddRiskIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (su *SubcontrolUpdate) AddActionPlanIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddActionPlanIDs(ids...)
	return su
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (su *SubcontrolUpdate) AddActionPlans(a ...*ActionPlan) *SubcontrolUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddActionPlanIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (su *SubcontrolUpdate) AddProcedureIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddProcedureIDs(ids...)
	return su
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (su *SubcontrolUpdate) AddProcedures(p ...*Procedure) *SubcontrolUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (su *SubcontrolUpdate) AddInternalPolicyIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.AddInternalPolicyIDs(ids...)
	return su
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (su *SubcontrolUpdate) AddInternalPolicies(i ...*InternalPolicy) *SubcontrolUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.AddInternalPolicyIDs(ids...)
}

// SetControlOwnerID sets the "control_owner" edge to the Group entity by ID.
func (su *SubcontrolUpdate) SetControlOwnerID(id string) *SubcontrolUpdate {
	su.mutation.SetControlOwnerID(id)
	return su
}

// SetNillableControlOwnerID sets the "control_owner" edge to the Group entity by ID if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableControlOwnerID(id *string) *SubcontrolUpdate {
	if id != nil {
		su = su.SetControlOwnerID(*id)
	}
	return su
}

// SetControlOwner sets the "control_owner" edge to the Group entity.
func (su *SubcontrolUpdate) SetControlOwner(g *Group) *SubcontrolUpdate {
	return su.SetControlOwnerID(g.ID)
}

// SetDelegateID sets the "delegate" edge to the Group entity by ID.
func (su *SubcontrolUpdate) SetDelegateID(id string) *SubcontrolUpdate {
	su.mutation.SetDelegateID(id)
	return su
}

// SetNillableDelegateID sets the "delegate" edge to the Group entity by ID if the given value is not nil.
func (su *SubcontrolUpdate) SetNillableDelegateID(id *string) *SubcontrolUpdate {
	if id != nil {
		su = su.SetDelegateID(*id)
	}
	return su
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (su *SubcontrolUpdate) SetDelegate(g *Group) *SubcontrolUpdate {
	return su.SetDelegateID(g.ID)
}

// Mutation returns the SubcontrolMutation object of the builder.
func (su *SubcontrolUpdate) Mutation() *SubcontrolMutation {
	return su.mutation
}

// ClearControl clears the "control" edge to the Control entity.
func (su *SubcontrolUpdate) ClearControl() *SubcontrolUpdate {
	su.mutation.ClearControl()
	return su
}

// ClearMappedControls clears all "mapped_controls" edges to the MappedControl entity.
func (su *SubcontrolUpdate) ClearMappedControls() *SubcontrolUpdate {
	su.mutation.ClearMappedControls()
	return su
}

// RemoveMappedControlIDs removes the "mapped_controls" edge to MappedControl entities by IDs.
func (su *SubcontrolUpdate) RemoveMappedControlIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveMappedControlIDs(ids...)
	return su
}

// RemoveMappedControls removes "mapped_controls" edges to MappedControl entities.
func (su *SubcontrolUpdate) RemoveMappedControls(m ...*MappedControl) *SubcontrolUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return su.RemoveMappedControlIDs(ids...)
}

// ClearEvidence clears all "evidence" edges to the Evidence entity.
func (su *SubcontrolUpdate) ClearEvidence() *SubcontrolUpdate {
	su.mutation.ClearEvidence()
	return su
}

// RemoveEvidenceIDs removes the "evidence" edge to Evidence entities by IDs.
func (su *SubcontrolUpdate) RemoveEvidenceIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveEvidenceIDs(ids...)
	return su
}

// RemoveEvidence removes "evidence" edges to Evidence entities.
func (su *SubcontrolUpdate) RemoveEvidence(e ...*Evidence) *SubcontrolUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveEvidenceIDs(ids...)
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (su *SubcontrolUpdate) ClearControlObjectives() *SubcontrolUpdate {
	su.mutation.ClearControlObjectives()
	return su
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (su *SubcontrolUpdate) RemoveControlObjectiveIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveControlObjectiveIDs(ids...)
	return su
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (su *SubcontrolUpdate) RemoveControlObjectives(c ...*ControlObjective) *SubcontrolUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveControlObjectiveIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (su *SubcontrolUpdate) ClearTasks() *SubcontrolUpdate {
	su.mutation.ClearTasks()
	return su
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (su *SubcontrolUpdate) RemoveTaskIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveTaskIDs(ids...)
	return su
}

// RemoveTasks removes "tasks" edges to Task entities.
func (su *SubcontrolUpdate) RemoveTasks(t ...*Task) *SubcontrolUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return su.RemoveTaskIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (su *SubcontrolUpdate) ClearNarratives() *SubcontrolUpdate {
	su.mutation.ClearNarratives()
	return su
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (su *SubcontrolUpdate) RemoveNarrativeIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveNarrativeIDs(ids...)
	return su
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (su *SubcontrolUpdate) RemoveNarratives(n ...*Narrative) *SubcontrolUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return su.RemoveNarrativeIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (su *SubcontrolUpdate) ClearRisks() *SubcontrolUpdate {
	su.mutation.ClearRisks()
	return su
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (su *SubcontrolUpdate) RemoveRiskIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveRiskIDs(ids...)
	return su
}

// RemoveRisks removes "risks" edges to Risk entities.
func (su *SubcontrolUpdate) RemoveRisks(r ...*Risk) *SubcontrolUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveRiskIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (su *SubcontrolUpdate) ClearActionPlans() *SubcontrolUpdate {
	su.mutation.ClearActionPlans()
	return su
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (su *SubcontrolUpdate) RemoveActionPlanIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveActionPlanIDs(ids...)
	return su
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (su *SubcontrolUpdate) RemoveActionPlans(a ...*ActionPlan) *SubcontrolUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveActionPlanIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (su *SubcontrolUpdate) ClearProcedures() *SubcontrolUpdate {
	su.mutation.ClearProcedures()
	return su
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (su *SubcontrolUpdate) RemoveProcedureIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveProcedureIDs(ids...)
	return su
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (su *SubcontrolUpdate) RemoveProcedures(p ...*Procedure) *SubcontrolUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProcedureIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (su *SubcontrolUpdate) ClearInternalPolicies() *SubcontrolUpdate {
	su.mutation.ClearInternalPolicies()
	return su
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (su *SubcontrolUpdate) RemoveInternalPolicyIDs(ids ...string) *SubcontrolUpdate {
	su.mutation.RemoveInternalPolicyIDs(ids...)
	return su
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (su *SubcontrolUpdate) RemoveInternalPolicies(i ...*InternalPolicy) *SubcontrolUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return su.RemoveInternalPolicyIDs(ids...)
}

// ClearControlOwner clears the "control_owner" edge to the Group entity.
func (su *SubcontrolUpdate) ClearControlOwner() *SubcontrolUpdate {
	su.mutation.ClearControlOwner()
	return su
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (su *SubcontrolUpdate) ClearDelegate() *SubcontrolUpdate {
	su.mutation.ClearDelegate()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubcontrolUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubcontrolUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubcontrolUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubcontrolUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubcontrolUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		if subcontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrol.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *SubcontrolUpdate) check() error {
	if v, ok := su.mutation.Status(); ok {
		if err := subcontrol.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.status": %w`, err)}
		}
	}
	if v, ok := su.mutation.Source(); ok {
		if err := subcontrol.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.source": %w`, err)}
		}
	}
	if v, ok := su.mutation.ControlType(); ok {
		if err := subcontrol.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.control_type": %w`, err)}
		}
	}
	if v, ok := su.mutation.RefCode(); ok {
		if err := subcontrol.RefCodeValidator(v); err != nil {
			return &ValidationError{Name: "ref_code", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.ref_code": %w`, err)}
		}
	}
	if v, ok := su.mutation.ControlID(); ok {
		if err := subcontrol.ControlIDValidator(v); err != nil {
			return &ValidationError{Name: "control_id", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.control_id": %w`, err)}
		}
	}
	if su.mutation.ControlCleared() && len(su.mutation.ControlIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Subcontrol.control"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SubcontrolUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubcontrolUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SubcontrolUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subcontrol.Table, subcontrol.Columns, sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(subcontrol.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(subcontrol.FieldUpdatedAt, field.TypeTime)
	}
	if su.mutation.CreatedByCleared() {
		_spec.ClearField(subcontrol.FieldCreatedBy, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(subcontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrol.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(subcontrol.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrol.FieldDeletedBy, field.TypeString, value)
	}
	if su.mutation.DeletedByCleared() {
		_spec.ClearField(subcontrol.FieldDeletedBy, field.TypeString)
	}
	if value, ok := su.mutation.Tags(); ok {
		_spec.SetField(subcontrol.FieldTags, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldTags, value)
		})
	}
	if su.mutation.TagsCleared() {
		_spec.ClearField(subcontrol.FieldTags, field.TypeJSON)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(subcontrol.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(subcontrol.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.ReferenceID(); ok {
		_spec.SetField(subcontrol.FieldReferenceID, field.TypeString, value)
	}
	if su.mutation.ReferenceIDCleared() {
		_spec.ClearField(subcontrol.FieldReferenceID, field.TypeString)
	}
	if value, ok := su.mutation.AuditorReferenceID(); ok {
		_spec.SetField(subcontrol.FieldAuditorReferenceID, field.TypeString, value)
	}
	if su.mutation.AuditorReferenceIDCleared() {
		_spec.ClearField(subcontrol.FieldAuditorReferenceID, field.TypeString)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(subcontrol.FieldStatus, field.TypeEnum, value)
	}
	if su.mutation.StatusCleared() {
		_spec.ClearField(subcontrol.FieldStatus, field.TypeEnum)
	}
	if value, ok := su.mutation.Source(); ok {
		_spec.SetField(subcontrol.FieldSource, field.TypeEnum, value)
	}
	if su.mutation.SourceCleared() {
		_spec.ClearField(subcontrol.FieldSource, field.TypeEnum)
	}
	if value, ok := su.mutation.ControlType(); ok {
		_spec.SetField(subcontrol.FieldControlType, field.TypeEnum, value)
	}
	if su.mutation.ControlTypeCleared() {
		_spec.ClearField(subcontrol.FieldControlType, field.TypeEnum)
	}
	if value, ok := su.mutation.Category(); ok {
		_spec.SetField(subcontrol.FieldCategory, field.TypeString, value)
	}
	if su.mutation.CategoryCleared() {
		_spec.ClearField(subcontrol.FieldCategory, field.TypeString)
	}
	if value, ok := su.mutation.CategoryID(); ok {
		_spec.SetField(subcontrol.FieldCategoryID, field.TypeString, value)
	}
	if su.mutation.CategoryIDCleared() {
		_spec.ClearField(subcontrol.FieldCategoryID, field.TypeString)
	}
	if value, ok := su.mutation.Subcategory(); ok {
		_spec.SetField(subcontrol.FieldSubcategory, field.TypeString, value)
	}
	if su.mutation.SubcategoryCleared() {
		_spec.ClearField(subcontrol.FieldSubcategory, field.TypeString)
	}
	if value, ok := su.mutation.MappedCategories(); ok {
		_spec.SetField(subcontrol.FieldMappedCategories, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedMappedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldMappedCategories, value)
		})
	}
	if su.mutation.MappedCategoriesCleared() {
		_spec.ClearField(subcontrol.FieldMappedCategories, field.TypeJSON)
	}
	if value, ok := su.mutation.AssessmentObjectives(); ok {
		_spec.SetField(subcontrol.FieldAssessmentObjectives, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedAssessmentObjectives(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldAssessmentObjectives, value)
		})
	}
	if su.mutation.AssessmentObjectivesCleared() {
		_spec.ClearField(subcontrol.FieldAssessmentObjectives, field.TypeJSON)
	}
	if value, ok := su.mutation.AssessmentMethods(); ok {
		_spec.SetField(subcontrol.FieldAssessmentMethods, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedAssessmentMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldAssessmentMethods, value)
		})
	}
	if su.mutation.AssessmentMethodsCleared() {
		_spec.ClearField(subcontrol.FieldAssessmentMethods, field.TypeJSON)
	}
	if value, ok := su.mutation.ControlQuestions(); ok {
		_spec.SetField(subcontrol.FieldControlQuestions, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedControlQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldControlQuestions, value)
		})
	}
	if su.mutation.ControlQuestionsCleared() {
		_spec.ClearField(subcontrol.FieldControlQuestions, field.TypeJSON)
	}
	if value, ok := su.mutation.ImplementationGuidance(); ok {
		_spec.SetField(subcontrol.FieldImplementationGuidance, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedImplementationGuidance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldImplementationGuidance, value)
		})
	}
	if su.mutation.ImplementationGuidanceCleared() {
		_spec.ClearField(subcontrol.FieldImplementationGuidance, field.TypeJSON)
	}
	if value, ok := su.mutation.ExampleEvidence(); ok {
		_spec.SetField(subcontrol.FieldExampleEvidence, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedExampleEvidence(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldExampleEvidence, value)
		})
	}
	if su.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(subcontrol.FieldExampleEvidence, field.TypeJSON)
	}
	if value, ok := su.mutation.References(); ok {
		_spec.SetField(subcontrol.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldReferences, value)
		})
	}
	if su.mutation.ReferencesCleared() {
		_spec.ClearField(subcontrol.FieldReferences, field.TypeJSON)
	}
	if value, ok := su.mutation.RefCode(); ok {
		_spec.SetField(subcontrol.FieldRefCode, field.TypeString, value)
	}
	if su.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: []string{subcontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: []string{subcontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.MappedControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedControlsTable,
			Columns: subcontrol.MappedControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.MappedControlSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedMappedControlsIDs(); len(nodes) > 0 && !su.mutation.MappedControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedControlsTable,
			Columns: subcontrol.MappedControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.MappedControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.MappedControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedControlsTable,
			Columns: subcontrol.MappedControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.MappedControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.EvidenceSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedEvidenceIDs(); len(nodes) > 0 && !su.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.SubcontrolControlObjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !su.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.SubcontrolControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.SubcontrolControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.SubcontrolTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedTasksIDs(); len(nodes) > 0 && !su.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Narrative
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !su.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: []string{subcontrol.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedRisksIDs(); len(nodes) > 0 && !su.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: []string{subcontrol.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: []string{subcontrol.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !su.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: []string{subcontrol.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !su.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: []string{subcontrol.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: []string{subcontrol.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: []string{subcontrol.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !su.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: []string{subcontrol.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: []string{subcontrol.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ControlOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.ControlOwnerTable,
			Columns: []string{subcontrol.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ControlOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.ControlOwnerTable,
			Columns: []string{subcontrol.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.DelegateTable,
			Columns: []string{subcontrol.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.DelegateTable,
			Columns: []string{subcontrol.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = su.schemaConfig.Subcontrol
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubcontrolUpdateOne is the builder for updating a single Subcontrol entity.
type SubcontrolUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubcontrolMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubcontrolUpdateOne) SetUpdatedAt(t time.Time) *SubcontrolUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SubcontrolUpdateOne) ClearUpdatedAt() *SubcontrolUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SubcontrolUpdateOne) SetUpdatedBy(s string) *SubcontrolUpdateOne {
	suo.mutation.SetUpdatedBy(s)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableUpdatedBy(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetUpdatedBy(*s)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SubcontrolUpdateOne) ClearUpdatedBy() *SubcontrolUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SubcontrolUpdateOne) SetDeletedAt(t time.Time) *SubcontrolUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableDeletedAt(t *time.Time) *SubcontrolUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SubcontrolUpdateOne) ClearDeletedAt() *SubcontrolUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetDeletedBy sets the "deleted_by" field.
func (suo *SubcontrolUpdateOne) SetDeletedBy(s string) *SubcontrolUpdateOne {
	suo.mutation.SetDeletedBy(s)
	return suo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableDeletedBy(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetDeletedBy(*s)
	}
	return suo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (suo *SubcontrolUpdateOne) ClearDeletedBy() *SubcontrolUpdateOne {
	suo.mutation.ClearDeletedBy()
	return suo
}

// SetTags sets the "tags" field.
func (suo *SubcontrolUpdateOne) SetTags(s []string) *SubcontrolUpdateOne {
	suo.mutation.SetTags(s)
	return suo
}

// AppendTags appends s to the "tags" field.
func (suo *SubcontrolUpdateOne) AppendTags(s []string) *SubcontrolUpdateOne {
	suo.mutation.AppendTags(s)
	return suo
}

// ClearTags clears the value of the "tags" field.
func (suo *SubcontrolUpdateOne) ClearTags() *SubcontrolUpdateOne {
	suo.mutation.ClearTags()
	return suo
}

// SetDescription sets the "description" field.
func (suo *SubcontrolUpdateOne) SetDescription(s string) *SubcontrolUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableDescription(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SubcontrolUpdateOne) ClearDescription() *SubcontrolUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetReferenceID sets the "reference_id" field.
func (suo *SubcontrolUpdateOne) SetReferenceID(s string) *SubcontrolUpdateOne {
	suo.mutation.SetReferenceID(s)
	return suo
}

// SetNillableReferenceID sets the "reference_id" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableReferenceID(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetReferenceID(*s)
	}
	return suo
}

// ClearReferenceID clears the value of the "reference_id" field.
func (suo *SubcontrolUpdateOne) ClearReferenceID() *SubcontrolUpdateOne {
	suo.mutation.ClearReferenceID()
	return suo
}

// SetAuditorReferenceID sets the "auditor_reference_id" field.
func (suo *SubcontrolUpdateOne) SetAuditorReferenceID(s string) *SubcontrolUpdateOne {
	suo.mutation.SetAuditorReferenceID(s)
	return suo
}

// SetNillableAuditorReferenceID sets the "auditor_reference_id" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableAuditorReferenceID(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetAuditorReferenceID(*s)
	}
	return suo
}

// ClearAuditorReferenceID clears the value of the "auditor_reference_id" field.
func (suo *SubcontrolUpdateOne) ClearAuditorReferenceID() *SubcontrolUpdateOne {
	suo.mutation.ClearAuditorReferenceID()
	return suo
}

// SetStatus sets the "status" field.
func (suo *SubcontrolUpdateOne) SetStatus(es enums.ControlStatus) *SubcontrolUpdateOne {
	suo.mutation.SetStatus(es)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableStatus(es *enums.ControlStatus) *SubcontrolUpdateOne {
	if es != nil {
		suo.SetStatus(*es)
	}
	return suo
}

// ClearStatus clears the value of the "status" field.
func (suo *SubcontrolUpdateOne) ClearStatus() *SubcontrolUpdateOne {
	suo.mutation.ClearStatus()
	return suo
}

// SetSource sets the "source" field.
func (suo *SubcontrolUpdateOne) SetSource(es enums.ControlSource) *SubcontrolUpdateOne {
	suo.mutation.SetSource(es)
	return suo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableSource(es *enums.ControlSource) *SubcontrolUpdateOne {
	if es != nil {
		suo.SetSource(*es)
	}
	return suo
}

// ClearSource clears the value of the "source" field.
func (suo *SubcontrolUpdateOne) ClearSource() *SubcontrolUpdateOne {
	suo.mutation.ClearSource()
	return suo
}

// SetControlType sets the "control_type" field.
func (suo *SubcontrolUpdateOne) SetControlType(et enums.ControlType) *SubcontrolUpdateOne {
	suo.mutation.SetControlType(et)
	return suo
}

// SetNillableControlType sets the "control_type" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableControlType(et *enums.ControlType) *SubcontrolUpdateOne {
	if et != nil {
		suo.SetControlType(*et)
	}
	return suo
}

// ClearControlType clears the value of the "control_type" field.
func (suo *SubcontrolUpdateOne) ClearControlType() *SubcontrolUpdateOne {
	suo.mutation.ClearControlType()
	return suo
}

// SetCategory sets the "category" field.
func (suo *SubcontrolUpdateOne) SetCategory(s string) *SubcontrolUpdateOne {
	suo.mutation.SetCategory(s)
	return suo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableCategory(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetCategory(*s)
	}
	return suo
}

// ClearCategory clears the value of the "category" field.
func (suo *SubcontrolUpdateOne) ClearCategory() *SubcontrolUpdateOne {
	suo.mutation.ClearCategory()
	return suo
}

// SetCategoryID sets the "category_id" field.
func (suo *SubcontrolUpdateOne) SetCategoryID(s string) *SubcontrolUpdateOne {
	suo.mutation.SetCategoryID(s)
	return suo
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableCategoryID(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetCategoryID(*s)
	}
	return suo
}

// ClearCategoryID clears the value of the "category_id" field.
func (suo *SubcontrolUpdateOne) ClearCategoryID() *SubcontrolUpdateOne {
	suo.mutation.ClearCategoryID()
	return suo
}

// SetSubcategory sets the "subcategory" field.
func (suo *SubcontrolUpdateOne) SetSubcategory(s string) *SubcontrolUpdateOne {
	suo.mutation.SetSubcategory(s)
	return suo
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableSubcategory(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetSubcategory(*s)
	}
	return suo
}

// ClearSubcategory clears the value of the "subcategory" field.
func (suo *SubcontrolUpdateOne) ClearSubcategory() *SubcontrolUpdateOne {
	suo.mutation.ClearSubcategory()
	return suo
}

// SetMappedCategories sets the "mapped_categories" field.
func (suo *SubcontrolUpdateOne) SetMappedCategories(s []string) *SubcontrolUpdateOne {
	suo.mutation.SetMappedCategories(s)
	return suo
}

// AppendMappedCategories appends s to the "mapped_categories" field.
func (suo *SubcontrolUpdateOne) AppendMappedCategories(s []string) *SubcontrolUpdateOne {
	suo.mutation.AppendMappedCategories(s)
	return suo
}

// ClearMappedCategories clears the value of the "mapped_categories" field.
func (suo *SubcontrolUpdateOne) ClearMappedCategories() *SubcontrolUpdateOne {
	suo.mutation.ClearMappedCategories()
	return suo
}

// SetAssessmentObjectives sets the "assessment_objectives" field.
func (suo *SubcontrolUpdateOne) SetAssessmentObjectives(mo []models.AssessmentObjective) *SubcontrolUpdateOne {
	suo.mutation.SetAssessmentObjectives(mo)
	return suo
}

// AppendAssessmentObjectives appends mo to the "assessment_objectives" field.
func (suo *SubcontrolUpdateOne) AppendAssessmentObjectives(mo []models.AssessmentObjective) *SubcontrolUpdateOne {
	suo.mutation.AppendAssessmentObjectives(mo)
	return suo
}

// ClearAssessmentObjectives clears the value of the "assessment_objectives" field.
func (suo *SubcontrolUpdateOne) ClearAssessmentObjectives() *SubcontrolUpdateOne {
	suo.mutation.ClearAssessmentObjectives()
	return suo
}

// SetAssessmentMethods sets the "assessment_methods" field.
func (suo *SubcontrolUpdateOne) SetAssessmentMethods(mm []models.AssessmentMethod) *SubcontrolUpdateOne {
	suo.mutation.SetAssessmentMethods(mm)
	return suo
}

// AppendAssessmentMethods appends mm to the "assessment_methods" field.
func (suo *SubcontrolUpdateOne) AppendAssessmentMethods(mm []models.AssessmentMethod) *SubcontrolUpdateOne {
	suo.mutation.AppendAssessmentMethods(mm)
	return suo
}

// ClearAssessmentMethods clears the value of the "assessment_methods" field.
func (suo *SubcontrolUpdateOne) ClearAssessmentMethods() *SubcontrolUpdateOne {
	suo.mutation.ClearAssessmentMethods()
	return suo
}

// SetControlQuestions sets the "control_questions" field.
func (suo *SubcontrolUpdateOne) SetControlQuestions(s []string) *SubcontrolUpdateOne {
	suo.mutation.SetControlQuestions(s)
	return suo
}

// AppendControlQuestions appends s to the "control_questions" field.
func (suo *SubcontrolUpdateOne) AppendControlQuestions(s []string) *SubcontrolUpdateOne {
	suo.mutation.AppendControlQuestions(s)
	return suo
}

// ClearControlQuestions clears the value of the "control_questions" field.
func (suo *SubcontrolUpdateOne) ClearControlQuestions() *SubcontrolUpdateOne {
	suo.mutation.ClearControlQuestions()
	return suo
}

// SetImplementationGuidance sets the "implementation_guidance" field.
func (suo *SubcontrolUpdateOne) SetImplementationGuidance(mg []models.ImplementationGuidance) *SubcontrolUpdateOne {
	suo.mutation.SetImplementationGuidance(mg)
	return suo
}

// AppendImplementationGuidance appends mg to the "implementation_guidance" field.
func (suo *SubcontrolUpdateOne) AppendImplementationGuidance(mg []models.ImplementationGuidance) *SubcontrolUpdateOne {
	suo.mutation.AppendImplementationGuidance(mg)
	return suo
}

// ClearImplementationGuidance clears the value of the "implementation_guidance" field.
func (suo *SubcontrolUpdateOne) ClearImplementationGuidance() *SubcontrolUpdateOne {
	suo.mutation.ClearImplementationGuidance()
	return suo
}

// SetExampleEvidence sets the "example_evidence" field.
func (suo *SubcontrolUpdateOne) SetExampleEvidence(me []models.ExampleEvidence) *SubcontrolUpdateOne {
	suo.mutation.SetExampleEvidence(me)
	return suo
}

// AppendExampleEvidence appends me to the "example_evidence" field.
func (suo *SubcontrolUpdateOne) AppendExampleEvidence(me []models.ExampleEvidence) *SubcontrolUpdateOne {
	suo.mutation.AppendExampleEvidence(me)
	return suo
}

// ClearExampleEvidence clears the value of the "example_evidence" field.
func (suo *SubcontrolUpdateOne) ClearExampleEvidence() *SubcontrolUpdateOne {
	suo.mutation.ClearExampleEvidence()
	return suo
}

// SetReferences sets the "references" field.
func (suo *SubcontrolUpdateOne) SetReferences(m []models.Reference) *SubcontrolUpdateOne {
	suo.mutation.SetReferences(m)
	return suo
}

// AppendReferences appends m to the "references" field.
func (suo *SubcontrolUpdateOne) AppendReferences(m []models.Reference) *SubcontrolUpdateOne {
	suo.mutation.AppendReferences(m)
	return suo
}

// ClearReferences clears the value of the "references" field.
func (suo *SubcontrolUpdateOne) ClearReferences() *SubcontrolUpdateOne {
	suo.mutation.ClearReferences()
	return suo
}

// SetRefCode sets the "ref_code" field.
func (suo *SubcontrolUpdateOne) SetRefCode(s string) *SubcontrolUpdateOne {
	suo.mutation.SetRefCode(s)
	return suo
}

// SetNillableRefCode sets the "ref_code" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableRefCode(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetRefCode(*s)
	}
	return suo
}

// SetControlID sets the "control_id" field.
func (suo *SubcontrolUpdateOne) SetControlID(s string) *SubcontrolUpdateOne {
	suo.mutation.SetControlID(s)
	return suo
}

// SetNillableControlID sets the "control_id" field if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableControlID(s *string) *SubcontrolUpdateOne {
	if s != nil {
		suo.SetControlID(*s)
	}
	return suo
}

// SetControl sets the "control" edge to the Control entity.
func (suo *SubcontrolUpdateOne) SetControl(c *Control) *SubcontrolUpdateOne {
	return suo.SetControlID(c.ID)
}

// AddMappedControlIDs adds the "mapped_controls" edge to the MappedControl entity by IDs.
func (suo *SubcontrolUpdateOne) AddMappedControlIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddMappedControlIDs(ids...)
	return suo
}

// AddMappedControls adds the "mapped_controls" edges to the MappedControl entity.
func (suo *SubcontrolUpdateOne) AddMappedControls(m ...*MappedControl) *SubcontrolUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return suo.AddMappedControlIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (suo *SubcontrolUpdateOne) AddEvidenceIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddEvidenceIDs(ids...)
	return suo
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (suo *SubcontrolUpdateOne) AddEvidence(e ...*Evidence) *SubcontrolUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddEvidenceIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (suo *SubcontrolUpdateOne) AddControlObjectiveIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddControlObjectiveIDs(ids...)
	return suo
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (suo *SubcontrolUpdateOne) AddControlObjectives(c ...*ControlObjective) *SubcontrolUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddControlObjectiveIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (suo *SubcontrolUpdateOne) AddTaskIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddTaskIDs(ids...)
	return suo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (suo *SubcontrolUpdateOne) AddTasks(t ...*Task) *SubcontrolUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.AddTaskIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (suo *SubcontrolUpdateOne) AddNarrativeIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddNarrativeIDs(ids...)
	return suo
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (suo *SubcontrolUpdateOne) AddNarratives(n ...*Narrative) *SubcontrolUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suo.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (suo *SubcontrolUpdateOne) AddRiskIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddRiskIDs(ids...)
	return suo
}

// AddRisks adds the "risks" edges to the Risk entity.
func (suo *SubcontrolUpdateOne) AddRisks(r ...*Risk) *SubcontrolUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddRiskIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (suo *SubcontrolUpdateOne) AddActionPlanIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddActionPlanIDs(ids...)
	return suo
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (suo *SubcontrolUpdateOne) AddActionPlans(a ...*ActionPlan) *SubcontrolUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddActionPlanIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (suo *SubcontrolUpdateOne) AddProcedureIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddProcedureIDs(ids...)
	return suo
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (suo *SubcontrolUpdateOne) AddProcedures(p ...*Procedure) *SubcontrolUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (suo *SubcontrolUpdateOne) AddInternalPolicyIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.AddInternalPolicyIDs(ids...)
	return suo
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (suo *SubcontrolUpdateOne) AddInternalPolicies(i ...*InternalPolicy) *SubcontrolUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.AddInternalPolicyIDs(ids...)
}

// SetControlOwnerID sets the "control_owner" edge to the Group entity by ID.
func (suo *SubcontrolUpdateOne) SetControlOwnerID(id string) *SubcontrolUpdateOne {
	suo.mutation.SetControlOwnerID(id)
	return suo
}

// SetNillableControlOwnerID sets the "control_owner" edge to the Group entity by ID if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableControlOwnerID(id *string) *SubcontrolUpdateOne {
	if id != nil {
		suo = suo.SetControlOwnerID(*id)
	}
	return suo
}

// SetControlOwner sets the "control_owner" edge to the Group entity.
func (suo *SubcontrolUpdateOne) SetControlOwner(g *Group) *SubcontrolUpdateOne {
	return suo.SetControlOwnerID(g.ID)
}

// SetDelegateID sets the "delegate" edge to the Group entity by ID.
func (suo *SubcontrolUpdateOne) SetDelegateID(id string) *SubcontrolUpdateOne {
	suo.mutation.SetDelegateID(id)
	return suo
}

// SetNillableDelegateID sets the "delegate" edge to the Group entity by ID if the given value is not nil.
func (suo *SubcontrolUpdateOne) SetNillableDelegateID(id *string) *SubcontrolUpdateOne {
	if id != nil {
		suo = suo.SetDelegateID(*id)
	}
	return suo
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (suo *SubcontrolUpdateOne) SetDelegate(g *Group) *SubcontrolUpdateOne {
	return suo.SetDelegateID(g.ID)
}

// Mutation returns the SubcontrolMutation object of the builder.
func (suo *SubcontrolUpdateOne) Mutation() *SubcontrolMutation {
	return suo.mutation
}

// ClearControl clears the "control" edge to the Control entity.
func (suo *SubcontrolUpdateOne) ClearControl() *SubcontrolUpdateOne {
	suo.mutation.ClearControl()
	return suo
}

// ClearMappedControls clears all "mapped_controls" edges to the MappedControl entity.
func (suo *SubcontrolUpdateOne) ClearMappedControls() *SubcontrolUpdateOne {
	suo.mutation.ClearMappedControls()
	return suo
}

// RemoveMappedControlIDs removes the "mapped_controls" edge to MappedControl entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveMappedControlIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveMappedControlIDs(ids...)
	return suo
}

// RemoveMappedControls removes "mapped_controls" edges to MappedControl entities.
func (suo *SubcontrolUpdateOne) RemoveMappedControls(m ...*MappedControl) *SubcontrolUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return suo.RemoveMappedControlIDs(ids...)
}

// ClearEvidence clears all "evidence" edges to the Evidence entity.
func (suo *SubcontrolUpdateOne) ClearEvidence() *SubcontrolUpdateOne {
	suo.mutation.ClearEvidence()
	return suo
}

// RemoveEvidenceIDs removes the "evidence" edge to Evidence entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveEvidenceIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveEvidenceIDs(ids...)
	return suo
}

// RemoveEvidence removes "evidence" edges to Evidence entities.
func (suo *SubcontrolUpdateOne) RemoveEvidence(e ...*Evidence) *SubcontrolUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveEvidenceIDs(ids...)
}

// ClearControlObjectives clears all "control_objectives" edges to the ControlObjective entity.
func (suo *SubcontrolUpdateOne) ClearControlObjectives() *SubcontrolUpdateOne {
	suo.mutation.ClearControlObjectives()
	return suo
}

// RemoveControlObjectiveIDs removes the "control_objectives" edge to ControlObjective entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveControlObjectiveIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveControlObjectiveIDs(ids...)
	return suo
}

// RemoveControlObjectives removes "control_objectives" edges to ControlObjective entities.
func (suo *SubcontrolUpdateOne) RemoveControlObjectives(c ...*ControlObjective) *SubcontrolUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveControlObjectiveIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (suo *SubcontrolUpdateOne) ClearTasks() *SubcontrolUpdateOne {
	suo.mutation.ClearTasks()
	return suo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveTaskIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveTaskIDs(ids...)
	return suo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (suo *SubcontrolUpdateOne) RemoveTasks(t ...*Task) *SubcontrolUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return suo.RemoveTaskIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (suo *SubcontrolUpdateOne) ClearNarratives() *SubcontrolUpdateOne {
	suo.mutation.ClearNarratives()
	return suo
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveNarrativeIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveNarrativeIDs(ids...)
	return suo
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (suo *SubcontrolUpdateOne) RemoveNarratives(n ...*Narrative) *SubcontrolUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return suo.RemoveNarrativeIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (suo *SubcontrolUpdateOne) ClearRisks() *SubcontrolUpdateOne {
	suo.mutation.ClearRisks()
	return suo
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveRiskIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveRiskIDs(ids...)
	return suo
}

// RemoveRisks removes "risks" edges to Risk entities.
func (suo *SubcontrolUpdateOne) RemoveRisks(r ...*Risk) *SubcontrolUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveRiskIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (suo *SubcontrolUpdateOne) ClearActionPlans() *SubcontrolUpdateOne {
	suo.mutation.ClearActionPlans()
	return suo
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveActionPlanIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveActionPlanIDs(ids...)
	return suo
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (suo *SubcontrolUpdateOne) RemoveActionPlans(a ...*ActionPlan) *SubcontrolUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveActionPlanIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (suo *SubcontrolUpdateOne) ClearProcedures() *SubcontrolUpdateOne {
	suo.mutation.ClearProcedures()
	return suo
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveProcedureIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveProcedureIDs(ids...)
	return suo
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (suo *SubcontrolUpdateOne) RemoveProcedures(p ...*Procedure) *SubcontrolUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProcedureIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (suo *SubcontrolUpdateOne) ClearInternalPolicies() *SubcontrolUpdateOne {
	suo.mutation.ClearInternalPolicies()
	return suo
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (suo *SubcontrolUpdateOne) RemoveInternalPolicyIDs(ids ...string) *SubcontrolUpdateOne {
	suo.mutation.RemoveInternalPolicyIDs(ids...)
	return suo
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (suo *SubcontrolUpdateOne) RemoveInternalPolicies(i ...*InternalPolicy) *SubcontrolUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return suo.RemoveInternalPolicyIDs(ids...)
}

// ClearControlOwner clears the "control_owner" edge to the Group entity.
func (suo *SubcontrolUpdateOne) ClearControlOwner() *SubcontrolUpdateOne {
	suo.mutation.ClearControlOwner()
	return suo
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (suo *SubcontrolUpdateOne) ClearDelegate() *SubcontrolUpdateOne {
	suo.mutation.ClearDelegate()
	return suo
}

// Where appends a list predicates to the SubcontrolUpdate builder.
func (suo *SubcontrolUpdateOne) Where(ps ...predicate.Subcontrol) *SubcontrolUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubcontrolUpdateOne) Select(field string, fields ...string) *SubcontrolUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subcontrol entity.
func (suo *SubcontrolUpdateOne) Save(ctx context.Context) (*Subcontrol, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubcontrolUpdateOne) SaveX(ctx context.Context) *Subcontrol {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubcontrolUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubcontrolUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubcontrolUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		if subcontrol.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subcontrol.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subcontrol.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubcontrolUpdateOne) check() error {
	if v, ok := suo.mutation.Status(); ok {
		if err := subcontrol.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.status": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Source(); ok {
		if err := subcontrol.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.source": %w`, err)}
		}
	}
	if v, ok := suo.mutation.ControlType(); ok {
		if err := subcontrol.ControlTypeValidator(v); err != nil {
			return &ValidationError{Name: "control_type", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.control_type": %w`, err)}
		}
	}
	if v, ok := suo.mutation.RefCode(); ok {
		if err := subcontrol.RefCodeValidator(v); err != nil {
			return &ValidationError{Name: "ref_code", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.ref_code": %w`, err)}
		}
	}
	if v, ok := suo.mutation.ControlID(); ok {
		if err := subcontrol.ControlIDValidator(v); err != nil {
			return &ValidationError{Name: "control_id", err: fmt.Errorf(`generated: validator failed for field "Subcontrol.control_id": %w`, err)}
		}
	}
	if suo.mutation.ControlCleared() && len(suo.mutation.ControlIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Subcontrol.control"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SubcontrolUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubcontrolUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SubcontrolUpdateOne) sqlSave(ctx context.Context) (_node *Subcontrol, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subcontrol.Table, subcontrol.Columns, sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Subcontrol.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subcontrol.FieldID)
		for _, f := range fields {
			if !subcontrol.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subcontrol.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(subcontrol.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subcontrol.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(subcontrol.FieldUpdatedAt, field.TypeTime)
	}
	if suo.mutation.CreatedByCleared() {
		_spec.ClearField(subcontrol.FieldCreatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(subcontrol.FieldUpdatedBy, field.TypeString, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(subcontrol.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(subcontrol.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(subcontrol.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.DeletedBy(); ok {
		_spec.SetField(subcontrol.FieldDeletedBy, field.TypeString, value)
	}
	if suo.mutation.DeletedByCleared() {
		_spec.ClearField(subcontrol.FieldDeletedBy, field.TypeString)
	}
	if value, ok := suo.mutation.Tags(); ok {
		_spec.SetField(subcontrol.FieldTags, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldTags, value)
		})
	}
	if suo.mutation.TagsCleared() {
		_spec.ClearField(subcontrol.FieldTags, field.TypeJSON)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(subcontrol.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(subcontrol.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.ReferenceID(); ok {
		_spec.SetField(subcontrol.FieldReferenceID, field.TypeString, value)
	}
	if suo.mutation.ReferenceIDCleared() {
		_spec.ClearField(subcontrol.FieldReferenceID, field.TypeString)
	}
	if value, ok := suo.mutation.AuditorReferenceID(); ok {
		_spec.SetField(subcontrol.FieldAuditorReferenceID, field.TypeString, value)
	}
	if suo.mutation.AuditorReferenceIDCleared() {
		_spec.ClearField(subcontrol.FieldAuditorReferenceID, field.TypeString)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(subcontrol.FieldStatus, field.TypeEnum, value)
	}
	if suo.mutation.StatusCleared() {
		_spec.ClearField(subcontrol.FieldStatus, field.TypeEnum)
	}
	if value, ok := suo.mutation.Source(); ok {
		_spec.SetField(subcontrol.FieldSource, field.TypeEnum, value)
	}
	if suo.mutation.SourceCleared() {
		_spec.ClearField(subcontrol.FieldSource, field.TypeEnum)
	}
	if value, ok := suo.mutation.ControlType(); ok {
		_spec.SetField(subcontrol.FieldControlType, field.TypeEnum, value)
	}
	if suo.mutation.ControlTypeCleared() {
		_spec.ClearField(subcontrol.FieldControlType, field.TypeEnum)
	}
	if value, ok := suo.mutation.Category(); ok {
		_spec.SetField(subcontrol.FieldCategory, field.TypeString, value)
	}
	if suo.mutation.CategoryCleared() {
		_spec.ClearField(subcontrol.FieldCategory, field.TypeString)
	}
	if value, ok := suo.mutation.CategoryID(); ok {
		_spec.SetField(subcontrol.FieldCategoryID, field.TypeString, value)
	}
	if suo.mutation.CategoryIDCleared() {
		_spec.ClearField(subcontrol.FieldCategoryID, field.TypeString)
	}
	if value, ok := suo.mutation.Subcategory(); ok {
		_spec.SetField(subcontrol.FieldSubcategory, field.TypeString, value)
	}
	if suo.mutation.SubcategoryCleared() {
		_spec.ClearField(subcontrol.FieldSubcategory, field.TypeString)
	}
	if value, ok := suo.mutation.MappedCategories(); ok {
		_spec.SetField(subcontrol.FieldMappedCategories, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedMappedCategories(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldMappedCategories, value)
		})
	}
	if suo.mutation.MappedCategoriesCleared() {
		_spec.ClearField(subcontrol.FieldMappedCategories, field.TypeJSON)
	}
	if value, ok := suo.mutation.AssessmentObjectives(); ok {
		_spec.SetField(subcontrol.FieldAssessmentObjectives, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedAssessmentObjectives(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldAssessmentObjectives, value)
		})
	}
	if suo.mutation.AssessmentObjectivesCleared() {
		_spec.ClearField(subcontrol.FieldAssessmentObjectives, field.TypeJSON)
	}
	if value, ok := suo.mutation.AssessmentMethods(); ok {
		_spec.SetField(subcontrol.FieldAssessmentMethods, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedAssessmentMethods(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldAssessmentMethods, value)
		})
	}
	if suo.mutation.AssessmentMethodsCleared() {
		_spec.ClearField(subcontrol.FieldAssessmentMethods, field.TypeJSON)
	}
	if value, ok := suo.mutation.ControlQuestions(); ok {
		_spec.SetField(subcontrol.FieldControlQuestions, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedControlQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldControlQuestions, value)
		})
	}
	if suo.mutation.ControlQuestionsCleared() {
		_spec.ClearField(subcontrol.FieldControlQuestions, field.TypeJSON)
	}
	if value, ok := suo.mutation.ImplementationGuidance(); ok {
		_spec.SetField(subcontrol.FieldImplementationGuidance, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedImplementationGuidance(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldImplementationGuidance, value)
		})
	}
	if suo.mutation.ImplementationGuidanceCleared() {
		_spec.ClearField(subcontrol.FieldImplementationGuidance, field.TypeJSON)
	}
	if value, ok := suo.mutation.ExampleEvidence(); ok {
		_spec.SetField(subcontrol.FieldExampleEvidence, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedExampleEvidence(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldExampleEvidence, value)
		})
	}
	if suo.mutation.ExampleEvidenceCleared() {
		_spec.ClearField(subcontrol.FieldExampleEvidence, field.TypeJSON)
	}
	if value, ok := suo.mutation.References(); ok {
		_spec.SetField(subcontrol.FieldReferences, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subcontrol.FieldReferences, value)
		})
	}
	if suo.mutation.ReferencesCleared() {
		_spec.ClearField(subcontrol.FieldReferences, field.TypeJSON)
	}
	if value, ok := suo.mutation.RefCode(); ok {
		_spec.SetField(subcontrol.FieldRefCode, field.TypeString, value)
	}
	if suo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: []string{subcontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subcontrol.ControlTable,
			Columns: []string{subcontrol.ControlColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.MappedControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedControlsTable,
			Columns: subcontrol.MappedControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.MappedControlSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedMappedControlsIDs(); len(nodes) > 0 && !suo.mutation.MappedControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedControlsTable,
			Columns: subcontrol.MappedControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.MappedControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.MappedControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.MappedControlsTable,
			Columns: subcontrol.MappedControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.MappedControlSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.EvidenceSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedEvidenceIDs(); len(nodes) > 0 && !suo.mutation.EvidenceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subcontrol.EvidenceTable,
			Columns: subcontrol.EvidencePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.EvidenceSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.SubcontrolControlObjectives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedControlObjectivesIDs(); len(nodes) > 0 && !suo.mutation.ControlObjectivesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.SubcontrolControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.ControlObjectivesTable,
			Columns: subcontrol.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.SubcontrolControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.SubcontrolTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !suo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subcontrol.TasksTable,
			Columns: subcontrol.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.SubcontrolTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Narrative
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !suo.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.NarrativesTable,
			Columns: []string{subcontrol.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: []string{subcontrol.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedRisksIDs(); len(nodes) > 0 && !suo.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: []string{subcontrol.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.RisksTable,
			Columns: []string{subcontrol.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ActionPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !suo.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ActionPlansTable,
			Columns: []string{subcontrol.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: []string{subcontrol.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !suo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: []string{subcontrol.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.ProceduresTable,
			Columns: []string{subcontrol.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: []string{subcontrol.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.InternalPolicy
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !suo.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: []string{subcontrol.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subcontrol.InternalPoliciesTable,
			Columns: []string{subcontrol.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ControlOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.ControlOwnerTable,
			Columns: []string{subcontrol.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ControlOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.ControlOwnerTable,
			Columns: []string{subcontrol.ControlOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.DelegateTable,
			Columns: []string{subcontrol.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subcontrol
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subcontrol.DelegateTable,
			Columns: []string{subcontrol.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = suo.schemaConfig.Subcontrol
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_spec.AddModifiers(suo.modifiers...)
	_node = &Subcontrol{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subcontrol.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
