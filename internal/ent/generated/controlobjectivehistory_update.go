// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/controlobjectivehistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ControlObjectiveHistoryUpdate is the builder for updating ControlObjectiveHistory entities.
type ControlObjectiveHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ControlObjectiveHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ControlObjectiveHistoryUpdate builder.
func (cohu *ControlObjectiveHistoryUpdate) Where(ps ...predicate.ControlObjectiveHistory) *ControlObjectiveHistoryUpdate {
	cohu.mutation.Where(ps...)
	return cohu
}

// SetUpdatedAt sets the "updated_at" field.
func (cohu *ControlObjectiveHistoryUpdate) SetUpdatedAt(t time.Time) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetUpdatedAt(t)
	return cohu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cohu *ControlObjectiveHistoryUpdate) ClearUpdatedAt() *ControlObjectiveHistoryUpdate {
	cohu.mutation.ClearUpdatedAt()
	return cohu
}

// SetUpdatedBy sets the "updated_by" field.
func (cohu *ControlObjectiveHistoryUpdate) SetUpdatedBy(s string) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetUpdatedBy(s)
	return cohu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cohu *ControlObjectiveHistoryUpdate) SetNillableUpdatedBy(s *string) *ControlObjectiveHistoryUpdate {
	if s != nil {
		cohu.SetUpdatedBy(*s)
	}
	return cohu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cohu *ControlObjectiveHistoryUpdate) ClearUpdatedBy() *ControlObjectiveHistoryUpdate {
	cohu.mutation.ClearUpdatedBy()
	return cohu
}

// SetDeletedAt sets the "deleted_at" field.
func (cohu *ControlObjectiveHistoryUpdate) SetDeletedAt(t time.Time) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetDeletedAt(t)
	return cohu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cohu *ControlObjectiveHistoryUpdate) SetNillableDeletedAt(t *time.Time) *ControlObjectiveHistoryUpdate {
	if t != nil {
		cohu.SetDeletedAt(*t)
	}
	return cohu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cohu *ControlObjectiveHistoryUpdate) ClearDeletedAt() *ControlObjectiveHistoryUpdate {
	cohu.mutation.ClearDeletedAt()
	return cohu
}

// SetDeletedBy sets the "deleted_by" field.
func (cohu *ControlObjectiveHistoryUpdate) SetDeletedBy(s string) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetDeletedBy(s)
	return cohu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cohu *ControlObjectiveHistoryUpdate) SetNillableDeletedBy(s *string) *ControlObjectiveHistoryUpdate {
	if s != nil {
		cohu.SetDeletedBy(*s)
	}
	return cohu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (cohu *ControlObjectiveHistoryUpdate) ClearDeletedBy() *ControlObjectiveHistoryUpdate {
	cohu.mutation.ClearDeletedBy()
	return cohu
}

// SetRevision sets the "revision" field.
func (cohu *ControlObjectiveHistoryUpdate) SetRevision(s string) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetRevision(s)
	return cohu
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (cohu *ControlObjectiveHistoryUpdate) SetNillableRevision(s *string) *ControlObjectiveHistoryUpdate {
	if s != nil {
		cohu.SetRevision(*s)
	}
	return cohu
}

// ClearRevision clears the value of the "revision" field.
func (cohu *ControlObjectiveHistoryUpdate) ClearRevision() *ControlObjectiveHistoryUpdate {
	cohu.mutation.ClearRevision()
	return cohu
}

// SetTags sets the "tags" field.
func (cohu *ControlObjectiveHistoryUpdate) SetTags(s []string) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetTags(s)
	return cohu
}

// AppendTags appends s to the "tags" field.
func (cohu *ControlObjectiveHistoryUpdate) AppendTags(s []string) *ControlObjectiveHistoryUpdate {
	cohu.mutation.AppendTags(s)
	return cohu
}

// ClearTags clears the value of the "tags" field.
func (cohu *ControlObjectiveHistoryUpdate) ClearTags() *ControlObjectiveHistoryUpdate {
	cohu.mutation.ClearTags()
	return cohu
}

// SetName sets the "name" field.
func (cohu *ControlObjectiveHistoryUpdate) SetName(s string) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetName(s)
	return cohu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cohu *ControlObjectiveHistoryUpdate) SetNillableName(s *string) *ControlObjectiveHistoryUpdate {
	if s != nil {
		cohu.SetName(*s)
	}
	return cohu
}

// SetDesiredOutcome sets the "desired_outcome" field.
func (cohu *ControlObjectiveHistoryUpdate) SetDesiredOutcome(s string) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetDesiredOutcome(s)
	return cohu
}

// SetNillableDesiredOutcome sets the "desired_outcome" field if the given value is not nil.
func (cohu *ControlObjectiveHistoryUpdate) SetNillableDesiredOutcome(s *string) *ControlObjectiveHistoryUpdate {
	if s != nil {
		cohu.SetDesiredOutcome(*s)
	}
	return cohu
}

// ClearDesiredOutcome clears the value of the "desired_outcome" field.
func (cohu *ControlObjectiveHistoryUpdate) ClearDesiredOutcome() *ControlObjectiveHistoryUpdate {
	cohu.mutation.ClearDesiredOutcome()
	return cohu
}

// SetStatus sets the "status" field.
func (cohu *ControlObjectiveHistoryUpdate) SetStatus(s string) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetStatus(s)
	return cohu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cohu *ControlObjectiveHistoryUpdate) SetNillableStatus(s *string) *ControlObjectiveHistoryUpdate {
	if s != nil {
		cohu.SetStatus(*s)
	}
	return cohu
}

// ClearStatus clears the value of the "status" field.
func (cohu *ControlObjectiveHistoryUpdate) ClearStatus() *ControlObjectiveHistoryUpdate {
	cohu.mutation.ClearStatus()
	return cohu
}

// SetSource sets the "source" field.
func (cohu *ControlObjectiveHistoryUpdate) SetSource(es enums.ControlSource) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetSource(es)
	return cohu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (cohu *ControlObjectiveHistoryUpdate) SetNillableSource(es *enums.ControlSource) *ControlObjectiveHistoryUpdate {
	if es != nil {
		cohu.SetSource(*es)
	}
	return cohu
}

// ClearSource clears the value of the "source" field.
func (cohu *ControlObjectiveHistoryUpdate) ClearSource() *ControlObjectiveHistoryUpdate {
	cohu.mutation.ClearSource()
	return cohu
}

// SetControlObjectiveType sets the "control_objective_type" field.
func (cohu *ControlObjectiveHistoryUpdate) SetControlObjectiveType(s string) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetControlObjectiveType(s)
	return cohu
}

// SetNillableControlObjectiveType sets the "control_objective_type" field if the given value is not nil.
func (cohu *ControlObjectiveHistoryUpdate) SetNillableControlObjectiveType(s *string) *ControlObjectiveHistoryUpdate {
	if s != nil {
		cohu.SetControlObjectiveType(*s)
	}
	return cohu
}

// ClearControlObjectiveType clears the value of the "control_objective_type" field.
func (cohu *ControlObjectiveHistoryUpdate) ClearControlObjectiveType() *ControlObjectiveHistoryUpdate {
	cohu.mutation.ClearControlObjectiveType()
	return cohu
}

// SetCategory sets the "category" field.
func (cohu *ControlObjectiveHistoryUpdate) SetCategory(s string) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetCategory(s)
	return cohu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cohu *ControlObjectiveHistoryUpdate) SetNillableCategory(s *string) *ControlObjectiveHistoryUpdate {
	if s != nil {
		cohu.SetCategory(*s)
	}
	return cohu
}

// ClearCategory clears the value of the "category" field.
func (cohu *ControlObjectiveHistoryUpdate) ClearCategory() *ControlObjectiveHistoryUpdate {
	cohu.mutation.ClearCategory()
	return cohu
}

// SetSubcategory sets the "subcategory" field.
func (cohu *ControlObjectiveHistoryUpdate) SetSubcategory(s string) *ControlObjectiveHistoryUpdate {
	cohu.mutation.SetSubcategory(s)
	return cohu
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (cohu *ControlObjectiveHistoryUpdate) SetNillableSubcategory(s *string) *ControlObjectiveHistoryUpdate {
	if s != nil {
		cohu.SetSubcategory(*s)
	}
	return cohu
}

// ClearSubcategory clears the value of the "subcategory" field.
func (cohu *ControlObjectiveHistoryUpdate) ClearSubcategory() *ControlObjectiveHistoryUpdate {
	cohu.mutation.ClearSubcategory()
	return cohu
}

// Mutation returns the ControlObjectiveHistoryMutation object of the builder.
func (cohu *ControlObjectiveHistoryUpdate) Mutation() *ControlObjectiveHistoryMutation {
	return cohu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cohu *ControlObjectiveHistoryUpdate) Save(ctx context.Context) (int, error) {
	cohu.defaults()
	return withHooks(ctx, cohu.sqlSave, cohu.mutation, cohu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cohu *ControlObjectiveHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := cohu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cohu *ControlObjectiveHistoryUpdate) Exec(ctx context.Context) error {
	_, err := cohu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cohu *ControlObjectiveHistoryUpdate) ExecX(ctx context.Context) {
	if err := cohu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cohu *ControlObjectiveHistoryUpdate) defaults() {
	if _, ok := cohu.mutation.UpdatedAt(); !ok && !cohu.mutation.UpdatedAtCleared() {
		v := controlobjectivehistory.UpdateDefaultUpdatedAt()
		cohu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cohu *ControlObjectiveHistoryUpdate) check() error {
	if v, ok := cohu.mutation.Source(); ok {
		if err := controlobjectivehistory.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "ControlObjectiveHistory.source": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cohu *ControlObjectiveHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlObjectiveHistoryUpdate {
	cohu.modifiers = append(cohu.modifiers, modifiers...)
	return cohu
}

func (cohu *ControlObjectiveHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cohu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(controlobjectivehistory.Table, controlobjectivehistory.Columns, sqlgraph.NewFieldSpec(controlobjectivehistory.FieldID, field.TypeString))
	if ps := cohu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cohu.mutation.RefCleared() {
		_spec.ClearField(controlobjectivehistory.FieldRef, field.TypeString)
	}
	if cohu.mutation.CreatedAtCleared() {
		_spec.ClearField(controlobjectivehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cohu.mutation.UpdatedAt(); ok {
		_spec.SetField(controlobjectivehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if cohu.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlobjectivehistory.FieldUpdatedAt, field.TypeTime)
	}
	if cohu.mutation.CreatedByCleared() {
		_spec.ClearField(controlobjectivehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cohu.mutation.UpdatedBy(); ok {
		_spec.SetField(controlobjectivehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if cohu.mutation.UpdatedByCleared() {
		_spec.ClearField(controlobjectivehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cohu.mutation.DeletedAt(); ok {
		_spec.SetField(controlobjectivehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if cohu.mutation.DeletedAtCleared() {
		_spec.ClearField(controlobjectivehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cohu.mutation.DeletedBy(); ok {
		_spec.SetField(controlobjectivehistory.FieldDeletedBy, field.TypeString, value)
	}
	if cohu.mutation.DeletedByCleared() {
		_spec.ClearField(controlobjectivehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := cohu.mutation.Revision(); ok {
		_spec.SetField(controlobjectivehistory.FieldRevision, field.TypeString, value)
	}
	if cohu.mutation.RevisionCleared() {
		_spec.ClearField(controlobjectivehistory.FieldRevision, field.TypeString)
	}
	if value, ok := cohu.mutation.Tags(); ok {
		_spec.SetField(controlobjectivehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cohu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlobjectivehistory.FieldTags, value)
		})
	}
	if cohu.mutation.TagsCleared() {
		_spec.ClearField(controlobjectivehistory.FieldTags, field.TypeJSON)
	}
	if cohu.mutation.OwnerIDCleared() {
		_spec.ClearField(controlobjectivehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := cohu.mutation.Name(); ok {
		_spec.SetField(controlobjectivehistory.FieldName, field.TypeString, value)
	}
	if value, ok := cohu.mutation.DesiredOutcome(); ok {
		_spec.SetField(controlobjectivehistory.FieldDesiredOutcome, field.TypeString, value)
	}
	if cohu.mutation.DesiredOutcomeCleared() {
		_spec.ClearField(controlobjectivehistory.FieldDesiredOutcome, field.TypeString)
	}
	if value, ok := cohu.mutation.Status(); ok {
		_spec.SetField(controlobjectivehistory.FieldStatus, field.TypeString, value)
	}
	if cohu.mutation.StatusCleared() {
		_spec.ClearField(controlobjectivehistory.FieldStatus, field.TypeString)
	}
	if value, ok := cohu.mutation.Source(); ok {
		_spec.SetField(controlobjectivehistory.FieldSource, field.TypeEnum, value)
	}
	if cohu.mutation.SourceCleared() {
		_spec.ClearField(controlobjectivehistory.FieldSource, field.TypeEnum)
	}
	if value, ok := cohu.mutation.ControlObjectiveType(); ok {
		_spec.SetField(controlobjectivehistory.FieldControlObjectiveType, field.TypeString, value)
	}
	if cohu.mutation.ControlObjectiveTypeCleared() {
		_spec.ClearField(controlobjectivehistory.FieldControlObjectiveType, field.TypeString)
	}
	if value, ok := cohu.mutation.Category(); ok {
		_spec.SetField(controlobjectivehistory.FieldCategory, field.TypeString, value)
	}
	if cohu.mutation.CategoryCleared() {
		_spec.ClearField(controlobjectivehistory.FieldCategory, field.TypeString)
	}
	if value, ok := cohu.mutation.Subcategory(); ok {
		_spec.SetField(controlobjectivehistory.FieldSubcategory, field.TypeString, value)
	}
	if cohu.mutation.SubcategoryCleared() {
		_spec.ClearField(controlobjectivehistory.FieldSubcategory, field.TypeString)
	}
	_spec.Node.Schema = cohu.schemaConfig.ControlObjectiveHistory
	ctx = internal.NewSchemaConfigContext(ctx, cohu.schemaConfig)
	_spec.AddModifiers(cohu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cohu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlobjectivehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cohu.mutation.done = true
	return n, nil
}

// ControlObjectiveHistoryUpdateOne is the builder for updating a single ControlObjectiveHistory entity.
type ControlObjectiveHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ControlObjectiveHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetUpdatedAt(t time.Time) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetUpdatedAt(t)
	return cohuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) ClearUpdatedAt() *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.ClearUpdatedAt()
	return cohuo
}

// SetUpdatedBy sets the "updated_by" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetUpdatedBy(s string) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetUpdatedBy(s)
	return cohuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetNillableUpdatedBy(s *string) *ControlObjectiveHistoryUpdateOne {
	if s != nil {
		cohuo.SetUpdatedBy(*s)
	}
	return cohuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) ClearUpdatedBy() *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.ClearUpdatedBy()
	return cohuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetDeletedAt(t time.Time) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetDeletedAt(t)
	return cohuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *ControlObjectiveHistoryUpdateOne {
	if t != nil {
		cohuo.SetDeletedAt(*t)
	}
	return cohuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) ClearDeletedAt() *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.ClearDeletedAt()
	return cohuo
}

// SetDeletedBy sets the "deleted_by" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetDeletedBy(s string) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetDeletedBy(s)
	return cohuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetNillableDeletedBy(s *string) *ControlObjectiveHistoryUpdateOne {
	if s != nil {
		cohuo.SetDeletedBy(*s)
	}
	return cohuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) ClearDeletedBy() *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.ClearDeletedBy()
	return cohuo
}

// SetRevision sets the "revision" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetRevision(s string) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetRevision(s)
	return cohuo
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetNillableRevision(s *string) *ControlObjectiveHistoryUpdateOne {
	if s != nil {
		cohuo.SetRevision(*s)
	}
	return cohuo
}

// ClearRevision clears the value of the "revision" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) ClearRevision() *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.ClearRevision()
	return cohuo
}

// SetTags sets the "tags" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetTags(s []string) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetTags(s)
	return cohuo
}

// AppendTags appends s to the "tags" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) AppendTags(s []string) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.AppendTags(s)
	return cohuo
}

// ClearTags clears the value of the "tags" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) ClearTags() *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.ClearTags()
	return cohuo
}

// SetName sets the "name" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetName(s string) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetName(s)
	return cohuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetNillableName(s *string) *ControlObjectiveHistoryUpdateOne {
	if s != nil {
		cohuo.SetName(*s)
	}
	return cohuo
}

// SetDesiredOutcome sets the "desired_outcome" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetDesiredOutcome(s string) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetDesiredOutcome(s)
	return cohuo
}

// SetNillableDesiredOutcome sets the "desired_outcome" field if the given value is not nil.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetNillableDesiredOutcome(s *string) *ControlObjectiveHistoryUpdateOne {
	if s != nil {
		cohuo.SetDesiredOutcome(*s)
	}
	return cohuo
}

// ClearDesiredOutcome clears the value of the "desired_outcome" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) ClearDesiredOutcome() *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.ClearDesiredOutcome()
	return cohuo
}

// SetStatus sets the "status" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetStatus(s string) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetStatus(s)
	return cohuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetNillableStatus(s *string) *ControlObjectiveHistoryUpdateOne {
	if s != nil {
		cohuo.SetStatus(*s)
	}
	return cohuo
}

// ClearStatus clears the value of the "status" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) ClearStatus() *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.ClearStatus()
	return cohuo
}

// SetSource sets the "source" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetSource(es enums.ControlSource) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetSource(es)
	return cohuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetNillableSource(es *enums.ControlSource) *ControlObjectiveHistoryUpdateOne {
	if es != nil {
		cohuo.SetSource(*es)
	}
	return cohuo
}

// ClearSource clears the value of the "source" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) ClearSource() *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.ClearSource()
	return cohuo
}

// SetControlObjectiveType sets the "control_objective_type" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetControlObjectiveType(s string) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetControlObjectiveType(s)
	return cohuo
}

// SetNillableControlObjectiveType sets the "control_objective_type" field if the given value is not nil.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetNillableControlObjectiveType(s *string) *ControlObjectiveHistoryUpdateOne {
	if s != nil {
		cohuo.SetControlObjectiveType(*s)
	}
	return cohuo
}

// ClearControlObjectiveType clears the value of the "control_objective_type" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) ClearControlObjectiveType() *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.ClearControlObjectiveType()
	return cohuo
}

// SetCategory sets the "category" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetCategory(s string) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetCategory(s)
	return cohuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetNillableCategory(s *string) *ControlObjectiveHistoryUpdateOne {
	if s != nil {
		cohuo.SetCategory(*s)
	}
	return cohuo
}

// ClearCategory clears the value of the "category" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) ClearCategory() *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.ClearCategory()
	return cohuo
}

// SetSubcategory sets the "subcategory" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetSubcategory(s string) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.SetSubcategory(s)
	return cohuo
}

// SetNillableSubcategory sets the "subcategory" field if the given value is not nil.
func (cohuo *ControlObjectiveHistoryUpdateOne) SetNillableSubcategory(s *string) *ControlObjectiveHistoryUpdateOne {
	if s != nil {
		cohuo.SetSubcategory(*s)
	}
	return cohuo
}

// ClearSubcategory clears the value of the "subcategory" field.
func (cohuo *ControlObjectiveHistoryUpdateOne) ClearSubcategory() *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.ClearSubcategory()
	return cohuo
}

// Mutation returns the ControlObjectiveHistoryMutation object of the builder.
func (cohuo *ControlObjectiveHistoryUpdateOne) Mutation() *ControlObjectiveHistoryMutation {
	return cohuo.mutation
}

// Where appends a list predicates to the ControlObjectiveHistoryUpdate builder.
func (cohuo *ControlObjectiveHistoryUpdateOne) Where(ps ...predicate.ControlObjectiveHistory) *ControlObjectiveHistoryUpdateOne {
	cohuo.mutation.Where(ps...)
	return cohuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cohuo *ControlObjectiveHistoryUpdateOne) Select(field string, fields ...string) *ControlObjectiveHistoryUpdateOne {
	cohuo.fields = append([]string{field}, fields...)
	return cohuo
}

// Save executes the query and returns the updated ControlObjectiveHistory entity.
func (cohuo *ControlObjectiveHistoryUpdateOne) Save(ctx context.Context) (*ControlObjectiveHistory, error) {
	cohuo.defaults()
	return withHooks(ctx, cohuo.sqlSave, cohuo.mutation, cohuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cohuo *ControlObjectiveHistoryUpdateOne) SaveX(ctx context.Context) *ControlObjectiveHistory {
	node, err := cohuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cohuo *ControlObjectiveHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := cohuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cohuo *ControlObjectiveHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := cohuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cohuo *ControlObjectiveHistoryUpdateOne) defaults() {
	if _, ok := cohuo.mutation.UpdatedAt(); !ok && !cohuo.mutation.UpdatedAtCleared() {
		v := controlobjectivehistory.UpdateDefaultUpdatedAt()
		cohuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cohuo *ControlObjectiveHistoryUpdateOne) check() error {
	if v, ok := cohuo.mutation.Source(); ok {
		if err := controlobjectivehistory.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "ControlObjectiveHistory.source": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cohuo *ControlObjectiveHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ControlObjectiveHistoryUpdateOne {
	cohuo.modifiers = append(cohuo.modifiers, modifiers...)
	return cohuo
}

func (cohuo *ControlObjectiveHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ControlObjectiveHistory, err error) {
	if err := cohuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(controlobjectivehistory.Table, controlobjectivehistory.Columns, sqlgraph.NewFieldSpec(controlobjectivehistory.FieldID, field.TypeString))
	id, ok := cohuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ControlObjectiveHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cohuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, controlobjectivehistory.FieldID)
		for _, f := range fields {
			if !controlobjectivehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != controlobjectivehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cohuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cohuo.mutation.RefCleared() {
		_spec.ClearField(controlobjectivehistory.FieldRef, field.TypeString)
	}
	if cohuo.mutation.CreatedAtCleared() {
		_spec.ClearField(controlobjectivehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := cohuo.mutation.UpdatedAt(); ok {
		_spec.SetField(controlobjectivehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if cohuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(controlobjectivehistory.FieldUpdatedAt, field.TypeTime)
	}
	if cohuo.mutation.CreatedByCleared() {
		_spec.ClearField(controlobjectivehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := cohuo.mutation.UpdatedBy(); ok {
		_spec.SetField(controlobjectivehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if cohuo.mutation.UpdatedByCleared() {
		_spec.ClearField(controlobjectivehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := cohuo.mutation.DeletedAt(); ok {
		_spec.SetField(controlobjectivehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if cohuo.mutation.DeletedAtCleared() {
		_spec.ClearField(controlobjectivehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := cohuo.mutation.DeletedBy(); ok {
		_spec.SetField(controlobjectivehistory.FieldDeletedBy, field.TypeString, value)
	}
	if cohuo.mutation.DeletedByCleared() {
		_spec.ClearField(controlobjectivehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := cohuo.mutation.Revision(); ok {
		_spec.SetField(controlobjectivehistory.FieldRevision, field.TypeString, value)
	}
	if cohuo.mutation.RevisionCleared() {
		_spec.ClearField(controlobjectivehistory.FieldRevision, field.TypeString)
	}
	if value, ok := cohuo.mutation.Tags(); ok {
		_spec.SetField(controlobjectivehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := cohuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, controlobjectivehistory.FieldTags, value)
		})
	}
	if cohuo.mutation.TagsCleared() {
		_spec.ClearField(controlobjectivehistory.FieldTags, field.TypeJSON)
	}
	if cohuo.mutation.OwnerIDCleared() {
		_spec.ClearField(controlobjectivehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := cohuo.mutation.Name(); ok {
		_spec.SetField(controlobjectivehistory.FieldName, field.TypeString, value)
	}
	if value, ok := cohuo.mutation.DesiredOutcome(); ok {
		_spec.SetField(controlobjectivehistory.FieldDesiredOutcome, field.TypeString, value)
	}
	if cohuo.mutation.DesiredOutcomeCleared() {
		_spec.ClearField(controlobjectivehistory.FieldDesiredOutcome, field.TypeString)
	}
	if value, ok := cohuo.mutation.Status(); ok {
		_spec.SetField(controlobjectivehistory.FieldStatus, field.TypeString, value)
	}
	if cohuo.mutation.StatusCleared() {
		_spec.ClearField(controlobjectivehistory.FieldStatus, field.TypeString)
	}
	if value, ok := cohuo.mutation.Source(); ok {
		_spec.SetField(controlobjectivehistory.FieldSource, field.TypeEnum, value)
	}
	if cohuo.mutation.SourceCleared() {
		_spec.ClearField(controlobjectivehistory.FieldSource, field.TypeEnum)
	}
	if value, ok := cohuo.mutation.ControlObjectiveType(); ok {
		_spec.SetField(controlobjectivehistory.FieldControlObjectiveType, field.TypeString, value)
	}
	if cohuo.mutation.ControlObjectiveTypeCleared() {
		_spec.ClearField(controlobjectivehistory.FieldControlObjectiveType, field.TypeString)
	}
	if value, ok := cohuo.mutation.Category(); ok {
		_spec.SetField(controlobjectivehistory.FieldCategory, field.TypeString, value)
	}
	if cohuo.mutation.CategoryCleared() {
		_spec.ClearField(controlobjectivehistory.FieldCategory, field.TypeString)
	}
	if value, ok := cohuo.mutation.Subcategory(); ok {
		_spec.SetField(controlobjectivehistory.FieldSubcategory, field.TypeString, value)
	}
	if cohuo.mutation.SubcategoryCleared() {
		_spec.ClearField(controlobjectivehistory.FieldSubcategory, field.TypeString)
	}
	_spec.Node.Schema = cohuo.schemaConfig.ControlObjectiveHistory
	ctx = internal.NewSchemaConfigContext(ctx, cohuo.schemaConfig)
	_spec.AddModifiers(cohuo.modifiers...)
	_node = &ControlObjectiveHistory{config: cohuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cohuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{controlobjectivehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cohuo.mutation.done = true
	return _node, nil
}
