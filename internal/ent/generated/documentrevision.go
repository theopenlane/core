// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/documentrevision"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
)

// DocumentRevision is the model entity for the DocumentRevision schema.
type DocumentRevision struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
	Revision string `json:"revision,omitempty"`
	// details of the document
	Details string `json:"details,omitempty"`
	// status of the approval, e.g. pending, approved, rejected
	Status enums.ApprovalStatus `json:"status,omitempty"`
	// ApprovalDate holds the value of the "approval_date" field.
	ApprovalDate *time.Time `json:"approval_date,omitempty"`
	// the user that submitted the document for approval
	SubmittedByID string `json:"submitted_by_id,omitempty"`
	// the user that approved the document
	ApprovedByID string `json:"approved_by_id,omitempty"`
	// the internal policy the document is related to
	InternalPolicyID string `json:"internal_policy_id,omitempty"`
	// the procedure the document is related to
	ProcedureID string `json:"procedure_id,omitempty"`
	// the action plan the document is related to
	ActionPlanID string `json:"action_plan_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DocumentRevisionQuery when eager-loading is set.
	Edges                              DocumentRevisionEdges `json:"edges"`
	action_plan_document_revisions     *string
	internal_policy_document_revisions *string
	procedure_document_revisions       *string
	selectValues                       sql.SelectValues
}

// DocumentRevisionEdges holds the relations/edges for other nodes in the graph.
type DocumentRevisionEdges struct {
	// the user that submitted the document for approval
	SubmittedBy *User `json:"submitted_by,omitempty"`
	// the user that approved the document
	ApprovedBy *User `json:"approved_by,omitempty"`
	// the internal policy the document is related to
	InternalPolicy *InternalPolicy `json:"internal_policy,omitempty"`
	// the procedure the document is related to
	Procedure *Procedure `json:"procedure,omitempty"`
	// the action plan the document is related to
	ActionPlan *ActionPlan `json:"action_plan,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int
}

// SubmittedByOrErr returns the SubmittedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentRevisionEdges) SubmittedByOrErr() (*User, error) {
	if e.SubmittedBy != nil {
		return e.SubmittedBy, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "submitted_by"}
}

// ApprovedByOrErr returns the ApprovedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentRevisionEdges) ApprovedByOrErr() (*User, error) {
	if e.ApprovedBy != nil {
		return e.ApprovedBy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "approved_by"}
}

// InternalPolicyOrErr returns the InternalPolicy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentRevisionEdges) InternalPolicyOrErr() (*InternalPolicy, error) {
	if e.InternalPolicy != nil {
		return e.InternalPolicy, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: internalpolicy.Label}
	}
	return nil, &NotLoadedError{edge: "internal_policy"}
}

// ProcedureOrErr returns the Procedure value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentRevisionEdges) ProcedureOrErr() (*Procedure, error) {
	if e.Procedure != nil {
		return e.Procedure, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: procedure.Label}
	}
	return nil, &NotLoadedError{edge: "procedure"}
}

// ActionPlanOrErr returns the ActionPlan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DocumentRevisionEdges) ActionPlanOrErr() (*ActionPlan, error) {
	if e.ActionPlan != nil {
		return e.ActionPlan, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: actionplan.Label}
	}
	return nil, &NotLoadedError{edge: "action_plan"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DocumentRevision) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case documentrevision.FieldTags:
			values[i] = new([]byte)
		case documentrevision.FieldID, documentrevision.FieldCreatedBy, documentrevision.FieldUpdatedBy, documentrevision.FieldDeletedBy, documentrevision.FieldRevision, documentrevision.FieldDetails, documentrevision.FieldStatus, documentrevision.FieldSubmittedByID, documentrevision.FieldApprovedByID, documentrevision.FieldInternalPolicyID, documentrevision.FieldProcedureID, documentrevision.FieldActionPlanID:
			values[i] = new(sql.NullString)
		case documentrevision.FieldCreatedAt, documentrevision.FieldUpdatedAt, documentrevision.FieldDeletedAt, documentrevision.FieldApprovalDate:
			values[i] = new(sql.NullTime)
		case documentrevision.ForeignKeys[0]: // action_plan_document_revisions
			values[i] = new(sql.NullString)
		case documentrevision.ForeignKeys[1]: // internal_policy_document_revisions
			values[i] = new(sql.NullString)
		case documentrevision.ForeignKeys[2]: // procedure_document_revisions
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DocumentRevision fields.
func (dr *DocumentRevision) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case documentrevision.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				dr.ID = value.String
			}
		case documentrevision.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dr.CreatedAt = value.Time
			}
		case documentrevision.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dr.UpdatedAt = value.Time
			}
		case documentrevision.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				dr.CreatedBy = value.String
			}
		case documentrevision.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				dr.UpdatedBy = value.String
			}
		case documentrevision.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				dr.DeletedAt = value.Time
			}
		case documentrevision.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				dr.DeletedBy = value.String
			}
		case documentrevision.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dr.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case documentrevision.FieldRevision:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				dr.Revision = value.String
			}
		case documentrevision.FieldDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value.Valid {
				dr.Details = value.String
			}
		case documentrevision.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				dr.Status = enums.ApprovalStatus(value.String)
			}
		case documentrevision.FieldApprovalDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field approval_date", values[i])
			} else if value.Valid {
				dr.ApprovalDate = new(time.Time)
				*dr.ApprovalDate = value.Time
			}
		case documentrevision.FieldSubmittedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field submitted_by_id", values[i])
			} else if value.Valid {
				dr.SubmittedByID = value.String
			}
		case documentrevision.FieldApprovedByID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field approved_by_id", values[i])
			} else if value.Valid {
				dr.ApprovedByID = value.String
			}
		case documentrevision.FieldInternalPolicyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_policy_id", values[i])
			} else if value.Valid {
				dr.InternalPolicyID = value.String
			}
		case documentrevision.FieldProcedureID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field procedure_id", values[i])
			} else if value.Valid {
				dr.ProcedureID = value.String
			}
		case documentrevision.FieldActionPlanID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_plan_id", values[i])
			} else if value.Valid {
				dr.ActionPlanID = value.String
			}
		case documentrevision.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field action_plan_document_revisions", values[i])
			} else if value.Valid {
				dr.action_plan_document_revisions = new(string)
				*dr.action_plan_document_revisions = value.String
			}
		case documentrevision.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_policy_document_revisions", values[i])
			} else if value.Valid {
				dr.internal_policy_document_revisions = new(string)
				*dr.internal_policy_document_revisions = value.String
			}
		case documentrevision.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field procedure_document_revisions", values[i])
			} else if value.Valid {
				dr.procedure_document_revisions = new(string)
				*dr.procedure_document_revisions = value.String
			}
		default:
			dr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DocumentRevision.
// This includes values selected through modifiers, order, etc.
func (dr *DocumentRevision) Value(name string) (ent.Value, error) {
	return dr.selectValues.Get(name)
}

// QuerySubmittedBy queries the "submitted_by" edge of the DocumentRevision entity.
func (dr *DocumentRevision) QuerySubmittedBy() *UserQuery {
	return NewDocumentRevisionClient(dr.config).QuerySubmittedBy(dr)
}

// QueryApprovedBy queries the "approved_by" edge of the DocumentRevision entity.
func (dr *DocumentRevision) QueryApprovedBy() *UserQuery {
	return NewDocumentRevisionClient(dr.config).QueryApprovedBy(dr)
}

// QueryInternalPolicy queries the "internal_policy" edge of the DocumentRevision entity.
func (dr *DocumentRevision) QueryInternalPolicy() *InternalPolicyQuery {
	return NewDocumentRevisionClient(dr.config).QueryInternalPolicy(dr)
}

// QueryProcedure queries the "procedure" edge of the DocumentRevision entity.
func (dr *DocumentRevision) QueryProcedure() *ProcedureQuery {
	return NewDocumentRevisionClient(dr.config).QueryProcedure(dr)
}

// QueryActionPlan queries the "action_plan" edge of the DocumentRevision entity.
func (dr *DocumentRevision) QueryActionPlan() *ActionPlanQuery {
	return NewDocumentRevisionClient(dr.config).QueryActionPlan(dr)
}

// Update returns a builder for updating this DocumentRevision.
// Note that you need to call DocumentRevision.Unwrap() before calling this method if this DocumentRevision
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DocumentRevision) Update() *DocumentRevisionUpdateOne {
	return NewDocumentRevisionClient(dr.config).UpdateOne(dr)
}

// Unwrap unwraps the DocumentRevision entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dr *DocumentRevision) Unwrap() *DocumentRevision {
	_tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("generated: DocumentRevision is not a transactional entity")
	}
	dr.config.driver = _tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DocumentRevision) String() string {
	var builder strings.Builder
	builder.WriteString("DocumentRevision(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(dr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(dr.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(dr.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(dr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(dr.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", dr.Tags))
	builder.WriteString(", ")
	builder.WriteString("revision=")
	builder.WriteString(dr.Revision)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(dr.Details)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", dr.Status))
	builder.WriteString(", ")
	if v := dr.ApprovalDate; v != nil {
		builder.WriteString("approval_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("submitted_by_id=")
	builder.WriteString(dr.SubmittedByID)
	builder.WriteString(", ")
	builder.WriteString("approved_by_id=")
	builder.WriteString(dr.ApprovedByID)
	builder.WriteString(", ")
	builder.WriteString("internal_policy_id=")
	builder.WriteString(dr.InternalPolicyID)
	builder.WriteString(", ")
	builder.WriteString("procedure_id=")
	builder.WriteString(dr.ProcedureID)
	builder.WriteString(", ")
	builder.WriteString("action_plan_id=")
	builder.WriteString(dr.ActionPlanID)
	builder.WriteByte(')')
	return builder.String()
}

// DocumentRevisions is a parsable slice of DocumentRevision.
type DocumentRevisions []*DocumentRevision
