// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedurehistory"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ProcedureHistoryUpdate is the builder for updating ProcedureHistory entities.
type ProcedureHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ProcedureHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProcedureHistoryUpdate builder.
func (_u *ProcedureHistoryUpdate) Where(ps ...predicate.ProcedureHistory) *ProcedureHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProcedureHistoryUpdate) SetUpdatedAt(v time.Time) *ProcedureHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ProcedureHistoryUpdate) ClearUpdatedAt() *ProcedureHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ProcedureHistoryUpdate) SetUpdatedBy(v string) *ProcedureHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableUpdatedBy(v *string) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ProcedureHistoryUpdate) ClearUpdatedBy() *ProcedureHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ProcedureHistoryUpdate) SetDeletedAt(v time.Time) *ProcedureHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableDeletedAt(v *time.Time) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ProcedureHistoryUpdate) ClearDeletedAt() *ProcedureHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ProcedureHistoryUpdate) SetDeletedBy(v string) *ProcedureHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableDeletedBy(v *string) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ProcedureHistoryUpdate) ClearDeletedBy() *ProcedureHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ProcedureHistoryUpdate) SetTags(v []string) *ProcedureHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ProcedureHistoryUpdate) AppendTags(v []string) *ProcedureHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ProcedureHistoryUpdate) ClearTags() *ProcedureHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *ProcedureHistoryUpdate) SetRevision(v string) *ProcedureHistoryUpdate {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableRevision(v *string) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *ProcedureHistoryUpdate) ClearRevision() *ProcedureHistoryUpdate {
	_u.mutation.ClearRevision()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ProcedureHistoryUpdate) SetOwnerID(v string) *ProcedureHistoryUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableOwnerID(v *string) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ProcedureHistoryUpdate) ClearOwnerID() *ProcedureHistoryUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *ProcedureHistoryUpdate) SetName(v string) *ProcedureHistoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableName(v *string) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *ProcedureHistoryUpdate) SetStatus(v enums.DocumentStatus) *ProcedureHistoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableStatus(v *enums.DocumentStatus) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ProcedureHistoryUpdate) ClearStatus() *ProcedureHistoryUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetProcedureType sets the "procedure_type" field.
func (_u *ProcedureHistoryUpdate) SetProcedureType(v string) *ProcedureHistoryUpdate {
	_u.mutation.SetProcedureType(v)
	return _u
}

// SetNillableProcedureType sets the "procedure_type" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableProcedureType(v *string) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetProcedureType(*v)
	}
	return _u
}

// ClearProcedureType clears the value of the "procedure_type" field.
func (_u *ProcedureHistoryUpdate) ClearProcedureType() *ProcedureHistoryUpdate {
	_u.mutation.ClearProcedureType()
	return _u
}

// SetDetails sets the "details" field.
func (_u *ProcedureHistoryUpdate) SetDetails(v string) *ProcedureHistoryUpdate {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableDetails(v *string) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *ProcedureHistoryUpdate) ClearDetails() *ProcedureHistoryUpdate {
	_u.mutation.ClearDetails()
	return _u
}

// SetApprovalRequired sets the "approval_required" field.
func (_u *ProcedureHistoryUpdate) SetApprovalRequired(v bool) *ProcedureHistoryUpdate {
	_u.mutation.SetApprovalRequired(v)
	return _u
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableApprovalRequired(v *bool) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetApprovalRequired(*v)
	}
	return _u
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (_u *ProcedureHistoryUpdate) ClearApprovalRequired() *ProcedureHistoryUpdate {
	_u.mutation.ClearApprovalRequired()
	return _u
}

// SetReviewDue sets the "review_due" field.
func (_u *ProcedureHistoryUpdate) SetReviewDue(v time.Time) *ProcedureHistoryUpdate {
	_u.mutation.SetReviewDue(v)
	return _u
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableReviewDue(v *time.Time) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetReviewDue(*v)
	}
	return _u
}

// ClearReviewDue clears the value of the "review_due" field.
func (_u *ProcedureHistoryUpdate) ClearReviewDue() *ProcedureHistoryUpdate {
	_u.mutation.ClearReviewDue()
	return _u
}

// SetReviewFrequency sets the "review_frequency" field.
func (_u *ProcedureHistoryUpdate) SetReviewFrequency(v enums.Frequency) *ProcedureHistoryUpdate {
	_u.mutation.SetReviewFrequency(v)
	return _u
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableReviewFrequency(v *enums.Frequency) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetReviewFrequency(*v)
	}
	return _u
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (_u *ProcedureHistoryUpdate) ClearReviewFrequency() *ProcedureHistoryUpdate {
	_u.mutation.ClearReviewFrequency()
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *ProcedureHistoryUpdate) SetApproverID(v string) *ProcedureHistoryUpdate {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableApproverID(v *string) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *ProcedureHistoryUpdate) ClearApproverID() *ProcedureHistoryUpdate {
	_u.mutation.ClearApproverID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *ProcedureHistoryUpdate) SetDelegateID(v string) *ProcedureHistoryUpdate {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableDelegateID(v *string) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *ProcedureHistoryUpdate) ClearDelegateID() *ProcedureHistoryUpdate {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetSummary sets the "summary" field.
func (_u *ProcedureHistoryUpdate) SetSummary(v string) *ProcedureHistoryUpdate {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *ProcedureHistoryUpdate) SetNillableSummary(v *string) *ProcedureHistoryUpdate {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *ProcedureHistoryUpdate) ClearSummary() *ProcedureHistoryUpdate {
	_u.mutation.ClearSummary()
	return _u
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_u *ProcedureHistoryUpdate) SetTagSuggestions(v []string) *ProcedureHistoryUpdate {
	_u.mutation.SetTagSuggestions(v)
	return _u
}

// AppendTagSuggestions appends value to the "tag_suggestions" field.
func (_u *ProcedureHistoryUpdate) AppendTagSuggestions(v []string) *ProcedureHistoryUpdate {
	_u.mutation.AppendTagSuggestions(v)
	return _u
}

// ClearTagSuggestions clears the value of the "tag_suggestions" field.
func (_u *ProcedureHistoryUpdate) ClearTagSuggestions() *ProcedureHistoryUpdate {
	_u.mutation.ClearTagSuggestions()
	return _u
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_u *ProcedureHistoryUpdate) SetDismissedTagSuggestions(v []string) *ProcedureHistoryUpdate {
	_u.mutation.SetDismissedTagSuggestions(v)
	return _u
}

// AppendDismissedTagSuggestions appends value to the "dismissed_tag_suggestions" field.
func (_u *ProcedureHistoryUpdate) AppendDismissedTagSuggestions(v []string) *ProcedureHistoryUpdate {
	_u.mutation.AppendDismissedTagSuggestions(v)
	return _u
}

// ClearDismissedTagSuggestions clears the value of the "dismissed_tag_suggestions" field.
func (_u *ProcedureHistoryUpdate) ClearDismissedTagSuggestions() *ProcedureHistoryUpdate {
	_u.mutation.ClearDismissedTagSuggestions()
	return _u
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_u *ProcedureHistoryUpdate) SetControlSuggestions(v []string) *ProcedureHistoryUpdate {
	_u.mutation.SetControlSuggestions(v)
	return _u
}

// AppendControlSuggestions appends value to the "control_suggestions" field.
func (_u *ProcedureHistoryUpdate) AppendControlSuggestions(v []string) *ProcedureHistoryUpdate {
	_u.mutation.AppendControlSuggestions(v)
	return _u
}

// ClearControlSuggestions clears the value of the "control_suggestions" field.
func (_u *ProcedureHistoryUpdate) ClearControlSuggestions() *ProcedureHistoryUpdate {
	_u.mutation.ClearControlSuggestions()
	return _u
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_u *ProcedureHistoryUpdate) SetDismissedControlSuggestions(v []string) *ProcedureHistoryUpdate {
	_u.mutation.SetDismissedControlSuggestions(v)
	return _u
}

// AppendDismissedControlSuggestions appends value to the "dismissed_control_suggestions" field.
func (_u *ProcedureHistoryUpdate) AppendDismissedControlSuggestions(v []string) *ProcedureHistoryUpdate {
	_u.mutation.AppendDismissedControlSuggestions(v)
	return _u
}

// ClearDismissedControlSuggestions clears the value of the "dismissed_control_suggestions" field.
func (_u *ProcedureHistoryUpdate) ClearDismissedControlSuggestions() *ProcedureHistoryUpdate {
	_u.mutation.ClearDismissedControlSuggestions()
	return _u
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_u *ProcedureHistoryUpdate) SetImprovementSuggestions(v []string) *ProcedureHistoryUpdate {
	_u.mutation.SetImprovementSuggestions(v)
	return _u
}

// AppendImprovementSuggestions appends value to the "improvement_suggestions" field.
func (_u *ProcedureHistoryUpdate) AppendImprovementSuggestions(v []string) *ProcedureHistoryUpdate {
	_u.mutation.AppendImprovementSuggestions(v)
	return _u
}

// ClearImprovementSuggestions clears the value of the "improvement_suggestions" field.
func (_u *ProcedureHistoryUpdate) ClearImprovementSuggestions() *ProcedureHistoryUpdate {
	_u.mutation.ClearImprovementSuggestions()
	return _u
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_u *ProcedureHistoryUpdate) SetDismissedImprovementSuggestions(v []string) *ProcedureHistoryUpdate {
	_u.mutation.SetDismissedImprovementSuggestions(v)
	return _u
}

// AppendDismissedImprovementSuggestions appends value to the "dismissed_improvement_suggestions" field.
func (_u *ProcedureHistoryUpdate) AppendDismissedImprovementSuggestions(v []string) *ProcedureHistoryUpdate {
	_u.mutation.AppendDismissedImprovementSuggestions(v)
	return _u
}

// ClearDismissedImprovementSuggestions clears the value of the "dismissed_improvement_suggestions" field.
func (_u *ProcedureHistoryUpdate) ClearDismissedImprovementSuggestions() *ProcedureHistoryUpdate {
	_u.mutation.ClearDismissedImprovementSuggestions()
	return _u
}

// Mutation returns the ProcedureHistoryMutation object of the builder.
func (_u *ProcedureHistoryUpdate) Mutation() *ProcedureHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProcedureHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProcedureHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProcedureHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProcedureHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProcedureHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if procedurehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized procedurehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := procedurehistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProcedureHistoryUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := procedurehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProcedureHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewFrequency(); ok {
		if err := procedurehistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ProcedureHistory.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ProcedureHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProcedureHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ProcedureHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(procedurehistory.Table, procedurehistory.Columns, sqlgraph.NewFieldSpec(procedurehistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(procedurehistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(procedurehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(procedurehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(procedurehistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(procedurehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(procedurehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(procedurehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(procedurehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(procedurehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(procedurehistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(procedurehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(procedurehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(procedurehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(procedurehistory.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(procedurehistory.FieldRevision, field.TypeString)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(procedurehistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(procedurehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(procedurehistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(procedurehistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(procedurehistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.ProcedureType(); ok {
		_spec.SetField(procedurehistory.FieldProcedureType, field.TypeString, value)
	}
	if _u.mutation.ProcedureTypeCleared() {
		_spec.ClearField(procedurehistory.FieldProcedureType, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(procedurehistory.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(procedurehistory.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovalRequired(); ok {
		_spec.SetField(procedurehistory.FieldApprovalRequired, field.TypeBool, value)
	}
	if _u.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(procedurehistory.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := _u.mutation.ReviewDue(); ok {
		_spec.SetField(procedurehistory.FieldReviewDue, field.TypeTime, value)
	}
	if _u.mutation.ReviewDueCleared() {
		_spec.ClearField(procedurehistory.FieldReviewDue, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewFrequency(); ok {
		_spec.SetField(procedurehistory.FieldReviewFrequency, field.TypeEnum, value)
	}
	if _u.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(procedurehistory.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := _u.mutation.ApproverID(); ok {
		_spec.SetField(procedurehistory.FieldApproverID, field.TypeString, value)
	}
	if _u.mutation.ApproverIDCleared() {
		_spec.ClearField(procedurehistory.FieldApproverID, field.TypeString)
	}
	if value, ok := _u.mutation.DelegateID(); ok {
		_spec.SetField(procedurehistory.FieldDelegateID, field.TypeString, value)
	}
	if _u.mutation.DelegateIDCleared() {
		_spec.ClearField(procedurehistory.FieldDelegateID, field.TypeString)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(procedurehistory.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(procedurehistory.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.TagSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldTagSuggestions, value)
		})
	}
	if _u.mutation.TagSuggestionsCleared() {
		_spec.ClearField(procedurehistory.FieldTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldDismissedTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldDismissedTagSuggestions, value)
		})
	}
	if _u.mutation.DismissedTagSuggestionsCleared() {
		_spec.ClearField(procedurehistory.FieldDismissedTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldControlSuggestions, value)
		})
	}
	if _u.mutation.ControlSuggestionsCleared() {
		_spec.ClearField(procedurehistory.FieldControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldDismissedControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldDismissedControlSuggestions, value)
		})
	}
	if _u.mutation.DismissedControlSuggestionsCleared() {
		_spec.ClearField(procedurehistory.FieldDismissedControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldImprovementSuggestions, value)
		})
	}
	if _u.mutation.ImprovementSuggestionsCleared() {
		_spec.ClearField(procedurehistory.FieldImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldDismissedImprovementSuggestions, value)
		})
	}
	if _u.mutation.DismissedImprovementSuggestionsCleared() {
		_spec.ClearField(procedurehistory.FieldDismissedImprovementSuggestions, field.TypeJSON)
	}
	_spec.Node.Schema = _u.schemaConfig.ProcedureHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procedurehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProcedureHistoryUpdateOne is the builder for updating a single ProcedureHistory entity.
type ProcedureHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProcedureHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProcedureHistoryUpdateOne) SetUpdatedAt(v time.Time) *ProcedureHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ProcedureHistoryUpdateOne) ClearUpdatedAt() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ProcedureHistoryUpdateOne) SetUpdatedBy(v string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableUpdatedBy(v *string) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ProcedureHistoryUpdateOne) ClearUpdatedBy() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ProcedureHistoryUpdateOne) SetDeletedAt(v time.Time) *ProcedureHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ProcedureHistoryUpdateOne) ClearDeletedAt() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ProcedureHistoryUpdateOne) SetDeletedBy(v string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableDeletedBy(v *string) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ProcedureHistoryUpdateOne) ClearDeletedBy() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ProcedureHistoryUpdateOne) SetTags(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ProcedureHistoryUpdateOne) AppendTags(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ProcedureHistoryUpdateOne) ClearTags() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *ProcedureHistoryUpdateOne) SetRevision(v string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableRevision(v *string) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *ProcedureHistoryUpdateOne) ClearRevision() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearRevision()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ProcedureHistoryUpdateOne) SetOwnerID(v string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableOwnerID(v *string) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ProcedureHistoryUpdateOne) ClearOwnerID() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *ProcedureHistoryUpdateOne) SetName(v string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableName(v *string) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *ProcedureHistoryUpdateOne) SetStatus(v enums.DocumentStatus) *ProcedureHistoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableStatus(v *enums.DocumentStatus) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ProcedureHistoryUpdateOne) ClearStatus() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetProcedureType sets the "procedure_type" field.
func (_u *ProcedureHistoryUpdateOne) SetProcedureType(v string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetProcedureType(v)
	return _u
}

// SetNillableProcedureType sets the "procedure_type" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableProcedureType(v *string) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetProcedureType(*v)
	}
	return _u
}

// ClearProcedureType clears the value of the "procedure_type" field.
func (_u *ProcedureHistoryUpdateOne) ClearProcedureType() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearProcedureType()
	return _u
}

// SetDetails sets the "details" field.
func (_u *ProcedureHistoryUpdateOne) SetDetails(v string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableDetails(v *string) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *ProcedureHistoryUpdateOne) ClearDetails() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearDetails()
	return _u
}

// SetApprovalRequired sets the "approval_required" field.
func (_u *ProcedureHistoryUpdateOne) SetApprovalRequired(v bool) *ProcedureHistoryUpdateOne {
	_u.mutation.SetApprovalRequired(v)
	return _u
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableApprovalRequired(v *bool) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetApprovalRequired(*v)
	}
	return _u
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (_u *ProcedureHistoryUpdateOne) ClearApprovalRequired() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearApprovalRequired()
	return _u
}

// SetReviewDue sets the "review_due" field.
func (_u *ProcedureHistoryUpdateOne) SetReviewDue(v time.Time) *ProcedureHistoryUpdateOne {
	_u.mutation.SetReviewDue(v)
	return _u
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableReviewDue(v *time.Time) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetReviewDue(*v)
	}
	return _u
}

// ClearReviewDue clears the value of the "review_due" field.
func (_u *ProcedureHistoryUpdateOne) ClearReviewDue() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearReviewDue()
	return _u
}

// SetReviewFrequency sets the "review_frequency" field.
func (_u *ProcedureHistoryUpdateOne) SetReviewFrequency(v enums.Frequency) *ProcedureHistoryUpdateOne {
	_u.mutation.SetReviewFrequency(v)
	return _u
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableReviewFrequency(v *enums.Frequency) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetReviewFrequency(*v)
	}
	return _u
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (_u *ProcedureHistoryUpdateOne) ClearReviewFrequency() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearReviewFrequency()
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *ProcedureHistoryUpdateOne) SetApproverID(v string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableApproverID(v *string) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *ProcedureHistoryUpdateOne) ClearApproverID() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearApproverID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *ProcedureHistoryUpdateOne) SetDelegateID(v string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableDelegateID(v *string) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *ProcedureHistoryUpdateOne) ClearDelegateID() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetSummary sets the "summary" field.
func (_u *ProcedureHistoryUpdateOne) SetSummary(v string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *ProcedureHistoryUpdateOne) SetNillableSummary(v *string) *ProcedureHistoryUpdateOne {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *ProcedureHistoryUpdateOne) ClearSummary() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearSummary()
	return _u
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) SetTagSuggestions(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetTagSuggestions(v)
	return _u
}

// AppendTagSuggestions appends value to the "tag_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) AppendTagSuggestions(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.AppendTagSuggestions(v)
	return _u
}

// ClearTagSuggestions clears the value of the "tag_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) ClearTagSuggestions() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearTagSuggestions()
	return _u
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) SetDismissedTagSuggestions(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetDismissedTagSuggestions(v)
	return _u
}

// AppendDismissedTagSuggestions appends value to the "dismissed_tag_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) AppendDismissedTagSuggestions(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.AppendDismissedTagSuggestions(v)
	return _u
}

// ClearDismissedTagSuggestions clears the value of the "dismissed_tag_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) ClearDismissedTagSuggestions() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearDismissedTagSuggestions()
	return _u
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) SetControlSuggestions(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetControlSuggestions(v)
	return _u
}

// AppendControlSuggestions appends value to the "control_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) AppendControlSuggestions(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.AppendControlSuggestions(v)
	return _u
}

// ClearControlSuggestions clears the value of the "control_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) ClearControlSuggestions() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearControlSuggestions()
	return _u
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) SetDismissedControlSuggestions(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetDismissedControlSuggestions(v)
	return _u
}

// AppendDismissedControlSuggestions appends value to the "dismissed_control_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) AppendDismissedControlSuggestions(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.AppendDismissedControlSuggestions(v)
	return _u
}

// ClearDismissedControlSuggestions clears the value of the "dismissed_control_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) ClearDismissedControlSuggestions() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearDismissedControlSuggestions()
	return _u
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) SetImprovementSuggestions(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetImprovementSuggestions(v)
	return _u
}

// AppendImprovementSuggestions appends value to the "improvement_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) AppendImprovementSuggestions(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.AppendImprovementSuggestions(v)
	return _u
}

// ClearImprovementSuggestions clears the value of the "improvement_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) ClearImprovementSuggestions() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearImprovementSuggestions()
	return _u
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) SetDismissedImprovementSuggestions(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.SetDismissedImprovementSuggestions(v)
	return _u
}

// AppendDismissedImprovementSuggestions appends value to the "dismissed_improvement_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) AppendDismissedImprovementSuggestions(v []string) *ProcedureHistoryUpdateOne {
	_u.mutation.AppendDismissedImprovementSuggestions(v)
	return _u
}

// ClearDismissedImprovementSuggestions clears the value of the "dismissed_improvement_suggestions" field.
func (_u *ProcedureHistoryUpdateOne) ClearDismissedImprovementSuggestions() *ProcedureHistoryUpdateOne {
	_u.mutation.ClearDismissedImprovementSuggestions()
	return _u
}

// Mutation returns the ProcedureHistoryMutation object of the builder.
func (_u *ProcedureHistoryUpdateOne) Mutation() *ProcedureHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the ProcedureHistoryUpdate builder.
func (_u *ProcedureHistoryUpdateOne) Where(ps ...predicate.ProcedureHistory) *ProcedureHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProcedureHistoryUpdateOne) Select(field string, fields ...string) *ProcedureHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ProcedureHistory entity.
func (_u *ProcedureHistoryUpdateOne) Save(ctx context.Context) (*ProcedureHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProcedureHistoryUpdateOne) SaveX(ctx context.Context) *ProcedureHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProcedureHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProcedureHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProcedureHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if procedurehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized procedurehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := procedurehistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProcedureHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := procedurehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProcedureHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewFrequency(); ok {
		if err := procedurehistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ProcedureHistory.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ProcedureHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProcedureHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ProcedureHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ProcedureHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(procedurehistory.Table, procedurehistory.Columns, sqlgraph.NewFieldSpec(procedurehistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ProcedureHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, procedurehistory.FieldID)
		for _, f := range fields {
			if !procedurehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != procedurehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(procedurehistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(procedurehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(procedurehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(procedurehistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(procedurehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(procedurehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(procedurehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(procedurehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(procedurehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(procedurehistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(procedurehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(procedurehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(procedurehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(procedurehistory.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(procedurehistory.FieldRevision, field.TypeString)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(procedurehistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(procedurehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(procedurehistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(procedurehistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(procedurehistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.ProcedureType(); ok {
		_spec.SetField(procedurehistory.FieldProcedureType, field.TypeString, value)
	}
	if _u.mutation.ProcedureTypeCleared() {
		_spec.ClearField(procedurehistory.FieldProcedureType, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(procedurehistory.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(procedurehistory.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovalRequired(); ok {
		_spec.SetField(procedurehistory.FieldApprovalRequired, field.TypeBool, value)
	}
	if _u.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(procedurehistory.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := _u.mutation.ReviewDue(); ok {
		_spec.SetField(procedurehistory.FieldReviewDue, field.TypeTime, value)
	}
	if _u.mutation.ReviewDueCleared() {
		_spec.ClearField(procedurehistory.FieldReviewDue, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewFrequency(); ok {
		_spec.SetField(procedurehistory.FieldReviewFrequency, field.TypeEnum, value)
	}
	if _u.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(procedurehistory.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := _u.mutation.ApproverID(); ok {
		_spec.SetField(procedurehistory.FieldApproverID, field.TypeString, value)
	}
	if _u.mutation.ApproverIDCleared() {
		_spec.ClearField(procedurehistory.FieldApproverID, field.TypeString)
	}
	if value, ok := _u.mutation.DelegateID(); ok {
		_spec.SetField(procedurehistory.FieldDelegateID, field.TypeString, value)
	}
	if _u.mutation.DelegateIDCleared() {
		_spec.ClearField(procedurehistory.FieldDelegateID, field.TypeString)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(procedurehistory.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(procedurehistory.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.TagSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldTagSuggestions, value)
		})
	}
	if _u.mutation.TagSuggestionsCleared() {
		_spec.ClearField(procedurehistory.FieldTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldDismissedTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldDismissedTagSuggestions, value)
		})
	}
	if _u.mutation.DismissedTagSuggestionsCleared() {
		_spec.ClearField(procedurehistory.FieldDismissedTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldControlSuggestions, value)
		})
	}
	if _u.mutation.ControlSuggestionsCleared() {
		_spec.ClearField(procedurehistory.FieldControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldDismissedControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldDismissedControlSuggestions, value)
		})
	}
	if _u.mutation.DismissedControlSuggestionsCleared() {
		_spec.ClearField(procedurehistory.FieldDismissedControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldImprovementSuggestions, value)
		})
	}
	if _u.mutation.ImprovementSuggestionsCleared() {
		_spec.ClearField(procedurehistory.FieldImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(procedurehistory.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldDismissedImprovementSuggestions, value)
		})
	}
	if _u.mutation.DismissedImprovementSuggestionsCleared() {
		_spec.ClearField(procedurehistory.FieldDismissedImprovementSuggestions, field.TypeJSON)
	}
	_spec.Node.Schema = _u.schemaConfig.ProcedureHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &ProcedureHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procedurehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
