// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedurehistory"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ProcedureHistoryUpdate is the builder for updating ProcedureHistory entities.
type ProcedureHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ProcedureHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProcedureHistoryUpdate builder.
func (phu *ProcedureHistoryUpdate) Where(ps ...predicate.ProcedureHistory) *ProcedureHistoryUpdate {
	phu.mutation.Where(ps...)
	return phu
}

// SetUpdatedAt sets the "updated_at" field.
func (phu *ProcedureHistoryUpdate) SetUpdatedAt(t time.Time) *ProcedureHistoryUpdate {
	phu.mutation.SetUpdatedAt(t)
	return phu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (phu *ProcedureHistoryUpdate) ClearUpdatedAt() *ProcedureHistoryUpdate {
	phu.mutation.ClearUpdatedAt()
	return phu
}

// SetUpdatedBy sets the "updated_by" field.
func (phu *ProcedureHistoryUpdate) SetUpdatedBy(s string) *ProcedureHistoryUpdate {
	phu.mutation.SetUpdatedBy(s)
	return phu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (phu *ProcedureHistoryUpdate) SetNillableUpdatedBy(s *string) *ProcedureHistoryUpdate {
	if s != nil {
		phu.SetUpdatedBy(*s)
	}
	return phu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (phu *ProcedureHistoryUpdate) ClearUpdatedBy() *ProcedureHistoryUpdate {
	phu.mutation.ClearUpdatedBy()
	return phu
}

// SetTags sets the "tags" field.
func (phu *ProcedureHistoryUpdate) SetTags(s []string) *ProcedureHistoryUpdate {
	phu.mutation.SetTags(s)
	return phu
}

// AppendTags appends s to the "tags" field.
func (phu *ProcedureHistoryUpdate) AppendTags(s []string) *ProcedureHistoryUpdate {
	phu.mutation.AppendTags(s)
	return phu
}

// ClearTags clears the value of the "tags" field.
func (phu *ProcedureHistoryUpdate) ClearTags() *ProcedureHistoryUpdate {
	phu.mutation.ClearTags()
	return phu
}

// SetDeletedAt sets the "deleted_at" field.
func (phu *ProcedureHistoryUpdate) SetDeletedAt(t time.Time) *ProcedureHistoryUpdate {
	phu.mutation.SetDeletedAt(t)
	return phu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phu *ProcedureHistoryUpdate) SetNillableDeletedAt(t *time.Time) *ProcedureHistoryUpdate {
	if t != nil {
		phu.SetDeletedAt(*t)
	}
	return phu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phu *ProcedureHistoryUpdate) ClearDeletedAt() *ProcedureHistoryUpdate {
	phu.mutation.ClearDeletedAt()
	return phu
}

// SetDeletedBy sets the "deleted_by" field.
func (phu *ProcedureHistoryUpdate) SetDeletedBy(s string) *ProcedureHistoryUpdate {
	phu.mutation.SetDeletedBy(s)
	return phu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (phu *ProcedureHistoryUpdate) SetNillableDeletedBy(s *string) *ProcedureHistoryUpdate {
	if s != nil {
		phu.SetDeletedBy(*s)
	}
	return phu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (phu *ProcedureHistoryUpdate) ClearDeletedBy() *ProcedureHistoryUpdate {
	phu.mutation.ClearDeletedBy()
	return phu
}

// SetOwnerID sets the "owner_id" field.
func (phu *ProcedureHistoryUpdate) SetOwnerID(s string) *ProcedureHistoryUpdate {
	phu.mutation.SetOwnerID(s)
	return phu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (phu *ProcedureHistoryUpdate) SetNillableOwnerID(s *string) *ProcedureHistoryUpdate {
	if s != nil {
		phu.SetOwnerID(*s)
	}
	return phu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (phu *ProcedureHistoryUpdate) ClearOwnerID() *ProcedureHistoryUpdate {
	phu.mutation.ClearOwnerID()
	return phu
}

// SetName sets the "name" field.
func (phu *ProcedureHistoryUpdate) SetName(s string) *ProcedureHistoryUpdate {
	phu.mutation.SetName(s)
	return phu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (phu *ProcedureHistoryUpdate) SetNillableName(s *string) *ProcedureHistoryUpdate {
	if s != nil {
		phu.SetName(*s)
	}
	return phu
}

// SetStatus sets the "status" field.
func (phu *ProcedureHistoryUpdate) SetStatus(es enums.DocumentStatus) *ProcedureHistoryUpdate {
	phu.mutation.SetStatus(es)
	return phu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (phu *ProcedureHistoryUpdate) SetNillableStatus(es *enums.DocumentStatus) *ProcedureHistoryUpdate {
	if es != nil {
		phu.SetStatus(*es)
	}
	return phu
}

// ClearStatus clears the value of the "status" field.
func (phu *ProcedureHistoryUpdate) ClearStatus() *ProcedureHistoryUpdate {
	phu.mutation.ClearStatus()
	return phu
}

// SetProcedureType sets the "procedure_type" field.
func (phu *ProcedureHistoryUpdate) SetProcedureType(s string) *ProcedureHistoryUpdate {
	phu.mutation.SetProcedureType(s)
	return phu
}

// SetNillableProcedureType sets the "procedure_type" field if the given value is not nil.
func (phu *ProcedureHistoryUpdate) SetNillableProcedureType(s *string) *ProcedureHistoryUpdate {
	if s != nil {
		phu.SetProcedureType(*s)
	}
	return phu
}

// ClearProcedureType clears the value of the "procedure_type" field.
func (phu *ProcedureHistoryUpdate) ClearProcedureType() *ProcedureHistoryUpdate {
	phu.mutation.ClearProcedureType()
	return phu
}

// SetDetails sets the "details" field.
func (phu *ProcedureHistoryUpdate) SetDetails(s string) *ProcedureHistoryUpdate {
	phu.mutation.SetDetails(s)
	return phu
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (phu *ProcedureHistoryUpdate) SetNillableDetails(s *string) *ProcedureHistoryUpdate {
	if s != nil {
		phu.SetDetails(*s)
	}
	return phu
}

// ClearDetails clears the value of the "details" field.
func (phu *ProcedureHistoryUpdate) ClearDetails() *ProcedureHistoryUpdate {
	phu.mutation.ClearDetails()
	return phu
}

// SetApprovalRequired sets the "approval_required" field.
func (phu *ProcedureHistoryUpdate) SetApprovalRequired(b bool) *ProcedureHistoryUpdate {
	phu.mutation.SetApprovalRequired(b)
	return phu
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (phu *ProcedureHistoryUpdate) SetNillableApprovalRequired(b *bool) *ProcedureHistoryUpdate {
	if b != nil {
		phu.SetApprovalRequired(*b)
	}
	return phu
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (phu *ProcedureHistoryUpdate) ClearApprovalRequired() *ProcedureHistoryUpdate {
	phu.mutation.ClearApprovalRequired()
	return phu
}

// SetReviewDue sets the "review_due" field.
func (phu *ProcedureHistoryUpdate) SetReviewDue(t time.Time) *ProcedureHistoryUpdate {
	phu.mutation.SetReviewDue(t)
	return phu
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (phu *ProcedureHistoryUpdate) SetNillableReviewDue(t *time.Time) *ProcedureHistoryUpdate {
	if t != nil {
		phu.SetReviewDue(*t)
	}
	return phu
}

// ClearReviewDue clears the value of the "review_due" field.
func (phu *ProcedureHistoryUpdate) ClearReviewDue() *ProcedureHistoryUpdate {
	phu.mutation.ClearReviewDue()
	return phu
}

// SetReviewFrequency sets the "review_frequency" field.
func (phu *ProcedureHistoryUpdate) SetReviewFrequency(e enums.Frequency) *ProcedureHistoryUpdate {
	phu.mutation.SetReviewFrequency(e)
	return phu
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (phu *ProcedureHistoryUpdate) SetNillableReviewFrequency(e *enums.Frequency) *ProcedureHistoryUpdate {
	if e != nil {
		phu.SetReviewFrequency(*e)
	}
	return phu
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (phu *ProcedureHistoryUpdate) ClearReviewFrequency() *ProcedureHistoryUpdate {
	phu.mutation.ClearReviewFrequency()
	return phu
}

// SetRevision sets the "revision" field.
func (phu *ProcedureHistoryUpdate) SetRevision(s string) *ProcedureHistoryUpdate {
	phu.mutation.SetRevision(s)
	return phu
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (phu *ProcedureHistoryUpdate) SetNillableRevision(s *string) *ProcedureHistoryUpdate {
	if s != nil {
		phu.SetRevision(*s)
	}
	return phu
}

// ClearRevision clears the value of the "revision" field.
func (phu *ProcedureHistoryUpdate) ClearRevision() *ProcedureHistoryUpdate {
	phu.mutation.ClearRevision()
	return phu
}

// Mutation returns the ProcedureHistoryMutation object of the builder.
func (phu *ProcedureHistoryUpdate) Mutation() *ProcedureHistoryMutation {
	return phu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (phu *ProcedureHistoryUpdate) Save(ctx context.Context) (int, error) {
	phu.defaults()
	return withHooks(ctx, phu.sqlSave, phu.mutation, phu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phu *ProcedureHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := phu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (phu *ProcedureHistoryUpdate) Exec(ctx context.Context) error {
	_, err := phu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phu *ProcedureHistoryUpdate) ExecX(ctx context.Context) {
	if err := phu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phu *ProcedureHistoryUpdate) defaults() {
	if _, ok := phu.mutation.UpdatedAt(); !ok && !phu.mutation.UpdatedAtCleared() {
		v := procedurehistory.UpdateDefaultUpdatedAt()
		phu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phu *ProcedureHistoryUpdate) check() error {
	if v, ok := phu.mutation.Status(); ok {
		if err := procedurehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProcedureHistory.status": %w`, err)}
		}
	}
	if v, ok := phu.mutation.ReviewFrequency(); ok {
		if err := procedurehistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ProcedureHistory.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (phu *ProcedureHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProcedureHistoryUpdate {
	phu.modifiers = append(phu.modifiers, modifiers...)
	return phu
}

func (phu *ProcedureHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := phu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(procedurehistory.Table, procedurehistory.Columns, sqlgraph.NewFieldSpec(procedurehistory.FieldID, field.TypeString))
	if ps := phu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if phu.mutation.RefCleared() {
		_spec.ClearField(procedurehistory.FieldRef, field.TypeString)
	}
	if phu.mutation.CreatedAtCleared() {
		_spec.ClearField(procedurehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := phu.mutation.UpdatedAt(); ok {
		_spec.SetField(procedurehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if phu.mutation.UpdatedAtCleared() {
		_spec.ClearField(procedurehistory.FieldUpdatedAt, field.TypeTime)
	}
	if phu.mutation.CreatedByCleared() {
		_spec.ClearField(procedurehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := phu.mutation.UpdatedBy(); ok {
		_spec.SetField(procedurehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if phu.mutation.UpdatedByCleared() {
		_spec.ClearField(procedurehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := phu.mutation.Tags(); ok {
		_spec.SetField(procedurehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := phu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldTags, value)
		})
	}
	if phu.mutation.TagsCleared() {
		_spec.ClearField(procedurehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := phu.mutation.DeletedAt(); ok {
		_spec.SetField(procedurehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if phu.mutation.DeletedAtCleared() {
		_spec.ClearField(procedurehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := phu.mutation.DeletedBy(); ok {
		_spec.SetField(procedurehistory.FieldDeletedBy, field.TypeString, value)
	}
	if phu.mutation.DeletedByCleared() {
		_spec.ClearField(procedurehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := phu.mutation.OwnerID(); ok {
		_spec.SetField(procedurehistory.FieldOwnerID, field.TypeString, value)
	}
	if phu.mutation.OwnerIDCleared() {
		_spec.ClearField(procedurehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := phu.mutation.Name(); ok {
		_spec.SetField(procedurehistory.FieldName, field.TypeString, value)
	}
	if value, ok := phu.mutation.Status(); ok {
		_spec.SetField(procedurehistory.FieldStatus, field.TypeEnum, value)
	}
	if phu.mutation.StatusCleared() {
		_spec.ClearField(procedurehistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := phu.mutation.ProcedureType(); ok {
		_spec.SetField(procedurehistory.FieldProcedureType, field.TypeString, value)
	}
	if phu.mutation.ProcedureTypeCleared() {
		_spec.ClearField(procedurehistory.FieldProcedureType, field.TypeString)
	}
	if value, ok := phu.mutation.Details(); ok {
		_spec.SetField(procedurehistory.FieldDetails, field.TypeString, value)
	}
	if phu.mutation.DetailsCleared() {
		_spec.ClearField(procedurehistory.FieldDetails, field.TypeString)
	}
	if value, ok := phu.mutation.ApprovalRequired(); ok {
		_spec.SetField(procedurehistory.FieldApprovalRequired, field.TypeBool, value)
	}
	if phu.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(procedurehistory.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := phu.mutation.ReviewDue(); ok {
		_spec.SetField(procedurehistory.FieldReviewDue, field.TypeTime, value)
	}
	if phu.mutation.ReviewDueCleared() {
		_spec.ClearField(procedurehistory.FieldReviewDue, field.TypeTime)
	}
	if value, ok := phu.mutation.ReviewFrequency(); ok {
		_spec.SetField(procedurehistory.FieldReviewFrequency, field.TypeEnum, value)
	}
	if phu.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(procedurehistory.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := phu.mutation.Revision(); ok {
		_spec.SetField(procedurehistory.FieldRevision, field.TypeString, value)
	}
	if phu.mutation.RevisionCleared() {
		_spec.ClearField(procedurehistory.FieldRevision, field.TypeString)
	}
	_spec.Node.Schema = phu.schemaConfig.ProcedureHistory
	ctx = internal.NewSchemaConfigContext(ctx, phu.schemaConfig)
	_spec.AddModifiers(phu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, phu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procedurehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	phu.mutation.done = true
	return n, nil
}

// ProcedureHistoryUpdateOne is the builder for updating a single ProcedureHistory entity.
type ProcedureHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProcedureHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (phuo *ProcedureHistoryUpdateOne) SetUpdatedAt(t time.Time) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetUpdatedAt(t)
	return phuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (phuo *ProcedureHistoryUpdateOne) ClearUpdatedAt() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearUpdatedAt()
	return phuo
}

// SetUpdatedBy sets the "updated_by" field.
func (phuo *ProcedureHistoryUpdateOne) SetUpdatedBy(s string) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetUpdatedBy(s)
	return phuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (phuo *ProcedureHistoryUpdateOne) SetNillableUpdatedBy(s *string) *ProcedureHistoryUpdateOne {
	if s != nil {
		phuo.SetUpdatedBy(*s)
	}
	return phuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (phuo *ProcedureHistoryUpdateOne) ClearUpdatedBy() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearUpdatedBy()
	return phuo
}

// SetTags sets the "tags" field.
func (phuo *ProcedureHistoryUpdateOne) SetTags(s []string) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetTags(s)
	return phuo
}

// AppendTags appends s to the "tags" field.
func (phuo *ProcedureHistoryUpdateOne) AppendTags(s []string) *ProcedureHistoryUpdateOne {
	phuo.mutation.AppendTags(s)
	return phuo
}

// ClearTags clears the value of the "tags" field.
func (phuo *ProcedureHistoryUpdateOne) ClearTags() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearTags()
	return phuo
}

// SetDeletedAt sets the "deleted_at" field.
func (phuo *ProcedureHistoryUpdateOne) SetDeletedAt(t time.Time) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetDeletedAt(t)
	return phuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phuo *ProcedureHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *ProcedureHistoryUpdateOne {
	if t != nil {
		phuo.SetDeletedAt(*t)
	}
	return phuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (phuo *ProcedureHistoryUpdateOne) ClearDeletedAt() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearDeletedAt()
	return phuo
}

// SetDeletedBy sets the "deleted_by" field.
func (phuo *ProcedureHistoryUpdateOne) SetDeletedBy(s string) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetDeletedBy(s)
	return phuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (phuo *ProcedureHistoryUpdateOne) SetNillableDeletedBy(s *string) *ProcedureHistoryUpdateOne {
	if s != nil {
		phuo.SetDeletedBy(*s)
	}
	return phuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (phuo *ProcedureHistoryUpdateOne) ClearDeletedBy() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearDeletedBy()
	return phuo
}

// SetOwnerID sets the "owner_id" field.
func (phuo *ProcedureHistoryUpdateOne) SetOwnerID(s string) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetOwnerID(s)
	return phuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (phuo *ProcedureHistoryUpdateOne) SetNillableOwnerID(s *string) *ProcedureHistoryUpdateOne {
	if s != nil {
		phuo.SetOwnerID(*s)
	}
	return phuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (phuo *ProcedureHistoryUpdateOne) ClearOwnerID() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearOwnerID()
	return phuo
}

// SetName sets the "name" field.
func (phuo *ProcedureHistoryUpdateOne) SetName(s string) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetName(s)
	return phuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (phuo *ProcedureHistoryUpdateOne) SetNillableName(s *string) *ProcedureHistoryUpdateOne {
	if s != nil {
		phuo.SetName(*s)
	}
	return phuo
}

// SetStatus sets the "status" field.
func (phuo *ProcedureHistoryUpdateOne) SetStatus(es enums.DocumentStatus) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetStatus(es)
	return phuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (phuo *ProcedureHistoryUpdateOne) SetNillableStatus(es *enums.DocumentStatus) *ProcedureHistoryUpdateOne {
	if es != nil {
		phuo.SetStatus(*es)
	}
	return phuo
}

// ClearStatus clears the value of the "status" field.
func (phuo *ProcedureHistoryUpdateOne) ClearStatus() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearStatus()
	return phuo
}

// SetProcedureType sets the "procedure_type" field.
func (phuo *ProcedureHistoryUpdateOne) SetProcedureType(s string) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetProcedureType(s)
	return phuo
}

// SetNillableProcedureType sets the "procedure_type" field if the given value is not nil.
func (phuo *ProcedureHistoryUpdateOne) SetNillableProcedureType(s *string) *ProcedureHistoryUpdateOne {
	if s != nil {
		phuo.SetProcedureType(*s)
	}
	return phuo
}

// ClearProcedureType clears the value of the "procedure_type" field.
func (phuo *ProcedureHistoryUpdateOne) ClearProcedureType() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearProcedureType()
	return phuo
}

// SetDetails sets the "details" field.
func (phuo *ProcedureHistoryUpdateOne) SetDetails(s string) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetDetails(s)
	return phuo
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (phuo *ProcedureHistoryUpdateOne) SetNillableDetails(s *string) *ProcedureHistoryUpdateOne {
	if s != nil {
		phuo.SetDetails(*s)
	}
	return phuo
}

// ClearDetails clears the value of the "details" field.
func (phuo *ProcedureHistoryUpdateOne) ClearDetails() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearDetails()
	return phuo
}

// SetApprovalRequired sets the "approval_required" field.
func (phuo *ProcedureHistoryUpdateOne) SetApprovalRequired(b bool) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetApprovalRequired(b)
	return phuo
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (phuo *ProcedureHistoryUpdateOne) SetNillableApprovalRequired(b *bool) *ProcedureHistoryUpdateOne {
	if b != nil {
		phuo.SetApprovalRequired(*b)
	}
	return phuo
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (phuo *ProcedureHistoryUpdateOne) ClearApprovalRequired() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearApprovalRequired()
	return phuo
}

// SetReviewDue sets the "review_due" field.
func (phuo *ProcedureHistoryUpdateOne) SetReviewDue(t time.Time) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetReviewDue(t)
	return phuo
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (phuo *ProcedureHistoryUpdateOne) SetNillableReviewDue(t *time.Time) *ProcedureHistoryUpdateOne {
	if t != nil {
		phuo.SetReviewDue(*t)
	}
	return phuo
}

// ClearReviewDue clears the value of the "review_due" field.
func (phuo *ProcedureHistoryUpdateOne) ClearReviewDue() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearReviewDue()
	return phuo
}

// SetReviewFrequency sets the "review_frequency" field.
func (phuo *ProcedureHistoryUpdateOne) SetReviewFrequency(e enums.Frequency) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetReviewFrequency(e)
	return phuo
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (phuo *ProcedureHistoryUpdateOne) SetNillableReviewFrequency(e *enums.Frequency) *ProcedureHistoryUpdateOne {
	if e != nil {
		phuo.SetReviewFrequency(*e)
	}
	return phuo
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (phuo *ProcedureHistoryUpdateOne) ClearReviewFrequency() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearReviewFrequency()
	return phuo
}

// SetRevision sets the "revision" field.
func (phuo *ProcedureHistoryUpdateOne) SetRevision(s string) *ProcedureHistoryUpdateOne {
	phuo.mutation.SetRevision(s)
	return phuo
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (phuo *ProcedureHistoryUpdateOne) SetNillableRevision(s *string) *ProcedureHistoryUpdateOne {
	if s != nil {
		phuo.SetRevision(*s)
	}
	return phuo
}

// ClearRevision clears the value of the "revision" field.
func (phuo *ProcedureHistoryUpdateOne) ClearRevision() *ProcedureHistoryUpdateOne {
	phuo.mutation.ClearRevision()
	return phuo
}

// Mutation returns the ProcedureHistoryMutation object of the builder.
func (phuo *ProcedureHistoryUpdateOne) Mutation() *ProcedureHistoryMutation {
	return phuo.mutation
}

// Where appends a list predicates to the ProcedureHistoryUpdate builder.
func (phuo *ProcedureHistoryUpdateOne) Where(ps ...predicate.ProcedureHistory) *ProcedureHistoryUpdateOne {
	phuo.mutation.Where(ps...)
	return phuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (phuo *ProcedureHistoryUpdateOne) Select(field string, fields ...string) *ProcedureHistoryUpdateOne {
	phuo.fields = append([]string{field}, fields...)
	return phuo
}

// Save executes the query and returns the updated ProcedureHistory entity.
func (phuo *ProcedureHistoryUpdateOne) Save(ctx context.Context) (*ProcedureHistory, error) {
	phuo.defaults()
	return withHooks(ctx, phuo.sqlSave, phuo.mutation, phuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (phuo *ProcedureHistoryUpdateOne) SaveX(ctx context.Context) *ProcedureHistory {
	node, err := phuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (phuo *ProcedureHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := phuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phuo *ProcedureHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := phuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phuo *ProcedureHistoryUpdateOne) defaults() {
	if _, ok := phuo.mutation.UpdatedAt(); !ok && !phuo.mutation.UpdatedAtCleared() {
		v := procedurehistory.UpdateDefaultUpdatedAt()
		phuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phuo *ProcedureHistoryUpdateOne) check() error {
	if v, ok := phuo.mutation.Status(); ok {
		if err := procedurehistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProcedureHistory.status": %w`, err)}
		}
	}
	if v, ok := phuo.mutation.ReviewFrequency(); ok {
		if err := procedurehistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ProcedureHistory.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (phuo *ProcedureHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProcedureHistoryUpdateOne {
	phuo.modifiers = append(phuo.modifiers, modifiers...)
	return phuo
}

func (phuo *ProcedureHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ProcedureHistory, err error) {
	if err := phuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(procedurehistory.Table, procedurehistory.Columns, sqlgraph.NewFieldSpec(procedurehistory.FieldID, field.TypeString))
	id, ok := phuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ProcedureHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := phuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, procedurehistory.FieldID)
		for _, f := range fields {
			if !procedurehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != procedurehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := phuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if phuo.mutation.RefCleared() {
		_spec.ClearField(procedurehistory.FieldRef, field.TypeString)
	}
	if phuo.mutation.CreatedAtCleared() {
		_spec.ClearField(procedurehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := phuo.mutation.UpdatedAt(); ok {
		_spec.SetField(procedurehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if phuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(procedurehistory.FieldUpdatedAt, field.TypeTime)
	}
	if phuo.mutation.CreatedByCleared() {
		_spec.ClearField(procedurehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := phuo.mutation.UpdatedBy(); ok {
		_spec.SetField(procedurehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if phuo.mutation.UpdatedByCleared() {
		_spec.ClearField(procedurehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := phuo.mutation.Tags(); ok {
		_spec.SetField(procedurehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := phuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedurehistory.FieldTags, value)
		})
	}
	if phuo.mutation.TagsCleared() {
		_spec.ClearField(procedurehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := phuo.mutation.DeletedAt(); ok {
		_spec.SetField(procedurehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if phuo.mutation.DeletedAtCleared() {
		_spec.ClearField(procedurehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := phuo.mutation.DeletedBy(); ok {
		_spec.SetField(procedurehistory.FieldDeletedBy, field.TypeString, value)
	}
	if phuo.mutation.DeletedByCleared() {
		_spec.ClearField(procedurehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := phuo.mutation.OwnerID(); ok {
		_spec.SetField(procedurehistory.FieldOwnerID, field.TypeString, value)
	}
	if phuo.mutation.OwnerIDCleared() {
		_spec.ClearField(procedurehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := phuo.mutation.Name(); ok {
		_spec.SetField(procedurehistory.FieldName, field.TypeString, value)
	}
	if value, ok := phuo.mutation.Status(); ok {
		_spec.SetField(procedurehistory.FieldStatus, field.TypeEnum, value)
	}
	if phuo.mutation.StatusCleared() {
		_spec.ClearField(procedurehistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := phuo.mutation.ProcedureType(); ok {
		_spec.SetField(procedurehistory.FieldProcedureType, field.TypeString, value)
	}
	if phuo.mutation.ProcedureTypeCleared() {
		_spec.ClearField(procedurehistory.FieldProcedureType, field.TypeString)
	}
	if value, ok := phuo.mutation.Details(); ok {
		_spec.SetField(procedurehistory.FieldDetails, field.TypeString, value)
	}
	if phuo.mutation.DetailsCleared() {
		_spec.ClearField(procedurehistory.FieldDetails, field.TypeString)
	}
	if value, ok := phuo.mutation.ApprovalRequired(); ok {
		_spec.SetField(procedurehistory.FieldApprovalRequired, field.TypeBool, value)
	}
	if phuo.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(procedurehistory.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := phuo.mutation.ReviewDue(); ok {
		_spec.SetField(procedurehistory.FieldReviewDue, field.TypeTime, value)
	}
	if phuo.mutation.ReviewDueCleared() {
		_spec.ClearField(procedurehistory.FieldReviewDue, field.TypeTime)
	}
	if value, ok := phuo.mutation.ReviewFrequency(); ok {
		_spec.SetField(procedurehistory.FieldReviewFrequency, field.TypeEnum, value)
	}
	if phuo.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(procedurehistory.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := phuo.mutation.Revision(); ok {
		_spec.SetField(procedurehistory.FieldRevision, field.TypeString, value)
	}
	if phuo.mutation.RevisionCleared() {
		_spec.ClearField(procedurehistory.FieldRevision, field.TypeString)
	}
	_spec.Node.Schema = phuo.schemaConfig.ProcedureHistory
	ctx = internal.NewSchemaConfigContext(ctx, phuo.schemaConfig)
	_spec.AddModifiers(phuo.modifiers...)
	_node = &ProcedureHistory{config: phuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, phuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procedurehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	phuo.mutation.done = true
	return _node, nil
}
