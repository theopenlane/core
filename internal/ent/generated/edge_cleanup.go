// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/privacy"
	"github.com/rs/zerolog/log"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/controlscheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/dnsverification"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/emailverificationtoken"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/groupsetting"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/jobresult"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnerregistrationtoken"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnertoken"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgproduct"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/passwordresettoken"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/programmembership"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobrun"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/tfasetting"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersetting"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/usersetting"
	"github.com/theopenlane/core/internal/ent/generated/webauthn"
	"github.com/theopenlane/iam/entfga"
	"github.com/theopenlane/utils/contextx"
)

func APITokenEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup apitoken edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ActionPlanEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup actionplan edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ActionPlanHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup actionplanhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func AssetEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup asset edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func AssetHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup assethistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ContactEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup contact edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ContactHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup contacthistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ControlEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup control edge")), entfga.DeleteTuplesFirstKey{})

	if exists, err := FromContext(ctx).Subcontrol.Query().Where((subcontrol.HasControlWith(control.ID(id)))).Exist(ctx); err == nil && exists {
		if subcontrolCount, err := FromContext(ctx).Subcontrol.Delete().Where(subcontrol.HasControlWith(control.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", subcontrolCount).Msg("deleting subcontrol")
			return err
		}
	}

	return nil
}

func ControlHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup controlhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ControlImplementationEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup controlimplementation edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ControlImplementationHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup controlimplementationhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ControlObjectiveEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup controlobjective edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ControlObjectiveHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup controlobjectivehistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ControlScheduledJobEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup controlscheduledjob edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ControlScheduledJobHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup controlscheduledjobhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func CustomDomainEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup customdomain edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func CustomDomainHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup customdomainhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func DNSVerificationEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup dnsverification edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func DNSVerificationHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup dnsverificationhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func DocumentDataEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup documentdata edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func DocumentDataHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup documentdatahistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func EmailVerificationTokenEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup emailverificationtoken edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func EntityEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup entity edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func EntityHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup entityhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func EntityTypeEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup entitytype edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func EntityTypeHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup entitytypehistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func EventEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup event edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func EvidenceEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup evidence edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func EvidenceHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup evidencehistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func FileEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup file edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func FileHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup filehistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func GroupEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup group edge")), entfga.DeleteTuplesFirstKey{})

	if exists, err := FromContext(ctx).GroupSetting.Query().Where((groupsetting.HasGroupWith(group.ID(id)))).Exist(ctx); err == nil && exists {
		if groupsettingCount, err := FromContext(ctx).GroupSetting.Delete().Where(groupsetting.HasGroupWith(group.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", groupsettingCount).Msg("deleting groupsetting")
			return err
		}
	}

	if exists, err := FromContext(ctx).GroupMembership.Query().Where((groupmembership.HasGroupWith(group.ID(id)))).Exist(ctx); err == nil && exists {
		if groupmembershipCount, err := FromContext(ctx).GroupMembership.Delete().Where(groupmembership.HasGroupWith(group.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", groupmembershipCount).Msg("deleting groupmembership")
			return err
		}
	}

	return nil
}

func GroupHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup grouphistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func GroupMembershipEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup groupmembership edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func GroupMembershipHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup groupmembershiphistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func GroupSettingEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup groupsetting edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func GroupSettingHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup groupsettinghistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func HushEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup hush edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func HushHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup hushhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func IntegrationEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup integration edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func IntegrationHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup integrationhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func InternalPolicyEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup internalpolicy edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func InternalPolicyHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup internalpolicyhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func InviteEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup invite edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func JobResultEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup jobresult edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func JobRunnerEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup jobrunner edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func JobRunnerRegistrationTokenEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup jobrunnerregistrationtoken edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func JobRunnerTokenEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup jobrunnertoken edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func MappableDomainEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup mappabledomain edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func MappableDomainHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup mappabledomainhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func MappedControlEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup mappedcontrol edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func MappedControlHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup mappedcontrolhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func NarrativeEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup narrative edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func NarrativeHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup narrativehistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func NoteEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup note edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func NoteHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup notehistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func OnboardingEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup onboarding edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func OrgMembershipEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup orgmembership edge")), entfga.DeleteTuplesFirstKey{})

	if exists, err := FromContext(ctx).GroupMembership.Query().Where((groupmembership.HasUserWith(user.ID(id)))).Exist(ctx); err == nil && exists {
		if groupmembershipCount, err := FromContext(ctx).GroupMembership.Delete().Where(groupmembership.HasUserWith(user.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", groupmembershipCount).Msg("deleting groupmembership")
			return err
		}
	}

	if exists, err := FromContext(ctx).ProgramMembership.Query().Where((programmembership.HasUserWith(user.ID(id)))).Exist(ctx); err == nil && exists {
		if programmembershipCount, err := FromContext(ctx).ProgramMembership.Delete().Where(programmembership.HasUserWith(user.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", programmembershipCount).Msg("deleting programmembership")
			return err
		}
	}

	return nil
}

func OrgMembershipHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup orgmembershiphistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func OrgModuleEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup orgmodule edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func OrgPriceEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup orgprice edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func OrgProductEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup orgproduct edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func OrgSubscriptionEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup orgsubscription edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func OrgSubscriptionHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup orgsubscriptionhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func OrganizationEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup organization edge")), entfga.DeleteTuplesFirstKey{})

	if exists, err := FromContext(ctx).Organization.Query().Where(organization.HasParentWith(organization.ID(id))).Exist(ctx); err == nil && exists {
		if organizationCount, err := FromContext(ctx).Organization.Delete().Where(organization.HasParentWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", organizationCount).Msg("deleting child organization")
			return err
		}
	}

	if exists, err := FromContext(ctx).OrganizationSetting.Query().Where((organizationsetting.HasOrganizationWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if organizationsettingCount, err := FromContext(ctx).OrganizationSetting.Delete().Where(organizationsetting.HasOrganizationWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", organizationsettingCount).Msg("deleting organizationsetting")
			return err
		}
	}

	if exists, err := FromContext(ctx).APIToken.Query().Where((apitoken.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if apitokenCount, err := FromContext(ctx).APIToken.Delete().Where(apitoken.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", apitokenCount).Msg("deleting apitoken")
			return err
		}
	}

	if exists, err := FromContext(ctx).File.Query().Where((file.HasOrganizationWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if fileCount, err := FromContext(ctx).File.Delete().Where(file.HasOrganizationWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", fileCount).Msg("deleting file")
			return err
		}
	}

	if exists, err := FromContext(ctx).Hush.Query().Where((hush.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if hushCount, err := FromContext(ctx).Hush.Delete().Where(hush.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", hushCount).Msg("deleting hush")
			return err
		}
	}

	if exists, err := FromContext(ctx).Group.Query().Where((group.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if groupCount, err := FromContext(ctx).Group.Delete().Where(group.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", groupCount).Msg("deleting group")
			return err
		}
	}

	if exists, err := FromContext(ctx).Template.Query().Where((template.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if templateCount, err := FromContext(ctx).Template.Delete().Where(template.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", templateCount).Msg("deleting template")
			return err
		}
	}

	if exists, err := FromContext(ctx).Integration.Query().Where((integration.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if integrationCount, err := FromContext(ctx).Integration.Delete().Where(integration.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", integrationCount).Msg("deleting integration")
			return err
		}
	}

	if exists, err := FromContext(ctx).DocumentData.Query().Where((documentdata.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if documentdataCount, err := FromContext(ctx).DocumentData.Delete().Where(documentdata.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", documentdataCount).Msg("deleting documentdata")
			return err
		}
	}

	if exists, err := FromContext(ctx).OrgSubscription.Query().Where((orgsubscription.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if orgsubscriptionCount, err := FromContext(ctx).OrgSubscription.Delete().Where(orgsubscription.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", orgsubscriptionCount).Msg("deleting orgsubscription")
			return err
		}
	}

	if exists, err := FromContext(ctx).OrgProduct.Query().Where((orgproduct.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if orgproductCount, err := FromContext(ctx).OrgProduct.Delete().Where(orgproduct.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", orgproductCount).Msg("deleting orgproduct")
			return err
		}
	}

	if exists, err := FromContext(ctx).OrgPrice.Query().Where((orgprice.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if orgpriceCount, err := FromContext(ctx).OrgPrice.Delete().Where(orgprice.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", orgpriceCount).Msg("deleting orgprice")
			return err
		}
	}

	if exists, err := FromContext(ctx).OrgModule.Query().Where((orgmodule.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if orgmoduleCount, err := FromContext(ctx).OrgModule.Delete().Where(orgmodule.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", orgmoduleCount).Msg("deleting orgmodule")
			return err
		}
	}

	if exists, err := FromContext(ctx).Invite.Query().Where((invite.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if inviteCount, err := FromContext(ctx).Invite.Delete().Where(invite.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", inviteCount).Msg("deleting invite")
			return err
		}
	}

	if exists, err := FromContext(ctx).Subscriber.Query().Where((subscriber.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if subscriberCount, err := FromContext(ctx).Subscriber.Delete().Where(subscriber.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", subscriberCount).Msg("deleting subscriber")
			return err
		}
	}

	if exists, err := FromContext(ctx).Entity.Query().Where((entity.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if entityCount, err := FromContext(ctx).Entity.Delete().Where(entity.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", entityCount).Msg("deleting entity")
			return err
		}
	}

	if exists, err := FromContext(ctx).EntityType.Query().Where((entitytype.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if entitytypeCount, err := FromContext(ctx).EntityType.Delete().Where(entitytype.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", entitytypeCount).Msg("deleting entitytype")
			return err
		}
	}

	if exists, err := FromContext(ctx).Contact.Query().Where((contact.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if contactCount, err := FromContext(ctx).Contact.Delete().Where(contact.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", contactCount).Msg("deleting contact")
			return err
		}
	}

	if exists, err := FromContext(ctx).Note.Query().Where((note.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if noteCount, err := FromContext(ctx).Note.Delete().Where(note.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", noteCount).Msg("deleting note")
			return err
		}
	}

	if exists, err := FromContext(ctx).Task.Query().Where((task.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if taskCount, err := FromContext(ctx).Task.Delete().Where(task.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", taskCount).Msg("deleting task")
			return err
		}
	}

	if exists, err := FromContext(ctx).Program.Query().Where((program.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if programCount, err := FromContext(ctx).Program.Delete().Where(program.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", programCount).Msg("deleting program")
			return err
		}
	}

	if exists, err := FromContext(ctx).Procedure.Query().Where((procedure.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if procedureCount, err := FromContext(ctx).Procedure.Delete().Where(procedure.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", procedureCount).Msg("deleting procedure")
			return err
		}
	}

	if exists, err := FromContext(ctx).InternalPolicy.Query().Where((internalpolicy.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if internalpolicyCount, err := FromContext(ctx).InternalPolicy.Delete().Where(internalpolicy.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", internalpolicyCount).Msg("deleting internalpolicy")
			return err
		}
	}

	if exists, err := FromContext(ctx).Risk.Query().Where((risk.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if riskCount, err := FromContext(ctx).Risk.Delete().Where(risk.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", riskCount).Msg("deleting risk")
			return err
		}
	}

	if exists, err := FromContext(ctx).ControlObjective.Query().Where((controlobjective.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if controlobjectiveCount, err := FromContext(ctx).ControlObjective.Delete().Where(controlobjective.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", controlobjectiveCount).Msg("deleting controlobjective")
			return err
		}
	}

	if exists, err := FromContext(ctx).Narrative.Query().Where((narrative.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if narrativeCount, err := FromContext(ctx).Narrative.Delete().Where(narrative.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", narrativeCount).Msg("deleting narrative")
			return err
		}
	}

	if exists, err := FromContext(ctx).Control.Query().Where((control.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if controlCount, err := FromContext(ctx).Control.Delete().Where(control.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", controlCount).Msg("deleting control")
			return err
		}
	}

	if exists, err := FromContext(ctx).Subcontrol.Query().Where((subcontrol.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if subcontrolCount, err := FromContext(ctx).Subcontrol.Delete().Where(subcontrol.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", subcontrolCount).Msg("deleting subcontrol")
			return err
		}
	}

	if exists, err := FromContext(ctx).ControlImplementation.Query().Where((controlimplementation.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if controlimplementationCount, err := FromContext(ctx).ControlImplementation.Delete().Where(controlimplementation.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", controlimplementationCount).Msg("deleting controlimplementation")
			return err
		}
	}

	if exists, err := FromContext(ctx).MappedControl.Query().Where((mappedcontrol.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if mappedcontrolCount, err := FromContext(ctx).MappedControl.Delete().Where(mappedcontrol.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", mappedcontrolCount).Msg("deleting mappedcontrol")
			return err
		}
	}

	if exists, err := FromContext(ctx).Evidence.Query().Where((evidence.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if evidenceCount, err := FromContext(ctx).Evidence.Delete().Where(evidence.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", evidenceCount).Msg("deleting evidence")
			return err
		}
	}

	if exists, err := FromContext(ctx).Standard.Query().Where((standard.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if standardCount, err := FromContext(ctx).Standard.Delete().Where(standard.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", standardCount).Msg("deleting standard")
			return err
		}
	}

	if exists, err := FromContext(ctx).ActionPlan.Query().Where((actionplan.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if actionplanCount, err := FromContext(ctx).ActionPlan.Delete().Where(actionplan.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", actionplanCount).Msg("deleting actionplan")
			return err
		}
	}

	if exists, err := FromContext(ctx).CustomDomain.Query().Where((customdomain.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if customdomainCount, err := FromContext(ctx).CustomDomain.Delete().Where(customdomain.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", customdomainCount).Msg("deleting customdomain")
			return err
		}
	}

	if exists, err := FromContext(ctx).JobRunner.Query().Where((jobrunner.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if jobrunnerCount, err := FromContext(ctx).JobRunner.Delete().Where(jobrunner.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", jobrunnerCount).Msg("deleting jobrunner")
			return err
		}
	}

	if exists, err := FromContext(ctx).JobRunnerToken.Query().Where((jobrunnertoken.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if jobrunnertokenCount, err := FromContext(ctx).JobRunnerToken.Delete().Where(jobrunnertoken.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", jobrunnertokenCount).Msg("deleting jobrunnertoken")
			return err
		}
	}

	if exists, err := FromContext(ctx).JobRunnerRegistrationToken.Query().Where((jobrunnerregistrationtoken.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if jobrunnerregistrationtokenCount, err := FromContext(ctx).JobRunnerRegistrationToken.Delete().Where(jobrunnerregistrationtoken.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", jobrunnerregistrationtokenCount).Msg("deleting jobrunnerregistrationtoken")
			return err
		}
	}

	if exists, err := FromContext(ctx).DNSVerification.Query().Where((dnsverification.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if dnsverificationCount, err := FromContext(ctx).DNSVerification.Delete().Where(dnsverification.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", dnsverificationCount).Msg("deleting dnsverification")
			return err
		}
	}

	if exists, err := FromContext(ctx).ScheduledJob.Query().Where((scheduledjob.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if scheduledjobCount, err := FromContext(ctx).ScheduledJob.Delete().Where(scheduledjob.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", scheduledjobCount).Msg("deleting scheduledjob")
			return err
		}
	}

	if exists, err := FromContext(ctx).ControlScheduledJob.Query().Where((controlscheduledjob.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if controlscheduledjobCount, err := FromContext(ctx).ControlScheduledJob.Delete().Where(controlscheduledjob.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", controlscheduledjobCount).Msg("deleting controlscheduledjob")
			return err
		}
	}

	if exists, err := FromContext(ctx).JobResult.Query().Where((jobresult.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if jobresultCount, err := FromContext(ctx).JobResult.Delete().Where(jobresult.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", jobresultCount).Msg("deleting jobresult")
			return err
		}
	}

	if exists, err := FromContext(ctx).ScheduledJobRun.Query().Where((scheduledjobrun.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if scheduledjobrunCount, err := FromContext(ctx).ScheduledJobRun.Delete().Where(scheduledjobrun.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", scheduledjobrunCount).Msg("deleting scheduledjobrun")
			return err
		}
	}

	if exists, err := FromContext(ctx).TrustCenter.Query().Where((trustcenter.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if trustcenterCount, err := FromContext(ctx).TrustCenter.Delete().Where(trustcenter.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", trustcenterCount).Msg("deleting trustcenter")
			return err
		}
	}

	if exists, err := FromContext(ctx).Asset.Query().Where((asset.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if assetCount, err := FromContext(ctx).Asset.Delete().Where(asset.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", assetCount).Msg("deleting asset")
			return err
		}
	}

	if exists, err := FromContext(ctx).Scan.Query().Where((scan.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if scanCount, err := FromContext(ctx).Scan.Delete().Where(scan.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", scanCount).Msg("deleting scan")
			return err
		}
	}

	if exists, err := FromContext(ctx).Subprocessor.Query().Where((subprocessor.HasOwnerWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if subprocessorCount, err := FromContext(ctx).Subprocessor.Delete().Where(subprocessor.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", subprocessorCount).Msg("deleting subprocessor")
			return err
		}
	}

	if exists, err := FromContext(ctx).OrgMembership.Query().Where((orgmembership.HasOrganizationWith(organization.ID(id)))).Exist(ctx); err == nil && exists {
		if orgmembershipCount, err := FromContext(ctx).OrgMembership.Delete().Where(orgmembership.HasOrganizationWith(organization.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", orgmembershipCount).Msg("deleting orgmembership")
			return err
		}
	}

	return nil
}

func OrganizationHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup organizationhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func OrganizationSettingEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup organizationsetting edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func OrganizationSettingHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup organizationsettinghistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func PasswordResetTokenEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup passwordresettoken edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func PersonalAccessTokenEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup personalaccesstoken edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ProcedureEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup procedure edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ProcedureHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup procedurehistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ProgramEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup program edge")), entfga.DeleteTuplesFirstKey{})

	if exists, err := FromContext(ctx).ProgramMembership.Query().Where((programmembership.HasProgramWith(program.ID(id)))).Exist(ctx); err == nil && exists {
		if programmembershipCount, err := FromContext(ctx).ProgramMembership.Delete().Where(programmembership.HasProgramWith(program.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", programmembershipCount).Msg("deleting programmembership")
			return err
		}
	}

	return nil
}

func ProgramHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup programhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ProgramMembershipEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup programmembership edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ProgramMembershipHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup programmembershiphistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func RiskEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup risk edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func RiskHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup riskhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ScanEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup scan edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ScanHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup scanhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ScheduledJobEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup scheduledjob edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ScheduledJobHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup scheduledjobhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func ScheduledJobRunEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup scheduledjobrun edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func StandardEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup standard edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func StandardHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup standardhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func SubcontrolEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup subcontrol edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func SubcontrolHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup subcontrolhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func SubprocessorEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup subprocessor edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func SubprocessorHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup subprocessorhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func SubscriberEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup subscriber edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func TFASettingEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup tfasetting edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func TaskEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup task edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func TaskHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup taskhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func TemplateEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup template edge")), entfga.DeleteTuplesFirstKey{})

	if exists, err := FromContext(ctx).DocumentData.Query().Where((documentdata.HasTemplateWith(template.ID(id)))).Exist(ctx); err == nil && exists {
		if documentdataCount, err := FromContext(ctx).DocumentData.Delete().Where(documentdata.HasTemplateWith(template.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", documentdataCount).Msg("deleting documentdata")
			return err
		}
	}

	return nil
}

func TemplateHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup templatehistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func TrustCenterEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup trustcenter edge")), entfga.DeleteTuplesFirstKey{})

	if exists, err := FromContext(ctx).TrustCenterSetting.Query().Where((trustcentersetting.HasTrustCenterWith(trustcenter.ID(id)))).Exist(ctx); err == nil && exists {
		if trustcentersettingCount, err := FromContext(ctx).TrustCenterSetting.Delete().Where(trustcentersetting.HasTrustCenterWith(trustcenter.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", trustcentersettingCount).Msg("deleting trustcentersetting")
			return err
		}
	}

	return nil
}

func TrustCenterHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup trustcenterhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func TrustCenterSettingEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup trustcentersetting edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func TrustCenterSettingHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup trustcentersettinghistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func TrustCenterSubprocessorEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup trustcentersubprocessor edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func TrustCenterSubprocessorHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup trustcentersubprocessorhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func UserEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup user edge")), entfga.DeleteTuplesFirstKey{})

	if exists, err := FromContext(ctx).PersonalAccessToken.Query().Where((personalaccesstoken.HasOwnerWith(user.ID(id)))).Exist(ctx); err == nil && exists {
		if personalaccesstokenCount, err := FromContext(ctx).PersonalAccessToken.Delete().Where(personalaccesstoken.HasOwnerWith(user.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", personalaccesstokenCount).Msg("deleting personalaccesstoken")
			return err
		}
	}

	if exists, err := FromContext(ctx).TFASetting.Query().Where((tfasetting.HasOwnerWith(user.ID(id)))).Exist(ctx); err == nil && exists {
		if tfasettingCount, err := FromContext(ctx).TFASetting.Delete().Where(tfasetting.HasOwnerWith(user.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", tfasettingCount).Msg("deleting tfasetting")
			return err
		}
	}

	if exists, err := FromContext(ctx).UserSetting.Query().Where((usersetting.HasUserWith(user.ID(id)))).Exist(ctx); err == nil && exists {
		if usersettingCount, err := FromContext(ctx).UserSetting.Delete().Where(usersetting.HasUserWith(user.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", usersettingCount).Msg("deleting usersetting")
			return err
		}
	}

	if exists, err := FromContext(ctx).EmailVerificationToken.Query().Where((emailverificationtoken.HasOwnerWith(user.ID(id)))).Exist(ctx); err == nil && exists {
		if emailverificationtokenCount, err := FromContext(ctx).EmailVerificationToken.Delete().Where(emailverificationtoken.HasOwnerWith(user.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", emailverificationtokenCount).Msg("deleting emailverificationtoken")
			return err
		}
	}

	if exists, err := FromContext(ctx).PasswordResetToken.Query().Where((passwordresettoken.HasOwnerWith(user.ID(id)))).Exist(ctx); err == nil && exists {
		if passwordresettokenCount, err := FromContext(ctx).PasswordResetToken.Delete().Where(passwordresettoken.HasOwnerWith(user.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", passwordresettokenCount).Msg("deleting passwordresettoken")
			return err
		}
	}

	if exists, err := FromContext(ctx).Webauthn.Query().Where((webauthn.HasOwnerWith(user.ID(id)))).Exist(ctx); err == nil && exists {
		if webauthnCount, err := FromContext(ctx).Webauthn.Delete().Where(webauthn.HasOwnerWith(user.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", webauthnCount).Msg("deleting webauthn")
			return err
		}
	}

	if exists, err := FromContext(ctx).OrgMembership.Query().Where((orgmembership.HasUserWith(user.ID(id)))).Exist(ctx); err == nil && exists {
		if orgmembershipCount, err := FromContext(ctx).OrgMembership.Delete().Where(orgmembership.HasUserWith(user.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", orgmembershipCount).Msg("deleting orgmembership")
			return err
		}
	}

	if exists, err := FromContext(ctx).GroupMembership.Query().Where((groupmembership.HasUserWith(user.ID(id)))).Exist(ctx); err == nil && exists {
		if groupmembershipCount, err := FromContext(ctx).GroupMembership.Delete().Where(groupmembership.HasUserWith(user.ID(id))).Exec(ctx); err != nil {
			log.Debug().Err(err).Int("count", groupmembershipCount).Msg("deleting groupmembership")
			return err
		}
	}

	return nil
}

func UserHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup userhistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func UserSettingEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup usersetting edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func UserSettingHistoryEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup usersettinghistory edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}

func WebauthnEdgeCleanup(ctx context.Context, id string) error {
	ctx = contextx.With(privacy.DecisionContext(ctx, privacy.Allowf("cleanup webauthn edge")), entfga.DeleteTuplesFirstKey{})

	return nil
}
