// Code generated by ent, DO NOT EDIT.

package templateresponder

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
)

const (
	// Label holds the string label denoting the templateresponder type in the database.
	Label = "template_responder"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldAssessmentID holds the string denoting the assessment_id field in the database.
	FieldAssessmentID = "assessment_id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldSecret holds the string denoting the secret field in the database.
	FieldSecret = "secret"
	// FieldSendAttempts holds the string denoting the send_attempts field in the database.
	FieldSendAttempts = "send_attempts"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeAssessment holds the string denoting the assessment edge name in mutations.
	EdgeAssessment = "assessment"
	// Table holds the table name of the templateresponder in the database.
	Table = "template_responders"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "template_responders"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// AssessmentTable is the table that holds the assessment relation/edge.
	AssessmentTable = "template_responders"
	// AssessmentInverseTable is the table name for the Assessment entity.
	// It exists in this package in order to avoid circular dependency with the "assessment" package.
	AssessmentInverseTable = "assessments"
	// AssessmentColumn is the table column denoting the assessment relation/edge.
	AssessmentColumn = "assessment_id"
)

// Columns holds all SQL columns for templateresponder fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldOwnerID,
	FieldAssessmentID,
	FieldEmail,
	FieldToken,
	FieldSecret,
	FieldSendAttempts,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [5]ent.Hook
	Interceptors [3]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	OwnerIDValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultToken holds the default value on creation for the "token" field.
	DefaultToken func() string
	// SecretValidator is a validator for the "secret" field. It is called by the builders before save.
	SecretValidator func([]byte) error
	// DefaultSendAttempts holds the default value on creation for the "send_attempts" field.
	DefaultSendAttempts int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

const DefaultStatus enums.TemplateResponderStatus = "PENDING"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.TemplateResponderStatus) error {
	switch s.String() {
	case "PENDING", "SENT", "VIEWED", "IN_PROGRESS", "COMPLETED":
		return nil
	default:
		return fmt.Errorf("templateresponder: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the TemplateResponder queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByAssessmentID orders the results by the assessment_id field.
func ByAssessmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssessmentID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// BySendAttempts orders the results by the send_attempts field.
func BySendAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSendAttempts, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssessmentField orders the results by assessment field.
func ByAssessmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssessmentStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newAssessmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssessmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AssessmentTable, AssessmentColumn),
	)
}

var (
	// enums.TemplateResponderStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.TemplateResponderStatus)(nil)
	// enums.TemplateResponderStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.TemplateResponderStatus)(nil)
)
