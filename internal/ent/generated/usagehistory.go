// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/usagehistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// UsageHistory is the model entity for the UsageHistory schema.
type UsageHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// owner organization
	OrganizationID string `json:"organization_id,omitempty"`
	// the type of resource this usage is for
	ResourceType enums.UsageType `json:"resource_type,omitempty"`
	// the amount of resource used
	Used int64 `json:"used,omitempty"`
	// the limit for the resource type
	Limit        int64 `json:"limit,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UsageHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case usagehistory.FieldTags:
			values[i] = new([]byte)
		case usagehistory.FieldOperation:
			values[i] = new(history.OpType)
		case usagehistory.FieldUsed, usagehistory.FieldLimit:
			values[i] = new(sql.NullInt64)
		case usagehistory.FieldID, usagehistory.FieldRef, usagehistory.FieldCreatedBy, usagehistory.FieldUpdatedBy, usagehistory.FieldDeletedBy, usagehistory.FieldOrganizationID, usagehistory.FieldResourceType:
			values[i] = new(sql.NullString)
		case usagehistory.FieldHistoryTime, usagehistory.FieldCreatedAt, usagehistory.FieldUpdatedAt, usagehistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UsageHistory fields.
func (uh *UsageHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case usagehistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				uh.ID = value.String
			}
		case usagehistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				uh.HistoryTime = value.Time
			}
		case usagehistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				uh.Ref = value.String
			}
		case usagehistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				uh.Operation = *value
			}
		case usagehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uh.CreatedAt = value.Time
			}
		case usagehistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				uh.UpdatedAt = value.Time
			}
		case usagehistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				uh.CreatedBy = value.String
			}
		case usagehistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				uh.UpdatedBy = value.String
			}
		case usagehistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				uh.DeletedAt = value.Time
			}
		case usagehistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				uh.DeletedBy = value.String
			}
		case usagehistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &uh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case usagehistory.FieldOrganizationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value.Valid {
				uh.OrganizationID = value.String
			}
		case usagehistory.FieldResourceType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_type", values[i])
			} else if value.Valid {
				uh.ResourceType = enums.UsageType(value.String)
			}
		case usagehistory.FieldUsed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field used", values[i])
			} else if value.Valid {
				uh.Used = value.Int64
			}
		case usagehistory.FieldLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field limit", values[i])
			} else if value.Valid {
				uh.Limit = value.Int64
			}
		default:
			uh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UsageHistory.
// This includes values selected through modifiers, order, etc.
func (uh *UsageHistory) Value(name string) (ent.Value, error) {
	return uh.selectValues.Get(name)
}

// Update returns a builder for updating this UsageHistory.
// Note that you need to call UsageHistory.Unwrap() before calling this method if this UsageHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (uh *UsageHistory) Update() *UsageHistoryUpdateOne {
	return NewUsageHistoryClient(uh.config).UpdateOne(uh)
}

// Unwrap unwraps the UsageHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uh *UsageHistory) Unwrap() *UsageHistory {
	_tx, ok := uh.config.driver.(*txDriver)
	if !ok {
		panic("generated: UsageHistory is not a transactional entity")
	}
	uh.config.driver = _tx.drv
	return uh
}

// String implements the fmt.Stringer.
func (uh *UsageHistory) String() string {
	var builder strings.Builder
	builder.WriteString("UsageHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(uh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(uh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", uh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(uh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(uh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(uh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(uh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(uh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(uh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", uh.Tags))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(uh.OrganizationID)
	builder.WriteString(", ")
	builder.WriteString("resource_type=")
	builder.WriteString(fmt.Sprintf("%v", uh.ResourceType))
	builder.WriteString(", ")
	builder.WriteString("used=")
	builder.WriteString(fmt.Sprintf("%v", uh.Used))
	builder.WriteString(", ")
	builder.WriteString("limit=")
	builder.WriteString(fmt.Sprintf("%v", uh.Limit))
	builder.WriteByte(')')
	return builder.String()
}

// UsageHistories is a parsable slice of UsageHistory.
type UsageHistories []*UsageHistory
