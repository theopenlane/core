// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/dnsverification"
	"github.com/theopenlane/core/internal/ent/generated/mappabledomain"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// CustomDomainCreate is the builder for creating a CustomDomain entity.
type CustomDomainCreate struct {
	config
	mutation *CustomDomainMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cdc *CustomDomainCreate) SetCreatedAt(t time.Time) *CustomDomainCreate {
	cdc.mutation.SetCreatedAt(t)
	return cdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cdc *CustomDomainCreate) SetNillableCreatedAt(t *time.Time) *CustomDomainCreate {
	if t != nil {
		cdc.SetCreatedAt(*t)
	}
	return cdc
}

// SetUpdatedAt sets the "updated_at" field.
func (cdc *CustomDomainCreate) SetUpdatedAt(t time.Time) *CustomDomainCreate {
	cdc.mutation.SetUpdatedAt(t)
	return cdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cdc *CustomDomainCreate) SetNillableUpdatedAt(t *time.Time) *CustomDomainCreate {
	if t != nil {
		cdc.SetUpdatedAt(*t)
	}
	return cdc
}

// SetCreatedBy sets the "created_by" field.
func (cdc *CustomDomainCreate) SetCreatedBy(s string) *CustomDomainCreate {
	cdc.mutation.SetCreatedBy(s)
	return cdc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (cdc *CustomDomainCreate) SetNillableCreatedBy(s *string) *CustomDomainCreate {
	if s != nil {
		cdc.SetCreatedBy(*s)
	}
	return cdc
}

// SetUpdatedBy sets the "updated_by" field.
func (cdc *CustomDomainCreate) SetUpdatedBy(s string) *CustomDomainCreate {
	cdc.mutation.SetUpdatedBy(s)
	return cdc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (cdc *CustomDomainCreate) SetNillableUpdatedBy(s *string) *CustomDomainCreate {
	if s != nil {
		cdc.SetUpdatedBy(*s)
	}
	return cdc
}

// SetDeletedAt sets the "deleted_at" field.
func (cdc *CustomDomainCreate) SetDeletedAt(t time.Time) *CustomDomainCreate {
	cdc.mutation.SetDeletedAt(t)
	return cdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cdc *CustomDomainCreate) SetNillableDeletedAt(t *time.Time) *CustomDomainCreate {
	if t != nil {
		cdc.SetDeletedAt(*t)
	}
	return cdc
}

// SetDeletedBy sets the "deleted_by" field.
func (cdc *CustomDomainCreate) SetDeletedBy(s string) *CustomDomainCreate {
	cdc.mutation.SetDeletedBy(s)
	return cdc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (cdc *CustomDomainCreate) SetNillableDeletedBy(s *string) *CustomDomainCreate {
	if s != nil {
		cdc.SetDeletedBy(*s)
	}
	return cdc
}

// SetTags sets the "tags" field.
func (cdc *CustomDomainCreate) SetTags(s []string) *CustomDomainCreate {
	cdc.mutation.SetTags(s)
	return cdc
}

// SetOwnerID sets the "owner_id" field.
func (cdc *CustomDomainCreate) SetOwnerID(s string) *CustomDomainCreate {
	cdc.mutation.SetOwnerID(s)
	return cdc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (cdc *CustomDomainCreate) SetNillableOwnerID(s *string) *CustomDomainCreate {
	if s != nil {
		cdc.SetOwnerID(*s)
	}
	return cdc
}

// SetCnameRecord sets the "cname_record" field.
func (cdc *CustomDomainCreate) SetCnameRecord(s string) *CustomDomainCreate {
	cdc.mutation.SetCnameRecord(s)
	return cdc
}

// SetMappableDomainID sets the "mappable_domain_id" field.
func (cdc *CustomDomainCreate) SetMappableDomainID(s string) *CustomDomainCreate {
	cdc.mutation.SetMappableDomainID(s)
	return cdc
}

// SetDNSVerificationID sets the "dns_verification_id" field.
func (cdc *CustomDomainCreate) SetDNSVerificationID(s string) *CustomDomainCreate {
	cdc.mutation.SetDNSVerificationID(s)
	return cdc
}

// SetNillableDNSVerificationID sets the "dns_verification_id" field if the given value is not nil.
func (cdc *CustomDomainCreate) SetNillableDNSVerificationID(s *string) *CustomDomainCreate {
	if s != nil {
		cdc.SetDNSVerificationID(*s)
	}
	return cdc
}

// SetID sets the "id" field.
func (cdc *CustomDomainCreate) SetID(s string) *CustomDomainCreate {
	cdc.mutation.SetID(s)
	return cdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cdc *CustomDomainCreate) SetNillableID(s *string) *CustomDomainCreate {
	if s != nil {
		cdc.SetID(*s)
	}
	return cdc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (cdc *CustomDomainCreate) SetOwner(o *Organization) *CustomDomainCreate {
	return cdc.SetOwnerID(o.ID)
}

// SetMappableDomain sets the "mappable_domain" edge to the MappableDomain entity.
func (cdc *CustomDomainCreate) SetMappableDomain(m *MappableDomain) *CustomDomainCreate {
	return cdc.SetMappableDomainID(m.ID)
}

// SetDNSVerification sets the "dns_verification" edge to the DNSVerification entity.
func (cdc *CustomDomainCreate) SetDNSVerification(d *DNSVerification) *CustomDomainCreate {
	return cdc.SetDNSVerificationID(d.ID)
}

// Mutation returns the CustomDomainMutation object of the builder.
func (cdc *CustomDomainCreate) Mutation() *CustomDomainMutation {
	return cdc.mutation
}

// Save creates the CustomDomain in the database.
func (cdc *CustomDomainCreate) Save(ctx context.Context) (*CustomDomain, error) {
	if err := cdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, cdc.sqlSave, cdc.mutation, cdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cdc *CustomDomainCreate) SaveX(ctx context.Context) *CustomDomain {
	v, err := cdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdc *CustomDomainCreate) Exec(ctx context.Context) error {
	_, err := cdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdc *CustomDomainCreate) ExecX(ctx context.Context) {
	if err := cdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cdc *CustomDomainCreate) defaults() error {
	if _, ok := cdc.mutation.CreatedAt(); !ok {
		if customdomain.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized customdomain.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := customdomain.DefaultCreatedAt()
		cdc.mutation.SetCreatedAt(v)
	}
	if _, ok := cdc.mutation.UpdatedAt(); !ok {
		if customdomain.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized customdomain.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := customdomain.DefaultUpdatedAt()
		cdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cdc.mutation.Tags(); !ok {
		v := customdomain.DefaultTags
		cdc.mutation.SetTags(v)
	}
	if _, ok := cdc.mutation.ID(); !ok {
		if customdomain.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized customdomain.DefaultID (forgotten import generated/runtime?)")
		}
		v := customdomain.DefaultID()
		cdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (cdc *CustomDomainCreate) check() error {
	if _, ok := cdc.mutation.CnameRecord(); !ok {
		return &ValidationError{Name: "cname_record", err: errors.New(`generated: missing required field "CustomDomain.cname_record"`)}
	}
	if v, ok := cdc.mutation.CnameRecord(); ok {
		if err := customdomain.CnameRecordValidator(v); err != nil {
			return &ValidationError{Name: "cname_record", err: fmt.Errorf(`generated: validator failed for field "CustomDomain.cname_record": %w`, err)}
		}
	}
	if _, ok := cdc.mutation.MappableDomainID(); !ok {
		return &ValidationError{Name: "mappable_domain_id", err: errors.New(`generated: missing required field "CustomDomain.mappable_domain_id"`)}
	}
	if v, ok := cdc.mutation.MappableDomainID(); ok {
		if err := customdomain.MappableDomainIDValidator(v); err != nil {
			return &ValidationError{Name: "mappable_domain_id", err: fmt.Errorf(`generated: validator failed for field "CustomDomain.mappable_domain_id": %w`, err)}
		}
	}
	if len(cdc.mutation.MappableDomainIDs()) == 0 {
		return &ValidationError{Name: "mappable_domain", err: errors.New(`generated: missing required edge "CustomDomain.mappable_domain"`)}
	}
	return nil
}

func (cdc *CustomDomainCreate) sqlSave(ctx context.Context) (*CustomDomain, error) {
	if err := cdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected CustomDomain.ID type: %T", _spec.ID.Value)
		}
	}
	cdc.mutation.id = &_node.ID
	cdc.mutation.done = true
	return _node, nil
}

func (cdc *CustomDomainCreate) createSpec() (*CustomDomain, *sqlgraph.CreateSpec) {
	var (
		_node = &CustomDomain{config: cdc.config}
		_spec = sqlgraph.NewCreateSpec(customdomain.Table, sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString))
	)
	_spec.Schema = cdc.schemaConfig.CustomDomain
	if id, ok := cdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cdc.mutation.CreatedAt(); ok {
		_spec.SetField(customdomain.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cdc.mutation.UpdatedAt(); ok {
		_spec.SetField(customdomain.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cdc.mutation.CreatedBy(); ok {
		_spec.SetField(customdomain.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := cdc.mutation.UpdatedBy(); ok {
		_spec.SetField(customdomain.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := cdc.mutation.DeletedAt(); ok {
		_spec.SetField(customdomain.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := cdc.mutation.DeletedBy(); ok {
		_spec.SetField(customdomain.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := cdc.mutation.Tags(); ok {
		_spec.SetField(customdomain.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := cdc.mutation.CnameRecord(); ok {
		_spec.SetField(customdomain.FieldCnameRecord, field.TypeString, value)
		_node.CnameRecord = value
	}
	if nodes := cdc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   customdomain.OwnerTable,
			Columns: []string{customdomain.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = cdc.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdc.mutation.MappableDomainIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customdomain.MappableDomainTable,
			Columns: []string{customdomain.MappableDomainColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappabledomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = cdc.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MappableDomainID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cdc.mutation.DNSVerificationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   customdomain.DNSVerificationTable,
			Columns: []string{customdomain.DNSVerificationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString),
			},
		}
		edge.Schema = cdc.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DNSVerificationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CustomDomainCreateBulk is the builder for creating many CustomDomain entities in bulk.
type CustomDomainCreateBulk struct {
	config
	err      error
	builders []*CustomDomainCreate
}

// Save creates the CustomDomain entities in the database.
func (cdcb *CustomDomainCreateBulk) Save(ctx context.Context) ([]*CustomDomain, error) {
	if cdcb.err != nil {
		return nil, cdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cdcb.builders))
	nodes := make([]*CustomDomain, len(cdcb.builders))
	mutators := make([]Mutator, len(cdcb.builders))
	for i := range cdcb.builders {
		func(i int, root context.Context) {
			builder := cdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CustomDomainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cdcb *CustomDomainCreateBulk) SaveX(ctx context.Context) []*CustomDomain {
	v, err := cdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cdcb *CustomDomainCreateBulk) Exec(ctx context.Context) error {
	_, err := cdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cdcb *CustomDomainCreateBulk) ExecX(ctx context.Context) {
	if err := cdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
