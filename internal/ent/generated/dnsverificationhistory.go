// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/dnsverificationhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// DNSVerificationHistory is the model entity for the DNSVerificationHistory schema.
type DNSVerificationHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// The ID of the custom domain in cloudflare
	CloudflareHostnameID string `json:"cloudflare_hostname_id,omitempty"`
	// the name of the dns txt record
	DNSTxtRecord string `json:"dns_txt_record,omitempty"`
	// the expected value of the dns txt record
	DNSTxtValue string `json:"dns_txt_value,omitempty"`
	// Status of the domain verification
	DNSVerificationStatus enums.CustomDomainStatus `json:"dns_verification_status,omitempty"`
	// Reason of the dns verification status, for giving the user diagnostic info
	DNSVerificationStatusReason string `json:"dns_verification_status_reason,omitempty"`
	// Path under /.well-known/acme-challenge/ to serve the ACME challenge
	AcmeChallengePath string `json:"acme_challenge_path,omitempty"`
	// the expected value of the acme challenge record
	ExpectedAcmeChallengeValue string `json:"expected_acme_challenge_value,omitempty"`
	// Status of the ACME challenge validation
	AcmeChallengeStatus enums.CustomDomainStatus `json:"acme_challenge_status,omitempty"`
	// Reason of the ACME status, for giving the user diagnostic info
	AcmeChallengeStatusReason string `json:"acme_challenge_status_reason,omitempty"`
	selectValues              sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DNSVerificationHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dnsverificationhistory.FieldTags:
			values[i] = new([]byte)
		case dnsverificationhistory.FieldOperation:
			values[i] = new(history.OpType)
		case dnsverificationhistory.FieldID, dnsverificationhistory.FieldRef, dnsverificationhistory.FieldCreatedBy, dnsverificationhistory.FieldUpdatedBy, dnsverificationhistory.FieldDeletedBy, dnsverificationhistory.FieldOwnerID, dnsverificationhistory.FieldCloudflareHostnameID, dnsverificationhistory.FieldDNSTxtRecord, dnsverificationhistory.FieldDNSTxtValue, dnsverificationhistory.FieldDNSVerificationStatus, dnsverificationhistory.FieldDNSVerificationStatusReason, dnsverificationhistory.FieldAcmeChallengePath, dnsverificationhistory.FieldExpectedAcmeChallengeValue, dnsverificationhistory.FieldAcmeChallengeStatus, dnsverificationhistory.FieldAcmeChallengeStatusReason:
			values[i] = new(sql.NullString)
		case dnsverificationhistory.FieldHistoryTime, dnsverificationhistory.FieldCreatedAt, dnsverificationhistory.FieldUpdatedAt, dnsverificationhistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DNSVerificationHistory fields.
func (dvh *DNSVerificationHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dnsverificationhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				dvh.ID = value.String
			}
		case dnsverificationhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				dvh.HistoryTime = value.Time
			}
		case dnsverificationhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				dvh.Ref = value.String
			}
		case dnsverificationhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				dvh.Operation = *value
			}
		case dnsverificationhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dvh.CreatedAt = value.Time
			}
		case dnsverificationhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dvh.UpdatedAt = value.Time
			}
		case dnsverificationhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				dvh.CreatedBy = value.String
			}
		case dnsverificationhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				dvh.UpdatedBy = value.String
			}
		case dnsverificationhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				dvh.DeletedAt = value.Time
			}
		case dnsverificationhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				dvh.DeletedBy = value.String
			}
		case dnsverificationhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &dvh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case dnsverificationhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				dvh.OwnerID = value.String
			}
		case dnsverificationhistory.FieldCloudflareHostnameID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cloudflare_hostname_id", values[i])
			} else if value.Valid {
				dvh.CloudflareHostnameID = value.String
			}
		case dnsverificationhistory.FieldDNSTxtRecord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_txt_record", values[i])
			} else if value.Valid {
				dvh.DNSTxtRecord = value.String
			}
		case dnsverificationhistory.FieldDNSTxtValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_txt_value", values[i])
			} else if value.Valid {
				dvh.DNSTxtValue = value.String
			}
		case dnsverificationhistory.FieldDNSVerificationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_verification_status", values[i])
			} else if value.Valid {
				dvh.DNSVerificationStatus = enums.CustomDomainStatus(value.String)
			}
		case dnsverificationhistory.FieldDNSVerificationStatusReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dns_verification_status_reason", values[i])
			} else if value.Valid {
				dvh.DNSVerificationStatusReason = value.String
			}
		case dnsverificationhistory.FieldAcmeChallengePath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field acme_challenge_path", values[i])
			} else if value.Valid {
				dvh.AcmeChallengePath = value.String
			}
		case dnsverificationhistory.FieldExpectedAcmeChallengeValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field expected_acme_challenge_value", values[i])
			} else if value.Valid {
				dvh.ExpectedAcmeChallengeValue = value.String
			}
		case dnsverificationhistory.FieldAcmeChallengeStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field acme_challenge_status", values[i])
			} else if value.Valid {
				dvh.AcmeChallengeStatus = enums.CustomDomainStatus(value.String)
			}
		case dnsverificationhistory.FieldAcmeChallengeStatusReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field acme_challenge_status_reason", values[i])
			} else if value.Valid {
				dvh.AcmeChallengeStatusReason = value.String
			}
		default:
			dvh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DNSVerificationHistory.
// This includes values selected through modifiers, order, etc.
func (dvh *DNSVerificationHistory) Value(name string) (ent.Value, error) {
	return dvh.selectValues.Get(name)
}

// Update returns a builder for updating this DNSVerificationHistory.
// Note that you need to call DNSVerificationHistory.Unwrap() before calling this method if this DNSVerificationHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (dvh *DNSVerificationHistory) Update() *DNSVerificationHistoryUpdateOne {
	return NewDNSVerificationHistoryClient(dvh.config).UpdateOne(dvh)
}

// Unwrap unwraps the DNSVerificationHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dvh *DNSVerificationHistory) Unwrap() *DNSVerificationHistory {
	_tx, ok := dvh.config.driver.(*txDriver)
	if !ok {
		panic("generated: DNSVerificationHistory is not a transactional entity")
	}
	dvh.config.driver = _tx.drv
	return dvh
}

// String implements the fmt.Stringer.
func (dvh *DNSVerificationHistory) String() string {
	var builder strings.Builder
	builder.WriteString("DNSVerificationHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dvh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(dvh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(dvh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", dvh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(dvh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dvh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(dvh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(dvh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(dvh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(dvh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", dvh.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(dvh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("cloudflare_hostname_id=")
	builder.WriteString(dvh.CloudflareHostnameID)
	builder.WriteString(", ")
	builder.WriteString("dns_txt_record=")
	builder.WriteString(dvh.DNSTxtRecord)
	builder.WriteString(", ")
	builder.WriteString("dns_txt_value=")
	builder.WriteString(dvh.DNSTxtValue)
	builder.WriteString(", ")
	builder.WriteString("dns_verification_status=")
	builder.WriteString(fmt.Sprintf("%v", dvh.DNSVerificationStatus))
	builder.WriteString(", ")
	builder.WriteString("dns_verification_status_reason=")
	builder.WriteString(dvh.DNSVerificationStatusReason)
	builder.WriteString(", ")
	builder.WriteString("acme_challenge_path=")
	builder.WriteString(dvh.AcmeChallengePath)
	builder.WriteString(", ")
	builder.WriteString("expected_acme_challenge_value=")
	builder.WriteString(dvh.ExpectedAcmeChallengeValue)
	builder.WriteString(", ")
	builder.WriteString("acme_challenge_status=")
	builder.WriteString(fmt.Sprintf("%v", dvh.AcmeChallengeStatus))
	builder.WriteString(", ")
	builder.WriteString("acme_challenge_status_reason=")
	builder.WriteString(dvh.AcmeChallengeStatusReason)
	builder.WriteByte(')')
	return builder.String()
}

// DNSVerificationHistories is a parsable slice of DNSVerificationHistory.
type DNSVerificationHistories []*DNSVerificationHistory
