// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitlement"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
)

// EntitlementPlanUpdate is the builder for updating EntitlementPlan entities.
type EntitlementPlanUpdate struct {
	config
	hooks     []Hook
	mutation  *EntitlementPlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EntitlementPlanUpdate builder.
func (epu *EntitlementPlanUpdate) Where(ps ...predicate.EntitlementPlan) *EntitlementPlanUpdate {
	epu.mutation.Where(ps...)
	return epu
}

// SetUpdatedAt sets the "updated_at" field.
func (epu *EntitlementPlanUpdate) SetUpdatedAt(t time.Time) *EntitlementPlanUpdate {
	epu.mutation.SetUpdatedAt(t)
	return epu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (epu *EntitlementPlanUpdate) ClearUpdatedAt() *EntitlementPlanUpdate {
	epu.mutation.ClearUpdatedAt()
	return epu
}

// SetUpdatedBy sets the "updated_by" field.
func (epu *EntitlementPlanUpdate) SetUpdatedBy(s string) *EntitlementPlanUpdate {
	epu.mutation.SetUpdatedBy(s)
	return epu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (epu *EntitlementPlanUpdate) SetNillableUpdatedBy(s *string) *EntitlementPlanUpdate {
	if s != nil {
		epu.SetUpdatedBy(*s)
	}
	return epu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (epu *EntitlementPlanUpdate) ClearUpdatedBy() *EntitlementPlanUpdate {
	epu.mutation.ClearUpdatedBy()
	return epu
}

// SetDeletedAt sets the "deleted_at" field.
func (epu *EntitlementPlanUpdate) SetDeletedAt(t time.Time) *EntitlementPlanUpdate {
	epu.mutation.SetDeletedAt(t)
	return epu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epu *EntitlementPlanUpdate) SetNillableDeletedAt(t *time.Time) *EntitlementPlanUpdate {
	if t != nil {
		epu.SetDeletedAt(*t)
	}
	return epu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (epu *EntitlementPlanUpdate) ClearDeletedAt() *EntitlementPlanUpdate {
	epu.mutation.ClearDeletedAt()
	return epu
}

// SetDeletedBy sets the "deleted_by" field.
func (epu *EntitlementPlanUpdate) SetDeletedBy(s string) *EntitlementPlanUpdate {
	epu.mutation.SetDeletedBy(s)
	return epu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (epu *EntitlementPlanUpdate) SetNillableDeletedBy(s *string) *EntitlementPlanUpdate {
	if s != nil {
		epu.SetDeletedBy(*s)
	}
	return epu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (epu *EntitlementPlanUpdate) ClearDeletedBy() *EntitlementPlanUpdate {
	epu.mutation.ClearDeletedBy()
	return epu
}

// SetTags sets the "tags" field.
func (epu *EntitlementPlanUpdate) SetTags(s []string) *EntitlementPlanUpdate {
	epu.mutation.SetTags(s)
	return epu
}

// AppendTags appends s to the "tags" field.
func (epu *EntitlementPlanUpdate) AppendTags(s []string) *EntitlementPlanUpdate {
	epu.mutation.AppendTags(s)
	return epu
}

// ClearTags clears the value of the "tags" field.
func (epu *EntitlementPlanUpdate) ClearTags() *EntitlementPlanUpdate {
	epu.mutation.ClearTags()
	return epu
}

// SetOwnerID sets the "owner_id" field.
func (epu *EntitlementPlanUpdate) SetOwnerID(s string) *EntitlementPlanUpdate {
	epu.mutation.SetOwnerID(s)
	return epu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (epu *EntitlementPlanUpdate) SetNillableOwnerID(s *string) *EntitlementPlanUpdate {
	if s != nil {
		epu.SetOwnerID(*s)
	}
	return epu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (epu *EntitlementPlanUpdate) ClearOwnerID() *EntitlementPlanUpdate {
	epu.mutation.ClearOwnerID()
	return epu
}

// SetDisplayName sets the "display_name" field.
func (epu *EntitlementPlanUpdate) SetDisplayName(s string) *EntitlementPlanUpdate {
	epu.mutation.SetDisplayName(s)
	return epu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (epu *EntitlementPlanUpdate) SetNillableDisplayName(s *string) *EntitlementPlanUpdate {
	if s != nil {
		epu.SetDisplayName(*s)
	}
	return epu
}

// ClearDisplayName clears the value of the "display_name" field.
func (epu *EntitlementPlanUpdate) ClearDisplayName() *EntitlementPlanUpdate {
	epu.mutation.ClearDisplayName()
	return epu
}

// SetDescription sets the "description" field.
func (epu *EntitlementPlanUpdate) SetDescription(s string) *EntitlementPlanUpdate {
	epu.mutation.SetDescription(s)
	return epu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (epu *EntitlementPlanUpdate) SetNillableDescription(s *string) *EntitlementPlanUpdate {
	if s != nil {
		epu.SetDescription(*s)
	}
	return epu
}

// ClearDescription clears the value of the "description" field.
func (epu *EntitlementPlanUpdate) ClearDescription() *EntitlementPlanUpdate {
	epu.mutation.ClearDescription()
	return epu
}

// SetMetadata sets the "metadata" field.
func (epu *EntitlementPlanUpdate) SetMetadata(m map[string]interface{}) *EntitlementPlanUpdate {
	epu.mutation.SetMetadata(m)
	return epu
}

// ClearMetadata clears the value of the "metadata" field.
func (epu *EntitlementPlanUpdate) ClearMetadata() *EntitlementPlanUpdate {
	epu.mutation.ClearMetadata()
	return epu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (epu *EntitlementPlanUpdate) SetOwner(o *Organization) *EntitlementPlanUpdate {
	return epu.SetOwnerID(o.ID)
}

// AddEntitlementIDs adds the "entitlements" edge to the Entitlement entity by IDs.
func (epu *EntitlementPlanUpdate) AddEntitlementIDs(ids ...string) *EntitlementPlanUpdate {
	epu.mutation.AddEntitlementIDs(ids...)
	return epu
}

// AddEntitlements adds the "entitlements" edges to the Entitlement entity.
func (epu *EntitlementPlanUpdate) AddEntitlements(e ...*Entitlement) *EntitlementPlanUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddEntitlementIDs(ids...)
}

// AddBaseFeatureIDs adds the "base_features" edge to the Feature entity by IDs.
func (epu *EntitlementPlanUpdate) AddBaseFeatureIDs(ids ...string) *EntitlementPlanUpdate {
	epu.mutation.AddBaseFeatureIDs(ids...)
	return epu
}

// AddBaseFeatures adds the "base_features" edges to the Feature entity.
func (epu *EntitlementPlanUpdate) AddBaseFeatures(f ...*Feature) *EntitlementPlanUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return epu.AddBaseFeatureIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (epu *EntitlementPlanUpdate) AddEventIDs(ids ...string) *EntitlementPlanUpdate {
	epu.mutation.AddEventIDs(ids...)
	return epu
}

// AddEvents adds the "events" edges to the Event entity.
func (epu *EntitlementPlanUpdate) AddEvents(e ...*Event) *EntitlementPlanUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddEventIDs(ids...)
}

// AddFeatureIDs adds the "features" edge to the EntitlementPlanFeature entity by IDs.
func (epu *EntitlementPlanUpdate) AddFeatureIDs(ids ...string) *EntitlementPlanUpdate {
	epu.mutation.AddFeatureIDs(ids...)
	return epu
}

// AddFeatures adds the "features" edges to the EntitlementPlanFeature entity.
func (epu *EntitlementPlanUpdate) AddFeatures(e ...*EntitlementPlanFeature) *EntitlementPlanUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.AddFeatureIDs(ids...)
}

// Mutation returns the EntitlementPlanMutation object of the builder.
func (epu *EntitlementPlanUpdate) Mutation() *EntitlementPlanMutation {
	return epu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (epu *EntitlementPlanUpdate) ClearOwner() *EntitlementPlanUpdate {
	epu.mutation.ClearOwner()
	return epu
}

// ClearEntitlements clears all "entitlements" edges to the Entitlement entity.
func (epu *EntitlementPlanUpdate) ClearEntitlements() *EntitlementPlanUpdate {
	epu.mutation.ClearEntitlements()
	return epu
}

// RemoveEntitlementIDs removes the "entitlements" edge to Entitlement entities by IDs.
func (epu *EntitlementPlanUpdate) RemoveEntitlementIDs(ids ...string) *EntitlementPlanUpdate {
	epu.mutation.RemoveEntitlementIDs(ids...)
	return epu
}

// RemoveEntitlements removes "entitlements" edges to Entitlement entities.
func (epu *EntitlementPlanUpdate) RemoveEntitlements(e ...*Entitlement) *EntitlementPlanUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemoveEntitlementIDs(ids...)
}

// ClearBaseFeatures clears all "base_features" edges to the Feature entity.
func (epu *EntitlementPlanUpdate) ClearBaseFeatures() *EntitlementPlanUpdate {
	epu.mutation.ClearBaseFeatures()
	return epu
}

// RemoveBaseFeatureIDs removes the "base_features" edge to Feature entities by IDs.
func (epu *EntitlementPlanUpdate) RemoveBaseFeatureIDs(ids ...string) *EntitlementPlanUpdate {
	epu.mutation.RemoveBaseFeatureIDs(ids...)
	return epu
}

// RemoveBaseFeatures removes "base_features" edges to Feature entities.
func (epu *EntitlementPlanUpdate) RemoveBaseFeatures(f ...*Feature) *EntitlementPlanUpdate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return epu.RemoveBaseFeatureIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (epu *EntitlementPlanUpdate) ClearEvents() *EntitlementPlanUpdate {
	epu.mutation.ClearEvents()
	return epu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (epu *EntitlementPlanUpdate) RemoveEventIDs(ids ...string) *EntitlementPlanUpdate {
	epu.mutation.RemoveEventIDs(ids...)
	return epu
}

// RemoveEvents removes "events" edges to Event entities.
func (epu *EntitlementPlanUpdate) RemoveEvents(e ...*Event) *EntitlementPlanUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemoveEventIDs(ids...)
}

// ClearFeatures clears all "features" edges to the EntitlementPlanFeature entity.
func (epu *EntitlementPlanUpdate) ClearFeatures() *EntitlementPlanUpdate {
	epu.mutation.ClearFeatures()
	return epu
}

// RemoveFeatureIDs removes the "features" edge to EntitlementPlanFeature entities by IDs.
func (epu *EntitlementPlanUpdate) RemoveFeatureIDs(ids ...string) *EntitlementPlanUpdate {
	epu.mutation.RemoveFeatureIDs(ids...)
	return epu
}

// RemoveFeatures removes "features" edges to EntitlementPlanFeature entities.
func (epu *EntitlementPlanUpdate) RemoveFeatures(e ...*EntitlementPlanFeature) *EntitlementPlanUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epu.RemoveFeatureIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epu *EntitlementPlanUpdate) Save(ctx context.Context) (int, error) {
	if err := epu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, epu.sqlSave, epu.mutation, epu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epu *EntitlementPlanUpdate) SaveX(ctx context.Context) int {
	affected, err := epu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epu *EntitlementPlanUpdate) Exec(ctx context.Context) error {
	_, err := epu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epu *EntitlementPlanUpdate) ExecX(ctx context.Context) {
	if err := epu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epu *EntitlementPlanUpdate) defaults() error {
	if _, ok := epu.mutation.UpdatedAt(); !ok && !epu.mutation.UpdatedAtCleared() {
		if entitlementplan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplan.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplan.UpdateDefaultUpdatedAt()
		epu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epu *EntitlementPlanUpdate) check() error {
	if v, ok := epu.mutation.OwnerID(); ok {
		if err := entitlementplan.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "EntitlementPlan.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (epu *EntitlementPlanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntitlementPlanUpdate {
	epu.modifiers = append(epu.modifiers, modifiers...)
	return epu
}

func (epu *EntitlementPlanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := epu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(entitlementplan.Table, entitlementplan.Columns, sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString))
	if ps := epu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if epu.mutation.CreatedAtCleared() {
		_spec.ClearField(entitlementplan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := epu.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlementplan.FieldUpdatedAt, field.TypeTime, value)
	}
	if epu.mutation.UpdatedAtCleared() {
		_spec.ClearField(entitlementplan.FieldUpdatedAt, field.TypeTime)
	}
	if epu.mutation.CreatedByCleared() {
		_spec.ClearField(entitlementplan.FieldCreatedBy, field.TypeString)
	}
	if value, ok := epu.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlementplan.FieldUpdatedBy, field.TypeString, value)
	}
	if epu.mutation.UpdatedByCleared() {
		_spec.ClearField(entitlementplan.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := epu.mutation.DeletedAt(); ok {
		_spec.SetField(entitlementplan.FieldDeletedAt, field.TypeTime, value)
	}
	if epu.mutation.DeletedAtCleared() {
		_spec.ClearField(entitlementplan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := epu.mutation.DeletedBy(); ok {
		_spec.SetField(entitlementplan.FieldDeletedBy, field.TypeString, value)
	}
	if epu.mutation.DeletedByCleared() {
		_spec.ClearField(entitlementplan.FieldDeletedBy, field.TypeString)
	}
	if value, ok := epu.mutation.Tags(); ok {
		_spec.SetField(entitlementplan.FieldTags, field.TypeJSON, value)
	}
	if value, ok := epu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitlementplan.FieldTags, value)
		})
	}
	if epu.mutation.TagsCleared() {
		_spec.ClearField(entitlementplan.FieldTags, field.TypeJSON)
	}
	if value, ok := epu.mutation.DisplayName(); ok {
		_spec.SetField(entitlementplan.FieldDisplayName, field.TypeString, value)
	}
	if epu.mutation.DisplayNameCleared() {
		_spec.ClearField(entitlementplan.FieldDisplayName, field.TypeString)
	}
	if value, ok := epu.mutation.Description(); ok {
		_spec.SetField(entitlementplan.FieldDescription, field.TypeString, value)
	}
	if epu.mutation.DescriptionCleared() {
		_spec.ClearField(entitlementplan.FieldDescription, field.TypeString)
	}
	if value, ok := epu.mutation.Metadata(); ok {
		_spec.SetField(entitlementplan.FieldMetadata, field.TypeJSON, value)
	}
	if epu.mutation.MetadataCleared() {
		_spec.ClearField(entitlementplan.FieldMetadata, field.TypeJSON)
	}
	if epu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlementplan.OwnerTable,
			Columns: []string{entitlementplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.EntitlementPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlementplan.OwnerTable,
			Columns: []string{entitlementplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.EntitlementPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlementplan.EntitlementsTable,
			Columns: []string{entitlementplan.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.Entitlement
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedEntitlementsIDs(); len(nodes) > 0 && !epu.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlementplan.EntitlementsTable,
			Columns: []string{entitlementplan.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.EntitlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlementplan.EntitlementsTable,
			Columns: []string{entitlementplan.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.BaseFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entitlementplan.BaseFeaturesTable,
			Columns: entitlementplan.BaseFeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.EntitlementPlanFeature
		createE := &EntitlementPlanFeatureCreate{config: epu.config, mutation: newEntitlementPlanFeatureMutation(epu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedBaseFeaturesIDs(); len(nodes) > 0 && !epu.mutation.BaseFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entitlementplan.BaseFeaturesTable,
			Columns: entitlementplan.BaseFeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EntitlementPlanFeatureCreate{config: epu.config, mutation: newEntitlementPlanFeatureMutation(epu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.BaseFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entitlementplan.BaseFeaturesTable,
			Columns: entitlementplan.BaseFeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EntitlementPlanFeatureCreate{config: epu.config, mutation: newEntitlementPlanFeatureMutation(epu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplan.EventsTable,
			Columns: entitlementplan.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.EntitlementPlanEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !epu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplan.EventsTable,
			Columns: entitlementplan.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.EntitlementPlanEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplan.EventsTable,
			Columns: entitlementplan.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.EntitlementPlanEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementplan.FeaturesTable,
			Columns: []string{entitlementplan.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.EntitlementPlanFeature
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !epu.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementplan.FeaturesTable,
			Columns: []string{entitlementplan.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epu.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementplan.FeaturesTable,
			Columns: []string{entitlementplan.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epu.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = epu.schemaConfig.EntitlementPlan
	ctx = internal.NewSchemaConfigContext(ctx, epu.schemaConfig)
	_spec.AddModifiers(epu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, epu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlementplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epu.mutation.done = true
	return n, nil
}

// EntitlementPlanUpdateOne is the builder for updating a single EntitlementPlan entity.
type EntitlementPlanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EntitlementPlanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (epuo *EntitlementPlanUpdateOne) SetUpdatedAt(t time.Time) *EntitlementPlanUpdateOne {
	epuo.mutation.SetUpdatedAt(t)
	return epuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (epuo *EntitlementPlanUpdateOne) ClearUpdatedAt() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearUpdatedAt()
	return epuo
}

// SetUpdatedBy sets the "updated_by" field.
func (epuo *EntitlementPlanUpdateOne) SetUpdatedBy(s string) *EntitlementPlanUpdateOne {
	epuo.mutation.SetUpdatedBy(s)
	return epuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (epuo *EntitlementPlanUpdateOne) SetNillableUpdatedBy(s *string) *EntitlementPlanUpdateOne {
	if s != nil {
		epuo.SetUpdatedBy(*s)
	}
	return epuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (epuo *EntitlementPlanUpdateOne) ClearUpdatedBy() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearUpdatedBy()
	return epuo
}

// SetDeletedAt sets the "deleted_at" field.
func (epuo *EntitlementPlanUpdateOne) SetDeletedAt(t time.Time) *EntitlementPlanUpdateOne {
	epuo.mutation.SetDeletedAt(t)
	return epuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epuo *EntitlementPlanUpdateOne) SetNillableDeletedAt(t *time.Time) *EntitlementPlanUpdateOne {
	if t != nil {
		epuo.SetDeletedAt(*t)
	}
	return epuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (epuo *EntitlementPlanUpdateOne) ClearDeletedAt() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearDeletedAt()
	return epuo
}

// SetDeletedBy sets the "deleted_by" field.
func (epuo *EntitlementPlanUpdateOne) SetDeletedBy(s string) *EntitlementPlanUpdateOne {
	epuo.mutation.SetDeletedBy(s)
	return epuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (epuo *EntitlementPlanUpdateOne) SetNillableDeletedBy(s *string) *EntitlementPlanUpdateOne {
	if s != nil {
		epuo.SetDeletedBy(*s)
	}
	return epuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (epuo *EntitlementPlanUpdateOne) ClearDeletedBy() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearDeletedBy()
	return epuo
}

// SetTags sets the "tags" field.
func (epuo *EntitlementPlanUpdateOne) SetTags(s []string) *EntitlementPlanUpdateOne {
	epuo.mutation.SetTags(s)
	return epuo
}

// AppendTags appends s to the "tags" field.
func (epuo *EntitlementPlanUpdateOne) AppendTags(s []string) *EntitlementPlanUpdateOne {
	epuo.mutation.AppendTags(s)
	return epuo
}

// ClearTags clears the value of the "tags" field.
func (epuo *EntitlementPlanUpdateOne) ClearTags() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearTags()
	return epuo
}

// SetOwnerID sets the "owner_id" field.
func (epuo *EntitlementPlanUpdateOne) SetOwnerID(s string) *EntitlementPlanUpdateOne {
	epuo.mutation.SetOwnerID(s)
	return epuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (epuo *EntitlementPlanUpdateOne) SetNillableOwnerID(s *string) *EntitlementPlanUpdateOne {
	if s != nil {
		epuo.SetOwnerID(*s)
	}
	return epuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (epuo *EntitlementPlanUpdateOne) ClearOwnerID() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearOwnerID()
	return epuo
}

// SetDisplayName sets the "display_name" field.
func (epuo *EntitlementPlanUpdateOne) SetDisplayName(s string) *EntitlementPlanUpdateOne {
	epuo.mutation.SetDisplayName(s)
	return epuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (epuo *EntitlementPlanUpdateOne) SetNillableDisplayName(s *string) *EntitlementPlanUpdateOne {
	if s != nil {
		epuo.SetDisplayName(*s)
	}
	return epuo
}

// ClearDisplayName clears the value of the "display_name" field.
func (epuo *EntitlementPlanUpdateOne) ClearDisplayName() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearDisplayName()
	return epuo
}

// SetDescription sets the "description" field.
func (epuo *EntitlementPlanUpdateOne) SetDescription(s string) *EntitlementPlanUpdateOne {
	epuo.mutation.SetDescription(s)
	return epuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (epuo *EntitlementPlanUpdateOne) SetNillableDescription(s *string) *EntitlementPlanUpdateOne {
	if s != nil {
		epuo.SetDescription(*s)
	}
	return epuo
}

// ClearDescription clears the value of the "description" field.
func (epuo *EntitlementPlanUpdateOne) ClearDescription() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearDescription()
	return epuo
}

// SetMetadata sets the "metadata" field.
func (epuo *EntitlementPlanUpdateOne) SetMetadata(m map[string]interface{}) *EntitlementPlanUpdateOne {
	epuo.mutation.SetMetadata(m)
	return epuo
}

// ClearMetadata clears the value of the "metadata" field.
func (epuo *EntitlementPlanUpdateOne) ClearMetadata() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearMetadata()
	return epuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (epuo *EntitlementPlanUpdateOne) SetOwner(o *Organization) *EntitlementPlanUpdateOne {
	return epuo.SetOwnerID(o.ID)
}

// AddEntitlementIDs adds the "entitlements" edge to the Entitlement entity by IDs.
func (epuo *EntitlementPlanUpdateOne) AddEntitlementIDs(ids ...string) *EntitlementPlanUpdateOne {
	epuo.mutation.AddEntitlementIDs(ids...)
	return epuo
}

// AddEntitlements adds the "entitlements" edges to the Entitlement entity.
func (epuo *EntitlementPlanUpdateOne) AddEntitlements(e ...*Entitlement) *EntitlementPlanUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddEntitlementIDs(ids...)
}

// AddBaseFeatureIDs adds the "base_features" edge to the Feature entity by IDs.
func (epuo *EntitlementPlanUpdateOne) AddBaseFeatureIDs(ids ...string) *EntitlementPlanUpdateOne {
	epuo.mutation.AddBaseFeatureIDs(ids...)
	return epuo
}

// AddBaseFeatures adds the "base_features" edges to the Feature entity.
func (epuo *EntitlementPlanUpdateOne) AddBaseFeatures(f ...*Feature) *EntitlementPlanUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return epuo.AddBaseFeatureIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (epuo *EntitlementPlanUpdateOne) AddEventIDs(ids ...string) *EntitlementPlanUpdateOne {
	epuo.mutation.AddEventIDs(ids...)
	return epuo
}

// AddEvents adds the "events" edges to the Event entity.
func (epuo *EntitlementPlanUpdateOne) AddEvents(e ...*Event) *EntitlementPlanUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddEventIDs(ids...)
}

// AddFeatureIDs adds the "features" edge to the EntitlementPlanFeature entity by IDs.
func (epuo *EntitlementPlanUpdateOne) AddFeatureIDs(ids ...string) *EntitlementPlanUpdateOne {
	epuo.mutation.AddFeatureIDs(ids...)
	return epuo
}

// AddFeatures adds the "features" edges to the EntitlementPlanFeature entity.
func (epuo *EntitlementPlanUpdateOne) AddFeatures(e ...*EntitlementPlanFeature) *EntitlementPlanUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.AddFeatureIDs(ids...)
}

// Mutation returns the EntitlementPlanMutation object of the builder.
func (epuo *EntitlementPlanUpdateOne) Mutation() *EntitlementPlanMutation {
	return epuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (epuo *EntitlementPlanUpdateOne) ClearOwner() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearOwner()
	return epuo
}

// ClearEntitlements clears all "entitlements" edges to the Entitlement entity.
func (epuo *EntitlementPlanUpdateOne) ClearEntitlements() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearEntitlements()
	return epuo
}

// RemoveEntitlementIDs removes the "entitlements" edge to Entitlement entities by IDs.
func (epuo *EntitlementPlanUpdateOne) RemoveEntitlementIDs(ids ...string) *EntitlementPlanUpdateOne {
	epuo.mutation.RemoveEntitlementIDs(ids...)
	return epuo
}

// RemoveEntitlements removes "entitlements" edges to Entitlement entities.
func (epuo *EntitlementPlanUpdateOne) RemoveEntitlements(e ...*Entitlement) *EntitlementPlanUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemoveEntitlementIDs(ids...)
}

// ClearBaseFeatures clears all "base_features" edges to the Feature entity.
func (epuo *EntitlementPlanUpdateOne) ClearBaseFeatures() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearBaseFeatures()
	return epuo
}

// RemoveBaseFeatureIDs removes the "base_features" edge to Feature entities by IDs.
func (epuo *EntitlementPlanUpdateOne) RemoveBaseFeatureIDs(ids ...string) *EntitlementPlanUpdateOne {
	epuo.mutation.RemoveBaseFeatureIDs(ids...)
	return epuo
}

// RemoveBaseFeatures removes "base_features" edges to Feature entities.
func (epuo *EntitlementPlanUpdateOne) RemoveBaseFeatures(f ...*Feature) *EntitlementPlanUpdateOne {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return epuo.RemoveBaseFeatureIDs(ids...)
}

// ClearEvents clears all "events" edges to the Event entity.
func (epuo *EntitlementPlanUpdateOne) ClearEvents() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearEvents()
	return epuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (epuo *EntitlementPlanUpdateOne) RemoveEventIDs(ids ...string) *EntitlementPlanUpdateOne {
	epuo.mutation.RemoveEventIDs(ids...)
	return epuo
}

// RemoveEvents removes "events" edges to Event entities.
func (epuo *EntitlementPlanUpdateOne) RemoveEvents(e ...*Event) *EntitlementPlanUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemoveEventIDs(ids...)
}

// ClearFeatures clears all "features" edges to the EntitlementPlanFeature entity.
func (epuo *EntitlementPlanUpdateOne) ClearFeatures() *EntitlementPlanUpdateOne {
	epuo.mutation.ClearFeatures()
	return epuo
}

// RemoveFeatureIDs removes the "features" edge to EntitlementPlanFeature entities by IDs.
func (epuo *EntitlementPlanUpdateOne) RemoveFeatureIDs(ids ...string) *EntitlementPlanUpdateOne {
	epuo.mutation.RemoveFeatureIDs(ids...)
	return epuo
}

// RemoveFeatures removes "features" edges to EntitlementPlanFeature entities.
func (epuo *EntitlementPlanUpdateOne) RemoveFeatures(e ...*EntitlementPlanFeature) *EntitlementPlanUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epuo.RemoveFeatureIDs(ids...)
}

// Where appends a list predicates to the EntitlementPlanUpdate builder.
func (epuo *EntitlementPlanUpdateOne) Where(ps ...predicate.EntitlementPlan) *EntitlementPlanUpdateOne {
	epuo.mutation.Where(ps...)
	return epuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epuo *EntitlementPlanUpdateOne) Select(field string, fields ...string) *EntitlementPlanUpdateOne {
	epuo.fields = append([]string{field}, fields...)
	return epuo
}

// Save executes the query and returns the updated EntitlementPlan entity.
func (epuo *EntitlementPlanUpdateOne) Save(ctx context.Context) (*EntitlementPlan, error) {
	if err := epuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, epuo.sqlSave, epuo.mutation, epuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epuo *EntitlementPlanUpdateOne) SaveX(ctx context.Context) *EntitlementPlan {
	node, err := epuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epuo *EntitlementPlanUpdateOne) Exec(ctx context.Context) error {
	_, err := epuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epuo *EntitlementPlanUpdateOne) ExecX(ctx context.Context) {
	if err := epuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epuo *EntitlementPlanUpdateOne) defaults() error {
	if _, ok := epuo.mutation.UpdatedAt(); !ok && !epuo.mutation.UpdatedAtCleared() {
		if entitlementplan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplan.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplan.UpdateDefaultUpdatedAt()
		epuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epuo *EntitlementPlanUpdateOne) check() error {
	if v, ok := epuo.mutation.OwnerID(); ok {
		if err := entitlementplan.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "EntitlementPlan.owner_id": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (epuo *EntitlementPlanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntitlementPlanUpdateOne {
	epuo.modifiers = append(epuo.modifiers, modifiers...)
	return epuo
}

func (epuo *EntitlementPlanUpdateOne) sqlSave(ctx context.Context) (_node *EntitlementPlan, err error) {
	if err := epuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entitlementplan.Table, entitlementplan.Columns, sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString))
	id, ok := epuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "EntitlementPlan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitlementplan.FieldID)
		for _, f := range fields {
			if !entitlementplan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != entitlementplan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if epuo.mutation.CreatedAtCleared() {
		_spec.ClearField(entitlementplan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := epuo.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlementplan.FieldUpdatedAt, field.TypeTime, value)
	}
	if epuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(entitlementplan.FieldUpdatedAt, field.TypeTime)
	}
	if epuo.mutation.CreatedByCleared() {
		_spec.ClearField(entitlementplan.FieldCreatedBy, field.TypeString)
	}
	if value, ok := epuo.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlementplan.FieldUpdatedBy, field.TypeString, value)
	}
	if epuo.mutation.UpdatedByCleared() {
		_spec.ClearField(entitlementplan.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := epuo.mutation.DeletedAt(); ok {
		_spec.SetField(entitlementplan.FieldDeletedAt, field.TypeTime, value)
	}
	if epuo.mutation.DeletedAtCleared() {
		_spec.ClearField(entitlementplan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := epuo.mutation.DeletedBy(); ok {
		_spec.SetField(entitlementplan.FieldDeletedBy, field.TypeString, value)
	}
	if epuo.mutation.DeletedByCleared() {
		_spec.ClearField(entitlementplan.FieldDeletedBy, field.TypeString)
	}
	if value, ok := epuo.mutation.Tags(); ok {
		_spec.SetField(entitlementplan.FieldTags, field.TypeJSON, value)
	}
	if value, ok := epuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitlementplan.FieldTags, value)
		})
	}
	if epuo.mutation.TagsCleared() {
		_spec.ClearField(entitlementplan.FieldTags, field.TypeJSON)
	}
	if value, ok := epuo.mutation.DisplayName(); ok {
		_spec.SetField(entitlementplan.FieldDisplayName, field.TypeString, value)
	}
	if epuo.mutation.DisplayNameCleared() {
		_spec.ClearField(entitlementplan.FieldDisplayName, field.TypeString)
	}
	if value, ok := epuo.mutation.Description(); ok {
		_spec.SetField(entitlementplan.FieldDescription, field.TypeString, value)
	}
	if epuo.mutation.DescriptionCleared() {
		_spec.ClearField(entitlementplan.FieldDescription, field.TypeString)
	}
	if value, ok := epuo.mutation.Metadata(); ok {
		_spec.SetField(entitlementplan.FieldMetadata, field.TypeJSON, value)
	}
	if epuo.mutation.MetadataCleared() {
		_spec.ClearField(entitlementplan.FieldMetadata, field.TypeJSON)
	}
	if epuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlementplan.OwnerTable,
			Columns: []string{entitlementplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.EntitlementPlan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlementplan.OwnerTable,
			Columns: []string{entitlementplan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.EntitlementPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlementplan.EntitlementsTable,
			Columns: []string{entitlementplan.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.Entitlement
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedEntitlementsIDs(); len(nodes) > 0 && !epuo.mutation.EntitlementsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlementplan.EntitlementsTable,
			Columns: []string{entitlementplan.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.EntitlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitlementplan.EntitlementsTable,
			Columns: []string{entitlementplan.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.BaseFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entitlementplan.BaseFeaturesTable,
			Columns: entitlementplan.BaseFeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.EntitlementPlanFeature
		createE := &EntitlementPlanFeatureCreate{config: epuo.config, mutation: newEntitlementPlanFeatureMutation(epuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedBaseFeaturesIDs(); len(nodes) > 0 && !epuo.mutation.BaseFeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entitlementplan.BaseFeaturesTable,
			Columns: entitlementplan.BaseFeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EntitlementPlanFeatureCreate{config: epuo.config, mutation: newEntitlementPlanFeatureMutation(epuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.BaseFeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   entitlementplan.BaseFeaturesTable,
			Columns: entitlementplan.BaseFeaturesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &EntitlementPlanFeatureCreate{config: epuo.config, mutation: newEntitlementPlanFeatureMutation(epuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplan.EventsTable,
			Columns: entitlementplan.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.EntitlementPlanEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !epuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplan.EventsTable,
			Columns: entitlementplan.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.EntitlementPlanEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplan.EventsTable,
			Columns: entitlementplan.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.EntitlementPlanEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epuo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementplan.FeaturesTable,
			Columns: []string{entitlementplan.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.EntitlementPlanFeature
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.RemovedFeaturesIDs(); len(nodes) > 0 && !epuo.mutation.FeaturesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementplan.FeaturesTable,
			Columns: []string{entitlementplan.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epuo.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   entitlementplan.FeaturesTable,
			Columns: []string{entitlementplan.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = epuo.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = epuo.schemaConfig.EntitlementPlan
	ctx = internal.NewSchemaConfigContext(ctx, epuo.schemaConfig)
	_spec.AddModifiers(epuo.modifiers...)
	_node = &EntitlementPlan{config: epuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlementplan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epuo.mutation.done = true
	return _node, nil
}
