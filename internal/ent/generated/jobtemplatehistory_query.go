// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplatehistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// JobTemplateHistoryQuery is the builder for querying JobTemplateHistory entities.
type JobTemplateHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []jobtemplatehistory.OrderOption
	inters     []Interceptor
	predicates []predicate.JobTemplateHistory
	loadTotal  []func(context.Context, []*JobTemplateHistory) error
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the JobTemplateHistoryQuery builder.
func (jthq *JobTemplateHistoryQuery) Where(ps ...predicate.JobTemplateHistory) *JobTemplateHistoryQuery {
	jthq.predicates = append(jthq.predicates, ps...)
	return jthq
}

// Limit the number of records to be returned by this query.
func (jthq *JobTemplateHistoryQuery) Limit(limit int) *JobTemplateHistoryQuery {
	jthq.ctx.Limit = &limit
	return jthq
}

// Offset to start from.
func (jthq *JobTemplateHistoryQuery) Offset(offset int) *JobTemplateHistoryQuery {
	jthq.ctx.Offset = &offset
	return jthq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (jthq *JobTemplateHistoryQuery) Unique(unique bool) *JobTemplateHistoryQuery {
	jthq.ctx.Unique = &unique
	return jthq
}

// Order specifies how the records should be ordered.
func (jthq *JobTemplateHistoryQuery) Order(o ...jobtemplatehistory.OrderOption) *JobTemplateHistoryQuery {
	jthq.order = append(jthq.order, o...)
	return jthq
}

// First returns the first JobTemplateHistory entity from the query.
// Returns a *NotFoundError when no JobTemplateHistory was found.
func (jthq *JobTemplateHistoryQuery) First(ctx context.Context) (*JobTemplateHistory, error) {
	nodes, err := jthq.Limit(1).All(setContextOp(ctx, jthq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{jobtemplatehistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jthq *JobTemplateHistoryQuery) FirstX(ctx context.Context) *JobTemplateHistory {
	node, err := jthq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first JobTemplateHistory ID from the query.
// Returns a *NotFoundError when no JobTemplateHistory ID was found.
func (jthq *JobTemplateHistoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = jthq.Limit(1).IDs(setContextOp(ctx, jthq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jobtemplatehistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (jthq *JobTemplateHistoryQuery) FirstIDX(ctx context.Context) string {
	id, err := jthq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single JobTemplateHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one JobTemplateHistory entity is found.
// Returns a *NotFoundError when no JobTemplateHistory entities are found.
func (jthq *JobTemplateHistoryQuery) Only(ctx context.Context) (*JobTemplateHistory, error) {
	nodes, err := jthq.Limit(2).All(setContextOp(ctx, jthq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{jobtemplatehistory.Label}
	default:
		return nil, &NotSingularError{jobtemplatehistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jthq *JobTemplateHistoryQuery) OnlyX(ctx context.Context) *JobTemplateHistory {
	node, err := jthq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only JobTemplateHistory ID in the query.
// Returns a *NotSingularError when more than one JobTemplateHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (jthq *JobTemplateHistoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = jthq.Limit(2).IDs(setContextOp(ctx, jthq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jobtemplatehistory.Label}
	default:
		err = &NotSingularError{jobtemplatehistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (jthq *JobTemplateHistoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := jthq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JobTemplateHistories.
func (jthq *JobTemplateHistoryQuery) All(ctx context.Context) ([]*JobTemplateHistory, error) {
	ctx = setContextOp(ctx, jthq.ctx, ent.OpQueryAll)
	if err := jthq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*JobTemplateHistory, *JobTemplateHistoryQuery]()
	return withInterceptors[[]*JobTemplateHistory](ctx, jthq, qr, jthq.inters)
}

// AllX is like All, but panics if an error occurs.
func (jthq *JobTemplateHistoryQuery) AllX(ctx context.Context) []*JobTemplateHistory {
	nodes, err := jthq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of JobTemplateHistory IDs.
func (jthq *JobTemplateHistoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if jthq.ctx.Unique == nil && jthq.path != nil {
		jthq.Unique(true)
	}
	ctx = setContextOp(ctx, jthq.ctx, ent.OpQueryIDs)
	if err = jthq.Select(jobtemplatehistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jthq *JobTemplateHistoryQuery) IDsX(ctx context.Context) []string {
	ids, err := jthq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jthq *JobTemplateHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jthq.ctx, ent.OpQueryCount)
	if err := jthq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, jthq, querierCount[*JobTemplateHistoryQuery](), jthq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (jthq *JobTemplateHistoryQuery) CountX(ctx context.Context) int {
	count, err := jthq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jthq *JobTemplateHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, jthq.ctx, ent.OpQueryExist)
	switch _, err := jthq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (jthq *JobTemplateHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := jthq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the JobTemplateHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jthq *JobTemplateHistoryQuery) Clone() *JobTemplateHistoryQuery {
	if jthq == nil {
		return nil
	}
	return &JobTemplateHistoryQuery{
		config:     jthq.config,
		ctx:        jthq.ctx.Clone(),
		order:      append([]jobtemplatehistory.OrderOption{}, jthq.order...),
		inters:     append([]Interceptor{}, jthq.inters...),
		predicates: append([]predicate.JobTemplateHistory{}, jthq.predicates...),
		// clone intermediate query.
		sql:       jthq.sql.Clone(),
		path:      jthq.path,
		modifiers: append([]func(*sql.Selector){}, jthq.modifiers...),
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JobTemplateHistory.Query().
//		GroupBy(jobtemplatehistory.FieldHistoryTime).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (jthq *JobTemplateHistoryQuery) GroupBy(field string, fields ...string) *JobTemplateHistoryGroupBy {
	jthq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &JobTemplateHistoryGroupBy{build: jthq}
	grbuild.flds = &jthq.ctx.Fields
	grbuild.label = jobtemplatehistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//	}
//
//	client.JobTemplateHistory.Query().
//		Select(jobtemplatehistory.FieldHistoryTime).
//		Scan(ctx, &v)
func (jthq *JobTemplateHistoryQuery) Select(fields ...string) *JobTemplateHistorySelect {
	jthq.ctx.Fields = append(jthq.ctx.Fields, fields...)
	sbuild := &JobTemplateHistorySelect{JobTemplateHistoryQuery: jthq}
	sbuild.label = jobtemplatehistory.Label
	sbuild.flds, sbuild.scan = &jthq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a JobTemplateHistorySelect configured with the given aggregations.
func (jthq *JobTemplateHistoryQuery) Aggregate(fns ...AggregateFunc) *JobTemplateHistorySelect {
	return jthq.Select().Aggregate(fns...)
}

func (jthq *JobTemplateHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range jthq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, jthq); err != nil {
				return err
			}
		}
	}
	for _, f := range jthq.ctx.Fields {
		if !jobtemplatehistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if jthq.path != nil {
		prev, err := jthq.path(ctx)
		if err != nil {
			return err
		}
		jthq.sql = prev
	}
	if jobtemplatehistory.Policy == nil {
		return errors.New("generated: uninitialized jobtemplatehistory.Policy (forgotten import generated/runtime?)")
	}
	if err := jobtemplatehistory.Policy.EvalQuery(ctx, jthq); err != nil {
		return err
	}
	return nil
}

func (jthq *JobTemplateHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*JobTemplateHistory, error) {
	var (
		nodes = []*JobTemplateHistory{}
		_spec = jthq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*JobTemplateHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &JobTemplateHistory{config: jthq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = jthq.schemaConfig.JobTemplateHistory
	ctx = internal.NewSchemaConfigContext(ctx, jthq.schemaConfig)
	if len(jthq.modifiers) > 0 {
		_spec.Modifiers = jthq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, jthq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range jthq.loadTotal {
		if err := jthq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (jthq *JobTemplateHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jthq.querySpec()
	_spec.Node.Schema = jthq.schemaConfig.JobTemplateHistory
	ctx = internal.NewSchemaConfigContext(ctx, jthq.schemaConfig)
	if len(jthq.modifiers) > 0 {
		_spec.Modifiers = jthq.modifiers
	}
	_spec.Node.Columns = jthq.ctx.Fields
	if len(jthq.ctx.Fields) > 0 {
		_spec.Unique = jthq.ctx.Unique != nil && *jthq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, jthq.driver, _spec)
}

func (jthq *JobTemplateHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(jobtemplatehistory.Table, jobtemplatehistory.Columns, sqlgraph.NewFieldSpec(jobtemplatehistory.FieldID, field.TypeString))
	_spec.From = jthq.sql
	if unique := jthq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if jthq.path != nil {
		_spec.Unique = true
	}
	if fields := jthq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobtemplatehistory.FieldID)
		for i := range fields {
			if fields[i] != jobtemplatehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := jthq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jthq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jthq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jthq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jthq *JobTemplateHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(jthq.driver.Dialect())
	t1 := builder.Table(jobtemplatehistory.Table)
	columns := jthq.ctx.Fields
	if len(columns) == 0 {
		columns = jobtemplatehistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if jthq.sql != nil {
		selector = jthq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if jthq.ctx.Unique != nil && *jthq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(jthq.schemaConfig.JobTemplateHistory)
	ctx = internal.NewSchemaConfigContext(ctx, jthq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range jthq.modifiers {
		m(selector)
	}
	for _, p := range jthq.predicates {
		p(selector)
	}
	for _, p := range jthq.order {
		p(selector)
	}
	if offset := jthq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jthq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jthq *JobTemplateHistoryQuery) Modify(modifiers ...func(s *sql.Selector)) *JobTemplateHistorySelect {
	jthq.modifiers = append(jthq.modifiers, modifiers...)
	return jthq.Select()
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (jthq *JobTemplateHistoryQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, jthq.ctx, ent.OpQueryIDs)
	if err := jthq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return jthq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, jthq, qr, jthq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// JobTemplateHistoryGroupBy is the group-by builder for JobTemplateHistory entities.
type JobTemplateHistoryGroupBy struct {
	selector
	build *JobTemplateHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jthgb *JobTemplateHistoryGroupBy) Aggregate(fns ...AggregateFunc) *JobTemplateHistoryGroupBy {
	jthgb.fns = append(jthgb.fns, fns...)
	return jthgb
}

// Scan applies the selector query and scans the result into the given value.
func (jthgb *JobTemplateHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jthgb.build.ctx, ent.OpQueryGroupBy)
	if err := jthgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobTemplateHistoryQuery, *JobTemplateHistoryGroupBy](ctx, jthgb.build, jthgb, jthgb.build.inters, v)
}

func (jthgb *JobTemplateHistoryGroupBy) sqlScan(ctx context.Context, root *JobTemplateHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(jthgb.fns))
	for _, fn := range jthgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*jthgb.flds)+len(jthgb.fns))
		for _, f := range *jthgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*jthgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jthgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// JobTemplateHistorySelect is the builder for selecting fields of JobTemplateHistory entities.
type JobTemplateHistorySelect struct {
	*JobTemplateHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (jths *JobTemplateHistorySelect) Aggregate(fns ...AggregateFunc) *JobTemplateHistorySelect {
	jths.fns = append(jths.fns, fns...)
	return jths
}

// Scan applies the selector query and scans the result into the given value.
func (jths *JobTemplateHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, jths.ctx, ent.OpQuerySelect)
	if err := jths.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*JobTemplateHistoryQuery, *JobTemplateHistorySelect](ctx, jths.JobTemplateHistoryQuery, jths, jths.inters, v)
}

func (jths *JobTemplateHistorySelect) sqlScan(ctx context.Context, root *JobTemplateHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(jths.fns))
	for _, fn := range jths.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*jths.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := jths.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (jths *JobTemplateHistorySelect) Modify(modifiers ...func(s *sql.Selector)) *JobTemplateHistorySelect {
	jths.modifiers = append(jths.modifiers, modifiers...)
	return jths
}
