// Code generated by ent, DO NOT EDIT.

package scheduledjobhistory

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

const (
	// Label holds the string label denoting the scheduledjobhistory type in the database.
	Label = "scheduled_job_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHistoryTime holds the string denoting the history_time field in the database.
	FieldHistoryTime = "history_time"
	// FieldRef holds the string denoting the ref field in the database.
	FieldRef = "ref"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldDisplayID holds the string denoting the display_id field in the database.
	FieldDisplayID = "display_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldSystemOwned holds the string denoting the system_owned field in the database.
	FieldSystemOwned = "system_owned"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldJobType holds the string denoting the job_type field in the database.
	FieldJobType = "job_type"
	// FieldPlatform holds the string denoting the platform field in the database.
	FieldPlatform = "platform"
	// FieldScript holds the string denoting the script field in the database.
	FieldScript = "script"
	// FieldWindmillPath holds the string denoting the windmill_path field in the database.
	FieldWindmillPath = "windmill_path"
	// FieldDownloadURL holds the string denoting the download_url field in the database.
	FieldDownloadURL = "download_url"
	// FieldConfiguration holds the string denoting the configuration field in the database.
	FieldConfiguration = "configuration"
	// FieldCadence holds the string denoting the cadence field in the database.
	FieldCadence = "cadence"
	// FieldCron holds the string denoting the cron field in the database.
	FieldCron = "cron"
	// Table holds the table name of the scheduledjobhistory in the database.
	Table = "scheduled_job_history"
)

// Columns holds all SQL columns for scheduledjobhistory fields.
var Columns = []string{
	FieldID,
	FieldHistoryTime,
	FieldRef,
	FieldOperation,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldDisplayID,
	FieldTags,
	FieldOwnerID,
	FieldSystemOwned,
	FieldTitle,
	FieldDescription,
	FieldJobType,
	FieldPlatform,
	FieldScript,
	FieldWindmillPath,
	FieldDownloadURL,
	FieldConfiguration,
	FieldCadence,
	FieldCron,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [1]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultHistoryTime holds the default value on creation for the "history_time" field.
	DefaultHistoryTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultSystemOwned holds the default value on creation for the "system_owned" field.
	DefaultSystemOwned bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OperationValidator is a validator for the "operation" field enum values. It is called by the builders before save.
func OperationValidator(o history.OpType) error {
	switch o.String() {
	case "INSERT", "UPDATE", "DELETE":
		return nil
	default:
		return fmt.Errorf("scheduledjobhistory: invalid enum value for operation field: %q", o)
	}
}

const DefaultJobType enums.JobType = "SSL"

// JobTypeValidator is a validator for the "job_type" field enum values. It is called by the builders before save.
func JobTypeValidator(jt enums.JobType) error {
	switch jt.String() {
	case "SSL":
		return nil
	default:
		return fmt.Errorf("scheduledjobhistory: invalid enum value for job_type field: %q", jt)
	}
}

// PlatformValidator is a validator for the "platform" field enum values. It is called by the builders before save.
func PlatformValidator(pl enums.JobPlatformType) error {
	switch pl.String() {
	case "GO", "TS":
		return nil
	default:
		return fmt.Errorf("scheduledjobhistory: invalid enum value for platform field: %q", pl)
	}
}

// OrderOption defines the ordering options for the ScheduledJobHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHistoryTime orders the results by the history_time field.
func ByHistoryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHistoryTime, opts...).ToFunc()
}

// ByRef orders the results by the ref field.
func ByRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRef, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByDisplayID orders the results by the display_id field.
func ByDisplayID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// BySystemOwned orders the results by the system_owned field.
func BySystemOwned(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSystemOwned, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByJobType orders the results by the job_type field.
func ByJobType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobType, opts...).ToFunc()
}

// ByPlatform orders the results by the platform field.
func ByPlatform(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatform, opts...).ToFunc()
}

// ByScript orders the results by the script field.
func ByScript(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScript, opts...).ToFunc()
}

// ByWindmillPath orders the results by the windmill_path field.
func ByWindmillPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWindmillPath, opts...).ToFunc()
}

// ByDownloadURL orders the results by the download_url field.
func ByDownloadURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadURL, opts...).ToFunc()
}

// ByCron orders the results by the cron field.
func ByCron(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCron, opts...).ToFunc()
}

var (
	// history.OpType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*history.OpType)(nil)
	// history.OpType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*history.OpType)(nil)
)

var (
	// enums.JobType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.JobType)(nil)
	// enums.JobType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.JobType)(nil)
)

var (
	// enums.JobPlatformType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.JobPlatformType)(nil)
	// enums.JobPlatformType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.JobPlatformType)(nil)
)
