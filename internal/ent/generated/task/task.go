// Code generated by ent, DO NOT EDIT.

package task

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedByID holds the string denoting the created_by_id field in the database.
	FieldCreatedByID = "created_by_id"
	// FieldUpdatedByID holds the string denoting the updated_by_id field in the database.
	FieldUpdatedByID = "updated_by_id"
	// FieldCreatedByUserID holds the string denoting the created_by_user_id field in the database.
	FieldCreatedByUserID = "created_by_user_id"
	// FieldUpdatedByUserID holds the string denoting the updated_by_user_id field in the database.
	FieldUpdatedByUserID = "updated_by_user_id"
	// FieldCreatedByServiceID holds the string denoting the created_by_service_id field in the database.
	FieldCreatedByServiceID = "created_by_service_id"
	// FieldUpdatedByServiceID holds the string denoting the updated_by_service_id field in the database.
	FieldUpdatedByServiceID = "updated_by_service_id"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedByID holds the string denoting the deleted_by_id field in the database.
	FieldDeletedByID = "deleted_by_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldDetails holds the string denoting the details field in the database.
	FieldDetails = "details"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDue holds the string denoting the due field in the database.
	FieldDue = "due"
	// FieldCompleted holds the string denoting the completed field in the database.
	FieldCompleted = "completed"
	// EdgeCreatedByUser holds the string denoting the created_by_user edge name in mutations.
	EdgeCreatedByUser = "created_by_user"
	// EdgeUpdatedByUser holds the string denoting the updated_by_user edge name in mutations.
	EdgeUpdatedByUser = "updated_by_user"
	// EdgeCreatedByService holds the string denoting the created_by_service edge name in mutations.
	EdgeCreatedByService = "created_by_service"
	// EdgeUpdatedByService holds the string denoting the updated_by_service edge name in mutations.
	EdgeUpdatedByService = "updated_by_service"
	// EdgeAssigner holds the string denoting the assigner edge name in mutations.
	EdgeAssigner = "assigner"
	// EdgeAssignee holds the string denoting the assignee edge name in mutations.
	EdgeAssignee = "assignee"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// EdgeInternalPolicy holds the string denoting the internal_policy edge name in mutations.
	EdgeInternalPolicy = "internal_policy"
	// EdgeProcedure holds the string denoting the procedure edge name in mutations.
	EdgeProcedure = "procedure"
	// EdgeControl holds the string denoting the control edge name in mutations.
	EdgeControl = "control"
	// EdgeControlObjective holds the string denoting the control_objective edge name in mutations.
	EdgeControlObjective = "control_objective"
	// EdgeSubcontrol holds the string denoting the subcontrol edge name in mutations.
	EdgeSubcontrol = "subcontrol"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// CreatedByUserTable is the table that holds the created_by_user relation/edge.
	CreatedByUserTable = "tasks"
	// CreatedByUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByUserInverseTable = "users"
	// CreatedByUserColumn is the table column denoting the created_by_user relation/edge.
	CreatedByUserColumn = "created_by_user_id"
	// UpdatedByUserTable is the table that holds the updated_by_user relation/edge.
	UpdatedByUserTable = "tasks"
	// UpdatedByUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UpdatedByUserInverseTable = "users"
	// UpdatedByUserColumn is the table column denoting the updated_by_user relation/edge.
	UpdatedByUserColumn = "updated_by_user_id"
	// CreatedByServiceTable is the table that holds the created_by_service relation/edge.
	CreatedByServiceTable = "tasks"
	// CreatedByServiceInverseTable is the table name for the APIToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	CreatedByServiceInverseTable = "api_tokens"
	// CreatedByServiceColumn is the table column denoting the created_by_service relation/edge.
	CreatedByServiceColumn = "created_by_service_id"
	// UpdatedByServiceTable is the table that holds the updated_by_service relation/edge.
	UpdatedByServiceTable = "tasks"
	// UpdatedByServiceInverseTable is the table name for the APIToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	UpdatedByServiceInverseTable = "api_tokens"
	// UpdatedByServiceColumn is the table column denoting the updated_by_service relation/edge.
	UpdatedByServiceColumn = "updated_by_service_id"
	// AssignerTable is the table that holds the assigner relation/edge.
	AssignerTable = "tasks"
	// AssignerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AssignerInverseTable = "users"
	// AssignerColumn is the table column denoting the assigner relation/edge.
	AssignerColumn = "user_assigner_tasks"
	// AssigneeTable is the table that holds the assignee relation/edge.
	AssigneeTable = "tasks"
	// AssigneeInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AssigneeInverseTable = "users"
	// AssigneeColumn is the table column denoting the assignee relation/edge.
	AssigneeColumn = "user_assignee_tasks"
	// OrganizationTable is the table that holds the organization relation/edge. The primary key declared below.
	OrganizationTable = "organization_tasks"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// GroupTable is the table that holds the group relation/edge. The primary key declared below.
	GroupTable = "group_tasks"
	// GroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupInverseTable = "groups"
	// InternalPolicyTable is the table that holds the internal_policy relation/edge. The primary key declared below.
	InternalPolicyTable = "internal_policy_tasks"
	// InternalPolicyInverseTable is the table name for the InternalPolicy entity.
	// It exists in this package in order to avoid circular dependency with the "internalpolicy" package.
	InternalPolicyInverseTable = "internal_policies"
	// ProcedureTable is the table that holds the procedure relation/edge. The primary key declared below.
	ProcedureTable = "procedure_tasks"
	// ProcedureInverseTable is the table name for the Procedure entity.
	// It exists in this package in order to avoid circular dependency with the "procedure" package.
	ProcedureInverseTable = "procedures"
	// ControlTable is the table that holds the control relation/edge. The primary key declared below.
	ControlTable = "control_tasks"
	// ControlInverseTable is the table name for the Control entity.
	// It exists in this package in order to avoid circular dependency with the "control" package.
	ControlInverseTable = "controls"
	// ControlObjectiveTable is the table that holds the control_objective relation/edge. The primary key declared below.
	ControlObjectiveTable = "control_objective_tasks"
	// ControlObjectiveInverseTable is the table name for the ControlObjective entity.
	// It exists in this package in order to avoid circular dependency with the "controlobjective" package.
	ControlObjectiveInverseTable = "control_objectives"
	// SubcontrolTable is the table that holds the subcontrol relation/edge. The primary key declared below.
	SubcontrolTable = "subcontrol_tasks"
	// SubcontrolInverseTable is the table name for the Subcontrol entity.
	// It exists in this package in order to avoid circular dependency with the "subcontrol" package.
	SubcontrolInverseTable = "subcontrols"
	// ProgramTable is the table that holds the program relation/edge. The primary key declared below.
	ProgramTable = "program_tasks"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedByID,
	FieldUpdatedByID,
	FieldCreatedByUserID,
	FieldUpdatedByUserID,
	FieldCreatedByServiceID,
	FieldUpdatedByServiceID,
	FieldMappingID,
	FieldDeletedAt,
	FieldDeletedByID,
	FieldTags,
	FieldTitle,
	FieldDescription,
	FieldDetails,
	FieldStatus,
	FieldDue,
	FieldCompleted,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_assigner_tasks",
	"user_assignee_tasks",
}

var (
	// OrganizationPrimaryKey and OrganizationColumn2 are the table columns denoting the
	// primary key for the organization relation (M2M).
	OrganizationPrimaryKey = []string{"organization_id", "task_id"}
	// GroupPrimaryKey and GroupColumn2 are the table columns denoting the
	// primary key for the group relation (M2M).
	GroupPrimaryKey = []string{"group_id", "task_id"}
	// InternalPolicyPrimaryKey and InternalPolicyColumn2 are the table columns denoting the
	// primary key for the internal_policy relation (M2M).
	InternalPolicyPrimaryKey = []string{"internal_policy_id", "task_id"}
	// ProcedurePrimaryKey and ProcedureColumn2 are the table columns denoting the
	// primary key for the procedure relation (M2M).
	ProcedurePrimaryKey = []string{"procedure_id", "task_id"}
	// ControlPrimaryKey and ControlColumn2 are the table columns denoting the
	// primary key for the control relation (M2M).
	ControlPrimaryKey = []string{"control_id", "task_id"}
	// ControlObjectivePrimaryKey and ControlObjectiveColumn2 are the table columns denoting the
	// primary key for the control_objective relation (M2M).
	ControlObjectivePrimaryKey = []string{"control_objective_id", "task_id"}
	// SubcontrolPrimaryKey and SubcontrolColumn2 are the table columns denoting the
	// primary key for the subcontrol relation (M2M).
	SubcontrolPrimaryKey = []string{"subcontrol_id", "task_id"}
	// ProgramPrimaryKey and ProgramColumn2 are the table columns denoting the
	// primary key for the program relation (M2M).
	ProgramPrimaryKey = []string{"program_id", "task_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [7]ent.Hook
	Interceptors [3]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

const DefaultStatus enums.TaskStatus = "OPEN"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.TaskStatus) error {
	switch s.String() {
	case "OPEN", "IN_PROGRESS", "IN_REVIEW", "COMPLETED", "WONT_DO":
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedByID orders the results by the created_by_id field.
func ByCreatedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByID, opts...).ToFunc()
}

// ByUpdatedByID orders the results by the updated_by_id field.
func ByUpdatedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedByID, opts...).ToFunc()
}

// ByCreatedByUserID orders the results by the created_by_user_id field.
func ByCreatedByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserID, opts...).ToFunc()
}

// ByUpdatedByUserID orders the results by the updated_by_user_id field.
func ByUpdatedByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedByUserID, opts...).ToFunc()
}

// ByCreatedByServiceID orders the results by the created_by_service_id field.
func ByCreatedByServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByServiceID, opts...).ToFunc()
}

// ByUpdatedByServiceID orders the results by the updated_by_service_id field.
func ByUpdatedByServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedByServiceID, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedByID orders the results by the deleted_by_id field.
func ByDeletedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDue orders the results by the due field.
func ByDue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDue, opts...).ToFunc()
}

// ByCompleted orders the results by the completed field.
func ByCompleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompleted, opts...).ToFunc()
}

// ByCreatedByUserField orders the results by created_by_user field.
func ByCreatedByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdatedByUserField orders the results by updated_by_user field.
func ByUpdatedByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedByUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatedByServiceField orders the results by created_by_service field.
func ByCreatedByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdatedByServiceField orders the results by updated_by_service field.
func ByUpdatedByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedByServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssignerField orders the results by assigner field.
func ByAssignerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssignerStep(), sql.OrderByField(field, opts...))
	}
}

// ByAssigneeField orders the results by assignee field.
func ByAssigneeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssigneeStep(), sql.OrderByField(field, opts...))
	}
}

// ByOrganizationCount orders the results by organization count.
func ByOrganizationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrganizationStep(), opts...)
	}
}

// ByOrganization orders the results by organization terms.
func ByOrganization(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrganizationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupCount orders the results by group count.
func ByGroupCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupStep(), opts...)
	}
}

// ByGroup orders the results by group terms.
func ByGroup(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInternalPolicyCount orders the results by internal_policy count.
func ByInternalPolicyCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInternalPolicyStep(), opts...)
	}
}

// ByInternalPolicy orders the results by internal_policy terms.
func ByInternalPolicy(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalPolicyStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProcedureCount orders the results by procedure count.
func ByProcedureCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProcedureStep(), opts...)
	}
}

// ByProcedure orders the results by procedure terms.
func ByProcedure(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProcedureStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlCount orders the results by control count.
func ByControlCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlStep(), opts...)
	}
}

// ByControl orders the results by control terms.
func ByControl(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlObjectiveCount orders the results by control_objective count.
func ByControlObjectiveCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlObjectiveStep(), opts...)
	}
}

// ByControlObjective orders the results by control_objective terms.
func ByControlObjective(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlObjectiveStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubcontrolCount orders the results by subcontrol count.
func BySubcontrolCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubcontrolStep(), opts...)
	}
}

// BySubcontrol orders the results by subcontrol terms.
func BySubcontrol(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubcontrolStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramCount orders the results by program count.
func ByProgramCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramStep(), opts...)
	}
}

// ByProgram orders the results by program terms.
func ByProgram(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCreatedByUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatedByUserTable, CreatedByUserColumn),
	)
}
func newUpdatedByUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedByUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByUserTable, UpdatedByUserColumn),
	)
}
func newCreatedByServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatedByServiceTable, CreatedByServiceColumn),
	)
}
func newUpdatedByServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedByServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByServiceTable, UpdatedByServiceColumn),
	)
}
func newAssignerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssignerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AssignerTable, AssignerColumn),
	)
}
func newAssigneeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssigneeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AssigneeTable, AssigneeColumn),
	)
}
func newOrganizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrganizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OrganizationTable, OrganizationPrimaryKey...),
	)
}
func newGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GroupTable, GroupPrimaryKey...),
	)
}
func newInternalPolicyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalPolicyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, InternalPolicyTable, InternalPolicyPrimaryKey...),
	)
}
func newProcedureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProcedureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProcedureTable, ProcedurePrimaryKey...),
	)
}
func newControlStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ControlTable, ControlPrimaryKey...),
	)
}
func newControlObjectiveStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlObjectiveInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ControlObjectiveTable, ControlObjectivePrimaryKey...),
	)
}
func newSubcontrolStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubcontrolInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SubcontrolTable, SubcontrolPrimaryKey...),
	)
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProgramTable, ProgramPrimaryKey...),
	)
}

var (
	// enums.TaskStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.TaskStatus)(nil)
	// enums.TaskStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.TaskStatus)(nil)
)
