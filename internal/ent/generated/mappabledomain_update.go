// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/mappabledomain"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// MappableDomainUpdate is the builder for updating MappableDomain entities.
type MappableDomainUpdate struct {
	config
	hooks     []Hook
	mutation  *MappableDomainMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MappableDomainUpdate builder.
func (mdu *MappableDomainUpdate) Where(ps ...predicate.MappableDomain) *MappableDomainUpdate {
	mdu.mutation.Where(ps...)
	return mdu
}

// SetUpdatedAt sets the "updated_at" field.
func (mdu *MappableDomainUpdate) SetUpdatedAt(t time.Time) *MappableDomainUpdate {
	mdu.mutation.SetUpdatedAt(t)
	return mdu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mdu *MappableDomainUpdate) ClearUpdatedAt() *MappableDomainUpdate {
	mdu.mutation.ClearUpdatedAt()
	return mdu
}

// SetUpdatedBy sets the "updated_by" field.
func (mdu *MappableDomainUpdate) SetUpdatedBy(s string) *MappableDomainUpdate {
	mdu.mutation.SetUpdatedBy(s)
	return mdu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mdu *MappableDomainUpdate) SetNillableUpdatedBy(s *string) *MappableDomainUpdate {
	if s != nil {
		mdu.SetUpdatedBy(*s)
	}
	return mdu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mdu *MappableDomainUpdate) ClearUpdatedBy() *MappableDomainUpdate {
	mdu.mutation.ClearUpdatedBy()
	return mdu
}

// SetDeletedAt sets the "deleted_at" field.
func (mdu *MappableDomainUpdate) SetDeletedAt(t time.Time) *MappableDomainUpdate {
	mdu.mutation.SetDeletedAt(t)
	return mdu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mdu *MappableDomainUpdate) SetNillableDeletedAt(t *time.Time) *MappableDomainUpdate {
	if t != nil {
		mdu.SetDeletedAt(*t)
	}
	return mdu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mdu *MappableDomainUpdate) ClearDeletedAt() *MappableDomainUpdate {
	mdu.mutation.ClearDeletedAt()
	return mdu
}

// SetDeletedBy sets the "deleted_by" field.
func (mdu *MappableDomainUpdate) SetDeletedBy(s string) *MappableDomainUpdate {
	mdu.mutation.SetDeletedBy(s)
	return mdu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (mdu *MappableDomainUpdate) SetNillableDeletedBy(s *string) *MappableDomainUpdate {
	if s != nil {
		mdu.SetDeletedBy(*s)
	}
	return mdu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (mdu *MappableDomainUpdate) ClearDeletedBy() *MappableDomainUpdate {
	mdu.mutation.ClearDeletedBy()
	return mdu
}

// SetTags sets the "tags" field.
func (mdu *MappableDomainUpdate) SetTags(s []string) *MappableDomainUpdate {
	mdu.mutation.SetTags(s)
	return mdu
}

// AppendTags appends s to the "tags" field.
func (mdu *MappableDomainUpdate) AppendTags(s []string) *MappableDomainUpdate {
	mdu.mutation.AppendTags(s)
	return mdu
}

// ClearTags clears the value of the "tags" field.
func (mdu *MappableDomainUpdate) ClearTags() *MappableDomainUpdate {
	mdu.mutation.ClearTags()
	return mdu
}

// AddCustomDomainIDs adds the "custom_domains" edge to the CustomDomain entity by IDs.
func (mdu *MappableDomainUpdate) AddCustomDomainIDs(ids ...string) *MappableDomainUpdate {
	mdu.mutation.AddCustomDomainIDs(ids...)
	return mdu
}

// AddCustomDomains adds the "custom_domains" edges to the CustomDomain entity.
func (mdu *MappableDomainUpdate) AddCustomDomains(c ...*CustomDomain) *MappableDomainUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mdu.AddCustomDomainIDs(ids...)
}

// Mutation returns the MappableDomainMutation object of the builder.
func (mdu *MappableDomainUpdate) Mutation() *MappableDomainMutation {
	return mdu.mutation
}

// ClearCustomDomains clears all "custom_domains" edges to the CustomDomain entity.
func (mdu *MappableDomainUpdate) ClearCustomDomains() *MappableDomainUpdate {
	mdu.mutation.ClearCustomDomains()
	return mdu
}

// RemoveCustomDomainIDs removes the "custom_domains" edge to CustomDomain entities by IDs.
func (mdu *MappableDomainUpdate) RemoveCustomDomainIDs(ids ...string) *MappableDomainUpdate {
	mdu.mutation.RemoveCustomDomainIDs(ids...)
	return mdu
}

// RemoveCustomDomains removes "custom_domains" edges to CustomDomain entities.
func (mdu *MappableDomainUpdate) RemoveCustomDomains(c ...*CustomDomain) *MappableDomainUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mdu.RemoveCustomDomainIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mdu *MappableDomainUpdate) Save(ctx context.Context) (int, error) {
	if err := mdu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, mdu.sqlSave, mdu.mutation, mdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mdu *MappableDomainUpdate) SaveX(ctx context.Context) int {
	affected, err := mdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mdu *MappableDomainUpdate) Exec(ctx context.Context) error {
	_, err := mdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdu *MappableDomainUpdate) ExecX(ctx context.Context) {
	if err := mdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mdu *MappableDomainUpdate) defaults() error {
	if _, ok := mdu.mutation.UpdatedAt(); !ok && !mdu.mutation.UpdatedAtCleared() {
		if mappabledomain.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized mappabledomain.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := mappabledomain.UpdateDefaultUpdatedAt()
		mdu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mdu *MappableDomainUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MappableDomainUpdate {
	mdu.modifiers = append(mdu.modifiers, modifiers...)
	return mdu
}

func (mdu *MappableDomainUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mappabledomain.Table, mappabledomain.Columns, sqlgraph.NewFieldSpec(mappabledomain.FieldID, field.TypeString))
	if ps := mdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mdu.mutation.CreatedAtCleared() {
		_spec.ClearField(mappabledomain.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mdu.mutation.UpdatedAt(); ok {
		_spec.SetField(mappabledomain.FieldUpdatedAt, field.TypeTime, value)
	}
	if mdu.mutation.UpdatedAtCleared() {
		_spec.ClearField(mappabledomain.FieldUpdatedAt, field.TypeTime)
	}
	if mdu.mutation.CreatedByCleared() {
		_spec.ClearField(mappabledomain.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mdu.mutation.UpdatedBy(); ok {
		_spec.SetField(mappabledomain.FieldUpdatedBy, field.TypeString, value)
	}
	if mdu.mutation.UpdatedByCleared() {
		_spec.ClearField(mappabledomain.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := mdu.mutation.DeletedAt(); ok {
		_spec.SetField(mappabledomain.FieldDeletedAt, field.TypeTime, value)
	}
	if mdu.mutation.DeletedAtCleared() {
		_spec.ClearField(mappabledomain.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := mdu.mutation.DeletedBy(); ok {
		_spec.SetField(mappabledomain.FieldDeletedBy, field.TypeString, value)
	}
	if mdu.mutation.DeletedByCleared() {
		_spec.ClearField(mappabledomain.FieldDeletedBy, field.TypeString)
	}
	if value, ok := mdu.mutation.Tags(); ok {
		_spec.SetField(mappabledomain.FieldTags, field.TypeJSON, value)
	}
	if value, ok := mdu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mappabledomain.FieldTags, value)
		})
	}
	if mdu.mutation.TagsCleared() {
		_spec.ClearField(mappabledomain.FieldTags, field.TypeJSON)
	}
	if mdu.mutation.CustomDomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mappabledomain.CustomDomainsTable,
			Columns: []string{mappabledomain.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = mdu.schemaConfig.CustomDomain
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.RemovedCustomDomainsIDs(); len(nodes) > 0 && !mdu.mutation.CustomDomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mappabledomain.CustomDomainsTable,
			Columns: []string{mappabledomain.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = mdu.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mdu.mutation.CustomDomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mappabledomain.CustomDomainsTable,
			Columns: []string{mappabledomain.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = mdu.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mdu.schemaConfig.MappableDomain
	ctx = internal.NewSchemaConfigContext(ctx, mdu.schemaConfig)
	_spec.AddModifiers(mdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mappabledomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mdu.mutation.done = true
	return n, nil
}

// MappableDomainUpdateOne is the builder for updating a single MappableDomain entity.
type MappableDomainUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MappableDomainMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (mduo *MappableDomainUpdateOne) SetUpdatedAt(t time.Time) *MappableDomainUpdateOne {
	mduo.mutation.SetUpdatedAt(t)
	return mduo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mduo *MappableDomainUpdateOne) ClearUpdatedAt() *MappableDomainUpdateOne {
	mduo.mutation.ClearUpdatedAt()
	return mduo
}

// SetUpdatedBy sets the "updated_by" field.
func (mduo *MappableDomainUpdateOne) SetUpdatedBy(s string) *MappableDomainUpdateOne {
	mduo.mutation.SetUpdatedBy(s)
	return mduo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mduo *MappableDomainUpdateOne) SetNillableUpdatedBy(s *string) *MappableDomainUpdateOne {
	if s != nil {
		mduo.SetUpdatedBy(*s)
	}
	return mduo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (mduo *MappableDomainUpdateOne) ClearUpdatedBy() *MappableDomainUpdateOne {
	mduo.mutation.ClearUpdatedBy()
	return mduo
}

// SetDeletedAt sets the "deleted_at" field.
func (mduo *MappableDomainUpdateOne) SetDeletedAt(t time.Time) *MappableDomainUpdateOne {
	mduo.mutation.SetDeletedAt(t)
	return mduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mduo *MappableDomainUpdateOne) SetNillableDeletedAt(t *time.Time) *MappableDomainUpdateOne {
	if t != nil {
		mduo.SetDeletedAt(*t)
	}
	return mduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mduo *MappableDomainUpdateOne) ClearDeletedAt() *MappableDomainUpdateOne {
	mduo.mutation.ClearDeletedAt()
	return mduo
}

// SetDeletedBy sets the "deleted_by" field.
func (mduo *MappableDomainUpdateOne) SetDeletedBy(s string) *MappableDomainUpdateOne {
	mduo.mutation.SetDeletedBy(s)
	return mduo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (mduo *MappableDomainUpdateOne) SetNillableDeletedBy(s *string) *MappableDomainUpdateOne {
	if s != nil {
		mduo.SetDeletedBy(*s)
	}
	return mduo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (mduo *MappableDomainUpdateOne) ClearDeletedBy() *MappableDomainUpdateOne {
	mduo.mutation.ClearDeletedBy()
	return mduo
}

// SetTags sets the "tags" field.
func (mduo *MappableDomainUpdateOne) SetTags(s []string) *MappableDomainUpdateOne {
	mduo.mutation.SetTags(s)
	return mduo
}

// AppendTags appends s to the "tags" field.
func (mduo *MappableDomainUpdateOne) AppendTags(s []string) *MappableDomainUpdateOne {
	mduo.mutation.AppendTags(s)
	return mduo
}

// ClearTags clears the value of the "tags" field.
func (mduo *MappableDomainUpdateOne) ClearTags() *MappableDomainUpdateOne {
	mduo.mutation.ClearTags()
	return mduo
}

// AddCustomDomainIDs adds the "custom_domains" edge to the CustomDomain entity by IDs.
func (mduo *MappableDomainUpdateOne) AddCustomDomainIDs(ids ...string) *MappableDomainUpdateOne {
	mduo.mutation.AddCustomDomainIDs(ids...)
	return mduo
}

// AddCustomDomains adds the "custom_domains" edges to the CustomDomain entity.
func (mduo *MappableDomainUpdateOne) AddCustomDomains(c ...*CustomDomain) *MappableDomainUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mduo.AddCustomDomainIDs(ids...)
}

// Mutation returns the MappableDomainMutation object of the builder.
func (mduo *MappableDomainUpdateOne) Mutation() *MappableDomainMutation {
	return mduo.mutation
}

// ClearCustomDomains clears all "custom_domains" edges to the CustomDomain entity.
func (mduo *MappableDomainUpdateOne) ClearCustomDomains() *MappableDomainUpdateOne {
	mduo.mutation.ClearCustomDomains()
	return mduo
}

// RemoveCustomDomainIDs removes the "custom_domains" edge to CustomDomain entities by IDs.
func (mduo *MappableDomainUpdateOne) RemoveCustomDomainIDs(ids ...string) *MappableDomainUpdateOne {
	mduo.mutation.RemoveCustomDomainIDs(ids...)
	return mduo
}

// RemoveCustomDomains removes "custom_domains" edges to CustomDomain entities.
func (mduo *MappableDomainUpdateOne) RemoveCustomDomains(c ...*CustomDomain) *MappableDomainUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mduo.RemoveCustomDomainIDs(ids...)
}

// Where appends a list predicates to the MappableDomainUpdate builder.
func (mduo *MappableDomainUpdateOne) Where(ps ...predicate.MappableDomain) *MappableDomainUpdateOne {
	mduo.mutation.Where(ps...)
	return mduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mduo *MappableDomainUpdateOne) Select(field string, fields ...string) *MappableDomainUpdateOne {
	mduo.fields = append([]string{field}, fields...)
	return mduo
}

// Save executes the query and returns the updated MappableDomain entity.
func (mduo *MappableDomainUpdateOne) Save(ctx context.Context) (*MappableDomain, error) {
	if err := mduo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mduo.sqlSave, mduo.mutation, mduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mduo *MappableDomainUpdateOne) SaveX(ctx context.Context) *MappableDomain {
	node, err := mduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mduo *MappableDomainUpdateOne) Exec(ctx context.Context) error {
	_, err := mduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mduo *MappableDomainUpdateOne) ExecX(ctx context.Context) {
	if err := mduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mduo *MappableDomainUpdateOne) defaults() error {
	if _, ok := mduo.mutation.UpdatedAt(); !ok && !mduo.mutation.UpdatedAtCleared() {
		if mappabledomain.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized mappabledomain.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := mappabledomain.UpdateDefaultUpdatedAt()
		mduo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mduo *MappableDomainUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MappableDomainUpdateOne {
	mduo.modifiers = append(mduo.modifiers, modifiers...)
	return mduo
}

func (mduo *MappableDomainUpdateOne) sqlSave(ctx context.Context) (_node *MappableDomain, err error) {
	_spec := sqlgraph.NewUpdateSpec(mappabledomain.Table, mappabledomain.Columns, sqlgraph.NewFieldSpec(mappabledomain.FieldID, field.TypeString))
	id, ok := mduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "MappableDomain.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mappabledomain.FieldID)
		for _, f := range fields {
			if !mappabledomain.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != mappabledomain.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mduo.mutation.CreatedAtCleared() {
		_spec.ClearField(mappabledomain.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mduo.mutation.UpdatedAt(); ok {
		_spec.SetField(mappabledomain.FieldUpdatedAt, field.TypeTime, value)
	}
	if mduo.mutation.UpdatedAtCleared() {
		_spec.ClearField(mappabledomain.FieldUpdatedAt, field.TypeTime)
	}
	if mduo.mutation.CreatedByCleared() {
		_spec.ClearField(mappabledomain.FieldCreatedBy, field.TypeString)
	}
	if value, ok := mduo.mutation.UpdatedBy(); ok {
		_spec.SetField(mappabledomain.FieldUpdatedBy, field.TypeString, value)
	}
	if mduo.mutation.UpdatedByCleared() {
		_spec.ClearField(mappabledomain.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := mduo.mutation.DeletedAt(); ok {
		_spec.SetField(mappabledomain.FieldDeletedAt, field.TypeTime, value)
	}
	if mduo.mutation.DeletedAtCleared() {
		_spec.ClearField(mappabledomain.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := mduo.mutation.DeletedBy(); ok {
		_spec.SetField(mappabledomain.FieldDeletedBy, field.TypeString, value)
	}
	if mduo.mutation.DeletedByCleared() {
		_spec.ClearField(mappabledomain.FieldDeletedBy, field.TypeString)
	}
	if value, ok := mduo.mutation.Tags(); ok {
		_spec.SetField(mappabledomain.FieldTags, field.TypeJSON, value)
	}
	if value, ok := mduo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, mappabledomain.FieldTags, value)
		})
	}
	if mduo.mutation.TagsCleared() {
		_spec.ClearField(mappabledomain.FieldTags, field.TypeJSON)
	}
	if mduo.mutation.CustomDomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mappabledomain.CustomDomainsTable,
			Columns: []string{mappabledomain.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = mduo.schemaConfig.CustomDomain
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.RemovedCustomDomainsIDs(); len(nodes) > 0 && !mduo.mutation.CustomDomainsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mappabledomain.CustomDomainsTable,
			Columns: []string{mappabledomain.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = mduo.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mduo.mutation.CustomDomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mappabledomain.CustomDomainsTable,
			Columns: []string{mappabledomain.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = mduo.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = mduo.schemaConfig.MappableDomain
	ctx = internal.NewSchemaConfigContext(ctx, mduo.schemaConfig)
	_spec.AddModifiers(mduo.modifiers...)
	_node = &MappableDomain{config: mduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mappabledomain.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mduo.mutation.done = true
	return _node, nil
}
