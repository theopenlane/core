// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/standardhistory"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// StandardHistoryUpdate is the builder for updating StandardHistory entities.
type StandardHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *StandardHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StandardHistoryUpdate builder.
func (_u *StandardHistoryUpdate) Where(ps ...predicate.StandardHistory) *StandardHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StandardHistoryUpdate) SetUpdatedAt(v time.Time) *StandardHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *StandardHistoryUpdate) ClearUpdatedAt() *StandardHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *StandardHistoryUpdate) SetUpdatedBy(v string) *StandardHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableUpdatedBy(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *StandardHistoryUpdate) ClearUpdatedBy() *StandardHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *StandardHistoryUpdate) SetDeletedAt(v time.Time) *StandardHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableDeletedAt(v *time.Time) *StandardHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *StandardHistoryUpdate) ClearDeletedAt() *StandardHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *StandardHistoryUpdate) SetDeletedBy(v string) *StandardHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableDeletedBy(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *StandardHistoryUpdate) ClearDeletedBy() *StandardHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *StandardHistoryUpdate) SetTags(v []string) *StandardHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *StandardHistoryUpdate) AppendTags(v []string) *StandardHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *StandardHistoryUpdate) ClearTags() *StandardHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *StandardHistoryUpdate) SetRevision(v string) *StandardHistoryUpdate {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableRevision(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *StandardHistoryUpdate) ClearRevision() *StandardHistoryUpdate {
	_u.mutation.ClearRevision()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *StandardHistoryUpdate) SetOwnerID(v string) *StandardHistoryUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableOwnerID(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *StandardHistoryUpdate) ClearOwnerID() *StandardHistoryUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *StandardHistoryUpdate) SetName(v string) *StandardHistoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableName(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetShortName sets the "short_name" field.
func (_u *StandardHistoryUpdate) SetShortName(v string) *StandardHistoryUpdate {
	_u.mutation.SetShortName(v)
	return _u
}

// SetNillableShortName sets the "short_name" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableShortName(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetShortName(*v)
	}
	return _u
}

// ClearShortName clears the value of the "short_name" field.
func (_u *StandardHistoryUpdate) ClearShortName() *StandardHistoryUpdate {
	_u.mutation.ClearShortName()
	return _u
}

// SetFramework sets the "framework" field.
func (_u *StandardHistoryUpdate) SetFramework(v string) *StandardHistoryUpdate {
	_u.mutation.SetFramework(v)
	return _u
}

// SetNillableFramework sets the "framework" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableFramework(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetFramework(*v)
	}
	return _u
}

// ClearFramework clears the value of the "framework" field.
func (_u *StandardHistoryUpdate) ClearFramework() *StandardHistoryUpdate {
	_u.mutation.ClearFramework()
	return _u
}

// SetDescription sets the "description" field.
func (_u *StandardHistoryUpdate) SetDescription(v string) *StandardHistoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableDescription(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *StandardHistoryUpdate) ClearDescription() *StandardHistoryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetGoverningBodyLogoURL sets the "governing_body_logo_url" field.
func (_u *StandardHistoryUpdate) SetGoverningBodyLogoURL(v string) *StandardHistoryUpdate {
	_u.mutation.SetGoverningBodyLogoURL(v)
	return _u
}

// SetNillableGoverningBodyLogoURL sets the "governing_body_logo_url" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableGoverningBodyLogoURL(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetGoverningBodyLogoURL(*v)
	}
	return _u
}

// ClearGoverningBodyLogoURL clears the value of the "governing_body_logo_url" field.
func (_u *StandardHistoryUpdate) ClearGoverningBodyLogoURL() *StandardHistoryUpdate {
	_u.mutation.ClearGoverningBodyLogoURL()
	return _u
}

// SetGoverningBody sets the "governing_body" field.
func (_u *StandardHistoryUpdate) SetGoverningBody(v string) *StandardHistoryUpdate {
	_u.mutation.SetGoverningBody(v)
	return _u
}

// SetNillableGoverningBody sets the "governing_body" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableGoverningBody(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetGoverningBody(*v)
	}
	return _u
}

// ClearGoverningBody clears the value of the "governing_body" field.
func (_u *StandardHistoryUpdate) ClearGoverningBody() *StandardHistoryUpdate {
	_u.mutation.ClearGoverningBody()
	return _u
}

// SetDomains sets the "domains" field.
func (_u *StandardHistoryUpdate) SetDomains(v []string) *StandardHistoryUpdate {
	_u.mutation.SetDomains(v)
	return _u
}

// AppendDomains appends value to the "domains" field.
func (_u *StandardHistoryUpdate) AppendDomains(v []string) *StandardHistoryUpdate {
	_u.mutation.AppendDomains(v)
	return _u
}

// ClearDomains clears the value of the "domains" field.
func (_u *StandardHistoryUpdate) ClearDomains() *StandardHistoryUpdate {
	_u.mutation.ClearDomains()
	return _u
}

// SetLink sets the "link" field.
func (_u *StandardHistoryUpdate) SetLink(v string) *StandardHistoryUpdate {
	_u.mutation.SetLink(v)
	return _u
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableLink(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetLink(*v)
	}
	return _u
}

// ClearLink clears the value of the "link" field.
func (_u *StandardHistoryUpdate) ClearLink() *StandardHistoryUpdate {
	_u.mutation.ClearLink()
	return _u
}

// SetStatus sets the "status" field.
func (_u *StandardHistoryUpdate) SetStatus(v enums.StandardStatus) *StandardHistoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableStatus(v *enums.StandardStatus) *StandardHistoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *StandardHistoryUpdate) ClearStatus() *StandardHistoryUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *StandardHistoryUpdate) SetIsPublic(v bool) *StandardHistoryUpdate {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableIsPublic(v *bool) *StandardHistoryUpdate {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// ClearIsPublic clears the value of the "is_public" field.
func (_u *StandardHistoryUpdate) ClearIsPublic() *StandardHistoryUpdate {
	_u.mutation.ClearIsPublic()
	return _u
}

// SetFreeToUse sets the "free_to_use" field.
func (_u *StandardHistoryUpdate) SetFreeToUse(v bool) *StandardHistoryUpdate {
	_u.mutation.SetFreeToUse(v)
	return _u
}

// SetNillableFreeToUse sets the "free_to_use" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableFreeToUse(v *bool) *StandardHistoryUpdate {
	if v != nil {
		_u.SetFreeToUse(*v)
	}
	return _u
}

// ClearFreeToUse clears the value of the "free_to_use" field.
func (_u *StandardHistoryUpdate) ClearFreeToUse() *StandardHistoryUpdate {
	_u.mutation.ClearFreeToUse()
	return _u
}

// SetStandardType sets the "standard_type" field.
func (_u *StandardHistoryUpdate) SetStandardType(v string) *StandardHistoryUpdate {
	_u.mutation.SetStandardType(v)
	return _u
}

// SetNillableStandardType sets the "standard_type" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableStandardType(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetStandardType(*v)
	}
	return _u
}

// ClearStandardType clears the value of the "standard_type" field.
func (_u *StandardHistoryUpdate) ClearStandardType() *StandardHistoryUpdate {
	_u.mutation.ClearStandardType()
	return _u
}

// SetVersion sets the "version" field.
func (_u *StandardHistoryUpdate) SetVersion(v string) *StandardHistoryUpdate {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *StandardHistoryUpdate) SetNillableVersion(v *string) *StandardHistoryUpdate {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// ClearVersion clears the value of the "version" field.
func (_u *StandardHistoryUpdate) ClearVersion() *StandardHistoryUpdate {
	_u.mutation.ClearVersion()
	return _u
}

// Mutation returns the StandardHistoryMutation object of the builder.
func (_u *StandardHistoryUpdate) Mutation() *StandardHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StandardHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StandardHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StandardHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StandardHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StandardHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if standardhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized standardhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := standardhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *StandardHistoryUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := standardhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "StandardHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *StandardHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StandardHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *StandardHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(standardhistory.Table, standardhistory.Columns, sqlgraph.NewFieldSpec(standardhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(standardhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(standardhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(standardhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(standardhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(standardhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(standardhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(standardhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(standardhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(standardhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(standardhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(standardhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(standardhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, standardhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(standardhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(standardhistory.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(standardhistory.FieldRevision, field.TypeString)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(standardhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(standardhistory.FieldOwnerID, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(standardhistory.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(standardhistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ShortName(); ok {
		_spec.SetField(standardhistory.FieldShortName, field.TypeString, value)
	}
	if _u.mutation.ShortNameCleared() {
		_spec.ClearField(standardhistory.FieldShortName, field.TypeString)
	}
	if value, ok := _u.mutation.Framework(); ok {
		_spec.SetField(standardhistory.FieldFramework, field.TypeString, value)
	}
	if _u.mutation.FrameworkCleared() {
		_spec.ClearField(standardhistory.FieldFramework, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(standardhistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(standardhistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.GoverningBodyLogoURL(); ok {
		_spec.SetField(standardhistory.FieldGoverningBodyLogoURL, field.TypeString, value)
	}
	if _u.mutation.GoverningBodyLogoURLCleared() {
		_spec.ClearField(standardhistory.FieldGoverningBodyLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.GoverningBody(); ok {
		_spec.SetField(standardhistory.FieldGoverningBody, field.TypeString, value)
	}
	if _u.mutation.GoverningBodyCleared() {
		_spec.ClearField(standardhistory.FieldGoverningBody, field.TypeString)
	}
	if value, ok := _u.mutation.Domains(); ok {
		_spec.SetField(standardhistory.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, standardhistory.FieldDomains, value)
		})
	}
	if _u.mutation.DomainsCleared() {
		_spec.ClearField(standardhistory.FieldDomains, field.TypeJSON)
	}
	if value, ok := _u.mutation.Link(); ok {
		_spec.SetField(standardhistory.FieldLink, field.TypeString, value)
	}
	if _u.mutation.LinkCleared() {
		_spec.ClearField(standardhistory.FieldLink, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(standardhistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(standardhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(standardhistory.FieldIsPublic, field.TypeBool, value)
	}
	if _u.mutation.IsPublicCleared() {
		_spec.ClearField(standardhistory.FieldIsPublic, field.TypeBool)
	}
	if value, ok := _u.mutation.FreeToUse(); ok {
		_spec.SetField(standardhistory.FieldFreeToUse, field.TypeBool, value)
	}
	if _u.mutation.FreeToUseCleared() {
		_spec.ClearField(standardhistory.FieldFreeToUse, field.TypeBool)
	}
	if value, ok := _u.mutation.StandardType(); ok {
		_spec.SetField(standardhistory.FieldStandardType, field.TypeString, value)
	}
	if _u.mutation.StandardTypeCleared() {
		_spec.ClearField(standardhistory.FieldStandardType, field.TypeString)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(standardhistory.FieldVersion, field.TypeString, value)
	}
	if _u.mutation.VersionCleared() {
		_spec.ClearField(standardhistory.FieldVersion, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.StandardHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{standardhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StandardHistoryUpdateOne is the builder for updating a single StandardHistory entity.
type StandardHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StandardHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StandardHistoryUpdateOne) SetUpdatedAt(v time.Time) *StandardHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *StandardHistoryUpdateOne) ClearUpdatedAt() *StandardHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *StandardHistoryUpdateOne) SetUpdatedBy(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableUpdatedBy(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *StandardHistoryUpdateOne) ClearUpdatedBy() *StandardHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *StandardHistoryUpdateOne) SetDeletedAt(v time.Time) *StandardHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *StandardHistoryUpdateOne) ClearDeletedAt() *StandardHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *StandardHistoryUpdateOne) SetDeletedBy(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableDeletedBy(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *StandardHistoryUpdateOne) ClearDeletedBy() *StandardHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *StandardHistoryUpdateOne) SetTags(v []string) *StandardHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *StandardHistoryUpdateOne) AppendTags(v []string) *StandardHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *StandardHistoryUpdateOne) ClearTags() *StandardHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *StandardHistoryUpdateOne) SetRevision(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableRevision(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *StandardHistoryUpdateOne) ClearRevision() *StandardHistoryUpdateOne {
	_u.mutation.ClearRevision()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *StandardHistoryUpdateOne) SetOwnerID(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableOwnerID(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *StandardHistoryUpdateOne) ClearOwnerID() *StandardHistoryUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *StandardHistoryUpdateOne) SetName(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableName(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetShortName sets the "short_name" field.
func (_u *StandardHistoryUpdateOne) SetShortName(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetShortName(v)
	return _u
}

// SetNillableShortName sets the "short_name" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableShortName(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetShortName(*v)
	}
	return _u
}

// ClearShortName clears the value of the "short_name" field.
func (_u *StandardHistoryUpdateOne) ClearShortName() *StandardHistoryUpdateOne {
	_u.mutation.ClearShortName()
	return _u
}

// SetFramework sets the "framework" field.
func (_u *StandardHistoryUpdateOne) SetFramework(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetFramework(v)
	return _u
}

// SetNillableFramework sets the "framework" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableFramework(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetFramework(*v)
	}
	return _u
}

// ClearFramework clears the value of the "framework" field.
func (_u *StandardHistoryUpdateOne) ClearFramework() *StandardHistoryUpdateOne {
	_u.mutation.ClearFramework()
	return _u
}

// SetDescription sets the "description" field.
func (_u *StandardHistoryUpdateOne) SetDescription(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableDescription(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *StandardHistoryUpdateOne) ClearDescription() *StandardHistoryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetGoverningBodyLogoURL sets the "governing_body_logo_url" field.
func (_u *StandardHistoryUpdateOne) SetGoverningBodyLogoURL(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetGoverningBodyLogoURL(v)
	return _u
}

// SetNillableGoverningBodyLogoURL sets the "governing_body_logo_url" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableGoverningBodyLogoURL(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetGoverningBodyLogoURL(*v)
	}
	return _u
}

// ClearGoverningBodyLogoURL clears the value of the "governing_body_logo_url" field.
func (_u *StandardHistoryUpdateOne) ClearGoverningBodyLogoURL() *StandardHistoryUpdateOne {
	_u.mutation.ClearGoverningBodyLogoURL()
	return _u
}

// SetGoverningBody sets the "governing_body" field.
func (_u *StandardHistoryUpdateOne) SetGoverningBody(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetGoverningBody(v)
	return _u
}

// SetNillableGoverningBody sets the "governing_body" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableGoverningBody(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetGoverningBody(*v)
	}
	return _u
}

// ClearGoverningBody clears the value of the "governing_body" field.
func (_u *StandardHistoryUpdateOne) ClearGoverningBody() *StandardHistoryUpdateOne {
	_u.mutation.ClearGoverningBody()
	return _u
}

// SetDomains sets the "domains" field.
func (_u *StandardHistoryUpdateOne) SetDomains(v []string) *StandardHistoryUpdateOne {
	_u.mutation.SetDomains(v)
	return _u
}

// AppendDomains appends value to the "domains" field.
func (_u *StandardHistoryUpdateOne) AppendDomains(v []string) *StandardHistoryUpdateOne {
	_u.mutation.AppendDomains(v)
	return _u
}

// ClearDomains clears the value of the "domains" field.
func (_u *StandardHistoryUpdateOne) ClearDomains() *StandardHistoryUpdateOne {
	_u.mutation.ClearDomains()
	return _u
}

// SetLink sets the "link" field.
func (_u *StandardHistoryUpdateOne) SetLink(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetLink(v)
	return _u
}

// SetNillableLink sets the "link" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableLink(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetLink(*v)
	}
	return _u
}

// ClearLink clears the value of the "link" field.
func (_u *StandardHistoryUpdateOne) ClearLink() *StandardHistoryUpdateOne {
	_u.mutation.ClearLink()
	return _u
}

// SetStatus sets the "status" field.
func (_u *StandardHistoryUpdateOne) SetStatus(v enums.StandardStatus) *StandardHistoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableStatus(v *enums.StandardStatus) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *StandardHistoryUpdateOne) ClearStatus() *StandardHistoryUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetIsPublic sets the "is_public" field.
func (_u *StandardHistoryUpdateOne) SetIsPublic(v bool) *StandardHistoryUpdateOne {
	_u.mutation.SetIsPublic(v)
	return _u
}

// SetNillableIsPublic sets the "is_public" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableIsPublic(v *bool) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetIsPublic(*v)
	}
	return _u
}

// ClearIsPublic clears the value of the "is_public" field.
func (_u *StandardHistoryUpdateOne) ClearIsPublic() *StandardHistoryUpdateOne {
	_u.mutation.ClearIsPublic()
	return _u
}

// SetFreeToUse sets the "free_to_use" field.
func (_u *StandardHistoryUpdateOne) SetFreeToUse(v bool) *StandardHistoryUpdateOne {
	_u.mutation.SetFreeToUse(v)
	return _u
}

// SetNillableFreeToUse sets the "free_to_use" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableFreeToUse(v *bool) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetFreeToUse(*v)
	}
	return _u
}

// ClearFreeToUse clears the value of the "free_to_use" field.
func (_u *StandardHistoryUpdateOne) ClearFreeToUse() *StandardHistoryUpdateOne {
	_u.mutation.ClearFreeToUse()
	return _u
}

// SetStandardType sets the "standard_type" field.
func (_u *StandardHistoryUpdateOne) SetStandardType(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetStandardType(v)
	return _u
}

// SetNillableStandardType sets the "standard_type" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableStandardType(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetStandardType(*v)
	}
	return _u
}

// ClearStandardType clears the value of the "standard_type" field.
func (_u *StandardHistoryUpdateOne) ClearStandardType() *StandardHistoryUpdateOne {
	_u.mutation.ClearStandardType()
	return _u
}

// SetVersion sets the "version" field.
func (_u *StandardHistoryUpdateOne) SetVersion(v string) *StandardHistoryUpdateOne {
	_u.mutation.SetVersion(v)
	return _u
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (_u *StandardHistoryUpdateOne) SetNillableVersion(v *string) *StandardHistoryUpdateOne {
	if v != nil {
		_u.SetVersion(*v)
	}
	return _u
}

// ClearVersion clears the value of the "version" field.
func (_u *StandardHistoryUpdateOne) ClearVersion() *StandardHistoryUpdateOne {
	_u.mutation.ClearVersion()
	return _u
}

// Mutation returns the StandardHistoryMutation object of the builder.
func (_u *StandardHistoryUpdateOne) Mutation() *StandardHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the StandardHistoryUpdate builder.
func (_u *StandardHistoryUpdateOne) Where(ps ...predicate.StandardHistory) *StandardHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StandardHistoryUpdateOne) Select(field string, fields ...string) *StandardHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated StandardHistory entity.
func (_u *StandardHistoryUpdateOne) Save(ctx context.Context) (*StandardHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StandardHistoryUpdateOne) SaveX(ctx context.Context) *StandardHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StandardHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StandardHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StandardHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if standardhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized standardhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := standardhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *StandardHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := standardhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "StandardHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *StandardHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StandardHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *StandardHistoryUpdateOne) sqlSave(ctx context.Context) (_node *StandardHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(standardhistory.Table, standardhistory.Columns, sqlgraph.NewFieldSpec(standardhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "StandardHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, standardhistory.FieldID)
		for _, f := range fields {
			if !standardhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != standardhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(standardhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(standardhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(standardhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(standardhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(standardhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(standardhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(standardhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(standardhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(standardhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(standardhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(standardhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(standardhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, standardhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(standardhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(standardhistory.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(standardhistory.FieldRevision, field.TypeString)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(standardhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(standardhistory.FieldOwnerID, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(standardhistory.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(standardhistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.ShortName(); ok {
		_spec.SetField(standardhistory.FieldShortName, field.TypeString, value)
	}
	if _u.mutation.ShortNameCleared() {
		_spec.ClearField(standardhistory.FieldShortName, field.TypeString)
	}
	if value, ok := _u.mutation.Framework(); ok {
		_spec.SetField(standardhistory.FieldFramework, field.TypeString, value)
	}
	if _u.mutation.FrameworkCleared() {
		_spec.ClearField(standardhistory.FieldFramework, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(standardhistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(standardhistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.GoverningBodyLogoURL(); ok {
		_spec.SetField(standardhistory.FieldGoverningBodyLogoURL, field.TypeString, value)
	}
	if _u.mutation.GoverningBodyLogoURLCleared() {
		_spec.ClearField(standardhistory.FieldGoverningBodyLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.GoverningBody(); ok {
		_spec.SetField(standardhistory.FieldGoverningBody, field.TypeString, value)
	}
	if _u.mutation.GoverningBodyCleared() {
		_spec.ClearField(standardhistory.FieldGoverningBody, field.TypeString)
	}
	if value, ok := _u.mutation.Domains(); ok {
		_spec.SetField(standardhistory.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, standardhistory.FieldDomains, value)
		})
	}
	if _u.mutation.DomainsCleared() {
		_spec.ClearField(standardhistory.FieldDomains, field.TypeJSON)
	}
	if value, ok := _u.mutation.Link(); ok {
		_spec.SetField(standardhistory.FieldLink, field.TypeString, value)
	}
	if _u.mutation.LinkCleared() {
		_spec.ClearField(standardhistory.FieldLink, field.TypeString)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(standardhistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(standardhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.IsPublic(); ok {
		_spec.SetField(standardhistory.FieldIsPublic, field.TypeBool, value)
	}
	if _u.mutation.IsPublicCleared() {
		_spec.ClearField(standardhistory.FieldIsPublic, field.TypeBool)
	}
	if value, ok := _u.mutation.FreeToUse(); ok {
		_spec.SetField(standardhistory.FieldFreeToUse, field.TypeBool, value)
	}
	if _u.mutation.FreeToUseCleared() {
		_spec.ClearField(standardhistory.FieldFreeToUse, field.TypeBool)
	}
	if value, ok := _u.mutation.StandardType(); ok {
		_spec.SetField(standardhistory.FieldStandardType, field.TypeString, value)
	}
	if _u.mutation.StandardTypeCleared() {
		_spec.ClearField(standardhistory.FieldStandardType, field.TypeString)
	}
	if value, ok := _u.mutation.Version(); ok {
		_spec.SetField(standardhistory.FieldVersion, field.TypeString, value)
	}
	if _u.mutation.VersionCleared() {
		_spec.ClearField(standardhistory.FieldVersion, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.StandardHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &StandardHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{standardhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
