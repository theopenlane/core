// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupmembership"
	"github.com/theopenlane/core/internal/ent/generated/groupsetting"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// GroupQuery is the builder for querying Group entities.
type GroupQuery struct {
	config
	ctx                                         *QueryContext
	order                                       []group.OrderOption
	inters                                      []Interceptor
	predicates                                  []predicate.Group
	withOwner                                   *OrganizationQuery
	withProgramEditors                          *ProgramQuery
	withProgramBlockedGroups                    *ProgramQuery
	withProgramViewers                          *ProgramQuery
	withRiskEditors                             *RiskQuery
	withRiskBlockedGroups                       *RiskQuery
	withRiskViewers                             *RiskQuery
	withControlObjectiveEditors                 *ControlObjectiveQuery
	withControlObjectiveBlockedGroups           *ControlObjectiveQuery
	withControlObjectiveViewers                 *ControlObjectiveQuery
	withNarrativeEditors                        *NarrativeQuery
	withNarrativeBlockedGroups                  *NarrativeQuery
	withNarrativeViewers                        *NarrativeQuery
	withControlImplementationEditors            *ControlImplementationQuery
	withControlImplementationBlockedGroups      *ControlImplementationQuery
	withControlImplementationViewers            *ControlImplementationQuery
	withScanEditors                             *ScanQuery
	withScanBlockedGroups                       *ScanQuery
	withScanViewers                             *ScanQuery
	withEntityEditors                           *EntityQuery
	withEntityBlockedGroups                     *EntityQuery
	withEntityViewers                           *EntityQuery
	withProcedureEditors                        *ProcedureQuery
	withProcedureBlockedGroups                  *ProcedureQuery
	withInternalPolicyEditors                   *InternalPolicyQuery
	withInternalPolicyBlockedGroups             *InternalPolicyQuery
	withControlEditors                          *ControlQuery
	withControlBlockedGroups                    *ControlQuery
	withMappedControlEditors                    *MappedControlQuery
	withMappedControlBlockedGroups              *MappedControlQuery
	withSetting                                 *GroupSettingQuery
	withUsers                                   *UserQuery
	withEvents                                  *EventQuery
	withIntegrations                            *IntegrationQuery
	withFiles                                   *FileQuery
	withTasks                                   *TaskQuery
	withInvites                                 *InviteQuery
	withMembers                                 *GroupMembershipQuery
	withFKs                                     bool
	loadTotal                                   []func(context.Context, []*Group) error
	modifiers                                   []func(*sql.Selector)
	withNamedProgramEditors                     map[string]*ProgramQuery
	withNamedProgramBlockedGroups               map[string]*ProgramQuery
	withNamedProgramViewers                     map[string]*ProgramQuery
	withNamedRiskEditors                        map[string]*RiskQuery
	withNamedRiskBlockedGroups                  map[string]*RiskQuery
	withNamedRiskViewers                        map[string]*RiskQuery
	withNamedControlObjectiveEditors            map[string]*ControlObjectiveQuery
	withNamedControlObjectiveBlockedGroups      map[string]*ControlObjectiveQuery
	withNamedControlObjectiveViewers            map[string]*ControlObjectiveQuery
	withNamedNarrativeEditors                   map[string]*NarrativeQuery
	withNamedNarrativeBlockedGroups             map[string]*NarrativeQuery
	withNamedNarrativeViewers                   map[string]*NarrativeQuery
	withNamedControlImplementationEditors       map[string]*ControlImplementationQuery
	withNamedControlImplementationBlockedGroups map[string]*ControlImplementationQuery
	withNamedControlImplementationViewers       map[string]*ControlImplementationQuery
	withNamedScanEditors                        map[string]*ScanQuery
	withNamedScanBlockedGroups                  map[string]*ScanQuery
	withNamedScanViewers                        map[string]*ScanQuery
	withNamedEntityEditors                      map[string]*EntityQuery
	withNamedEntityBlockedGroups                map[string]*EntityQuery
	withNamedEntityViewers                      map[string]*EntityQuery
	withNamedProcedureEditors                   map[string]*ProcedureQuery
	withNamedProcedureBlockedGroups             map[string]*ProcedureQuery
	withNamedInternalPolicyEditors              map[string]*InternalPolicyQuery
	withNamedInternalPolicyBlockedGroups        map[string]*InternalPolicyQuery
	withNamedControlEditors                     map[string]*ControlQuery
	withNamedControlBlockedGroups               map[string]*ControlQuery
	withNamedMappedControlEditors               map[string]*MappedControlQuery
	withNamedMappedControlBlockedGroups         map[string]*MappedControlQuery
	withNamedUsers                              map[string]*UserQuery
	withNamedEvents                             map[string]*EventQuery
	withNamedIntegrations                       map[string]*IntegrationQuery
	withNamedFiles                              map[string]*FileQuery
	withNamedTasks                              map[string]*TaskQuery
	withNamedInvites                            map[string]*InviteQuery
	withNamedMembers                            map[string]*GroupMembershipQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GroupQuery builder.
func (_q *GroupQuery) Where(ps ...predicate.Group) *GroupQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *GroupQuery) Limit(limit int) *GroupQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *GroupQuery) Offset(offset int) *GroupQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *GroupQuery) Unique(unique bool) *GroupQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *GroupQuery) Order(o ...group.OrderOption) *GroupQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryOwner chains the current query on the "owner" edge.
func (_q *GroupQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, group.OwnerTable, group.OwnerColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgramEditors chains the current query on the "program_editors" edge.
func (_q *GroupQuery) QueryProgramEditors() *ProgramQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ProgramEditorsTable, group.ProgramEditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgramBlockedGroups chains the current query on the "program_blocked_groups" edge.
func (_q *GroupQuery) QueryProgramBlockedGroups() *ProgramQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ProgramBlockedGroupsTable, group.ProgramBlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgramViewers chains the current query on the "program_viewers" edge.
func (_q *GroupQuery) QueryProgramViewers() *ProgramQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ProgramViewersTable, group.ProgramViewersPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramViewers
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiskEditors chains the current query on the "risk_editors" edge.
func (_q *GroupQuery) QueryRiskEditors() *RiskQuery {
	query := (&RiskClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.RiskEditorsTable, group.RiskEditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.RiskEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiskBlockedGroups chains the current query on the "risk_blocked_groups" edge.
func (_q *GroupQuery) QueryRiskBlockedGroups() *RiskQuery {
	query := (&RiskClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.RiskBlockedGroupsTable, group.RiskBlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.RiskBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRiskViewers chains the current query on the "risk_viewers" edge.
func (_q *GroupQuery) QueryRiskViewers() *RiskQuery {
	query := (&RiskClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(risk.Table, risk.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.RiskViewersTable, group.RiskViewersPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.RiskViewers
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlObjectiveEditors chains the current query on the "control_objective_editors" edge.
func (_q *GroupQuery) QueryControlObjectiveEditors() *ControlObjectiveQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(controlobjective.Table, controlobjective.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ControlObjectiveEditorsTable, group.ControlObjectiveEditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.ControlObjectiveEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlObjectiveBlockedGroups chains the current query on the "control_objective_blocked_groups" edge.
func (_q *GroupQuery) QueryControlObjectiveBlockedGroups() *ControlObjectiveQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(controlobjective.Table, controlobjective.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ControlObjectiveBlockedGroupsTable, group.ControlObjectiveBlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.ControlObjectiveBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlObjectiveViewers chains the current query on the "control_objective_viewers" edge.
func (_q *GroupQuery) QueryControlObjectiveViewers() *ControlObjectiveQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(controlobjective.Table, controlobjective.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ControlObjectiveViewersTable, group.ControlObjectiveViewersPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.ControlObjectiveViewers
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNarrativeEditors chains the current query on the "narrative_editors" edge.
func (_q *GroupQuery) QueryNarrativeEditors() *NarrativeQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(narrative.Table, narrative.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.NarrativeEditorsTable, group.NarrativeEditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.NarrativeEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNarrativeBlockedGroups chains the current query on the "narrative_blocked_groups" edge.
func (_q *GroupQuery) QueryNarrativeBlockedGroups() *NarrativeQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(narrative.Table, narrative.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.NarrativeBlockedGroupsTable, group.NarrativeBlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.NarrativeBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNarrativeViewers chains the current query on the "narrative_viewers" edge.
func (_q *GroupQuery) QueryNarrativeViewers() *NarrativeQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(narrative.Table, narrative.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.NarrativeViewersTable, group.NarrativeViewersPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.NarrativeViewers
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlImplementationEditors chains the current query on the "control_implementation_editors" edge.
func (_q *GroupQuery) QueryControlImplementationEditors() *ControlImplementationQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(controlimplementation.Table, controlimplementation.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ControlImplementationEditorsTable, group.ControlImplementationEditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ControlImplementation
		step.Edge.Schema = schemaConfig.ControlImplementationEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlImplementationBlockedGroups chains the current query on the "control_implementation_blocked_groups" edge.
func (_q *GroupQuery) QueryControlImplementationBlockedGroups() *ControlImplementationQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(controlimplementation.Table, controlimplementation.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ControlImplementationBlockedGroupsTable, group.ControlImplementationBlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ControlImplementation
		step.Edge.Schema = schemaConfig.ControlImplementationBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlImplementationViewers chains the current query on the "control_implementation_viewers" edge.
func (_q *GroupQuery) QueryControlImplementationViewers() *ControlImplementationQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(controlimplementation.Table, controlimplementation.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ControlImplementationViewersTable, group.ControlImplementationViewersPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.ControlImplementation
		step.Edge.Schema = schemaConfig.ControlImplementationViewers
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScanEditors chains the current query on the "scan_editors" edge.
func (_q *GroupQuery) QueryScanEditors() *ScanQuery {
	query := (&ScanClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(scan.Table, scan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ScanEditorsTable, group.ScanEditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Scan
		step.Edge.Schema = schemaConfig.ScanEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScanBlockedGroups chains the current query on the "scan_blocked_groups" edge.
func (_q *GroupQuery) QueryScanBlockedGroups() *ScanQuery {
	query := (&ScanClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(scan.Table, scan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ScanBlockedGroupsTable, group.ScanBlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Scan
		step.Edge.Schema = schemaConfig.ScanBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryScanViewers chains the current query on the "scan_viewers" edge.
func (_q *GroupQuery) QueryScanViewers() *ScanQuery {
	query := (&ScanClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(scan.Table, scan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ScanViewersTable, group.ScanViewersPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Scan
		step.Edge.Schema = schemaConfig.ScanViewers
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntityEditors chains the current query on the "entity_editors" edge.
func (_q *GroupQuery) QueryEntityEditors() *EntityQuery {
	query := (&EntityClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(entity.Table, entity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.EntityEditorsTable, group.EntityEditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Entity
		step.Edge.Schema = schemaConfig.EntityEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntityBlockedGroups chains the current query on the "entity_blocked_groups" edge.
func (_q *GroupQuery) QueryEntityBlockedGroups() *EntityQuery {
	query := (&EntityClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(entity.Table, entity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.EntityBlockedGroupsTable, group.EntityBlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Entity
		step.Edge.Schema = schemaConfig.EntityBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntityViewers chains the current query on the "entity_viewers" edge.
func (_q *GroupQuery) QueryEntityViewers() *EntityQuery {
	query := (&EntityClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(entity.Table, entity.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.EntityViewersTable, group.EntityViewersPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Entity
		step.Edge.Schema = schemaConfig.EntityViewers
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedureEditors chains the current query on the "procedure_editors" edge.
func (_q *GroupQuery) QueryProcedureEditors() *ProcedureQuery {
	query := (&ProcedureClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ProcedureEditorsTable, group.ProcedureEditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.ProcedureEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedureBlockedGroups chains the current query on the "procedure_blocked_groups" edge.
func (_q *GroupQuery) QueryProcedureBlockedGroups() *ProcedureQuery {
	query := (&ProcedureClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ProcedureBlockedGroupsTable, group.ProcedureBlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.ProcedureBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalPolicyEditors chains the current query on the "internal_policy_editors" edge.
func (_q *GroupQuery) QueryInternalPolicyEditors() *InternalPolicyQuery {
	query := (&InternalPolicyClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(internalpolicy.Table, internalpolicy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.InternalPolicyEditorsTable, group.InternalPolicyEditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.InternalPolicy
		step.Edge.Schema = schemaConfig.InternalPolicyEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalPolicyBlockedGroups chains the current query on the "internal_policy_blocked_groups" edge.
func (_q *GroupQuery) QueryInternalPolicyBlockedGroups() *InternalPolicyQuery {
	query := (&InternalPolicyClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(internalpolicy.Table, internalpolicy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.InternalPolicyBlockedGroupsTable, group.InternalPolicyBlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.InternalPolicy
		step.Edge.Schema = schemaConfig.InternalPolicyBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlEditors chains the current query on the "control_editors" edge.
func (_q *GroupQuery) QueryControlEditors() *ControlQuery {
	query := (&ControlClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ControlEditorsTable, group.ControlEditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlBlockedGroups chains the current query on the "control_blocked_groups" edge.
func (_q *GroupQuery) QueryControlBlockedGroups() *ControlQuery {
	query := (&ControlClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.ControlBlockedGroupsTable, group.ControlBlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMappedControlEditors chains the current query on the "mapped_control_editors" edge.
func (_q *GroupQuery) QueryMappedControlEditors() *MappedControlQuery {
	query := (&MappedControlClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(mappedcontrol.Table, mappedcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.MappedControlEditorsTable, group.MappedControlEditorsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.MappedControl
		step.Edge.Schema = schemaConfig.MappedControlEditors
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMappedControlBlockedGroups chains the current query on the "mapped_control_blocked_groups" edge.
func (_q *GroupQuery) QueryMappedControlBlockedGroups() *MappedControlQuery {
	query := (&MappedControlClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(mappedcontrol.Table, mappedcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.MappedControlBlockedGroupsTable, group.MappedControlBlockedGroupsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.MappedControl
		step.Edge.Schema = schemaConfig.MappedControlBlockedGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySetting chains the current query on the "setting" edge.
func (_q *GroupQuery) QuerySetting() *GroupSettingQuery {
	query := (&GroupSettingClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(groupsetting.Table, groupsetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, group.SettingTable, group.SettingColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.GroupSetting
		step.Edge.Schema = schemaConfig.GroupSetting
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (_q *GroupQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.UsersTable, group.UsersPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.GroupMembership
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (_q *GroupQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, group.EventsTable, group.EventsPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.GroupEvents
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIntegrations chains the current query on the "integrations" edge.
func (_q *GroupQuery) QueryIntegrations() *IntegrationQuery {
	query := (&IntegrationClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(integration.Table, integration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.IntegrationsTable, group.IntegrationsColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Integration
		step.Edge.Schema = schemaConfig.Integration
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFiles chains the current query on the "files" edge.
func (_q *GroupQuery) QueryFiles() *FileQuery {
	query := (&FileClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, group.FilesTable, group.FilesPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.GroupFiles
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (_q *GroupQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, group.TasksTable, group.TasksPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.GroupTasks
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvites chains the current query on the "invites" edge.
func (_q *GroupQuery) QueryInvites() *InviteQuery {
	query := (&InviteClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.InvitesTable, group.InvitesPrimaryKey...),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.Invite
		step.Edge.Schema = schemaConfig.InviteGroups
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMembers chains the current query on the "members" edge.
func (_q *GroupQuery) QueryMembers() *GroupMembershipQuery {
	query := (&GroupMembershipClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, selector),
			sqlgraph.To(groupmembership.Table, groupmembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, group.MembersTable, group.MembersColumn),
		)
		schemaConfig := _q.schemaConfig
		step.To.Schema = schemaConfig.GroupMembership
		step.Edge.Schema = schemaConfig.GroupMembership
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Group entity from the query.
// Returns a *NotFoundError when no Group was found.
func (_q *GroupQuery) First(ctx context.Context) (*Group, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{group.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *GroupQuery) FirstX(ctx context.Context) *Group {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Group ID from the query.
// Returns a *NotFoundError when no Group ID was found.
func (_q *GroupQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{group.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *GroupQuery) FirstIDX(ctx context.Context) string {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Group entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Group entity is found.
// Returns a *NotFoundError when no Group entities are found.
func (_q *GroupQuery) Only(ctx context.Context) (*Group, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{group.Label}
	default:
		return nil, &NotSingularError{group.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *GroupQuery) OnlyX(ctx context.Context) *Group {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Group ID in the query.
// Returns a *NotSingularError when more than one Group ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *GroupQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{group.Label}
	default:
		err = &NotSingularError{group.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *GroupQuery) OnlyIDX(ctx context.Context) string {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Groups.
func (_q *GroupQuery) All(ctx context.Context) ([]*Group, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Group, *GroupQuery]()
	return withInterceptors[[]*Group](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *GroupQuery) AllX(ctx context.Context) []*Group {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Group IDs.
func (_q *GroupQuery) IDs(ctx context.Context) (ids []string, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(group.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *GroupQuery) IDsX(ctx context.Context) []string {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *GroupQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*GroupQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *GroupQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *GroupQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *GroupQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GroupQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *GroupQuery) Clone() *GroupQuery {
	if _q == nil {
		return nil
	}
	return &GroupQuery{
		config:                                 _q.config,
		ctx:                                    _q.ctx.Clone(),
		order:                                  append([]group.OrderOption{}, _q.order...),
		inters:                                 append([]Interceptor{}, _q.inters...),
		predicates:                             append([]predicate.Group{}, _q.predicates...),
		withOwner:                              _q.withOwner.Clone(),
		withProgramEditors:                     _q.withProgramEditors.Clone(),
		withProgramBlockedGroups:               _q.withProgramBlockedGroups.Clone(),
		withProgramViewers:                     _q.withProgramViewers.Clone(),
		withRiskEditors:                        _q.withRiskEditors.Clone(),
		withRiskBlockedGroups:                  _q.withRiskBlockedGroups.Clone(),
		withRiskViewers:                        _q.withRiskViewers.Clone(),
		withControlObjectiveEditors:            _q.withControlObjectiveEditors.Clone(),
		withControlObjectiveBlockedGroups:      _q.withControlObjectiveBlockedGroups.Clone(),
		withControlObjectiveViewers:            _q.withControlObjectiveViewers.Clone(),
		withNarrativeEditors:                   _q.withNarrativeEditors.Clone(),
		withNarrativeBlockedGroups:             _q.withNarrativeBlockedGroups.Clone(),
		withNarrativeViewers:                   _q.withNarrativeViewers.Clone(),
		withControlImplementationEditors:       _q.withControlImplementationEditors.Clone(),
		withControlImplementationBlockedGroups: _q.withControlImplementationBlockedGroups.Clone(),
		withControlImplementationViewers:       _q.withControlImplementationViewers.Clone(),
		withScanEditors:                        _q.withScanEditors.Clone(),
		withScanBlockedGroups:                  _q.withScanBlockedGroups.Clone(),
		withScanViewers:                        _q.withScanViewers.Clone(),
		withEntityEditors:                      _q.withEntityEditors.Clone(),
		withEntityBlockedGroups:                _q.withEntityBlockedGroups.Clone(),
		withEntityViewers:                      _q.withEntityViewers.Clone(),
		withProcedureEditors:                   _q.withProcedureEditors.Clone(),
		withProcedureBlockedGroups:             _q.withProcedureBlockedGroups.Clone(),
		withInternalPolicyEditors:              _q.withInternalPolicyEditors.Clone(),
		withInternalPolicyBlockedGroups:        _q.withInternalPolicyBlockedGroups.Clone(),
		withControlEditors:                     _q.withControlEditors.Clone(),
		withControlBlockedGroups:               _q.withControlBlockedGroups.Clone(),
		withMappedControlEditors:               _q.withMappedControlEditors.Clone(),
		withMappedControlBlockedGroups:         _q.withMappedControlBlockedGroups.Clone(),
		withSetting:                            _q.withSetting.Clone(),
		withUsers:                              _q.withUsers.Clone(),
		withEvents:                             _q.withEvents.Clone(),
		withIntegrations:                       _q.withIntegrations.Clone(),
		withFiles:                              _q.withFiles.Clone(),
		withTasks:                              _q.withTasks.Clone(),
		withInvites:                            _q.withInvites.Clone(),
		withMembers:                            _q.withMembers.Clone(),
		// clone intermediate query.
		sql:       _q.sql.Clone(),
		path:      _q.path,
		modifiers: append([]func(*sql.Selector){}, _q.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithOwner(opts ...func(*OrganizationQuery)) *GroupQuery {
	query := (&OrganizationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOwner = query
	return _q
}

// WithProgramEditors tells the query-builder to eager-load the nodes that are connected to
// the "program_editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithProgramEditors(opts ...func(*ProgramQuery)) *GroupQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProgramEditors = query
	return _q
}

// WithProgramBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "program_blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithProgramBlockedGroups(opts ...func(*ProgramQuery)) *GroupQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProgramBlockedGroups = query
	return _q
}

// WithProgramViewers tells the query-builder to eager-load the nodes that are connected to
// the "program_viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithProgramViewers(opts ...func(*ProgramQuery)) *GroupQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProgramViewers = query
	return _q
}

// WithRiskEditors tells the query-builder to eager-load the nodes that are connected to
// the "risk_editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithRiskEditors(opts ...func(*RiskQuery)) *GroupQuery {
	query := (&RiskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withRiskEditors = query
	return _q
}

// WithRiskBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "risk_blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithRiskBlockedGroups(opts ...func(*RiskQuery)) *GroupQuery {
	query := (&RiskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withRiskBlockedGroups = query
	return _q
}

// WithRiskViewers tells the query-builder to eager-load the nodes that are connected to
// the "risk_viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithRiskViewers(opts ...func(*RiskQuery)) *GroupQuery {
	query := (&RiskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withRiskViewers = query
	return _q
}

// WithControlObjectiveEditors tells the query-builder to eager-load the nodes that are connected to
// the "control_objective_editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithControlObjectiveEditors(opts ...func(*ControlObjectiveQuery)) *GroupQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlObjectiveEditors = query
	return _q
}

// WithControlObjectiveBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "control_objective_blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithControlObjectiveBlockedGroups(opts ...func(*ControlObjectiveQuery)) *GroupQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlObjectiveBlockedGroups = query
	return _q
}

// WithControlObjectiveViewers tells the query-builder to eager-load the nodes that are connected to
// the "control_objective_viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithControlObjectiveViewers(opts ...func(*ControlObjectiveQuery)) *GroupQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlObjectiveViewers = query
	return _q
}

// WithNarrativeEditors tells the query-builder to eager-load the nodes that are connected to
// the "narrative_editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNarrativeEditors(opts ...func(*NarrativeQuery)) *GroupQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withNarrativeEditors = query
	return _q
}

// WithNarrativeBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "narrative_blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNarrativeBlockedGroups(opts ...func(*NarrativeQuery)) *GroupQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withNarrativeBlockedGroups = query
	return _q
}

// WithNarrativeViewers tells the query-builder to eager-load the nodes that are connected to
// the "narrative_viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNarrativeViewers(opts ...func(*NarrativeQuery)) *GroupQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withNarrativeViewers = query
	return _q
}

// WithControlImplementationEditors tells the query-builder to eager-load the nodes that are connected to
// the "control_implementation_editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithControlImplementationEditors(opts ...func(*ControlImplementationQuery)) *GroupQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlImplementationEditors = query
	return _q
}

// WithControlImplementationBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "control_implementation_blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithControlImplementationBlockedGroups(opts ...func(*ControlImplementationQuery)) *GroupQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlImplementationBlockedGroups = query
	return _q
}

// WithControlImplementationViewers tells the query-builder to eager-load the nodes that are connected to
// the "control_implementation_viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithControlImplementationViewers(opts ...func(*ControlImplementationQuery)) *GroupQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlImplementationViewers = query
	return _q
}

// WithScanEditors tells the query-builder to eager-load the nodes that are connected to
// the "scan_editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithScanEditors(opts ...func(*ScanQuery)) *GroupQuery {
	query := (&ScanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withScanEditors = query
	return _q
}

// WithScanBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "scan_blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithScanBlockedGroups(opts ...func(*ScanQuery)) *GroupQuery {
	query := (&ScanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withScanBlockedGroups = query
	return _q
}

// WithScanViewers tells the query-builder to eager-load the nodes that are connected to
// the "scan_viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithScanViewers(opts ...func(*ScanQuery)) *GroupQuery {
	query := (&ScanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withScanViewers = query
	return _q
}

// WithEntityEditors tells the query-builder to eager-load the nodes that are connected to
// the "entity_editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithEntityEditors(opts ...func(*EntityQuery)) *GroupQuery {
	query := (&EntityClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEntityEditors = query
	return _q
}

// WithEntityBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "entity_blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithEntityBlockedGroups(opts ...func(*EntityQuery)) *GroupQuery {
	query := (&EntityClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEntityBlockedGroups = query
	return _q
}

// WithEntityViewers tells the query-builder to eager-load the nodes that are connected to
// the "entity_viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithEntityViewers(opts ...func(*EntityQuery)) *GroupQuery {
	query := (&EntityClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEntityViewers = query
	return _q
}

// WithProcedureEditors tells the query-builder to eager-load the nodes that are connected to
// the "procedure_editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithProcedureEditors(opts ...func(*ProcedureQuery)) *GroupQuery {
	query := (&ProcedureClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProcedureEditors = query
	return _q
}

// WithProcedureBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "procedure_blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithProcedureBlockedGroups(opts ...func(*ProcedureQuery)) *GroupQuery {
	query := (&ProcedureClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProcedureBlockedGroups = query
	return _q
}

// WithInternalPolicyEditors tells the query-builder to eager-load the nodes that are connected to
// the "internal_policy_editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithInternalPolicyEditors(opts ...func(*InternalPolicyQuery)) *GroupQuery {
	query := (&InternalPolicyClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withInternalPolicyEditors = query
	return _q
}

// WithInternalPolicyBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "internal_policy_blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithInternalPolicyBlockedGroups(opts ...func(*InternalPolicyQuery)) *GroupQuery {
	query := (&InternalPolicyClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withInternalPolicyBlockedGroups = query
	return _q
}

// WithControlEditors tells the query-builder to eager-load the nodes that are connected to
// the "control_editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithControlEditors(opts ...func(*ControlQuery)) *GroupQuery {
	query := (&ControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlEditors = query
	return _q
}

// WithControlBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "control_blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithControlBlockedGroups(opts ...func(*ControlQuery)) *GroupQuery {
	query := (&ControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withControlBlockedGroups = query
	return _q
}

// WithMappedControlEditors tells the query-builder to eager-load the nodes that are connected to
// the "mapped_control_editors" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithMappedControlEditors(opts ...func(*MappedControlQuery)) *GroupQuery {
	query := (&MappedControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withMappedControlEditors = query
	return _q
}

// WithMappedControlBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "mapped_control_blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithMappedControlBlockedGroups(opts ...func(*MappedControlQuery)) *GroupQuery {
	query := (&MappedControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withMappedControlBlockedGroups = query
	return _q
}

// WithSetting tells the query-builder to eager-load the nodes that are connected to
// the "setting" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithSetting(opts ...func(*GroupSettingQuery)) *GroupQuery {
	query := (&GroupSettingClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSetting = query
	return _q
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithUsers(opts ...func(*UserQuery)) *GroupQuery {
	query := (&UserClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withUsers = query
	return _q
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithEvents(opts ...func(*EventQuery)) *GroupQuery {
	query := (&EventClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withEvents = query
	return _q
}

// WithIntegrations tells the query-builder to eager-load the nodes that are connected to
// the "integrations" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithIntegrations(opts ...func(*IntegrationQuery)) *GroupQuery {
	query := (&IntegrationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withIntegrations = query
	return _q
}

// WithFiles tells the query-builder to eager-load the nodes that are connected to
// the "files" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithFiles(opts ...func(*FileQuery)) *GroupQuery {
	query := (&FileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withFiles = query
	return _q
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithTasks(opts ...func(*TaskQuery)) *GroupQuery {
	query := (&TaskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withTasks = query
	return _q
}

// WithInvites tells the query-builder to eager-load the nodes that are connected to
// the "invites" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithInvites(opts ...func(*InviteQuery)) *GroupQuery {
	query := (&InviteClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withInvites = query
	return _q
}

// WithMembers tells the query-builder to eager-load the nodes that are connected to
// the "members" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithMembers(opts ...func(*GroupMembershipQuery)) *GroupQuery {
	query := (&GroupMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withMembers = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Group.Query().
//		GroupBy(group.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (_q *GroupQuery) GroupBy(field string, fields ...string) *GroupGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GroupGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = group.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Group.Query().
//		Select(group.FieldCreatedAt).
//		Scan(ctx, &v)
func (_q *GroupQuery) Select(fields ...string) *GroupSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &GroupSelect{GroupQuery: _q}
	sbuild.label = group.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GroupSelect configured with the given aggregations.
func (_q *GroupQuery) Aggregate(fns ...AggregateFunc) *GroupSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *GroupQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !group.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	if group.Policy == nil {
		return errors.New("generated: uninitialized group.Policy (forgotten import generated/runtime?)")
	}
	if err := group.Policy.EvalQuery(ctx, _q); err != nil {
		return err
	}
	return nil
}

func (_q *GroupQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Group, error) {
	var (
		nodes       = []*Group{}
		withFKs     = _q.withFKs
		_spec       = _q.querySpec()
		loadedTypes = [38]bool{
			_q.withOwner != nil,
			_q.withProgramEditors != nil,
			_q.withProgramBlockedGroups != nil,
			_q.withProgramViewers != nil,
			_q.withRiskEditors != nil,
			_q.withRiskBlockedGroups != nil,
			_q.withRiskViewers != nil,
			_q.withControlObjectiveEditors != nil,
			_q.withControlObjectiveBlockedGroups != nil,
			_q.withControlObjectiveViewers != nil,
			_q.withNarrativeEditors != nil,
			_q.withNarrativeBlockedGroups != nil,
			_q.withNarrativeViewers != nil,
			_q.withControlImplementationEditors != nil,
			_q.withControlImplementationBlockedGroups != nil,
			_q.withControlImplementationViewers != nil,
			_q.withScanEditors != nil,
			_q.withScanBlockedGroups != nil,
			_q.withScanViewers != nil,
			_q.withEntityEditors != nil,
			_q.withEntityBlockedGroups != nil,
			_q.withEntityViewers != nil,
			_q.withProcedureEditors != nil,
			_q.withProcedureBlockedGroups != nil,
			_q.withInternalPolicyEditors != nil,
			_q.withInternalPolicyBlockedGroups != nil,
			_q.withControlEditors != nil,
			_q.withControlBlockedGroups != nil,
			_q.withMappedControlEditors != nil,
			_q.withMappedControlBlockedGroups != nil,
			_q.withSetting != nil,
			_q.withUsers != nil,
			_q.withEvents != nil,
			_q.withIntegrations != nil,
			_q.withFiles != nil,
			_q.withTasks != nil,
			_q.withInvites != nil,
			_q.withMembers != nil,
		}
	)
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, group.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Group).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Group{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = _q.schemaConfig.Group
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withOwner; query != nil {
		if err := _q.loadOwner(ctx, query, nodes, nil,
			func(n *Group, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProgramEditors; query != nil {
		if err := _q.loadProgramEditors(ctx, query, nodes,
			func(n *Group) { n.Edges.ProgramEditors = []*Program{} },
			func(n *Group, e *Program) { n.Edges.ProgramEditors = append(n.Edges.ProgramEditors, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProgramBlockedGroups; query != nil {
		if err := _q.loadProgramBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.Edges.ProgramBlockedGroups = []*Program{} },
			func(n *Group, e *Program) { n.Edges.ProgramBlockedGroups = append(n.Edges.ProgramBlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProgramViewers; query != nil {
		if err := _q.loadProgramViewers(ctx, query, nodes,
			func(n *Group) { n.Edges.ProgramViewers = []*Program{} },
			func(n *Group, e *Program) { n.Edges.ProgramViewers = append(n.Edges.ProgramViewers, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withRiskEditors; query != nil {
		if err := _q.loadRiskEditors(ctx, query, nodes,
			func(n *Group) { n.Edges.RiskEditors = []*Risk{} },
			func(n *Group, e *Risk) { n.Edges.RiskEditors = append(n.Edges.RiskEditors, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withRiskBlockedGroups; query != nil {
		if err := _q.loadRiskBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.Edges.RiskBlockedGroups = []*Risk{} },
			func(n *Group, e *Risk) { n.Edges.RiskBlockedGroups = append(n.Edges.RiskBlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withRiskViewers; query != nil {
		if err := _q.loadRiskViewers(ctx, query, nodes,
			func(n *Group) { n.Edges.RiskViewers = []*Risk{} },
			func(n *Group, e *Risk) { n.Edges.RiskViewers = append(n.Edges.RiskViewers, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlObjectiveEditors; query != nil {
		if err := _q.loadControlObjectiveEditors(ctx, query, nodes,
			func(n *Group) { n.Edges.ControlObjectiveEditors = []*ControlObjective{} },
			func(n *Group, e *ControlObjective) {
				n.Edges.ControlObjectiveEditors = append(n.Edges.ControlObjectiveEditors, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlObjectiveBlockedGroups; query != nil {
		if err := _q.loadControlObjectiveBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.Edges.ControlObjectiveBlockedGroups = []*ControlObjective{} },
			func(n *Group, e *ControlObjective) {
				n.Edges.ControlObjectiveBlockedGroups = append(n.Edges.ControlObjectiveBlockedGroups, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlObjectiveViewers; query != nil {
		if err := _q.loadControlObjectiveViewers(ctx, query, nodes,
			func(n *Group) { n.Edges.ControlObjectiveViewers = []*ControlObjective{} },
			func(n *Group, e *ControlObjective) {
				n.Edges.ControlObjectiveViewers = append(n.Edges.ControlObjectiveViewers, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withNarrativeEditors; query != nil {
		if err := _q.loadNarrativeEditors(ctx, query, nodes,
			func(n *Group) { n.Edges.NarrativeEditors = []*Narrative{} },
			func(n *Group, e *Narrative) { n.Edges.NarrativeEditors = append(n.Edges.NarrativeEditors, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withNarrativeBlockedGroups; query != nil {
		if err := _q.loadNarrativeBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.Edges.NarrativeBlockedGroups = []*Narrative{} },
			func(n *Group, e *Narrative) {
				n.Edges.NarrativeBlockedGroups = append(n.Edges.NarrativeBlockedGroups, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withNarrativeViewers; query != nil {
		if err := _q.loadNarrativeViewers(ctx, query, nodes,
			func(n *Group) { n.Edges.NarrativeViewers = []*Narrative{} },
			func(n *Group, e *Narrative) { n.Edges.NarrativeViewers = append(n.Edges.NarrativeViewers, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlImplementationEditors; query != nil {
		if err := _q.loadControlImplementationEditors(ctx, query, nodes,
			func(n *Group) { n.Edges.ControlImplementationEditors = []*ControlImplementation{} },
			func(n *Group, e *ControlImplementation) {
				n.Edges.ControlImplementationEditors = append(n.Edges.ControlImplementationEditors, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlImplementationBlockedGroups; query != nil {
		if err := _q.loadControlImplementationBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.Edges.ControlImplementationBlockedGroups = []*ControlImplementation{} },
			func(n *Group, e *ControlImplementation) {
				n.Edges.ControlImplementationBlockedGroups = append(n.Edges.ControlImplementationBlockedGroups, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlImplementationViewers; query != nil {
		if err := _q.loadControlImplementationViewers(ctx, query, nodes,
			func(n *Group) { n.Edges.ControlImplementationViewers = []*ControlImplementation{} },
			func(n *Group, e *ControlImplementation) {
				n.Edges.ControlImplementationViewers = append(n.Edges.ControlImplementationViewers, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withScanEditors; query != nil {
		if err := _q.loadScanEditors(ctx, query, nodes,
			func(n *Group) { n.Edges.ScanEditors = []*Scan{} },
			func(n *Group, e *Scan) { n.Edges.ScanEditors = append(n.Edges.ScanEditors, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withScanBlockedGroups; query != nil {
		if err := _q.loadScanBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.Edges.ScanBlockedGroups = []*Scan{} },
			func(n *Group, e *Scan) { n.Edges.ScanBlockedGroups = append(n.Edges.ScanBlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withScanViewers; query != nil {
		if err := _q.loadScanViewers(ctx, query, nodes,
			func(n *Group) { n.Edges.ScanViewers = []*Scan{} },
			func(n *Group, e *Scan) { n.Edges.ScanViewers = append(n.Edges.ScanViewers, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEntityEditors; query != nil {
		if err := _q.loadEntityEditors(ctx, query, nodes,
			func(n *Group) { n.Edges.EntityEditors = []*Entity{} },
			func(n *Group, e *Entity) { n.Edges.EntityEditors = append(n.Edges.EntityEditors, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEntityBlockedGroups; query != nil {
		if err := _q.loadEntityBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.Edges.EntityBlockedGroups = []*Entity{} },
			func(n *Group, e *Entity) { n.Edges.EntityBlockedGroups = append(n.Edges.EntityBlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEntityViewers; query != nil {
		if err := _q.loadEntityViewers(ctx, query, nodes,
			func(n *Group) { n.Edges.EntityViewers = []*Entity{} },
			func(n *Group, e *Entity) { n.Edges.EntityViewers = append(n.Edges.EntityViewers, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProcedureEditors; query != nil {
		if err := _q.loadProcedureEditors(ctx, query, nodes,
			func(n *Group) { n.Edges.ProcedureEditors = []*Procedure{} },
			func(n *Group, e *Procedure) { n.Edges.ProcedureEditors = append(n.Edges.ProcedureEditors, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProcedureBlockedGroups; query != nil {
		if err := _q.loadProcedureBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.Edges.ProcedureBlockedGroups = []*Procedure{} },
			func(n *Group, e *Procedure) {
				n.Edges.ProcedureBlockedGroups = append(n.Edges.ProcedureBlockedGroups, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withInternalPolicyEditors; query != nil {
		if err := _q.loadInternalPolicyEditors(ctx, query, nodes,
			func(n *Group) { n.Edges.InternalPolicyEditors = []*InternalPolicy{} },
			func(n *Group, e *InternalPolicy) {
				n.Edges.InternalPolicyEditors = append(n.Edges.InternalPolicyEditors, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withInternalPolicyBlockedGroups; query != nil {
		if err := _q.loadInternalPolicyBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.Edges.InternalPolicyBlockedGroups = []*InternalPolicy{} },
			func(n *Group, e *InternalPolicy) {
				n.Edges.InternalPolicyBlockedGroups = append(n.Edges.InternalPolicyBlockedGroups, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlEditors; query != nil {
		if err := _q.loadControlEditors(ctx, query, nodes,
			func(n *Group) { n.Edges.ControlEditors = []*Control{} },
			func(n *Group, e *Control) { n.Edges.ControlEditors = append(n.Edges.ControlEditors, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withControlBlockedGroups; query != nil {
		if err := _q.loadControlBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.Edges.ControlBlockedGroups = []*Control{} },
			func(n *Group, e *Control) { n.Edges.ControlBlockedGroups = append(n.Edges.ControlBlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withMappedControlEditors; query != nil {
		if err := _q.loadMappedControlEditors(ctx, query, nodes,
			func(n *Group) { n.Edges.MappedControlEditors = []*MappedControl{} },
			func(n *Group, e *MappedControl) {
				n.Edges.MappedControlEditors = append(n.Edges.MappedControlEditors, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withMappedControlBlockedGroups; query != nil {
		if err := _q.loadMappedControlBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.Edges.MappedControlBlockedGroups = []*MappedControl{} },
			func(n *Group, e *MappedControl) {
				n.Edges.MappedControlBlockedGroups = append(n.Edges.MappedControlBlockedGroups, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withSetting; query != nil {
		if err := _q.loadSetting(ctx, query, nodes, nil,
			func(n *Group, e *GroupSetting) { n.Edges.Setting = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withUsers; query != nil {
		if err := _q.loadUsers(ctx, query, nodes,
			func(n *Group) { n.Edges.Users = []*User{} },
			func(n *Group, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withEvents; query != nil {
		if err := _q.loadEvents(ctx, query, nodes,
			func(n *Group) { n.Edges.Events = []*Event{} },
			func(n *Group, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withIntegrations; query != nil {
		if err := _q.loadIntegrations(ctx, query, nodes,
			func(n *Group) { n.Edges.Integrations = []*Integration{} },
			func(n *Group, e *Integration) { n.Edges.Integrations = append(n.Edges.Integrations, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withFiles; query != nil {
		if err := _q.loadFiles(ctx, query, nodes,
			func(n *Group) { n.Edges.Files = []*File{} },
			func(n *Group, e *File) { n.Edges.Files = append(n.Edges.Files, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withTasks; query != nil {
		if err := _q.loadTasks(ctx, query, nodes,
			func(n *Group) { n.Edges.Tasks = []*Task{} },
			func(n *Group, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withInvites; query != nil {
		if err := _q.loadInvites(ctx, query, nodes,
			func(n *Group) { n.Edges.Invites = []*Invite{} },
			func(n *Group, e *Invite) { n.Edges.Invites = append(n.Edges.Invites, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withMembers; query != nil {
		if err := _q.loadMembers(ctx, query, nodes,
			func(n *Group) { n.Edges.Members = []*GroupMembership{} },
			func(n *Group, e *GroupMembership) { n.Edges.Members = append(n.Edges.Members, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedProgramEditors {
		if err := _q.loadProgramEditors(ctx, query, nodes,
			func(n *Group) { n.appendNamedProgramEditors(name) },
			func(n *Group, e *Program) { n.appendNamedProgramEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedProgramBlockedGroups {
		if err := _q.loadProgramBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.appendNamedProgramBlockedGroups(name) },
			func(n *Group, e *Program) { n.appendNamedProgramBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedProgramViewers {
		if err := _q.loadProgramViewers(ctx, query, nodes,
			func(n *Group) { n.appendNamedProgramViewers(name) },
			func(n *Group, e *Program) { n.appendNamedProgramViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedRiskEditors {
		if err := _q.loadRiskEditors(ctx, query, nodes,
			func(n *Group) { n.appendNamedRiskEditors(name) },
			func(n *Group, e *Risk) { n.appendNamedRiskEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedRiskBlockedGroups {
		if err := _q.loadRiskBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.appendNamedRiskBlockedGroups(name) },
			func(n *Group, e *Risk) { n.appendNamedRiskBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedRiskViewers {
		if err := _q.loadRiskViewers(ctx, query, nodes,
			func(n *Group) { n.appendNamedRiskViewers(name) },
			func(n *Group, e *Risk) { n.appendNamedRiskViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlObjectiveEditors {
		if err := _q.loadControlObjectiveEditors(ctx, query, nodes,
			func(n *Group) { n.appendNamedControlObjectiveEditors(name) },
			func(n *Group, e *ControlObjective) { n.appendNamedControlObjectiveEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlObjectiveBlockedGroups {
		if err := _q.loadControlObjectiveBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.appendNamedControlObjectiveBlockedGroups(name) },
			func(n *Group, e *ControlObjective) { n.appendNamedControlObjectiveBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlObjectiveViewers {
		if err := _q.loadControlObjectiveViewers(ctx, query, nodes,
			func(n *Group) { n.appendNamedControlObjectiveViewers(name) },
			func(n *Group, e *ControlObjective) { n.appendNamedControlObjectiveViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedNarrativeEditors {
		if err := _q.loadNarrativeEditors(ctx, query, nodes,
			func(n *Group) { n.appendNamedNarrativeEditors(name) },
			func(n *Group, e *Narrative) { n.appendNamedNarrativeEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedNarrativeBlockedGroups {
		if err := _q.loadNarrativeBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.appendNamedNarrativeBlockedGroups(name) },
			func(n *Group, e *Narrative) { n.appendNamedNarrativeBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedNarrativeViewers {
		if err := _q.loadNarrativeViewers(ctx, query, nodes,
			func(n *Group) { n.appendNamedNarrativeViewers(name) },
			func(n *Group, e *Narrative) { n.appendNamedNarrativeViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlImplementationEditors {
		if err := _q.loadControlImplementationEditors(ctx, query, nodes,
			func(n *Group) { n.appendNamedControlImplementationEditors(name) },
			func(n *Group, e *ControlImplementation) { n.appendNamedControlImplementationEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlImplementationBlockedGroups {
		if err := _q.loadControlImplementationBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.appendNamedControlImplementationBlockedGroups(name) },
			func(n *Group, e *ControlImplementation) { n.appendNamedControlImplementationBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlImplementationViewers {
		if err := _q.loadControlImplementationViewers(ctx, query, nodes,
			func(n *Group) { n.appendNamedControlImplementationViewers(name) },
			func(n *Group, e *ControlImplementation) { n.appendNamedControlImplementationViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedScanEditors {
		if err := _q.loadScanEditors(ctx, query, nodes,
			func(n *Group) { n.appendNamedScanEditors(name) },
			func(n *Group, e *Scan) { n.appendNamedScanEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedScanBlockedGroups {
		if err := _q.loadScanBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.appendNamedScanBlockedGroups(name) },
			func(n *Group, e *Scan) { n.appendNamedScanBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedScanViewers {
		if err := _q.loadScanViewers(ctx, query, nodes,
			func(n *Group) { n.appendNamedScanViewers(name) },
			func(n *Group, e *Scan) { n.appendNamedScanViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEntityEditors {
		if err := _q.loadEntityEditors(ctx, query, nodes,
			func(n *Group) { n.appendNamedEntityEditors(name) },
			func(n *Group, e *Entity) { n.appendNamedEntityEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEntityBlockedGroups {
		if err := _q.loadEntityBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.appendNamedEntityBlockedGroups(name) },
			func(n *Group, e *Entity) { n.appendNamedEntityBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEntityViewers {
		if err := _q.loadEntityViewers(ctx, query, nodes,
			func(n *Group) { n.appendNamedEntityViewers(name) },
			func(n *Group, e *Entity) { n.appendNamedEntityViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedProcedureEditors {
		if err := _q.loadProcedureEditors(ctx, query, nodes,
			func(n *Group) { n.appendNamedProcedureEditors(name) },
			func(n *Group, e *Procedure) { n.appendNamedProcedureEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedProcedureBlockedGroups {
		if err := _q.loadProcedureBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.appendNamedProcedureBlockedGroups(name) },
			func(n *Group, e *Procedure) { n.appendNamedProcedureBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedInternalPolicyEditors {
		if err := _q.loadInternalPolicyEditors(ctx, query, nodes,
			func(n *Group) { n.appendNamedInternalPolicyEditors(name) },
			func(n *Group, e *InternalPolicy) { n.appendNamedInternalPolicyEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedInternalPolicyBlockedGroups {
		if err := _q.loadInternalPolicyBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.appendNamedInternalPolicyBlockedGroups(name) },
			func(n *Group, e *InternalPolicy) { n.appendNamedInternalPolicyBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlEditors {
		if err := _q.loadControlEditors(ctx, query, nodes,
			func(n *Group) { n.appendNamedControlEditors(name) },
			func(n *Group, e *Control) { n.appendNamedControlEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedControlBlockedGroups {
		if err := _q.loadControlBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.appendNamedControlBlockedGroups(name) },
			func(n *Group, e *Control) { n.appendNamedControlBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedMappedControlEditors {
		if err := _q.loadMappedControlEditors(ctx, query, nodes,
			func(n *Group) { n.appendNamedMappedControlEditors(name) },
			func(n *Group, e *MappedControl) { n.appendNamedMappedControlEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedMappedControlBlockedGroups {
		if err := _q.loadMappedControlBlockedGroups(ctx, query, nodes,
			func(n *Group) { n.appendNamedMappedControlBlockedGroups(name) },
			func(n *Group, e *MappedControl) { n.appendNamedMappedControlBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedUsers {
		if err := _q.loadUsers(ctx, query, nodes,
			func(n *Group) { n.appendNamedUsers(name) },
			func(n *Group, e *User) { n.appendNamedUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedEvents {
		if err := _q.loadEvents(ctx, query, nodes,
			func(n *Group) { n.appendNamedEvents(name) },
			func(n *Group, e *Event) { n.appendNamedEvents(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedIntegrations {
		if err := _q.loadIntegrations(ctx, query, nodes,
			func(n *Group) { n.appendNamedIntegrations(name) },
			func(n *Group, e *Integration) { n.appendNamedIntegrations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedFiles {
		if err := _q.loadFiles(ctx, query, nodes,
			func(n *Group) { n.appendNamedFiles(name) },
			func(n *Group, e *File) { n.appendNamedFiles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedTasks {
		if err := _q.loadTasks(ctx, query, nodes,
			func(n *Group) { n.appendNamedTasks(name) },
			func(n *Group, e *Task) { n.appendNamedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedInvites {
		if err := _q.loadInvites(ctx, query, nodes,
			func(n *Group) { n.appendNamedInvites(name) },
			func(n *Group, e *Invite) { n.appendNamedInvites(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range _q.withNamedMembers {
		if err := _q.loadMembers(ctx, query, nodes,
			func(n *Group) { n.appendNamedMembers(name) },
			func(n *Group, e *GroupMembership) { n.appendNamedMembers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range _q.loadTotal {
		if err := _q.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *GroupQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*Group, init func(*Group), assign func(*Group, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Group)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadProgramEditors(ctx context.Context, query *ProgramQuery, nodes []*Group, init func(*Group), assign func(*Group, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ProgramEditorsTable)
		joinT.Schema(_q.schemaConfig.ProgramEditors)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(group.ProgramEditorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ProgramEditorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ProgramEditorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "program_editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadProgramBlockedGroups(ctx context.Context, query *ProgramQuery, nodes []*Group, init func(*Group), assign func(*Group, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ProgramBlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.ProgramBlockedGroups)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(group.ProgramBlockedGroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ProgramBlockedGroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ProgramBlockedGroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "program_blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadProgramViewers(ctx context.Context, query *ProgramQuery, nodes []*Group, init func(*Group), assign func(*Group, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ProgramViewersTable)
		joinT.Schema(_q.schemaConfig.ProgramViewers)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(group.ProgramViewersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ProgramViewersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ProgramViewersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "program_viewers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadRiskEditors(ctx context.Context, query *RiskQuery, nodes []*Group, init func(*Group), assign func(*Group, *Risk)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.RiskEditorsTable)
		joinT.Schema(_q.schemaConfig.RiskEditors)
		s.Join(joinT).On(s.C(risk.FieldID), joinT.C(group.RiskEditorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.RiskEditorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.RiskEditorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Risk](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "risk_editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadRiskBlockedGroups(ctx context.Context, query *RiskQuery, nodes []*Group, init func(*Group), assign func(*Group, *Risk)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.RiskBlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.RiskBlockedGroups)
		s.Join(joinT).On(s.C(risk.FieldID), joinT.C(group.RiskBlockedGroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.RiskBlockedGroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.RiskBlockedGroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Risk](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "risk_blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadRiskViewers(ctx context.Context, query *RiskQuery, nodes []*Group, init func(*Group), assign func(*Group, *Risk)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.RiskViewersTable)
		joinT.Schema(_q.schemaConfig.RiskViewers)
		s.Join(joinT).On(s.C(risk.FieldID), joinT.C(group.RiskViewersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.RiskViewersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.RiskViewersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Risk](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "risk_viewers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadControlObjectiveEditors(ctx context.Context, query *ControlObjectiveQuery, nodes []*Group, init func(*Group), assign func(*Group, *ControlObjective)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ControlObjectiveEditorsTable)
		joinT.Schema(_q.schemaConfig.ControlObjectiveEditors)
		s.Join(joinT).On(s.C(controlobjective.FieldID), joinT.C(group.ControlObjectiveEditorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ControlObjectiveEditorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ControlObjectiveEditorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlObjective](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_objective_editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadControlObjectiveBlockedGroups(ctx context.Context, query *ControlObjectiveQuery, nodes []*Group, init func(*Group), assign func(*Group, *ControlObjective)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ControlObjectiveBlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.ControlObjectiveBlockedGroups)
		s.Join(joinT).On(s.C(controlobjective.FieldID), joinT.C(group.ControlObjectiveBlockedGroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ControlObjectiveBlockedGroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ControlObjectiveBlockedGroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlObjective](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_objective_blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadControlObjectiveViewers(ctx context.Context, query *ControlObjectiveQuery, nodes []*Group, init func(*Group), assign func(*Group, *ControlObjective)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ControlObjectiveViewersTable)
		joinT.Schema(_q.schemaConfig.ControlObjectiveViewers)
		s.Join(joinT).On(s.C(controlobjective.FieldID), joinT.C(group.ControlObjectiveViewersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ControlObjectiveViewersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ControlObjectiveViewersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlObjective](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_objective_viewers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadNarrativeEditors(ctx context.Context, query *NarrativeQuery, nodes []*Group, init func(*Group), assign func(*Group, *Narrative)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.NarrativeEditorsTable)
		joinT.Schema(_q.schemaConfig.NarrativeEditors)
		s.Join(joinT).On(s.C(narrative.FieldID), joinT.C(group.NarrativeEditorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.NarrativeEditorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.NarrativeEditorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Narrative](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "narrative_editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadNarrativeBlockedGroups(ctx context.Context, query *NarrativeQuery, nodes []*Group, init func(*Group), assign func(*Group, *Narrative)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.NarrativeBlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.NarrativeBlockedGroups)
		s.Join(joinT).On(s.C(narrative.FieldID), joinT.C(group.NarrativeBlockedGroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.NarrativeBlockedGroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.NarrativeBlockedGroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Narrative](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "narrative_blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadNarrativeViewers(ctx context.Context, query *NarrativeQuery, nodes []*Group, init func(*Group), assign func(*Group, *Narrative)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.NarrativeViewersTable)
		joinT.Schema(_q.schemaConfig.NarrativeViewers)
		s.Join(joinT).On(s.C(narrative.FieldID), joinT.C(group.NarrativeViewersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.NarrativeViewersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.NarrativeViewersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Narrative](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "narrative_viewers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadControlImplementationEditors(ctx context.Context, query *ControlImplementationQuery, nodes []*Group, init func(*Group), assign func(*Group, *ControlImplementation)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ControlImplementationEditorsTable)
		joinT.Schema(_q.schemaConfig.ControlImplementationEditors)
		s.Join(joinT).On(s.C(controlimplementation.FieldID), joinT.C(group.ControlImplementationEditorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ControlImplementationEditorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ControlImplementationEditorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlImplementation](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_implementation_editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadControlImplementationBlockedGroups(ctx context.Context, query *ControlImplementationQuery, nodes []*Group, init func(*Group), assign func(*Group, *ControlImplementation)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ControlImplementationBlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.ControlImplementationBlockedGroups)
		s.Join(joinT).On(s.C(controlimplementation.FieldID), joinT.C(group.ControlImplementationBlockedGroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ControlImplementationBlockedGroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ControlImplementationBlockedGroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlImplementation](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_implementation_blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadControlImplementationViewers(ctx context.Context, query *ControlImplementationQuery, nodes []*Group, init func(*Group), assign func(*Group, *ControlImplementation)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ControlImplementationViewersTable)
		joinT.Schema(_q.schemaConfig.ControlImplementationViewers)
		s.Join(joinT).On(s.C(controlimplementation.FieldID), joinT.C(group.ControlImplementationViewersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ControlImplementationViewersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ControlImplementationViewersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlImplementation](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_implementation_viewers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadScanEditors(ctx context.Context, query *ScanQuery, nodes []*Group, init func(*Group), assign func(*Group, *Scan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ScanEditorsTable)
		joinT.Schema(_q.schemaConfig.ScanEditors)
		s.Join(joinT).On(s.C(scan.FieldID), joinT.C(group.ScanEditorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ScanEditorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ScanEditorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Scan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "scan_editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadScanBlockedGroups(ctx context.Context, query *ScanQuery, nodes []*Group, init func(*Group), assign func(*Group, *Scan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ScanBlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.ScanBlockedGroups)
		s.Join(joinT).On(s.C(scan.FieldID), joinT.C(group.ScanBlockedGroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ScanBlockedGroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ScanBlockedGroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Scan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "scan_blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadScanViewers(ctx context.Context, query *ScanQuery, nodes []*Group, init func(*Group), assign func(*Group, *Scan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ScanViewersTable)
		joinT.Schema(_q.schemaConfig.ScanViewers)
		s.Join(joinT).On(s.C(scan.FieldID), joinT.C(group.ScanViewersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ScanViewersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ScanViewersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Scan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "scan_viewers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadEntityEditors(ctx context.Context, query *EntityQuery, nodes []*Group, init func(*Group), assign func(*Group, *Entity)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.EntityEditorsTable)
		joinT.Schema(_q.schemaConfig.EntityEditors)
		s.Join(joinT).On(s.C(entity.FieldID), joinT.C(group.EntityEditorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.EntityEditorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.EntityEditorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Entity](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "entity_editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadEntityBlockedGroups(ctx context.Context, query *EntityQuery, nodes []*Group, init func(*Group), assign func(*Group, *Entity)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.EntityBlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.EntityBlockedGroups)
		s.Join(joinT).On(s.C(entity.FieldID), joinT.C(group.EntityBlockedGroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.EntityBlockedGroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.EntityBlockedGroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Entity](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "entity_blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadEntityViewers(ctx context.Context, query *EntityQuery, nodes []*Group, init func(*Group), assign func(*Group, *Entity)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.EntityViewersTable)
		joinT.Schema(_q.schemaConfig.EntityViewers)
		s.Join(joinT).On(s.C(entity.FieldID), joinT.C(group.EntityViewersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.EntityViewersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.EntityViewersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Entity](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "entity_viewers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadProcedureEditors(ctx context.Context, query *ProcedureQuery, nodes []*Group, init func(*Group), assign func(*Group, *Procedure)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ProcedureEditorsTable)
		joinT.Schema(_q.schemaConfig.ProcedureEditors)
		s.Join(joinT).On(s.C(procedure.FieldID), joinT.C(group.ProcedureEditorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ProcedureEditorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ProcedureEditorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Procedure](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "procedure_editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadProcedureBlockedGroups(ctx context.Context, query *ProcedureQuery, nodes []*Group, init func(*Group), assign func(*Group, *Procedure)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ProcedureBlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.ProcedureBlockedGroups)
		s.Join(joinT).On(s.C(procedure.FieldID), joinT.C(group.ProcedureBlockedGroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ProcedureBlockedGroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ProcedureBlockedGroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Procedure](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "procedure_blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadInternalPolicyEditors(ctx context.Context, query *InternalPolicyQuery, nodes []*Group, init func(*Group), assign func(*Group, *InternalPolicy)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.InternalPolicyEditorsTable)
		joinT.Schema(_q.schemaConfig.InternalPolicyEditors)
		s.Join(joinT).On(s.C(internalpolicy.FieldID), joinT.C(group.InternalPolicyEditorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.InternalPolicyEditorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.InternalPolicyEditorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*InternalPolicy](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "internal_policy_editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadInternalPolicyBlockedGroups(ctx context.Context, query *InternalPolicyQuery, nodes []*Group, init func(*Group), assign func(*Group, *InternalPolicy)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.InternalPolicyBlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.InternalPolicyBlockedGroups)
		s.Join(joinT).On(s.C(internalpolicy.FieldID), joinT.C(group.InternalPolicyBlockedGroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.InternalPolicyBlockedGroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.InternalPolicyBlockedGroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*InternalPolicy](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "internal_policy_blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadControlEditors(ctx context.Context, query *ControlQuery, nodes []*Group, init func(*Group), assign func(*Group, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ControlEditorsTable)
		joinT.Schema(_q.schemaConfig.ControlEditors)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(group.ControlEditorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ControlEditorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ControlEditorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadControlBlockedGroups(ctx context.Context, query *ControlQuery, nodes []*Group, init func(*Group), assign func(*Group, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.ControlBlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.ControlBlockedGroups)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(group.ControlBlockedGroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.ControlBlockedGroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.ControlBlockedGroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadMappedControlEditors(ctx context.Context, query *MappedControlQuery, nodes []*Group, init func(*Group), assign func(*Group, *MappedControl)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.MappedControlEditorsTable)
		joinT.Schema(_q.schemaConfig.MappedControlEditors)
		s.Join(joinT).On(s.C(mappedcontrol.FieldID), joinT.C(group.MappedControlEditorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.MappedControlEditorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.MappedControlEditorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*MappedControl](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "mapped_control_editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadMappedControlBlockedGroups(ctx context.Context, query *MappedControlQuery, nodes []*Group, init func(*Group), assign func(*Group, *MappedControl)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.MappedControlBlockedGroupsTable)
		joinT.Schema(_q.schemaConfig.MappedControlBlockedGroups)
		s.Join(joinT).On(s.C(mappedcontrol.FieldID), joinT.C(group.MappedControlBlockedGroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.MappedControlBlockedGroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.MappedControlBlockedGroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*MappedControl](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "mapped_control_blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadSetting(ctx context.Context, query *GroupSettingQuery, nodes []*Group, init func(*Group), assign func(*Group, *GroupSetting)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Group)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(groupsetting.FieldGroupID)
	}
	query.Where(predicate.GroupSetting(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(group.SettingColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.GroupID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "group_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *GroupQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*Group, init func(*Group), assign func(*Group, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.UsersTable)
		joinT.Schema(_q.schemaConfig.GroupMembership)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(group.UsersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.UsersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.UsersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*Group, init func(*Group), assign func(*Group, *Event)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.EventsTable)
		joinT.Schema(_q.schemaConfig.GroupEvents)
		s.Join(joinT).On(s.C(event.FieldID), joinT.C(group.EventsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(group.EventsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.EventsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Event](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "events" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadIntegrations(ctx context.Context, query *IntegrationQuery, nodes []*Group, init func(*Group), assign func(*Group, *Integration)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Group)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Integration(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(group.IntegrationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.group_integrations
		if fk == nil {
			return fmt.Errorf(`foreign-key "group_integrations" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "group_integrations" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *GroupQuery) loadFiles(ctx context.Context, query *FileQuery, nodes []*Group, init func(*Group), assign func(*Group, *File)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.FilesTable)
		joinT.Schema(_q.schemaConfig.GroupFiles)
		s.Join(joinT).On(s.C(file.FieldID), joinT.C(group.FilesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(group.FilesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.FilesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*File](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "files" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*Group, init func(*Group), assign func(*Group, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.TasksTable)
		joinT.Schema(_q.schemaConfig.GroupTasks)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(group.TasksPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(group.TasksPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.TasksPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tasks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadInvites(ctx context.Context, query *InviteQuery, nodes []*Group, init func(*Group), assign func(*Group, *Invite)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Group)
	nids := make(map[string]map[*Group]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(group.InvitesTable)
		joinT.Schema(_q.schemaConfig.InviteGroups)
		s.Join(joinT).On(s.C(invite.FieldID), joinT.C(group.InvitesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(group.InvitesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(group.InvitesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Group]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Invite](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "invites" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (_q *GroupQuery) loadMembers(ctx context.Context, query *GroupMembershipQuery, nodes []*Group, init func(*Group), assign func(*Group, *GroupMembership)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Group)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(groupmembership.FieldGroupID)
	}
	query.Where(predicate.GroupMembership(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(group.MembersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.GroupID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "group_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (_q *GroupQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Schema = _q.schemaConfig.Group
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	if len(_q.modifiers) > 0 {
		_spec.Modifiers = _q.modifiers
	}
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *GroupQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeString))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for i := range fields {
			if fields[i] != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if _q.withOwner != nil {
			_spec.Node.AddColumnOnce(group.FieldOwnerID)
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *GroupQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(group.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = group.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(_q.schemaConfig.Group)
	ctx = internal.NewSchemaConfigContext(ctx, _q.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range _q.modifiers {
		m(selector)
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_q *GroupQuery) Modify(modifiers ...func(s *sql.Selector)) *GroupSelect {
	_q.modifiers = append(_q.modifiers, modifiers...)
	return _q.Select()
}

// WithNamedProgramEditors tells the query-builder to eager-load the nodes that are connected to the "program_editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedProgramEditors(name string, opts ...func(*ProgramQuery)) *GroupQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedProgramEditors == nil {
		_q.withNamedProgramEditors = make(map[string]*ProgramQuery)
	}
	_q.withNamedProgramEditors[name] = query
	return _q
}

// WithNamedProgramBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "program_blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedProgramBlockedGroups(name string, opts ...func(*ProgramQuery)) *GroupQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedProgramBlockedGroups == nil {
		_q.withNamedProgramBlockedGroups = make(map[string]*ProgramQuery)
	}
	_q.withNamedProgramBlockedGroups[name] = query
	return _q
}

// WithNamedProgramViewers tells the query-builder to eager-load the nodes that are connected to the "program_viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedProgramViewers(name string, opts ...func(*ProgramQuery)) *GroupQuery {
	query := (&ProgramClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedProgramViewers == nil {
		_q.withNamedProgramViewers = make(map[string]*ProgramQuery)
	}
	_q.withNamedProgramViewers[name] = query
	return _q
}

// WithNamedRiskEditors tells the query-builder to eager-load the nodes that are connected to the "risk_editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedRiskEditors(name string, opts ...func(*RiskQuery)) *GroupQuery {
	query := (&RiskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedRiskEditors == nil {
		_q.withNamedRiskEditors = make(map[string]*RiskQuery)
	}
	_q.withNamedRiskEditors[name] = query
	return _q
}

// WithNamedRiskBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "risk_blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedRiskBlockedGroups(name string, opts ...func(*RiskQuery)) *GroupQuery {
	query := (&RiskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedRiskBlockedGroups == nil {
		_q.withNamedRiskBlockedGroups = make(map[string]*RiskQuery)
	}
	_q.withNamedRiskBlockedGroups[name] = query
	return _q
}

// WithNamedRiskViewers tells the query-builder to eager-load the nodes that are connected to the "risk_viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedRiskViewers(name string, opts ...func(*RiskQuery)) *GroupQuery {
	query := (&RiskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedRiskViewers == nil {
		_q.withNamedRiskViewers = make(map[string]*RiskQuery)
	}
	_q.withNamedRiskViewers[name] = query
	return _q
}

// WithNamedControlObjectiveEditors tells the query-builder to eager-load the nodes that are connected to the "control_objective_editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedControlObjectiveEditors(name string, opts ...func(*ControlObjectiveQuery)) *GroupQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlObjectiveEditors == nil {
		_q.withNamedControlObjectiveEditors = make(map[string]*ControlObjectiveQuery)
	}
	_q.withNamedControlObjectiveEditors[name] = query
	return _q
}

// WithNamedControlObjectiveBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "control_objective_blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedControlObjectiveBlockedGroups(name string, opts ...func(*ControlObjectiveQuery)) *GroupQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlObjectiveBlockedGroups == nil {
		_q.withNamedControlObjectiveBlockedGroups = make(map[string]*ControlObjectiveQuery)
	}
	_q.withNamedControlObjectiveBlockedGroups[name] = query
	return _q
}

// WithNamedControlObjectiveViewers tells the query-builder to eager-load the nodes that are connected to the "control_objective_viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedControlObjectiveViewers(name string, opts ...func(*ControlObjectiveQuery)) *GroupQuery {
	query := (&ControlObjectiveClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlObjectiveViewers == nil {
		_q.withNamedControlObjectiveViewers = make(map[string]*ControlObjectiveQuery)
	}
	_q.withNamedControlObjectiveViewers[name] = query
	return _q
}

// WithNamedNarrativeEditors tells the query-builder to eager-load the nodes that are connected to the "narrative_editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedNarrativeEditors(name string, opts ...func(*NarrativeQuery)) *GroupQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedNarrativeEditors == nil {
		_q.withNamedNarrativeEditors = make(map[string]*NarrativeQuery)
	}
	_q.withNamedNarrativeEditors[name] = query
	return _q
}

// WithNamedNarrativeBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "narrative_blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedNarrativeBlockedGroups(name string, opts ...func(*NarrativeQuery)) *GroupQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedNarrativeBlockedGroups == nil {
		_q.withNamedNarrativeBlockedGroups = make(map[string]*NarrativeQuery)
	}
	_q.withNamedNarrativeBlockedGroups[name] = query
	return _q
}

// WithNamedNarrativeViewers tells the query-builder to eager-load the nodes that are connected to the "narrative_viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedNarrativeViewers(name string, opts ...func(*NarrativeQuery)) *GroupQuery {
	query := (&NarrativeClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedNarrativeViewers == nil {
		_q.withNamedNarrativeViewers = make(map[string]*NarrativeQuery)
	}
	_q.withNamedNarrativeViewers[name] = query
	return _q
}

// WithNamedControlImplementationEditors tells the query-builder to eager-load the nodes that are connected to the "control_implementation_editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedControlImplementationEditors(name string, opts ...func(*ControlImplementationQuery)) *GroupQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlImplementationEditors == nil {
		_q.withNamedControlImplementationEditors = make(map[string]*ControlImplementationQuery)
	}
	_q.withNamedControlImplementationEditors[name] = query
	return _q
}

// WithNamedControlImplementationBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "control_implementation_blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedControlImplementationBlockedGroups(name string, opts ...func(*ControlImplementationQuery)) *GroupQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlImplementationBlockedGroups == nil {
		_q.withNamedControlImplementationBlockedGroups = make(map[string]*ControlImplementationQuery)
	}
	_q.withNamedControlImplementationBlockedGroups[name] = query
	return _q
}

// WithNamedControlImplementationViewers tells the query-builder to eager-load the nodes that are connected to the "control_implementation_viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedControlImplementationViewers(name string, opts ...func(*ControlImplementationQuery)) *GroupQuery {
	query := (&ControlImplementationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlImplementationViewers == nil {
		_q.withNamedControlImplementationViewers = make(map[string]*ControlImplementationQuery)
	}
	_q.withNamedControlImplementationViewers[name] = query
	return _q
}

// WithNamedScanEditors tells the query-builder to eager-load the nodes that are connected to the "scan_editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedScanEditors(name string, opts ...func(*ScanQuery)) *GroupQuery {
	query := (&ScanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedScanEditors == nil {
		_q.withNamedScanEditors = make(map[string]*ScanQuery)
	}
	_q.withNamedScanEditors[name] = query
	return _q
}

// WithNamedScanBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "scan_blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedScanBlockedGroups(name string, opts ...func(*ScanQuery)) *GroupQuery {
	query := (&ScanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedScanBlockedGroups == nil {
		_q.withNamedScanBlockedGroups = make(map[string]*ScanQuery)
	}
	_q.withNamedScanBlockedGroups[name] = query
	return _q
}

// WithNamedScanViewers tells the query-builder to eager-load the nodes that are connected to the "scan_viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedScanViewers(name string, opts ...func(*ScanQuery)) *GroupQuery {
	query := (&ScanClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedScanViewers == nil {
		_q.withNamedScanViewers = make(map[string]*ScanQuery)
	}
	_q.withNamedScanViewers[name] = query
	return _q
}

// WithNamedEntityEditors tells the query-builder to eager-load the nodes that are connected to the "entity_editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedEntityEditors(name string, opts ...func(*EntityQuery)) *GroupQuery {
	query := (&EntityClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEntityEditors == nil {
		_q.withNamedEntityEditors = make(map[string]*EntityQuery)
	}
	_q.withNamedEntityEditors[name] = query
	return _q
}

// WithNamedEntityBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "entity_blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedEntityBlockedGroups(name string, opts ...func(*EntityQuery)) *GroupQuery {
	query := (&EntityClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEntityBlockedGroups == nil {
		_q.withNamedEntityBlockedGroups = make(map[string]*EntityQuery)
	}
	_q.withNamedEntityBlockedGroups[name] = query
	return _q
}

// WithNamedEntityViewers tells the query-builder to eager-load the nodes that are connected to the "entity_viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedEntityViewers(name string, opts ...func(*EntityQuery)) *GroupQuery {
	query := (&EntityClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEntityViewers == nil {
		_q.withNamedEntityViewers = make(map[string]*EntityQuery)
	}
	_q.withNamedEntityViewers[name] = query
	return _q
}

// WithNamedProcedureEditors tells the query-builder to eager-load the nodes that are connected to the "procedure_editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedProcedureEditors(name string, opts ...func(*ProcedureQuery)) *GroupQuery {
	query := (&ProcedureClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedProcedureEditors == nil {
		_q.withNamedProcedureEditors = make(map[string]*ProcedureQuery)
	}
	_q.withNamedProcedureEditors[name] = query
	return _q
}

// WithNamedProcedureBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "procedure_blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedProcedureBlockedGroups(name string, opts ...func(*ProcedureQuery)) *GroupQuery {
	query := (&ProcedureClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedProcedureBlockedGroups == nil {
		_q.withNamedProcedureBlockedGroups = make(map[string]*ProcedureQuery)
	}
	_q.withNamedProcedureBlockedGroups[name] = query
	return _q
}

// WithNamedInternalPolicyEditors tells the query-builder to eager-load the nodes that are connected to the "internal_policy_editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedInternalPolicyEditors(name string, opts ...func(*InternalPolicyQuery)) *GroupQuery {
	query := (&InternalPolicyClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedInternalPolicyEditors == nil {
		_q.withNamedInternalPolicyEditors = make(map[string]*InternalPolicyQuery)
	}
	_q.withNamedInternalPolicyEditors[name] = query
	return _q
}

// WithNamedInternalPolicyBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "internal_policy_blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedInternalPolicyBlockedGroups(name string, opts ...func(*InternalPolicyQuery)) *GroupQuery {
	query := (&InternalPolicyClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedInternalPolicyBlockedGroups == nil {
		_q.withNamedInternalPolicyBlockedGroups = make(map[string]*InternalPolicyQuery)
	}
	_q.withNamedInternalPolicyBlockedGroups[name] = query
	return _q
}

// WithNamedControlEditors tells the query-builder to eager-load the nodes that are connected to the "control_editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedControlEditors(name string, opts ...func(*ControlQuery)) *GroupQuery {
	query := (&ControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlEditors == nil {
		_q.withNamedControlEditors = make(map[string]*ControlQuery)
	}
	_q.withNamedControlEditors[name] = query
	return _q
}

// WithNamedControlBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "control_blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedControlBlockedGroups(name string, opts ...func(*ControlQuery)) *GroupQuery {
	query := (&ControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedControlBlockedGroups == nil {
		_q.withNamedControlBlockedGroups = make(map[string]*ControlQuery)
	}
	_q.withNamedControlBlockedGroups[name] = query
	return _q
}

// WithNamedMappedControlEditors tells the query-builder to eager-load the nodes that are connected to the "mapped_control_editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedMappedControlEditors(name string, opts ...func(*MappedControlQuery)) *GroupQuery {
	query := (&MappedControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedMappedControlEditors == nil {
		_q.withNamedMappedControlEditors = make(map[string]*MappedControlQuery)
	}
	_q.withNamedMappedControlEditors[name] = query
	return _q
}

// WithNamedMappedControlBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "mapped_control_blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedMappedControlBlockedGroups(name string, opts ...func(*MappedControlQuery)) *GroupQuery {
	query := (&MappedControlClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedMappedControlBlockedGroups == nil {
		_q.withNamedMappedControlBlockedGroups = make(map[string]*MappedControlQuery)
	}
	_q.withNamedMappedControlBlockedGroups[name] = query
	return _q
}

// WithNamedUsers tells the query-builder to eager-load the nodes that are connected to the "users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedUsers(name string, opts ...func(*UserQuery)) *GroupQuery {
	query := (&UserClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedUsers == nil {
		_q.withNamedUsers = make(map[string]*UserQuery)
	}
	_q.withNamedUsers[name] = query
	return _q
}

// WithNamedEvents tells the query-builder to eager-load the nodes that are connected to the "events"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedEvents(name string, opts ...func(*EventQuery)) *GroupQuery {
	query := (&EventClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedEvents == nil {
		_q.withNamedEvents = make(map[string]*EventQuery)
	}
	_q.withNamedEvents[name] = query
	return _q
}

// WithNamedIntegrations tells the query-builder to eager-load the nodes that are connected to the "integrations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedIntegrations(name string, opts ...func(*IntegrationQuery)) *GroupQuery {
	query := (&IntegrationClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedIntegrations == nil {
		_q.withNamedIntegrations = make(map[string]*IntegrationQuery)
	}
	_q.withNamedIntegrations[name] = query
	return _q
}

// WithNamedFiles tells the query-builder to eager-load the nodes that are connected to the "files"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedFiles(name string, opts ...func(*FileQuery)) *GroupQuery {
	query := (&FileClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedFiles == nil {
		_q.withNamedFiles = make(map[string]*FileQuery)
	}
	_q.withNamedFiles[name] = query
	return _q
}

// WithNamedTasks tells the query-builder to eager-load the nodes that are connected to the "tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedTasks(name string, opts ...func(*TaskQuery)) *GroupQuery {
	query := (&TaskClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedTasks == nil {
		_q.withNamedTasks = make(map[string]*TaskQuery)
	}
	_q.withNamedTasks[name] = query
	return _q
}

// WithNamedInvites tells the query-builder to eager-load the nodes that are connected to the "invites"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedInvites(name string, opts ...func(*InviteQuery)) *GroupQuery {
	query := (&InviteClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedInvites == nil {
		_q.withNamedInvites = make(map[string]*InviteQuery)
	}
	_q.withNamedInvites[name] = query
	return _q
}

// WithNamedMembers tells the query-builder to eager-load the nodes that are connected to the "members"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (_q *GroupQuery) WithNamedMembers(name string, opts ...func(*GroupMembershipQuery)) *GroupQuery {
	query := (&GroupMembershipClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if _q.withNamedMembers == nil {
		_q.withNamedMembers = make(map[string]*GroupMembershipQuery)
	}
	_q.withNamedMembers[name] = query
	return _q
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (gq *GroupQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gq.ctx, ent.OpQueryIDs)
	if err := gq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return gq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, gq, qr, gq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// GroupGroupBy is the group-by builder for Group entities.
type GroupGroupBy struct {
	selector
	build *GroupQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *GroupGroupBy) Aggregate(fns ...AggregateFunc) *GroupGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *GroupGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroupQuery, *GroupGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *GroupGroupBy) sqlScan(ctx context.Context, root *GroupQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GroupSelect is the builder for selecting fields of Group entities.
type GroupSelect struct {
	*GroupQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *GroupSelect) Aggregate(fns ...AggregateFunc) *GroupSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *GroupSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GroupQuery, *GroupSelect](ctx, _s.GroupQuery, _s, _s.inters, v)
}

func (_s *GroupSelect) sqlScan(ctx context.Context, root *GroupQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (_s *GroupSelect) Modify(modifiers ...func(s *sql.Selector)) *GroupSelect {
	_s.modifiers = append(_s.modifiers, modifiers...)
	return _s
}
