// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/entitlementhistory"
	"github.com/theopenlane/entx/history"
)

// EntitlementHistory is the model entity for the EntitlementHistory schema.
type EntitlementHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the plan to which the entitlement belongs
	PlanID string `json:"plan_id,omitempty"`
	// the organization to which the entitlement belongs
	OrganizationID string `json:"organization_id,omitempty"`
	// used to store references to external systems, e.g. Stripe
	ExternalCustomerID string `json:"external_customer_id,omitempty"`
	// used to store references to external systems, e.g. Stripe
	ExternalSubscriptionID string `json:"external_subscription_id,omitempty"`
	// whether or not the customers entitlement expires - expires_at will show the time
	Expires bool `json:"expires,omitempty"`
	// the time at which a customer's entitlement will expire, e.g. they've cancelled but paid through the end of the month
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// whether or not the customer has cancelled their entitlement - usually used in conjunction with expires and expires at
	Cancelled bool `json:"cancelled,omitempty"`
	// the date at which the customer cancelled their entitlement
	CancelledDate time.Time `json:"cancelled_date,omitempty"`
	// the date at which the customer's billing starts
	BillStarting time.Time `json:"bill_starting,omitempty"`
	// whether or not the entitlement is active
	Active       bool `json:"active,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntitlementHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entitlementhistory.FieldTags:
			values[i] = new([]byte)
		case entitlementhistory.FieldOperation:
			values[i] = new(history.OpType)
		case entitlementhistory.FieldExpires, entitlementhistory.FieldCancelled, entitlementhistory.FieldActive:
			values[i] = new(sql.NullBool)
		case entitlementhistory.FieldID, entitlementhistory.FieldRef, entitlementhistory.FieldCreatedBy, entitlementhistory.FieldUpdatedBy, entitlementhistory.FieldMappingID, entitlementhistory.FieldDeletedBy, entitlementhistory.FieldOwnerID, entitlementhistory.FieldPlanID, entitlementhistory.FieldOrganizationID, entitlementhistory.FieldExternalCustomerID, entitlementhistory.FieldExternalSubscriptionID:
			values[i] = new(sql.NullString)
		case entitlementhistory.FieldHistoryTime, entitlementhistory.FieldCreatedAt, entitlementhistory.FieldUpdatedAt, entitlementhistory.FieldDeletedAt, entitlementhistory.FieldExpiresAt, entitlementhistory.FieldCancelledDate, entitlementhistory.FieldBillStarting:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntitlementHistory fields.
func (eh *EntitlementHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entitlementhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				eh.ID = value.String
			}
		case entitlementhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				eh.HistoryTime = value.Time
			}
		case entitlementhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				eh.Ref = value.String
			}
		case entitlementhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				eh.Operation = *value
			}
		case entitlementhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				eh.CreatedAt = value.Time
			}
		case entitlementhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				eh.UpdatedAt = value.Time
			}
		case entitlementhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				eh.CreatedBy = value.String
			}
		case entitlementhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				eh.UpdatedBy = value.String
			}
		case entitlementhistory.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				eh.MappingID = value.String
			}
		case entitlementhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case entitlementhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				eh.DeletedAt = value.Time
			}
		case entitlementhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				eh.DeletedBy = value.String
			}
		case entitlementhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				eh.OwnerID = value.String
			}
		case entitlementhistory.FieldPlanID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plan_id", values[i])
			} else if value.Valid {
				eh.PlanID = value.String
			}
		case entitlementhistory.FieldOrganizationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value.Valid {
				eh.OrganizationID = value.String
			}
		case entitlementhistory.FieldExternalCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_customer_id", values[i])
			} else if value.Valid {
				eh.ExternalCustomerID = value.String
			}
		case entitlementhistory.FieldExternalSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field external_subscription_id", values[i])
			} else if value.Valid {
				eh.ExternalSubscriptionID = value.String
			}
		case entitlementhistory.FieldExpires:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field expires", values[i])
			} else if value.Valid {
				eh.Expires = value.Bool
			}
		case entitlementhistory.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				eh.ExpiresAt = new(time.Time)
				*eh.ExpiresAt = value.Time
			}
		case entitlementhistory.FieldCancelled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field cancelled", values[i])
			} else if value.Valid {
				eh.Cancelled = value.Bool
			}
		case entitlementhistory.FieldCancelledDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field cancelled_date", values[i])
			} else if value.Valid {
				eh.CancelledDate = value.Time
			}
		case entitlementhistory.FieldBillStarting:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field bill_starting", values[i])
			} else if value.Valid {
				eh.BillStarting = value.Time
			}
		case entitlementhistory.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				eh.Active = value.Bool
			}
		default:
			eh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntitlementHistory.
// This includes values selected through modifiers, order, etc.
func (eh *EntitlementHistory) Value(name string) (ent.Value, error) {
	return eh.selectValues.Get(name)
}

// Update returns a builder for updating this EntitlementHistory.
// Note that you need to call EntitlementHistory.Unwrap() before calling this method if this EntitlementHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (eh *EntitlementHistory) Update() *EntitlementHistoryUpdateOne {
	return NewEntitlementHistoryClient(eh.config).UpdateOne(eh)
}

// Unwrap unwraps the EntitlementHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eh *EntitlementHistory) Unwrap() *EntitlementHistory {
	_tx, ok := eh.config.driver.(*txDriver)
	if !ok {
		panic("generated: EntitlementHistory is not a transactional entity")
	}
	eh.config.driver = _tx.drv
	return eh
}

// String implements the fmt.Stringer.
func (eh *EntitlementHistory) String() string {
	var builder strings.Builder
	builder.WriteString("EntitlementHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(eh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(eh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", eh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(eh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(eh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(eh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(eh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(eh.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", eh.Tags))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(eh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(eh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(eh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("plan_id=")
	builder.WriteString(eh.PlanID)
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(eh.OrganizationID)
	builder.WriteString(", ")
	builder.WriteString("external_customer_id=")
	builder.WriteString(eh.ExternalCustomerID)
	builder.WriteString(", ")
	builder.WriteString("external_subscription_id=")
	builder.WriteString(eh.ExternalSubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("expires=")
	builder.WriteString(fmt.Sprintf("%v", eh.Expires))
	builder.WriteString(", ")
	if v := eh.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("cancelled=")
	builder.WriteString(fmt.Sprintf("%v", eh.Cancelled))
	builder.WriteString(", ")
	builder.WriteString("cancelled_date=")
	builder.WriteString(eh.CancelledDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("bill_starting=")
	builder.WriteString(eh.BillStarting.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("active=")
	builder.WriteString(fmt.Sprintf("%v", eh.Active))
	builder.WriteByte(')')
	return builder.String()
}

// EntitlementHistories is a parsable slice of EntitlementHistory.
type EntitlementHistories []*EntitlementHistory
