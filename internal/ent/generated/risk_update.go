// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// RiskUpdate is the builder for updating Risk entities.
type RiskUpdate struct {
	config
	hooks     []Hook
	mutation  *RiskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RiskUpdate builder.
func (ru *RiskUpdate) Where(ps ...predicate.Risk) *RiskUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RiskUpdate) SetUpdatedAt(t time.Time) *RiskUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ru *RiskUpdate) ClearUpdatedAt() *RiskUpdate {
	ru.mutation.ClearUpdatedAt()
	return ru
}

// SetUpdatedBy sets the "updated_by" field.
func (ru *RiskUpdate) SetUpdatedBy(s string) *RiskUpdate {
	ru.mutation.SetUpdatedBy(s)
	return ru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableUpdatedBy(s *string) *RiskUpdate {
	if s != nil {
		ru.SetUpdatedBy(*s)
	}
	return ru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ru *RiskUpdate) ClearUpdatedBy() *RiskUpdate {
	ru.mutation.ClearUpdatedBy()
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RiskUpdate) SetDeletedAt(t time.Time) *RiskUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableDeletedAt(t *time.Time) *RiskUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RiskUpdate) ClearDeletedAt() *RiskUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetDeletedBy sets the "deleted_by" field.
func (ru *RiskUpdate) SetDeletedBy(s string) *RiskUpdate {
	ru.mutation.SetDeletedBy(s)
	return ru
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableDeletedBy(s *string) *RiskUpdate {
	if s != nil {
		ru.SetDeletedBy(*s)
	}
	return ru
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ru *RiskUpdate) ClearDeletedBy() *RiskUpdate {
	ru.mutation.ClearDeletedBy()
	return ru
}

// SetTags sets the "tags" field.
func (ru *RiskUpdate) SetTags(s []string) *RiskUpdate {
	ru.mutation.SetTags(s)
	return ru
}

// AppendTags appends s to the "tags" field.
func (ru *RiskUpdate) AppendTags(s []string) *RiskUpdate {
	ru.mutation.AppendTags(s)
	return ru
}

// ClearTags clears the value of the "tags" field.
func (ru *RiskUpdate) ClearTags() *RiskUpdate {
	ru.mutation.ClearTags()
	return ru
}

// SetName sets the "name" field.
func (ru *RiskUpdate) SetName(s string) *RiskUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableName(s *string) *RiskUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetDescription sets the "description" field.
func (ru *RiskUpdate) SetDescription(s string) *RiskUpdate {
	ru.mutation.SetDescription(s)
	return ru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableDescription(s *string) *RiskUpdate {
	if s != nil {
		ru.SetDescription(*s)
	}
	return ru
}

// ClearDescription clears the value of the "description" field.
func (ru *RiskUpdate) ClearDescription() *RiskUpdate {
	ru.mutation.ClearDescription()
	return ru
}

// SetStatus sets the "status" field.
func (ru *RiskUpdate) SetStatus(s string) *RiskUpdate {
	ru.mutation.SetStatus(s)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableStatus(s *string) *RiskUpdate {
	if s != nil {
		ru.SetStatus(*s)
	}
	return ru
}

// ClearStatus clears the value of the "status" field.
func (ru *RiskUpdate) ClearStatus() *RiskUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// SetRiskType sets the "risk_type" field.
func (ru *RiskUpdate) SetRiskType(s string) *RiskUpdate {
	ru.mutation.SetRiskType(s)
	return ru
}

// SetNillableRiskType sets the "risk_type" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableRiskType(s *string) *RiskUpdate {
	if s != nil {
		ru.SetRiskType(*s)
	}
	return ru
}

// ClearRiskType clears the value of the "risk_type" field.
func (ru *RiskUpdate) ClearRiskType() *RiskUpdate {
	ru.mutation.ClearRiskType()
	return ru
}

// SetBusinessCosts sets the "business_costs" field.
func (ru *RiskUpdate) SetBusinessCosts(s string) *RiskUpdate {
	ru.mutation.SetBusinessCosts(s)
	return ru
}

// SetNillableBusinessCosts sets the "business_costs" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableBusinessCosts(s *string) *RiskUpdate {
	if s != nil {
		ru.SetBusinessCosts(*s)
	}
	return ru
}

// ClearBusinessCosts clears the value of the "business_costs" field.
func (ru *RiskUpdate) ClearBusinessCosts() *RiskUpdate {
	ru.mutation.ClearBusinessCosts()
	return ru
}

// SetImpact sets the "impact" field.
func (ru *RiskUpdate) SetImpact(ei enums.RiskImpact) *RiskUpdate {
	ru.mutation.SetImpact(ei)
	return ru
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableImpact(ei *enums.RiskImpact) *RiskUpdate {
	if ei != nil {
		ru.SetImpact(*ei)
	}
	return ru
}

// ClearImpact clears the value of the "impact" field.
func (ru *RiskUpdate) ClearImpact() *RiskUpdate {
	ru.mutation.ClearImpact()
	return ru
}

// SetLikelihood sets the "likelihood" field.
func (ru *RiskUpdate) SetLikelihood(el enums.RiskLikelihood) *RiskUpdate {
	ru.mutation.SetLikelihood(el)
	return ru
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableLikelihood(el *enums.RiskLikelihood) *RiskUpdate {
	if el != nil {
		ru.SetLikelihood(*el)
	}
	return ru
}

// ClearLikelihood clears the value of the "likelihood" field.
func (ru *RiskUpdate) ClearLikelihood() *RiskUpdate {
	ru.mutation.ClearLikelihood()
	return ru
}

// SetMitigation sets the "mitigation" field.
func (ru *RiskUpdate) SetMitigation(s string) *RiskUpdate {
	ru.mutation.SetMitigation(s)
	return ru
}

// SetNillableMitigation sets the "mitigation" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableMitigation(s *string) *RiskUpdate {
	if s != nil {
		ru.SetMitigation(*s)
	}
	return ru
}

// ClearMitigation clears the value of the "mitigation" field.
func (ru *RiskUpdate) ClearMitigation() *RiskUpdate {
	ru.mutation.ClearMitigation()
	return ru
}

// SetSatisfies sets the "satisfies" field.
func (ru *RiskUpdate) SetSatisfies(s string) *RiskUpdate {
	ru.mutation.SetSatisfies(s)
	return ru
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableSatisfies(s *string) *RiskUpdate {
	if s != nil {
		ru.SetSatisfies(*s)
	}
	return ru
}

// ClearSatisfies clears the value of the "satisfies" field.
func (ru *RiskUpdate) ClearSatisfies() *RiskUpdate {
	ru.mutation.ClearSatisfies()
	return ru
}

// SetDetails sets the "details" field.
func (ru *RiskUpdate) SetDetails(m map[string]interface{}) *RiskUpdate {
	ru.mutation.SetDetails(m)
	return ru
}

// ClearDetails clears the value of the "details" field.
func (ru *RiskUpdate) ClearDetails() *RiskUpdate {
	ru.mutation.ClearDetails()
	return ru
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (ru *RiskUpdate) AddControlIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddControlIDs(ids...)
	return ru
}

// AddControl adds the "control" edges to the Control entity.
func (ru *RiskUpdate) AddControl(c ...*Control) *RiskUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedure" edge to the Procedure entity by IDs.
func (ru *RiskUpdate) AddProcedureIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddProcedureIDs(ids...)
	return ru
}

// AddProcedure adds the "procedure" edges to the Procedure entity.
func (ru *RiskUpdate) AddProcedure(p ...*Procedure) *RiskUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddProcedureIDs(ids...)
}

// AddActionplanIDs adds the "actionplans" edge to the ActionPlan entity by IDs.
func (ru *RiskUpdate) AddActionplanIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddActionplanIDs(ids...)
	return ru
}

// AddActionplans adds the "actionplans" edges to the ActionPlan entity.
func (ru *RiskUpdate) AddActionplans(a ...*ActionPlan) *RiskUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddActionplanIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (ru *RiskUpdate) AddProgramIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddProgramIDs(ids...)
	return ru
}

// AddProgram adds the "program" edges to the Program entity.
func (ru *RiskUpdate) AddProgram(p ...*Program) *RiskUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddProgramIDs(ids...)
}

// Mutation returns the RiskMutation object of the builder.
func (ru *RiskUpdate) Mutation() *RiskMutation {
	return ru.mutation
}

// ClearControl clears all "control" edges to the Control entity.
func (ru *RiskUpdate) ClearControl() *RiskUpdate {
	ru.mutation.ClearControl()
	return ru
}

// RemoveControlIDs removes the "control" edge to Control entities by IDs.
func (ru *RiskUpdate) RemoveControlIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveControlIDs(ids...)
	return ru
}

// RemoveControl removes "control" edges to Control entities.
func (ru *RiskUpdate) RemoveControl(c ...*Control) *RiskUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveControlIDs(ids...)
}

// ClearProcedure clears all "procedure" edges to the Procedure entity.
func (ru *RiskUpdate) ClearProcedure() *RiskUpdate {
	ru.mutation.ClearProcedure()
	return ru
}

// RemoveProcedureIDs removes the "procedure" edge to Procedure entities by IDs.
func (ru *RiskUpdate) RemoveProcedureIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveProcedureIDs(ids...)
	return ru
}

// RemoveProcedure removes "procedure" edges to Procedure entities.
func (ru *RiskUpdate) RemoveProcedure(p ...*Procedure) *RiskUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemoveProcedureIDs(ids...)
}

// ClearActionplans clears all "actionplans" edges to the ActionPlan entity.
func (ru *RiskUpdate) ClearActionplans() *RiskUpdate {
	ru.mutation.ClearActionplans()
	return ru
}

// RemoveActionplanIDs removes the "actionplans" edge to ActionPlan entities by IDs.
func (ru *RiskUpdate) RemoveActionplanIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveActionplanIDs(ids...)
	return ru
}

// RemoveActionplans removes "actionplans" edges to ActionPlan entities.
func (ru *RiskUpdate) RemoveActionplans(a ...*ActionPlan) *RiskUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveActionplanIDs(ids...)
}

// ClearProgram clears all "program" edges to the Program entity.
func (ru *RiskUpdate) ClearProgram() *RiskUpdate {
	ru.mutation.ClearProgram()
	return ru
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (ru *RiskUpdate) RemoveProgramIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveProgramIDs(ids...)
	return ru
}

// RemoveProgram removes "program" edges to Program entities.
func (ru *RiskUpdate) RemoveProgram(p ...*Program) *RiskUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemoveProgramIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RiskUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RiskUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RiskUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RiskUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RiskUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok && !ru.mutation.UpdatedAtCleared() {
		if risk.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized risk.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := risk.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *RiskUpdate) check() error {
	if v, ok := ru.mutation.Impact(); ok {
		if err := risk.ImpactValidator(v); err != nil {
			return &ValidationError{Name: "impact", err: fmt.Errorf(`generated: validator failed for field "Risk.impact": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Likelihood(); ok {
		if err := risk.LikelihoodValidator(v); err != nil {
			return &ValidationError{Name: "likelihood", err: fmt.Errorf(`generated: validator failed for field "Risk.likelihood": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RiskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiskUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RiskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(risk.Table, risk.Columns, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ru.mutation.CreatedAtCleared() {
		_spec.ClearField(risk.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(risk.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.UpdatedAtCleared() {
		_spec.ClearField(risk.FieldUpdatedAt, field.TypeTime)
	}
	if ru.mutation.CreatedByCleared() {
		_spec.ClearField(risk.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.UpdatedBy(); ok {
		_spec.SetField(risk.FieldUpdatedBy, field.TypeString, value)
	}
	if ru.mutation.UpdatedByCleared() {
		_spec.ClearField(risk.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(risk.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(risk.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.DeletedBy(); ok {
		_spec.SetField(risk.FieldDeletedBy, field.TypeString, value)
	}
	if ru.mutation.DeletedByCleared() {
		_spec.ClearField(risk.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ru.mutation.Tags(); ok {
		_spec.SetField(risk.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, risk.FieldTags, value)
		})
	}
	if ru.mutation.TagsCleared() {
		_spec.ClearField(risk.FieldTags, field.TypeJSON)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(risk.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Description(); ok {
		_spec.SetField(risk.FieldDescription, field.TypeString, value)
	}
	if ru.mutation.DescriptionCleared() {
		_spec.ClearField(risk.FieldDescription, field.TypeString)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(risk.FieldStatus, field.TypeString, value)
	}
	if ru.mutation.StatusCleared() {
		_spec.ClearField(risk.FieldStatus, field.TypeString)
	}
	if value, ok := ru.mutation.RiskType(); ok {
		_spec.SetField(risk.FieldRiskType, field.TypeString, value)
	}
	if ru.mutation.RiskTypeCleared() {
		_spec.ClearField(risk.FieldRiskType, field.TypeString)
	}
	if value, ok := ru.mutation.BusinessCosts(); ok {
		_spec.SetField(risk.FieldBusinessCosts, field.TypeString, value)
	}
	if ru.mutation.BusinessCostsCleared() {
		_spec.ClearField(risk.FieldBusinessCosts, field.TypeString)
	}
	if value, ok := ru.mutation.Impact(); ok {
		_spec.SetField(risk.FieldImpact, field.TypeEnum, value)
	}
	if ru.mutation.ImpactCleared() {
		_spec.ClearField(risk.FieldImpact, field.TypeEnum)
	}
	if value, ok := ru.mutation.Likelihood(); ok {
		_spec.SetField(risk.FieldLikelihood, field.TypeEnum, value)
	}
	if ru.mutation.LikelihoodCleared() {
		_spec.ClearField(risk.FieldLikelihood, field.TypeEnum)
	}
	if value, ok := ru.mutation.Mitigation(); ok {
		_spec.SetField(risk.FieldMitigation, field.TypeString, value)
	}
	if ru.mutation.MitigationCleared() {
		_spec.ClearField(risk.FieldMitigation, field.TypeString)
	}
	if value, ok := ru.mutation.Satisfies(); ok {
		_spec.SetField(risk.FieldSatisfies, field.TypeString, value)
	}
	if ru.mutation.SatisfiesCleared() {
		_spec.ClearField(risk.FieldSatisfies, field.TypeString)
	}
	if value, ok := ru.mutation.Details(); ok {
		_spec.SetField(risk.FieldDetails, field.TypeJSON, value)
	}
	if ru.mutation.DetailsCleared() {
		_spec.ClearField(risk.FieldDetails, field.TypeJSON)
	}
	if ru.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlTable,
			Columns: risk.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ControlRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedControlIDs(); len(nodes) > 0 && !ru.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlTable,
			Columns: risk.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlTable,
			Columns: risk.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProcedureTable,
			Columns: risk.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ProcedureRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedProcedureIDs(); len(nodes) > 0 && !ru.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProcedureTable,
			Columns: risk.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProcedureTable,
			Columns: risk.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ActionplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionplansTable,
			Columns: risk.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedActionplansIDs(); len(nodes) > 0 && !ru.mutation.ActionplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionplansTable,
			Columns: risk.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ActionplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionplansTable,
			Columns: risk.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramTable,
			Columns: risk.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ProgramRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedProgramIDs(); len(nodes) > 0 && !ru.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramTable,
			Columns: risk.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramTable,
			Columns: risk.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ru.schemaConfig.Risk
	ctx = internal.NewSchemaConfigContext(ctx, ru.schemaConfig)
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{risk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RiskUpdateOne is the builder for updating a single Risk entity.
type RiskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RiskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RiskUpdateOne) SetUpdatedAt(t time.Time) *RiskUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ruo *RiskUpdateOne) ClearUpdatedAt() *RiskUpdateOne {
	ruo.mutation.ClearUpdatedAt()
	return ruo
}

// SetUpdatedBy sets the "updated_by" field.
func (ruo *RiskUpdateOne) SetUpdatedBy(s string) *RiskUpdateOne {
	ruo.mutation.SetUpdatedBy(s)
	return ruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableUpdatedBy(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetUpdatedBy(*s)
	}
	return ruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ruo *RiskUpdateOne) ClearUpdatedBy() *RiskUpdateOne {
	ruo.mutation.ClearUpdatedBy()
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RiskUpdateOne) SetDeletedAt(t time.Time) *RiskUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableDeletedAt(t *time.Time) *RiskUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RiskUpdateOne) ClearDeletedAt() *RiskUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetDeletedBy sets the "deleted_by" field.
func (ruo *RiskUpdateOne) SetDeletedBy(s string) *RiskUpdateOne {
	ruo.mutation.SetDeletedBy(s)
	return ruo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableDeletedBy(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetDeletedBy(*s)
	}
	return ruo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ruo *RiskUpdateOne) ClearDeletedBy() *RiskUpdateOne {
	ruo.mutation.ClearDeletedBy()
	return ruo
}

// SetTags sets the "tags" field.
func (ruo *RiskUpdateOne) SetTags(s []string) *RiskUpdateOne {
	ruo.mutation.SetTags(s)
	return ruo
}

// AppendTags appends s to the "tags" field.
func (ruo *RiskUpdateOne) AppendTags(s []string) *RiskUpdateOne {
	ruo.mutation.AppendTags(s)
	return ruo
}

// ClearTags clears the value of the "tags" field.
func (ruo *RiskUpdateOne) ClearTags() *RiskUpdateOne {
	ruo.mutation.ClearTags()
	return ruo
}

// SetName sets the "name" field.
func (ruo *RiskUpdateOne) SetName(s string) *RiskUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableName(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetDescription sets the "description" field.
func (ruo *RiskUpdateOne) SetDescription(s string) *RiskUpdateOne {
	ruo.mutation.SetDescription(s)
	return ruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableDescription(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetDescription(*s)
	}
	return ruo
}

// ClearDescription clears the value of the "description" field.
func (ruo *RiskUpdateOne) ClearDescription() *RiskUpdateOne {
	ruo.mutation.ClearDescription()
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RiskUpdateOne) SetStatus(s string) *RiskUpdateOne {
	ruo.mutation.SetStatus(s)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableStatus(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetStatus(*s)
	}
	return ruo
}

// ClearStatus clears the value of the "status" field.
func (ruo *RiskUpdateOne) ClearStatus() *RiskUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// SetRiskType sets the "risk_type" field.
func (ruo *RiskUpdateOne) SetRiskType(s string) *RiskUpdateOne {
	ruo.mutation.SetRiskType(s)
	return ruo
}

// SetNillableRiskType sets the "risk_type" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableRiskType(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetRiskType(*s)
	}
	return ruo
}

// ClearRiskType clears the value of the "risk_type" field.
func (ruo *RiskUpdateOne) ClearRiskType() *RiskUpdateOne {
	ruo.mutation.ClearRiskType()
	return ruo
}

// SetBusinessCosts sets the "business_costs" field.
func (ruo *RiskUpdateOne) SetBusinessCosts(s string) *RiskUpdateOne {
	ruo.mutation.SetBusinessCosts(s)
	return ruo
}

// SetNillableBusinessCosts sets the "business_costs" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableBusinessCosts(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetBusinessCosts(*s)
	}
	return ruo
}

// ClearBusinessCosts clears the value of the "business_costs" field.
func (ruo *RiskUpdateOne) ClearBusinessCosts() *RiskUpdateOne {
	ruo.mutation.ClearBusinessCosts()
	return ruo
}

// SetImpact sets the "impact" field.
func (ruo *RiskUpdateOne) SetImpact(ei enums.RiskImpact) *RiskUpdateOne {
	ruo.mutation.SetImpact(ei)
	return ruo
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableImpact(ei *enums.RiskImpact) *RiskUpdateOne {
	if ei != nil {
		ruo.SetImpact(*ei)
	}
	return ruo
}

// ClearImpact clears the value of the "impact" field.
func (ruo *RiskUpdateOne) ClearImpact() *RiskUpdateOne {
	ruo.mutation.ClearImpact()
	return ruo
}

// SetLikelihood sets the "likelihood" field.
func (ruo *RiskUpdateOne) SetLikelihood(el enums.RiskLikelihood) *RiskUpdateOne {
	ruo.mutation.SetLikelihood(el)
	return ruo
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableLikelihood(el *enums.RiskLikelihood) *RiskUpdateOne {
	if el != nil {
		ruo.SetLikelihood(*el)
	}
	return ruo
}

// ClearLikelihood clears the value of the "likelihood" field.
func (ruo *RiskUpdateOne) ClearLikelihood() *RiskUpdateOne {
	ruo.mutation.ClearLikelihood()
	return ruo
}

// SetMitigation sets the "mitigation" field.
func (ruo *RiskUpdateOne) SetMitigation(s string) *RiskUpdateOne {
	ruo.mutation.SetMitigation(s)
	return ruo
}

// SetNillableMitigation sets the "mitigation" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableMitigation(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetMitigation(*s)
	}
	return ruo
}

// ClearMitigation clears the value of the "mitigation" field.
func (ruo *RiskUpdateOne) ClearMitigation() *RiskUpdateOne {
	ruo.mutation.ClearMitigation()
	return ruo
}

// SetSatisfies sets the "satisfies" field.
func (ruo *RiskUpdateOne) SetSatisfies(s string) *RiskUpdateOne {
	ruo.mutation.SetSatisfies(s)
	return ruo
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableSatisfies(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetSatisfies(*s)
	}
	return ruo
}

// ClearSatisfies clears the value of the "satisfies" field.
func (ruo *RiskUpdateOne) ClearSatisfies() *RiskUpdateOne {
	ruo.mutation.ClearSatisfies()
	return ruo
}

// SetDetails sets the "details" field.
func (ruo *RiskUpdateOne) SetDetails(m map[string]interface{}) *RiskUpdateOne {
	ruo.mutation.SetDetails(m)
	return ruo
}

// ClearDetails clears the value of the "details" field.
func (ruo *RiskUpdateOne) ClearDetails() *RiskUpdateOne {
	ruo.mutation.ClearDetails()
	return ruo
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (ruo *RiskUpdateOne) AddControlIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddControlIDs(ids...)
	return ruo
}

// AddControl adds the "control" edges to the Control entity.
func (ruo *RiskUpdateOne) AddControl(c ...*Control) *RiskUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedure" edge to the Procedure entity by IDs.
func (ruo *RiskUpdateOne) AddProcedureIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddProcedureIDs(ids...)
	return ruo
}

// AddProcedure adds the "procedure" edges to the Procedure entity.
func (ruo *RiskUpdateOne) AddProcedure(p ...*Procedure) *RiskUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddProcedureIDs(ids...)
}

// AddActionplanIDs adds the "actionplans" edge to the ActionPlan entity by IDs.
func (ruo *RiskUpdateOne) AddActionplanIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddActionplanIDs(ids...)
	return ruo
}

// AddActionplans adds the "actionplans" edges to the ActionPlan entity.
func (ruo *RiskUpdateOne) AddActionplans(a ...*ActionPlan) *RiskUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddActionplanIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (ruo *RiskUpdateOne) AddProgramIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddProgramIDs(ids...)
	return ruo
}

// AddProgram adds the "program" edges to the Program entity.
func (ruo *RiskUpdateOne) AddProgram(p ...*Program) *RiskUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddProgramIDs(ids...)
}

// Mutation returns the RiskMutation object of the builder.
func (ruo *RiskUpdateOne) Mutation() *RiskMutation {
	return ruo.mutation
}

// ClearControl clears all "control" edges to the Control entity.
func (ruo *RiskUpdateOne) ClearControl() *RiskUpdateOne {
	ruo.mutation.ClearControl()
	return ruo
}

// RemoveControlIDs removes the "control" edge to Control entities by IDs.
func (ruo *RiskUpdateOne) RemoveControlIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveControlIDs(ids...)
	return ruo
}

// RemoveControl removes "control" edges to Control entities.
func (ruo *RiskUpdateOne) RemoveControl(c ...*Control) *RiskUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveControlIDs(ids...)
}

// ClearProcedure clears all "procedure" edges to the Procedure entity.
func (ruo *RiskUpdateOne) ClearProcedure() *RiskUpdateOne {
	ruo.mutation.ClearProcedure()
	return ruo
}

// RemoveProcedureIDs removes the "procedure" edge to Procedure entities by IDs.
func (ruo *RiskUpdateOne) RemoveProcedureIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveProcedureIDs(ids...)
	return ruo
}

// RemoveProcedure removes "procedure" edges to Procedure entities.
func (ruo *RiskUpdateOne) RemoveProcedure(p ...*Procedure) *RiskUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemoveProcedureIDs(ids...)
}

// ClearActionplans clears all "actionplans" edges to the ActionPlan entity.
func (ruo *RiskUpdateOne) ClearActionplans() *RiskUpdateOne {
	ruo.mutation.ClearActionplans()
	return ruo
}

// RemoveActionplanIDs removes the "actionplans" edge to ActionPlan entities by IDs.
func (ruo *RiskUpdateOne) RemoveActionplanIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveActionplanIDs(ids...)
	return ruo
}

// RemoveActionplans removes "actionplans" edges to ActionPlan entities.
func (ruo *RiskUpdateOne) RemoveActionplans(a ...*ActionPlan) *RiskUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveActionplanIDs(ids...)
}

// ClearProgram clears all "program" edges to the Program entity.
func (ruo *RiskUpdateOne) ClearProgram() *RiskUpdateOne {
	ruo.mutation.ClearProgram()
	return ruo
}

// RemoveProgramIDs removes the "program" edge to Program entities by IDs.
func (ruo *RiskUpdateOne) RemoveProgramIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveProgramIDs(ids...)
	return ruo
}

// RemoveProgram removes "program" edges to Program entities.
func (ruo *RiskUpdateOne) RemoveProgram(p ...*Program) *RiskUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemoveProgramIDs(ids...)
}

// Where appends a list predicates to the RiskUpdate builder.
func (ruo *RiskUpdateOne) Where(ps ...predicate.Risk) *RiskUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RiskUpdateOne) Select(field string, fields ...string) *RiskUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Risk entity.
func (ruo *RiskUpdateOne) Save(ctx context.Context) (*Risk, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RiskUpdateOne) SaveX(ctx context.Context) *Risk {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RiskUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RiskUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RiskUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok && !ruo.mutation.UpdatedAtCleared() {
		if risk.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized risk.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := risk.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RiskUpdateOne) check() error {
	if v, ok := ruo.mutation.Impact(); ok {
		if err := risk.ImpactValidator(v); err != nil {
			return &ValidationError{Name: "impact", err: fmt.Errorf(`generated: validator failed for field "Risk.impact": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Likelihood(); ok {
		if err := risk.LikelihoodValidator(v); err != nil {
			return &ValidationError{Name: "likelihood", err: fmt.Errorf(`generated: validator failed for field "Risk.likelihood": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RiskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiskUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RiskUpdateOne) sqlSave(ctx context.Context) (_node *Risk, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(risk.Table, risk.Columns, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Risk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, risk.FieldID)
		for _, f := range fields {
			if !risk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != risk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ruo.mutation.CreatedAtCleared() {
		_spec.ClearField(risk.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(risk.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(risk.FieldUpdatedAt, field.TypeTime)
	}
	if ruo.mutation.CreatedByCleared() {
		_spec.ClearField(risk.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.UpdatedBy(); ok {
		_spec.SetField(risk.FieldUpdatedBy, field.TypeString, value)
	}
	if ruo.mutation.UpdatedByCleared() {
		_spec.ClearField(risk.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(risk.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(risk.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.DeletedBy(); ok {
		_spec.SetField(risk.FieldDeletedBy, field.TypeString, value)
	}
	if ruo.mutation.DeletedByCleared() {
		_spec.ClearField(risk.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.Tags(); ok {
		_spec.SetField(risk.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, risk.FieldTags, value)
		})
	}
	if ruo.mutation.TagsCleared() {
		_spec.ClearField(risk.FieldTags, field.TypeJSON)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(risk.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Description(); ok {
		_spec.SetField(risk.FieldDescription, field.TypeString, value)
	}
	if ruo.mutation.DescriptionCleared() {
		_spec.ClearField(risk.FieldDescription, field.TypeString)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(risk.FieldStatus, field.TypeString, value)
	}
	if ruo.mutation.StatusCleared() {
		_spec.ClearField(risk.FieldStatus, field.TypeString)
	}
	if value, ok := ruo.mutation.RiskType(); ok {
		_spec.SetField(risk.FieldRiskType, field.TypeString, value)
	}
	if ruo.mutation.RiskTypeCleared() {
		_spec.ClearField(risk.FieldRiskType, field.TypeString)
	}
	if value, ok := ruo.mutation.BusinessCosts(); ok {
		_spec.SetField(risk.FieldBusinessCosts, field.TypeString, value)
	}
	if ruo.mutation.BusinessCostsCleared() {
		_spec.ClearField(risk.FieldBusinessCosts, field.TypeString)
	}
	if value, ok := ruo.mutation.Impact(); ok {
		_spec.SetField(risk.FieldImpact, field.TypeEnum, value)
	}
	if ruo.mutation.ImpactCleared() {
		_spec.ClearField(risk.FieldImpact, field.TypeEnum)
	}
	if value, ok := ruo.mutation.Likelihood(); ok {
		_spec.SetField(risk.FieldLikelihood, field.TypeEnum, value)
	}
	if ruo.mutation.LikelihoodCleared() {
		_spec.ClearField(risk.FieldLikelihood, field.TypeEnum)
	}
	if value, ok := ruo.mutation.Mitigation(); ok {
		_spec.SetField(risk.FieldMitigation, field.TypeString, value)
	}
	if ruo.mutation.MitigationCleared() {
		_spec.ClearField(risk.FieldMitigation, field.TypeString)
	}
	if value, ok := ruo.mutation.Satisfies(); ok {
		_spec.SetField(risk.FieldSatisfies, field.TypeString, value)
	}
	if ruo.mutation.SatisfiesCleared() {
		_spec.ClearField(risk.FieldSatisfies, field.TypeString)
	}
	if value, ok := ruo.mutation.Details(); ok {
		_spec.SetField(risk.FieldDetails, field.TypeJSON, value)
	}
	if ruo.mutation.DetailsCleared() {
		_spec.ClearField(risk.FieldDetails, field.TypeJSON)
	}
	if ruo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlTable,
			Columns: risk.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ControlRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedControlIDs(); len(nodes) > 0 && !ruo.mutation.ControlCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlTable,
			Columns: risk.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlTable,
			Columns: risk.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProcedureTable,
			Columns: risk.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ProcedureRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedProcedureIDs(); len(nodes) > 0 && !ruo.mutation.ProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProcedureTable,
			Columns: risk.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProcedureTable,
			Columns: risk.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ActionplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionplansTable,
			Columns: risk.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskActionplans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedActionplansIDs(); len(nodes) > 0 && !ruo.mutation.ActionplansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionplansTable,
			Columns: risk.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ActionplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionplansTable,
			Columns: risk.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramTable,
			Columns: risk.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ProgramRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedProgramIDs(); len(nodes) > 0 && !ruo.mutation.ProgramCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramTable,
			Columns: risk.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramTable,
			Columns: risk.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ruo.schemaConfig.Risk
	ctx = internal.NewSchemaConfigContext(ctx, ruo.schemaConfig)
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Risk{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{risk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
