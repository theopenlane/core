// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// RiskUpdate is the builder for updating Risk entities.
type RiskUpdate struct {
	config
	hooks     []Hook
	mutation  *RiskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RiskUpdate builder.
func (ru *RiskUpdate) Where(ps ...predicate.Risk) *RiskUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RiskUpdate) SetUpdatedAt(t time.Time) *RiskUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ru *RiskUpdate) ClearUpdatedAt() *RiskUpdate {
	ru.mutation.ClearUpdatedAt()
	return ru
}

// SetUpdatedBy sets the "updated_by" field.
func (ru *RiskUpdate) SetUpdatedBy(s string) *RiskUpdate {
	ru.mutation.SetUpdatedBy(s)
	return ru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableUpdatedBy(s *string) *RiskUpdate {
	if s != nil {
		ru.SetUpdatedBy(*s)
	}
	return ru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ru *RiskUpdate) ClearUpdatedBy() *RiskUpdate {
	ru.mutation.ClearUpdatedBy()
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RiskUpdate) SetDeletedAt(t time.Time) *RiskUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableDeletedAt(t *time.Time) *RiskUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RiskUpdate) ClearDeletedAt() *RiskUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetDeletedBy sets the "deleted_by" field.
func (ru *RiskUpdate) SetDeletedBy(s string) *RiskUpdate {
	ru.mutation.SetDeletedBy(s)
	return ru
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableDeletedBy(s *string) *RiskUpdate {
	if s != nil {
		ru.SetDeletedBy(*s)
	}
	return ru
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ru *RiskUpdate) ClearDeletedBy() *RiskUpdate {
	ru.mutation.ClearDeletedBy()
	return ru
}

// SetTags sets the "tags" field.
func (ru *RiskUpdate) SetTags(s []string) *RiskUpdate {
	ru.mutation.SetTags(s)
	return ru
}

// AppendTags appends s to the "tags" field.
func (ru *RiskUpdate) AppendTags(s []string) *RiskUpdate {
	ru.mutation.AppendTags(s)
	return ru
}

// ClearTags clears the value of the "tags" field.
func (ru *RiskUpdate) ClearTags() *RiskUpdate {
	ru.mutation.ClearTags()
	return ru
}

// SetName sets the "name" field.
func (ru *RiskUpdate) SetName(s string) *RiskUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableName(s *string) *RiskUpdate {
	if s != nil {
		ru.SetName(*s)
	}
	return ru
}

// SetStatus sets the "status" field.
func (ru *RiskUpdate) SetStatus(es enums.RiskStatus) *RiskUpdate {
	ru.mutation.SetStatus(es)
	return ru
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableStatus(es *enums.RiskStatus) *RiskUpdate {
	if es != nil {
		ru.SetStatus(*es)
	}
	return ru
}

// ClearStatus clears the value of the "status" field.
func (ru *RiskUpdate) ClearStatus() *RiskUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// SetRiskType sets the "risk_type" field.
func (ru *RiskUpdate) SetRiskType(s string) *RiskUpdate {
	ru.mutation.SetRiskType(s)
	return ru
}

// SetNillableRiskType sets the "risk_type" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableRiskType(s *string) *RiskUpdate {
	if s != nil {
		ru.SetRiskType(*s)
	}
	return ru
}

// ClearRiskType clears the value of the "risk_type" field.
func (ru *RiskUpdate) ClearRiskType() *RiskUpdate {
	ru.mutation.ClearRiskType()
	return ru
}

// SetCategory sets the "category" field.
func (ru *RiskUpdate) SetCategory(s string) *RiskUpdate {
	ru.mutation.SetCategory(s)
	return ru
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableCategory(s *string) *RiskUpdate {
	if s != nil {
		ru.SetCategory(*s)
	}
	return ru
}

// ClearCategory clears the value of the "category" field.
func (ru *RiskUpdate) ClearCategory() *RiskUpdate {
	ru.mutation.ClearCategory()
	return ru
}

// SetImpact sets the "impact" field.
func (ru *RiskUpdate) SetImpact(ei enums.RiskImpact) *RiskUpdate {
	ru.mutation.SetImpact(ei)
	return ru
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableImpact(ei *enums.RiskImpact) *RiskUpdate {
	if ei != nil {
		ru.SetImpact(*ei)
	}
	return ru
}

// ClearImpact clears the value of the "impact" field.
func (ru *RiskUpdate) ClearImpact() *RiskUpdate {
	ru.mutation.ClearImpact()
	return ru
}

// SetLikelihood sets the "likelihood" field.
func (ru *RiskUpdate) SetLikelihood(el enums.RiskLikelihood) *RiskUpdate {
	ru.mutation.SetLikelihood(el)
	return ru
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableLikelihood(el *enums.RiskLikelihood) *RiskUpdate {
	if el != nil {
		ru.SetLikelihood(*el)
	}
	return ru
}

// ClearLikelihood clears the value of the "likelihood" field.
func (ru *RiskUpdate) ClearLikelihood() *RiskUpdate {
	ru.mutation.ClearLikelihood()
	return ru
}

// SetScore sets the "score" field.
func (ru *RiskUpdate) SetScore(i int) *RiskUpdate {
	ru.mutation.ResetScore()
	ru.mutation.SetScore(i)
	return ru
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableScore(i *int) *RiskUpdate {
	if i != nil {
		ru.SetScore(*i)
	}
	return ru
}

// AddScore adds i to the "score" field.
func (ru *RiskUpdate) AddScore(i int) *RiskUpdate {
	ru.mutation.AddScore(i)
	return ru
}

// ClearScore clears the value of the "score" field.
func (ru *RiskUpdate) ClearScore() *RiskUpdate {
	ru.mutation.ClearScore()
	return ru
}

// SetMitigation sets the "mitigation" field.
func (ru *RiskUpdate) SetMitigation(s string) *RiskUpdate {
	ru.mutation.SetMitigation(s)
	return ru
}

// SetNillableMitigation sets the "mitigation" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableMitigation(s *string) *RiskUpdate {
	if s != nil {
		ru.SetMitigation(*s)
	}
	return ru
}

// ClearMitigation clears the value of the "mitigation" field.
func (ru *RiskUpdate) ClearMitigation() *RiskUpdate {
	ru.mutation.ClearMitigation()
	return ru
}

// SetDetails sets the "details" field.
func (ru *RiskUpdate) SetDetails(s string) *RiskUpdate {
	ru.mutation.SetDetails(s)
	return ru
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableDetails(s *string) *RiskUpdate {
	if s != nil {
		ru.SetDetails(*s)
	}
	return ru
}

// ClearDetails clears the value of the "details" field.
func (ru *RiskUpdate) ClearDetails() *RiskUpdate {
	ru.mutation.ClearDetails()
	return ru
}

// SetBusinessCosts sets the "business_costs" field.
func (ru *RiskUpdate) SetBusinessCosts(s string) *RiskUpdate {
	ru.mutation.SetBusinessCosts(s)
	return ru
}

// SetNillableBusinessCosts sets the "business_costs" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableBusinessCosts(s *string) *RiskUpdate {
	if s != nil {
		ru.SetBusinessCosts(*s)
	}
	return ru
}

// ClearBusinessCosts clears the value of the "business_costs" field.
func (ru *RiskUpdate) ClearBusinessCosts() *RiskUpdate {
	ru.mutation.ClearBusinessCosts()
	return ru
}

// SetStakeholderID sets the "stakeholder_id" field.
func (ru *RiskUpdate) SetStakeholderID(s string) *RiskUpdate {
	ru.mutation.SetStakeholderID(s)
	return ru
}

// SetNillableStakeholderID sets the "stakeholder_id" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableStakeholderID(s *string) *RiskUpdate {
	if s != nil {
		ru.SetStakeholderID(*s)
	}
	return ru
}

// ClearStakeholderID clears the value of the "stakeholder_id" field.
func (ru *RiskUpdate) ClearStakeholderID() *RiskUpdate {
	ru.mutation.ClearStakeholderID()
	return ru
}

// SetDelegateID sets the "delegate_id" field.
func (ru *RiskUpdate) SetDelegateID(s string) *RiskUpdate {
	ru.mutation.SetDelegateID(s)
	return ru
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (ru *RiskUpdate) SetNillableDelegateID(s *string) *RiskUpdate {
	if s != nil {
		ru.SetDelegateID(*s)
	}
	return ru
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (ru *RiskUpdate) ClearDelegateID() *RiskUpdate {
	ru.mutation.ClearDelegateID()
	return ru
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (ru *RiskUpdate) AddBlockedGroupIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddBlockedGroupIDs(ids...)
	return ru
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (ru *RiskUpdate) AddBlockedGroups(g ...*Group) *RiskUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ru.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (ru *RiskUpdate) AddEditorIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddEditorIDs(ids...)
	return ru
}

// AddEditors adds the "editors" edges to the Group entity.
func (ru *RiskUpdate) AddEditors(g ...*Group) *RiskUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ru.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (ru *RiskUpdate) AddViewerIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddViewerIDs(ids...)
	return ru
}

// AddViewers adds the "viewers" edges to the Group entity.
func (ru *RiskUpdate) AddViewers(g ...*Group) *RiskUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ru.AddViewerIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (ru *RiskUpdate) AddControlIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddControlIDs(ids...)
	return ru
}

// AddControls adds the "controls" edges to the Control entity.
func (ru *RiskUpdate) AddControls(c ...*Control) *RiskUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (ru *RiskUpdate) AddSubcontrolIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddSubcontrolIDs(ids...)
	return ru
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (ru *RiskUpdate) AddSubcontrols(s ...*Subcontrol) *RiskUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddSubcontrolIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (ru *RiskUpdate) AddProcedureIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddProcedureIDs(ids...)
	return ru
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (ru *RiskUpdate) AddProcedures(p ...*Procedure) *RiskUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (ru *RiskUpdate) AddInternalPolicyIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddInternalPolicyIDs(ids...)
	return ru
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (ru *RiskUpdate) AddInternalPolicies(i ...*InternalPolicy) *RiskUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.AddInternalPolicyIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (ru *RiskUpdate) AddProgramIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddProgramIDs(ids...)
	return ru
}

// AddPrograms adds the "programs" edges to the Program entity.
func (ru *RiskUpdate) AddPrograms(p ...*Program) *RiskUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.AddProgramIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (ru *RiskUpdate) AddActionPlanIDs(ids ...string) *RiskUpdate {
	ru.mutation.AddActionPlanIDs(ids...)
	return ru
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (ru *RiskUpdate) AddActionPlans(a ...*ActionPlan) *RiskUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddActionPlanIDs(ids...)
}

// SetStakeholder sets the "stakeholder" edge to the Group entity.
func (ru *RiskUpdate) SetStakeholder(g *Group) *RiskUpdate {
	return ru.SetStakeholderID(g.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (ru *RiskUpdate) SetDelegate(g *Group) *RiskUpdate {
	return ru.SetDelegateID(g.ID)
}

// Mutation returns the RiskMutation object of the builder.
func (ru *RiskUpdate) Mutation() *RiskMutation {
	return ru.mutation
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (ru *RiskUpdate) ClearBlockedGroups() *RiskUpdate {
	ru.mutation.ClearBlockedGroups()
	return ru
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (ru *RiskUpdate) RemoveBlockedGroupIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveBlockedGroupIDs(ids...)
	return ru
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (ru *RiskUpdate) RemoveBlockedGroups(g ...*Group) *RiskUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ru.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (ru *RiskUpdate) ClearEditors() *RiskUpdate {
	ru.mutation.ClearEditors()
	return ru
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (ru *RiskUpdate) RemoveEditorIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveEditorIDs(ids...)
	return ru
}

// RemoveEditors removes "editors" edges to Group entities.
func (ru *RiskUpdate) RemoveEditors(g ...*Group) *RiskUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ru.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (ru *RiskUpdate) ClearViewers() *RiskUpdate {
	ru.mutation.ClearViewers()
	return ru
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (ru *RiskUpdate) RemoveViewerIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveViewerIDs(ids...)
	return ru
}

// RemoveViewers removes "viewers" edges to Group entities.
func (ru *RiskUpdate) RemoveViewers(g ...*Group) *RiskUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ru.RemoveViewerIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (ru *RiskUpdate) ClearControls() *RiskUpdate {
	ru.mutation.ClearControls()
	return ru
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (ru *RiskUpdate) RemoveControlIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveControlIDs(ids...)
	return ru
}

// RemoveControls removes "controls" edges to Control entities.
func (ru *RiskUpdate) RemoveControls(c ...*Control) *RiskUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ru.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (ru *RiskUpdate) ClearSubcontrols() *RiskUpdate {
	ru.mutation.ClearSubcontrols()
	return ru
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (ru *RiskUpdate) RemoveSubcontrolIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveSubcontrolIDs(ids...)
	return ru
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (ru *RiskUpdate) RemoveSubcontrols(s ...*Subcontrol) *RiskUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveSubcontrolIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (ru *RiskUpdate) ClearProcedures() *RiskUpdate {
	ru.mutation.ClearProcedures()
	return ru
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (ru *RiskUpdate) RemoveProcedureIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveProcedureIDs(ids...)
	return ru
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (ru *RiskUpdate) RemoveProcedures(p ...*Procedure) *RiskUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemoveProcedureIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (ru *RiskUpdate) ClearInternalPolicies() *RiskUpdate {
	ru.mutation.ClearInternalPolicies()
	return ru
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (ru *RiskUpdate) RemoveInternalPolicyIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveInternalPolicyIDs(ids...)
	return ru
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (ru *RiskUpdate) RemoveInternalPolicies(i ...*InternalPolicy) *RiskUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.RemoveInternalPolicyIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (ru *RiskUpdate) ClearPrograms() *RiskUpdate {
	ru.mutation.ClearPrograms()
	return ru
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (ru *RiskUpdate) RemoveProgramIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveProgramIDs(ids...)
	return ru
}

// RemovePrograms removes "programs" edges to Program entities.
func (ru *RiskUpdate) RemovePrograms(p ...*Program) *RiskUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ru.RemoveProgramIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (ru *RiskUpdate) ClearActionPlans() *RiskUpdate {
	ru.mutation.ClearActionPlans()
	return ru
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (ru *RiskUpdate) RemoveActionPlanIDs(ids ...string) *RiskUpdate {
	ru.mutation.RemoveActionPlanIDs(ids...)
	return ru
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (ru *RiskUpdate) RemoveActionPlans(a ...*ActionPlan) *RiskUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveActionPlanIDs(ids...)
}

// ClearStakeholder clears the "stakeholder" edge to the Group entity.
func (ru *RiskUpdate) ClearStakeholder() *RiskUpdate {
	ru.mutation.ClearStakeholder()
	return ru
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (ru *RiskUpdate) ClearDelegate() *RiskUpdate {
	ru.mutation.ClearDelegate()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RiskUpdate) Save(ctx context.Context) (int, error) {
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RiskUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RiskUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RiskUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RiskUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok && !ru.mutation.UpdatedAtCleared() {
		if risk.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized risk.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := risk.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *RiskUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := risk.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Risk.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Status(); ok {
		if err := risk.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Risk.status": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Impact(); ok {
		if err := risk.ImpactValidator(v); err != nil {
			return &ValidationError{Name: "impact", err: fmt.Errorf(`generated: validator failed for field "Risk.impact": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Likelihood(); ok {
		if err := risk.LikelihoodValidator(v); err != nil {
			return &ValidationError{Name: "likelihood", err: fmt.Errorf(`generated: validator failed for field "Risk.likelihood": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RiskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiskUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RiskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(risk.Table, risk.Columns, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ru.mutation.CreatedAtCleared() {
		_spec.ClearField(risk.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(risk.FieldUpdatedAt, field.TypeTime, value)
	}
	if ru.mutation.UpdatedAtCleared() {
		_spec.ClearField(risk.FieldUpdatedAt, field.TypeTime)
	}
	if ru.mutation.CreatedByCleared() {
		_spec.ClearField(risk.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.UpdatedBy(); ok {
		_spec.SetField(risk.FieldUpdatedBy, field.TypeString, value)
	}
	if ru.mutation.UpdatedByCleared() {
		_spec.ClearField(risk.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(risk.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(risk.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.DeletedBy(); ok {
		_spec.SetField(risk.FieldDeletedBy, field.TypeString, value)
	}
	if ru.mutation.DeletedByCleared() {
		_spec.ClearField(risk.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ru.mutation.Tags(); ok {
		_spec.SetField(risk.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ru.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, risk.FieldTags, value)
		})
	}
	if ru.mutation.TagsCleared() {
		_spec.ClearField(risk.FieldTags, field.TypeJSON)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(risk.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Status(); ok {
		_spec.SetField(risk.FieldStatus, field.TypeEnum, value)
	}
	if ru.mutation.StatusCleared() {
		_spec.ClearField(risk.FieldStatus, field.TypeEnum)
	}
	if value, ok := ru.mutation.RiskType(); ok {
		_spec.SetField(risk.FieldRiskType, field.TypeString, value)
	}
	if ru.mutation.RiskTypeCleared() {
		_spec.ClearField(risk.FieldRiskType, field.TypeString)
	}
	if value, ok := ru.mutation.Category(); ok {
		_spec.SetField(risk.FieldCategory, field.TypeString, value)
	}
	if ru.mutation.CategoryCleared() {
		_spec.ClearField(risk.FieldCategory, field.TypeString)
	}
	if value, ok := ru.mutation.Impact(); ok {
		_spec.SetField(risk.FieldImpact, field.TypeEnum, value)
	}
	if ru.mutation.ImpactCleared() {
		_spec.ClearField(risk.FieldImpact, field.TypeEnum)
	}
	if value, ok := ru.mutation.Likelihood(); ok {
		_spec.SetField(risk.FieldLikelihood, field.TypeEnum, value)
	}
	if ru.mutation.LikelihoodCleared() {
		_spec.ClearField(risk.FieldLikelihood, field.TypeEnum)
	}
	if value, ok := ru.mutation.Score(); ok {
		_spec.SetField(risk.FieldScore, field.TypeInt, value)
	}
	if value, ok := ru.mutation.AddedScore(); ok {
		_spec.AddField(risk.FieldScore, field.TypeInt, value)
	}
	if ru.mutation.ScoreCleared() {
		_spec.ClearField(risk.FieldScore, field.TypeInt)
	}
	if value, ok := ru.mutation.Mitigation(); ok {
		_spec.SetField(risk.FieldMitigation, field.TypeString, value)
	}
	if ru.mutation.MitigationCleared() {
		_spec.ClearField(risk.FieldMitigation, field.TypeString)
	}
	if value, ok := ru.mutation.Details(); ok {
		_spec.SetField(risk.FieldDetails, field.TypeString, value)
	}
	if ru.mutation.DetailsCleared() {
		_spec.ClearField(risk.FieldDetails, field.TypeString)
	}
	if value, ok := ru.mutation.BusinessCosts(); ok {
		_spec.SetField(risk.FieldBusinessCosts, field.TypeString, value)
	}
	if ru.mutation.BusinessCostsCleared() {
		_spec.ClearField(risk.FieldBusinessCosts, field.TypeString)
	}
	if ru.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !ru.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !ru.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedViewersIDs(); len(nodes) > 0 && !ru.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ControlRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedControlsIDs(); len(nodes) > 0 && !ru.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.SubcontrolRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !ru.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.SubcontrolRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.SubcontrolRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ProcedureRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !ru.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.InternalPolicyRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !ru.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ProgramRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !ru.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !ru.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.StakeholderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.StakeholderTable,
			Columns: []string{risk.StakeholderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StakeholderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.StakeholderTable,
			Columns: []string{risk.StakeholderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.DelegateTable,
			Columns: []string{risk.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.DelegateTable,
			Columns: []string{risk.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ru.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ru.schemaConfig.Risk
	ctx = internal.NewSchemaConfigContext(ctx, ru.schemaConfig)
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{risk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RiskUpdateOne is the builder for updating a single Risk entity.
type RiskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RiskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RiskUpdateOne) SetUpdatedAt(t time.Time) *RiskUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ruo *RiskUpdateOne) ClearUpdatedAt() *RiskUpdateOne {
	ruo.mutation.ClearUpdatedAt()
	return ruo
}

// SetUpdatedBy sets the "updated_by" field.
func (ruo *RiskUpdateOne) SetUpdatedBy(s string) *RiskUpdateOne {
	ruo.mutation.SetUpdatedBy(s)
	return ruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableUpdatedBy(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetUpdatedBy(*s)
	}
	return ruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ruo *RiskUpdateOne) ClearUpdatedBy() *RiskUpdateOne {
	ruo.mutation.ClearUpdatedBy()
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RiskUpdateOne) SetDeletedAt(t time.Time) *RiskUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableDeletedAt(t *time.Time) *RiskUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RiskUpdateOne) ClearDeletedAt() *RiskUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetDeletedBy sets the "deleted_by" field.
func (ruo *RiskUpdateOne) SetDeletedBy(s string) *RiskUpdateOne {
	ruo.mutation.SetDeletedBy(s)
	return ruo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableDeletedBy(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetDeletedBy(*s)
	}
	return ruo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ruo *RiskUpdateOne) ClearDeletedBy() *RiskUpdateOne {
	ruo.mutation.ClearDeletedBy()
	return ruo
}

// SetTags sets the "tags" field.
func (ruo *RiskUpdateOne) SetTags(s []string) *RiskUpdateOne {
	ruo.mutation.SetTags(s)
	return ruo
}

// AppendTags appends s to the "tags" field.
func (ruo *RiskUpdateOne) AppendTags(s []string) *RiskUpdateOne {
	ruo.mutation.AppendTags(s)
	return ruo
}

// ClearTags clears the value of the "tags" field.
func (ruo *RiskUpdateOne) ClearTags() *RiskUpdateOne {
	ruo.mutation.ClearTags()
	return ruo
}

// SetName sets the "name" field.
func (ruo *RiskUpdateOne) SetName(s string) *RiskUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableName(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetName(*s)
	}
	return ruo
}

// SetStatus sets the "status" field.
func (ruo *RiskUpdateOne) SetStatus(es enums.RiskStatus) *RiskUpdateOne {
	ruo.mutation.SetStatus(es)
	return ruo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableStatus(es *enums.RiskStatus) *RiskUpdateOne {
	if es != nil {
		ruo.SetStatus(*es)
	}
	return ruo
}

// ClearStatus clears the value of the "status" field.
func (ruo *RiskUpdateOne) ClearStatus() *RiskUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// SetRiskType sets the "risk_type" field.
func (ruo *RiskUpdateOne) SetRiskType(s string) *RiskUpdateOne {
	ruo.mutation.SetRiskType(s)
	return ruo
}

// SetNillableRiskType sets the "risk_type" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableRiskType(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetRiskType(*s)
	}
	return ruo
}

// ClearRiskType clears the value of the "risk_type" field.
func (ruo *RiskUpdateOne) ClearRiskType() *RiskUpdateOne {
	ruo.mutation.ClearRiskType()
	return ruo
}

// SetCategory sets the "category" field.
func (ruo *RiskUpdateOne) SetCategory(s string) *RiskUpdateOne {
	ruo.mutation.SetCategory(s)
	return ruo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableCategory(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetCategory(*s)
	}
	return ruo
}

// ClearCategory clears the value of the "category" field.
func (ruo *RiskUpdateOne) ClearCategory() *RiskUpdateOne {
	ruo.mutation.ClearCategory()
	return ruo
}

// SetImpact sets the "impact" field.
func (ruo *RiskUpdateOne) SetImpact(ei enums.RiskImpact) *RiskUpdateOne {
	ruo.mutation.SetImpact(ei)
	return ruo
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableImpact(ei *enums.RiskImpact) *RiskUpdateOne {
	if ei != nil {
		ruo.SetImpact(*ei)
	}
	return ruo
}

// ClearImpact clears the value of the "impact" field.
func (ruo *RiskUpdateOne) ClearImpact() *RiskUpdateOne {
	ruo.mutation.ClearImpact()
	return ruo
}

// SetLikelihood sets the "likelihood" field.
func (ruo *RiskUpdateOne) SetLikelihood(el enums.RiskLikelihood) *RiskUpdateOne {
	ruo.mutation.SetLikelihood(el)
	return ruo
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableLikelihood(el *enums.RiskLikelihood) *RiskUpdateOne {
	if el != nil {
		ruo.SetLikelihood(*el)
	}
	return ruo
}

// ClearLikelihood clears the value of the "likelihood" field.
func (ruo *RiskUpdateOne) ClearLikelihood() *RiskUpdateOne {
	ruo.mutation.ClearLikelihood()
	return ruo
}

// SetScore sets the "score" field.
func (ruo *RiskUpdateOne) SetScore(i int) *RiskUpdateOne {
	ruo.mutation.ResetScore()
	ruo.mutation.SetScore(i)
	return ruo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableScore(i *int) *RiskUpdateOne {
	if i != nil {
		ruo.SetScore(*i)
	}
	return ruo
}

// AddScore adds i to the "score" field.
func (ruo *RiskUpdateOne) AddScore(i int) *RiskUpdateOne {
	ruo.mutation.AddScore(i)
	return ruo
}

// ClearScore clears the value of the "score" field.
func (ruo *RiskUpdateOne) ClearScore() *RiskUpdateOne {
	ruo.mutation.ClearScore()
	return ruo
}

// SetMitigation sets the "mitigation" field.
func (ruo *RiskUpdateOne) SetMitigation(s string) *RiskUpdateOne {
	ruo.mutation.SetMitigation(s)
	return ruo
}

// SetNillableMitigation sets the "mitigation" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableMitigation(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetMitigation(*s)
	}
	return ruo
}

// ClearMitigation clears the value of the "mitigation" field.
func (ruo *RiskUpdateOne) ClearMitigation() *RiskUpdateOne {
	ruo.mutation.ClearMitigation()
	return ruo
}

// SetDetails sets the "details" field.
func (ruo *RiskUpdateOne) SetDetails(s string) *RiskUpdateOne {
	ruo.mutation.SetDetails(s)
	return ruo
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableDetails(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetDetails(*s)
	}
	return ruo
}

// ClearDetails clears the value of the "details" field.
func (ruo *RiskUpdateOne) ClearDetails() *RiskUpdateOne {
	ruo.mutation.ClearDetails()
	return ruo
}

// SetBusinessCosts sets the "business_costs" field.
func (ruo *RiskUpdateOne) SetBusinessCosts(s string) *RiskUpdateOne {
	ruo.mutation.SetBusinessCosts(s)
	return ruo
}

// SetNillableBusinessCosts sets the "business_costs" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableBusinessCosts(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetBusinessCosts(*s)
	}
	return ruo
}

// ClearBusinessCosts clears the value of the "business_costs" field.
func (ruo *RiskUpdateOne) ClearBusinessCosts() *RiskUpdateOne {
	ruo.mutation.ClearBusinessCosts()
	return ruo
}

// SetStakeholderID sets the "stakeholder_id" field.
func (ruo *RiskUpdateOne) SetStakeholderID(s string) *RiskUpdateOne {
	ruo.mutation.SetStakeholderID(s)
	return ruo
}

// SetNillableStakeholderID sets the "stakeholder_id" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableStakeholderID(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetStakeholderID(*s)
	}
	return ruo
}

// ClearStakeholderID clears the value of the "stakeholder_id" field.
func (ruo *RiskUpdateOne) ClearStakeholderID() *RiskUpdateOne {
	ruo.mutation.ClearStakeholderID()
	return ruo
}

// SetDelegateID sets the "delegate_id" field.
func (ruo *RiskUpdateOne) SetDelegateID(s string) *RiskUpdateOne {
	ruo.mutation.SetDelegateID(s)
	return ruo
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (ruo *RiskUpdateOne) SetNillableDelegateID(s *string) *RiskUpdateOne {
	if s != nil {
		ruo.SetDelegateID(*s)
	}
	return ruo
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (ruo *RiskUpdateOne) ClearDelegateID() *RiskUpdateOne {
	ruo.mutation.ClearDelegateID()
	return ruo
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (ruo *RiskUpdateOne) AddBlockedGroupIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddBlockedGroupIDs(ids...)
	return ruo
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (ruo *RiskUpdateOne) AddBlockedGroups(g ...*Group) *RiskUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ruo.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (ruo *RiskUpdateOne) AddEditorIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddEditorIDs(ids...)
	return ruo
}

// AddEditors adds the "editors" edges to the Group entity.
func (ruo *RiskUpdateOne) AddEditors(g ...*Group) *RiskUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ruo.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (ruo *RiskUpdateOne) AddViewerIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddViewerIDs(ids...)
	return ruo
}

// AddViewers adds the "viewers" edges to the Group entity.
func (ruo *RiskUpdateOne) AddViewers(g ...*Group) *RiskUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ruo.AddViewerIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (ruo *RiskUpdateOne) AddControlIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddControlIDs(ids...)
	return ruo
}

// AddControls adds the "controls" edges to the Control entity.
func (ruo *RiskUpdateOne) AddControls(c ...*Control) *RiskUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (ruo *RiskUpdateOne) AddSubcontrolIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddSubcontrolIDs(ids...)
	return ruo
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (ruo *RiskUpdateOne) AddSubcontrols(s ...*Subcontrol) *RiskUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddSubcontrolIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (ruo *RiskUpdateOne) AddProcedureIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddProcedureIDs(ids...)
	return ruo
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (ruo *RiskUpdateOne) AddProcedures(p ...*Procedure) *RiskUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (ruo *RiskUpdateOne) AddInternalPolicyIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddInternalPolicyIDs(ids...)
	return ruo
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (ruo *RiskUpdateOne) AddInternalPolicies(i ...*InternalPolicy) *RiskUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.AddInternalPolicyIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (ruo *RiskUpdateOne) AddProgramIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddProgramIDs(ids...)
	return ruo
}

// AddPrograms adds the "programs" edges to the Program entity.
func (ruo *RiskUpdateOne) AddPrograms(p ...*Program) *RiskUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.AddProgramIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (ruo *RiskUpdateOne) AddActionPlanIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.AddActionPlanIDs(ids...)
	return ruo
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (ruo *RiskUpdateOne) AddActionPlans(a ...*ActionPlan) *RiskUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddActionPlanIDs(ids...)
}

// SetStakeholder sets the "stakeholder" edge to the Group entity.
func (ruo *RiskUpdateOne) SetStakeholder(g *Group) *RiskUpdateOne {
	return ruo.SetStakeholderID(g.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (ruo *RiskUpdateOne) SetDelegate(g *Group) *RiskUpdateOne {
	return ruo.SetDelegateID(g.ID)
}

// Mutation returns the RiskMutation object of the builder.
func (ruo *RiskUpdateOne) Mutation() *RiskMutation {
	return ruo.mutation
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (ruo *RiskUpdateOne) ClearBlockedGroups() *RiskUpdateOne {
	ruo.mutation.ClearBlockedGroups()
	return ruo
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (ruo *RiskUpdateOne) RemoveBlockedGroupIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveBlockedGroupIDs(ids...)
	return ruo
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (ruo *RiskUpdateOne) RemoveBlockedGroups(g ...*Group) *RiskUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ruo.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (ruo *RiskUpdateOne) ClearEditors() *RiskUpdateOne {
	ruo.mutation.ClearEditors()
	return ruo
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (ruo *RiskUpdateOne) RemoveEditorIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveEditorIDs(ids...)
	return ruo
}

// RemoveEditors removes "editors" edges to Group entities.
func (ruo *RiskUpdateOne) RemoveEditors(g ...*Group) *RiskUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ruo.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (ruo *RiskUpdateOne) ClearViewers() *RiskUpdateOne {
	ruo.mutation.ClearViewers()
	return ruo
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (ruo *RiskUpdateOne) RemoveViewerIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveViewerIDs(ids...)
	return ruo
}

// RemoveViewers removes "viewers" edges to Group entities.
func (ruo *RiskUpdateOne) RemoveViewers(g ...*Group) *RiskUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return ruo.RemoveViewerIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (ruo *RiskUpdateOne) ClearControls() *RiskUpdateOne {
	ruo.mutation.ClearControls()
	return ruo
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (ruo *RiskUpdateOne) RemoveControlIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveControlIDs(ids...)
	return ruo
}

// RemoveControls removes "controls" edges to Control entities.
func (ruo *RiskUpdateOne) RemoveControls(c ...*Control) *RiskUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ruo.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (ruo *RiskUpdateOne) ClearSubcontrols() *RiskUpdateOne {
	ruo.mutation.ClearSubcontrols()
	return ruo
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (ruo *RiskUpdateOne) RemoveSubcontrolIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveSubcontrolIDs(ids...)
	return ruo
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (ruo *RiskUpdateOne) RemoveSubcontrols(s ...*Subcontrol) *RiskUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveSubcontrolIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (ruo *RiskUpdateOne) ClearProcedures() *RiskUpdateOne {
	ruo.mutation.ClearProcedures()
	return ruo
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (ruo *RiskUpdateOne) RemoveProcedureIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveProcedureIDs(ids...)
	return ruo
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (ruo *RiskUpdateOne) RemoveProcedures(p ...*Procedure) *RiskUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemoveProcedureIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (ruo *RiskUpdateOne) ClearInternalPolicies() *RiskUpdateOne {
	ruo.mutation.ClearInternalPolicies()
	return ruo
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (ruo *RiskUpdateOne) RemoveInternalPolicyIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveInternalPolicyIDs(ids...)
	return ruo
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (ruo *RiskUpdateOne) RemoveInternalPolicies(i ...*InternalPolicy) *RiskUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.RemoveInternalPolicyIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (ruo *RiskUpdateOne) ClearPrograms() *RiskUpdateOne {
	ruo.mutation.ClearPrograms()
	return ruo
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (ruo *RiskUpdateOne) RemoveProgramIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveProgramIDs(ids...)
	return ruo
}

// RemovePrograms removes "programs" edges to Program entities.
func (ruo *RiskUpdateOne) RemovePrograms(p ...*Program) *RiskUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruo.RemoveProgramIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (ruo *RiskUpdateOne) ClearActionPlans() *RiskUpdateOne {
	ruo.mutation.ClearActionPlans()
	return ruo
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (ruo *RiskUpdateOne) RemoveActionPlanIDs(ids ...string) *RiskUpdateOne {
	ruo.mutation.RemoveActionPlanIDs(ids...)
	return ruo
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (ruo *RiskUpdateOne) RemoveActionPlans(a ...*ActionPlan) *RiskUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveActionPlanIDs(ids...)
}

// ClearStakeholder clears the "stakeholder" edge to the Group entity.
func (ruo *RiskUpdateOne) ClearStakeholder() *RiskUpdateOne {
	ruo.mutation.ClearStakeholder()
	return ruo
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (ruo *RiskUpdateOne) ClearDelegate() *RiskUpdateOne {
	ruo.mutation.ClearDelegate()
	return ruo
}

// Where appends a list predicates to the RiskUpdate builder.
func (ruo *RiskUpdateOne) Where(ps ...predicate.Risk) *RiskUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RiskUpdateOne) Select(field string, fields ...string) *RiskUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Risk entity.
func (ruo *RiskUpdateOne) Save(ctx context.Context) (*Risk, error) {
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RiskUpdateOne) SaveX(ctx context.Context) *Risk {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RiskUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RiskUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RiskUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok && !ruo.mutation.UpdatedAtCleared() {
		if risk.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized risk.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := risk.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RiskUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := risk.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Risk.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Status(); ok {
		if err := risk.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Risk.status": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Impact(); ok {
		if err := risk.ImpactValidator(v); err != nil {
			return &ValidationError{Name: "impact", err: fmt.Errorf(`generated: validator failed for field "Risk.impact": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Likelihood(); ok {
		if err := risk.LikelihoodValidator(v); err != nil {
			return &ValidationError{Name: "likelihood", err: fmt.Errorf(`generated: validator failed for field "Risk.likelihood": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RiskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiskUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RiskUpdateOne) sqlSave(ctx context.Context) (_node *Risk, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(risk.Table, risk.Columns, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Risk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, risk.FieldID)
		for _, f := range fields {
			if !risk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != risk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ruo.mutation.CreatedAtCleared() {
		_spec.ClearField(risk.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(risk.FieldUpdatedAt, field.TypeTime, value)
	}
	if ruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(risk.FieldUpdatedAt, field.TypeTime)
	}
	if ruo.mutation.CreatedByCleared() {
		_spec.ClearField(risk.FieldCreatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.UpdatedBy(); ok {
		_spec.SetField(risk.FieldUpdatedBy, field.TypeString, value)
	}
	if ruo.mutation.UpdatedByCleared() {
		_spec.ClearField(risk.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(risk.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(risk.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.DeletedBy(); ok {
		_spec.SetField(risk.FieldDeletedBy, field.TypeString, value)
	}
	if ruo.mutation.DeletedByCleared() {
		_spec.ClearField(risk.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.Tags(); ok {
		_spec.SetField(risk.FieldTags, field.TypeJSON, value)
	}
	if value, ok := ruo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, risk.FieldTags, value)
		})
	}
	if ruo.mutation.TagsCleared() {
		_spec.ClearField(risk.FieldTags, field.TypeJSON)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(risk.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Status(); ok {
		_spec.SetField(risk.FieldStatus, field.TypeEnum, value)
	}
	if ruo.mutation.StatusCleared() {
		_spec.ClearField(risk.FieldStatus, field.TypeEnum)
	}
	if value, ok := ruo.mutation.RiskType(); ok {
		_spec.SetField(risk.FieldRiskType, field.TypeString, value)
	}
	if ruo.mutation.RiskTypeCleared() {
		_spec.ClearField(risk.FieldRiskType, field.TypeString)
	}
	if value, ok := ruo.mutation.Category(); ok {
		_spec.SetField(risk.FieldCategory, field.TypeString, value)
	}
	if ruo.mutation.CategoryCleared() {
		_spec.ClearField(risk.FieldCategory, field.TypeString)
	}
	if value, ok := ruo.mutation.Impact(); ok {
		_spec.SetField(risk.FieldImpact, field.TypeEnum, value)
	}
	if ruo.mutation.ImpactCleared() {
		_spec.ClearField(risk.FieldImpact, field.TypeEnum)
	}
	if value, ok := ruo.mutation.Likelihood(); ok {
		_spec.SetField(risk.FieldLikelihood, field.TypeEnum, value)
	}
	if ruo.mutation.LikelihoodCleared() {
		_spec.ClearField(risk.FieldLikelihood, field.TypeEnum)
	}
	if value, ok := ruo.mutation.Score(); ok {
		_spec.SetField(risk.FieldScore, field.TypeInt, value)
	}
	if value, ok := ruo.mutation.AddedScore(); ok {
		_spec.AddField(risk.FieldScore, field.TypeInt, value)
	}
	if ruo.mutation.ScoreCleared() {
		_spec.ClearField(risk.FieldScore, field.TypeInt)
	}
	if value, ok := ruo.mutation.Mitigation(); ok {
		_spec.SetField(risk.FieldMitigation, field.TypeString, value)
	}
	if ruo.mutation.MitigationCleared() {
		_spec.ClearField(risk.FieldMitigation, field.TypeString)
	}
	if value, ok := ruo.mutation.Details(); ok {
		_spec.SetField(risk.FieldDetails, field.TypeString, value)
	}
	if ruo.mutation.DetailsCleared() {
		_spec.ClearField(risk.FieldDetails, field.TypeString)
	}
	if value, ok := ruo.mutation.BusinessCosts(); ok {
		_spec.SetField(risk.FieldBusinessCosts, field.TypeString, value)
	}
	if ruo.mutation.BusinessCostsCleared() {
		_spec.ClearField(risk.FieldBusinessCosts, field.TypeString)
	}
	if ruo.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !ruo.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !ruo.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedViewersIDs(); len(nodes) > 0 && !ruo.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ControlRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !ruo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.SubcontrolRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !ruo.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.SubcontrolRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.SubcontrolRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ProcedureRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !ruo.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.InternalPolicyRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !ruo.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ProgramRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !ruo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !ruo.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.StakeholderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.StakeholderTable,
			Columns: []string{risk.StakeholderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StakeholderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.StakeholderTable,
			Columns: []string{risk.StakeholderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.DelegateTable,
			Columns: []string{risk.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.DelegateTable,
			Columns: []string{risk.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = ruo.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = ruo.schemaConfig.Risk
	ctx = internal.NewSchemaConfigContext(ctx, ruo.schemaConfig)
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Risk{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{risk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
