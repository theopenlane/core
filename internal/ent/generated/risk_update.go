// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// RiskUpdate is the builder for updating Risk entities.
type RiskUpdate struct {
	config
	hooks     []Hook
	mutation  *RiskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RiskUpdate builder.
func (_u *RiskUpdate) Where(ps ...predicate.Risk) *RiskUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RiskUpdate) SetUpdatedAt(v time.Time) *RiskUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RiskUpdate) ClearUpdatedAt() *RiskUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *RiskUpdate) SetUpdatedBy(v string) *RiskUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableUpdatedBy(v *string) *RiskUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *RiskUpdate) ClearUpdatedBy() *RiskUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RiskUpdate) SetDeletedAt(v time.Time) *RiskUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableDeletedAt(v *time.Time) *RiskUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RiskUpdate) ClearDeletedAt() *RiskUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *RiskUpdate) SetDeletedBy(v string) *RiskUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableDeletedBy(v *string) *RiskUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *RiskUpdate) ClearDeletedBy() *RiskUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *RiskUpdate) SetTags(v []string) *RiskUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *RiskUpdate) AppendTags(v []string) *RiskUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *RiskUpdate) ClearTags() *RiskUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetName sets the "name" field.
func (_u *RiskUpdate) SetName(v string) *RiskUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableName(v *string) *RiskUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *RiskUpdate) SetStatus(v enums.RiskStatus) *RiskUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableStatus(v *enums.RiskStatus) *RiskUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *RiskUpdate) ClearStatus() *RiskUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetRiskType sets the "risk_type" field.
func (_u *RiskUpdate) SetRiskType(v string) *RiskUpdate {
	_u.mutation.SetRiskType(v)
	return _u
}

// SetNillableRiskType sets the "risk_type" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableRiskType(v *string) *RiskUpdate {
	if v != nil {
		_u.SetRiskType(*v)
	}
	return _u
}

// ClearRiskType clears the value of the "risk_type" field.
func (_u *RiskUpdate) ClearRiskType() *RiskUpdate {
	_u.mutation.ClearRiskType()
	return _u
}

// SetCategory sets the "category" field.
func (_u *RiskUpdate) SetCategory(v string) *RiskUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableCategory(v *string) *RiskUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *RiskUpdate) ClearCategory() *RiskUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// SetImpact sets the "impact" field.
func (_u *RiskUpdate) SetImpact(v enums.RiskImpact) *RiskUpdate {
	_u.mutation.SetImpact(v)
	return _u
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableImpact(v *enums.RiskImpact) *RiskUpdate {
	if v != nil {
		_u.SetImpact(*v)
	}
	return _u
}

// ClearImpact clears the value of the "impact" field.
func (_u *RiskUpdate) ClearImpact() *RiskUpdate {
	_u.mutation.ClearImpact()
	return _u
}

// SetLikelihood sets the "likelihood" field.
func (_u *RiskUpdate) SetLikelihood(v enums.RiskLikelihood) *RiskUpdate {
	_u.mutation.SetLikelihood(v)
	return _u
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableLikelihood(v *enums.RiskLikelihood) *RiskUpdate {
	if v != nil {
		_u.SetLikelihood(*v)
	}
	return _u
}

// ClearLikelihood clears the value of the "likelihood" field.
func (_u *RiskUpdate) ClearLikelihood() *RiskUpdate {
	_u.mutation.ClearLikelihood()
	return _u
}

// SetScore sets the "score" field.
func (_u *RiskUpdate) SetScore(v int) *RiskUpdate {
	_u.mutation.ResetScore()
	_u.mutation.SetScore(v)
	return _u
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableScore(v *int) *RiskUpdate {
	if v != nil {
		_u.SetScore(*v)
	}
	return _u
}

// AddScore adds value to the "score" field.
func (_u *RiskUpdate) AddScore(v int) *RiskUpdate {
	_u.mutation.AddScore(v)
	return _u
}

// ClearScore clears the value of the "score" field.
func (_u *RiskUpdate) ClearScore() *RiskUpdate {
	_u.mutation.ClearScore()
	return _u
}

// SetMitigation sets the "mitigation" field.
func (_u *RiskUpdate) SetMitigation(v string) *RiskUpdate {
	_u.mutation.SetMitigation(v)
	return _u
}

// SetNillableMitigation sets the "mitigation" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableMitigation(v *string) *RiskUpdate {
	if v != nil {
		_u.SetMitigation(*v)
	}
	return _u
}

// ClearMitigation clears the value of the "mitigation" field.
func (_u *RiskUpdate) ClearMitigation() *RiskUpdate {
	_u.mutation.ClearMitigation()
	return _u
}

// SetDetails sets the "details" field.
func (_u *RiskUpdate) SetDetails(v string) *RiskUpdate {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableDetails(v *string) *RiskUpdate {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *RiskUpdate) ClearDetails() *RiskUpdate {
	_u.mutation.ClearDetails()
	return _u
}

// SetBusinessCosts sets the "business_costs" field.
func (_u *RiskUpdate) SetBusinessCosts(v string) *RiskUpdate {
	_u.mutation.SetBusinessCosts(v)
	return _u
}

// SetNillableBusinessCosts sets the "business_costs" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableBusinessCosts(v *string) *RiskUpdate {
	if v != nil {
		_u.SetBusinessCosts(*v)
	}
	return _u
}

// ClearBusinessCosts clears the value of the "business_costs" field.
func (_u *RiskUpdate) ClearBusinessCosts() *RiskUpdate {
	_u.mutation.ClearBusinessCosts()
	return _u
}

// SetStakeholderID sets the "stakeholder_id" field.
func (_u *RiskUpdate) SetStakeholderID(v string) *RiskUpdate {
	_u.mutation.SetStakeholderID(v)
	return _u
}

// SetNillableStakeholderID sets the "stakeholder_id" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableStakeholderID(v *string) *RiskUpdate {
	if v != nil {
		_u.SetStakeholderID(*v)
	}
	return _u
}

// ClearStakeholderID clears the value of the "stakeholder_id" field.
func (_u *RiskUpdate) ClearStakeholderID() *RiskUpdate {
	_u.mutation.ClearStakeholderID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *RiskUpdate) SetDelegateID(v string) *RiskUpdate {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *RiskUpdate) SetNillableDelegateID(v *string) *RiskUpdate {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *RiskUpdate) ClearDelegateID() *RiskUpdate {
	_u.mutation.ClearDelegateID()
	return _u
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *RiskUpdate) AddBlockedGroupIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *RiskUpdate) AddBlockedGroups(v ...*Group) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *RiskUpdate) AddEditorIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *RiskUpdate) AddEditors(v ...*Group) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (_u *RiskUpdate) AddViewerIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddViewerIDs(ids...)
	return _u
}

// AddViewers adds the "viewers" edges to the Group entity.
func (_u *RiskUpdate) AddViewers(v ...*Group) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddViewerIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *RiskUpdate) AddControlIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *RiskUpdate) AddControls(v ...*Control) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *RiskUpdate) AddSubcontrolIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *RiskUpdate) AddSubcontrols(v ...*Subcontrol) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_u *RiskUpdate) AddProcedureIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddProcedureIDs(ids...)
	return _u
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_u *RiskUpdate) AddProcedures(v ...*Procedure) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_u *RiskUpdate) AddInternalPolicyIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddInternalPolicyIDs(ids...)
	return _u
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_u *RiskUpdate) AddInternalPolicies(v ...*InternalPolicy) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *RiskUpdate) AddProgramIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *RiskUpdate) AddPrograms(v ...*Program) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_u *RiskUpdate) AddActionPlanIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddActionPlanIDs(ids...)
	return _u
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_u *RiskUpdate) AddActionPlans(v ...*ActionPlan) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActionPlanIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *RiskUpdate) AddTaskIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *RiskUpdate) AddTasks(v ...*Task) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_u *RiskUpdate) AddAssetIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddAssetIDs(ids...)
	return _u
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_u *RiskUpdate) AddAssets(v ...*Asset) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssetIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_u *RiskUpdate) AddEntityIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_u *RiskUpdate) AddEntities(v ...*Entity) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (_u *RiskUpdate) AddScanIDs(ids ...string) *RiskUpdate {
	_u.mutation.AddScanIDs(ids...)
	return _u
}

// AddScans adds the "scans" edges to the Scan entity.
func (_u *RiskUpdate) AddScans(v ...*Scan) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanIDs(ids...)
}

// SetStakeholder sets the "stakeholder" edge to the Group entity.
func (_u *RiskUpdate) SetStakeholder(v *Group) *RiskUpdate {
	return _u.SetStakeholderID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_u *RiskUpdate) SetDelegate(v *Group) *RiskUpdate {
	return _u.SetDelegateID(v.ID)
}

// Mutation returns the RiskMutation object of the builder.
func (_u *RiskUpdate) Mutation() *RiskMutation {
	return _u.mutation
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *RiskUpdate) ClearBlockedGroups() *RiskUpdate {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *RiskUpdate) RemoveBlockedGroupIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *RiskUpdate) RemoveBlockedGroups(v ...*Group) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *RiskUpdate) ClearEditors() *RiskUpdate {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *RiskUpdate) RemoveEditorIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *RiskUpdate) RemoveEditors(v ...*Group) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (_u *RiskUpdate) ClearViewers() *RiskUpdate {
	_u.mutation.ClearViewers()
	return _u
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (_u *RiskUpdate) RemoveViewerIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveViewerIDs(ids...)
	return _u
}

// RemoveViewers removes "viewers" edges to Group entities.
func (_u *RiskUpdate) RemoveViewers(v ...*Group) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveViewerIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *RiskUpdate) ClearControls() *RiskUpdate {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *RiskUpdate) RemoveControlIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *RiskUpdate) RemoveControls(v ...*Control) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *RiskUpdate) ClearSubcontrols() *RiskUpdate {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *RiskUpdate) RemoveSubcontrolIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *RiskUpdate) RemoveSubcontrols(v ...*Subcontrol) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (_u *RiskUpdate) ClearProcedures() *RiskUpdate {
	_u.mutation.ClearProcedures()
	return _u
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (_u *RiskUpdate) RemoveProcedureIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveProcedureIDs(ids...)
	return _u
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (_u *RiskUpdate) RemoveProcedures(v ...*Procedure) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (_u *RiskUpdate) ClearInternalPolicies() *RiskUpdate {
	_u.mutation.ClearInternalPolicies()
	return _u
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (_u *RiskUpdate) RemoveInternalPolicyIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveInternalPolicyIDs(ids...)
	return _u
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (_u *RiskUpdate) RemoveInternalPolicies(v ...*InternalPolicy) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *RiskUpdate) ClearPrograms() *RiskUpdate {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *RiskUpdate) RemoveProgramIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *RiskUpdate) RemovePrograms(v ...*Program) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (_u *RiskUpdate) ClearActionPlans() *RiskUpdate {
	_u.mutation.ClearActionPlans()
	return _u
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (_u *RiskUpdate) RemoveActionPlanIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveActionPlanIDs(ids...)
	return _u
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (_u *RiskUpdate) RemoveActionPlans(v ...*ActionPlan) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActionPlanIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *RiskUpdate) ClearTasks() *RiskUpdate {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *RiskUpdate) RemoveTaskIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *RiskUpdate) RemoveTasks(v ...*Task) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (_u *RiskUpdate) ClearAssets() *RiskUpdate {
	_u.mutation.ClearAssets()
	return _u
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (_u *RiskUpdate) RemoveAssetIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveAssetIDs(ids...)
	return _u
}

// RemoveAssets removes "assets" edges to Asset entities.
func (_u *RiskUpdate) RemoveAssets(v ...*Asset) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssetIDs(ids...)
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (_u *RiskUpdate) ClearEntities() *RiskUpdate {
	_u.mutation.ClearEntities()
	return _u
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (_u *RiskUpdate) RemoveEntityIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntities removes "entities" edges to Entity entities.
func (_u *RiskUpdate) RemoveEntities(v ...*Entity) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// ClearScans clears all "scans" edges to the Scan entity.
func (_u *RiskUpdate) ClearScans() *RiskUpdate {
	_u.mutation.ClearScans()
	return _u
}

// RemoveScanIDs removes the "scans" edge to Scan entities by IDs.
func (_u *RiskUpdate) RemoveScanIDs(ids ...string) *RiskUpdate {
	_u.mutation.RemoveScanIDs(ids...)
	return _u
}

// RemoveScans removes "scans" edges to Scan entities.
func (_u *RiskUpdate) RemoveScans(v ...*Scan) *RiskUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanIDs(ids...)
}

// ClearStakeholder clears the "stakeholder" edge to the Group entity.
func (_u *RiskUpdate) ClearStakeholder() *RiskUpdate {
	_u.mutation.ClearStakeholder()
	return _u
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (_u *RiskUpdate) ClearDelegate() *RiskUpdate {
	_u.mutation.ClearDelegate()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RiskUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RiskUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RiskUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RiskUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RiskUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if risk.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized risk.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := risk.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *RiskUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := risk.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Risk.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := risk.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Risk.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Impact(); ok {
		if err := risk.ImpactValidator(v); err != nil {
			return &ValidationError{Name: "impact", err: fmt.Errorf(`generated: validator failed for field "Risk.impact": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Likelihood(); ok {
		if err := risk.LikelihoodValidator(v); err != nil {
			return &ValidationError{Name: "likelihood", err: fmt.Errorf(`generated: validator failed for field "Risk.likelihood": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RiskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiskUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RiskUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(risk.Table, risk.Columns, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(risk.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(risk.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(risk.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(risk.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(risk.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(risk.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(risk.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(risk.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(risk.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(risk.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(risk.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, risk.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(risk.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(risk.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(risk.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(risk.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.RiskType(); ok {
		_spec.SetField(risk.FieldRiskType, field.TypeString, value)
	}
	if _u.mutation.RiskTypeCleared() {
		_spec.ClearField(risk.FieldRiskType, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(risk.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(risk.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.Impact(); ok {
		_spec.SetField(risk.FieldImpact, field.TypeEnum, value)
	}
	if _u.mutation.ImpactCleared() {
		_spec.ClearField(risk.FieldImpact, field.TypeEnum)
	}
	if value, ok := _u.mutation.Likelihood(); ok {
		_spec.SetField(risk.FieldLikelihood, field.TypeEnum, value)
	}
	if _u.mutation.LikelihoodCleared() {
		_spec.ClearField(risk.FieldLikelihood, field.TypeEnum)
	}
	if value, ok := _u.mutation.Score(); ok {
		_spec.SetField(risk.FieldScore, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedScore(); ok {
		_spec.AddField(risk.FieldScore, field.TypeInt, value)
	}
	if _u.mutation.ScoreCleared() {
		_spec.ClearField(risk.FieldScore, field.TypeInt)
	}
	if value, ok := _u.mutation.Mitigation(); ok {
		_spec.SetField(risk.FieldMitigation, field.TypeString, value)
	}
	if _u.mutation.MitigationCleared() {
		_spec.ClearField(risk.FieldMitigation, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(risk.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(risk.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.BusinessCosts(); ok {
		_spec.SetField(risk.FieldBusinessCosts, field.TypeString, value)
	}
	if _u.mutation.BusinessCostsCleared() {
		_spec.ClearField(risk.FieldBusinessCosts, field.TypeString)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedViewersIDs(); len(nodes) > 0 && !_u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !_u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !_u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !_u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.TasksTable,
			Columns: risk.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.TasksTable,
			Columns: risk.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.TasksTable,
			Columns: risk.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.AssetsTable,
			Columns: []string{risk.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Asset
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !_u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.AssetsTable,
			Columns: []string{risk.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Asset
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.AssetsTable,
			Columns: []string{risk.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Asset
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.EntitiesTable,
			Columns: []string{risk.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !_u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.EntitiesTable,
			Columns: []string{risk.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.EntitiesTable,
			Columns: []string{risk.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.ScansTable,
			Columns: []string{risk.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScansIDs(); len(nodes) > 0 && !_u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.ScansTable,
			Columns: []string{risk.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.ScansTable,
			Columns: []string{risk.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StakeholderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.StakeholderTable,
			Columns: []string{risk.StakeholderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StakeholderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.StakeholderTable,
			Columns: []string{risk.StakeholderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.DelegateTable,
			Columns: []string{risk.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.DelegateTable,
			Columns: []string{risk.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Risk
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{risk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RiskUpdateOne is the builder for updating a single Risk entity.
type RiskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RiskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RiskUpdateOne) SetUpdatedAt(v time.Time) *RiskUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *RiskUpdateOne) ClearUpdatedAt() *RiskUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *RiskUpdateOne) SetUpdatedBy(v string) *RiskUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableUpdatedBy(v *string) *RiskUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *RiskUpdateOne) ClearUpdatedBy() *RiskUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *RiskUpdateOne) SetDeletedAt(v time.Time) *RiskUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableDeletedAt(v *time.Time) *RiskUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *RiskUpdateOne) ClearDeletedAt() *RiskUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *RiskUpdateOne) SetDeletedBy(v string) *RiskUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableDeletedBy(v *string) *RiskUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *RiskUpdateOne) ClearDeletedBy() *RiskUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *RiskUpdateOne) SetTags(v []string) *RiskUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *RiskUpdateOne) AppendTags(v []string) *RiskUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *RiskUpdateOne) ClearTags() *RiskUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetName sets the "name" field.
func (_u *RiskUpdateOne) SetName(v string) *RiskUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableName(v *string) *RiskUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *RiskUpdateOne) SetStatus(v enums.RiskStatus) *RiskUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableStatus(v *enums.RiskStatus) *RiskUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *RiskUpdateOne) ClearStatus() *RiskUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetRiskType sets the "risk_type" field.
func (_u *RiskUpdateOne) SetRiskType(v string) *RiskUpdateOne {
	_u.mutation.SetRiskType(v)
	return _u
}

// SetNillableRiskType sets the "risk_type" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableRiskType(v *string) *RiskUpdateOne {
	if v != nil {
		_u.SetRiskType(*v)
	}
	return _u
}

// ClearRiskType clears the value of the "risk_type" field.
func (_u *RiskUpdateOne) ClearRiskType() *RiskUpdateOne {
	_u.mutation.ClearRiskType()
	return _u
}

// SetCategory sets the "category" field.
func (_u *RiskUpdateOne) SetCategory(v string) *RiskUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableCategory(v *string) *RiskUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// ClearCategory clears the value of the "category" field.
func (_u *RiskUpdateOne) ClearCategory() *RiskUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// SetImpact sets the "impact" field.
func (_u *RiskUpdateOne) SetImpact(v enums.RiskImpact) *RiskUpdateOne {
	_u.mutation.SetImpact(v)
	return _u
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableImpact(v *enums.RiskImpact) *RiskUpdateOne {
	if v != nil {
		_u.SetImpact(*v)
	}
	return _u
}

// ClearImpact clears the value of the "impact" field.
func (_u *RiskUpdateOne) ClearImpact() *RiskUpdateOne {
	_u.mutation.ClearImpact()
	return _u
}

// SetLikelihood sets the "likelihood" field.
func (_u *RiskUpdateOne) SetLikelihood(v enums.RiskLikelihood) *RiskUpdateOne {
	_u.mutation.SetLikelihood(v)
	return _u
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableLikelihood(v *enums.RiskLikelihood) *RiskUpdateOne {
	if v != nil {
		_u.SetLikelihood(*v)
	}
	return _u
}

// ClearLikelihood clears the value of the "likelihood" field.
func (_u *RiskUpdateOne) ClearLikelihood() *RiskUpdateOne {
	_u.mutation.ClearLikelihood()
	return _u
}

// SetScore sets the "score" field.
func (_u *RiskUpdateOne) SetScore(v int) *RiskUpdateOne {
	_u.mutation.ResetScore()
	_u.mutation.SetScore(v)
	return _u
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableScore(v *int) *RiskUpdateOne {
	if v != nil {
		_u.SetScore(*v)
	}
	return _u
}

// AddScore adds value to the "score" field.
func (_u *RiskUpdateOne) AddScore(v int) *RiskUpdateOne {
	_u.mutation.AddScore(v)
	return _u
}

// ClearScore clears the value of the "score" field.
func (_u *RiskUpdateOne) ClearScore() *RiskUpdateOne {
	_u.mutation.ClearScore()
	return _u
}

// SetMitigation sets the "mitigation" field.
func (_u *RiskUpdateOne) SetMitigation(v string) *RiskUpdateOne {
	_u.mutation.SetMitigation(v)
	return _u
}

// SetNillableMitigation sets the "mitigation" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableMitigation(v *string) *RiskUpdateOne {
	if v != nil {
		_u.SetMitigation(*v)
	}
	return _u
}

// ClearMitigation clears the value of the "mitigation" field.
func (_u *RiskUpdateOne) ClearMitigation() *RiskUpdateOne {
	_u.mutation.ClearMitigation()
	return _u
}

// SetDetails sets the "details" field.
func (_u *RiskUpdateOne) SetDetails(v string) *RiskUpdateOne {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableDetails(v *string) *RiskUpdateOne {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *RiskUpdateOne) ClearDetails() *RiskUpdateOne {
	_u.mutation.ClearDetails()
	return _u
}

// SetBusinessCosts sets the "business_costs" field.
func (_u *RiskUpdateOne) SetBusinessCosts(v string) *RiskUpdateOne {
	_u.mutation.SetBusinessCosts(v)
	return _u
}

// SetNillableBusinessCosts sets the "business_costs" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableBusinessCosts(v *string) *RiskUpdateOne {
	if v != nil {
		_u.SetBusinessCosts(*v)
	}
	return _u
}

// ClearBusinessCosts clears the value of the "business_costs" field.
func (_u *RiskUpdateOne) ClearBusinessCosts() *RiskUpdateOne {
	_u.mutation.ClearBusinessCosts()
	return _u
}

// SetStakeholderID sets the "stakeholder_id" field.
func (_u *RiskUpdateOne) SetStakeholderID(v string) *RiskUpdateOne {
	_u.mutation.SetStakeholderID(v)
	return _u
}

// SetNillableStakeholderID sets the "stakeholder_id" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableStakeholderID(v *string) *RiskUpdateOne {
	if v != nil {
		_u.SetStakeholderID(*v)
	}
	return _u
}

// ClearStakeholderID clears the value of the "stakeholder_id" field.
func (_u *RiskUpdateOne) ClearStakeholderID() *RiskUpdateOne {
	_u.mutation.ClearStakeholderID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *RiskUpdateOne) SetDelegateID(v string) *RiskUpdateOne {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *RiskUpdateOne) SetNillableDelegateID(v *string) *RiskUpdateOne {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *RiskUpdateOne) ClearDelegateID() *RiskUpdateOne {
	_u.mutation.ClearDelegateID()
	return _u
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *RiskUpdateOne) AddBlockedGroupIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *RiskUpdateOne) AddBlockedGroups(v ...*Group) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *RiskUpdateOne) AddEditorIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *RiskUpdateOne) AddEditors(v ...*Group) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (_u *RiskUpdateOne) AddViewerIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddViewerIDs(ids...)
	return _u
}

// AddViewers adds the "viewers" edges to the Group entity.
func (_u *RiskUpdateOne) AddViewers(v ...*Group) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddViewerIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *RiskUpdateOne) AddControlIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *RiskUpdateOne) AddControls(v ...*Control) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *RiskUpdateOne) AddSubcontrolIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *RiskUpdateOne) AddSubcontrols(v ...*Subcontrol) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_u *RiskUpdateOne) AddProcedureIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddProcedureIDs(ids...)
	return _u
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_u *RiskUpdateOne) AddProcedures(v ...*Procedure) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_u *RiskUpdateOne) AddInternalPolicyIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddInternalPolicyIDs(ids...)
	return _u
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_u *RiskUpdateOne) AddInternalPolicies(v ...*InternalPolicy) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *RiskUpdateOne) AddProgramIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *RiskUpdateOne) AddPrograms(v ...*Program) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_u *RiskUpdateOne) AddActionPlanIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddActionPlanIDs(ids...)
	return _u
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_u *RiskUpdateOne) AddActionPlans(v ...*ActionPlan) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddActionPlanIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *RiskUpdateOne) AddTaskIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *RiskUpdateOne) AddTasks(v ...*Task) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_u *RiskUpdateOne) AddAssetIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddAssetIDs(ids...)
	return _u
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_u *RiskUpdateOne) AddAssets(v ...*Asset) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssetIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_u *RiskUpdateOne) AddEntityIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_u *RiskUpdateOne) AddEntities(v ...*Entity) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (_u *RiskUpdateOne) AddScanIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.AddScanIDs(ids...)
	return _u
}

// AddScans adds the "scans" edges to the Scan entity.
func (_u *RiskUpdateOne) AddScans(v ...*Scan) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddScanIDs(ids...)
}

// SetStakeholder sets the "stakeholder" edge to the Group entity.
func (_u *RiskUpdateOne) SetStakeholder(v *Group) *RiskUpdateOne {
	return _u.SetStakeholderID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_u *RiskUpdateOne) SetDelegate(v *Group) *RiskUpdateOne {
	return _u.SetDelegateID(v.ID)
}

// Mutation returns the RiskMutation object of the builder.
func (_u *RiskUpdateOne) Mutation() *RiskMutation {
	return _u.mutation
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *RiskUpdateOne) ClearBlockedGroups() *RiskUpdateOne {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *RiskUpdateOne) RemoveBlockedGroupIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *RiskUpdateOne) RemoveBlockedGroups(v ...*Group) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *RiskUpdateOne) ClearEditors() *RiskUpdateOne {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *RiskUpdateOne) RemoveEditorIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *RiskUpdateOne) RemoveEditors(v ...*Group) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (_u *RiskUpdateOne) ClearViewers() *RiskUpdateOne {
	_u.mutation.ClearViewers()
	return _u
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (_u *RiskUpdateOne) RemoveViewerIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveViewerIDs(ids...)
	return _u
}

// RemoveViewers removes "viewers" edges to Group entities.
func (_u *RiskUpdateOne) RemoveViewers(v ...*Group) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveViewerIDs(ids...)
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *RiskUpdateOne) ClearControls() *RiskUpdateOne {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *RiskUpdateOne) RemoveControlIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *RiskUpdateOne) RemoveControls(v ...*Control) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *RiskUpdateOne) ClearSubcontrols() *RiskUpdateOne {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *RiskUpdateOne) RemoveSubcontrolIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *RiskUpdateOne) RemoveSubcontrols(v ...*Subcontrol) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearProcedures clears all "procedures" edges to the Procedure entity.
func (_u *RiskUpdateOne) ClearProcedures() *RiskUpdateOne {
	_u.mutation.ClearProcedures()
	return _u
}

// RemoveProcedureIDs removes the "procedures" edge to Procedure entities by IDs.
func (_u *RiskUpdateOne) RemoveProcedureIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveProcedureIDs(ids...)
	return _u
}

// RemoveProcedures removes "procedures" edges to Procedure entities.
func (_u *RiskUpdateOne) RemoveProcedures(v ...*Procedure) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProcedureIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (_u *RiskUpdateOne) ClearInternalPolicies() *RiskUpdateOne {
	_u.mutation.ClearInternalPolicies()
	return _u
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (_u *RiskUpdateOne) RemoveInternalPolicyIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveInternalPolicyIDs(ids...)
	return _u
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (_u *RiskUpdateOne) RemoveInternalPolicies(v ...*InternalPolicy) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *RiskUpdateOne) ClearPrograms() *RiskUpdateOne {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *RiskUpdateOne) RemoveProgramIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *RiskUpdateOne) RemovePrograms(v ...*Program) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearActionPlans clears all "action_plans" edges to the ActionPlan entity.
func (_u *RiskUpdateOne) ClearActionPlans() *RiskUpdateOne {
	_u.mutation.ClearActionPlans()
	return _u
}

// RemoveActionPlanIDs removes the "action_plans" edge to ActionPlan entities by IDs.
func (_u *RiskUpdateOne) RemoveActionPlanIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveActionPlanIDs(ids...)
	return _u
}

// RemoveActionPlans removes "action_plans" edges to ActionPlan entities.
func (_u *RiskUpdateOne) RemoveActionPlans(v ...*ActionPlan) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveActionPlanIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *RiskUpdateOne) ClearTasks() *RiskUpdateOne {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *RiskUpdateOne) RemoveTaskIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *RiskUpdateOne) RemoveTasks(v ...*Task) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (_u *RiskUpdateOne) ClearAssets() *RiskUpdateOne {
	_u.mutation.ClearAssets()
	return _u
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (_u *RiskUpdateOne) RemoveAssetIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveAssetIDs(ids...)
	return _u
}

// RemoveAssets removes "assets" edges to Asset entities.
func (_u *RiskUpdateOne) RemoveAssets(v ...*Asset) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssetIDs(ids...)
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (_u *RiskUpdateOne) ClearEntities() *RiskUpdateOne {
	_u.mutation.ClearEntities()
	return _u
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (_u *RiskUpdateOne) RemoveEntityIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntities removes "entities" edges to Entity entities.
func (_u *RiskUpdateOne) RemoveEntities(v ...*Entity) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// ClearScans clears all "scans" edges to the Scan entity.
func (_u *RiskUpdateOne) ClearScans() *RiskUpdateOne {
	_u.mutation.ClearScans()
	return _u
}

// RemoveScanIDs removes the "scans" edge to Scan entities by IDs.
func (_u *RiskUpdateOne) RemoveScanIDs(ids ...string) *RiskUpdateOne {
	_u.mutation.RemoveScanIDs(ids...)
	return _u
}

// RemoveScans removes "scans" edges to Scan entities.
func (_u *RiskUpdateOne) RemoveScans(v ...*Scan) *RiskUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveScanIDs(ids...)
}

// ClearStakeholder clears the "stakeholder" edge to the Group entity.
func (_u *RiskUpdateOne) ClearStakeholder() *RiskUpdateOne {
	_u.mutation.ClearStakeholder()
	return _u
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (_u *RiskUpdateOne) ClearDelegate() *RiskUpdateOne {
	_u.mutation.ClearDelegate()
	return _u
}

// Where appends a list predicates to the RiskUpdate builder.
func (_u *RiskUpdateOne) Where(ps ...predicate.Risk) *RiskUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RiskUpdateOne) Select(field string, fields ...string) *RiskUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Risk entity.
func (_u *RiskUpdateOne) Save(ctx context.Context) (*Risk, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RiskUpdateOne) SaveX(ctx context.Context) *Risk {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RiskUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RiskUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RiskUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if risk.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized risk.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := risk.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *RiskUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := risk.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Risk.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := risk.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Risk.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Impact(); ok {
		if err := risk.ImpactValidator(v); err != nil {
			return &ValidationError{Name: "impact", err: fmt.Errorf(`generated: validator failed for field "Risk.impact": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Likelihood(); ok {
		if err := risk.LikelihoodValidator(v); err != nil {
			return &ValidationError{Name: "likelihood", err: fmt.Errorf(`generated: validator failed for field "Risk.likelihood": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *RiskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RiskUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *RiskUpdateOne) sqlSave(ctx context.Context) (_node *Risk, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(risk.Table, risk.Columns, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Risk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, risk.FieldID)
		for _, f := range fields {
			if !risk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != risk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(risk.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(risk.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(risk.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(risk.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(risk.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(risk.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(risk.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(risk.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(risk.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(risk.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(risk.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, risk.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(risk.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(risk.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(risk.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(risk.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.RiskType(); ok {
		_spec.SetField(risk.FieldRiskType, field.TypeString, value)
	}
	if _u.mutation.RiskTypeCleared() {
		_spec.ClearField(risk.FieldRiskType, field.TypeString)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(risk.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.CategoryCleared() {
		_spec.ClearField(risk.FieldCategory, field.TypeString)
	}
	if value, ok := _u.mutation.Impact(); ok {
		_spec.SetField(risk.FieldImpact, field.TypeEnum, value)
	}
	if _u.mutation.ImpactCleared() {
		_spec.ClearField(risk.FieldImpact, field.TypeEnum)
	}
	if value, ok := _u.mutation.Likelihood(); ok {
		_spec.SetField(risk.FieldLikelihood, field.TypeEnum, value)
	}
	if _u.mutation.LikelihoodCleared() {
		_spec.ClearField(risk.FieldLikelihood, field.TypeEnum)
	}
	if value, ok := _u.mutation.Score(); ok {
		_spec.SetField(risk.FieldScore, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedScore(); ok {
		_spec.AddField(risk.FieldScore, field.TypeInt, value)
	}
	if _u.mutation.ScoreCleared() {
		_spec.ClearField(risk.FieldScore, field.TypeInt)
	}
	if value, ok := _u.mutation.Mitigation(); ok {
		_spec.SetField(risk.FieldMitigation, field.TypeString, value)
	}
	if _u.mutation.MitigationCleared() {
		_spec.ClearField(risk.FieldMitigation, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(risk.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(risk.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.BusinessCosts(); ok {
		_spec.SetField(risk.FieldBusinessCosts, field.TypeString, value)
	}
	if _u.mutation.BusinessCostsCleared() {
		_spec.ClearField(risk.FieldBusinessCosts, field.TypeString)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedViewersIDs(); len(nodes) > 0 && !_u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.SubcontrolsTable,
			Columns: risk.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProceduresIDs(); len(nodes) > 0 && !_u.mutation.ProceduresCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !_u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.InternalPoliciesTable,
			Columns: risk.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskActionPlans
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedActionPlansIDs(); len(nodes) > 0 && !_u.mutation.ActionPlansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.TasksTable,
			Columns: risk.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.TasksTable,
			Columns: risk.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.TasksTable,
			Columns: risk.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.RiskTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.AssetsTable,
			Columns: []string{risk.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Asset
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !_u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.AssetsTable,
			Columns: []string{risk.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Asset
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.AssetsTable,
			Columns: []string{risk.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Asset
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.EntitiesTable,
			Columns: []string{risk.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !_u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.EntitiesTable,
			Columns: []string{risk.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.EntitiesTable,
			Columns: []string{risk.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.ScansTable,
			Columns: []string{risk.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedScansIDs(); len(nodes) > 0 && !_u.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.ScansTable,
			Columns: []string{risk.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   risk.ScansTable,
			Columns: []string{risk.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StakeholderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.StakeholderTable,
			Columns: []string{risk.StakeholderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StakeholderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.StakeholderTable,
			Columns: []string{risk.StakeholderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.DelegateTable,
			Columns: []string{risk.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.DelegateTable,
			Columns: []string{risk.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Risk
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Risk{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{risk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
