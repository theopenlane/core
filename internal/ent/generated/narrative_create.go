// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
)

// NarrativeCreate is the builder for creating a Narrative entity.
type NarrativeCreate struct {
	config
	mutation *NarrativeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (nc *NarrativeCreate) SetCreatedAt(t time.Time) *NarrativeCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NarrativeCreate) SetNillableCreatedAt(t *time.Time) *NarrativeCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NarrativeCreate) SetUpdatedAt(t time.Time) *NarrativeCreate {
	nc.mutation.SetUpdatedAt(t)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NarrativeCreate) SetNillableUpdatedAt(t *time.Time) *NarrativeCreate {
	if t != nil {
		nc.SetUpdatedAt(*t)
	}
	return nc
}

// SetCreatedBy sets the "created_by" field.
func (nc *NarrativeCreate) SetCreatedBy(s string) *NarrativeCreate {
	nc.mutation.SetCreatedBy(s)
	return nc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (nc *NarrativeCreate) SetNillableCreatedBy(s *string) *NarrativeCreate {
	if s != nil {
		nc.SetCreatedBy(*s)
	}
	return nc
}

// SetUpdatedBy sets the "updated_by" field.
func (nc *NarrativeCreate) SetUpdatedBy(s string) *NarrativeCreate {
	nc.mutation.SetUpdatedBy(s)
	return nc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (nc *NarrativeCreate) SetNillableUpdatedBy(s *string) *NarrativeCreate {
	if s != nil {
		nc.SetUpdatedBy(*s)
	}
	return nc
}

// SetDeletedAt sets the "deleted_at" field.
func (nc *NarrativeCreate) SetDeletedAt(t time.Time) *NarrativeCreate {
	nc.mutation.SetDeletedAt(t)
	return nc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (nc *NarrativeCreate) SetNillableDeletedAt(t *time.Time) *NarrativeCreate {
	if t != nil {
		nc.SetDeletedAt(*t)
	}
	return nc
}

// SetDeletedBy sets the "deleted_by" field.
func (nc *NarrativeCreate) SetDeletedBy(s string) *NarrativeCreate {
	nc.mutation.SetDeletedBy(s)
	return nc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (nc *NarrativeCreate) SetNillableDeletedBy(s *string) *NarrativeCreate {
	if s != nil {
		nc.SetDeletedBy(*s)
	}
	return nc
}

// SetMappingID sets the "mapping_id" field.
func (nc *NarrativeCreate) SetMappingID(s string) *NarrativeCreate {
	nc.mutation.SetMappingID(s)
	return nc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (nc *NarrativeCreate) SetNillableMappingID(s *string) *NarrativeCreate {
	if s != nil {
		nc.SetMappingID(*s)
	}
	return nc
}

// SetTags sets the "tags" field.
func (nc *NarrativeCreate) SetTags(s []string) *NarrativeCreate {
	nc.mutation.SetTags(s)
	return nc
}

// SetName sets the "name" field.
func (nc *NarrativeCreate) SetName(s string) *NarrativeCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetDescription sets the "description" field.
func (nc *NarrativeCreate) SetDescription(s string) *NarrativeCreate {
	nc.mutation.SetDescription(s)
	return nc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nc *NarrativeCreate) SetNillableDescription(s *string) *NarrativeCreate {
	if s != nil {
		nc.SetDescription(*s)
	}
	return nc
}

// SetSatisfies sets the "satisfies" field.
func (nc *NarrativeCreate) SetSatisfies(s string) *NarrativeCreate {
	nc.mutation.SetSatisfies(s)
	return nc
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (nc *NarrativeCreate) SetNillableSatisfies(s *string) *NarrativeCreate {
	if s != nil {
		nc.SetSatisfies(*s)
	}
	return nc
}

// SetDetails sets the "details" field.
func (nc *NarrativeCreate) SetDetails(m map[string]interface{}) *NarrativeCreate {
	nc.mutation.SetDetails(m)
	return nc
}

// SetID sets the "id" field.
func (nc *NarrativeCreate) SetID(s string) *NarrativeCreate {
	nc.mutation.SetID(s)
	return nc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nc *NarrativeCreate) SetNillableID(s *string) *NarrativeCreate {
	if s != nil {
		nc.SetID(*s)
	}
	return nc
}

// AddPolicyIDs adds the "policy" edge to the InternalPolicy entity by IDs.
func (nc *NarrativeCreate) AddPolicyIDs(ids ...string) *NarrativeCreate {
	nc.mutation.AddPolicyIDs(ids...)
	return nc
}

// AddPolicy adds the "policy" edges to the InternalPolicy entity.
func (nc *NarrativeCreate) AddPolicy(i ...*InternalPolicy) *NarrativeCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nc.AddPolicyIDs(ids...)
}

// AddControlIDs adds the "control" edge to the Control entity by IDs.
func (nc *NarrativeCreate) AddControlIDs(ids ...string) *NarrativeCreate {
	nc.mutation.AddControlIDs(ids...)
	return nc
}

// AddControl adds the "control" edges to the Control entity.
func (nc *NarrativeCreate) AddControl(c ...*Control) *NarrativeCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nc.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedure" edge to the Procedure entity by IDs.
func (nc *NarrativeCreate) AddProcedureIDs(ids ...string) *NarrativeCreate {
	nc.mutation.AddProcedureIDs(ids...)
	return nc
}

// AddProcedure adds the "procedure" edges to the Procedure entity.
func (nc *NarrativeCreate) AddProcedure(p ...*Procedure) *NarrativeCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nc.AddProcedureIDs(ids...)
}

// AddControlobjectiveIDs adds the "controlobjective" edge to the ControlObjective entity by IDs.
func (nc *NarrativeCreate) AddControlobjectiveIDs(ids ...string) *NarrativeCreate {
	nc.mutation.AddControlobjectiveIDs(ids...)
	return nc
}

// AddControlobjective adds the "controlobjective" edges to the ControlObjective entity.
func (nc *NarrativeCreate) AddControlobjective(c ...*ControlObjective) *NarrativeCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nc.AddControlobjectiveIDs(ids...)
}

// AddProgramIDs adds the "program" edge to the Program entity by IDs.
func (nc *NarrativeCreate) AddProgramIDs(ids ...string) *NarrativeCreate {
	nc.mutation.AddProgramIDs(ids...)
	return nc
}

// AddProgram adds the "program" edges to the Program entity.
func (nc *NarrativeCreate) AddProgram(p ...*Program) *NarrativeCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nc.AddProgramIDs(ids...)
}

// Mutation returns the NarrativeMutation object of the builder.
func (nc *NarrativeCreate) Mutation() *NarrativeMutation {
	return nc.mutation
}

// Save creates the Narrative in the database.
func (nc *NarrativeCreate) Save(ctx context.Context) (*Narrative, error) {
	if err := nc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NarrativeCreate) SaveX(ctx context.Context) *Narrative {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NarrativeCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NarrativeCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NarrativeCreate) defaults() error {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		if narrative.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized narrative.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := narrative.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.UpdatedAt(); !ok {
		if narrative.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized narrative.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := narrative.DefaultUpdatedAt()
		nc.mutation.SetUpdatedAt(v)
	}
	if _, ok := nc.mutation.MappingID(); !ok {
		if narrative.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized narrative.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := narrative.DefaultMappingID()
		nc.mutation.SetMappingID(v)
	}
	if _, ok := nc.mutation.Tags(); !ok {
		v := narrative.DefaultTags
		nc.mutation.SetTags(v)
	}
	if _, ok := nc.mutation.ID(); !ok {
		if narrative.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized narrative.DefaultID (forgotten import generated/runtime?)")
		}
		v := narrative.DefaultID()
		nc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (nc *NarrativeCreate) check() error {
	if _, ok := nc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "Narrative.mapping_id"`)}
	}
	if _, ok := nc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Narrative.name"`)}
	}
	return nil
}

func (nc *NarrativeCreate) sqlSave(ctx context.Context) (*Narrative, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Narrative.ID type: %T", _spec.ID.Value)
		}
	}
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NarrativeCreate) createSpec() (*Narrative, *sqlgraph.CreateSpec) {
	var (
		_node = &Narrative{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(narrative.Table, sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString))
	)
	_spec.Schema = nc.schemaConfig.Narrative
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.SetField(narrative.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.SetField(narrative.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := nc.mutation.CreatedBy(); ok {
		_spec.SetField(narrative.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := nc.mutation.UpdatedBy(); ok {
		_spec.SetField(narrative.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := nc.mutation.DeletedAt(); ok {
		_spec.SetField(narrative.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := nc.mutation.DeletedBy(); ok {
		_spec.SetField(narrative.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := nc.mutation.MappingID(); ok {
		_spec.SetField(narrative.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := nc.mutation.Tags(); ok {
		_spec.SetField(narrative.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := nc.mutation.Name(); ok {
		_spec.SetField(narrative.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nc.mutation.Description(); ok {
		_spec.SetField(narrative.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nc.mutation.Satisfies(); ok {
		_spec.SetField(narrative.FieldSatisfies, field.TypeString, value)
		_node.Satisfies = value
	}
	if value, ok := nc.mutation.Details(); ok {
		_spec.SetField(narrative.FieldDetails, field.TypeJSON, value)
		_node.Details = value
	}
	if nodes := nc.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.PolicyTable,
			Columns: narrative.PolicyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = nc.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.ControlIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlTable,
			Columns: narrative.ControlPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = nc.schemaConfig.ControlNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.ProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProcedureTable,
			Columns: narrative.ProcedurePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = nc.schemaConfig.ProcedureNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.ControlobjectiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ControlobjectiveTable,
			Columns: narrative.ControlobjectivePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = nc.schemaConfig.ControlObjectiveNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.ProgramIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   narrative.ProgramTable,
			Columns: narrative.ProgramPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = nc.schemaConfig.ProgramNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NarrativeCreateBulk is the builder for creating many Narrative entities in bulk.
type NarrativeCreateBulk struct {
	config
	err      error
	builders []*NarrativeCreate
}

// Save creates the Narrative entities in the database.
func (ncb *NarrativeCreateBulk) Save(ctx context.Context) ([]*Narrative, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Narrative, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NarrativeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NarrativeCreateBulk) SaveX(ctx context.Context) []*Narrative {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NarrativeCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NarrativeCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
