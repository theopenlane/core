// Code generated by ent, DO NOT EDIT.

package procedure

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the procedure type in the database.
	Label = "procedure"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedByID holds the string denoting the created_by_id field in the database.
	FieldCreatedByID = "created_by_id"
	// FieldUpdatedByID holds the string denoting the updated_by_id field in the database.
	FieldUpdatedByID = "updated_by_id"
	// FieldCreatedByUserID holds the string denoting the created_by_user_id field in the database.
	FieldCreatedByUserID = "created_by_user_id"
	// FieldUpdatedByUserID holds the string denoting the updated_by_user_id field in the database.
	FieldUpdatedByUserID = "updated_by_user_id"
	// FieldCreatedByServiceID holds the string denoting the created_by_service_id field in the database.
	FieldCreatedByServiceID = "created_by_service_id"
	// FieldUpdatedByServiceID holds the string denoting the updated_by_service_id field in the database.
	FieldUpdatedByServiceID = "updated_by_service_id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedByID holds the string denoting the deleted_by_id field in the database.
	FieldDeletedByID = "deleted_by_id"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldProcedureType holds the string denoting the procedure_type field in the database.
	FieldProcedureType = "procedure_type"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldPurposeAndScope holds the string denoting the purpose_and_scope field in the database.
	FieldPurposeAndScope = "purpose_and_scope"
	// FieldBackground holds the string denoting the background field in the database.
	FieldBackground = "background"
	// FieldSatisfies holds the string denoting the satisfies field in the database.
	FieldSatisfies = "satisfies"
	// FieldDetails holds the string denoting the details field in the database.
	FieldDetails = "details"
	// EdgeCreatedByUser holds the string denoting the created_by_user edge name in mutations.
	EdgeCreatedByUser = "created_by_user"
	// EdgeUpdatedByUser holds the string denoting the updated_by_user edge name in mutations.
	EdgeUpdatedByUser = "updated_by_user"
	// EdgeCreatedByService holds the string denoting the created_by_service edge name in mutations.
	EdgeCreatedByService = "created_by_service"
	// EdgeUpdatedByService holds the string denoting the updated_by_service edge name in mutations.
	EdgeUpdatedByService = "updated_by_service"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeBlockedGroups holds the string denoting the blocked_groups edge name in mutations.
	EdgeBlockedGroups = "blocked_groups"
	// EdgeEditors holds the string denoting the editors edge name in mutations.
	EdgeEditors = "editors"
	// EdgeControls holds the string denoting the controls edge name in mutations.
	EdgeControls = "controls"
	// EdgeInternalPolicies holds the string denoting the internal_policies edge name in mutations.
	EdgeInternalPolicies = "internal_policies"
	// EdgeNarratives holds the string denoting the narratives edge name in mutations.
	EdgeNarratives = "narratives"
	// EdgeRisks holds the string denoting the risks edge name in mutations.
	EdgeRisks = "risks"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgePrograms holds the string denoting the programs edge name in mutations.
	EdgePrograms = "programs"
	// Table holds the table name of the procedure in the database.
	Table = "procedures"
	// CreatedByUserTable is the table that holds the created_by_user relation/edge.
	CreatedByUserTable = "procedures"
	// CreatedByUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByUserInverseTable = "users"
	// CreatedByUserColumn is the table column denoting the created_by_user relation/edge.
	CreatedByUserColumn = "created_by_user_id"
	// UpdatedByUserTable is the table that holds the updated_by_user relation/edge.
	UpdatedByUserTable = "procedures"
	// UpdatedByUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UpdatedByUserInverseTable = "users"
	// UpdatedByUserColumn is the table column denoting the updated_by_user relation/edge.
	UpdatedByUserColumn = "updated_by_user_id"
	// CreatedByServiceTable is the table that holds the created_by_service relation/edge.
	CreatedByServiceTable = "procedures"
	// CreatedByServiceInverseTable is the table name for the APIToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	CreatedByServiceInverseTable = "api_tokens"
	// CreatedByServiceColumn is the table column denoting the created_by_service relation/edge.
	CreatedByServiceColumn = "created_by_service_id"
	// UpdatedByServiceTable is the table that holds the updated_by_service relation/edge.
	UpdatedByServiceTable = "procedures"
	// UpdatedByServiceInverseTable is the table name for the APIToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	UpdatedByServiceInverseTable = "api_tokens"
	// UpdatedByServiceColumn is the table column denoting the updated_by_service relation/edge.
	UpdatedByServiceColumn = "updated_by_service_id"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "procedures"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "owner_id"
	// BlockedGroupsTable is the table that holds the blocked_groups relation/edge. The primary key declared below.
	BlockedGroupsTable = "procedure_blocked_groups"
	// BlockedGroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	BlockedGroupsInverseTable = "groups"
	// EditorsTable is the table that holds the editors relation/edge. The primary key declared below.
	EditorsTable = "procedure_editors"
	// EditorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	EditorsInverseTable = "groups"
	// ControlsTable is the table that holds the controls relation/edge. The primary key declared below.
	ControlsTable = "control_procedures"
	// ControlsInverseTable is the table name for the Control entity.
	// It exists in this package in order to avoid circular dependency with the "control" package.
	ControlsInverseTable = "controls"
	// InternalPoliciesTable is the table that holds the internal_policies relation/edge. The primary key declared below.
	InternalPoliciesTable = "internal_policy_procedures"
	// InternalPoliciesInverseTable is the table name for the InternalPolicy entity.
	// It exists in this package in order to avoid circular dependency with the "internalpolicy" package.
	InternalPoliciesInverseTable = "internal_policies"
	// NarrativesTable is the table that holds the narratives relation/edge. The primary key declared below.
	NarrativesTable = "procedure_narratives"
	// NarrativesInverseTable is the table name for the Narrative entity.
	// It exists in this package in order to avoid circular dependency with the "narrative" package.
	NarrativesInverseTable = "narratives"
	// RisksTable is the table that holds the risks relation/edge. The primary key declared below.
	RisksTable = "procedure_risks"
	// RisksInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RisksInverseTable = "risks"
	// TasksTable is the table that holds the tasks relation/edge. The primary key declared below.
	TasksTable = "procedure_tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// ProgramsTable is the table that holds the programs relation/edge. The primary key declared below.
	ProgramsTable = "program_procedures"
	// ProgramsInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramsInverseTable = "programs"
)

// Columns holds all SQL columns for procedure fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedByID,
	FieldUpdatedByID,
	FieldCreatedByUserID,
	FieldUpdatedByUserID,
	FieldCreatedByServiceID,
	FieldUpdatedByServiceID,
	FieldDeletedAt,
	FieldDeletedByID,
	FieldMappingID,
	FieldTags,
	FieldOwnerID,
	FieldName,
	FieldDescription,
	FieldStatus,
	FieldProcedureType,
	FieldVersion,
	FieldPurposeAndScope,
	FieldBackground,
	FieldSatisfies,
	FieldDetails,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "procedures"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"control_objective_procedures",
	"standard_procedures",
}

var (
	// BlockedGroupsPrimaryKey and BlockedGroupsColumn2 are the table columns denoting the
	// primary key for the blocked_groups relation (M2M).
	BlockedGroupsPrimaryKey = []string{"procedure_id", "group_id"}
	// EditorsPrimaryKey and EditorsColumn2 are the table columns denoting the
	// primary key for the editors relation (M2M).
	EditorsPrimaryKey = []string{"procedure_id", "group_id"}
	// ControlsPrimaryKey and ControlsColumn2 are the table columns denoting the
	// primary key for the controls relation (M2M).
	ControlsPrimaryKey = []string{"control_id", "procedure_id"}
	// InternalPoliciesPrimaryKey and InternalPoliciesColumn2 are the table columns denoting the
	// primary key for the internal_policies relation (M2M).
	InternalPoliciesPrimaryKey = []string{"internal_policy_id", "procedure_id"}
	// NarrativesPrimaryKey and NarrativesColumn2 are the table columns denoting the
	// primary key for the narratives relation (M2M).
	NarrativesPrimaryKey = []string{"procedure_id", "narrative_id"}
	// RisksPrimaryKey and RisksColumn2 are the table columns denoting the
	// primary key for the risks relation (M2M).
	RisksPrimaryKey = []string{"procedure_id", "risk_id"}
	// TasksPrimaryKey and TasksColumn2 are the table columns denoting the
	// primary key for the tasks relation (M2M).
	TasksPrimaryKey = []string{"procedure_id", "task_id"}
	// ProgramsPrimaryKey and ProgramsColumn2 are the table columns denoting the
	// primary key for the programs relation (M2M).
	ProgramsPrimaryKey = []string{"program_id", "procedure_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [7]ent.Hook
	Interceptors [3]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// OwnerIDValidator is a validator for the "owner_id" field. It is called by the builders before save.
	OwnerIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Procedure queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedByID orders the results by the created_by_id field.
func ByCreatedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByID, opts...).ToFunc()
}

// ByUpdatedByID orders the results by the updated_by_id field.
func ByUpdatedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedByID, opts...).ToFunc()
}

// ByCreatedByUserID orders the results by the created_by_user_id field.
func ByCreatedByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserID, opts...).ToFunc()
}

// ByUpdatedByUserID orders the results by the updated_by_user_id field.
func ByUpdatedByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedByUserID, opts...).ToFunc()
}

// ByCreatedByServiceID orders the results by the created_by_service_id field.
func ByCreatedByServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByServiceID, opts...).ToFunc()
}

// ByUpdatedByServiceID orders the results by the updated_by_service_id field.
func ByUpdatedByServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedByServiceID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedByID orders the results by the deleted_by_id field.
func ByDeletedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByID, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByProcedureType orders the results by the procedure_type field.
func ByProcedureType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcedureType, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByPurposeAndScope orders the results by the purpose_and_scope field.
func ByPurposeAndScope(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPurposeAndScope, opts...).ToFunc()
}

// ByBackground orders the results by the background field.
func ByBackground(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBackground, opts...).ToFunc()
}

// BySatisfies orders the results by the satisfies field.
func BySatisfies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSatisfies, opts...).ToFunc()
}

// ByCreatedByUserField orders the results by created_by_user field.
func ByCreatedByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdatedByUserField orders the results by updated_by_user field.
func ByUpdatedByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedByUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatedByServiceField orders the results by created_by_service field.
func ByCreatedByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdatedByServiceField orders the results by updated_by_service field.
func ByUpdatedByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedByServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockedGroupsCount orders the results by blocked_groups count.
func ByBlockedGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlockedGroupsStep(), opts...)
	}
}

// ByBlockedGroups orders the results by blocked_groups terms.
func ByBlockedGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockedGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEditorsCount orders the results by editors count.
func ByEditorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEditorsStep(), opts...)
	}
}

// ByEditors orders the results by editors terms.
func ByEditors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEditorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlsCount orders the results by controls count.
func ByControlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlsStep(), opts...)
	}
}

// ByControls orders the results by controls terms.
func ByControls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInternalPoliciesCount orders the results by internal_policies count.
func ByInternalPoliciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInternalPoliciesStep(), opts...)
	}
}

// ByInternalPolicies orders the results by internal_policies terms.
func ByInternalPolicies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalPoliciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNarrativesCount orders the results by narratives count.
func ByNarrativesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNarrativesStep(), opts...)
	}
}

// ByNarratives orders the results by narratives terms.
func ByNarratives(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNarrativesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRisksCount orders the results by risks count.
func ByRisksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRisksStep(), opts...)
	}
}

// ByRisks orders the results by risks terms.
func ByRisks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRisksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramsCount orders the results by programs count.
func ByProgramsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramsStep(), opts...)
	}
}

// ByPrograms orders the results by programs terms.
func ByPrograms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCreatedByUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatedByUserTable, CreatedByUserColumn),
	)
}
func newUpdatedByUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedByUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByUserTable, UpdatedByUserColumn),
	)
}
func newCreatedByServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatedByServiceTable, CreatedByServiceColumn),
	)
}
func newUpdatedByServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedByServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByServiceTable, UpdatedByServiceColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newBlockedGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockedGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, BlockedGroupsTable, BlockedGroupsPrimaryKey...),
	)
}
func newEditorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EditorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EditorsTable, EditorsPrimaryKey...),
	)
}
func newControlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ControlsTable, ControlsPrimaryKey...),
	)
}
func newInternalPoliciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalPoliciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, InternalPoliciesTable, InternalPoliciesPrimaryKey...),
	)
}
func newNarrativesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NarrativesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, NarrativesTable, NarrativesPrimaryKey...),
	)
}
func newRisksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RisksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, RisksTable, RisksPrimaryKey...),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, TasksTable, TasksPrimaryKey...),
	)
}
func newProgramsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProgramsTable, ProgramsPrimaryKey...),
	)
}
