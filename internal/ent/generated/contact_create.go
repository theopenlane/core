// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/pkg/enums"
)

// ContactCreate is the builder for creating a Contact entity.
type ContactCreate struct {
	config
	mutation *ContactMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *ContactCreate) SetCreatedAt(v time.Time) *ContactCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ContactCreate) SetNillableCreatedAt(v *time.Time) *ContactCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ContactCreate) SetUpdatedAt(v time.Time) *ContactCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ContactCreate) SetNillableUpdatedAt(v *time.Time) *ContactCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *ContactCreate) SetCreatedBy(v string) *ContactCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *ContactCreate) SetNillableCreatedBy(v *string) *ContactCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *ContactCreate) SetUpdatedBy(v string) *ContactCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *ContactCreate) SetNillableUpdatedBy(v *string) *ContactCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *ContactCreate) SetDeletedAt(v time.Time) *ContactCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *ContactCreate) SetNillableDeletedAt(v *time.Time) *ContactCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *ContactCreate) SetDeletedBy(v string) *ContactCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *ContactCreate) SetNillableDeletedBy(v *string) *ContactCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *ContactCreate) SetTags(v []string) *ContactCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *ContactCreate) SetOwnerID(v string) *ContactCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *ContactCreate) SetNillableOwnerID(v *string) *ContactCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetFullName sets the "full_name" field.
func (_c *ContactCreate) SetFullName(v string) *ContactCreate {
	_c.mutation.SetFullName(v)
	return _c
}

// SetTitle sets the "title" field.
func (_c *ContactCreate) SetTitle(v string) *ContactCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_c *ContactCreate) SetNillableTitle(v *string) *ContactCreate {
	if v != nil {
		_c.SetTitle(*v)
	}
	return _c
}

// SetCompany sets the "company" field.
func (_c *ContactCreate) SetCompany(v string) *ContactCreate {
	_c.mutation.SetCompany(v)
	return _c
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (_c *ContactCreate) SetNillableCompany(v *string) *ContactCreate {
	if v != nil {
		_c.SetCompany(*v)
	}
	return _c
}

// SetEmail sets the "email" field.
func (_c *ContactCreate) SetEmail(v string) *ContactCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_c *ContactCreate) SetNillableEmail(v *string) *ContactCreate {
	if v != nil {
		_c.SetEmail(*v)
	}
	return _c
}

// SetPhoneNumber sets the "phone_number" field.
func (_c *ContactCreate) SetPhoneNumber(v string) *ContactCreate {
	_c.mutation.SetPhoneNumber(v)
	return _c
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_c *ContactCreate) SetNillablePhoneNumber(v *string) *ContactCreate {
	if v != nil {
		_c.SetPhoneNumber(*v)
	}
	return _c
}

// SetAddress sets the "address" field.
func (_c *ContactCreate) SetAddress(v string) *ContactCreate {
	_c.mutation.SetAddress(v)
	return _c
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_c *ContactCreate) SetNillableAddress(v *string) *ContactCreate {
	if v != nil {
		_c.SetAddress(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *ContactCreate) SetStatus(v enums.UserStatus) *ContactCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ContactCreate) SetNillableStatus(v *enums.UserStatus) *ContactCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ContactCreate) SetID(v string) *ContactCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ContactCreate) SetNillableID(v *string) *ContactCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *ContactCreate) SetOwner(v *Organization) *ContactCreate {
	return _c.SetOwnerID(v.ID)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_c *ContactCreate) AddEntityIDs(ids ...string) *ContactCreate {
	_c.mutation.AddEntityIDs(ids...)
	return _c
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_c *ContactCreate) AddEntities(v ...*Entity) *ContactCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEntityIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_c *ContactCreate) AddFileIDs(ids ...string) *ContactCreate {
	_c.mutation.AddFileIDs(ids...)
	return _c
}

// AddFiles adds the "files" edges to the File entity.
func (_c *ContactCreate) AddFiles(v ...*File) *ContactCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFileIDs(ids...)
}

// Mutation returns the ContactMutation object of the builder.
func (_c *ContactCreate) Mutation() *ContactMutation {
	return _c.mutation
}

// Save creates the Contact in the database.
func (_c *ContactCreate) Save(ctx context.Context) (*Contact, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ContactCreate) SaveX(ctx context.Context) *Contact {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ContactCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ContactCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ContactCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if contact.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized contact.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := contact.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if contact.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized contact.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := contact.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := contact.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := contact.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if contact.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized contact.DefaultID (forgotten import generated/runtime?)")
		}
		v := contact.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *ContactCreate) check() error {
	if v, ok := _c.mutation.OwnerID(); ok {
		if err := contact.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Contact.owner_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.FullName(); !ok {
		return &ValidationError{Name: "full_name", err: errors.New(`generated: missing required field "Contact.full_name"`)}
	}
	if v, ok := _c.mutation.FullName(); ok {
		if err := contact.FullNameValidator(v); err != nil {
			return &ValidationError{Name: "full_name", err: fmt.Errorf(`generated: validator failed for field "Contact.full_name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Email(); ok {
		if err := contact.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "Contact.email": %w`, err)}
		}
	}
	if v, ok := _c.mutation.PhoneNumber(); ok {
		if err := contact.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`generated: validator failed for field "Contact.phone_number": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Contact.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := contact.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Contact.status": %w`, err)}
		}
	}
	return nil
}

func (_c *ContactCreate) sqlSave(ctx context.Context) (*Contact, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Contact.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ContactCreate) createSpec() (*Contact, *sqlgraph.CreateSpec) {
	var (
		_node = &Contact{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(contact.Table, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.Contact
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(contact.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(contact.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(contact.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(contact.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(contact.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(contact.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(contact.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.FullName(); ok {
		_spec.SetField(contact.FieldFullName, field.TypeString, value)
		_node.FullName = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(contact.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Company(); ok {
		_spec.SetField(contact.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(contact.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.PhoneNumber(); ok {
		_spec.SetField(contact.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := _c.mutation.Address(); ok {
		_spec.SetField(contact.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(contact.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   contact.EntitiesTable,
			Columns: contact.EntitiesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EntityContacts
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   contact.FilesTable,
			Columns: contact.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ContactFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContactCreateBulk is the builder for creating many Contact entities in bulk.
type ContactCreateBulk struct {
	config
	err      error
	builders []*ContactCreate
}

// Save creates the Contact entities in the database.
func (_c *ContactCreateBulk) Save(ctx context.Context) ([]*Contact, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Contact, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ContactCreateBulk) SaveX(ctx context.Context) []*Contact {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ContactCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ContactCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
