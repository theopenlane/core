// Code generated by ent, DO NOT EDIT.

package organization

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the organization type in the database.
	Label = "organization"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldParentOrganizationID holds the string denoting the parent_organization_id field in the database.
	FieldParentOrganizationID = "parent_organization_id"
	// FieldPersonalOrg holds the string denoting the personal_org field in the database.
	FieldPersonalOrg = "personal_org"
	// FieldAvatarRemoteURL holds the string denoting the avatar_remote_url field in the database.
	FieldAvatarRemoteURL = "avatar_remote_url"
	// FieldAvatarLocalFileID holds the string denoting the avatar_local_file_id field in the database.
	FieldAvatarLocalFileID = "avatar_local_file_id"
	// FieldAvatarUpdatedAt holds the string denoting the avatar_updated_at field in the database.
	FieldAvatarUpdatedAt = "avatar_updated_at"
	// FieldDedicatedDb holds the string denoting the dedicated_db field in the database.
	FieldDedicatedDb = "dedicated_db"
	// EdgeControlCreators holds the string denoting the control_creators edge name in mutations.
	EdgeControlCreators = "control_creators"
	// EdgeControlImplementationCreators holds the string denoting the control_implementation_creators edge name in mutations.
	EdgeControlImplementationCreators = "control_implementation_creators"
	// EdgeControlObjectiveCreators holds the string denoting the control_objective_creators edge name in mutations.
	EdgeControlObjectiveCreators = "control_objective_creators"
	// EdgeEvidenceCreators holds the string denoting the evidence_creators edge name in mutations.
	EdgeEvidenceCreators = "evidence_creators"
	// EdgeGroupCreators holds the string denoting the group_creators edge name in mutations.
	EdgeGroupCreators = "group_creators"
	// EdgeInternalPolicyCreators holds the string denoting the internal_policy_creators edge name in mutations.
	EdgeInternalPolicyCreators = "internal_policy_creators"
	// EdgeMappedControlCreators holds the string denoting the mapped_control_creators edge name in mutations.
	EdgeMappedControlCreators = "mapped_control_creators"
	// EdgeNarrativeCreators holds the string denoting the narrative_creators edge name in mutations.
	EdgeNarrativeCreators = "narrative_creators"
	// EdgeProcedureCreators holds the string denoting the procedure_creators edge name in mutations.
	EdgeProcedureCreators = "procedure_creators"
	// EdgeProgramCreators holds the string denoting the program_creators edge name in mutations.
	EdgeProgramCreators = "program_creators"
	// EdgeRiskCreators holds the string denoting the risk_creators edge name in mutations.
	EdgeRiskCreators = "risk_creators"
	// EdgeScheduledJobCreators holds the string denoting the scheduled_job_creators edge name in mutations.
	EdgeScheduledJobCreators = "scheduled_job_creators"
	// EdgeStandardCreators holds the string denoting the standard_creators edge name in mutations.
	EdgeStandardCreators = "standard_creators"
	// EdgeTemplateCreators holds the string denoting the template_creators edge name in mutations.
	EdgeTemplateCreators = "template_creators"
	// EdgeParent holds the string denoting the parent edge name in mutations.
	EdgeParent = "parent"
	// EdgeChildren holds the string denoting the children edge name in mutations.
	EdgeChildren = "children"
	// EdgeSetting holds the string denoting the setting edge name in mutations.
	EdgeSetting = "setting"
	// EdgePersonalAccessTokens holds the string denoting the personal_access_tokens edge name in mutations.
	EdgePersonalAccessTokens = "personal_access_tokens"
	// EdgeAPITokens holds the string denoting the api_tokens edge name in mutations.
	EdgeAPITokens = "api_tokens"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeFiles holds the string denoting the files edge name in mutations.
	EdgeFiles = "files"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// EdgeSecrets holds the string denoting the secrets edge name in mutations.
	EdgeSecrets = "secrets"
	// EdgeAvatarFile holds the string denoting the avatar_file edge name in mutations.
	EdgeAvatarFile = "avatar_file"
	// EdgeGroups holds the string denoting the groups edge name in mutations.
	EdgeGroups = "groups"
	// EdgeTemplates holds the string denoting the templates edge name in mutations.
	EdgeTemplates = "templates"
	// EdgeIntegrations holds the string denoting the integrations edge name in mutations.
	EdgeIntegrations = "integrations"
	// EdgeDocuments holds the string denoting the documents edge name in mutations.
	EdgeDocuments = "documents"
	// EdgeOrgSubscriptions holds the string denoting the org_subscriptions edge name in mutations.
	EdgeOrgSubscriptions = "org_subscriptions"
	// EdgeOrgProducts holds the string denoting the org_products edge name in mutations.
	EdgeOrgProducts = "org_products"
	// EdgeOrgPrices holds the string denoting the org_prices edge name in mutations.
	EdgeOrgPrices = "org_prices"
	// EdgeOrgModules holds the string denoting the org_modules edge name in mutations.
	EdgeOrgModules = "org_modules"
	// EdgeInvites holds the string denoting the invites edge name in mutations.
	EdgeInvites = "invites"
	// EdgeSubscribers holds the string denoting the subscribers edge name in mutations.
	EdgeSubscribers = "subscribers"
	// EdgeEntities holds the string denoting the entities edge name in mutations.
	EdgeEntities = "entities"
	// EdgeEntityTypes holds the string denoting the entity_types edge name in mutations.
	EdgeEntityTypes = "entity_types"
	// EdgeContacts holds the string denoting the contacts edge name in mutations.
	EdgeContacts = "contacts"
	// EdgeNotes holds the string denoting the notes edge name in mutations.
	EdgeNotes = "notes"
	// EdgeTasks holds the string denoting the tasks edge name in mutations.
	EdgeTasks = "tasks"
	// EdgePrograms holds the string denoting the programs edge name in mutations.
	EdgePrograms = "programs"
	// EdgeProcedures holds the string denoting the procedures edge name in mutations.
	EdgeProcedures = "procedures"
	// EdgeInternalPolicies holds the string denoting the internal_policies edge name in mutations.
	EdgeInternalPolicies = "internal_policies"
	// EdgeRisks holds the string denoting the risks edge name in mutations.
	EdgeRisks = "risks"
	// EdgeControlObjectives holds the string denoting the control_objectives edge name in mutations.
	EdgeControlObjectives = "control_objectives"
	// EdgeNarratives holds the string denoting the narratives edge name in mutations.
	EdgeNarratives = "narratives"
	// EdgeControls holds the string denoting the controls edge name in mutations.
	EdgeControls = "controls"
	// EdgeSubcontrols holds the string denoting the subcontrols edge name in mutations.
	EdgeSubcontrols = "subcontrols"
	// EdgeControlImplementations holds the string denoting the control_implementations edge name in mutations.
	EdgeControlImplementations = "control_implementations"
	// EdgeMappedControls holds the string denoting the mapped_controls edge name in mutations.
	EdgeMappedControls = "mapped_controls"
	// EdgeEvidence holds the string denoting the evidence edge name in mutations.
	EdgeEvidence = "evidence"
	// EdgeStandards holds the string denoting the standards edge name in mutations.
	EdgeStandards = "standards"
	// EdgeActionPlans holds the string denoting the action_plans edge name in mutations.
	EdgeActionPlans = "action_plans"
	// EdgeCustomDomains holds the string denoting the custom_domains edge name in mutations.
	EdgeCustomDomains = "custom_domains"
	// EdgeJobRunners holds the string denoting the job_runners edge name in mutations.
	EdgeJobRunners = "job_runners"
	// EdgeJobRunnerTokens holds the string denoting the job_runner_tokens edge name in mutations.
	EdgeJobRunnerTokens = "job_runner_tokens"
	// EdgeJobRunnerRegistrationTokens holds the string denoting the job_runner_registration_tokens edge name in mutations.
	EdgeJobRunnerRegistrationTokens = "job_runner_registration_tokens"
	// EdgeDNSVerifications holds the string denoting the dns_verifications edge name in mutations.
	EdgeDNSVerifications = "dns_verifications"
	// EdgeJobs holds the string denoting the jobs edge name in mutations.
	EdgeJobs = "jobs"
	// EdgeScheduledJobs holds the string denoting the scheduled_jobs edge name in mutations.
	EdgeScheduledJobs = "scheduled_jobs"
	// EdgeJobResults holds the string denoting the job_results edge name in mutations.
	EdgeJobResults = "job_results"
	// EdgeScheduledJobRuns holds the string denoting the scheduled_job_runs edge name in mutations.
	EdgeScheduledJobRuns = "scheduled_job_runs"
	// EdgeTrustCenters holds the string denoting the trust_centers edge name in mutations.
	EdgeTrustCenters = "trust_centers"
	// EdgeAssets holds the string denoting the assets edge name in mutations.
	EdgeAssets = "assets"
	// EdgeScans holds the string denoting the scans edge name in mutations.
	EdgeScans = "scans"
	// EdgeSubprocessors holds the string denoting the subprocessors edge name in mutations.
	EdgeSubprocessors = "subprocessors"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// Table holds the table name of the organization in the database.
	Table = "organizations"
	// ControlCreatorsTable is the table that holds the control_creators relation/edge.
	ControlCreatorsTable = "groups"
	// ControlCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	ControlCreatorsInverseTable = "groups"
	// ControlCreatorsColumn is the table column denoting the control_creators relation/edge.
	ControlCreatorsColumn = "organization_control_creators"
	// ControlImplementationCreatorsTable is the table that holds the control_implementation_creators relation/edge.
	ControlImplementationCreatorsTable = "groups"
	// ControlImplementationCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	ControlImplementationCreatorsInverseTable = "groups"
	// ControlImplementationCreatorsColumn is the table column denoting the control_implementation_creators relation/edge.
	ControlImplementationCreatorsColumn = "organization_control_implementation_creators"
	// ControlObjectiveCreatorsTable is the table that holds the control_objective_creators relation/edge.
	ControlObjectiveCreatorsTable = "groups"
	// ControlObjectiveCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	ControlObjectiveCreatorsInverseTable = "groups"
	// ControlObjectiveCreatorsColumn is the table column denoting the control_objective_creators relation/edge.
	ControlObjectiveCreatorsColumn = "organization_control_objective_creators"
	// EvidenceCreatorsTable is the table that holds the evidence_creators relation/edge.
	EvidenceCreatorsTable = "groups"
	// EvidenceCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	EvidenceCreatorsInverseTable = "groups"
	// EvidenceCreatorsColumn is the table column denoting the evidence_creators relation/edge.
	EvidenceCreatorsColumn = "organization_evidence_creators"
	// GroupCreatorsTable is the table that holds the group_creators relation/edge.
	GroupCreatorsTable = "groups"
	// GroupCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupCreatorsInverseTable = "groups"
	// GroupCreatorsColumn is the table column denoting the group_creators relation/edge.
	GroupCreatorsColumn = "organization_group_creators"
	// InternalPolicyCreatorsTable is the table that holds the internal_policy_creators relation/edge.
	InternalPolicyCreatorsTable = "groups"
	// InternalPolicyCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	InternalPolicyCreatorsInverseTable = "groups"
	// InternalPolicyCreatorsColumn is the table column denoting the internal_policy_creators relation/edge.
	InternalPolicyCreatorsColumn = "organization_internal_policy_creators"
	// MappedControlCreatorsTable is the table that holds the mapped_control_creators relation/edge.
	MappedControlCreatorsTable = "groups"
	// MappedControlCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	MappedControlCreatorsInverseTable = "groups"
	// MappedControlCreatorsColumn is the table column denoting the mapped_control_creators relation/edge.
	MappedControlCreatorsColumn = "organization_mapped_control_creators"
	// NarrativeCreatorsTable is the table that holds the narrative_creators relation/edge.
	NarrativeCreatorsTable = "groups"
	// NarrativeCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	NarrativeCreatorsInverseTable = "groups"
	// NarrativeCreatorsColumn is the table column denoting the narrative_creators relation/edge.
	NarrativeCreatorsColumn = "organization_narrative_creators"
	// ProcedureCreatorsTable is the table that holds the procedure_creators relation/edge.
	ProcedureCreatorsTable = "groups"
	// ProcedureCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	ProcedureCreatorsInverseTable = "groups"
	// ProcedureCreatorsColumn is the table column denoting the procedure_creators relation/edge.
	ProcedureCreatorsColumn = "organization_procedure_creators"
	// ProgramCreatorsTable is the table that holds the program_creators relation/edge.
	ProgramCreatorsTable = "groups"
	// ProgramCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	ProgramCreatorsInverseTable = "groups"
	// ProgramCreatorsColumn is the table column denoting the program_creators relation/edge.
	ProgramCreatorsColumn = "organization_program_creators"
	// RiskCreatorsTable is the table that holds the risk_creators relation/edge.
	RiskCreatorsTable = "groups"
	// RiskCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	RiskCreatorsInverseTable = "groups"
	// RiskCreatorsColumn is the table column denoting the risk_creators relation/edge.
	RiskCreatorsColumn = "organization_risk_creators"
	// ScheduledJobCreatorsTable is the table that holds the scheduled_job_creators relation/edge.
	ScheduledJobCreatorsTable = "groups"
	// ScheduledJobCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	ScheduledJobCreatorsInverseTable = "groups"
	// ScheduledJobCreatorsColumn is the table column denoting the scheduled_job_creators relation/edge.
	ScheduledJobCreatorsColumn = "organization_scheduled_job_creators"
	// StandardCreatorsTable is the table that holds the standard_creators relation/edge.
	StandardCreatorsTable = "groups"
	// StandardCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	StandardCreatorsInverseTable = "groups"
	// StandardCreatorsColumn is the table column denoting the standard_creators relation/edge.
	StandardCreatorsColumn = "organization_standard_creators"
	// TemplateCreatorsTable is the table that holds the template_creators relation/edge.
	TemplateCreatorsTable = "groups"
	// TemplateCreatorsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	TemplateCreatorsInverseTable = "groups"
	// TemplateCreatorsColumn is the table column denoting the template_creators relation/edge.
	TemplateCreatorsColumn = "organization_template_creators"
	// ParentTable is the table that holds the parent relation/edge.
	ParentTable = "organizations"
	// ParentColumn is the table column denoting the parent relation/edge.
	ParentColumn = "parent_organization_id"
	// ChildrenTable is the table that holds the children relation/edge.
	ChildrenTable = "organizations"
	// ChildrenColumn is the table column denoting the children relation/edge.
	ChildrenColumn = "parent_organization_id"
	// SettingTable is the table that holds the setting relation/edge.
	SettingTable = "organization_settings"
	// SettingInverseTable is the table name for the OrganizationSetting entity.
	// It exists in this package in order to avoid circular dependency with the "organizationsetting" package.
	SettingInverseTable = "organization_settings"
	// SettingColumn is the table column denoting the setting relation/edge.
	SettingColumn = "organization_id"
	// PersonalAccessTokensTable is the table that holds the personal_access_tokens relation/edge. The primary key declared below.
	PersonalAccessTokensTable = "organization_personal_access_tokens"
	// PersonalAccessTokensInverseTable is the table name for the PersonalAccessToken entity.
	// It exists in this package in order to avoid circular dependency with the "personalaccesstoken" package.
	PersonalAccessTokensInverseTable = "personal_access_tokens"
	// APITokensTable is the table that holds the api_tokens relation/edge.
	APITokensTable = "api_tokens"
	// APITokensInverseTable is the table name for the APIToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	APITokensInverseTable = "api_tokens"
	// APITokensColumn is the table column denoting the api_tokens relation/edge.
	APITokensColumn = "owner_id"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "org_memberships"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// FilesTable is the table that holds the files relation/edge. The primary key declared below.
	FilesTable = "organization_files"
	// FilesInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	FilesInverseTable = "files"
	// EventsTable is the table that holds the events relation/edge. The primary key declared below.
	EventsTable = "organization_events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
	// SecretsTable is the table that holds the secrets relation/edge.
	SecretsTable = "hushes"
	// SecretsInverseTable is the table name for the Hush entity.
	// It exists in this package in order to avoid circular dependency with the "hush" package.
	SecretsInverseTable = "hushes"
	// SecretsColumn is the table column denoting the secrets relation/edge.
	SecretsColumn = "owner_id"
	// AvatarFileTable is the table that holds the avatar_file relation/edge.
	AvatarFileTable = "organizations"
	// AvatarFileInverseTable is the table name for the File entity.
	// It exists in this package in order to avoid circular dependency with the "file" package.
	AvatarFileInverseTable = "files"
	// AvatarFileColumn is the table column denoting the avatar_file relation/edge.
	AvatarFileColumn = "avatar_local_file_id"
	// GroupsTable is the table that holds the groups relation/edge.
	GroupsTable = "groups"
	// GroupsInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupsInverseTable = "groups"
	// GroupsColumn is the table column denoting the groups relation/edge.
	GroupsColumn = "owner_id"
	// TemplatesTable is the table that holds the templates relation/edge.
	TemplatesTable = "templates"
	// TemplatesInverseTable is the table name for the Template entity.
	// It exists in this package in order to avoid circular dependency with the "template" package.
	TemplatesInverseTable = "templates"
	// TemplatesColumn is the table column denoting the templates relation/edge.
	TemplatesColumn = "owner_id"
	// IntegrationsTable is the table that holds the integrations relation/edge.
	IntegrationsTable = "integrations"
	// IntegrationsInverseTable is the table name for the Integration entity.
	// It exists in this package in order to avoid circular dependency with the "integration" package.
	IntegrationsInverseTable = "integrations"
	// IntegrationsColumn is the table column denoting the integrations relation/edge.
	IntegrationsColumn = "owner_id"
	// DocumentsTable is the table that holds the documents relation/edge.
	DocumentsTable = "document_data"
	// DocumentsInverseTable is the table name for the DocumentData entity.
	// It exists in this package in order to avoid circular dependency with the "documentdata" package.
	DocumentsInverseTable = "document_data"
	// DocumentsColumn is the table column denoting the documents relation/edge.
	DocumentsColumn = "owner_id"
	// OrgSubscriptionsTable is the table that holds the org_subscriptions relation/edge.
	OrgSubscriptionsTable = "org_subscriptions"
	// OrgSubscriptionsInverseTable is the table name for the OrgSubscription entity.
	// It exists in this package in order to avoid circular dependency with the "orgsubscription" package.
	OrgSubscriptionsInverseTable = "org_subscriptions"
	// OrgSubscriptionsColumn is the table column denoting the org_subscriptions relation/edge.
	OrgSubscriptionsColumn = "owner_id"
	// OrgProductsTable is the table that holds the org_products relation/edge.
	OrgProductsTable = "org_products"
	// OrgProductsInverseTable is the table name for the OrgProduct entity.
	// It exists in this package in order to avoid circular dependency with the "orgproduct" package.
	OrgProductsInverseTable = "org_products"
	// OrgProductsColumn is the table column denoting the org_products relation/edge.
	OrgProductsColumn = "owner_id"
	// OrgPricesTable is the table that holds the org_prices relation/edge.
	OrgPricesTable = "org_prices"
	// OrgPricesInverseTable is the table name for the OrgPrice entity.
	// It exists in this package in order to avoid circular dependency with the "orgprice" package.
	OrgPricesInverseTable = "org_prices"
	// OrgPricesColumn is the table column denoting the org_prices relation/edge.
	OrgPricesColumn = "owner_id"
	// OrgModulesTable is the table that holds the org_modules relation/edge.
	OrgModulesTable = "org_modules"
	// OrgModulesInverseTable is the table name for the OrgModule entity.
	// It exists in this package in order to avoid circular dependency with the "orgmodule" package.
	OrgModulesInverseTable = "org_modules"
	// OrgModulesColumn is the table column denoting the org_modules relation/edge.
	OrgModulesColumn = "owner_id"
	// InvitesTable is the table that holds the invites relation/edge.
	InvitesTable = "invites"
	// InvitesInverseTable is the table name for the Invite entity.
	// It exists in this package in order to avoid circular dependency with the "invite" package.
	InvitesInverseTable = "invites"
	// InvitesColumn is the table column denoting the invites relation/edge.
	InvitesColumn = "owner_id"
	// SubscribersTable is the table that holds the subscribers relation/edge.
	SubscribersTable = "subscribers"
	// SubscribersInverseTable is the table name for the Subscriber entity.
	// It exists in this package in order to avoid circular dependency with the "subscriber" package.
	SubscribersInverseTable = "subscribers"
	// SubscribersColumn is the table column denoting the subscribers relation/edge.
	SubscribersColumn = "owner_id"
	// EntitiesTable is the table that holds the entities relation/edge.
	EntitiesTable = "entities"
	// EntitiesInverseTable is the table name for the Entity entity.
	// It exists in this package in order to avoid circular dependency with the "entity" package.
	EntitiesInverseTable = "entities"
	// EntitiesColumn is the table column denoting the entities relation/edge.
	EntitiesColumn = "owner_id"
	// EntityTypesTable is the table that holds the entity_types relation/edge.
	EntityTypesTable = "entity_types"
	// EntityTypesInverseTable is the table name for the EntityType entity.
	// It exists in this package in order to avoid circular dependency with the "entitytype" package.
	EntityTypesInverseTable = "entity_types"
	// EntityTypesColumn is the table column denoting the entity_types relation/edge.
	EntityTypesColumn = "owner_id"
	// ContactsTable is the table that holds the contacts relation/edge.
	ContactsTable = "contacts"
	// ContactsInverseTable is the table name for the Contact entity.
	// It exists in this package in order to avoid circular dependency with the "contact" package.
	ContactsInverseTable = "contacts"
	// ContactsColumn is the table column denoting the contacts relation/edge.
	ContactsColumn = "owner_id"
	// NotesTable is the table that holds the notes relation/edge.
	NotesTable = "notes"
	// NotesInverseTable is the table name for the Note entity.
	// It exists in this package in order to avoid circular dependency with the "note" package.
	NotesInverseTable = "notes"
	// NotesColumn is the table column denoting the notes relation/edge.
	NotesColumn = "owner_id"
	// TasksTable is the table that holds the tasks relation/edge.
	TasksTable = "tasks"
	// TasksInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TasksInverseTable = "tasks"
	// TasksColumn is the table column denoting the tasks relation/edge.
	TasksColumn = "owner_id"
	// ProgramsTable is the table that holds the programs relation/edge.
	ProgramsTable = "programs"
	// ProgramsInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramsInverseTable = "programs"
	// ProgramsColumn is the table column denoting the programs relation/edge.
	ProgramsColumn = "owner_id"
	// ProceduresTable is the table that holds the procedures relation/edge.
	ProceduresTable = "procedures"
	// ProceduresInverseTable is the table name for the Procedure entity.
	// It exists in this package in order to avoid circular dependency with the "procedure" package.
	ProceduresInverseTable = "procedures"
	// ProceduresColumn is the table column denoting the procedures relation/edge.
	ProceduresColumn = "owner_id"
	// InternalPoliciesTable is the table that holds the internal_policies relation/edge.
	InternalPoliciesTable = "internal_policies"
	// InternalPoliciesInverseTable is the table name for the InternalPolicy entity.
	// It exists in this package in order to avoid circular dependency with the "internalpolicy" package.
	InternalPoliciesInverseTable = "internal_policies"
	// InternalPoliciesColumn is the table column denoting the internal_policies relation/edge.
	InternalPoliciesColumn = "owner_id"
	// RisksTable is the table that holds the risks relation/edge.
	RisksTable = "risks"
	// RisksInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RisksInverseTable = "risks"
	// RisksColumn is the table column denoting the risks relation/edge.
	RisksColumn = "owner_id"
	// ControlObjectivesTable is the table that holds the control_objectives relation/edge.
	ControlObjectivesTable = "control_objectives"
	// ControlObjectivesInverseTable is the table name for the ControlObjective entity.
	// It exists in this package in order to avoid circular dependency with the "controlobjective" package.
	ControlObjectivesInverseTable = "control_objectives"
	// ControlObjectivesColumn is the table column denoting the control_objectives relation/edge.
	ControlObjectivesColumn = "owner_id"
	// NarrativesTable is the table that holds the narratives relation/edge.
	NarrativesTable = "narratives"
	// NarrativesInverseTable is the table name for the Narrative entity.
	// It exists in this package in order to avoid circular dependency with the "narrative" package.
	NarrativesInverseTable = "narratives"
	// NarrativesColumn is the table column denoting the narratives relation/edge.
	NarrativesColumn = "owner_id"
	// ControlsTable is the table that holds the controls relation/edge.
	ControlsTable = "controls"
	// ControlsInverseTable is the table name for the Control entity.
	// It exists in this package in order to avoid circular dependency with the "control" package.
	ControlsInverseTable = "controls"
	// ControlsColumn is the table column denoting the controls relation/edge.
	ControlsColumn = "owner_id"
	// SubcontrolsTable is the table that holds the subcontrols relation/edge.
	SubcontrolsTable = "subcontrols"
	// SubcontrolsInverseTable is the table name for the Subcontrol entity.
	// It exists in this package in order to avoid circular dependency with the "subcontrol" package.
	SubcontrolsInverseTable = "subcontrols"
	// SubcontrolsColumn is the table column denoting the subcontrols relation/edge.
	SubcontrolsColumn = "owner_id"
	// ControlImplementationsTable is the table that holds the control_implementations relation/edge.
	ControlImplementationsTable = "control_implementations"
	// ControlImplementationsInverseTable is the table name for the ControlImplementation entity.
	// It exists in this package in order to avoid circular dependency with the "controlimplementation" package.
	ControlImplementationsInverseTable = "control_implementations"
	// ControlImplementationsColumn is the table column denoting the control_implementations relation/edge.
	ControlImplementationsColumn = "owner_id"
	// MappedControlsTable is the table that holds the mapped_controls relation/edge.
	MappedControlsTable = "mapped_controls"
	// MappedControlsInverseTable is the table name for the MappedControl entity.
	// It exists in this package in order to avoid circular dependency with the "mappedcontrol" package.
	MappedControlsInverseTable = "mapped_controls"
	// MappedControlsColumn is the table column denoting the mapped_controls relation/edge.
	MappedControlsColumn = "owner_id"
	// EvidenceTable is the table that holds the evidence relation/edge.
	EvidenceTable = "evidences"
	// EvidenceInverseTable is the table name for the Evidence entity.
	// It exists in this package in order to avoid circular dependency with the "evidence" package.
	EvidenceInverseTable = "evidences"
	// EvidenceColumn is the table column denoting the evidence relation/edge.
	EvidenceColumn = "owner_id"
	// StandardsTable is the table that holds the standards relation/edge.
	StandardsTable = "standards"
	// StandardsInverseTable is the table name for the Standard entity.
	// It exists in this package in order to avoid circular dependency with the "standard" package.
	StandardsInverseTable = "standards"
	// StandardsColumn is the table column denoting the standards relation/edge.
	StandardsColumn = "owner_id"
	// ActionPlansTable is the table that holds the action_plans relation/edge.
	ActionPlansTable = "action_plans"
	// ActionPlansInverseTable is the table name for the ActionPlan entity.
	// It exists in this package in order to avoid circular dependency with the "actionplan" package.
	ActionPlansInverseTable = "action_plans"
	// ActionPlansColumn is the table column denoting the action_plans relation/edge.
	ActionPlansColumn = "owner_id"
	// CustomDomainsTable is the table that holds the custom_domains relation/edge.
	CustomDomainsTable = "custom_domains"
	// CustomDomainsInverseTable is the table name for the CustomDomain entity.
	// It exists in this package in order to avoid circular dependency with the "customdomain" package.
	CustomDomainsInverseTable = "custom_domains"
	// CustomDomainsColumn is the table column denoting the custom_domains relation/edge.
	CustomDomainsColumn = "owner_id"
	// JobRunnersTable is the table that holds the job_runners relation/edge.
	JobRunnersTable = "job_runners"
	// JobRunnersInverseTable is the table name for the JobRunner entity.
	// It exists in this package in order to avoid circular dependency with the "jobrunner" package.
	JobRunnersInverseTable = "job_runners"
	// JobRunnersColumn is the table column denoting the job_runners relation/edge.
	JobRunnersColumn = "owner_id"
	// JobRunnerTokensTable is the table that holds the job_runner_tokens relation/edge.
	JobRunnerTokensTable = "job_runner_tokens"
	// JobRunnerTokensInverseTable is the table name for the JobRunnerToken entity.
	// It exists in this package in order to avoid circular dependency with the "jobrunnertoken" package.
	JobRunnerTokensInverseTable = "job_runner_tokens"
	// JobRunnerTokensColumn is the table column denoting the job_runner_tokens relation/edge.
	JobRunnerTokensColumn = "owner_id"
	// JobRunnerRegistrationTokensTable is the table that holds the job_runner_registration_tokens relation/edge.
	JobRunnerRegistrationTokensTable = "job_runner_registration_tokens"
	// JobRunnerRegistrationTokensInverseTable is the table name for the JobRunnerRegistrationToken entity.
	// It exists in this package in order to avoid circular dependency with the "jobrunnerregistrationtoken" package.
	JobRunnerRegistrationTokensInverseTable = "job_runner_registration_tokens"
	// JobRunnerRegistrationTokensColumn is the table column denoting the job_runner_registration_tokens relation/edge.
	JobRunnerRegistrationTokensColumn = "owner_id"
	// DNSVerificationsTable is the table that holds the dns_verifications relation/edge.
	DNSVerificationsTable = "dns_verifications"
	// DNSVerificationsInverseTable is the table name for the DNSVerification entity.
	// It exists in this package in order to avoid circular dependency with the "dnsverification" package.
	DNSVerificationsInverseTable = "dns_verifications"
	// DNSVerificationsColumn is the table column denoting the dns_verifications relation/edge.
	DNSVerificationsColumn = "owner_id"
	// JobsTable is the table that holds the jobs relation/edge.
	JobsTable = "scheduled_jobs"
	// JobsInverseTable is the table name for the ScheduledJob entity.
	// It exists in this package in order to avoid circular dependency with the "scheduledjob" package.
	JobsInverseTable = "scheduled_jobs"
	// JobsColumn is the table column denoting the jobs relation/edge.
	JobsColumn = "owner_id"
	// ScheduledJobsTable is the table that holds the scheduled_jobs relation/edge.
	ScheduledJobsTable = "control_scheduled_jobs"
	// ScheduledJobsInverseTable is the table name for the ControlScheduledJob entity.
	// It exists in this package in order to avoid circular dependency with the "controlscheduledjob" package.
	ScheduledJobsInverseTable = "control_scheduled_jobs"
	// ScheduledJobsColumn is the table column denoting the scheduled_jobs relation/edge.
	ScheduledJobsColumn = "owner_id"
	// JobResultsTable is the table that holds the job_results relation/edge.
	JobResultsTable = "job_results"
	// JobResultsInverseTable is the table name for the JobResult entity.
	// It exists in this package in order to avoid circular dependency with the "jobresult" package.
	JobResultsInverseTable = "job_results"
	// JobResultsColumn is the table column denoting the job_results relation/edge.
	JobResultsColumn = "owner_id"
	// ScheduledJobRunsTable is the table that holds the scheduled_job_runs relation/edge.
	ScheduledJobRunsTable = "scheduled_job_runs"
	// ScheduledJobRunsInverseTable is the table name for the ScheduledJobRun entity.
	// It exists in this package in order to avoid circular dependency with the "scheduledjobrun" package.
	ScheduledJobRunsInverseTable = "scheduled_job_runs"
	// ScheduledJobRunsColumn is the table column denoting the scheduled_job_runs relation/edge.
	ScheduledJobRunsColumn = "owner_id"
	// TrustCentersTable is the table that holds the trust_centers relation/edge.
	TrustCentersTable = "trust_centers"
	// TrustCentersInverseTable is the table name for the TrustCenter entity.
	// It exists in this package in order to avoid circular dependency with the "trustcenter" package.
	TrustCentersInverseTable = "trust_centers"
	// TrustCentersColumn is the table column denoting the trust_centers relation/edge.
	TrustCentersColumn = "owner_id"
	// AssetsTable is the table that holds the assets relation/edge.
	AssetsTable = "assets"
	// AssetsInverseTable is the table name for the Asset entity.
	// It exists in this package in order to avoid circular dependency with the "asset" package.
	AssetsInverseTable = "assets"
	// AssetsColumn is the table column denoting the assets relation/edge.
	AssetsColumn = "owner_id"
	// ScansTable is the table that holds the scans relation/edge.
	ScansTable = "scans"
	// ScansInverseTable is the table name for the Scan entity.
	// It exists in this package in order to avoid circular dependency with the "scan" package.
	ScansInverseTable = "scans"
	// ScansColumn is the table column denoting the scans relation/edge.
	ScansColumn = "owner_id"
	// SubprocessorsTable is the table that holds the subprocessors relation/edge.
	SubprocessorsTable = "subprocessors"
	// SubprocessorsInverseTable is the table name for the Subprocessor entity.
	// It exists in this package in order to avoid circular dependency with the "subprocessor" package.
	SubprocessorsInverseTable = "subprocessors"
	// SubprocessorsColumn is the table column denoting the subprocessors relation/edge.
	SubprocessorsColumn = "owner_id"
	// MembersTable is the table that holds the members relation/edge.
	MembersTable = "org_memberships"
	// MembersInverseTable is the table name for the OrgMembership entity.
	// It exists in this package in order to avoid circular dependency with the "orgmembership" package.
	MembersInverseTable = "org_memberships"
	// MembersColumn is the table column denoting the members relation/edge.
	MembersColumn = "organization_id"
)

// Columns holds all SQL columns for organization fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTags,
	FieldName,
	FieldDisplayName,
	FieldDescription,
	FieldParentOrganizationID,
	FieldPersonalOrg,
	FieldAvatarRemoteURL,
	FieldAvatarLocalFileID,
	FieldAvatarUpdatedAt,
	FieldDedicatedDb,
}

var (
	// PersonalAccessTokensPrimaryKey and PersonalAccessTokensColumn2 are the table columns denoting the
	// primary key for the personal_access_tokens relation (M2M).
	PersonalAccessTokensPrimaryKey = []string{"organization_id", "personal_access_token_id"}
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "organization_id"}
	// FilesPrimaryKey and FilesColumn2 are the table columns denoting the
	// primary key for the files relation (M2M).
	FilesPrimaryKey = []string{"organization_id", "file_id"}
	// EventsPrimaryKey and EventsColumn2 are the table columns denoting the
	// primary key for the events relation (M2M).
	EventsPrimaryKey = []string{"organization_id", "event_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [20]ent.Hook
	Interceptors [2]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultDisplayName holds the default value on creation for the "display_name" field.
	DefaultDisplayName string
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
	// DefaultPersonalOrg holds the default value on creation for the "personal_org" field.
	DefaultPersonalOrg bool
	// AvatarRemoteURLValidator is a validator for the "avatar_remote_url" field. It is called by the builders before save.
	AvatarRemoteURLValidator func(string) error
	// DefaultAvatarUpdatedAt holds the default value on creation for the "avatar_updated_at" field.
	DefaultAvatarUpdatedAt func() time.Time
	// UpdateDefaultAvatarUpdatedAt holds the default value on update for the "avatar_updated_at" field.
	UpdateDefaultAvatarUpdatedAt func() time.Time
	// DefaultDedicatedDb holds the default value on creation for the "dedicated_db" field.
	DefaultDedicatedDb bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Organization queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDisplayName orders the results by the display_name field.
func ByDisplayName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByParentOrganizationID orders the results by the parent_organization_id field.
func ByParentOrganizationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentOrganizationID, opts...).ToFunc()
}

// ByPersonalOrg orders the results by the personal_org field.
func ByPersonalOrg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersonalOrg, opts...).ToFunc()
}

// ByAvatarRemoteURL orders the results by the avatar_remote_url field.
func ByAvatarRemoteURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarRemoteURL, opts...).ToFunc()
}

// ByAvatarLocalFileID orders the results by the avatar_local_file_id field.
func ByAvatarLocalFileID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarLocalFileID, opts...).ToFunc()
}

// ByAvatarUpdatedAt orders the results by the avatar_updated_at field.
func ByAvatarUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarUpdatedAt, opts...).ToFunc()
}

// ByDedicatedDb orders the results by the dedicated_db field.
func ByDedicatedDb(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDedicatedDb, opts...).ToFunc()
}

// ByControlCreatorsCount orders the results by control_creators count.
func ByControlCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlCreatorsStep(), opts...)
	}
}

// ByControlCreators orders the results by control_creators terms.
func ByControlCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlImplementationCreatorsCount orders the results by control_implementation_creators count.
func ByControlImplementationCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlImplementationCreatorsStep(), opts...)
	}
}

// ByControlImplementationCreators orders the results by control_implementation_creators terms.
func ByControlImplementationCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlImplementationCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlObjectiveCreatorsCount orders the results by control_objective_creators count.
func ByControlObjectiveCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlObjectiveCreatorsStep(), opts...)
	}
}

// ByControlObjectiveCreators orders the results by control_objective_creators terms.
func ByControlObjectiveCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlObjectiveCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEvidenceCreatorsCount orders the results by evidence_creators count.
func ByEvidenceCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEvidenceCreatorsStep(), opts...)
	}
}

// ByEvidenceCreators orders the results by evidence_creators terms.
func ByEvidenceCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEvidenceCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupCreatorsCount orders the results by group_creators count.
func ByGroupCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupCreatorsStep(), opts...)
	}
}

// ByGroupCreators orders the results by group_creators terms.
func ByGroupCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInternalPolicyCreatorsCount orders the results by internal_policy_creators count.
func ByInternalPolicyCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInternalPolicyCreatorsStep(), opts...)
	}
}

// ByInternalPolicyCreators orders the results by internal_policy_creators terms.
func ByInternalPolicyCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalPolicyCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMappedControlCreatorsCount orders the results by mapped_control_creators count.
func ByMappedControlCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMappedControlCreatorsStep(), opts...)
	}
}

// ByMappedControlCreators orders the results by mapped_control_creators terms.
func ByMappedControlCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMappedControlCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNarrativeCreatorsCount orders the results by narrative_creators count.
func ByNarrativeCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNarrativeCreatorsStep(), opts...)
	}
}

// ByNarrativeCreators orders the results by narrative_creators terms.
func ByNarrativeCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNarrativeCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProcedureCreatorsCount orders the results by procedure_creators count.
func ByProcedureCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProcedureCreatorsStep(), opts...)
	}
}

// ByProcedureCreators orders the results by procedure_creators terms.
func ByProcedureCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProcedureCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramCreatorsCount orders the results by program_creators count.
func ByProgramCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramCreatorsStep(), opts...)
	}
}

// ByProgramCreators orders the results by program_creators terms.
func ByProgramCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskCreatorsCount orders the results by risk_creators count.
func ByRiskCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskCreatorsStep(), opts...)
	}
}

// ByRiskCreators orders the results by risk_creators terms.
func ByRiskCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScheduledJobCreatorsCount orders the results by scheduled_job_creators count.
func ByScheduledJobCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScheduledJobCreatorsStep(), opts...)
	}
}

// ByScheduledJobCreators orders the results by scheduled_job_creators terms.
func ByScheduledJobCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScheduledJobCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStandardCreatorsCount orders the results by standard_creators count.
func ByStandardCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStandardCreatorsStep(), opts...)
	}
}

// ByStandardCreators orders the results by standard_creators terms.
func ByStandardCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStandardCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTemplateCreatorsCount orders the results by template_creators count.
func ByTemplateCreatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTemplateCreatorsStep(), opts...)
	}
}

// ByTemplateCreators orders the results by template_creators terms.
func ByTemplateCreators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTemplateCreatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByParentField orders the results by parent field.
func ByParentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentStep(), sql.OrderByField(field, opts...))
	}
}

// ByChildrenCount orders the results by children count.
func ByChildrenCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newChildrenStep(), opts...)
	}
}

// ByChildren orders the results by children terms.
func ByChildren(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newChildrenStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySettingField orders the results by setting field.
func BySettingField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSettingStep(), sql.OrderByField(field, opts...))
	}
}

// ByPersonalAccessTokensCount orders the results by personal_access_tokens count.
func ByPersonalAccessTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPersonalAccessTokensStep(), opts...)
	}
}

// ByPersonalAccessTokens orders the results by personal_access_tokens terms.
func ByPersonalAccessTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPersonalAccessTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAPITokensCount orders the results by api_tokens count.
func ByAPITokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAPITokensStep(), opts...)
	}
}

// ByAPITokens orders the results by api_tokens terms.
func ByAPITokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPITokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFilesCount orders the results by files count.
func ByFilesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFilesStep(), opts...)
	}
}

// ByFiles orders the results by files terms.
func ByFiles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFilesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySecretsCount orders the results by secrets count.
func BySecretsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSecretsStep(), opts...)
	}
}

// BySecrets orders the results by secrets terms.
func BySecrets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSecretsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAvatarFileField orders the results by avatar_file field.
func ByAvatarFileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAvatarFileStep(), sql.OrderByField(field, opts...))
	}
}

// ByGroupsCount orders the results by groups count.
func ByGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupsStep(), opts...)
	}
}

// ByGroups orders the results by groups terms.
func ByGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTemplatesCount orders the results by templates count.
func ByTemplatesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTemplatesStep(), opts...)
	}
}

// ByTemplates orders the results by templates terms.
func ByTemplates(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTemplatesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByIntegrationsCount orders the results by integrations count.
func ByIntegrationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIntegrationsStep(), opts...)
	}
}

// ByIntegrations orders the results by integrations terms.
func ByIntegrations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIntegrationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDocumentsCount orders the results by documents count.
func ByDocumentsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDocumentsStep(), opts...)
	}
}

// ByDocuments orders the results by documents terms.
func ByDocuments(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrgSubscriptionsCount orders the results by org_subscriptions count.
func ByOrgSubscriptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrgSubscriptionsStep(), opts...)
	}
}

// ByOrgSubscriptions orders the results by org_subscriptions terms.
func ByOrgSubscriptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgSubscriptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrgProductsCount orders the results by org_products count.
func ByOrgProductsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrgProductsStep(), opts...)
	}
}

// ByOrgProducts orders the results by org_products terms.
func ByOrgProducts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgProductsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrgPricesCount orders the results by org_prices count.
func ByOrgPricesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrgPricesStep(), opts...)
	}
}

// ByOrgPrices orders the results by org_prices terms.
func ByOrgPrices(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgPricesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOrgModulesCount orders the results by org_modules count.
func ByOrgModulesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOrgModulesStep(), opts...)
	}
}

// ByOrgModules orders the results by org_modules terms.
func ByOrgModules(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgModulesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvitesCount orders the results by invites count.
func ByInvitesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvitesStep(), opts...)
	}
}

// ByInvites orders the results by invites terms.
func ByInvites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvitesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubscribersCount orders the results by subscribers count.
func BySubscribersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscribersStep(), opts...)
	}
}

// BySubscribers orders the results by subscribers terms.
func BySubscribers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscribersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEntitiesCount orders the results by entities count.
func ByEntitiesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEntitiesStep(), opts...)
	}
}

// ByEntities orders the results by entities terms.
func ByEntities(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntitiesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEntityTypesCount orders the results by entity_types count.
func ByEntityTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEntityTypesStep(), opts...)
	}
}

// ByEntityTypes orders the results by entity_types terms.
func ByEntityTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntityTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByContactsCount orders the results by contacts count.
func ByContactsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newContactsStep(), opts...)
	}
}

// ByContacts orders the results by contacts terms.
func ByContacts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newContactsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotesCount orders the results by notes count.
func ByNotesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotesStep(), opts...)
	}
}

// ByNotes orders the results by notes terms.
func ByNotes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTasksCount orders the results by tasks count.
func ByTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTasksStep(), opts...)
	}
}

// ByTasks orders the results by tasks terms.
func ByTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramsCount orders the results by programs count.
func ByProgramsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramsStep(), opts...)
	}
}

// ByPrograms orders the results by programs terms.
func ByPrograms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProceduresCount orders the results by procedures count.
func ByProceduresCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProceduresStep(), opts...)
	}
}

// ByProcedures orders the results by procedures terms.
func ByProcedures(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProceduresStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInternalPoliciesCount orders the results by internal_policies count.
func ByInternalPoliciesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInternalPoliciesStep(), opts...)
	}
}

// ByInternalPolicies orders the results by internal_policies terms.
func ByInternalPolicies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalPoliciesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRisksCount orders the results by risks count.
func ByRisksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRisksStep(), opts...)
	}
}

// ByRisks orders the results by risks terms.
func ByRisks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRisksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlObjectivesCount orders the results by control_objectives count.
func ByControlObjectivesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlObjectivesStep(), opts...)
	}
}

// ByControlObjectives orders the results by control_objectives terms.
func ByControlObjectives(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlObjectivesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNarrativesCount orders the results by narratives count.
func ByNarrativesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNarrativesStep(), opts...)
	}
}

// ByNarratives orders the results by narratives terms.
func ByNarratives(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNarrativesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlsCount orders the results by controls count.
func ByControlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlsStep(), opts...)
	}
}

// ByControls orders the results by controls terms.
func ByControls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubcontrolsCount orders the results by subcontrols count.
func BySubcontrolsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubcontrolsStep(), opts...)
	}
}

// BySubcontrols orders the results by subcontrols terms.
func BySubcontrols(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubcontrolsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlImplementationsCount orders the results by control_implementations count.
func ByControlImplementationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlImplementationsStep(), opts...)
	}
}

// ByControlImplementations orders the results by control_implementations terms.
func ByControlImplementations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlImplementationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMappedControlsCount orders the results by mapped_controls count.
func ByMappedControlsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMappedControlsStep(), opts...)
	}
}

// ByMappedControls orders the results by mapped_controls terms.
func ByMappedControls(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMappedControlsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEvidenceCount orders the results by evidence count.
func ByEvidenceCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEvidenceStep(), opts...)
	}
}

// ByEvidence orders the results by evidence terms.
func ByEvidence(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEvidenceStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStandardsCount orders the results by standards count.
func ByStandardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStandardsStep(), opts...)
	}
}

// ByStandards orders the results by standards terms.
func ByStandards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStandardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByActionPlansCount orders the results by action_plans count.
func ByActionPlansCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newActionPlansStep(), opts...)
	}
}

// ByActionPlans orders the results by action_plans terms.
func ByActionPlans(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActionPlansStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCustomDomainsCount orders the results by custom_domains count.
func ByCustomDomainsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCustomDomainsStep(), opts...)
	}
}

// ByCustomDomains orders the results by custom_domains terms.
func ByCustomDomains(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomDomainsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobRunnersCount orders the results by job_runners count.
func ByJobRunnersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobRunnersStep(), opts...)
	}
}

// ByJobRunners orders the results by job_runners terms.
func ByJobRunners(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobRunnersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobRunnerTokensCount orders the results by job_runner_tokens count.
func ByJobRunnerTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobRunnerTokensStep(), opts...)
	}
}

// ByJobRunnerTokens orders the results by job_runner_tokens terms.
func ByJobRunnerTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobRunnerTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobRunnerRegistrationTokensCount orders the results by job_runner_registration_tokens count.
func ByJobRunnerRegistrationTokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobRunnerRegistrationTokensStep(), opts...)
	}
}

// ByJobRunnerRegistrationTokens orders the results by job_runner_registration_tokens terms.
func ByJobRunnerRegistrationTokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobRunnerRegistrationTokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDNSVerificationsCount orders the results by dns_verifications count.
func ByDNSVerificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDNSVerificationsStep(), opts...)
	}
}

// ByDNSVerifications orders the results by dns_verifications terms.
func ByDNSVerifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDNSVerificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobsCount orders the results by jobs count.
func ByJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobsStep(), opts...)
	}
}

// ByJobs orders the results by jobs terms.
func ByJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScheduledJobsCount orders the results by scheduled_jobs count.
func ByScheduledJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScheduledJobsStep(), opts...)
	}
}

// ByScheduledJobs orders the results by scheduled_jobs terms.
func ByScheduledJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScheduledJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobResultsCount orders the results by job_results count.
func ByJobResultsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobResultsStep(), opts...)
	}
}

// ByJobResults orders the results by job_results terms.
func ByJobResults(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobResultsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScheduledJobRunsCount orders the results by scheduled_job_runs count.
func ByScheduledJobRunsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScheduledJobRunsStep(), opts...)
	}
}

// ByScheduledJobRuns orders the results by scheduled_job_runs terms.
func ByScheduledJobRuns(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScheduledJobRunsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTrustCentersCount orders the results by trust_centers count.
func ByTrustCentersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTrustCentersStep(), opts...)
	}
}

// ByTrustCenters orders the results by trust_centers terms.
func ByTrustCenters(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTrustCentersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAssetsCount orders the results by assets count.
func ByAssetsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAssetsStep(), opts...)
	}
}

// ByAssets orders the results by assets terms.
func ByAssets(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAssetsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScansCount orders the results by scans count.
func ByScansCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScansStep(), opts...)
	}
}

// ByScans orders the results by scans terms.
func ByScans(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScansStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubprocessorsCount orders the results by subprocessors count.
func BySubprocessorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubprocessorsStep(), opts...)
	}
}

// BySubprocessors orders the results by subprocessors terms.
func BySubprocessors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubprocessorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newControlCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ControlCreatorsTable, ControlCreatorsColumn),
	)
}
func newControlImplementationCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlImplementationCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ControlImplementationCreatorsTable, ControlImplementationCreatorsColumn),
	)
}
func newControlObjectiveCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlObjectiveCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ControlObjectiveCreatorsTable, ControlObjectiveCreatorsColumn),
	)
}
func newEvidenceCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EvidenceCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EvidenceCreatorsTable, EvidenceCreatorsColumn),
	)
}
func newGroupCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroupCreatorsTable, GroupCreatorsColumn),
	)
}
func newInternalPolicyCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalPolicyCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InternalPolicyCreatorsTable, InternalPolicyCreatorsColumn),
	)
}
func newMappedControlCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MappedControlCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MappedControlCreatorsTable, MappedControlCreatorsColumn),
	)
}
func newNarrativeCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NarrativeCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NarrativeCreatorsTable, NarrativeCreatorsColumn),
	)
}
func newProcedureCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProcedureCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProcedureCreatorsTable, ProcedureCreatorsColumn),
	)
}
func newProgramCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProgramCreatorsTable, ProgramCreatorsColumn),
	)
}
func newRiskCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RiskCreatorsTable, RiskCreatorsColumn),
	)
}
func newScheduledJobCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScheduledJobCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScheduledJobCreatorsTable, ScheduledJobCreatorsColumn),
	)
}
func newStandardCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StandardCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StandardCreatorsTable, StandardCreatorsColumn),
	)
}
func newTemplateCreatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TemplateCreatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TemplateCreatorsTable, TemplateCreatorsColumn),
	)
}
func newParentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
	)
}
func newChildrenStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
	)
}
func newSettingStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SettingInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SettingTable, SettingColumn),
	)
}
func newPersonalAccessTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PersonalAccessTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PersonalAccessTokensTable, PersonalAccessTokensPrimaryKey...),
	)
}
func newAPITokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APITokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, APITokensTable, APITokensColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
	)
}
func newFilesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FilesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, FilesTable, FilesPrimaryKey...),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EventsTable, EventsPrimaryKey...),
	)
}
func newSecretsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SecretsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SecretsTable, SecretsColumn),
	)
}
func newAvatarFileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AvatarFileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AvatarFileTable, AvatarFileColumn),
	)
}
func newGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
	)
}
func newTemplatesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TemplatesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TemplatesTable, TemplatesColumn),
	)
}
func newIntegrationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IntegrationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, IntegrationsTable, IntegrationsColumn),
	)
}
func newDocumentsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DocumentsTable, DocumentsColumn),
	)
}
func newOrgSubscriptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgSubscriptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrgSubscriptionsTable, OrgSubscriptionsColumn),
	)
}
func newOrgProductsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgProductsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrgProductsTable, OrgProductsColumn),
	)
}
func newOrgPricesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgPricesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrgPricesTable, OrgPricesColumn),
	)
}
func newOrgModulesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgModulesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OrgModulesTable, OrgModulesColumn),
	)
}
func newInvitesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvitesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InvitesTable, InvitesColumn),
	)
}
func newSubscribersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscribersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubscribersTable, SubscribersColumn),
	)
}
func newEntitiesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntitiesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EntitiesTable, EntitiesColumn),
	)
}
func newEntityTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntityTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EntityTypesTable, EntityTypesColumn),
	)
}
func newContactsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ContactsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ContactsTable, ContactsColumn),
	)
}
func newNotesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NotesTable, NotesColumn),
	)
}
func newTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
	)
}
func newProgramsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProgramsTable, ProgramsColumn),
	)
}
func newProceduresStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProceduresInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProceduresTable, ProceduresColumn),
	)
}
func newInternalPoliciesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalPoliciesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InternalPoliciesTable, InternalPoliciesColumn),
	)
}
func newRisksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RisksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RisksTable, RisksColumn),
	)
}
func newControlObjectivesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlObjectivesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ControlObjectivesTable, ControlObjectivesColumn),
	)
}
func newNarrativesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NarrativesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NarrativesTable, NarrativesColumn),
	)
}
func newControlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ControlsTable, ControlsColumn),
	)
}
func newSubcontrolsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubcontrolsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubcontrolsTable, SubcontrolsColumn),
	)
}
func newControlImplementationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlImplementationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ControlImplementationsTable, ControlImplementationsColumn),
	)
}
func newMappedControlsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MappedControlsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MappedControlsTable, MappedControlsColumn),
	)
}
func newEvidenceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EvidenceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EvidenceTable, EvidenceColumn),
	)
}
func newStandardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StandardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StandardsTable, StandardsColumn),
	)
}
func newActionPlansStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActionPlansInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ActionPlansTable, ActionPlansColumn),
	)
}
func newCustomDomainsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomDomainsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, CustomDomainsTable, CustomDomainsColumn),
	)
}
func newJobRunnersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobRunnersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobRunnersTable, JobRunnersColumn),
	)
}
func newJobRunnerTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobRunnerTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobRunnerTokensTable, JobRunnerTokensColumn),
	)
}
func newJobRunnerRegistrationTokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobRunnerRegistrationTokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobRunnerRegistrationTokensTable, JobRunnerRegistrationTokensColumn),
	)
}
func newDNSVerificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DNSVerificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DNSVerificationsTable, DNSVerificationsColumn),
	)
}
func newJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobsTable, JobsColumn),
	)
}
func newScheduledJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScheduledJobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScheduledJobsTable, ScheduledJobsColumn),
	)
}
func newJobResultsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobResultsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, JobResultsTable, JobResultsColumn),
	)
}
func newScheduledJobRunsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScheduledJobRunsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScheduledJobRunsTable, ScheduledJobRunsColumn),
	)
}
func newTrustCentersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TrustCentersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TrustCentersTable, TrustCentersColumn),
	)
}
func newAssetsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AssetsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AssetsTable, AssetsColumn),
	)
}
func newScansStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScansInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScansTable, ScansColumn),
	)
}
func newSubprocessorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubprocessorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubprocessorsTable, SubprocessorsColumn),
	)
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, MembersTable, MembersColumn),
	)
}
