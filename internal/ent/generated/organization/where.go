// Code generated by ent, DO NOT EDIT.

package organization

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDeletedBy, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldName, v))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDisplayName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDescription, v))
}

// ParentOrganizationID applies equality check predicate on the "parent_organization_id" field. It's identical to ParentOrganizationIDEQ.
func ParentOrganizationID(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldParentOrganizationID, v))
}

// PersonalOrg applies equality check predicate on the "personal_org" field. It's identical to PersonalOrgEQ.
func PersonalOrg(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldPersonalOrg, v))
}

// AvatarRemoteURL applies equality check predicate on the "avatar_remote_url" field. It's identical to AvatarRemoteURLEQ.
func AvatarRemoteURL(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAvatarRemoteURL, v))
}

// AvatarLocalFileID applies equality check predicate on the "avatar_local_file_id" field. It's identical to AvatarLocalFileIDEQ.
func AvatarLocalFileID(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAvatarLocalFileID, v))
}

// AvatarUpdatedAt applies equality check predicate on the "avatar_updated_at" field. It's identical to AvatarUpdatedAtEQ.
func AvatarUpdatedAt(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAvatarUpdatedAt, v))
}

// DedicatedDb applies equality check predicate on the "dedicated_db" field. It's identical to DedicatedDbEQ.
func DedicatedDb(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDedicatedDb, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldDeletedBy, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldTags))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldDisplayName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldDescription, v))
}

// ParentOrganizationIDEQ applies the EQ predicate on the "parent_organization_id" field.
func ParentOrganizationIDEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldParentOrganizationID, v))
}

// ParentOrganizationIDNEQ applies the NEQ predicate on the "parent_organization_id" field.
func ParentOrganizationIDNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldParentOrganizationID, v))
}

// ParentOrganizationIDIn applies the In predicate on the "parent_organization_id" field.
func ParentOrganizationIDIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldParentOrganizationID, vs...))
}

// ParentOrganizationIDNotIn applies the NotIn predicate on the "parent_organization_id" field.
func ParentOrganizationIDNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldParentOrganizationID, vs...))
}

// ParentOrganizationIDGT applies the GT predicate on the "parent_organization_id" field.
func ParentOrganizationIDGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldParentOrganizationID, v))
}

// ParentOrganizationIDGTE applies the GTE predicate on the "parent_organization_id" field.
func ParentOrganizationIDGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldParentOrganizationID, v))
}

// ParentOrganizationIDLT applies the LT predicate on the "parent_organization_id" field.
func ParentOrganizationIDLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldParentOrganizationID, v))
}

// ParentOrganizationIDLTE applies the LTE predicate on the "parent_organization_id" field.
func ParentOrganizationIDLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldParentOrganizationID, v))
}

// ParentOrganizationIDContains applies the Contains predicate on the "parent_organization_id" field.
func ParentOrganizationIDContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldParentOrganizationID, v))
}

// ParentOrganizationIDHasPrefix applies the HasPrefix predicate on the "parent_organization_id" field.
func ParentOrganizationIDHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldParentOrganizationID, v))
}

// ParentOrganizationIDHasSuffix applies the HasSuffix predicate on the "parent_organization_id" field.
func ParentOrganizationIDHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldParentOrganizationID, v))
}

// ParentOrganizationIDIsNil applies the IsNil predicate on the "parent_organization_id" field.
func ParentOrganizationIDIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldParentOrganizationID))
}

// ParentOrganizationIDNotNil applies the NotNil predicate on the "parent_organization_id" field.
func ParentOrganizationIDNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldParentOrganizationID))
}

// ParentOrganizationIDEqualFold applies the EqualFold predicate on the "parent_organization_id" field.
func ParentOrganizationIDEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldParentOrganizationID, v))
}

// ParentOrganizationIDContainsFold applies the ContainsFold predicate on the "parent_organization_id" field.
func ParentOrganizationIDContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldParentOrganizationID, v))
}

// PersonalOrgEQ applies the EQ predicate on the "personal_org" field.
func PersonalOrgEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldPersonalOrg, v))
}

// PersonalOrgNEQ applies the NEQ predicate on the "personal_org" field.
func PersonalOrgNEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldPersonalOrg, v))
}

// PersonalOrgIsNil applies the IsNil predicate on the "personal_org" field.
func PersonalOrgIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldPersonalOrg))
}

// PersonalOrgNotNil applies the NotNil predicate on the "personal_org" field.
func PersonalOrgNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldPersonalOrg))
}

// AvatarRemoteURLEQ applies the EQ predicate on the "avatar_remote_url" field.
func AvatarRemoteURLEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLNEQ applies the NEQ predicate on the "avatar_remote_url" field.
func AvatarRemoteURLNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLIn applies the In predicate on the "avatar_remote_url" field.
func AvatarRemoteURLIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldAvatarRemoteURL, vs...))
}

// AvatarRemoteURLNotIn applies the NotIn predicate on the "avatar_remote_url" field.
func AvatarRemoteURLNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldAvatarRemoteURL, vs...))
}

// AvatarRemoteURLGT applies the GT predicate on the "avatar_remote_url" field.
func AvatarRemoteURLGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLGTE applies the GTE predicate on the "avatar_remote_url" field.
func AvatarRemoteURLGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLLT applies the LT predicate on the "avatar_remote_url" field.
func AvatarRemoteURLLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLLTE applies the LTE predicate on the "avatar_remote_url" field.
func AvatarRemoteURLLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLContains applies the Contains predicate on the "avatar_remote_url" field.
func AvatarRemoteURLContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLHasPrefix applies the HasPrefix predicate on the "avatar_remote_url" field.
func AvatarRemoteURLHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLHasSuffix applies the HasSuffix predicate on the "avatar_remote_url" field.
func AvatarRemoteURLHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLIsNil applies the IsNil predicate on the "avatar_remote_url" field.
func AvatarRemoteURLIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldAvatarRemoteURL))
}

// AvatarRemoteURLNotNil applies the NotNil predicate on the "avatar_remote_url" field.
func AvatarRemoteURLNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldAvatarRemoteURL))
}

// AvatarRemoteURLEqualFold applies the EqualFold predicate on the "avatar_remote_url" field.
func AvatarRemoteURLEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldAvatarRemoteURL, v))
}

// AvatarRemoteURLContainsFold applies the ContainsFold predicate on the "avatar_remote_url" field.
func AvatarRemoteURLContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldAvatarRemoteURL, v))
}

// AvatarLocalFileIDEQ applies the EQ predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDNEQ applies the NEQ predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDNEQ(v string) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDIn applies the In predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldAvatarLocalFileID, vs...))
}

// AvatarLocalFileIDNotIn applies the NotIn predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDNotIn(vs ...string) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldAvatarLocalFileID, vs...))
}

// AvatarLocalFileIDGT applies the GT predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDGT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDGTE applies the GTE predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDGTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDLT applies the LT predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDLT(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDLTE applies the LTE predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDLTE(v string) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDContains applies the Contains predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDContains(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContains(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDHasPrefix applies the HasPrefix predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDHasPrefix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasPrefix(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDHasSuffix applies the HasSuffix predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDHasSuffix(v string) predicate.Organization {
	return predicate.Organization(sql.FieldHasSuffix(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDIsNil applies the IsNil predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldAvatarLocalFileID))
}

// AvatarLocalFileIDNotNil applies the NotNil predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldAvatarLocalFileID))
}

// AvatarLocalFileIDEqualFold applies the EqualFold predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDEqualFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldEqualFold(FieldAvatarLocalFileID, v))
}

// AvatarLocalFileIDContainsFold applies the ContainsFold predicate on the "avatar_local_file_id" field.
func AvatarLocalFileIDContainsFold(v string) predicate.Organization {
	return predicate.Organization(sql.FieldContainsFold(FieldAvatarLocalFileID, v))
}

// AvatarUpdatedAtEQ applies the EQ predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldAvatarUpdatedAt, v))
}

// AvatarUpdatedAtNEQ applies the NEQ predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtNEQ(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldAvatarUpdatedAt, v))
}

// AvatarUpdatedAtIn applies the In predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldIn(FieldAvatarUpdatedAt, vs...))
}

// AvatarUpdatedAtNotIn applies the NotIn predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtNotIn(vs ...time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldNotIn(FieldAvatarUpdatedAt, vs...))
}

// AvatarUpdatedAtGT applies the GT predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtGT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGT(FieldAvatarUpdatedAt, v))
}

// AvatarUpdatedAtGTE applies the GTE predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtGTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldGTE(FieldAvatarUpdatedAt, v))
}

// AvatarUpdatedAtLT applies the LT predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtLT(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLT(FieldAvatarUpdatedAt, v))
}

// AvatarUpdatedAtLTE applies the LTE predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtLTE(v time.Time) predicate.Organization {
	return predicate.Organization(sql.FieldLTE(FieldAvatarUpdatedAt, v))
}

// AvatarUpdatedAtIsNil applies the IsNil predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtIsNil() predicate.Organization {
	return predicate.Organization(sql.FieldIsNull(FieldAvatarUpdatedAt))
}

// AvatarUpdatedAtNotNil applies the NotNil predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtNotNil() predicate.Organization {
	return predicate.Organization(sql.FieldNotNull(FieldAvatarUpdatedAt))
}

// DedicatedDbEQ applies the EQ predicate on the "dedicated_db" field.
func DedicatedDbEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldEQ(FieldDedicatedDb, v))
}

// DedicatedDbNEQ applies the NEQ predicate on the "dedicated_db" field.
func DedicatedDbNEQ(v bool) predicate.Organization {
	return predicate.Organization(sql.FieldNEQ(FieldDedicatedDb, v))
}

// HasControlCreators applies the HasEdge predicate on the "control_creators" edge.
func HasControlCreators() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ControlCreatorsTable, ControlCreatorsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControlCreatorsWith applies the HasEdge predicate on the "control_creators" edge with a given conditions (other predicates).
func HasControlCreatorsWith(preds ...predicate.Group) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newControlCreatorsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasControlObjectiveCreators applies the HasEdge predicate on the "control_objective_creators" edge.
func HasControlObjectiveCreators() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ControlObjectiveCreatorsTable, ControlObjectiveCreatorsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControlObjectiveCreatorsWith applies the HasEdge predicate on the "control_objective_creators" edge with a given conditions (other predicates).
func HasControlObjectiveCreatorsWith(preds ...predicate.Group) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newControlObjectiveCreatorsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroupCreators applies the HasEdge predicate on the "group_creators" edge.
func HasGroupCreators() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupCreatorsTable, GroupCreatorsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupCreatorsWith applies the HasEdge predicate on the "group_creators" edge with a given conditions (other predicates).
func HasGroupCreatorsWith(preds ...predicate.Group) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newGroupCreatorsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInternalPolicyCreators applies the HasEdge predicate on the "internal_policy_creators" edge.
func HasInternalPolicyCreators() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InternalPolicyCreatorsTable, InternalPolicyCreatorsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInternalPolicyCreatorsWith applies the HasEdge predicate on the "internal_policy_creators" edge with a given conditions (other predicates).
func HasInternalPolicyCreatorsWith(preds ...predicate.Group) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newInternalPolicyCreatorsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNarrativeCreators applies the HasEdge predicate on the "narrative_creators" edge.
func HasNarrativeCreators() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NarrativeCreatorsTable, NarrativeCreatorsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNarrativeCreatorsWith applies the HasEdge predicate on the "narrative_creators" edge with a given conditions (other predicates).
func HasNarrativeCreatorsWith(preds ...predicate.Group) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newNarrativeCreatorsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProcedureCreators applies the HasEdge predicate on the "procedure_creators" edge.
func HasProcedureCreators() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProcedureCreatorsTable, ProcedureCreatorsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProcedureCreatorsWith applies the HasEdge predicate on the "procedure_creators" edge with a given conditions (other predicates).
func HasProcedureCreatorsWith(preds ...predicate.Group) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newProcedureCreatorsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgramCreators applies the HasEdge predicate on the "program_creators" edge.
func HasProgramCreators() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProgramCreatorsTable, ProgramCreatorsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramCreatorsWith applies the HasEdge predicate on the "program_creators" edge with a given conditions (other predicates).
func HasProgramCreatorsWith(preds ...predicate.Group) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newProgramCreatorsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRiskCreators applies the HasEdge predicate on the "risk_creators" edge.
func HasRiskCreators() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RiskCreatorsTable, RiskCreatorsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRiskCreatorsWith applies the HasEdge predicate on the "risk_creators" edge with a given conditions (other predicates).
func HasRiskCreatorsWith(preds ...predicate.Group) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newRiskCreatorsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTemplateCreators applies the HasEdge predicate on the "template_creators" edge.
func HasTemplateCreators() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TemplateCreatorsTable, TemplateCreatorsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemplateCreatorsWith applies the HasEdge predicate on the "template_creators" edge with a given conditions (other predicates).
func HasTemplateCreatorsWith(preds ...predicate.Group) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newTemplateCreatorsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Organization
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Organization) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newParentStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Organization
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Organization
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Organization) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newChildrenStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Organization
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSetting applies the HasEdge predicate on the "setting" edge.
func HasSetting() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, SettingTable, SettingColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrganizationSetting
		step.Edge.Schema = schemaConfig.OrganizationSetting
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSettingWith applies the HasEdge predicate on the "setting" edge with a given conditions (other predicates).
func HasSettingWith(preds ...predicate.OrganizationSetting) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newSettingStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrganizationSetting
		step.Edge.Schema = schemaConfig.OrganizationSetting
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPersonalAccessTokens applies the HasEdge predicate on the "personal_access_tokens" edge.
func HasPersonalAccessTokens() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, PersonalAccessTokensTable, PersonalAccessTokensPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.PersonalAccessToken
		step.Edge.Schema = schemaConfig.OrganizationPersonalAccessTokens
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPersonalAccessTokensWith applies the HasEdge predicate on the "personal_access_tokens" edge with a given conditions (other predicates).
func HasPersonalAccessTokensWith(preds ...predicate.PersonalAccessToken) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newPersonalAccessTokensStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.PersonalAccessToken
		step.Edge.Schema = schemaConfig.OrganizationPersonalAccessTokens
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAPITokens applies the HasEdge predicate on the "api_tokens" edge.
func HasAPITokens() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, APITokensTable, APITokensColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.APIToken
		step.Edge.Schema = schemaConfig.APIToken
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAPITokensWith applies the HasEdge predicate on the "api_tokens" edge with a given conditions (other predicates).
func HasAPITokensWith(preds ...predicate.APIToken) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newAPITokensStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.APIToken
		step.Edge.Schema = schemaConfig.APIToken
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UsersTable, UsersPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgMembership
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newUsersStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgMembership
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FilesTable, FilesPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.OrganizationFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.File) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newFilesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.OrganizationFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EventsTable, EventsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.OrganizationEvents
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newEventsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.OrganizationEvents
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSecrets applies the HasEdge predicate on the "secrets" edge.
func HasSecrets() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, SecretsTable, SecretsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Hush
		step.Edge.Schema = schemaConfig.OrganizationSecrets
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSecretsWith applies the HasEdge predicate on the "secrets" edge with a given conditions (other predicates).
func HasSecretsWith(preds ...predicate.Hush) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newSecretsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Hush
		step.Edge.Schema = schemaConfig.OrganizationSecrets
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAvatarFile applies the HasEdge predicate on the "avatar_file" edge.
func HasAvatarFile() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AvatarFileTable, AvatarFileColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.Organization
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAvatarFileWith applies the HasEdge predicate on the "avatar_file" edge with a given conditions (other predicates).
func HasAvatarFileWith(preds ...predicate.File) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newAvatarFileStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.Organization
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupsTable, GroupsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Group) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newGroupsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTemplates applies the HasEdge predicate on the "templates" edge.
func HasTemplates() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TemplatesTable, TemplatesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Template
		step.Edge.Schema = schemaConfig.Template
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemplatesWith applies the HasEdge predicate on the "templates" edge with a given conditions (other predicates).
func HasTemplatesWith(preds ...predicate.Template) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newTemplatesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Template
		step.Edge.Schema = schemaConfig.Template
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasIntegrations applies the HasEdge predicate on the "integrations" edge.
func HasIntegrations() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IntegrationsTable, IntegrationsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Integration
		step.Edge.Schema = schemaConfig.Integration
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIntegrationsWith applies the HasEdge predicate on the "integrations" edge with a given conditions (other predicates).
func HasIntegrationsWith(preds ...predicate.Integration) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newIntegrationsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Integration
		step.Edge.Schema = schemaConfig.Integration
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocuments applies the HasEdge predicate on the "documents" edge.
func HasDocuments() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DocumentsTable, DocumentsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.DocumentData
		step.Edge.Schema = schemaConfig.DocumentData
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentsWith applies the HasEdge predicate on the "documents" edge with a given conditions (other predicates).
func HasDocumentsWith(preds ...predicate.DocumentData) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newDocumentsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.DocumentData
		step.Edge.Schema = schemaConfig.DocumentData
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrgSubscriptions applies the HasEdge predicate on the "org_subscriptions" edge.
func HasOrgSubscriptions() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrgSubscriptionsTable, OrgSubscriptionsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgSubscription
		step.Edge.Schema = schemaConfig.OrgSubscription
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrgSubscriptionsWith applies the HasEdge predicate on the "org_subscriptions" edge with a given conditions (other predicates).
func HasOrgSubscriptionsWith(preds ...predicate.OrgSubscription) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newOrgSubscriptionsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgSubscription
		step.Edge.Schema = schemaConfig.OrgSubscription
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInvites applies the HasEdge predicate on the "invites" edge.
func HasInvites() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InvitesTable, InvitesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Invite
		step.Edge.Schema = schemaConfig.Invite
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInvitesWith applies the HasEdge predicate on the "invites" edge with a given conditions (other predicates).
func HasInvitesWith(preds ...predicate.Invite) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newInvitesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Invite
		step.Edge.Schema = schemaConfig.Invite
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscribers applies the HasEdge predicate on the "subscribers" edge.
func HasSubscribers() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubscribersTable, SubscribersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Subscriber
		step.Edge.Schema = schemaConfig.Subscriber
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscribersWith applies the HasEdge predicate on the "subscribers" edge with a given conditions (other predicates).
func HasSubscribersWith(preds ...predicate.Subscriber) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newSubscribersStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Subscriber
		step.Edge.Schema = schemaConfig.Subscriber
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEntities applies the HasEdge predicate on the "entities" edge.
func HasEntities() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EntitiesTable, EntitiesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Entity
		step.Edge.Schema = schemaConfig.Entity
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntitiesWith applies the HasEdge predicate on the "entities" edge with a given conditions (other predicates).
func HasEntitiesWith(preds ...predicate.Entity) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newEntitiesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Entity
		step.Edge.Schema = schemaConfig.Entity
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEntityTypes applies the HasEdge predicate on the "entity_types" edge.
func HasEntityTypes() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EntityTypesTable, EntityTypesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.EntityType
		step.Edge.Schema = schemaConfig.EntityType
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntityTypesWith applies the HasEdge predicate on the "entity_types" edge with a given conditions (other predicates).
func HasEntityTypesWith(preds ...predicate.EntityType) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newEntityTypesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.EntityType
		step.Edge.Schema = schemaConfig.EntityType
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContacts applies the HasEdge predicate on the "contacts" edge.
func HasContacts() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ContactsTable, ContactsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Contact
		step.Edge.Schema = schemaConfig.Contact
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactsWith applies the HasEdge predicate on the "contacts" edge with a given conditions (other predicates).
func HasContactsWith(preds ...predicate.Contact) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newContactsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Contact
		step.Edge.Schema = schemaConfig.Contact
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotes applies the HasEdge predicate on the "notes" edge.
func HasNotes() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NotesTable, NotesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Note
		step.Edge.Schema = schemaConfig.Note
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotesWith applies the HasEdge predicate on the "notes" edge with a given conditions (other predicates).
func HasNotesWith(preds ...predicate.Note) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newNotesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Note
		step.Edge.Schema = schemaConfig.Note
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTasks applies the HasEdge predicate on the "tasks" edge.
func HasTasks() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TasksTable, TasksColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.Task
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTasksWith applies the HasEdge predicate on the "tasks" edge with a given conditions (other predicates).
func HasTasksWith(preds ...predicate.Task) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newTasksStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.Task
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPrograms applies the HasEdge predicate on the "programs" edge.
func HasPrograms() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProgramsTable, ProgramsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.Program
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramsWith applies the HasEdge predicate on the "programs" edge with a given conditions (other predicates).
func HasProgramsWith(preds ...predicate.Program) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newProgramsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.Program
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProcedures applies the HasEdge predicate on the "procedures" edge.
func HasProcedures() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ProceduresTable, ProceduresColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.Procedure
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProceduresWith applies the HasEdge predicate on the "procedures" edge with a given conditions (other predicates).
func HasProceduresWith(preds ...predicate.Procedure) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newProceduresStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.Procedure
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInternalPolicies applies the HasEdge predicate on the "internal_policies" edge.
func HasInternalPolicies() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InternalPoliciesTable, InternalPoliciesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.InternalPolicy
		step.Edge.Schema = schemaConfig.InternalPolicy
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInternalPoliciesWith applies the HasEdge predicate on the "internal_policies" edge with a given conditions (other predicates).
func HasInternalPoliciesWith(preds ...predicate.InternalPolicy) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newInternalPoliciesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.InternalPolicy
		step.Edge.Schema = schemaConfig.InternalPolicy
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRisks applies the HasEdge predicate on the "risks" edge.
func HasRisks() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RisksTable, RisksColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.Risk
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRisksWith applies the HasEdge predicate on the "risks" edge with a given conditions (other predicates).
func HasRisksWith(preds ...predicate.Risk) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newRisksStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Risk
		step.Edge.Schema = schemaConfig.Risk
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasControlObjectives applies the HasEdge predicate on the "control_objectives" edge.
func HasControlObjectives() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ControlObjectivesTable, ControlObjectivesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.ControlObjective
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControlObjectivesWith applies the HasEdge predicate on the "control_objectives" edge with a given conditions (other predicates).
func HasControlObjectivesWith(preds ...predicate.ControlObjective) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newControlObjectivesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.ControlObjective
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNarratives applies the HasEdge predicate on the "narratives" edge.
func HasNarratives() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NarrativesTable, NarrativesColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.Narrative
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNarrativesWith applies the HasEdge predicate on the "narratives" edge with a given conditions (other predicates).
func HasNarrativesWith(preds ...predicate.Narrative) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newNarrativesStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Narrative
		step.Edge.Schema = schemaConfig.Narrative
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasControls applies the HasEdge predicate on the "controls" edge.
func HasControls() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ControlsTable, ControlsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.Control
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasControlsWith applies the HasEdge predicate on the "controls" edge with a given conditions (other predicates).
func HasControlsWith(preds ...predicate.Control) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newControlsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.Control
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubcontrols applies the HasEdge predicate on the "subcontrols" edge.
func HasSubcontrols() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubcontrolsTable, SubcontrolsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubcontrolsWith applies the HasEdge predicate on the "subcontrols" edge with a given conditions (other predicates).
func HasSubcontrolsWith(preds ...predicate.Subcontrol) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newSubcontrolsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.Subcontrol
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvidence applies the HasEdge predicate on the "evidence" edge.
func HasEvidence() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EvidenceTable, EvidenceColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Evidence
		step.Edge.Schema = schemaConfig.Evidence
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEvidenceWith applies the HasEdge predicate on the "evidence" edge with a given conditions (other predicates).
func HasEvidenceWith(preds ...predicate.Evidence) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newEvidenceStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Evidence
		step.Edge.Schema = schemaConfig.Evidence
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStandards applies the HasEdge predicate on the "standards" edge.
func HasStandards() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StandardsTable, StandardsColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Standard
		step.Edge.Schema = schemaConfig.Standard
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStandardsWith applies the HasEdge predicate on the "standards" edge with a given conditions (other predicates).
func HasStandardsWith(preds ...predicate.Standard) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newStandardsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Standard
		step.Edge.Schema = schemaConfig.Standard
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasActionPlans applies the HasEdge predicate on the "action_plans" edge.
func HasActionPlans() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ActionPlansTable, ActionPlansColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ActionPlan
		step.Edge.Schema = schemaConfig.ActionPlan
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasActionPlansWith applies the HasEdge predicate on the "action_plans" edge with a given conditions (other predicates).
func HasActionPlansWith(preds ...predicate.ActionPlan) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newActionPlansStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.ActionPlan
		step.Edge.Schema = schemaConfig.ActionPlan
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, MembersTable, MembersColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgMembership
		step.Edge.Schema = schemaConfig.OrgMembership
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.OrgMembership) predicate.Organization {
	return predicate.Organization(func(s *sql.Selector) {
		step := newMembersStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrgMembership
		step.Edge.Schema = schemaConfig.OrgMembership
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Organization) predicate.Organization {
	return predicate.Organization(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Organization) predicate.Organization {
	return predicate.Organization(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Organization) predicate.Organization {
	return predicate.Organization(sql.NotPredicates(p))
}
