// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrganizationSettingUpdate is the builder for updating OrganizationSetting entities.
type OrganizationSettingUpdate struct {
	config
	hooks     []Hook
	mutation  *OrganizationSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrganizationSettingUpdate builder.
func (_u *OrganizationSettingUpdate) Where(ps ...predicate.OrganizationSetting) *OrganizationSettingUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrganizationSettingUpdate) SetUpdatedAt(v time.Time) *OrganizationSettingUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrganizationSettingUpdate) ClearUpdatedAt() *OrganizationSettingUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *OrganizationSettingUpdate) SetUpdatedBy(v string) *OrganizationSettingUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableUpdatedBy(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *OrganizationSettingUpdate) ClearUpdatedBy() *OrganizationSettingUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *OrganizationSettingUpdate) SetDeletedAt(v time.Time) *OrganizationSettingUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableDeletedAt(v *time.Time) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *OrganizationSettingUpdate) ClearDeletedAt() *OrganizationSettingUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *OrganizationSettingUpdate) SetDeletedBy(v string) *OrganizationSettingUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableDeletedBy(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *OrganizationSettingUpdate) ClearDeletedBy() *OrganizationSettingUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *OrganizationSettingUpdate) SetTags(v []string) *OrganizationSettingUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *OrganizationSettingUpdate) AppendTags(v []string) *OrganizationSettingUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *OrganizationSettingUpdate) ClearTags() *OrganizationSettingUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetDomains sets the "domains" field.
func (_u *OrganizationSettingUpdate) SetDomains(v []string) *OrganizationSettingUpdate {
	_u.mutation.SetDomains(v)
	return _u
}

// AppendDomains appends value to the "domains" field.
func (_u *OrganizationSettingUpdate) AppendDomains(v []string) *OrganizationSettingUpdate {
	_u.mutation.AppendDomains(v)
	return _u
}

// ClearDomains clears the value of the "domains" field.
func (_u *OrganizationSettingUpdate) ClearDomains() *OrganizationSettingUpdate {
	_u.mutation.ClearDomains()
	return _u
}

// SetBillingContact sets the "billing_contact" field.
func (_u *OrganizationSettingUpdate) SetBillingContact(v string) *OrganizationSettingUpdate {
	_u.mutation.SetBillingContact(v)
	return _u
}

// SetNillableBillingContact sets the "billing_contact" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableBillingContact(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetBillingContact(*v)
	}
	return _u
}

// ClearBillingContact clears the value of the "billing_contact" field.
func (_u *OrganizationSettingUpdate) ClearBillingContact() *OrganizationSettingUpdate {
	_u.mutation.ClearBillingContact()
	return _u
}

// SetBillingEmail sets the "billing_email" field.
func (_u *OrganizationSettingUpdate) SetBillingEmail(v string) *OrganizationSettingUpdate {
	_u.mutation.SetBillingEmail(v)
	return _u
}

// SetNillableBillingEmail sets the "billing_email" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableBillingEmail(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetBillingEmail(*v)
	}
	return _u
}

// ClearBillingEmail clears the value of the "billing_email" field.
func (_u *OrganizationSettingUpdate) ClearBillingEmail() *OrganizationSettingUpdate {
	_u.mutation.ClearBillingEmail()
	return _u
}

// SetBillingPhone sets the "billing_phone" field.
func (_u *OrganizationSettingUpdate) SetBillingPhone(v string) *OrganizationSettingUpdate {
	_u.mutation.SetBillingPhone(v)
	return _u
}

// SetNillableBillingPhone sets the "billing_phone" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableBillingPhone(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetBillingPhone(*v)
	}
	return _u
}

// ClearBillingPhone clears the value of the "billing_phone" field.
func (_u *OrganizationSettingUpdate) ClearBillingPhone() *OrganizationSettingUpdate {
	_u.mutation.ClearBillingPhone()
	return _u
}

// SetBillingAddress sets the "billing_address" field.
func (_u *OrganizationSettingUpdate) SetBillingAddress(v models.Address) *OrganizationSettingUpdate {
	_u.mutation.SetBillingAddress(v)
	return _u
}

// SetNillableBillingAddress sets the "billing_address" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableBillingAddress(v *models.Address) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetBillingAddress(*v)
	}
	return _u
}

// ClearBillingAddress clears the value of the "billing_address" field.
func (_u *OrganizationSettingUpdate) ClearBillingAddress() *OrganizationSettingUpdate {
	_u.mutation.ClearBillingAddress()
	return _u
}

// SetTaxIdentifier sets the "tax_identifier" field.
func (_u *OrganizationSettingUpdate) SetTaxIdentifier(v string) *OrganizationSettingUpdate {
	_u.mutation.SetTaxIdentifier(v)
	return _u
}

// SetNillableTaxIdentifier sets the "tax_identifier" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableTaxIdentifier(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetTaxIdentifier(*v)
	}
	return _u
}

// ClearTaxIdentifier clears the value of the "tax_identifier" field.
func (_u *OrganizationSettingUpdate) ClearTaxIdentifier() *OrganizationSettingUpdate {
	_u.mutation.ClearTaxIdentifier()
	return _u
}

// SetGeoLocation sets the "geo_location" field.
func (_u *OrganizationSettingUpdate) SetGeoLocation(v enums.Region) *OrganizationSettingUpdate {
	_u.mutation.SetGeoLocation(v)
	return _u
}

// SetNillableGeoLocation sets the "geo_location" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableGeoLocation(v *enums.Region) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetGeoLocation(*v)
	}
	return _u
}

// ClearGeoLocation clears the value of the "geo_location" field.
func (_u *OrganizationSettingUpdate) ClearGeoLocation() *OrganizationSettingUpdate {
	_u.mutation.ClearGeoLocation()
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *OrganizationSettingUpdate) SetOrganizationID(v string) *OrganizationSettingUpdate {
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableOrganizationID(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (_u *OrganizationSettingUpdate) ClearOrganizationID() *OrganizationSettingUpdate {
	_u.mutation.ClearOrganizationID()
	return _u
}

// SetBillingNotificationsEnabled sets the "billing_notifications_enabled" field.
func (_u *OrganizationSettingUpdate) SetBillingNotificationsEnabled(v bool) *OrganizationSettingUpdate {
	_u.mutation.SetBillingNotificationsEnabled(v)
	return _u
}

// SetNillableBillingNotificationsEnabled sets the "billing_notifications_enabled" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableBillingNotificationsEnabled(v *bool) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetBillingNotificationsEnabled(*v)
	}
	return _u
}

// SetAllowedEmailDomains sets the "allowed_email_domains" field.
func (_u *OrganizationSettingUpdate) SetAllowedEmailDomains(v []string) *OrganizationSettingUpdate {
	_u.mutation.SetAllowedEmailDomains(v)
	return _u
}

// AppendAllowedEmailDomains appends value to the "allowed_email_domains" field.
func (_u *OrganizationSettingUpdate) AppendAllowedEmailDomains(v []string) *OrganizationSettingUpdate {
	_u.mutation.AppendAllowedEmailDomains(v)
	return _u
}

// ClearAllowedEmailDomains clears the value of the "allowed_email_domains" field.
func (_u *OrganizationSettingUpdate) ClearAllowedEmailDomains() *OrganizationSettingUpdate {
	_u.mutation.ClearAllowedEmailDomains()
	return _u
}

// SetIdentityProvider sets the "identity_provider" field.
func (_u *OrganizationSettingUpdate) SetIdentityProvider(v enums.SSOProvider) *OrganizationSettingUpdate {
	_u.mutation.SetIdentityProvider(v)
	return _u
}

// SetNillableIdentityProvider sets the "identity_provider" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableIdentityProvider(v *enums.SSOProvider) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetIdentityProvider(*v)
	}
	return _u
}

// ClearIdentityProvider clears the value of the "identity_provider" field.
func (_u *OrganizationSettingUpdate) ClearIdentityProvider() *OrganizationSettingUpdate {
	_u.mutation.ClearIdentityProvider()
	return _u
}

// SetIdentityProviderClientID sets the "identity_provider_client_id" field.
func (_u *OrganizationSettingUpdate) SetIdentityProviderClientID(v string) *OrganizationSettingUpdate {
	_u.mutation.SetIdentityProviderClientID(v)
	return _u
}

// SetNillableIdentityProviderClientID sets the "identity_provider_client_id" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableIdentityProviderClientID(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetIdentityProviderClientID(*v)
	}
	return _u
}

// ClearIdentityProviderClientID clears the value of the "identity_provider_client_id" field.
func (_u *OrganizationSettingUpdate) ClearIdentityProviderClientID() *OrganizationSettingUpdate {
	_u.mutation.ClearIdentityProviderClientID()
	return _u
}

// SetIdentityProviderClientSecret sets the "identity_provider_client_secret" field.
func (_u *OrganizationSettingUpdate) SetIdentityProviderClientSecret(v string) *OrganizationSettingUpdate {
	_u.mutation.SetIdentityProviderClientSecret(v)
	return _u
}

// SetNillableIdentityProviderClientSecret sets the "identity_provider_client_secret" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableIdentityProviderClientSecret(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetIdentityProviderClientSecret(*v)
	}
	return _u
}

// ClearIdentityProviderClientSecret clears the value of the "identity_provider_client_secret" field.
func (_u *OrganizationSettingUpdate) ClearIdentityProviderClientSecret() *OrganizationSettingUpdate {
	_u.mutation.ClearIdentityProviderClientSecret()
	return _u
}

// SetIdentityProviderMetadataEndpoint sets the "identity_provider_metadata_endpoint" field.
func (_u *OrganizationSettingUpdate) SetIdentityProviderMetadataEndpoint(v string) *OrganizationSettingUpdate {
	_u.mutation.SetIdentityProviderMetadataEndpoint(v)
	return _u
}

// SetNillableIdentityProviderMetadataEndpoint sets the "identity_provider_metadata_endpoint" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableIdentityProviderMetadataEndpoint(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetIdentityProviderMetadataEndpoint(*v)
	}
	return _u
}

// ClearIdentityProviderMetadataEndpoint clears the value of the "identity_provider_metadata_endpoint" field.
func (_u *OrganizationSettingUpdate) ClearIdentityProviderMetadataEndpoint() *OrganizationSettingUpdate {
	_u.mutation.ClearIdentityProviderMetadataEndpoint()
	return _u
}

// SetIdentityProviderEntityID sets the "identity_provider_entity_id" field.
func (_u *OrganizationSettingUpdate) SetIdentityProviderEntityID(v string) *OrganizationSettingUpdate {
	_u.mutation.SetIdentityProviderEntityID(v)
	return _u
}

// SetNillableIdentityProviderEntityID sets the "identity_provider_entity_id" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableIdentityProviderEntityID(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetIdentityProviderEntityID(*v)
	}
	return _u
}

// ClearIdentityProviderEntityID clears the value of the "identity_provider_entity_id" field.
func (_u *OrganizationSettingUpdate) ClearIdentityProviderEntityID() *OrganizationSettingUpdate {
	_u.mutation.ClearIdentityProviderEntityID()
	return _u
}

// SetOidcDiscoveryEndpoint sets the "oidc_discovery_endpoint" field.
func (_u *OrganizationSettingUpdate) SetOidcDiscoveryEndpoint(v string) *OrganizationSettingUpdate {
	_u.mutation.SetOidcDiscoveryEndpoint(v)
	return _u
}

// SetNillableOidcDiscoveryEndpoint sets the "oidc_discovery_endpoint" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableOidcDiscoveryEndpoint(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetOidcDiscoveryEndpoint(*v)
	}
	return _u
}

// ClearOidcDiscoveryEndpoint clears the value of the "oidc_discovery_endpoint" field.
func (_u *OrganizationSettingUpdate) ClearOidcDiscoveryEndpoint() *OrganizationSettingUpdate {
	_u.mutation.ClearOidcDiscoveryEndpoint()
	return _u
}

// SetIdentityProviderLoginEnforced sets the "identity_provider_login_enforced" field.
func (_u *OrganizationSettingUpdate) SetIdentityProviderLoginEnforced(v bool) *OrganizationSettingUpdate {
	_u.mutation.SetIdentityProviderLoginEnforced(v)
	return _u
}

// SetNillableIdentityProviderLoginEnforced sets the "identity_provider_login_enforced" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableIdentityProviderLoginEnforced(v *bool) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetIdentityProviderLoginEnforced(*v)
	}
	return _u
}

// SetComplianceWebhookToken sets the "compliance_webhook_token" field.
func (_u *OrganizationSettingUpdate) SetComplianceWebhookToken(v string) *OrganizationSettingUpdate {
	_u.mutation.SetComplianceWebhookToken(v)
	return _u
}

// SetNillableComplianceWebhookToken sets the "compliance_webhook_token" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillableComplianceWebhookToken(v *string) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetComplianceWebhookToken(*v)
	}
	return _u
}

// ClearComplianceWebhookToken clears the value of the "compliance_webhook_token" field.
func (_u *OrganizationSettingUpdate) ClearComplianceWebhookToken() *OrganizationSettingUpdate {
	_u.mutation.ClearComplianceWebhookToken()
	return _u
}

// SetPaymentMethodAdded sets the "payment_method_added" field.
func (_u *OrganizationSettingUpdate) SetPaymentMethodAdded(v bool) *OrganizationSettingUpdate {
	_u.mutation.SetPaymentMethodAdded(v)
	return _u
}

// SetNillablePaymentMethodAdded sets the "payment_method_added" field if the given value is not nil.
func (_u *OrganizationSettingUpdate) SetNillablePaymentMethodAdded(v *bool) *OrganizationSettingUpdate {
	if v != nil {
		_u.SetPaymentMethodAdded(*v)
	}
	return _u
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_u *OrganizationSettingUpdate) SetOrganization(v *Organization) *OrganizationSettingUpdate {
	return _u.SetOrganizationID(v.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *OrganizationSettingUpdate) AddFileIDs(ids ...string) *OrganizationSettingUpdate {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *OrganizationSettingUpdate) AddFiles(v ...*File) *OrganizationSettingUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the OrganizationSettingMutation object of the builder.
func (_u *OrganizationSettingUpdate) Mutation() *OrganizationSettingMutation {
	return _u.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (_u *OrganizationSettingUpdate) ClearOrganization() *OrganizationSettingUpdate {
	_u.mutation.ClearOrganization()
	return _u
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *OrganizationSettingUpdate) ClearFiles() *OrganizationSettingUpdate {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *OrganizationSettingUpdate) RemoveFileIDs(ids ...string) *OrganizationSettingUpdate {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *OrganizationSettingUpdate) RemoveFiles(v ...*File) *OrganizationSettingUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrganizationSettingUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrganizationSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrganizationSettingUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrganizationSettingUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrganizationSettingUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if organizationsetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organizationsetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organizationsetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrganizationSettingUpdate) check() error {
	if v, ok := _u.mutation.Domains(); ok {
		if err := organizationsetting.DomainsValidator(v); err != nil {
			return &ValidationError{Name: "domains", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.domains": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BillingEmail(); ok {
		if err := organizationsetting.BillingEmailValidator(v); err != nil {
			return &ValidationError{Name: "billing_email", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.billing_email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BillingPhone(); ok {
		if err := organizationsetting.BillingPhoneValidator(v); err != nil {
			return &ValidationError{Name: "billing_phone", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.billing_phone": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GeoLocation(); ok {
		if err := organizationsetting.GeoLocationValidator(v); err != nil {
			return &ValidationError{Name: "geo_location", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.geo_location": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AllowedEmailDomains(); ok {
		if err := organizationsetting.AllowedEmailDomainsValidator(v); err != nil {
			return &ValidationError{Name: "allowed_email_domains", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.allowed_email_domains": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IdentityProvider(); ok {
		if err := organizationsetting.IdentityProviderValidator(v); err != nil {
			return &ValidationError{Name: "identity_provider", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.identity_provider": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OrganizationSettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationSettingUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OrganizationSettingUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationsetting.Table, organizationsetting.Columns, sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(organizationsetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(organizationsetting.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(organizationsetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationsetting.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(organizationsetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(organizationsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(organizationsetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(organizationsetting.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(organizationsetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(organizationsetting.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organizationsetting.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(organizationsetting.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Domains(); ok {
		_spec.SetField(organizationsetting.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organizationsetting.FieldDomains, value)
		})
	}
	if _u.mutation.DomainsCleared() {
		_spec.ClearField(organizationsetting.FieldDomains, field.TypeJSON)
	}
	if value, ok := _u.mutation.BillingContact(); ok {
		_spec.SetField(organizationsetting.FieldBillingContact, field.TypeString, value)
	}
	if _u.mutation.BillingContactCleared() {
		_spec.ClearField(organizationsetting.FieldBillingContact, field.TypeString)
	}
	if value, ok := _u.mutation.BillingEmail(); ok {
		_spec.SetField(organizationsetting.FieldBillingEmail, field.TypeString, value)
	}
	if _u.mutation.BillingEmailCleared() {
		_spec.ClearField(organizationsetting.FieldBillingEmail, field.TypeString)
	}
	if value, ok := _u.mutation.BillingPhone(); ok {
		_spec.SetField(organizationsetting.FieldBillingPhone, field.TypeString, value)
	}
	if _u.mutation.BillingPhoneCleared() {
		_spec.ClearField(organizationsetting.FieldBillingPhone, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddress(); ok {
		_spec.SetField(organizationsetting.FieldBillingAddress, field.TypeJSON, value)
	}
	if _u.mutation.BillingAddressCleared() {
		_spec.ClearField(organizationsetting.FieldBillingAddress, field.TypeJSON)
	}
	if value, ok := _u.mutation.TaxIdentifier(); ok {
		_spec.SetField(organizationsetting.FieldTaxIdentifier, field.TypeString, value)
	}
	if _u.mutation.TaxIdentifierCleared() {
		_spec.ClearField(organizationsetting.FieldTaxIdentifier, field.TypeString)
	}
	if value, ok := _u.mutation.GeoLocation(); ok {
		_spec.SetField(organizationsetting.FieldGeoLocation, field.TypeEnum, value)
	}
	if _u.mutation.GeoLocationCleared() {
		_spec.ClearField(organizationsetting.FieldGeoLocation, field.TypeEnum)
	}
	if value, ok := _u.mutation.BillingNotificationsEnabled(); ok {
		_spec.SetField(organizationsetting.FieldBillingNotificationsEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AllowedEmailDomains(); ok {
		_spec.SetField(organizationsetting.FieldAllowedEmailDomains, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAllowedEmailDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organizationsetting.FieldAllowedEmailDomains, value)
		})
	}
	if _u.mutation.AllowedEmailDomainsCleared() {
		_spec.ClearField(organizationsetting.FieldAllowedEmailDomains, field.TypeJSON)
	}
	if value, ok := _u.mutation.IdentityProvider(); ok {
		_spec.SetField(organizationsetting.FieldIdentityProvider, field.TypeEnum, value)
	}
	if _u.mutation.IdentityProviderCleared() {
		_spec.ClearField(organizationsetting.FieldIdentityProvider, field.TypeEnum)
	}
	if value, ok := _u.mutation.IdentityProviderClientID(); ok {
		_spec.SetField(organizationsetting.FieldIdentityProviderClientID, field.TypeString, value)
	}
	if _u.mutation.IdentityProviderClientIDCleared() {
		_spec.ClearField(organizationsetting.FieldIdentityProviderClientID, field.TypeString)
	}
	if value, ok := _u.mutation.IdentityProviderClientSecret(); ok {
		_spec.SetField(organizationsetting.FieldIdentityProviderClientSecret, field.TypeString, value)
	}
	if _u.mutation.IdentityProviderClientSecretCleared() {
		_spec.ClearField(organizationsetting.FieldIdentityProviderClientSecret, field.TypeString)
	}
	if value, ok := _u.mutation.IdentityProviderMetadataEndpoint(); ok {
		_spec.SetField(organizationsetting.FieldIdentityProviderMetadataEndpoint, field.TypeString, value)
	}
	if _u.mutation.IdentityProviderMetadataEndpointCleared() {
		_spec.ClearField(organizationsetting.FieldIdentityProviderMetadataEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.IdentityProviderEntityID(); ok {
		_spec.SetField(organizationsetting.FieldIdentityProviderEntityID, field.TypeString, value)
	}
	if _u.mutation.IdentityProviderEntityIDCleared() {
		_spec.ClearField(organizationsetting.FieldIdentityProviderEntityID, field.TypeString)
	}
	if value, ok := _u.mutation.OidcDiscoveryEndpoint(); ok {
		_spec.SetField(organizationsetting.FieldOidcDiscoveryEndpoint, field.TypeString, value)
	}
	if _u.mutation.OidcDiscoveryEndpointCleared() {
		_spec.ClearField(organizationsetting.FieldOidcDiscoveryEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.IdentityProviderLoginEnforced(); ok {
		_spec.SetField(organizationsetting.FieldIdentityProviderLoginEnforced, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ComplianceWebhookToken(); ok {
		_spec.SetField(organizationsetting.FieldComplianceWebhookToken, field.TypeString, value)
	}
	if _u.mutation.ComplianceWebhookTokenCleared() {
		_spec.ClearField(organizationsetting.FieldComplianceWebhookToken, field.TypeString)
	}
	if value, ok := _u.mutation.PaymentMethodAdded(); ok {
		_spec.SetField(organizationsetting.FieldPaymentMethodAdded, field.TypeBool, value)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organizationsetting.OrganizationTable,
			Columns: []string{organizationsetting.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organizationsetting.OrganizationTable,
			Columns: []string{organizationsetting.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationsetting.FilesTable,
			Columns: organizationsetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationsetting.FilesTable,
			Columns: organizationsetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationsetting.FilesTable,
			Columns: organizationsetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.OrganizationSetting
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrganizationSettingUpdateOne is the builder for updating a single OrganizationSetting entity.
type OrganizationSettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrganizationSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrganizationSettingUpdateOne) SetUpdatedAt(v time.Time) *OrganizationSettingUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *OrganizationSettingUpdateOne) ClearUpdatedAt() *OrganizationSettingUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *OrganizationSettingUpdateOne) SetUpdatedBy(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableUpdatedBy(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *OrganizationSettingUpdateOne) ClearUpdatedBy() *OrganizationSettingUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *OrganizationSettingUpdateOne) SetDeletedAt(v time.Time) *OrganizationSettingUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableDeletedAt(v *time.Time) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *OrganizationSettingUpdateOne) ClearDeletedAt() *OrganizationSettingUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *OrganizationSettingUpdateOne) SetDeletedBy(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableDeletedBy(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *OrganizationSettingUpdateOne) ClearDeletedBy() *OrganizationSettingUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *OrganizationSettingUpdateOne) SetTags(v []string) *OrganizationSettingUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *OrganizationSettingUpdateOne) AppendTags(v []string) *OrganizationSettingUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *OrganizationSettingUpdateOne) ClearTags() *OrganizationSettingUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetDomains sets the "domains" field.
func (_u *OrganizationSettingUpdateOne) SetDomains(v []string) *OrganizationSettingUpdateOne {
	_u.mutation.SetDomains(v)
	return _u
}

// AppendDomains appends value to the "domains" field.
func (_u *OrganizationSettingUpdateOne) AppendDomains(v []string) *OrganizationSettingUpdateOne {
	_u.mutation.AppendDomains(v)
	return _u
}

// ClearDomains clears the value of the "domains" field.
func (_u *OrganizationSettingUpdateOne) ClearDomains() *OrganizationSettingUpdateOne {
	_u.mutation.ClearDomains()
	return _u
}

// SetBillingContact sets the "billing_contact" field.
func (_u *OrganizationSettingUpdateOne) SetBillingContact(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetBillingContact(v)
	return _u
}

// SetNillableBillingContact sets the "billing_contact" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableBillingContact(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetBillingContact(*v)
	}
	return _u
}

// ClearBillingContact clears the value of the "billing_contact" field.
func (_u *OrganizationSettingUpdateOne) ClearBillingContact() *OrganizationSettingUpdateOne {
	_u.mutation.ClearBillingContact()
	return _u
}

// SetBillingEmail sets the "billing_email" field.
func (_u *OrganizationSettingUpdateOne) SetBillingEmail(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetBillingEmail(v)
	return _u
}

// SetNillableBillingEmail sets the "billing_email" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableBillingEmail(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetBillingEmail(*v)
	}
	return _u
}

// ClearBillingEmail clears the value of the "billing_email" field.
func (_u *OrganizationSettingUpdateOne) ClearBillingEmail() *OrganizationSettingUpdateOne {
	_u.mutation.ClearBillingEmail()
	return _u
}

// SetBillingPhone sets the "billing_phone" field.
func (_u *OrganizationSettingUpdateOne) SetBillingPhone(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetBillingPhone(v)
	return _u
}

// SetNillableBillingPhone sets the "billing_phone" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableBillingPhone(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetBillingPhone(*v)
	}
	return _u
}

// ClearBillingPhone clears the value of the "billing_phone" field.
func (_u *OrganizationSettingUpdateOne) ClearBillingPhone() *OrganizationSettingUpdateOne {
	_u.mutation.ClearBillingPhone()
	return _u
}

// SetBillingAddress sets the "billing_address" field.
func (_u *OrganizationSettingUpdateOne) SetBillingAddress(v models.Address) *OrganizationSettingUpdateOne {
	_u.mutation.SetBillingAddress(v)
	return _u
}

// SetNillableBillingAddress sets the "billing_address" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableBillingAddress(v *models.Address) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetBillingAddress(*v)
	}
	return _u
}

// ClearBillingAddress clears the value of the "billing_address" field.
func (_u *OrganizationSettingUpdateOne) ClearBillingAddress() *OrganizationSettingUpdateOne {
	_u.mutation.ClearBillingAddress()
	return _u
}

// SetTaxIdentifier sets the "tax_identifier" field.
func (_u *OrganizationSettingUpdateOne) SetTaxIdentifier(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetTaxIdentifier(v)
	return _u
}

// SetNillableTaxIdentifier sets the "tax_identifier" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableTaxIdentifier(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetTaxIdentifier(*v)
	}
	return _u
}

// ClearTaxIdentifier clears the value of the "tax_identifier" field.
func (_u *OrganizationSettingUpdateOne) ClearTaxIdentifier() *OrganizationSettingUpdateOne {
	_u.mutation.ClearTaxIdentifier()
	return _u
}

// SetGeoLocation sets the "geo_location" field.
func (_u *OrganizationSettingUpdateOne) SetGeoLocation(v enums.Region) *OrganizationSettingUpdateOne {
	_u.mutation.SetGeoLocation(v)
	return _u
}

// SetNillableGeoLocation sets the "geo_location" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableGeoLocation(v *enums.Region) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetGeoLocation(*v)
	}
	return _u
}

// ClearGeoLocation clears the value of the "geo_location" field.
func (_u *OrganizationSettingUpdateOne) ClearGeoLocation() *OrganizationSettingUpdateOne {
	_u.mutation.ClearGeoLocation()
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *OrganizationSettingUpdateOne) SetOrganizationID(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableOrganizationID(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// ClearOrganizationID clears the value of the "organization_id" field.
func (_u *OrganizationSettingUpdateOne) ClearOrganizationID() *OrganizationSettingUpdateOne {
	_u.mutation.ClearOrganizationID()
	return _u
}

// SetBillingNotificationsEnabled sets the "billing_notifications_enabled" field.
func (_u *OrganizationSettingUpdateOne) SetBillingNotificationsEnabled(v bool) *OrganizationSettingUpdateOne {
	_u.mutation.SetBillingNotificationsEnabled(v)
	return _u
}

// SetNillableBillingNotificationsEnabled sets the "billing_notifications_enabled" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableBillingNotificationsEnabled(v *bool) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetBillingNotificationsEnabled(*v)
	}
	return _u
}

// SetAllowedEmailDomains sets the "allowed_email_domains" field.
func (_u *OrganizationSettingUpdateOne) SetAllowedEmailDomains(v []string) *OrganizationSettingUpdateOne {
	_u.mutation.SetAllowedEmailDomains(v)
	return _u
}

// AppendAllowedEmailDomains appends value to the "allowed_email_domains" field.
func (_u *OrganizationSettingUpdateOne) AppendAllowedEmailDomains(v []string) *OrganizationSettingUpdateOne {
	_u.mutation.AppendAllowedEmailDomains(v)
	return _u
}

// ClearAllowedEmailDomains clears the value of the "allowed_email_domains" field.
func (_u *OrganizationSettingUpdateOne) ClearAllowedEmailDomains() *OrganizationSettingUpdateOne {
	_u.mutation.ClearAllowedEmailDomains()
	return _u
}

// SetIdentityProvider sets the "identity_provider" field.
func (_u *OrganizationSettingUpdateOne) SetIdentityProvider(v enums.SSOProvider) *OrganizationSettingUpdateOne {
	_u.mutation.SetIdentityProvider(v)
	return _u
}

// SetNillableIdentityProvider sets the "identity_provider" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableIdentityProvider(v *enums.SSOProvider) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetIdentityProvider(*v)
	}
	return _u
}

// ClearIdentityProvider clears the value of the "identity_provider" field.
func (_u *OrganizationSettingUpdateOne) ClearIdentityProvider() *OrganizationSettingUpdateOne {
	_u.mutation.ClearIdentityProvider()
	return _u
}

// SetIdentityProviderClientID sets the "identity_provider_client_id" field.
func (_u *OrganizationSettingUpdateOne) SetIdentityProviderClientID(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetIdentityProviderClientID(v)
	return _u
}

// SetNillableIdentityProviderClientID sets the "identity_provider_client_id" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableIdentityProviderClientID(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetIdentityProviderClientID(*v)
	}
	return _u
}

// ClearIdentityProviderClientID clears the value of the "identity_provider_client_id" field.
func (_u *OrganizationSettingUpdateOne) ClearIdentityProviderClientID() *OrganizationSettingUpdateOne {
	_u.mutation.ClearIdentityProviderClientID()
	return _u
}

// SetIdentityProviderClientSecret sets the "identity_provider_client_secret" field.
func (_u *OrganizationSettingUpdateOne) SetIdentityProviderClientSecret(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetIdentityProviderClientSecret(v)
	return _u
}

// SetNillableIdentityProviderClientSecret sets the "identity_provider_client_secret" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableIdentityProviderClientSecret(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetIdentityProviderClientSecret(*v)
	}
	return _u
}

// ClearIdentityProviderClientSecret clears the value of the "identity_provider_client_secret" field.
func (_u *OrganizationSettingUpdateOne) ClearIdentityProviderClientSecret() *OrganizationSettingUpdateOne {
	_u.mutation.ClearIdentityProviderClientSecret()
	return _u
}

// SetIdentityProviderMetadataEndpoint sets the "identity_provider_metadata_endpoint" field.
func (_u *OrganizationSettingUpdateOne) SetIdentityProviderMetadataEndpoint(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetIdentityProviderMetadataEndpoint(v)
	return _u
}

// SetNillableIdentityProviderMetadataEndpoint sets the "identity_provider_metadata_endpoint" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableIdentityProviderMetadataEndpoint(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetIdentityProviderMetadataEndpoint(*v)
	}
	return _u
}

// ClearIdentityProviderMetadataEndpoint clears the value of the "identity_provider_metadata_endpoint" field.
func (_u *OrganizationSettingUpdateOne) ClearIdentityProviderMetadataEndpoint() *OrganizationSettingUpdateOne {
	_u.mutation.ClearIdentityProviderMetadataEndpoint()
	return _u
}

// SetIdentityProviderEntityID sets the "identity_provider_entity_id" field.
func (_u *OrganizationSettingUpdateOne) SetIdentityProviderEntityID(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetIdentityProviderEntityID(v)
	return _u
}

// SetNillableIdentityProviderEntityID sets the "identity_provider_entity_id" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableIdentityProviderEntityID(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetIdentityProviderEntityID(*v)
	}
	return _u
}

// ClearIdentityProviderEntityID clears the value of the "identity_provider_entity_id" field.
func (_u *OrganizationSettingUpdateOne) ClearIdentityProviderEntityID() *OrganizationSettingUpdateOne {
	_u.mutation.ClearIdentityProviderEntityID()
	return _u
}

// SetOidcDiscoveryEndpoint sets the "oidc_discovery_endpoint" field.
func (_u *OrganizationSettingUpdateOne) SetOidcDiscoveryEndpoint(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetOidcDiscoveryEndpoint(v)
	return _u
}

// SetNillableOidcDiscoveryEndpoint sets the "oidc_discovery_endpoint" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableOidcDiscoveryEndpoint(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetOidcDiscoveryEndpoint(*v)
	}
	return _u
}

// ClearOidcDiscoveryEndpoint clears the value of the "oidc_discovery_endpoint" field.
func (_u *OrganizationSettingUpdateOne) ClearOidcDiscoveryEndpoint() *OrganizationSettingUpdateOne {
	_u.mutation.ClearOidcDiscoveryEndpoint()
	return _u
}

// SetIdentityProviderLoginEnforced sets the "identity_provider_login_enforced" field.
func (_u *OrganizationSettingUpdateOne) SetIdentityProviderLoginEnforced(v bool) *OrganizationSettingUpdateOne {
	_u.mutation.SetIdentityProviderLoginEnforced(v)
	return _u
}

// SetNillableIdentityProviderLoginEnforced sets the "identity_provider_login_enforced" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableIdentityProviderLoginEnforced(v *bool) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetIdentityProviderLoginEnforced(*v)
	}
	return _u
}

// SetComplianceWebhookToken sets the "compliance_webhook_token" field.
func (_u *OrganizationSettingUpdateOne) SetComplianceWebhookToken(v string) *OrganizationSettingUpdateOne {
	_u.mutation.SetComplianceWebhookToken(v)
	return _u
}

// SetNillableComplianceWebhookToken sets the "compliance_webhook_token" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillableComplianceWebhookToken(v *string) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetComplianceWebhookToken(*v)
	}
	return _u
}

// ClearComplianceWebhookToken clears the value of the "compliance_webhook_token" field.
func (_u *OrganizationSettingUpdateOne) ClearComplianceWebhookToken() *OrganizationSettingUpdateOne {
	_u.mutation.ClearComplianceWebhookToken()
	return _u
}

// SetPaymentMethodAdded sets the "payment_method_added" field.
func (_u *OrganizationSettingUpdateOne) SetPaymentMethodAdded(v bool) *OrganizationSettingUpdateOne {
	_u.mutation.SetPaymentMethodAdded(v)
	return _u
}

// SetNillablePaymentMethodAdded sets the "payment_method_added" field if the given value is not nil.
func (_u *OrganizationSettingUpdateOne) SetNillablePaymentMethodAdded(v *bool) *OrganizationSettingUpdateOne {
	if v != nil {
		_u.SetPaymentMethodAdded(*v)
	}
	return _u
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (_u *OrganizationSettingUpdateOne) SetOrganization(v *Organization) *OrganizationSettingUpdateOne {
	return _u.SetOrganizationID(v.ID)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_u *OrganizationSettingUpdateOne) AddFileIDs(ids ...string) *OrganizationSettingUpdateOne {
	_u.mutation.AddFileIDs(ids...)
	return _u
}

// AddFiles adds the "files" edges to the File entity.
func (_u *OrganizationSettingUpdateOne) AddFiles(v ...*File) *OrganizationSettingUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFileIDs(ids...)
}

// Mutation returns the OrganizationSettingMutation object of the builder.
func (_u *OrganizationSettingUpdateOne) Mutation() *OrganizationSettingMutation {
	return _u.mutation
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (_u *OrganizationSettingUpdateOne) ClearOrganization() *OrganizationSettingUpdateOne {
	_u.mutation.ClearOrganization()
	return _u
}

// ClearFiles clears all "files" edges to the File entity.
func (_u *OrganizationSettingUpdateOne) ClearFiles() *OrganizationSettingUpdateOne {
	_u.mutation.ClearFiles()
	return _u
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (_u *OrganizationSettingUpdateOne) RemoveFileIDs(ids ...string) *OrganizationSettingUpdateOne {
	_u.mutation.RemoveFileIDs(ids...)
	return _u
}

// RemoveFiles removes "files" edges to File entities.
func (_u *OrganizationSettingUpdateOne) RemoveFiles(v ...*File) *OrganizationSettingUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the OrganizationSettingUpdate builder.
func (_u *OrganizationSettingUpdateOne) Where(ps ...predicate.OrganizationSetting) *OrganizationSettingUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrganizationSettingUpdateOne) Select(field string, fields ...string) *OrganizationSettingUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OrganizationSetting entity.
func (_u *OrganizationSettingUpdateOne) Save(ctx context.Context) (*OrganizationSetting, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrganizationSettingUpdateOne) SaveX(ctx context.Context) *OrganizationSetting {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrganizationSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrganizationSettingUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrganizationSettingUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if organizationsetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organizationsetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organizationsetting.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrganizationSettingUpdateOne) check() error {
	if v, ok := _u.mutation.Domains(); ok {
		if err := organizationsetting.DomainsValidator(v); err != nil {
			return &ValidationError{Name: "domains", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.domains": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BillingEmail(); ok {
		if err := organizationsetting.BillingEmailValidator(v); err != nil {
			return &ValidationError{Name: "billing_email", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.billing_email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BillingPhone(); ok {
		if err := organizationsetting.BillingPhoneValidator(v); err != nil {
			return &ValidationError{Name: "billing_phone", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.billing_phone": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GeoLocation(); ok {
		if err := organizationsetting.GeoLocationValidator(v); err != nil {
			return &ValidationError{Name: "geo_location", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.geo_location": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AllowedEmailDomains(); ok {
		if err := organizationsetting.AllowedEmailDomainsValidator(v); err != nil {
			return &ValidationError{Name: "allowed_email_domains", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.allowed_email_domains": %w`, err)}
		}
	}
	if v, ok := _u.mutation.IdentityProvider(); ok {
		if err := organizationsetting.IdentityProviderValidator(v); err != nil {
			return &ValidationError{Name: "identity_provider", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.identity_provider": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *OrganizationSettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrganizationSettingUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *OrganizationSettingUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationSetting, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationsetting.Table, organizationsetting.Columns, sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OrganizationSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationsetting.FieldID)
		for _, f := range fields {
			if !organizationsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != organizationsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(organizationsetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(organizationsetting.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(organizationsetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationsetting.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(organizationsetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(organizationsetting.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(organizationsetting.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(organizationsetting.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(organizationsetting.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(organizationsetting.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organizationsetting.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(organizationsetting.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Domains(); ok {
		_spec.SetField(organizationsetting.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organizationsetting.FieldDomains, value)
		})
	}
	if _u.mutation.DomainsCleared() {
		_spec.ClearField(organizationsetting.FieldDomains, field.TypeJSON)
	}
	if value, ok := _u.mutation.BillingContact(); ok {
		_spec.SetField(organizationsetting.FieldBillingContact, field.TypeString, value)
	}
	if _u.mutation.BillingContactCleared() {
		_spec.ClearField(organizationsetting.FieldBillingContact, field.TypeString)
	}
	if value, ok := _u.mutation.BillingEmail(); ok {
		_spec.SetField(organizationsetting.FieldBillingEmail, field.TypeString, value)
	}
	if _u.mutation.BillingEmailCleared() {
		_spec.ClearField(organizationsetting.FieldBillingEmail, field.TypeString)
	}
	if value, ok := _u.mutation.BillingPhone(); ok {
		_spec.SetField(organizationsetting.FieldBillingPhone, field.TypeString, value)
	}
	if _u.mutation.BillingPhoneCleared() {
		_spec.ClearField(organizationsetting.FieldBillingPhone, field.TypeString)
	}
	if value, ok := _u.mutation.BillingAddress(); ok {
		_spec.SetField(organizationsetting.FieldBillingAddress, field.TypeJSON, value)
	}
	if _u.mutation.BillingAddressCleared() {
		_spec.ClearField(organizationsetting.FieldBillingAddress, field.TypeJSON)
	}
	if value, ok := _u.mutation.TaxIdentifier(); ok {
		_spec.SetField(organizationsetting.FieldTaxIdentifier, field.TypeString, value)
	}
	if _u.mutation.TaxIdentifierCleared() {
		_spec.ClearField(organizationsetting.FieldTaxIdentifier, field.TypeString)
	}
	if value, ok := _u.mutation.GeoLocation(); ok {
		_spec.SetField(organizationsetting.FieldGeoLocation, field.TypeEnum, value)
	}
	if _u.mutation.GeoLocationCleared() {
		_spec.ClearField(organizationsetting.FieldGeoLocation, field.TypeEnum)
	}
	if value, ok := _u.mutation.BillingNotificationsEnabled(); ok {
		_spec.SetField(organizationsetting.FieldBillingNotificationsEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AllowedEmailDomains(); ok {
		_spec.SetField(organizationsetting.FieldAllowedEmailDomains, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAllowedEmailDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organizationsetting.FieldAllowedEmailDomains, value)
		})
	}
	if _u.mutation.AllowedEmailDomainsCleared() {
		_spec.ClearField(organizationsetting.FieldAllowedEmailDomains, field.TypeJSON)
	}
	if value, ok := _u.mutation.IdentityProvider(); ok {
		_spec.SetField(organizationsetting.FieldIdentityProvider, field.TypeEnum, value)
	}
	if _u.mutation.IdentityProviderCleared() {
		_spec.ClearField(organizationsetting.FieldIdentityProvider, field.TypeEnum)
	}
	if value, ok := _u.mutation.IdentityProviderClientID(); ok {
		_spec.SetField(organizationsetting.FieldIdentityProviderClientID, field.TypeString, value)
	}
	if _u.mutation.IdentityProviderClientIDCleared() {
		_spec.ClearField(organizationsetting.FieldIdentityProviderClientID, field.TypeString)
	}
	if value, ok := _u.mutation.IdentityProviderClientSecret(); ok {
		_spec.SetField(organizationsetting.FieldIdentityProviderClientSecret, field.TypeString, value)
	}
	if _u.mutation.IdentityProviderClientSecretCleared() {
		_spec.ClearField(organizationsetting.FieldIdentityProviderClientSecret, field.TypeString)
	}
	if value, ok := _u.mutation.IdentityProviderMetadataEndpoint(); ok {
		_spec.SetField(organizationsetting.FieldIdentityProviderMetadataEndpoint, field.TypeString, value)
	}
	if _u.mutation.IdentityProviderMetadataEndpointCleared() {
		_spec.ClearField(organizationsetting.FieldIdentityProviderMetadataEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.IdentityProviderEntityID(); ok {
		_spec.SetField(organizationsetting.FieldIdentityProviderEntityID, field.TypeString, value)
	}
	if _u.mutation.IdentityProviderEntityIDCleared() {
		_spec.ClearField(organizationsetting.FieldIdentityProviderEntityID, field.TypeString)
	}
	if value, ok := _u.mutation.OidcDiscoveryEndpoint(); ok {
		_spec.SetField(organizationsetting.FieldOidcDiscoveryEndpoint, field.TypeString, value)
	}
	if _u.mutation.OidcDiscoveryEndpointCleared() {
		_spec.ClearField(organizationsetting.FieldOidcDiscoveryEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.IdentityProviderLoginEnforced(); ok {
		_spec.SetField(organizationsetting.FieldIdentityProviderLoginEnforced, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ComplianceWebhookToken(); ok {
		_spec.SetField(organizationsetting.FieldComplianceWebhookToken, field.TypeString, value)
	}
	if _u.mutation.ComplianceWebhookTokenCleared() {
		_spec.ClearField(organizationsetting.FieldComplianceWebhookToken, field.TypeString)
	}
	if value, ok := _u.mutation.PaymentMethodAdded(); ok {
		_spec.SetField(organizationsetting.FieldPaymentMethodAdded, field.TypeBool, value)
	}
	if _u.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organizationsetting.OrganizationTable,
			Columns: []string{organizationsetting.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organizationsetting.OrganizationTable,
			Columns: []string{organizationsetting.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationsetting.FilesTable,
			Columns: organizationsetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSettingFiles
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFilesIDs(); len(nodes) > 0 && !_u.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationsetting.FilesTable,
			Columns: organizationsetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organizationsetting.FilesTable,
			Columns: organizationsetting.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.OrganizationSettingFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.OrganizationSetting
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &OrganizationSetting{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
