// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EvidenceQuery is the builder for querying Evidence entities.
type EvidenceQuery struct {
	config
	ctx                        *QueryContext
	order                      []evidence.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.Evidence
	withOwner                  *OrganizationQuery
	withControlObjectives      *ControlObjectiveQuery
	withControls               *ControlQuery
	withSubcontrols            *SubcontrolQuery
	withFiles                  *FileQuery
	withPrograms               *ProgramQuery
	withTasks                  *TaskQuery
	loadTotal                  []func(context.Context, []*Evidence) error
	modifiers                  []func(*sql.Selector)
	withNamedControlObjectives map[string]*ControlObjectiveQuery
	withNamedControls          map[string]*ControlQuery
	withNamedSubcontrols       map[string]*SubcontrolQuery
	withNamedFiles             map[string]*FileQuery
	withNamedPrograms          map[string]*ProgramQuery
	withNamedTasks             map[string]*TaskQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EvidenceQuery builder.
func (eq *EvidenceQuery) Where(ps ...predicate.Evidence) *EvidenceQuery {
	eq.predicates = append(eq.predicates, ps...)
	return eq
}

// Limit the number of records to be returned by this query.
func (eq *EvidenceQuery) Limit(limit int) *EvidenceQuery {
	eq.ctx.Limit = &limit
	return eq
}

// Offset to start from.
func (eq *EvidenceQuery) Offset(offset int) *EvidenceQuery {
	eq.ctx.Offset = &offset
	return eq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (eq *EvidenceQuery) Unique(unique bool) *EvidenceQuery {
	eq.ctx.Unique = &unique
	return eq
}

// Order specifies how the records should be ordered.
func (eq *EvidenceQuery) Order(o ...evidence.OrderOption) *EvidenceQuery {
	eq.order = append(eq.order, o...)
	return eq
}

// QueryOwner chains the current query on the "owner" edge.
func (eq *EvidenceQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(evidence.Table, evidence.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, evidence.OwnerTable, evidence.OwnerColumn),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Evidence
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlObjectives chains the current query on the "control_objectives" edge.
func (eq *EvidenceQuery) QueryControlObjectives() *ControlObjectiveQuery {
	query := (&ControlObjectiveClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(evidence.Table, evidence.FieldID, selector),
			sqlgraph.To(controlobjective.Table, controlobjective.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, evidence.ControlObjectivesTable, evidence.ControlObjectivesPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.EvidenceControlObjectives
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControls chains the current query on the "controls" edge.
func (eq *EvidenceQuery) QueryControls() *ControlQuery {
	query := (&ControlClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(evidence.Table, evidence.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, evidence.ControlsTable, evidence.ControlsPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.EvidenceControls
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubcontrols chains the current query on the "subcontrols" edge.
func (eq *EvidenceQuery) QuerySubcontrols() *SubcontrolQuery {
	query := (&SubcontrolClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(evidence.Table, evidence.FieldID, selector),
			sqlgraph.To(subcontrol.Table, subcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, evidence.SubcontrolsTable, evidence.SubcontrolsPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.EvidenceSubcontrols
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFiles chains the current query on the "files" edge.
func (eq *EvidenceQuery) QueryFiles() *FileQuery {
	query := (&FileClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(evidence.Table, evidence.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, evidence.FilesTable, evidence.FilesPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.EvidenceFiles
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrograms chains the current query on the "programs" edge.
func (eq *EvidenceQuery) QueryPrograms() *ProgramQuery {
	query := (&ProgramClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(evidence.Table, evidence.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, evidence.ProgramsTable, evidence.ProgramsPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramEvidence
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTasks chains the current query on the "tasks" edge.
func (eq *EvidenceQuery) QueryTasks() *TaskQuery {
	query := (&TaskClient{config: eq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := eq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := eq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(evidence.Table, evidence.FieldID, selector),
			sqlgraph.To(task.Table, task.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, evidence.TasksTable, evidence.TasksPrimaryKey...),
		)
		schemaConfig := eq.schemaConfig
		step.To.Schema = schemaConfig.Task
		step.Edge.Schema = schemaConfig.TaskEvidence
		fromU = sqlgraph.SetNeighbors(eq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Evidence entity from the query.
// Returns a *NotFoundError when no Evidence was found.
func (eq *EvidenceQuery) First(ctx context.Context) (*Evidence, error) {
	nodes, err := eq.Limit(1).All(setContextOp(ctx, eq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{evidence.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (eq *EvidenceQuery) FirstX(ctx context.Context) *Evidence {
	node, err := eq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Evidence ID from the query.
// Returns a *NotFoundError when no Evidence ID was found.
func (eq *EvidenceQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eq.Limit(1).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{evidence.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (eq *EvidenceQuery) FirstIDX(ctx context.Context) string {
	id, err := eq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Evidence entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Evidence entity is found.
// Returns a *NotFoundError when no Evidence entities are found.
func (eq *EvidenceQuery) Only(ctx context.Context) (*Evidence, error) {
	nodes, err := eq.Limit(2).All(setContextOp(ctx, eq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{evidence.Label}
	default:
		return nil, &NotSingularError{evidence.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (eq *EvidenceQuery) OnlyX(ctx context.Context) *Evidence {
	node, err := eq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Evidence ID in the query.
// Returns a *NotSingularError when more than one Evidence ID is found.
// Returns a *NotFoundError when no entities are found.
func (eq *EvidenceQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = eq.Limit(2).IDs(setContextOp(ctx, eq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{evidence.Label}
	default:
		err = &NotSingularError{evidence.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (eq *EvidenceQuery) OnlyIDX(ctx context.Context) string {
	id, err := eq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Evidences.
func (eq *EvidenceQuery) All(ctx context.Context) ([]*Evidence, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryAll)
	if err := eq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Evidence, *EvidenceQuery]()
	return withInterceptors[[]*Evidence](ctx, eq, qr, eq.inters)
}

// AllX is like All, but panics if an error occurs.
func (eq *EvidenceQuery) AllX(ctx context.Context) []*Evidence {
	nodes, err := eq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Evidence IDs.
func (eq *EvidenceQuery) IDs(ctx context.Context) (ids []string, err error) {
	if eq.ctx.Unique == nil && eq.path != nil {
		eq.Unique(true)
	}
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryIDs)
	if err = eq.Select(evidence.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (eq *EvidenceQuery) IDsX(ctx context.Context) []string {
	ids, err := eq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (eq *EvidenceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryCount)
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, eq, querierCount[*EvidenceQuery](), eq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (eq *EvidenceQuery) CountX(ctx context.Context) int {
	count, err := eq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (eq *EvidenceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryExist)
	switch _, err := eq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (eq *EvidenceQuery) ExistX(ctx context.Context) bool {
	exist, err := eq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EvidenceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (eq *EvidenceQuery) Clone() *EvidenceQuery {
	if eq == nil {
		return nil
	}
	return &EvidenceQuery{
		config:                eq.config,
		ctx:                   eq.ctx.Clone(),
		order:                 append([]evidence.OrderOption{}, eq.order...),
		inters:                append([]Interceptor{}, eq.inters...),
		predicates:            append([]predicate.Evidence{}, eq.predicates...),
		withOwner:             eq.withOwner.Clone(),
		withControlObjectives: eq.withControlObjectives.Clone(),
		withControls:          eq.withControls.Clone(),
		withSubcontrols:       eq.withSubcontrols.Clone(),
		withFiles:             eq.withFiles.Clone(),
		withPrograms:          eq.withPrograms.Clone(),
		withTasks:             eq.withTasks.Clone(),
		// clone intermediate query.
		sql:       eq.sql.Clone(),
		path:      eq.path,
		modifiers: append([]func(*sql.Selector){}, eq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithOwner(opts ...func(*OrganizationQuery)) *EvidenceQuery {
	query := (&OrganizationClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withOwner = query
	return eq
}

// WithControlObjectives tells the query-builder to eager-load the nodes that are connected to
// the "control_objectives" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithControlObjectives(opts ...func(*ControlObjectiveQuery)) *EvidenceQuery {
	query := (&ControlObjectiveClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withControlObjectives = query
	return eq
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithControls(opts ...func(*ControlQuery)) *EvidenceQuery {
	query := (&ControlClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withControls = query
	return eq
}

// WithSubcontrols tells the query-builder to eager-load the nodes that are connected to
// the "subcontrols" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithSubcontrols(opts ...func(*SubcontrolQuery)) *EvidenceQuery {
	query := (&SubcontrolClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withSubcontrols = query
	return eq
}

// WithFiles tells the query-builder to eager-load the nodes that are connected to
// the "files" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithFiles(opts ...func(*FileQuery)) *EvidenceQuery {
	query := (&FileClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withFiles = query
	return eq
}

// WithPrograms tells the query-builder to eager-load the nodes that are connected to
// the "programs" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithPrograms(opts ...func(*ProgramQuery)) *EvidenceQuery {
	query := (&ProgramClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withPrograms = query
	return eq
}

// WithTasks tells the query-builder to eager-load the nodes that are connected to
// the "tasks" edge. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithTasks(opts ...func(*TaskQuery)) *EvidenceQuery {
	query := (&TaskClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	eq.withTasks = query
	return eq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Evidence.Query().
//		GroupBy(evidence.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (eq *EvidenceQuery) GroupBy(field string, fields ...string) *EvidenceGroupBy {
	eq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EvidenceGroupBy{build: eq}
	grbuild.flds = &eq.ctx.Fields
	grbuild.label = evidence.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Evidence.Query().
//		Select(evidence.FieldCreatedAt).
//		Scan(ctx, &v)
func (eq *EvidenceQuery) Select(fields ...string) *EvidenceSelect {
	eq.ctx.Fields = append(eq.ctx.Fields, fields...)
	sbuild := &EvidenceSelect{EvidenceQuery: eq}
	sbuild.label = evidence.Label
	sbuild.flds, sbuild.scan = &eq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EvidenceSelect configured with the given aggregations.
func (eq *EvidenceQuery) Aggregate(fns ...AggregateFunc) *EvidenceSelect {
	return eq.Select().Aggregate(fns...)
}

func (eq *EvidenceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range eq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, eq); err != nil {
				return err
			}
		}
	}
	for _, f := range eq.ctx.Fields {
		if !evidence.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if eq.path != nil {
		prev, err := eq.path(ctx)
		if err != nil {
			return err
		}
		eq.sql = prev
	}
	if evidence.Policy == nil {
		return errors.New("generated: uninitialized evidence.Policy (forgotten import generated/runtime?)")
	}
	if err := evidence.Policy.EvalQuery(ctx, eq); err != nil {
		return err
	}
	return nil
}

func (eq *EvidenceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Evidence, error) {
	var (
		nodes       = []*Evidence{}
		_spec       = eq.querySpec()
		loadedTypes = [7]bool{
			eq.withOwner != nil,
			eq.withControlObjectives != nil,
			eq.withControls != nil,
			eq.withSubcontrols != nil,
			eq.withFiles != nil,
			eq.withPrograms != nil,
			eq.withTasks != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Evidence).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Evidence{config: eq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = eq.schemaConfig.Evidence
	ctx = internal.NewSchemaConfigContext(ctx, eq.schemaConfig)
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, eq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := eq.withOwner; query != nil {
		if err := eq.loadOwner(ctx, query, nodes, nil,
			func(n *Evidence, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := eq.withControlObjectives; query != nil {
		if err := eq.loadControlObjectives(ctx, query, nodes,
			func(n *Evidence) { n.Edges.ControlObjectives = []*ControlObjective{} },
			func(n *Evidence, e *ControlObjective) {
				n.Edges.ControlObjectives = append(n.Edges.ControlObjectives, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := eq.withControls; query != nil {
		if err := eq.loadControls(ctx, query, nodes,
			func(n *Evidence) { n.Edges.Controls = []*Control{} },
			func(n *Evidence, e *Control) { n.Edges.Controls = append(n.Edges.Controls, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withSubcontrols; query != nil {
		if err := eq.loadSubcontrols(ctx, query, nodes,
			func(n *Evidence) { n.Edges.Subcontrols = []*Subcontrol{} },
			func(n *Evidence, e *Subcontrol) { n.Edges.Subcontrols = append(n.Edges.Subcontrols, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withFiles; query != nil {
		if err := eq.loadFiles(ctx, query, nodes,
			func(n *Evidence) { n.Edges.Files = []*File{} },
			func(n *Evidence, e *File) { n.Edges.Files = append(n.Edges.Files, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withPrograms; query != nil {
		if err := eq.loadPrograms(ctx, query, nodes,
			func(n *Evidence) { n.Edges.Programs = []*Program{} },
			func(n *Evidence, e *Program) { n.Edges.Programs = append(n.Edges.Programs, e) }); err != nil {
			return nil, err
		}
	}
	if query := eq.withTasks; query != nil {
		if err := eq.loadTasks(ctx, query, nodes,
			func(n *Evidence) { n.Edges.Tasks = []*Task{} },
			func(n *Evidence, e *Task) { n.Edges.Tasks = append(n.Edges.Tasks, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedControlObjectives {
		if err := eq.loadControlObjectives(ctx, query, nodes,
			func(n *Evidence) { n.appendNamedControlObjectives(name) },
			func(n *Evidence, e *ControlObjective) { n.appendNamedControlObjectives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedControls {
		if err := eq.loadControls(ctx, query, nodes,
			func(n *Evidence) { n.appendNamedControls(name) },
			func(n *Evidence, e *Control) { n.appendNamedControls(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedSubcontrols {
		if err := eq.loadSubcontrols(ctx, query, nodes,
			func(n *Evidence) { n.appendNamedSubcontrols(name) },
			func(n *Evidence, e *Subcontrol) { n.appendNamedSubcontrols(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedFiles {
		if err := eq.loadFiles(ctx, query, nodes,
			func(n *Evidence) { n.appendNamedFiles(name) },
			func(n *Evidence, e *File) { n.appendNamedFiles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedPrograms {
		if err := eq.loadPrograms(ctx, query, nodes,
			func(n *Evidence) { n.appendNamedPrograms(name) },
			func(n *Evidence, e *Program) { n.appendNamedPrograms(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range eq.withNamedTasks {
		if err := eq.loadTasks(ctx, query, nodes,
			func(n *Evidence) { n.appendNamedTasks(name) },
			func(n *Evidence, e *Task) { n.appendNamedTasks(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range eq.loadTotal {
		if err := eq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (eq *EvidenceQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*Evidence, init func(*Evidence), assign func(*Evidence, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Evidence)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (eq *EvidenceQuery) loadControlObjectives(ctx context.Context, query *ControlObjectiveQuery, nodes []*Evidence, init func(*Evidence), assign func(*Evidence, *ControlObjective)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Evidence)
	nids := make(map[string]map[*Evidence]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(evidence.ControlObjectivesTable)
		joinT.Schema(eq.schemaConfig.EvidenceControlObjectives)
		s.Join(joinT).On(s.C(controlobjective.FieldID), joinT.C(evidence.ControlObjectivesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(evidence.ControlObjectivesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(evidence.ControlObjectivesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Evidence]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlObjective](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_objectives" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EvidenceQuery) loadControls(ctx context.Context, query *ControlQuery, nodes []*Evidence, init func(*Evidence), assign func(*Evidence, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Evidence)
	nids := make(map[string]map[*Evidence]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(evidence.ControlsTable)
		joinT.Schema(eq.schemaConfig.EvidenceControls)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(evidence.ControlsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(evidence.ControlsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(evidence.ControlsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Evidence]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "controls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EvidenceQuery) loadSubcontrols(ctx context.Context, query *SubcontrolQuery, nodes []*Evidence, init func(*Evidence), assign func(*Evidence, *Subcontrol)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Evidence)
	nids := make(map[string]map[*Evidence]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(evidence.SubcontrolsTable)
		joinT.Schema(eq.schemaConfig.EvidenceSubcontrols)
		s.Join(joinT).On(s.C(subcontrol.FieldID), joinT.C(evidence.SubcontrolsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(evidence.SubcontrolsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(evidence.SubcontrolsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Evidence]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Subcontrol](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subcontrols" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EvidenceQuery) loadFiles(ctx context.Context, query *FileQuery, nodes []*Evidence, init func(*Evidence), assign func(*Evidence, *File)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Evidence)
	nids := make(map[string]map[*Evidence]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(evidence.FilesTable)
		joinT.Schema(eq.schemaConfig.EvidenceFiles)
		s.Join(joinT).On(s.C(file.FieldID), joinT.C(evidence.FilesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(evidence.FilesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(evidence.FilesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Evidence]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*File](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "files" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EvidenceQuery) loadPrograms(ctx context.Context, query *ProgramQuery, nodes []*Evidence, init func(*Evidence), assign func(*Evidence, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Evidence)
	nids := make(map[string]map[*Evidence]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(evidence.ProgramsTable)
		joinT.Schema(eq.schemaConfig.ProgramEvidence)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(evidence.ProgramsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(evidence.ProgramsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(evidence.ProgramsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Evidence]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "programs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (eq *EvidenceQuery) loadTasks(ctx context.Context, query *TaskQuery, nodes []*Evidence, init func(*Evidence), assign func(*Evidence, *Task)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Evidence)
	nids := make(map[string]map[*Evidence]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(evidence.TasksTable)
		joinT.Schema(eq.schemaConfig.TaskEvidence)
		s.Join(joinT).On(s.C(task.FieldID), joinT.C(evidence.TasksPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(evidence.TasksPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(evidence.TasksPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Evidence]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Task](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tasks" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (eq *EvidenceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := eq.querySpec()
	_spec.Node.Schema = eq.schemaConfig.Evidence
	ctx = internal.NewSchemaConfigContext(ctx, eq.schemaConfig)
	if len(eq.modifiers) > 0 {
		_spec.Modifiers = eq.modifiers
	}
	_spec.Node.Columns = eq.ctx.Fields
	if len(eq.ctx.Fields) > 0 {
		_spec.Unique = eq.ctx.Unique != nil && *eq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, eq.driver, _spec)
}

func (eq *EvidenceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(evidence.Table, evidence.Columns, sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString))
	_spec.From = eq.sql
	if unique := eq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if eq.path != nil {
		_spec.Unique = true
	}
	if fields := eq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, evidence.FieldID)
		for i := range fields {
			if fields[i] != evidence.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if eq.withOwner != nil {
			_spec.Node.AddColumnOnce(evidence.FieldOwnerID)
		}
	}
	if ps := eq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := eq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := eq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := eq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (eq *EvidenceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(eq.driver.Dialect())
	t1 := builder.Table(evidence.Table)
	columns := eq.ctx.Fields
	if len(columns) == 0 {
		columns = evidence.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if eq.sql != nil {
		selector = eq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if eq.ctx.Unique != nil && *eq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(eq.schemaConfig.Evidence)
	ctx = internal.NewSchemaConfigContext(ctx, eq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range eq.modifiers {
		m(selector)
	}
	for _, p := range eq.predicates {
		p(selector)
	}
	for _, p := range eq.order {
		p(selector)
	}
	if offset := eq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := eq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (eq *EvidenceQuery) Modify(modifiers ...func(s *sql.Selector)) *EvidenceSelect {
	eq.modifiers = append(eq.modifiers, modifiers...)
	return eq.Select()
}

// WithNamedControlObjectives tells the query-builder to eager-load the nodes that are connected to the "control_objectives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithNamedControlObjectives(name string, opts ...func(*ControlObjectiveQuery)) *EvidenceQuery {
	query := (&ControlObjectiveClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedControlObjectives == nil {
		eq.withNamedControlObjectives = make(map[string]*ControlObjectiveQuery)
	}
	eq.withNamedControlObjectives[name] = query
	return eq
}

// WithNamedControls tells the query-builder to eager-load the nodes that are connected to the "controls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithNamedControls(name string, opts ...func(*ControlQuery)) *EvidenceQuery {
	query := (&ControlClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedControls == nil {
		eq.withNamedControls = make(map[string]*ControlQuery)
	}
	eq.withNamedControls[name] = query
	return eq
}

// WithNamedSubcontrols tells the query-builder to eager-load the nodes that are connected to the "subcontrols"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithNamedSubcontrols(name string, opts ...func(*SubcontrolQuery)) *EvidenceQuery {
	query := (&SubcontrolClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedSubcontrols == nil {
		eq.withNamedSubcontrols = make(map[string]*SubcontrolQuery)
	}
	eq.withNamedSubcontrols[name] = query
	return eq
}

// WithNamedFiles tells the query-builder to eager-load the nodes that are connected to the "files"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithNamedFiles(name string, opts ...func(*FileQuery)) *EvidenceQuery {
	query := (&FileClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedFiles == nil {
		eq.withNamedFiles = make(map[string]*FileQuery)
	}
	eq.withNamedFiles[name] = query
	return eq
}

// WithNamedPrograms tells the query-builder to eager-load the nodes that are connected to the "programs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithNamedPrograms(name string, opts ...func(*ProgramQuery)) *EvidenceQuery {
	query := (&ProgramClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedPrograms == nil {
		eq.withNamedPrograms = make(map[string]*ProgramQuery)
	}
	eq.withNamedPrograms[name] = query
	return eq
}

// WithNamedTasks tells the query-builder to eager-load the nodes that are connected to the "tasks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (eq *EvidenceQuery) WithNamedTasks(name string, opts ...func(*TaskQuery)) *EvidenceQuery {
	query := (&TaskClient{config: eq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if eq.withNamedTasks == nil {
		eq.withNamedTasks = make(map[string]*TaskQuery)
	}
	eq.withNamedTasks[name] = query
	return eq
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (eq *EvidenceQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, eq.ctx, ent.OpQueryIDs)
	if err := eq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return eq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, eq, qr, eq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// EvidenceGroupBy is the group-by builder for Evidence entities.
type EvidenceGroupBy struct {
	selector
	build *EvidenceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (egb *EvidenceGroupBy) Aggregate(fns ...AggregateFunc) *EvidenceGroupBy {
	egb.fns = append(egb.fns, fns...)
	return egb
}

// Scan applies the selector query and scans the result into the given value.
func (egb *EvidenceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, egb.build.ctx, ent.OpQueryGroupBy)
	if err := egb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EvidenceQuery, *EvidenceGroupBy](ctx, egb.build, egb, egb.build.inters, v)
}

func (egb *EvidenceGroupBy) sqlScan(ctx context.Context, root *EvidenceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(egb.fns))
	for _, fn := range egb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*egb.flds)+len(egb.fns))
		for _, f := range *egb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*egb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := egb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EvidenceSelect is the builder for selecting fields of Evidence entities.
type EvidenceSelect struct {
	*EvidenceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (es *EvidenceSelect) Aggregate(fns ...AggregateFunc) *EvidenceSelect {
	es.fns = append(es.fns, fns...)
	return es
}

// Scan applies the selector query and scans the result into the given value.
func (es *EvidenceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, es.ctx, ent.OpQuerySelect)
	if err := es.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EvidenceQuery, *EvidenceSelect](ctx, es.EvidenceQuery, es, es.inters, v)
}

func (es *EvidenceSelect) sqlScan(ctx context.Context, root *EvidenceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(es.fns))
	for _, fn := range es.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*es.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := es.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (es *EvidenceSelect) Modify(modifiers ...func(s *sql.Selector)) *EvidenceSelect {
	es.modifiers = append(es.modifiers, modifiers...)
	return es
}
