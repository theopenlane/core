// Code generated by entx.history, DO NOT EDIT.

// Code generated by ent, DO NOT EDIT.

package generated

import "github.com/theopenlane/entx/history"

// withHistory adds the history hooks to the appropriate schemas - generated by entx.history
func (c *Client) WithHistory() {
	for _, hook := range history.Hooks[*ActionPlanMutation]() {
		c.ActionPlan.Use(hook)
	}
	for _, hook := range history.Hooks[*ContactMutation]() {
		c.Contact.Use(hook)
	}
	for _, hook := range history.Hooks[*ControlMutation]() {
		c.Control.Use(hook)
	}
	for _, hook := range history.Hooks[*ControlImplementationMutation]() {
		c.ControlImplementation.Use(hook)
	}
	for _, hook := range history.Hooks[*ControlObjectiveMutation]() {
		c.ControlObjective.Use(hook)
	}
	for _, hook := range history.Hooks[*CustomDomainMutation]() {
		c.CustomDomain.Use(hook)
	}
	for _, hook := range history.Hooks[*DocumentDataMutation]() {
		c.DocumentData.Use(hook)
	}
	for _, hook := range history.Hooks[*EntityMutation]() {
		c.Entity.Use(hook)
	}
	for _, hook := range history.Hooks[*EntityTypeMutation]() {
		c.EntityType.Use(hook)
	}
	for _, hook := range history.Hooks[*EventMutation]() {
		c.Event.Use(hook)
	}
	for _, hook := range history.Hooks[*EvidenceMutation]() {
		c.Evidence.Use(hook)
	}
	for _, hook := range history.Hooks[*FileMutation]() {
		c.File.Use(hook)
	}
	for _, hook := range history.Hooks[*GroupMutation]() {
		c.Group.Use(hook)
	}
	for _, hook := range history.Hooks[*GroupMembershipMutation]() {
		c.GroupMembership.Use(hook)
	}
	for _, hook := range history.Hooks[*GroupSettingMutation]() {
		c.GroupSetting.Use(hook)
	}
	for _, hook := range history.Hooks[*HushMutation]() {
		c.Hush.Use(hook)
	}
	for _, hook := range history.Hooks[*IntegrationMutation]() {
		c.Integration.Use(hook)
	}
	for _, hook := range history.Hooks[*InternalPolicyMutation]() {
		c.InternalPolicy.Use(hook)
	}
	for _, hook := range history.Hooks[*MappableDomainMutation]() {
		c.MappableDomain.Use(hook)
	}
	for _, hook := range history.Hooks[*MappedControlMutation]() {
		c.MappedControl.Use(hook)
	}
	for _, hook := range history.Hooks[*NarrativeMutation]() {
		c.Narrative.Use(hook)
	}
	for _, hook := range history.Hooks[*NoteMutation]() {
		c.Note.Use(hook)
	}
	for _, hook := range history.Hooks[*OrgMembershipMutation]() {
		c.OrgMembership.Use(hook)
	}
	for _, hook := range history.Hooks[*OrgSubscriptionMutation]() {
		c.OrgSubscription.Use(hook)
	}
	for _, hook := range history.Hooks[*OrganizationMutation]() {
		c.Organization.Use(hook)
	}
	for _, hook := range history.Hooks[*OrganizationSettingMutation]() {
		c.OrganizationSetting.Use(hook)
	}
	for _, hook := range history.Hooks[*ProcedureMutation]() {
		c.Procedure.Use(hook)
	}
	for _, hook := range history.Hooks[*ProgramMutation]() {
		c.Program.Use(hook)
	}
	for _, hook := range history.Hooks[*ProgramMembershipMutation]() {
		c.ProgramMembership.Use(hook)
	}
	for _, hook := range history.Hooks[*RiskMutation]() {
		c.Risk.Use(hook)
	}
	for _, hook := range history.Hooks[*StandardMutation]() {
		c.Standard.Use(hook)
	}
	for _, hook := range history.Hooks[*SubcontrolMutation]() {
		c.Subcontrol.Use(hook)
	}
	for _, hook := range history.Hooks[*TaskMutation]() {
		c.Task.Use(hook)
	}
	for _, hook := range history.Hooks[*TemplateMutation]() {
		c.Template.Use(hook)
	}
	for _, hook := range history.Hooks[*UserMutation]() {
		c.User.Use(hook)
	}
	for _, hook := range history.Hooks[*UserSettingMutation]() {
		c.UserSetting.Use(hook)
	}
}
