// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/trustcenterwatermarkconfighistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// TrustCenterWatermarkConfigHistory is the model entity for the TrustCenterWatermarkConfigHistory schema.
type TrustCenterWatermarkConfigHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// ID of the trust center
	TrustCenterID string `json:"trust_center_id,omitempty"`
	// ID of the file containing the document
	LogoID *string `json:"logo_id,omitempty"`
	// text to watermark the document with
	Text string `json:"text,omitempty"`
	// font size of the watermark text
	FontSize float64 `json:"font_size,omitempty"`
	// opacity of the watermark text
	Opacity float64 `json:"opacity,omitempty"`
	// rotation of the watermark text
	Rotation float64 `json:"rotation,omitempty"`
	// color of the watermark text
	Color string `json:"color,omitempty"`
	// font of the watermark text
	Font         enums.Font `json:"font,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrustCenterWatermarkConfigHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trustcenterwatermarkconfighistory.FieldOperation:
			values[i] = new(history.OpType)
		case trustcenterwatermarkconfighistory.FieldFontSize, trustcenterwatermarkconfighistory.FieldOpacity, trustcenterwatermarkconfighistory.FieldRotation:
			values[i] = new(sql.NullFloat64)
		case trustcenterwatermarkconfighistory.FieldID, trustcenterwatermarkconfighistory.FieldRef, trustcenterwatermarkconfighistory.FieldCreatedBy, trustcenterwatermarkconfighistory.FieldUpdatedBy, trustcenterwatermarkconfighistory.FieldDeletedBy, trustcenterwatermarkconfighistory.FieldOwnerID, trustcenterwatermarkconfighistory.FieldTrustCenterID, trustcenterwatermarkconfighistory.FieldLogoID, trustcenterwatermarkconfighistory.FieldText, trustcenterwatermarkconfighistory.FieldColor, trustcenterwatermarkconfighistory.FieldFont:
			values[i] = new(sql.NullString)
		case trustcenterwatermarkconfighistory.FieldHistoryTime, trustcenterwatermarkconfighistory.FieldCreatedAt, trustcenterwatermarkconfighistory.FieldUpdatedAt, trustcenterwatermarkconfighistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrustCenterWatermarkConfigHistory fields.
func (_m *TrustCenterWatermarkConfigHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trustcenterwatermarkconfighistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case trustcenterwatermarkconfighistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				_m.HistoryTime = value.Time
			}
		case trustcenterwatermarkconfighistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				_m.Ref = value.String
			}
		case trustcenterwatermarkconfighistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				_m.Operation = *value
			}
		case trustcenterwatermarkconfighistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case trustcenterwatermarkconfighistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case trustcenterwatermarkconfighistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case trustcenterwatermarkconfighistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case trustcenterwatermarkconfighistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case trustcenterwatermarkconfighistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case trustcenterwatermarkconfighistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				_m.OwnerID = value.String
			}
		case trustcenterwatermarkconfighistory.FieldTrustCenterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trust_center_id", values[i])
			} else if value.Valid {
				_m.TrustCenterID = value.String
			}
		case trustcenterwatermarkconfighistory.FieldLogoID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_id", values[i])
			} else if value.Valid {
				_m.LogoID = new(string)
				*_m.LogoID = value.String
			}
		case trustcenterwatermarkconfighistory.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				_m.Text = value.String
			}
		case trustcenterwatermarkconfighistory.FieldFontSize:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field font_size", values[i])
			} else if value.Valid {
				_m.FontSize = value.Float64
			}
		case trustcenterwatermarkconfighistory.FieldOpacity:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field opacity", values[i])
			} else if value.Valid {
				_m.Opacity = value.Float64
			}
		case trustcenterwatermarkconfighistory.FieldRotation:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rotation", values[i])
			} else if value.Valid {
				_m.Rotation = value.Float64
			}
		case trustcenterwatermarkconfighistory.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				_m.Color = value.String
			}
		case trustcenterwatermarkconfighistory.FieldFont:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field font", values[i])
			} else if value.Valid {
				_m.Font = enums.Font(value.String)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrustCenterWatermarkConfigHistory.
// This includes values selected through modifiers, order, etc.
func (_m *TrustCenterWatermarkConfigHistory) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this TrustCenterWatermarkConfigHistory.
// Note that you need to call TrustCenterWatermarkConfigHistory.Unwrap() before calling this method if this TrustCenterWatermarkConfigHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TrustCenterWatermarkConfigHistory) Update() *TrustCenterWatermarkConfigHistoryUpdateOne {
	return NewTrustCenterWatermarkConfigHistoryClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TrustCenterWatermarkConfigHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TrustCenterWatermarkConfigHistory) Unwrap() *TrustCenterWatermarkConfigHistory {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: TrustCenterWatermarkConfigHistory is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TrustCenterWatermarkConfigHistory) String() string {
	var builder strings.Builder
	builder.WriteString("TrustCenterWatermarkConfigHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("history_time=")
	builder.WriteString(_m.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(_m.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", _m.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(_m.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("trust_center_id=")
	builder.WriteString(_m.TrustCenterID)
	builder.WriteString(", ")
	if v := _m.LogoID; v != nil {
		builder.WriteString("logo_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(_m.Text)
	builder.WriteString(", ")
	builder.WriteString("font_size=")
	builder.WriteString(fmt.Sprintf("%v", _m.FontSize))
	builder.WriteString(", ")
	builder.WriteString("opacity=")
	builder.WriteString(fmt.Sprintf("%v", _m.Opacity))
	builder.WriteString(", ")
	builder.WriteString("rotation=")
	builder.WriteString(fmt.Sprintf("%v", _m.Rotation))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(_m.Color)
	builder.WriteString(", ")
	builder.WriteString("font=")
	builder.WriteString(fmt.Sprintf("%v", _m.Font))
	builder.WriteByte(')')
	return builder.String()
}

// TrustCenterWatermarkConfigHistories is a parsable slice of TrustCenterWatermarkConfigHistory.
type TrustCenterWatermarkConfigHistories []*TrustCenterWatermarkConfigHistory
