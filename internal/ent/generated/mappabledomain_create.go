// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/mappabledomain"
)

// MappableDomainCreate is the builder for creating a MappableDomain entity.
type MappableDomainCreate struct {
	config
	mutation *MappableDomainMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (mdc *MappableDomainCreate) SetCreatedAt(t time.Time) *MappableDomainCreate {
	mdc.mutation.SetCreatedAt(t)
	return mdc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mdc *MappableDomainCreate) SetNillableCreatedAt(t *time.Time) *MappableDomainCreate {
	if t != nil {
		mdc.SetCreatedAt(*t)
	}
	return mdc
}

// SetUpdatedAt sets the "updated_at" field.
func (mdc *MappableDomainCreate) SetUpdatedAt(t time.Time) *MappableDomainCreate {
	mdc.mutation.SetUpdatedAt(t)
	return mdc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mdc *MappableDomainCreate) SetNillableUpdatedAt(t *time.Time) *MappableDomainCreate {
	if t != nil {
		mdc.SetUpdatedAt(*t)
	}
	return mdc
}

// SetCreatedBy sets the "created_by" field.
func (mdc *MappableDomainCreate) SetCreatedBy(s string) *MappableDomainCreate {
	mdc.mutation.SetCreatedBy(s)
	return mdc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (mdc *MappableDomainCreate) SetNillableCreatedBy(s *string) *MappableDomainCreate {
	if s != nil {
		mdc.SetCreatedBy(*s)
	}
	return mdc
}

// SetUpdatedBy sets the "updated_by" field.
func (mdc *MappableDomainCreate) SetUpdatedBy(s string) *MappableDomainCreate {
	mdc.mutation.SetUpdatedBy(s)
	return mdc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (mdc *MappableDomainCreate) SetNillableUpdatedBy(s *string) *MappableDomainCreate {
	if s != nil {
		mdc.SetUpdatedBy(*s)
	}
	return mdc
}

// SetDeletedAt sets the "deleted_at" field.
func (mdc *MappableDomainCreate) SetDeletedAt(t time.Time) *MappableDomainCreate {
	mdc.mutation.SetDeletedAt(t)
	return mdc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mdc *MappableDomainCreate) SetNillableDeletedAt(t *time.Time) *MappableDomainCreate {
	if t != nil {
		mdc.SetDeletedAt(*t)
	}
	return mdc
}

// SetDeletedBy sets the "deleted_by" field.
func (mdc *MappableDomainCreate) SetDeletedBy(s string) *MappableDomainCreate {
	mdc.mutation.SetDeletedBy(s)
	return mdc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (mdc *MappableDomainCreate) SetNillableDeletedBy(s *string) *MappableDomainCreate {
	if s != nil {
		mdc.SetDeletedBy(*s)
	}
	return mdc
}

// SetTags sets the "tags" field.
func (mdc *MappableDomainCreate) SetTags(s []string) *MappableDomainCreate {
	mdc.mutation.SetTags(s)
	return mdc
}

// SetName sets the "name" field.
func (mdc *MappableDomainCreate) SetName(s string) *MappableDomainCreate {
	mdc.mutation.SetName(s)
	return mdc
}

// SetID sets the "id" field.
func (mdc *MappableDomainCreate) SetID(s string) *MappableDomainCreate {
	mdc.mutation.SetID(s)
	return mdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mdc *MappableDomainCreate) SetNillableID(s *string) *MappableDomainCreate {
	if s != nil {
		mdc.SetID(*s)
	}
	return mdc
}

// AddCustomDomainIDs adds the "custom_domains" edge to the CustomDomain entity by IDs.
func (mdc *MappableDomainCreate) AddCustomDomainIDs(ids ...string) *MappableDomainCreate {
	mdc.mutation.AddCustomDomainIDs(ids...)
	return mdc
}

// AddCustomDomains adds the "custom_domains" edges to the CustomDomain entity.
func (mdc *MappableDomainCreate) AddCustomDomains(c ...*CustomDomain) *MappableDomainCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mdc.AddCustomDomainIDs(ids...)
}

// Mutation returns the MappableDomainMutation object of the builder.
func (mdc *MappableDomainCreate) Mutation() *MappableDomainMutation {
	return mdc.mutation
}

// Save creates the MappableDomain in the database.
func (mdc *MappableDomainCreate) Save(ctx context.Context) (*MappableDomain, error) {
	if err := mdc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, mdc.sqlSave, mdc.mutation, mdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mdc *MappableDomainCreate) SaveX(ctx context.Context) *MappableDomain {
	v, err := mdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdc *MappableDomainCreate) Exec(ctx context.Context) error {
	_, err := mdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdc *MappableDomainCreate) ExecX(ctx context.Context) {
	if err := mdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mdc *MappableDomainCreate) defaults() error {
	if _, ok := mdc.mutation.CreatedAt(); !ok {
		if mappabledomain.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized mappabledomain.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := mappabledomain.DefaultCreatedAt()
		mdc.mutation.SetCreatedAt(v)
	}
	if _, ok := mdc.mutation.UpdatedAt(); !ok {
		if mappabledomain.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized mappabledomain.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := mappabledomain.DefaultUpdatedAt()
		mdc.mutation.SetUpdatedAt(v)
	}
	if _, ok := mdc.mutation.Tags(); !ok {
		v := mappabledomain.DefaultTags
		mdc.mutation.SetTags(v)
	}
	if _, ok := mdc.mutation.ID(); !ok {
		if mappabledomain.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized mappabledomain.DefaultID (forgotten import generated/runtime?)")
		}
		v := mappabledomain.DefaultID()
		mdc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (mdc *MappableDomainCreate) check() error {
	if _, ok := mdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "MappableDomain.name"`)}
	}
	if v, ok := mdc.mutation.Name(); ok {
		if err := mappabledomain.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "MappableDomain.name": %w`, err)}
		}
	}
	return nil
}

func (mdc *MappableDomainCreate) sqlSave(ctx context.Context) (*MappableDomain, error) {
	if err := mdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected MappableDomain.ID type: %T", _spec.ID.Value)
		}
	}
	mdc.mutation.id = &_node.ID
	mdc.mutation.done = true
	return _node, nil
}

func (mdc *MappableDomainCreate) createSpec() (*MappableDomain, *sqlgraph.CreateSpec) {
	var (
		_node = &MappableDomain{config: mdc.config}
		_spec = sqlgraph.NewCreateSpec(mappabledomain.Table, sqlgraph.NewFieldSpec(mappabledomain.FieldID, field.TypeString))
	)
	_spec.Schema = mdc.schemaConfig.MappableDomain
	if id, ok := mdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mdc.mutation.CreatedAt(); ok {
		_spec.SetField(mappabledomain.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := mdc.mutation.UpdatedAt(); ok {
		_spec.SetField(mappabledomain.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := mdc.mutation.CreatedBy(); ok {
		_spec.SetField(mappabledomain.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := mdc.mutation.UpdatedBy(); ok {
		_spec.SetField(mappabledomain.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := mdc.mutation.DeletedAt(); ok {
		_spec.SetField(mappabledomain.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := mdc.mutation.DeletedBy(); ok {
		_spec.SetField(mappabledomain.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := mdc.mutation.Tags(); ok {
		_spec.SetField(mappabledomain.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := mdc.mutation.Name(); ok {
		_spec.SetField(mappabledomain.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := mdc.mutation.CustomDomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mappabledomain.CustomDomainsTable,
			Columns: []string{mappabledomain.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = mdc.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MappableDomainCreateBulk is the builder for creating many MappableDomain entities in bulk.
type MappableDomainCreateBulk struct {
	config
	err      error
	builders []*MappableDomainCreate
}

// Save creates the MappableDomain entities in the database.
func (mdcb *MappableDomainCreateBulk) Save(ctx context.Context) ([]*MappableDomain, error) {
	if mdcb.err != nil {
		return nil, mdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mdcb.builders))
	nodes := make([]*MappableDomain, len(mdcb.builders))
	mutators := make([]Mutator, len(mdcb.builders))
	for i := range mdcb.builders {
		func(i int, root context.Context) {
			builder := mdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MappableDomainMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mdcb *MappableDomainCreateBulk) SaveX(ctx context.Context) []*MappableDomain {
	v, err := mdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mdcb *MappableDomainCreateBulk) Exec(ctx context.Context) error {
	_, err := mdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mdcb *MappableDomainCreateBulk) ExecX(ctx context.Context) {
	if err := mdcb.Exec(ctx); err != nil {
		panic(err)
	}
}
