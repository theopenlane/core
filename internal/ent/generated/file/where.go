// Code generated by ent, DO NOT EDIT.

package file

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.File {
	return predicate.File(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.File {
	return predicate.File(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldDeletedBy, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldMappingID, v))
}

// ProvidedFileName applies equality check predicate on the "provided_file_name" field. It's identical to ProvidedFileNameEQ.
func ProvidedFileName(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldProvidedFileName, v))
}

// ProvidedFileExtension applies equality check predicate on the "provided_file_extension" field. It's identical to ProvidedFileExtensionEQ.
func ProvidedFileExtension(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldProvidedFileExtension, v))
}

// ProvidedFileSize applies equality check predicate on the "provided_file_size" field. It's identical to ProvidedFileSizeEQ.
func ProvidedFileSize(v int64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldProvidedFileSize, v))
}

// PersistedFileSize applies equality check predicate on the "persisted_file_size" field. It's identical to PersistedFileSizeEQ.
func PersistedFileSize(v int64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldPersistedFileSize, v))
}

// DetectedMimeType applies equality check predicate on the "detected_mime_type" field. It's identical to DetectedMimeTypeEQ.
func DetectedMimeType(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldDetectedMimeType, v))
}

// Md5Hash applies equality check predicate on the "md5_hash" field. It's identical to Md5HashEQ.
func Md5Hash(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldMd5Hash, v))
}

// DetectedContentType applies equality check predicate on the "detected_content_type" field. It's identical to DetectedContentTypeEQ.
func DetectedContentType(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldDetectedContentType, v))
}

// StoreKey applies equality check predicate on the "store_key" field. It's identical to StoreKeyEQ.
func StoreKey(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldStoreKey, v))
}

// CategoryType applies equality check predicate on the "category_type" field. It's identical to CategoryTypeEQ.
func CategoryType(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCategoryType, v))
}

// URI applies equality check predicate on the "uri" field. It's identical to URIEQ.
func URI(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldURI, v))
}

// StorageScheme applies equality check predicate on the "storage_scheme" field. It's identical to StorageSchemeEQ.
func StorageScheme(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldStorageScheme, v))
}

// StorageVolume applies equality check predicate on the "storage_volume" field. It's identical to StorageVolumeEQ.
func StorageVolume(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldStorageVolume, v))
}

// StoragePath applies equality check predicate on the "storage_path" field. It's identical to StoragePathEQ.
func StoragePath(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldStoragePath, v))
}

// FileContents applies equality check predicate on the "file_contents" field. It's identical to FileContentsEQ.
func FileContents(v []byte) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFileContents, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.File {
	return predicate.File(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.File {
	return predicate.File(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.File {
	return predicate.File(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.File {
	return predicate.File(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.File {
	return predicate.File(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.File {
	return predicate.File(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.File {
	return predicate.File(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldDeletedBy, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldMappingID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldTags))
}

// ProvidedFileNameEQ applies the EQ predicate on the "provided_file_name" field.
func ProvidedFileNameEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldProvidedFileName, v))
}

// ProvidedFileNameNEQ applies the NEQ predicate on the "provided_file_name" field.
func ProvidedFileNameNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldProvidedFileName, v))
}

// ProvidedFileNameIn applies the In predicate on the "provided_file_name" field.
func ProvidedFileNameIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldProvidedFileName, vs...))
}

// ProvidedFileNameNotIn applies the NotIn predicate on the "provided_file_name" field.
func ProvidedFileNameNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldProvidedFileName, vs...))
}

// ProvidedFileNameGT applies the GT predicate on the "provided_file_name" field.
func ProvidedFileNameGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldProvidedFileName, v))
}

// ProvidedFileNameGTE applies the GTE predicate on the "provided_file_name" field.
func ProvidedFileNameGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldProvidedFileName, v))
}

// ProvidedFileNameLT applies the LT predicate on the "provided_file_name" field.
func ProvidedFileNameLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldProvidedFileName, v))
}

// ProvidedFileNameLTE applies the LTE predicate on the "provided_file_name" field.
func ProvidedFileNameLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldProvidedFileName, v))
}

// ProvidedFileNameContains applies the Contains predicate on the "provided_file_name" field.
func ProvidedFileNameContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldProvidedFileName, v))
}

// ProvidedFileNameHasPrefix applies the HasPrefix predicate on the "provided_file_name" field.
func ProvidedFileNameHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldProvidedFileName, v))
}

// ProvidedFileNameHasSuffix applies the HasSuffix predicate on the "provided_file_name" field.
func ProvidedFileNameHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldProvidedFileName, v))
}

// ProvidedFileNameEqualFold applies the EqualFold predicate on the "provided_file_name" field.
func ProvidedFileNameEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldProvidedFileName, v))
}

// ProvidedFileNameContainsFold applies the ContainsFold predicate on the "provided_file_name" field.
func ProvidedFileNameContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldProvidedFileName, v))
}

// ProvidedFileExtensionEQ applies the EQ predicate on the "provided_file_extension" field.
func ProvidedFileExtensionEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldProvidedFileExtension, v))
}

// ProvidedFileExtensionNEQ applies the NEQ predicate on the "provided_file_extension" field.
func ProvidedFileExtensionNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldProvidedFileExtension, v))
}

// ProvidedFileExtensionIn applies the In predicate on the "provided_file_extension" field.
func ProvidedFileExtensionIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldProvidedFileExtension, vs...))
}

// ProvidedFileExtensionNotIn applies the NotIn predicate on the "provided_file_extension" field.
func ProvidedFileExtensionNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldProvidedFileExtension, vs...))
}

// ProvidedFileExtensionGT applies the GT predicate on the "provided_file_extension" field.
func ProvidedFileExtensionGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldProvidedFileExtension, v))
}

// ProvidedFileExtensionGTE applies the GTE predicate on the "provided_file_extension" field.
func ProvidedFileExtensionGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldProvidedFileExtension, v))
}

// ProvidedFileExtensionLT applies the LT predicate on the "provided_file_extension" field.
func ProvidedFileExtensionLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldProvidedFileExtension, v))
}

// ProvidedFileExtensionLTE applies the LTE predicate on the "provided_file_extension" field.
func ProvidedFileExtensionLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldProvidedFileExtension, v))
}

// ProvidedFileExtensionContains applies the Contains predicate on the "provided_file_extension" field.
func ProvidedFileExtensionContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldProvidedFileExtension, v))
}

// ProvidedFileExtensionHasPrefix applies the HasPrefix predicate on the "provided_file_extension" field.
func ProvidedFileExtensionHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldProvidedFileExtension, v))
}

// ProvidedFileExtensionHasSuffix applies the HasSuffix predicate on the "provided_file_extension" field.
func ProvidedFileExtensionHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldProvidedFileExtension, v))
}

// ProvidedFileExtensionEqualFold applies the EqualFold predicate on the "provided_file_extension" field.
func ProvidedFileExtensionEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldProvidedFileExtension, v))
}

// ProvidedFileExtensionContainsFold applies the ContainsFold predicate on the "provided_file_extension" field.
func ProvidedFileExtensionContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldProvidedFileExtension, v))
}

// ProvidedFileSizeEQ applies the EQ predicate on the "provided_file_size" field.
func ProvidedFileSizeEQ(v int64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldProvidedFileSize, v))
}

// ProvidedFileSizeNEQ applies the NEQ predicate on the "provided_file_size" field.
func ProvidedFileSizeNEQ(v int64) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldProvidedFileSize, v))
}

// ProvidedFileSizeIn applies the In predicate on the "provided_file_size" field.
func ProvidedFileSizeIn(vs ...int64) predicate.File {
	return predicate.File(sql.FieldIn(FieldProvidedFileSize, vs...))
}

// ProvidedFileSizeNotIn applies the NotIn predicate on the "provided_file_size" field.
func ProvidedFileSizeNotIn(vs ...int64) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldProvidedFileSize, vs...))
}

// ProvidedFileSizeGT applies the GT predicate on the "provided_file_size" field.
func ProvidedFileSizeGT(v int64) predicate.File {
	return predicate.File(sql.FieldGT(FieldProvidedFileSize, v))
}

// ProvidedFileSizeGTE applies the GTE predicate on the "provided_file_size" field.
func ProvidedFileSizeGTE(v int64) predicate.File {
	return predicate.File(sql.FieldGTE(FieldProvidedFileSize, v))
}

// ProvidedFileSizeLT applies the LT predicate on the "provided_file_size" field.
func ProvidedFileSizeLT(v int64) predicate.File {
	return predicate.File(sql.FieldLT(FieldProvidedFileSize, v))
}

// ProvidedFileSizeLTE applies the LTE predicate on the "provided_file_size" field.
func ProvidedFileSizeLTE(v int64) predicate.File {
	return predicate.File(sql.FieldLTE(FieldProvidedFileSize, v))
}

// ProvidedFileSizeIsNil applies the IsNil predicate on the "provided_file_size" field.
func ProvidedFileSizeIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldProvidedFileSize))
}

// ProvidedFileSizeNotNil applies the NotNil predicate on the "provided_file_size" field.
func ProvidedFileSizeNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldProvidedFileSize))
}

// PersistedFileSizeEQ applies the EQ predicate on the "persisted_file_size" field.
func PersistedFileSizeEQ(v int64) predicate.File {
	return predicate.File(sql.FieldEQ(FieldPersistedFileSize, v))
}

// PersistedFileSizeNEQ applies the NEQ predicate on the "persisted_file_size" field.
func PersistedFileSizeNEQ(v int64) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldPersistedFileSize, v))
}

// PersistedFileSizeIn applies the In predicate on the "persisted_file_size" field.
func PersistedFileSizeIn(vs ...int64) predicate.File {
	return predicate.File(sql.FieldIn(FieldPersistedFileSize, vs...))
}

// PersistedFileSizeNotIn applies the NotIn predicate on the "persisted_file_size" field.
func PersistedFileSizeNotIn(vs ...int64) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldPersistedFileSize, vs...))
}

// PersistedFileSizeGT applies the GT predicate on the "persisted_file_size" field.
func PersistedFileSizeGT(v int64) predicate.File {
	return predicate.File(sql.FieldGT(FieldPersistedFileSize, v))
}

// PersistedFileSizeGTE applies the GTE predicate on the "persisted_file_size" field.
func PersistedFileSizeGTE(v int64) predicate.File {
	return predicate.File(sql.FieldGTE(FieldPersistedFileSize, v))
}

// PersistedFileSizeLT applies the LT predicate on the "persisted_file_size" field.
func PersistedFileSizeLT(v int64) predicate.File {
	return predicate.File(sql.FieldLT(FieldPersistedFileSize, v))
}

// PersistedFileSizeLTE applies the LTE predicate on the "persisted_file_size" field.
func PersistedFileSizeLTE(v int64) predicate.File {
	return predicate.File(sql.FieldLTE(FieldPersistedFileSize, v))
}

// PersistedFileSizeIsNil applies the IsNil predicate on the "persisted_file_size" field.
func PersistedFileSizeIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldPersistedFileSize))
}

// PersistedFileSizeNotNil applies the NotNil predicate on the "persisted_file_size" field.
func PersistedFileSizeNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldPersistedFileSize))
}

// DetectedMimeTypeEQ applies the EQ predicate on the "detected_mime_type" field.
func DetectedMimeTypeEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldDetectedMimeType, v))
}

// DetectedMimeTypeNEQ applies the NEQ predicate on the "detected_mime_type" field.
func DetectedMimeTypeNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldDetectedMimeType, v))
}

// DetectedMimeTypeIn applies the In predicate on the "detected_mime_type" field.
func DetectedMimeTypeIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldDetectedMimeType, vs...))
}

// DetectedMimeTypeNotIn applies the NotIn predicate on the "detected_mime_type" field.
func DetectedMimeTypeNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldDetectedMimeType, vs...))
}

// DetectedMimeTypeGT applies the GT predicate on the "detected_mime_type" field.
func DetectedMimeTypeGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldDetectedMimeType, v))
}

// DetectedMimeTypeGTE applies the GTE predicate on the "detected_mime_type" field.
func DetectedMimeTypeGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldDetectedMimeType, v))
}

// DetectedMimeTypeLT applies the LT predicate on the "detected_mime_type" field.
func DetectedMimeTypeLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldDetectedMimeType, v))
}

// DetectedMimeTypeLTE applies the LTE predicate on the "detected_mime_type" field.
func DetectedMimeTypeLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldDetectedMimeType, v))
}

// DetectedMimeTypeContains applies the Contains predicate on the "detected_mime_type" field.
func DetectedMimeTypeContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldDetectedMimeType, v))
}

// DetectedMimeTypeHasPrefix applies the HasPrefix predicate on the "detected_mime_type" field.
func DetectedMimeTypeHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldDetectedMimeType, v))
}

// DetectedMimeTypeHasSuffix applies the HasSuffix predicate on the "detected_mime_type" field.
func DetectedMimeTypeHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldDetectedMimeType, v))
}

// DetectedMimeTypeIsNil applies the IsNil predicate on the "detected_mime_type" field.
func DetectedMimeTypeIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldDetectedMimeType))
}

// DetectedMimeTypeNotNil applies the NotNil predicate on the "detected_mime_type" field.
func DetectedMimeTypeNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldDetectedMimeType))
}

// DetectedMimeTypeEqualFold applies the EqualFold predicate on the "detected_mime_type" field.
func DetectedMimeTypeEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldDetectedMimeType, v))
}

// DetectedMimeTypeContainsFold applies the ContainsFold predicate on the "detected_mime_type" field.
func DetectedMimeTypeContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldDetectedMimeType, v))
}

// Md5HashEQ applies the EQ predicate on the "md5_hash" field.
func Md5HashEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldMd5Hash, v))
}

// Md5HashNEQ applies the NEQ predicate on the "md5_hash" field.
func Md5HashNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldMd5Hash, v))
}

// Md5HashIn applies the In predicate on the "md5_hash" field.
func Md5HashIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldMd5Hash, vs...))
}

// Md5HashNotIn applies the NotIn predicate on the "md5_hash" field.
func Md5HashNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldMd5Hash, vs...))
}

// Md5HashGT applies the GT predicate on the "md5_hash" field.
func Md5HashGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldMd5Hash, v))
}

// Md5HashGTE applies the GTE predicate on the "md5_hash" field.
func Md5HashGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldMd5Hash, v))
}

// Md5HashLT applies the LT predicate on the "md5_hash" field.
func Md5HashLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldMd5Hash, v))
}

// Md5HashLTE applies the LTE predicate on the "md5_hash" field.
func Md5HashLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldMd5Hash, v))
}

// Md5HashContains applies the Contains predicate on the "md5_hash" field.
func Md5HashContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldMd5Hash, v))
}

// Md5HashHasPrefix applies the HasPrefix predicate on the "md5_hash" field.
func Md5HashHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldMd5Hash, v))
}

// Md5HashHasSuffix applies the HasSuffix predicate on the "md5_hash" field.
func Md5HashHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldMd5Hash, v))
}

// Md5HashIsNil applies the IsNil predicate on the "md5_hash" field.
func Md5HashIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldMd5Hash))
}

// Md5HashNotNil applies the NotNil predicate on the "md5_hash" field.
func Md5HashNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldMd5Hash))
}

// Md5HashEqualFold applies the EqualFold predicate on the "md5_hash" field.
func Md5HashEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldMd5Hash, v))
}

// Md5HashContainsFold applies the ContainsFold predicate on the "md5_hash" field.
func Md5HashContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldMd5Hash, v))
}

// DetectedContentTypeEQ applies the EQ predicate on the "detected_content_type" field.
func DetectedContentTypeEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldDetectedContentType, v))
}

// DetectedContentTypeNEQ applies the NEQ predicate on the "detected_content_type" field.
func DetectedContentTypeNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldDetectedContentType, v))
}

// DetectedContentTypeIn applies the In predicate on the "detected_content_type" field.
func DetectedContentTypeIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldDetectedContentType, vs...))
}

// DetectedContentTypeNotIn applies the NotIn predicate on the "detected_content_type" field.
func DetectedContentTypeNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldDetectedContentType, vs...))
}

// DetectedContentTypeGT applies the GT predicate on the "detected_content_type" field.
func DetectedContentTypeGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldDetectedContentType, v))
}

// DetectedContentTypeGTE applies the GTE predicate on the "detected_content_type" field.
func DetectedContentTypeGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldDetectedContentType, v))
}

// DetectedContentTypeLT applies the LT predicate on the "detected_content_type" field.
func DetectedContentTypeLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldDetectedContentType, v))
}

// DetectedContentTypeLTE applies the LTE predicate on the "detected_content_type" field.
func DetectedContentTypeLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldDetectedContentType, v))
}

// DetectedContentTypeContains applies the Contains predicate on the "detected_content_type" field.
func DetectedContentTypeContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldDetectedContentType, v))
}

// DetectedContentTypeHasPrefix applies the HasPrefix predicate on the "detected_content_type" field.
func DetectedContentTypeHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldDetectedContentType, v))
}

// DetectedContentTypeHasSuffix applies the HasSuffix predicate on the "detected_content_type" field.
func DetectedContentTypeHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldDetectedContentType, v))
}

// DetectedContentTypeEqualFold applies the EqualFold predicate on the "detected_content_type" field.
func DetectedContentTypeEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldDetectedContentType, v))
}

// DetectedContentTypeContainsFold applies the ContainsFold predicate on the "detected_content_type" field.
func DetectedContentTypeContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldDetectedContentType, v))
}

// StoreKeyEQ applies the EQ predicate on the "store_key" field.
func StoreKeyEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldStoreKey, v))
}

// StoreKeyNEQ applies the NEQ predicate on the "store_key" field.
func StoreKeyNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldStoreKey, v))
}

// StoreKeyIn applies the In predicate on the "store_key" field.
func StoreKeyIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldStoreKey, vs...))
}

// StoreKeyNotIn applies the NotIn predicate on the "store_key" field.
func StoreKeyNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldStoreKey, vs...))
}

// StoreKeyGT applies the GT predicate on the "store_key" field.
func StoreKeyGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldStoreKey, v))
}

// StoreKeyGTE applies the GTE predicate on the "store_key" field.
func StoreKeyGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldStoreKey, v))
}

// StoreKeyLT applies the LT predicate on the "store_key" field.
func StoreKeyLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldStoreKey, v))
}

// StoreKeyLTE applies the LTE predicate on the "store_key" field.
func StoreKeyLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldStoreKey, v))
}

// StoreKeyContains applies the Contains predicate on the "store_key" field.
func StoreKeyContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldStoreKey, v))
}

// StoreKeyHasPrefix applies the HasPrefix predicate on the "store_key" field.
func StoreKeyHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldStoreKey, v))
}

// StoreKeyHasSuffix applies the HasSuffix predicate on the "store_key" field.
func StoreKeyHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldStoreKey, v))
}

// StoreKeyIsNil applies the IsNil predicate on the "store_key" field.
func StoreKeyIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldStoreKey))
}

// StoreKeyNotNil applies the NotNil predicate on the "store_key" field.
func StoreKeyNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldStoreKey))
}

// StoreKeyEqualFold applies the EqualFold predicate on the "store_key" field.
func StoreKeyEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldStoreKey, v))
}

// StoreKeyContainsFold applies the ContainsFold predicate on the "store_key" field.
func StoreKeyContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldStoreKey, v))
}

// CategoryTypeEQ applies the EQ predicate on the "category_type" field.
func CategoryTypeEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldCategoryType, v))
}

// CategoryTypeNEQ applies the NEQ predicate on the "category_type" field.
func CategoryTypeNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldCategoryType, v))
}

// CategoryTypeIn applies the In predicate on the "category_type" field.
func CategoryTypeIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldCategoryType, vs...))
}

// CategoryTypeNotIn applies the NotIn predicate on the "category_type" field.
func CategoryTypeNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldCategoryType, vs...))
}

// CategoryTypeGT applies the GT predicate on the "category_type" field.
func CategoryTypeGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldCategoryType, v))
}

// CategoryTypeGTE applies the GTE predicate on the "category_type" field.
func CategoryTypeGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldCategoryType, v))
}

// CategoryTypeLT applies the LT predicate on the "category_type" field.
func CategoryTypeLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldCategoryType, v))
}

// CategoryTypeLTE applies the LTE predicate on the "category_type" field.
func CategoryTypeLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldCategoryType, v))
}

// CategoryTypeContains applies the Contains predicate on the "category_type" field.
func CategoryTypeContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldCategoryType, v))
}

// CategoryTypeHasPrefix applies the HasPrefix predicate on the "category_type" field.
func CategoryTypeHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldCategoryType, v))
}

// CategoryTypeHasSuffix applies the HasSuffix predicate on the "category_type" field.
func CategoryTypeHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldCategoryType, v))
}

// CategoryTypeIsNil applies the IsNil predicate on the "category_type" field.
func CategoryTypeIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldCategoryType))
}

// CategoryTypeNotNil applies the NotNil predicate on the "category_type" field.
func CategoryTypeNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldCategoryType))
}

// CategoryTypeEqualFold applies the EqualFold predicate on the "category_type" field.
func CategoryTypeEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldCategoryType, v))
}

// CategoryTypeContainsFold applies the ContainsFold predicate on the "category_type" field.
func CategoryTypeContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldCategoryType, v))
}

// URIEQ applies the EQ predicate on the "uri" field.
func URIEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldURI, v))
}

// URINEQ applies the NEQ predicate on the "uri" field.
func URINEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldURI, v))
}

// URIIn applies the In predicate on the "uri" field.
func URIIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldURI, vs...))
}

// URINotIn applies the NotIn predicate on the "uri" field.
func URINotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldURI, vs...))
}

// URIGT applies the GT predicate on the "uri" field.
func URIGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldURI, v))
}

// URIGTE applies the GTE predicate on the "uri" field.
func URIGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldURI, v))
}

// URILT applies the LT predicate on the "uri" field.
func URILT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldURI, v))
}

// URILTE applies the LTE predicate on the "uri" field.
func URILTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldURI, v))
}

// URIContains applies the Contains predicate on the "uri" field.
func URIContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldURI, v))
}

// URIHasPrefix applies the HasPrefix predicate on the "uri" field.
func URIHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldURI, v))
}

// URIHasSuffix applies the HasSuffix predicate on the "uri" field.
func URIHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldURI, v))
}

// URIIsNil applies the IsNil predicate on the "uri" field.
func URIIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldURI))
}

// URINotNil applies the NotNil predicate on the "uri" field.
func URINotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldURI))
}

// URIEqualFold applies the EqualFold predicate on the "uri" field.
func URIEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldURI, v))
}

// URIContainsFold applies the ContainsFold predicate on the "uri" field.
func URIContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldURI, v))
}

// StorageSchemeEQ applies the EQ predicate on the "storage_scheme" field.
func StorageSchemeEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldStorageScheme, v))
}

// StorageSchemeNEQ applies the NEQ predicate on the "storage_scheme" field.
func StorageSchemeNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldStorageScheme, v))
}

// StorageSchemeIn applies the In predicate on the "storage_scheme" field.
func StorageSchemeIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldStorageScheme, vs...))
}

// StorageSchemeNotIn applies the NotIn predicate on the "storage_scheme" field.
func StorageSchemeNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldStorageScheme, vs...))
}

// StorageSchemeGT applies the GT predicate on the "storage_scheme" field.
func StorageSchemeGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldStorageScheme, v))
}

// StorageSchemeGTE applies the GTE predicate on the "storage_scheme" field.
func StorageSchemeGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldStorageScheme, v))
}

// StorageSchemeLT applies the LT predicate on the "storage_scheme" field.
func StorageSchemeLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldStorageScheme, v))
}

// StorageSchemeLTE applies the LTE predicate on the "storage_scheme" field.
func StorageSchemeLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldStorageScheme, v))
}

// StorageSchemeContains applies the Contains predicate on the "storage_scheme" field.
func StorageSchemeContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldStorageScheme, v))
}

// StorageSchemeHasPrefix applies the HasPrefix predicate on the "storage_scheme" field.
func StorageSchemeHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldStorageScheme, v))
}

// StorageSchemeHasSuffix applies the HasSuffix predicate on the "storage_scheme" field.
func StorageSchemeHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldStorageScheme, v))
}

// StorageSchemeIsNil applies the IsNil predicate on the "storage_scheme" field.
func StorageSchemeIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldStorageScheme))
}

// StorageSchemeNotNil applies the NotNil predicate on the "storage_scheme" field.
func StorageSchemeNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldStorageScheme))
}

// StorageSchemeEqualFold applies the EqualFold predicate on the "storage_scheme" field.
func StorageSchemeEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldStorageScheme, v))
}

// StorageSchemeContainsFold applies the ContainsFold predicate on the "storage_scheme" field.
func StorageSchemeContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldStorageScheme, v))
}

// StorageVolumeEQ applies the EQ predicate on the "storage_volume" field.
func StorageVolumeEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldStorageVolume, v))
}

// StorageVolumeNEQ applies the NEQ predicate on the "storage_volume" field.
func StorageVolumeNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldStorageVolume, v))
}

// StorageVolumeIn applies the In predicate on the "storage_volume" field.
func StorageVolumeIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldStorageVolume, vs...))
}

// StorageVolumeNotIn applies the NotIn predicate on the "storage_volume" field.
func StorageVolumeNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldStorageVolume, vs...))
}

// StorageVolumeGT applies the GT predicate on the "storage_volume" field.
func StorageVolumeGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldStorageVolume, v))
}

// StorageVolumeGTE applies the GTE predicate on the "storage_volume" field.
func StorageVolumeGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldStorageVolume, v))
}

// StorageVolumeLT applies the LT predicate on the "storage_volume" field.
func StorageVolumeLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldStorageVolume, v))
}

// StorageVolumeLTE applies the LTE predicate on the "storage_volume" field.
func StorageVolumeLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldStorageVolume, v))
}

// StorageVolumeContains applies the Contains predicate on the "storage_volume" field.
func StorageVolumeContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldStorageVolume, v))
}

// StorageVolumeHasPrefix applies the HasPrefix predicate on the "storage_volume" field.
func StorageVolumeHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldStorageVolume, v))
}

// StorageVolumeHasSuffix applies the HasSuffix predicate on the "storage_volume" field.
func StorageVolumeHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldStorageVolume, v))
}

// StorageVolumeIsNil applies the IsNil predicate on the "storage_volume" field.
func StorageVolumeIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldStorageVolume))
}

// StorageVolumeNotNil applies the NotNil predicate on the "storage_volume" field.
func StorageVolumeNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldStorageVolume))
}

// StorageVolumeEqualFold applies the EqualFold predicate on the "storage_volume" field.
func StorageVolumeEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldStorageVolume, v))
}

// StorageVolumeContainsFold applies the ContainsFold predicate on the "storage_volume" field.
func StorageVolumeContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldStorageVolume, v))
}

// StoragePathEQ applies the EQ predicate on the "storage_path" field.
func StoragePathEQ(v string) predicate.File {
	return predicate.File(sql.FieldEQ(FieldStoragePath, v))
}

// StoragePathNEQ applies the NEQ predicate on the "storage_path" field.
func StoragePathNEQ(v string) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldStoragePath, v))
}

// StoragePathIn applies the In predicate on the "storage_path" field.
func StoragePathIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldIn(FieldStoragePath, vs...))
}

// StoragePathNotIn applies the NotIn predicate on the "storage_path" field.
func StoragePathNotIn(vs ...string) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldStoragePath, vs...))
}

// StoragePathGT applies the GT predicate on the "storage_path" field.
func StoragePathGT(v string) predicate.File {
	return predicate.File(sql.FieldGT(FieldStoragePath, v))
}

// StoragePathGTE applies the GTE predicate on the "storage_path" field.
func StoragePathGTE(v string) predicate.File {
	return predicate.File(sql.FieldGTE(FieldStoragePath, v))
}

// StoragePathLT applies the LT predicate on the "storage_path" field.
func StoragePathLT(v string) predicate.File {
	return predicate.File(sql.FieldLT(FieldStoragePath, v))
}

// StoragePathLTE applies the LTE predicate on the "storage_path" field.
func StoragePathLTE(v string) predicate.File {
	return predicate.File(sql.FieldLTE(FieldStoragePath, v))
}

// StoragePathContains applies the Contains predicate on the "storage_path" field.
func StoragePathContains(v string) predicate.File {
	return predicate.File(sql.FieldContains(FieldStoragePath, v))
}

// StoragePathHasPrefix applies the HasPrefix predicate on the "storage_path" field.
func StoragePathHasPrefix(v string) predicate.File {
	return predicate.File(sql.FieldHasPrefix(FieldStoragePath, v))
}

// StoragePathHasSuffix applies the HasSuffix predicate on the "storage_path" field.
func StoragePathHasSuffix(v string) predicate.File {
	return predicate.File(sql.FieldHasSuffix(FieldStoragePath, v))
}

// StoragePathIsNil applies the IsNil predicate on the "storage_path" field.
func StoragePathIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldStoragePath))
}

// StoragePathNotNil applies the NotNil predicate on the "storage_path" field.
func StoragePathNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldStoragePath))
}

// StoragePathEqualFold applies the EqualFold predicate on the "storage_path" field.
func StoragePathEqualFold(v string) predicate.File {
	return predicate.File(sql.FieldEqualFold(FieldStoragePath, v))
}

// StoragePathContainsFold applies the ContainsFold predicate on the "storage_path" field.
func StoragePathContainsFold(v string) predicate.File {
	return predicate.File(sql.FieldContainsFold(FieldStoragePath, v))
}

// FileContentsEQ applies the EQ predicate on the "file_contents" field.
func FileContentsEQ(v []byte) predicate.File {
	return predicate.File(sql.FieldEQ(FieldFileContents, v))
}

// FileContentsNEQ applies the NEQ predicate on the "file_contents" field.
func FileContentsNEQ(v []byte) predicate.File {
	return predicate.File(sql.FieldNEQ(FieldFileContents, v))
}

// FileContentsIn applies the In predicate on the "file_contents" field.
func FileContentsIn(vs ...[]byte) predicate.File {
	return predicate.File(sql.FieldIn(FieldFileContents, vs...))
}

// FileContentsNotIn applies the NotIn predicate on the "file_contents" field.
func FileContentsNotIn(vs ...[]byte) predicate.File {
	return predicate.File(sql.FieldNotIn(FieldFileContents, vs...))
}

// FileContentsGT applies the GT predicate on the "file_contents" field.
func FileContentsGT(v []byte) predicate.File {
	return predicate.File(sql.FieldGT(FieldFileContents, v))
}

// FileContentsGTE applies the GTE predicate on the "file_contents" field.
func FileContentsGTE(v []byte) predicate.File {
	return predicate.File(sql.FieldGTE(FieldFileContents, v))
}

// FileContentsLT applies the LT predicate on the "file_contents" field.
func FileContentsLT(v []byte) predicate.File {
	return predicate.File(sql.FieldLT(FieldFileContents, v))
}

// FileContentsLTE applies the LTE predicate on the "file_contents" field.
func FileContentsLTE(v []byte) predicate.File {
	return predicate.File(sql.FieldLTE(FieldFileContents, v))
}

// FileContentsIsNil applies the IsNil predicate on the "file_contents" field.
func FileContentsIsNil() predicate.File {
	return predicate.File(sql.FieldIsNull(FieldFileContents))
}

// FileContentsNotNil applies the NotNil predicate on the "file_contents" field.
func FileContentsNotNil() predicate.File {
	return predicate.File(sql.FieldNotNull(FieldFileContents))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OrganizationTable, OrganizationPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrganizationFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Organization) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newOrganizationStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrganizationFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, GroupTable, GroupPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newGroupStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContact applies the HasEdge predicate on the "contact" edge.
func HasContact() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ContactTable, ContactPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Contact
		step.Edge.Schema = schemaConfig.ContactFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactWith applies the HasEdge predicate on the "contact" edge with a given conditions (other predicates).
func HasContactWith(preds ...predicate.Contact) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newContactStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Contact
		step.Edge.Schema = schemaConfig.ContactFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEntity applies the HasEdge predicate on the "entity" edge.
func HasEntity() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EntityTable, EntityPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Entity
		step.Edge.Schema = schemaConfig.EntityFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntityWith applies the HasEdge predicate on the "entity" edge with a given conditions (other predicates).
func HasEntityWith(preds ...predicate.Entity) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newEntityStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Entity
		step.Edge.Schema = schemaConfig.EntityFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsersetting applies the HasEdge predicate on the "usersetting" edge.
func HasUsersetting() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, UsersettingTable, UsersettingPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.UserSetting
		step.Edge.Schema = schemaConfig.UserSettingFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersettingWith applies the HasEdge predicate on the "usersetting" edge with a given conditions (other predicates).
func HasUsersettingWith(preds ...predicate.UserSetting) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newUsersettingStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.UserSetting
		step.Edge.Schema = schemaConfig.UserSettingFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganizationsetting applies the HasEdge predicate on the "organizationsetting" edge.
func HasOrganizationsetting() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OrganizationsettingTable, OrganizationsettingPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrganizationSetting
		step.Edge.Schema = schemaConfig.OrganizationSettingFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationsettingWith applies the HasEdge predicate on the "organizationsetting" edge with a given conditions (other predicates).
func HasOrganizationsettingWith(preds ...predicate.OrganizationSetting) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newOrganizationsettingStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.OrganizationSetting
		step.Edge.Schema = schemaConfig.OrganizationSettingFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTemplate applies the HasEdge predicate on the "template" edge.
func HasTemplate() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TemplateTable, TemplatePrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Template
		step.Edge.Schema = schemaConfig.TemplateFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTemplateWith applies the HasEdge predicate on the "template" edge with a given conditions (other predicates).
func HasTemplateWith(preds ...predicate.Template) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newTemplateStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Template
		step.Edge.Schema = schemaConfig.TemplateFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDocumentdata applies the HasEdge predicate on the "documentdata" edge.
func HasDocumentdata() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, DocumentdataTable, DocumentdataPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.DocumentData
		step.Edge.Schema = schemaConfig.DocumentDataFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDocumentdataWith applies the HasEdge predicate on the "documentdata" edge with a given conditions (other predicates).
func HasDocumentdataWith(preds ...predicate.DocumentData) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newDocumentdataStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.DocumentData
		step.Edge.Schema = schemaConfig.DocumentDataFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, EventsTable, EventsPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.FileEvents
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newEventsStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.FileEvents
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProgram applies the HasEdge predicate on the "program" edge.
func HasProgram() predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ProgramTable, ProgramPrimaryKey...),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramFiles
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProgramWith applies the HasEdge predicate on the "program" edge with a given conditions (other predicates).
func HasProgramWith(preds ...predicate.Program) predicate.File {
	return predicate.File(func(s *sql.Selector) {
		step := newProgramStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramFiles
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.File) predicate.File {
	return predicate.File(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.File) predicate.File {
	return predicate.File(sql.NotPredicates(p))
}
