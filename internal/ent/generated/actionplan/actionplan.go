// Code generated by ent, DO NOT EDIT.

package actionplan

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the actionplan type in the database.
	Label = "action_plan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedByID holds the string denoting the created_by_id field in the database.
	FieldCreatedByID = "created_by_id"
	// FieldUpdatedByID holds the string denoting the updated_by_id field in the database.
	FieldUpdatedByID = "updated_by_id"
	// FieldCreatedByUserID holds the string denoting the created_by_user_id field in the database.
	FieldCreatedByUserID = "created_by_user_id"
	// FieldUpdatedByUserID holds the string denoting the updated_by_user_id field in the database.
	FieldUpdatedByUserID = "updated_by_user_id"
	// FieldCreatedByServiceID holds the string denoting the created_by_service_id field in the database.
	FieldCreatedByServiceID = "created_by_service_id"
	// FieldUpdatedByServiceID holds the string denoting the updated_by_service_id field in the database.
	FieldUpdatedByServiceID = "updated_by_service_id"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedByID holds the string denoting the deleted_by_id field in the database.
	FieldDeletedByID = "deleted_by_id"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDueDate holds the string denoting the due_date field in the database.
	FieldDueDate = "due_date"
	// FieldPriority holds the string denoting the priority field in the database.
	FieldPriority = "priority"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// FieldDetails holds the string denoting the details field in the database.
	FieldDetails = "details"
	// EdgeCreatedByUser holds the string denoting the created_by_user edge name in mutations.
	EdgeCreatedByUser = "created_by_user"
	// EdgeUpdatedByUser holds the string denoting the updated_by_user edge name in mutations.
	EdgeUpdatedByUser = "updated_by_user"
	// EdgeCreatedByService holds the string denoting the created_by_service edge name in mutations.
	EdgeCreatedByService = "created_by_service"
	// EdgeUpdatedByService holds the string denoting the updated_by_service edge name in mutations.
	EdgeUpdatedByService = "updated_by_service"
	// EdgeStandard holds the string denoting the standard edge name in mutations.
	EdgeStandard = "standard"
	// EdgeRisk holds the string denoting the risk edge name in mutations.
	EdgeRisk = "risk"
	// EdgeControl holds the string denoting the control edge name in mutations.
	EdgeControl = "control"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeProgram holds the string denoting the program edge name in mutations.
	EdgeProgram = "program"
	// Table holds the table name of the actionplan in the database.
	Table = "action_plans"
	// CreatedByUserTable is the table that holds the created_by_user relation/edge.
	CreatedByUserTable = "action_plans"
	// CreatedByUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CreatedByUserInverseTable = "users"
	// CreatedByUserColumn is the table column denoting the created_by_user relation/edge.
	CreatedByUserColumn = "created_by_user_id"
	// UpdatedByUserTable is the table that holds the updated_by_user relation/edge.
	UpdatedByUserTable = "action_plans"
	// UpdatedByUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UpdatedByUserInverseTable = "users"
	// UpdatedByUserColumn is the table column denoting the updated_by_user relation/edge.
	UpdatedByUserColumn = "updated_by_user_id"
	// CreatedByServiceTable is the table that holds the created_by_service relation/edge.
	CreatedByServiceTable = "action_plans"
	// CreatedByServiceInverseTable is the table name for the APIToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	CreatedByServiceInverseTable = "api_tokens"
	// CreatedByServiceColumn is the table column denoting the created_by_service relation/edge.
	CreatedByServiceColumn = "created_by_service_id"
	// UpdatedByServiceTable is the table that holds the updated_by_service relation/edge.
	UpdatedByServiceTable = "action_plans"
	// UpdatedByServiceInverseTable is the table name for the APIToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	UpdatedByServiceInverseTable = "api_tokens"
	// UpdatedByServiceColumn is the table column denoting the updated_by_service relation/edge.
	UpdatedByServiceColumn = "updated_by_service_id"
	// StandardTable is the table that holds the standard relation/edge. The primary key declared below.
	StandardTable = "standard_action_plans"
	// StandardInverseTable is the table name for the Standard entity.
	// It exists in this package in order to avoid circular dependency with the "standard" package.
	StandardInverseTable = "standards"
	// RiskTable is the table that holds the risk relation/edge. The primary key declared below.
	RiskTable = "risk_action_plans"
	// RiskInverseTable is the table name for the Risk entity.
	// It exists in this package in order to avoid circular dependency with the "risk" package.
	RiskInverseTable = "risks"
	// ControlTable is the table that holds the control relation/edge. The primary key declared below.
	ControlTable = "control_action_plans"
	// ControlInverseTable is the table name for the Control entity.
	// It exists in this package in order to avoid circular dependency with the "control" package.
	ControlInverseTable = "controls"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "user_action_plans"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// ProgramTable is the table that holds the program relation/edge. The primary key declared below.
	ProgramTable = "program_action_plans"
	// ProgramInverseTable is the table name for the Program entity.
	// It exists in this package in order to avoid circular dependency with the "program" package.
	ProgramInverseTable = "programs"
)

// Columns holds all SQL columns for actionplan fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedByID,
	FieldUpdatedByID,
	FieldCreatedByUserID,
	FieldUpdatedByUserID,
	FieldCreatedByServiceID,
	FieldUpdatedByServiceID,
	FieldDeletedAt,
	FieldDeletedByID,
	FieldMappingID,
	FieldTags,
	FieldName,
	FieldDescription,
	FieldStatus,
	FieldDueDate,
	FieldPriority,
	FieldSource,
	FieldDetails,
}

var (
	// StandardPrimaryKey and StandardColumn2 are the table columns denoting the
	// primary key for the standard relation (M2M).
	StandardPrimaryKey = []string{"standard_id", "action_plan_id"}
	// RiskPrimaryKey and RiskColumn2 are the table columns denoting the
	// primary key for the risk relation (M2M).
	RiskPrimaryKey = []string{"risk_id", "action_plan_id"}
	// ControlPrimaryKey and ControlColumn2 are the table columns denoting the
	// primary key for the control relation (M2M).
	ControlPrimaryKey = []string{"control_id", "action_plan_id"}
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"user_id", "action_plan_id"}
	// ProgramPrimaryKey and ProgramColumn2 are the table columns denoting the
	// primary key for the program relation (M2M).
	ProgramPrimaryKey = []string{"program_id", "action_plan_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [2]ent.Hook
	Interceptors [2]ent.Interceptor
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the ActionPlan queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedByID orders the results by the created_by_id field.
func ByCreatedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByID, opts...).ToFunc()
}

// ByUpdatedByID orders the results by the updated_by_id field.
func ByUpdatedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedByID, opts...).ToFunc()
}

// ByCreatedByUserID orders the results by the created_by_user_id field.
func ByCreatedByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByUserID, opts...).ToFunc()
}

// ByUpdatedByUserID orders the results by the updated_by_user_id field.
func ByUpdatedByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedByUserID, opts...).ToFunc()
}

// ByCreatedByServiceID orders the results by the created_by_service_id field.
func ByCreatedByServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedByServiceID, opts...).ToFunc()
}

// ByUpdatedByServiceID orders the results by the updated_by_service_id field.
func ByUpdatedByServiceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedByServiceID, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedByID orders the results by the deleted_by_id field.
func ByDeletedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedByID, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDueDate orders the results by the due_date field.
func ByDueDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDueDate, opts...).ToFunc()
}

// ByPriority orders the results by the priority field.
func ByPriority(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriority, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}

// ByCreatedByUserField orders the results by created_by_user field.
func ByCreatedByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdatedByUserField orders the results by updated_by_user field.
func ByUpdatedByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedByUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCreatedByServiceField orders the results by created_by_service field.
func ByCreatedByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCreatedByServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByUpdatedByServiceField orders the results by updated_by_service field.
func ByUpdatedByServiceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpdatedByServiceStep(), sql.OrderByField(field, opts...))
	}
}

// ByStandardCount orders the results by standard count.
func ByStandardCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStandardStep(), opts...)
	}
}

// ByStandard orders the results by standard terms.
func ByStandard(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStandardStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRiskCount orders the results by risk count.
func ByRiskCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRiskStep(), opts...)
	}
}

// ByRisk orders the results by risk terms.
func ByRisk(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRiskStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByControlCount orders the results by control count.
func ByControlCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newControlStep(), opts...)
	}
}

// ByControl orders the results by control terms.
func ByControl(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newControlStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUserCount orders the results by user count.
func ByUserCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUserStep(), opts...)
	}
}

// ByUser orders the results by user terms.
func ByUser(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProgramCount orders the results by program count.
func ByProgramCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProgramStep(), opts...)
	}
}

// ByProgram orders the results by program terms.
func ByProgram(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProgramStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newCreatedByUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatedByUserTable, CreatedByUserColumn),
	)
}
func newUpdatedByUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedByUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByUserTable, UpdatedByUserColumn),
	)
}
func newCreatedByServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CreatedByServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CreatedByServiceTable, CreatedByServiceColumn),
	)
}
func newUpdatedByServiceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpdatedByServiceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UpdatedByServiceTable, UpdatedByServiceColumn),
	)
}
func newStandardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StandardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, StandardTable, StandardPrimaryKey...),
	)
}
func newRiskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RiskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, RiskTable, RiskPrimaryKey...),
	)
}
func newControlStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ControlInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ControlTable, ControlPrimaryKey...),
	)
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, UserTable, UserPrimaryKey...),
	)
}
func newProgramStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProgramInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, ProgramTable, ProgramPrimaryKey...),
	)
}
