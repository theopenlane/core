// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ScanUpdate is the builder for updating Scan entities.
type ScanUpdate struct {
	config
	hooks     []Hook
	mutation  *ScanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScanUpdate builder.
func (_u *ScanUpdate) Where(ps ...predicate.Scan) *ScanUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ScanUpdate) SetUpdatedAt(v time.Time) *ScanUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ScanUpdate) ClearUpdatedAt() *ScanUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ScanUpdate) SetUpdatedBy(v string) *ScanUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableUpdatedBy(v *string) *ScanUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ScanUpdate) ClearUpdatedBy() *ScanUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ScanUpdate) SetDeletedAt(v time.Time) *ScanUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableDeletedAt(v *time.Time) *ScanUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ScanUpdate) ClearDeletedAt() *ScanUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ScanUpdate) SetDeletedBy(v string) *ScanUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableDeletedBy(v *string) *ScanUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ScanUpdate) ClearDeletedBy() *ScanUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ScanUpdate) SetTags(v []string) *ScanUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ScanUpdate) AppendTags(v []string) *ScanUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ScanUpdate) ClearTags() *ScanUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ScanUpdate) SetOwnerID(v string) *ScanUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableOwnerID(v *string) *ScanUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ScanUpdate) ClearOwnerID() *ScanUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetTarget sets the "target" field.
func (_u *ScanUpdate) SetTarget(v string) *ScanUpdate {
	_u.mutation.SetTarget(v)
	return _u
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableTarget(v *string) *ScanUpdate {
	if v != nil {
		_u.SetTarget(*v)
	}
	return _u
}

// SetScanType sets the "scan_type" field.
func (_u *ScanUpdate) SetScanType(v enums.ScanType) *ScanUpdate {
	_u.mutation.SetScanType(v)
	return _u
}

// SetNillableScanType sets the "scan_type" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableScanType(v *enums.ScanType) *ScanUpdate {
	if v != nil {
		_u.SetScanType(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *ScanUpdate) SetMetadata(v map[string]interface{}) *ScanUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *ScanUpdate) ClearMetadata() *ScanUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ScanUpdate) SetStatus(v enums.ScanStatus) *ScanUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ScanUpdate) SetNillableStatus(v *enums.ScanStatus) *ScanUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *ScanUpdate) SetOwner(v *Organization) *ScanUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *ScanUpdate) AddBlockedGroupIDs(ids ...string) *ScanUpdate {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *ScanUpdate) AddBlockedGroups(v ...*Group) *ScanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *ScanUpdate) AddEditorIDs(ids ...string) *ScanUpdate {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *ScanUpdate) AddEditors(v ...*Group) *ScanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (_u *ScanUpdate) AddViewerIDs(ids ...string) *ScanUpdate {
	_u.mutation.AddViewerIDs(ids...)
	return _u
}

// AddViewers adds the "viewers" edges to the Group entity.
func (_u *ScanUpdate) AddViewers(v ...*Group) *ScanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddViewerIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_u *ScanUpdate) AddAssetIDs(ids ...string) *ScanUpdate {
	_u.mutation.AddAssetIDs(ids...)
	return _u
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_u *ScanUpdate) AddAssets(v ...*Asset) *ScanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssetIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_u *ScanUpdate) AddEntityIDs(ids ...string) *ScanUpdate {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_u *ScanUpdate) AddEntities(v ...*Entity) *ScanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// Mutation returns the ScanMutation object of the builder.
func (_u *ScanUpdate) Mutation() *ScanMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *ScanUpdate) ClearOwner() *ScanUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *ScanUpdate) ClearBlockedGroups() *ScanUpdate {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *ScanUpdate) RemoveBlockedGroupIDs(ids ...string) *ScanUpdate {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *ScanUpdate) RemoveBlockedGroups(v ...*Group) *ScanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *ScanUpdate) ClearEditors() *ScanUpdate {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *ScanUpdate) RemoveEditorIDs(ids ...string) *ScanUpdate {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *ScanUpdate) RemoveEditors(v ...*Group) *ScanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (_u *ScanUpdate) ClearViewers() *ScanUpdate {
	_u.mutation.ClearViewers()
	return _u
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (_u *ScanUpdate) RemoveViewerIDs(ids ...string) *ScanUpdate {
	_u.mutation.RemoveViewerIDs(ids...)
	return _u
}

// RemoveViewers removes "viewers" edges to Group entities.
func (_u *ScanUpdate) RemoveViewers(v ...*Group) *ScanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveViewerIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (_u *ScanUpdate) ClearAssets() *ScanUpdate {
	_u.mutation.ClearAssets()
	return _u
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (_u *ScanUpdate) RemoveAssetIDs(ids ...string) *ScanUpdate {
	_u.mutation.RemoveAssetIDs(ids...)
	return _u
}

// RemoveAssets removes "assets" edges to Asset entities.
func (_u *ScanUpdate) RemoveAssets(v ...*Asset) *ScanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssetIDs(ids...)
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (_u *ScanUpdate) ClearEntities() *ScanUpdate {
	_u.mutation.ClearEntities()
	return _u
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (_u *ScanUpdate) RemoveEntityIDs(ids ...string) *ScanUpdate {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntities removes "entities" edges to Entity entities.
func (_u *ScanUpdate) RemoveEntities(v ...*Entity) *ScanUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ScanUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ScanUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ScanUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ScanUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ScanUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if scan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scan.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scan.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ScanUpdate) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := scan.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Scan.owner_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Target(); ok {
		if err := scan.TargetValidator(v); err != nil {
			return &ValidationError{Name: "target", err: fmt.Errorf(`generated: validator failed for field "Scan.target": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ScanType(); ok {
		if err := scan.ScanTypeValidator(v); err != nil {
			return &ValidationError{Name: "scan_type", err: fmt.Errorf(`generated: validator failed for field "Scan.scan_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := scan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Scan.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ScanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScanUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ScanUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scan.Table, scan.Columns, sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(scan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(scan.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(scan.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(scan.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(scan.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(scan.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(scan.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(scan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(scan.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(scan.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(scan.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scan.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(scan.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Target(); ok {
		_spec.SetField(scan.FieldTarget, field.TypeString, value)
	}
	if value, ok := _u.mutation.ScanType(); ok {
		_spec.SetField(scan.FieldScanType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(scan.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(scan.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(scan.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scan.OwnerTable,
			Columns: []string{scan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scan.OwnerTable,
			Columns: []string{scan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedViewersIDs(); len(nodes) > 0 && !_u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !_u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !_u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Scan
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ScanUpdateOne is the builder for updating a single Scan entity.
type ScanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ScanUpdateOne) SetUpdatedAt(v time.Time) *ScanUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ScanUpdateOne) ClearUpdatedAt() *ScanUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ScanUpdateOne) SetUpdatedBy(v string) *ScanUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableUpdatedBy(v *string) *ScanUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ScanUpdateOne) ClearUpdatedBy() *ScanUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ScanUpdateOne) SetDeletedAt(v time.Time) *ScanUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableDeletedAt(v *time.Time) *ScanUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ScanUpdateOne) ClearDeletedAt() *ScanUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ScanUpdateOne) SetDeletedBy(v string) *ScanUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableDeletedBy(v *string) *ScanUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ScanUpdateOne) ClearDeletedBy() *ScanUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ScanUpdateOne) SetTags(v []string) *ScanUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ScanUpdateOne) AppendTags(v []string) *ScanUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ScanUpdateOne) ClearTags() *ScanUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ScanUpdateOne) SetOwnerID(v string) *ScanUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableOwnerID(v *string) *ScanUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ScanUpdateOne) ClearOwnerID() *ScanUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetTarget sets the "target" field.
func (_u *ScanUpdateOne) SetTarget(v string) *ScanUpdateOne {
	_u.mutation.SetTarget(v)
	return _u
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableTarget(v *string) *ScanUpdateOne {
	if v != nil {
		_u.SetTarget(*v)
	}
	return _u
}

// SetScanType sets the "scan_type" field.
func (_u *ScanUpdateOne) SetScanType(v enums.ScanType) *ScanUpdateOne {
	_u.mutation.SetScanType(v)
	return _u
}

// SetNillableScanType sets the "scan_type" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableScanType(v *enums.ScanType) *ScanUpdateOne {
	if v != nil {
		_u.SetScanType(*v)
	}
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *ScanUpdateOne) SetMetadata(v map[string]interface{}) *ScanUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *ScanUpdateOne) ClearMetadata() *ScanUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetStatus sets the "status" field.
func (_u *ScanUpdateOne) SetStatus(v enums.ScanStatus) *ScanUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ScanUpdateOne) SetNillableStatus(v *enums.ScanStatus) *ScanUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *ScanUpdateOne) SetOwner(v *Organization) *ScanUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *ScanUpdateOne) AddBlockedGroupIDs(ids ...string) *ScanUpdateOne {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *ScanUpdateOne) AddBlockedGroups(v ...*Group) *ScanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *ScanUpdateOne) AddEditorIDs(ids ...string) *ScanUpdateOne {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *ScanUpdateOne) AddEditors(v ...*Group) *ScanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (_u *ScanUpdateOne) AddViewerIDs(ids ...string) *ScanUpdateOne {
	_u.mutation.AddViewerIDs(ids...)
	return _u
}

// AddViewers adds the "viewers" edges to the Group entity.
func (_u *ScanUpdateOne) AddViewers(v ...*Group) *ScanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddViewerIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_u *ScanUpdateOne) AddAssetIDs(ids ...string) *ScanUpdateOne {
	_u.mutation.AddAssetIDs(ids...)
	return _u
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_u *ScanUpdateOne) AddAssets(v ...*Asset) *ScanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddAssetIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_u *ScanUpdateOne) AddEntityIDs(ids ...string) *ScanUpdateOne {
	_u.mutation.AddEntityIDs(ids...)
	return _u
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_u *ScanUpdateOne) AddEntities(v ...*Entity) *ScanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEntityIDs(ids...)
}

// Mutation returns the ScanMutation object of the builder.
func (_u *ScanUpdateOne) Mutation() *ScanMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *ScanUpdateOne) ClearOwner() *ScanUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *ScanUpdateOne) ClearBlockedGroups() *ScanUpdateOne {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *ScanUpdateOne) RemoveBlockedGroupIDs(ids ...string) *ScanUpdateOne {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *ScanUpdateOne) RemoveBlockedGroups(v ...*Group) *ScanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *ScanUpdateOne) ClearEditors() *ScanUpdateOne {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *ScanUpdateOne) RemoveEditorIDs(ids ...string) *ScanUpdateOne {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *ScanUpdateOne) RemoveEditors(v ...*Group) *ScanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (_u *ScanUpdateOne) ClearViewers() *ScanUpdateOne {
	_u.mutation.ClearViewers()
	return _u
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (_u *ScanUpdateOne) RemoveViewerIDs(ids ...string) *ScanUpdateOne {
	_u.mutation.RemoveViewerIDs(ids...)
	return _u
}

// RemoveViewers removes "viewers" edges to Group entities.
func (_u *ScanUpdateOne) RemoveViewers(v ...*Group) *ScanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveViewerIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (_u *ScanUpdateOne) ClearAssets() *ScanUpdateOne {
	_u.mutation.ClearAssets()
	return _u
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (_u *ScanUpdateOne) RemoveAssetIDs(ids ...string) *ScanUpdateOne {
	_u.mutation.RemoveAssetIDs(ids...)
	return _u
}

// RemoveAssets removes "assets" edges to Asset entities.
func (_u *ScanUpdateOne) RemoveAssets(v ...*Asset) *ScanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveAssetIDs(ids...)
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (_u *ScanUpdateOne) ClearEntities() *ScanUpdateOne {
	_u.mutation.ClearEntities()
	return _u
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (_u *ScanUpdateOne) RemoveEntityIDs(ids ...string) *ScanUpdateOne {
	_u.mutation.RemoveEntityIDs(ids...)
	return _u
}

// RemoveEntities removes "entities" edges to Entity entities.
func (_u *ScanUpdateOne) RemoveEntities(v ...*Entity) *ScanUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEntityIDs(ids...)
}

// Where appends a list predicates to the ScanUpdate builder.
func (_u *ScanUpdateOne) Where(ps ...predicate.Scan) *ScanUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ScanUpdateOne) Select(field string, fields ...string) *ScanUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Scan entity.
func (_u *ScanUpdateOne) Save(ctx context.Context) (*Scan, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ScanUpdateOne) SaveX(ctx context.Context) *Scan {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ScanUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ScanUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ScanUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if scan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scan.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scan.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ScanUpdateOne) check() error {
	if v, ok := _u.mutation.OwnerID(); ok {
		if err := scan.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Scan.owner_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Target(); ok {
		if err := scan.TargetValidator(v); err != nil {
			return &ValidationError{Name: "target", err: fmt.Errorf(`generated: validator failed for field "Scan.target": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ScanType(); ok {
		if err := scan.ScanTypeValidator(v); err != nil {
			return &ValidationError{Name: "scan_type", err: fmt.Errorf(`generated: validator failed for field "Scan.scan_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := scan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Scan.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ScanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScanUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ScanUpdateOne) sqlSave(ctx context.Context) (_node *Scan, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scan.Table, scan.Columns, sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Scan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scan.FieldID)
		for _, f := range fields {
			if !scan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != scan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(scan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(scan.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(scan.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(scan.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(scan.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(scan.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(scan.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(scan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(scan.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(scan.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(scan.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scan.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(scan.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Target(); ok {
		_spec.SetField(scan.FieldTarget, field.TypeString, value)
	}
	if value, ok := _u.mutation.ScanType(); ok {
		_spec.SetField(scan.FieldScanType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(scan.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(scan.FieldMetadata, field.TypeJSON)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(scan.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scan.OwnerTable,
			Columns: []string{scan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scan.OwnerTable,
			Columns: []string{scan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedViewersIDs(); len(nodes) > 0 && !_u.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !_u.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !_u.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Scan
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Scan{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
