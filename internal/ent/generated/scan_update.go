// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ScanUpdate is the builder for updating Scan entities.
type ScanUpdate struct {
	config
	hooks     []Hook
	mutation  *ScanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScanUpdate builder.
func (su *ScanUpdate) Where(ps ...predicate.Scan) *ScanUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ScanUpdate) SetUpdatedAt(t time.Time) *ScanUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *ScanUpdate) ClearUpdatedAt() *ScanUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *ScanUpdate) SetUpdatedBy(s string) *ScanUpdate {
	su.mutation.SetUpdatedBy(s)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *ScanUpdate) SetNillableUpdatedBy(s *string) *ScanUpdate {
	if s != nil {
		su.SetUpdatedBy(*s)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *ScanUpdate) ClearUpdatedBy() *ScanUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *ScanUpdate) SetDeletedAt(t time.Time) *ScanUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *ScanUpdate) SetNillableDeletedAt(t *time.Time) *ScanUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *ScanUpdate) ClearDeletedAt() *ScanUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetDeletedBy sets the "deleted_by" field.
func (su *ScanUpdate) SetDeletedBy(s string) *ScanUpdate {
	su.mutation.SetDeletedBy(s)
	return su
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (su *ScanUpdate) SetNillableDeletedBy(s *string) *ScanUpdate {
	if s != nil {
		su.SetDeletedBy(*s)
	}
	return su
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (su *ScanUpdate) ClearDeletedBy() *ScanUpdate {
	su.mutation.ClearDeletedBy()
	return su
}

// SetTags sets the "tags" field.
func (su *ScanUpdate) SetTags(s []string) *ScanUpdate {
	su.mutation.SetTags(s)
	return su
}

// AppendTags appends s to the "tags" field.
func (su *ScanUpdate) AppendTags(s []string) *ScanUpdate {
	su.mutation.AppendTags(s)
	return su
}

// ClearTags clears the value of the "tags" field.
func (su *ScanUpdate) ClearTags() *ScanUpdate {
	su.mutation.ClearTags()
	return su
}

// SetOwnerID sets the "owner_id" field.
func (su *ScanUpdate) SetOwnerID(s string) *ScanUpdate {
	su.mutation.SetOwnerID(s)
	return su
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (su *ScanUpdate) SetNillableOwnerID(s *string) *ScanUpdate {
	if s != nil {
		su.SetOwnerID(*s)
	}
	return su
}

// ClearOwnerID clears the value of the "owner_id" field.
func (su *ScanUpdate) ClearOwnerID() *ScanUpdate {
	su.mutation.ClearOwnerID()
	return su
}

// SetTarget sets the "target" field.
func (su *ScanUpdate) SetTarget(s string) *ScanUpdate {
	su.mutation.SetTarget(s)
	return su
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (su *ScanUpdate) SetNillableTarget(s *string) *ScanUpdate {
	if s != nil {
		su.SetTarget(*s)
	}
	return su
}

// SetScanType sets the "scan_type" field.
func (su *ScanUpdate) SetScanType(et enums.ScanType) *ScanUpdate {
	su.mutation.SetScanType(et)
	return su
}

// SetNillableScanType sets the "scan_type" field if the given value is not nil.
func (su *ScanUpdate) SetNillableScanType(et *enums.ScanType) *ScanUpdate {
	if et != nil {
		su.SetScanType(*et)
	}
	return su
}

// SetMetadata sets the "metadata" field.
func (su *ScanUpdate) SetMetadata(m map[string]interface{}) *ScanUpdate {
	su.mutation.SetMetadata(m)
	return su
}

// ClearMetadata clears the value of the "metadata" field.
func (su *ScanUpdate) ClearMetadata() *ScanUpdate {
	su.mutation.ClearMetadata()
	return su
}

// SetStatus sets the "status" field.
func (su *ScanUpdate) SetStatus(es enums.ScanStatus) *ScanUpdate {
	su.mutation.SetStatus(es)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *ScanUpdate) SetNillableStatus(es *enums.ScanStatus) *ScanUpdate {
	if es != nil {
		su.SetStatus(*es)
	}
	return su
}

// SetOwner sets the "owner" edge to the Organization entity.
func (su *ScanUpdate) SetOwner(o *Organization) *ScanUpdate {
	return su.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (su *ScanUpdate) AddBlockedGroupIDs(ids ...string) *ScanUpdate {
	su.mutation.AddBlockedGroupIDs(ids...)
	return su
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (su *ScanUpdate) AddBlockedGroups(g ...*Group) *ScanUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return su.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (su *ScanUpdate) AddEditorIDs(ids ...string) *ScanUpdate {
	su.mutation.AddEditorIDs(ids...)
	return su
}

// AddEditors adds the "editors" edges to the Group entity.
func (su *ScanUpdate) AddEditors(g ...*Group) *ScanUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return su.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (su *ScanUpdate) AddViewerIDs(ids ...string) *ScanUpdate {
	su.mutation.AddViewerIDs(ids...)
	return su
}

// AddViewers adds the "viewers" edges to the Group entity.
func (su *ScanUpdate) AddViewers(g ...*Group) *ScanUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return su.AddViewerIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (su *ScanUpdate) AddAssetIDs(ids ...string) *ScanUpdate {
	su.mutation.AddAssetIDs(ids...)
	return su
}

// AddAssets adds the "assets" edges to the Asset entity.
func (su *ScanUpdate) AddAssets(a ...*Asset) *ScanUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddAssetIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (su *ScanUpdate) AddEntityIDs(ids ...string) *ScanUpdate {
	su.mutation.AddEntityIDs(ids...)
	return su
}

// AddEntities adds the "entities" edges to the Entity entity.
func (su *ScanUpdate) AddEntities(e ...*Entity) *ScanUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.AddEntityIDs(ids...)
}

// Mutation returns the ScanMutation object of the builder.
func (su *ScanUpdate) Mutation() *ScanMutation {
	return su.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (su *ScanUpdate) ClearOwner() *ScanUpdate {
	su.mutation.ClearOwner()
	return su
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (su *ScanUpdate) ClearBlockedGroups() *ScanUpdate {
	su.mutation.ClearBlockedGroups()
	return su
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (su *ScanUpdate) RemoveBlockedGroupIDs(ids ...string) *ScanUpdate {
	su.mutation.RemoveBlockedGroupIDs(ids...)
	return su
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (su *ScanUpdate) RemoveBlockedGroups(g ...*Group) *ScanUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return su.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (su *ScanUpdate) ClearEditors() *ScanUpdate {
	su.mutation.ClearEditors()
	return su
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (su *ScanUpdate) RemoveEditorIDs(ids ...string) *ScanUpdate {
	su.mutation.RemoveEditorIDs(ids...)
	return su
}

// RemoveEditors removes "editors" edges to Group entities.
func (su *ScanUpdate) RemoveEditors(g ...*Group) *ScanUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return su.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (su *ScanUpdate) ClearViewers() *ScanUpdate {
	su.mutation.ClearViewers()
	return su
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (su *ScanUpdate) RemoveViewerIDs(ids ...string) *ScanUpdate {
	su.mutation.RemoveViewerIDs(ids...)
	return su
}

// RemoveViewers removes "viewers" edges to Group entities.
func (su *ScanUpdate) RemoveViewers(g ...*Group) *ScanUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return su.RemoveViewerIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (su *ScanUpdate) ClearAssets() *ScanUpdate {
	su.mutation.ClearAssets()
	return su
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (su *ScanUpdate) RemoveAssetIDs(ids ...string) *ScanUpdate {
	su.mutation.RemoveAssetIDs(ids...)
	return su
}

// RemoveAssets removes "assets" edges to Asset entities.
func (su *ScanUpdate) RemoveAssets(a ...*Asset) *ScanUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveAssetIDs(ids...)
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (su *ScanUpdate) ClearEntities() *ScanUpdate {
	su.mutation.ClearEntities()
	return su
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (su *ScanUpdate) RemoveEntityIDs(ids ...string) *ScanUpdate {
	su.mutation.RemoveEntityIDs(ids...)
	return su
}

// RemoveEntities removes "entities" edges to Entity entities.
func (su *ScanUpdate) RemoveEntities(e ...*Entity) *ScanUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return su.RemoveEntityIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScanUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScanUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScanUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScanUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ScanUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		if scan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scan.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scan.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *ScanUpdate) check() error {
	if v, ok := su.mutation.OwnerID(); ok {
		if err := scan.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Scan.owner_id": %w`, err)}
		}
	}
	if v, ok := su.mutation.Target(); ok {
		if err := scan.TargetValidator(v); err != nil {
			return &ValidationError{Name: "target", err: fmt.Errorf(`generated: validator failed for field "Scan.target": %w`, err)}
		}
	}
	if v, ok := su.mutation.ScanType(); ok {
		if err := scan.ScanTypeValidator(v); err != nil {
			return &ValidationError{Name: "scan_type", err: fmt.Errorf(`generated: validator failed for field "Scan.scan_type": %w`, err)}
		}
	}
	if v, ok := su.mutation.Status(); ok {
		if err := scan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Scan.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *ScanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScanUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *ScanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scan.Table, scan.Columns, sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(scan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(scan.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(scan.FieldUpdatedAt, field.TypeTime)
	}
	if su.mutation.CreatedByCleared() {
		_spec.ClearField(scan.FieldCreatedBy, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(scan.FieldUpdatedBy, field.TypeString, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(scan.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(scan.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(scan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.DeletedBy(); ok {
		_spec.SetField(scan.FieldDeletedBy, field.TypeString, value)
	}
	if su.mutation.DeletedByCleared() {
		_spec.ClearField(scan.FieldDeletedBy, field.TypeString)
	}
	if value, ok := su.mutation.Tags(); ok {
		_spec.SetField(scan.FieldTags, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scan.FieldTags, value)
		})
	}
	if su.mutation.TagsCleared() {
		_spec.ClearField(scan.FieldTags, field.TypeJSON)
	}
	if value, ok := su.mutation.Target(); ok {
		_spec.SetField(scan.FieldTarget, field.TypeString, value)
	}
	if value, ok := su.mutation.ScanType(); ok {
		_spec.SetField(scan.FieldScanType, field.TypeEnum, value)
	}
	if value, ok := su.mutation.Metadata(); ok {
		_spec.SetField(scan.FieldMetadata, field.TypeJSON, value)
	}
	if su.mutation.MetadataCleared() {
		_spec.ClearField(scan.FieldMetadata, field.TypeJSON)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(scan.FieldStatus, field.TypeEnum, value)
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scan.OwnerTable,
			Columns: []string{scan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Scan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scan.OwnerTable,
			Columns: []string{scan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ScanBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !su.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ScanEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !su.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ScanViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedViewersIDs(); len(nodes) > 0 && !su.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ScanAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !su.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !su.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = su.schemaConfig.Scan
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScanUpdateOne is the builder for updating a single Scan entity.
type ScanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ScanUpdateOne) SetUpdatedAt(t time.Time) *ScanUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *ScanUpdateOne) ClearUpdatedAt() *ScanUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *ScanUpdateOne) SetUpdatedBy(s string) *ScanUpdateOne {
	suo.mutation.SetUpdatedBy(s)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableUpdatedBy(s *string) *ScanUpdateOne {
	if s != nil {
		suo.SetUpdatedBy(*s)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *ScanUpdateOne) ClearUpdatedBy() *ScanUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *ScanUpdateOne) SetDeletedAt(t time.Time) *ScanUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableDeletedAt(t *time.Time) *ScanUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *ScanUpdateOne) ClearDeletedAt() *ScanUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetDeletedBy sets the "deleted_by" field.
func (suo *ScanUpdateOne) SetDeletedBy(s string) *ScanUpdateOne {
	suo.mutation.SetDeletedBy(s)
	return suo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableDeletedBy(s *string) *ScanUpdateOne {
	if s != nil {
		suo.SetDeletedBy(*s)
	}
	return suo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (suo *ScanUpdateOne) ClearDeletedBy() *ScanUpdateOne {
	suo.mutation.ClearDeletedBy()
	return suo
}

// SetTags sets the "tags" field.
func (suo *ScanUpdateOne) SetTags(s []string) *ScanUpdateOne {
	suo.mutation.SetTags(s)
	return suo
}

// AppendTags appends s to the "tags" field.
func (suo *ScanUpdateOne) AppendTags(s []string) *ScanUpdateOne {
	suo.mutation.AppendTags(s)
	return suo
}

// ClearTags clears the value of the "tags" field.
func (suo *ScanUpdateOne) ClearTags() *ScanUpdateOne {
	suo.mutation.ClearTags()
	return suo
}

// SetOwnerID sets the "owner_id" field.
func (suo *ScanUpdateOne) SetOwnerID(s string) *ScanUpdateOne {
	suo.mutation.SetOwnerID(s)
	return suo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableOwnerID(s *string) *ScanUpdateOne {
	if s != nil {
		suo.SetOwnerID(*s)
	}
	return suo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (suo *ScanUpdateOne) ClearOwnerID() *ScanUpdateOne {
	suo.mutation.ClearOwnerID()
	return suo
}

// SetTarget sets the "target" field.
func (suo *ScanUpdateOne) SetTarget(s string) *ScanUpdateOne {
	suo.mutation.SetTarget(s)
	return suo
}

// SetNillableTarget sets the "target" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableTarget(s *string) *ScanUpdateOne {
	if s != nil {
		suo.SetTarget(*s)
	}
	return suo
}

// SetScanType sets the "scan_type" field.
func (suo *ScanUpdateOne) SetScanType(et enums.ScanType) *ScanUpdateOne {
	suo.mutation.SetScanType(et)
	return suo
}

// SetNillableScanType sets the "scan_type" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableScanType(et *enums.ScanType) *ScanUpdateOne {
	if et != nil {
		suo.SetScanType(*et)
	}
	return suo
}

// SetMetadata sets the "metadata" field.
func (suo *ScanUpdateOne) SetMetadata(m map[string]interface{}) *ScanUpdateOne {
	suo.mutation.SetMetadata(m)
	return suo
}

// ClearMetadata clears the value of the "metadata" field.
func (suo *ScanUpdateOne) ClearMetadata() *ScanUpdateOne {
	suo.mutation.ClearMetadata()
	return suo
}

// SetStatus sets the "status" field.
func (suo *ScanUpdateOne) SetStatus(es enums.ScanStatus) *ScanUpdateOne {
	suo.mutation.SetStatus(es)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableStatus(es *enums.ScanStatus) *ScanUpdateOne {
	if es != nil {
		suo.SetStatus(*es)
	}
	return suo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (suo *ScanUpdateOne) SetOwner(o *Organization) *ScanUpdateOne {
	return suo.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (suo *ScanUpdateOne) AddBlockedGroupIDs(ids ...string) *ScanUpdateOne {
	suo.mutation.AddBlockedGroupIDs(ids...)
	return suo
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (suo *ScanUpdateOne) AddBlockedGroups(g ...*Group) *ScanUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return suo.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (suo *ScanUpdateOne) AddEditorIDs(ids ...string) *ScanUpdateOne {
	suo.mutation.AddEditorIDs(ids...)
	return suo
}

// AddEditors adds the "editors" edges to the Group entity.
func (suo *ScanUpdateOne) AddEditors(g ...*Group) *ScanUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return suo.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (suo *ScanUpdateOne) AddViewerIDs(ids ...string) *ScanUpdateOne {
	suo.mutation.AddViewerIDs(ids...)
	return suo
}

// AddViewers adds the "viewers" edges to the Group entity.
func (suo *ScanUpdateOne) AddViewers(g ...*Group) *ScanUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return suo.AddViewerIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (suo *ScanUpdateOne) AddAssetIDs(ids ...string) *ScanUpdateOne {
	suo.mutation.AddAssetIDs(ids...)
	return suo
}

// AddAssets adds the "assets" edges to the Asset entity.
func (suo *ScanUpdateOne) AddAssets(a ...*Asset) *ScanUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddAssetIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (suo *ScanUpdateOne) AddEntityIDs(ids ...string) *ScanUpdateOne {
	suo.mutation.AddEntityIDs(ids...)
	return suo
}

// AddEntities adds the "entities" edges to the Entity entity.
func (suo *ScanUpdateOne) AddEntities(e ...*Entity) *ScanUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.AddEntityIDs(ids...)
}

// Mutation returns the ScanMutation object of the builder.
func (suo *ScanUpdateOne) Mutation() *ScanMutation {
	return suo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (suo *ScanUpdateOne) ClearOwner() *ScanUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (suo *ScanUpdateOne) ClearBlockedGroups() *ScanUpdateOne {
	suo.mutation.ClearBlockedGroups()
	return suo
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (suo *ScanUpdateOne) RemoveBlockedGroupIDs(ids ...string) *ScanUpdateOne {
	suo.mutation.RemoveBlockedGroupIDs(ids...)
	return suo
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (suo *ScanUpdateOne) RemoveBlockedGroups(g ...*Group) *ScanUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return suo.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (suo *ScanUpdateOne) ClearEditors() *ScanUpdateOne {
	suo.mutation.ClearEditors()
	return suo
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (suo *ScanUpdateOne) RemoveEditorIDs(ids ...string) *ScanUpdateOne {
	suo.mutation.RemoveEditorIDs(ids...)
	return suo
}

// RemoveEditors removes "editors" edges to Group entities.
func (suo *ScanUpdateOne) RemoveEditors(g ...*Group) *ScanUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return suo.RemoveEditorIDs(ids...)
}

// ClearViewers clears all "viewers" edges to the Group entity.
func (suo *ScanUpdateOne) ClearViewers() *ScanUpdateOne {
	suo.mutation.ClearViewers()
	return suo
}

// RemoveViewerIDs removes the "viewers" edge to Group entities by IDs.
func (suo *ScanUpdateOne) RemoveViewerIDs(ids ...string) *ScanUpdateOne {
	suo.mutation.RemoveViewerIDs(ids...)
	return suo
}

// RemoveViewers removes "viewers" edges to Group entities.
func (suo *ScanUpdateOne) RemoveViewers(g ...*Group) *ScanUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return suo.RemoveViewerIDs(ids...)
}

// ClearAssets clears all "assets" edges to the Asset entity.
func (suo *ScanUpdateOne) ClearAssets() *ScanUpdateOne {
	suo.mutation.ClearAssets()
	return suo
}

// RemoveAssetIDs removes the "assets" edge to Asset entities by IDs.
func (suo *ScanUpdateOne) RemoveAssetIDs(ids ...string) *ScanUpdateOne {
	suo.mutation.RemoveAssetIDs(ids...)
	return suo
}

// RemoveAssets removes "assets" edges to Asset entities.
func (suo *ScanUpdateOne) RemoveAssets(a ...*Asset) *ScanUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveAssetIDs(ids...)
}

// ClearEntities clears all "entities" edges to the Entity entity.
func (suo *ScanUpdateOne) ClearEntities() *ScanUpdateOne {
	suo.mutation.ClearEntities()
	return suo
}

// RemoveEntityIDs removes the "entities" edge to Entity entities by IDs.
func (suo *ScanUpdateOne) RemoveEntityIDs(ids ...string) *ScanUpdateOne {
	suo.mutation.RemoveEntityIDs(ids...)
	return suo
}

// RemoveEntities removes "entities" edges to Entity entities.
func (suo *ScanUpdateOne) RemoveEntities(e ...*Entity) *ScanUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return suo.RemoveEntityIDs(ids...)
}

// Where appends a list predicates to the ScanUpdate builder.
func (suo *ScanUpdateOne) Where(ps ...predicate.Scan) *ScanUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScanUpdateOne) Select(field string, fields ...string) *ScanUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Scan entity.
func (suo *ScanUpdateOne) Save(ctx context.Context) (*Scan, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScanUpdateOne) SaveX(ctx context.Context) *Scan {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScanUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScanUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ScanUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		if scan.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scan.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scan.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *ScanUpdateOne) check() error {
	if v, ok := suo.mutation.OwnerID(); ok {
		if err := scan.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Scan.owner_id": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Target(); ok {
		if err := scan.TargetValidator(v); err != nil {
			return &ValidationError{Name: "target", err: fmt.Errorf(`generated: validator failed for field "Scan.target": %w`, err)}
		}
	}
	if v, ok := suo.mutation.ScanType(); ok {
		if err := scan.ScanTypeValidator(v); err != nil {
			return &ValidationError{Name: "scan_type", err: fmt.Errorf(`generated: validator failed for field "Scan.scan_type": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Status(); ok {
		if err := scan.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Scan.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *ScanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScanUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *ScanUpdateOne) sqlSave(ctx context.Context) (_node *Scan, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scan.Table, scan.Columns, sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Scan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scan.FieldID)
		for _, f := range fields {
			if !scan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != scan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(scan.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(scan.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(scan.FieldUpdatedAt, field.TypeTime)
	}
	if suo.mutation.CreatedByCleared() {
		_spec.ClearField(scan.FieldCreatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(scan.FieldUpdatedBy, field.TypeString, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(scan.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(scan.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(scan.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.DeletedBy(); ok {
		_spec.SetField(scan.FieldDeletedBy, field.TypeString, value)
	}
	if suo.mutation.DeletedByCleared() {
		_spec.ClearField(scan.FieldDeletedBy, field.TypeString)
	}
	if value, ok := suo.mutation.Tags(); ok {
		_spec.SetField(scan.FieldTags, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scan.FieldTags, value)
		})
	}
	if suo.mutation.TagsCleared() {
		_spec.ClearField(scan.FieldTags, field.TypeJSON)
	}
	if value, ok := suo.mutation.Target(); ok {
		_spec.SetField(scan.FieldTarget, field.TypeString, value)
	}
	if value, ok := suo.mutation.ScanType(); ok {
		_spec.SetField(scan.FieldScanType, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.Metadata(); ok {
		_spec.SetField(scan.FieldMetadata, field.TypeJSON, value)
	}
	if suo.mutation.MetadataCleared() {
		_spec.ClearField(scan.FieldMetadata, field.TypeJSON)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(scan.FieldStatus, field.TypeEnum, value)
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scan.OwnerTable,
			Columns: []string{scan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Scan
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scan.OwnerTable,
			Columns: []string{scan.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ScanBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !suo.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.BlockedGroupsTable,
			Columns: scan.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ScanBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ScanEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !suo.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.EditorsTable,
			Columns: scan.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ScanEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ScanViewers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedViewersIDs(); len(nodes) > 0 && !suo.mutation.ViewersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.ViewersTable,
			Columns: scan.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ScanViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ScanAssets
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAssetsIDs(); len(nodes) > 0 && !suo.mutation.AssetsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scan.AssetsTable,
			Columns: scan.AssetsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.ScanAssets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Entity
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedEntitiesIDs(); len(nodes) > 0 && !suo.mutation.EntitiesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scan.EntitiesTable,
			Columns: []string{scan.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = suo.schemaConfig.Scan
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_spec.AddModifiers(suo.modifiers...)
	_node = &Scan{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
