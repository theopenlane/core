// Code generated by ent, DO NOT EDIT.

package groupsetting

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedByID applies equality check predicate on the "created_by_id" field. It's identical to CreatedByIDEQ.
func CreatedByID(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldCreatedByID, v))
}

// UpdatedByID applies equality check predicate on the "updated_by_id" field. It's identical to UpdatedByIDEQ.
func UpdatedByID(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldUpdatedByID, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldMappingID, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedByID applies equality check predicate on the "deleted_by_id" field. It's identical to DeletedByIDEQ.
func DeletedByID(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldDeletedByID, v))
}

// SyncToSlack applies equality check predicate on the "sync_to_slack" field. It's identical to SyncToSlackEQ.
func SyncToSlack(v bool) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldSyncToSlack, v))
}

// SyncToGithub applies equality check predicate on the "sync_to_github" field. It's identical to SyncToGithubEQ.
func SyncToGithub(v bool) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldSyncToGithub, v))
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldGroupID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByIDEQ applies the EQ predicate on the "created_by_id" field.
func CreatedByIDEQ(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldCreatedByID, v))
}

// CreatedByIDNEQ applies the NEQ predicate on the "created_by_id" field.
func CreatedByIDNEQ(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNEQ(FieldCreatedByID, v))
}

// CreatedByIDIn applies the In predicate on the "created_by_id" field.
func CreatedByIDIn(vs ...string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIn(FieldCreatedByID, vs...))
}

// CreatedByIDNotIn applies the NotIn predicate on the "created_by_id" field.
func CreatedByIDNotIn(vs ...string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotIn(FieldCreatedByID, vs...))
}

// CreatedByIDGT applies the GT predicate on the "created_by_id" field.
func CreatedByIDGT(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGT(FieldCreatedByID, v))
}

// CreatedByIDGTE applies the GTE predicate on the "created_by_id" field.
func CreatedByIDGTE(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGTE(FieldCreatedByID, v))
}

// CreatedByIDLT applies the LT predicate on the "created_by_id" field.
func CreatedByIDLT(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLT(FieldCreatedByID, v))
}

// CreatedByIDLTE applies the LTE predicate on the "created_by_id" field.
func CreatedByIDLTE(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLTE(FieldCreatedByID, v))
}

// CreatedByIDContains applies the Contains predicate on the "created_by_id" field.
func CreatedByIDContains(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldContains(FieldCreatedByID, v))
}

// CreatedByIDHasPrefix applies the HasPrefix predicate on the "created_by_id" field.
func CreatedByIDHasPrefix(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldHasPrefix(FieldCreatedByID, v))
}

// CreatedByIDHasSuffix applies the HasSuffix predicate on the "created_by_id" field.
func CreatedByIDHasSuffix(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldHasSuffix(FieldCreatedByID, v))
}

// CreatedByIDIsNil applies the IsNil predicate on the "created_by_id" field.
func CreatedByIDIsNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIsNull(FieldCreatedByID))
}

// CreatedByIDNotNil applies the NotNil predicate on the "created_by_id" field.
func CreatedByIDNotNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotNull(FieldCreatedByID))
}

// CreatedByIDEqualFold applies the EqualFold predicate on the "created_by_id" field.
func CreatedByIDEqualFold(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEqualFold(FieldCreatedByID, v))
}

// CreatedByIDContainsFold applies the ContainsFold predicate on the "created_by_id" field.
func CreatedByIDContainsFold(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldContainsFold(FieldCreatedByID, v))
}

// UpdatedByIDEQ applies the EQ predicate on the "updated_by_id" field.
func UpdatedByIDEQ(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldUpdatedByID, v))
}

// UpdatedByIDNEQ applies the NEQ predicate on the "updated_by_id" field.
func UpdatedByIDNEQ(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNEQ(FieldUpdatedByID, v))
}

// UpdatedByIDIn applies the In predicate on the "updated_by_id" field.
func UpdatedByIDIn(vs ...string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDNotIn applies the NotIn predicate on the "updated_by_id" field.
func UpdatedByIDNotIn(vs ...string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotIn(FieldUpdatedByID, vs...))
}

// UpdatedByIDGT applies the GT predicate on the "updated_by_id" field.
func UpdatedByIDGT(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGT(FieldUpdatedByID, v))
}

// UpdatedByIDGTE applies the GTE predicate on the "updated_by_id" field.
func UpdatedByIDGTE(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGTE(FieldUpdatedByID, v))
}

// UpdatedByIDLT applies the LT predicate on the "updated_by_id" field.
func UpdatedByIDLT(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLT(FieldUpdatedByID, v))
}

// UpdatedByIDLTE applies the LTE predicate on the "updated_by_id" field.
func UpdatedByIDLTE(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLTE(FieldUpdatedByID, v))
}

// UpdatedByIDContains applies the Contains predicate on the "updated_by_id" field.
func UpdatedByIDContains(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldContains(FieldUpdatedByID, v))
}

// UpdatedByIDHasPrefix applies the HasPrefix predicate on the "updated_by_id" field.
func UpdatedByIDHasPrefix(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldHasPrefix(FieldUpdatedByID, v))
}

// UpdatedByIDHasSuffix applies the HasSuffix predicate on the "updated_by_id" field.
func UpdatedByIDHasSuffix(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldHasSuffix(FieldUpdatedByID, v))
}

// UpdatedByIDIsNil applies the IsNil predicate on the "updated_by_id" field.
func UpdatedByIDIsNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIsNull(FieldUpdatedByID))
}

// UpdatedByIDNotNil applies the NotNil predicate on the "updated_by_id" field.
func UpdatedByIDNotNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotNull(FieldUpdatedByID))
}

// UpdatedByIDEqualFold applies the EqualFold predicate on the "updated_by_id" field.
func UpdatedByIDEqualFold(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEqualFold(FieldUpdatedByID, v))
}

// UpdatedByIDContainsFold applies the ContainsFold predicate on the "updated_by_id" field.
func UpdatedByIDContainsFold(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldContainsFold(FieldUpdatedByID, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldContainsFold(FieldMappingID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotNull(FieldTags))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByIDEQ applies the EQ predicate on the "deleted_by_id" field.
func DeletedByIDEQ(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldDeletedByID, v))
}

// DeletedByIDNEQ applies the NEQ predicate on the "deleted_by_id" field.
func DeletedByIDNEQ(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNEQ(FieldDeletedByID, v))
}

// DeletedByIDIn applies the In predicate on the "deleted_by_id" field.
func DeletedByIDIn(vs ...string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIn(FieldDeletedByID, vs...))
}

// DeletedByIDNotIn applies the NotIn predicate on the "deleted_by_id" field.
func DeletedByIDNotIn(vs ...string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotIn(FieldDeletedByID, vs...))
}

// DeletedByIDGT applies the GT predicate on the "deleted_by_id" field.
func DeletedByIDGT(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGT(FieldDeletedByID, v))
}

// DeletedByIDGTE applies the GTE predicate on the "deleted_by_id" field.
func DeletedByIDGTE(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGTE(FieldDeletedByID, v))
}

// DeletedByIDLT applies the LT predicate on the "deleted_by_id" field.
func DeletedByIDLT(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLT(FieldDeletedByID, v))
}

// DeletedByIDLTE applies the LTE predicate on the "deleted_by_id" field.
func DeletedByIDLTE(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLTE(FieldDeletedByID, v))
}

// DeletedByIDContains applies the Contains predicate on the "deleted_by_id" field.
func DeletedByIDContains(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldContains(FieldDeletedByID, v))
}

// DeletedByIDHasPrefix applies the HasPrefix predicate on the "deleted_by_id" field.
func DeletedByIDHasPrefix(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldHasPrefix(FieldDeletedByID, v))
}

// DeletedByIDHasSuffix applies the HasSuffix predicate on the "deleted_by_id" field.
func DeletedByIDHasSuffix(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldHasSuffix(FieldDeletedByID, v))
}

// DeletedByIDIsNil applies the IsNil predicate on the "deleted_by_id" field.
func DeletedByIDIsNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIsNull(FieldDeletedByID))
}

// DeletedByIDNotNil applies the NotNil predicate on the "deleted_by_id" field.
func DeletedByIDNotNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotNull(FieldDeletedByID))
}

// DeletedByIDEqualFold applies the EqualFold predicate on the "deleted_by_id" field.
func DeletedByIDEqualFold(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEqualFold(FieldDeletedByID, v))
}

// DeletedByIDContainsFold applies the ContainsFold predicate on the "deleted_by_id" field.
func DeletedByIDContainsFold(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldContainsFold(FieldDeletedByID, v))
}

// VisibilityEQ applies the EQ predicate on the "visibility" field.
func VisibilityEQ(v enums.Visibility) predicate.GroupSetting {
	vc := v
	return predicate.GroupSetting(sql.FieldEQ(FieldVisibility, vc))
}

// VisibilityNEQ applies the NEQ predicate on the "visibility" field.
func VisibilityNEQ(v enums.Visibility) predicate.GroupSetting {
	vc := v
	return predicate.GroupSetting(sql.FieldNEQ(FieldVisibility, vc))
}

// VisibilityIn applies the In predicate on the "visibility" field.
func VisibilityIn(vs ...enums.Visibility) predicate.GroupSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupSetting(sql.FieldIn(FieldVisibility, v...))
}

// VisibilityNotIn applies the NotIn predicate on the "visibility" field.
func VisibilityNotIn(vs ...enums.Visibility) predicate.GroupSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupSetting(sql.FieldNotIn(FieldVisibility, v...))
}

// JoinPolicyEQ applies the EQ predicate on the "join_policy" field.
func JoinPolicyEQ(v enums.JoinPolicy) predicate.GroupSetting {
	vc := v
	return predicate.GroupSetting(sql.FieldEQ(FieldJoinPolicy, vc))
}

// JoinPolicyNEQ applies the NEQ predicate on the "join_policy" field.
func JoinPolicyNEQ(v enums.JoinPolicy) predicate.GroupSetting {
	vc := v
	return predicate.GroupSetting(sql.FieldNEQ(FieldJoinPolicy, vc))
}

// JoinPolicyIn applies the In predicate on the "join_policy" field.
func JoinPolicyIn(vs ...enums.JoinPolicy) predicate.GroupSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupSetting(sql.FieldIn(FieldJoinPolicy, v...))
}

// JoinPolicyNotIn applies the NotIn predicate on the "join_policy" field.
func JoinPolicyNotIn(vs ...enums.JoinPolicy) predicate.GroupSetting {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupSetting(sql.FieldNotIn(FieldJoinPolicy, v...))
}

// SyncToSlackEQ applies the EQ predicate on the "sync_to_slack" field.
func SyncToSlackEQ(v bool) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldSyncToSlack, v))
}

// SyncToSlackNEQ applies the NEQ predicate on the "sync_to_slack" field.
func SyncToSlackNEQ(v bool) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNEQ(FieldSyncToSlack, v))
}

// SyncToSlackIsNil applies the IsNil predicate on the "sync_to_slack" field.
func SyncToSlackIsNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIsNull(FieldSyncToSlack))
}

// SyncToSlackNotNil applies the NotNil predicate on the "sync_to_slack" field.
func SyncToSlackNotNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotNull(FieldSyncToSlack))
}

// SyncToGithubEQ applies the EQ predicate on the "sync_to_github" field.
func SyncToGithubEQ(v bool) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldSyncToGithub, v))
}

// SyncToGithubNEQ applies the NEQ predicate on the "sync_to_github" field.
func SyncToGithubNEQ(v bool) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNEQ(FieldSyncToGithub, v))
}

// SyncToGithubIsNil applies the IsNil predicate on the "sync_to_github" field.
func SyncToGithubIsNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIsNull(FieldSyncToGithub))
}

// SyncToGithubNotNil applies the NotNil predicate on the "sync_to_github" field.
func SyncToGithubNotNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotNull(FieldSyncToGithub))
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEQ(FieldGroupID, v))
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNEQ(FieldGroupID, v))
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIn(FieldGroupID, vs...))
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotIn(FieldGroupID, vs...))
}

// GroupIDGT applies the GT predicate on the "group_id" field.
func GroupIDGT(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGT(FieldGroupID, v))
}

// GroupIDGTE applies the GTE predicate on the "group_id" field.
func GroupIDGTE(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldGTE(FieldGroupID, v))
}

// GroupIDLT applies the LT predicate on the "group_id" field.
func GroupIDLT(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLT(FieldGroupID, v))
}

// GroupIDLTE applies the LTE predicate on the "group_id" field.
func GroupIDLTE(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldLTE(FieldGroupID, v))
}

// GroupIDContains applies the Contains predicate on the "group_id" field.
func GroupIDContains(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldContains(FieldGroupID, v))
}

// GroupIDHasPrefix applies the HasPrefix predicate on the "group_id" field.
func GroupIDHasPrefix(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldHasPrefix(FieldGroupID, v))
}

// GroupIDHasSuffix applies the HasSuffix predicate on the "group_id" field.
func GroupIDHasSuffix(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldHasSuffix(FieldGroupID, v))
}

// GroupIDIsNil applies the IsNil predicate on the "group_id" field.
func GroupIDIsNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldIsNull(FieldGroupID))
}

// GroupIDNotNil applies the NotNil predicate on the "group_id" field.
func GroupIDNotNil() predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldNotNull(FieldGroupID))
}

// GroupIDEqualFold applies the EqualFold predicate on the "group_id" field.
func GroupIDEqualFold(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldEqualFold(FieldGroupID, v))
}

// GroupIDContainsFold applies the ContainsFold predicate on the "group_id" field.
func GroupIDContainsFold(v string) predicate.GroupSetting {
	return predicate.GroupSetting(sql.FieldContainsFold(FieldGroupID, v))
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.GroupSetting {
	return predicate.GroupSetting(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, GroupTable, GroupColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupSetting
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.GroupSetting {
	return predicate.GroupSetting(func(s *sql.Selector) {
		step := newGroupStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupSetting
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GroupSetting) predicate.GroupSetting {
	return predicate.GroupSetting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GroupSetting) predicate.GroupSetting {
	return predicate.GroupSetting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GroupSetting) predicate.GroupSetting {
	return predicate.GroupSetting(sql.NotPredicates(p))
}
