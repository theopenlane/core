// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplate"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
)

// JobTemplate is the model entity for the JobTemplate schema.
type JobTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// indicates if the record is owned by the the openlane system and not by an organization
	SystemOwned bool `json:"system_owned,omitempty"`
	// the title of the job
	Title string `json:"title,omitempty"`
	// the short description of the job and what it does
	Description string `json:"description,omitempty"`
	// the platform to use to execute this job, e.g. golang, typescript, python, etc.
	Platform enums.JobPlatformType `json:"platform,omitempty"`
	// windmill path used to execute the job
	WindmillPath string `json:"windmill_path,omitempty"`
	// the url from where to download the script from
	DownloadURL string `json:"download_url,omitempty"`
	// the json configuration to run this job, which could be used to template a job, e.g. { "account_name": "my-account" }
	Configuration models.JobConfiguration `json:"configuration,omitempty"`
	// cron schedule to run the job in cron 6-field syntax, e.g. 0 0 0 * * *
	Cron *models.Cron `json:"cron,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobTemplateQuery when eager-loading is set.
	Edges        JobTemplateEdges `json:"edges"`
	selectValues sql.SelectValues
}

// JobTemplateEdges holds the relations/edges for other nodes in the graph.
type JobTemplateEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// ScheduledJobs holds the value of the scheduled_jobs edge.
	ScheduledJobs []*ScheduledJob `json:"scheduled_jobs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedScheduledJobs map[string][]*ScheduledJob
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobTemplateEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ScheduledJobsOrErr returns the ScheduledJobs value or an error if the edge
// was not loaded in eager-loading.
func (e JobTemplateEdges) ScheduledJobsOrErr() ([]*ScheduledJob, error) {
	if e.loadedTypes[1] {
		return e.ScheduledJobs, nil
	}
	return nil, &NotLoadedError{edge: "scheduled_jobs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobtemplate.FieldCron:
			values[i] = &sql.NullScanner{S: new(models.Cron)}
		case jobtemplate.FieldTags, jobtemplate.FieldConfiguration:
			values[i] = new([]byte)
		case jobtemplate.FieldSystemOwned:
			values[i] = new(sql.NullBool)
		case jobtemplate.FieldID, jobtemplate.FieldCreatedBy, jobtemplate.FieldUpdatedBy, jobtemplate.FieldDeletedBy, jobtemplate.FieldDisplayID, jobtemplate.FieldOwnerID, jobtemplate.FieldTitle, jobtemplate.FieldDescription, jobtemplate.FieldPlatform, jobtemplate.FieldWindmillPath, jobtemplate.FieldDownloadURL:
			values[i] = new(sql.NullString)
		case jobtemplate.FieldCreatedAt, jobtemplate.FieldUpdatedAt, jobtemplate.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobTemplate fields.
func (jt *JobTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobtemplate.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				jt.ID = value.String
			}
		case jobtemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jt.CreatedAt = value.Time
			}
		case jobtemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				jt.UpdatedAt = value.Time
			}
		case jobtemplate.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				jt.CreatedBy = value.String
			}
		case jobtemplate.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				jt.UpdatedBy = value.String
			}
		case jobtemplate.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				jt.DeletedAt = value.Time
			}
		case jobtemplate.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				jt.DeletedBy = value.String
			}
		case jobtemplate.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				jt.DisplayID = value.String
			}
		case jobtemplate.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &jt.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case jobtemplate.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				jt.OwnerID = value.String
			}
		case jobtemplate.FieldSystemOwned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system_owned", values[i])
			} else if value.Valid {
				jt.SystemOwned = value.Bool
			}
		case jobtemplate.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				jt.Title = value.String
			}
		case jobtemplate.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				jt.Description = value.String
			}
		case jobtemplate.FieldPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform", values[i])
			} else if value.Valid {
				jt.Platform = enums.JobPlatformType(value.String)
			}
		case jobtemplate.FieldWindmillPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field windmill_path", values[i])
			} else if value.Valid {
				jt.WindmillPath = value.String
			}
		case jobtemplate.FieldDownloadURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field download_url", values[i])
			} else if value.Valid {
				jt.DownloadURL = value.String
			}
		case jobtemplate.FieldConfiguration:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field configuration", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &jt.Configuration); err != nil {
					return fmt.Errorf("unmarshal field configuration: %w", err)
				}
			}
		case jobtemplate.FieldCron:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field cron", values[i])
			} else if value.Valid {
				jt.Cron = new(models.Cron)
				*jt.Cron = *value.S.(*models.Cron)
			}
		default:
			jt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobTemplate.
// This includes values selected through modifiers, order, etc.
func (jt *JobTemplate) Value(name string) (ent.Value, error) {
	return jt.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the JobTemplate entity.
func (jt *JobTemplate) QueryOwner() *OrganizationQuery {
	return NewJobTemplateClient(jt.config).QueryOwner(jt)
}

// QueryScheduledJobs queries the "scheduled_jobs" edge of the JobTemplate entity.
func (jt *JobTemplate) QueryScheduledJobs() *ScheduledJobQuery {
	return NewJobTemplateClient(jt.config).QueryScheduledJobs(jt)
}

// Update returns a builder for updating this JobTemplate.
// Note that you need to call JobTemplate.Unwrap() before calling this method if this JobTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (jt *JobTemplate) Update() *JobTemplateUpdateOne {
	return NewJobTemplateClient(jt.config).UpdateOne(jt)
}

// Unwrap unwraps the JobTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jt *JobTemplate) Unwrap() *JobTemplate {
	_tx, ok := jt.config.driver.(*txDriver)
	if !ok {
		panic("generated: JobTemplate is not a transactional entity")
	}
	jt.config.driver = _tx.drv
	return jt
}

// String implements the fmt.Stringer.
func (jt *JobTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("JobTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(jt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(jt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(jt.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(jt.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(jt.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(jt.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(jt.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", jt.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(jt.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("system_owned=")
	builder.WriteString(fmt.Sprintf("%v", jt.SystemOwned))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(jt.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(jt.Description)
	builder.WriteString(", ")
	builder.WriteString("platform=")
	builder.WriteString(fmt.Sprintf("%v", jt.Platform))
	builder.WriteString(", ")
	builder.WriteString("windmill_path=")
	builder.WriteString(jt.WindmillPath)
	builder.WriteString(", ")
	builder.WriteString("download_url=")
	builder.WriteString(jt.DownloadURL)
	builder.WriteString(", ")
	builder.WriteString("configuration=")
	builder.WriteString(fmt.Sprintf("%v", jt.Configuration))
	builder.WriteString(", ")
	if v := jt.Cron; v != nil {
		builder.WriteString("cron=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedScheduledJobs returns the ScheduledJobs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (jt *JobTemplate) NamedScheduledJobs(name string) ([]*ScheduledJob, error) {
	if jt.Edges.namedScheduledJobs == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := jt.Edges.namedScheduledJobs[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (jt *JobTemplate) appendNamedScheduledJobs(name string, edges ...*ScheduledJob) {
	if jt.Edges.namedScheduledJobs == nil {
		jt.Edges.namedScheduledJobs = make(map[string][]*ScheduledJob)
	}
	if len(edges) == 0 {
		jt.Edges.namedScheduledJobs[name] = []*ScheduledJob{}
	} else {
		jt.Edges.namedScheduledJobs[name] = append(jt.Edges.namedScheduledJobs[name], edges...)
	}
}

// JobTemplates is a parsable slice of JobTemplate.
type JobTemplates []*JobTemplate
