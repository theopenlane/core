// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/trustcentercompliancehistory"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterComplianceHistoryUpdate is the builder for updating TrustCenterComplianceHistory entities.
type TrustCenterComplianceHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *TrustCenterComplianceHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrustCenterComplianceHistoryUpdate builder.
func (tcchu *TrustCenterComplianceHistoryUpdate) Where(ps ...predicate.TrustCenterComplianceHistory) *TrustCenterComplianceHistoryUpdate {
	tcchu.mutation.Where(ps...)
	return tcchu
}

// SetUpdatedAt sets the "updated_at" field.
func (tcchu *TrustCenterComplianceHistoryUpdate) SetUpdatedAt(t time.Time) *TrustCenterComplianceHistoryUpdate {
	tcchu.mutation.SetUpdatedAt(t)
	return tcchu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tcchu *TrustCenterComplianceHistoryUpdate) ClearUpdatedAt() *TrustCenterComplianceHistoryUpdate {
	tcchu.mutation.ClearUpdatedAt()
	return tcchu
}

// SetUpdatedBy sets the "updated_by" field.
func (tcchu *TrustCenterComplianceHistoryUpdate) SetUpdatedBy(s string) *TrustCenterComplianceHistoryUpdate {
	tcchu.mutation.SetUpdatedBy(s)
	return tcchu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcchu *TrustCenterComplianceHistoryUpdate) SetNillableUpdatedBy(s *string) *TrustCenterComplianceHistoryUpdate {
	if s != nil {
		tcchu.SetUpdatedBy(*s)
	}
	return tcchu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tcchu *TrustCenterComplianceHistoryUpdate) ClearUpdatedBy() *TrustCenterComplianceHistoryUpdate {
	tcchu.mutation.ClearUpdatedBy()
	return tcchu
}

// SetDeletedAt sets the "deleted_at" field.
func (tcchu *TrustCenterComplianceHistoryUpdate) SetDeletedAt(t time.Time) *TrustCenterComplianceHistoryUpdate {
	tcchu.mutation.SetDeletedAt(t)
	return tcchu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcchu *TrustCenterComplianceHistoryUpdate) SetNillableDeletedAt(t *time.Time) *TrustCenterComplianceHistoryUpdate {
	if t != nil {
		tcchu.SetDeletedAt(*t)
	}
	return tcchu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tcchu *TrustCenterComplianceHistoryUpdate) ClearDeletedAt() *TrustCenterComplianceHistoryUpdate {
	tcchu.mutation.ClearDeletedAt()
	return tcchu
}

// SetDeletedBy sets the "deleted_by" field.
func (tcchu *TrustCenterComplianceHistoryUpdate) SetDeletedBy(s string) *TrustCenterComplianceHistoryUpdate {
	tcchu.mutation.SetDeletedBy(s)
	return tcchu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcchu *TrustCenterComplianceHistoryUpdate) SetNillableDeletedBy(s *string) *TrustCenterComplianceHistoryUpdate {
	if s != nil {
		tcchu.SetDeletedBy(*s)
	}
	return tcchu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tcchu *TrustCenterComplianceHistoryUpdate) ClearDeletedBy() *TrustCenterComplianceHistoryUpdate {
	tcchu.mutation.ClearDeletedBy()
	return tcchu
}

// SetTags sets the "tags" field.
func (tcchu *TrustCenterComplianceHistoryUpdate) SetTags(s []string) *TrustCenterComplianceHistoryUpdate {
	tcchu.mutation.SetTags(s)
	return tcchu
}

// AppendTags appends s to the "tags" field.
func (tcchu *TrustCenterComplianceHistoryUpdate) AppendTags(s []string) *TrustCenterComplianceHistoryUpdate {
	tcchu.mutation.AppendTags(s)
	return tcchu
}

// ClearTags clears the value of the "tags" field.
func (tcchu *TrustCenterComplianceHistoryUpdate) ClearTags() *TrustCenterComplianceHistoryUpdate {
	tcchu.mutation.ClearTags()
	return tcchu
}

// Mutation returns the TrustCenterComplianceHistoryMutation object of the builder.
func (tcchu *TrustCenterComplianceHistoryUpdate) Mutation() *TrustCenterComplianceHistoryMutation {
	return tcchu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcchu *TrustCenterComplianceHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := tcchu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tcchu.sqlSave, tcchu.mutation, tcchu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcchu *TrustCenterComplianceHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := tcchu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcchu *TrustCenterComplianceHistoryUpdate) Exec(ctx context.Context) error {
	_, err := tcchu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcchu *TrustCenterComplianceHistoryUpdate) ExecX(ctx context.Context) {
	if err := tcchu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcchu *TrustCenterComplianceHistoryUpdate) defaults() error {
	if _, ok := tcchu.mutation.UpdatedAt(); !ok && !tcchu.mutation.UpdatedAtCleared() {
		if trustcentercompliancehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentercompliancehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentercompliancehistory.UpdateDefaultUpdatedAt()
		tcchu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcchu *TrustCenterComplianceHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterComplianceHistoryUpdate {
	tcchu.modifiers = append(tcchu.modifiers, modifiers...)
	return tcchu
}

func (tcchu *TrustCenterComplianceHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(trustcentercompliancehistory.Table, trustcentercompliancehistory.Columns, sqlgraph.NewFieldSpec(trustcentercompliancehistory.FieldID, field.TypeString))
	if ps := tcchu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tcchu.mutation.RefCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldRef, field.TypeString)
	}
	if tcchu.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tcchu.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcchu.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldUpdatedAt, field.TypeTime)
	}
	if tcchu.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tcchu.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if tcchu.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tcchu.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if tcchu.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tcchu.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldDeletedBy, field.TypeString, value)
	}
	if tcchu.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tcchu.mutation.Tags(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := tcchu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcentercompliancehistory.FieldTags, value)
		})
	}
	if tcchu.mutation.TagsCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldTags, field.TypeJSON)
	}
	_spec.Node.Schema = tcchu.schemaConfig.TrustCenterComplianceHistory
	ctx = internal.NewSchemaConfigContext(ctx, tcchu.schemaConfig)
	_spec.AddModifiers(tcchu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tcchu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentercompliancehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcchu.mutation.done = true
	return n, nil
}

// TrustCenterComplianceHistoryUpdateOne is the builder for updating a single TrustCenterComplianceHistory entity.
type TrustCenterComplianceHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrustCenterComplianceHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) SetUpdatedAt(t time.Time) *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.mutation.SetUpdatedAt(t)
	return tcchuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) ClearUpdatedAt() *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.mutation.ClearUpdatedAt()
	return tcchuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) SetUpdatedBy(s string) *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.mutation.SetUpdatedBy(s)
	return tcchuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) SetNillableUpdatedBy(s *string) *TrustCenterComplianceHistoryUpdateOne {
	if s != nil {
		tcchuo.SetUpdatedBy(*s)
	}
	return tcchuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) ClearUpdatedBy() *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.mutation.ClearUpdatedBy()
	return tcchuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) SetDeletedAt(t time.Time) *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.mutation.SetDeletedAt(t)
	return tcchuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *TrustCenterComplianceHistoryUpdateOne {
	if t != nil {
		tcchuo.SetDeletedAt(*t)
	}
	return tcchuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) ClearDeletedAt() *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.mutation.ClearDeletedAt()
	return tcchuo
}

// SetDeletedBy sets the "deleted_by" field.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) SetDeletedBy(s string) *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.mutation.SetDeletedBy(s)
	return tcchuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) SetNillableDeletedBy(s *string) *TrustCenterComplianceHistoryUpdateOne {
	if s != nil {
		tcchuo.SetDeletedBy(*s)
	}
	return tcchuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) ClearDeletedBy() *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.mutation.ClearDeletedBy()
	return tcchuo
}

// SetTags sets the "tags" field.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) SetTags(s []string) *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.mutation.SetTags(s)
	return tcchuo
}

// AppendTags appends s to the "tags" field.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) AppendTags(s []string) *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.mutation.AppendTags(s)
	return tcchuo
}

// ClearTags clears the value of the "tags" field.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) ClearTags() *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.mutation.ClearTags()
	return tcchuo
}

// Mutation returns the TrustCenterComplianceHistoryMutation object of the builder.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) Mutation() *TrustCenterComplianceHistoryMutation {
	return tcchuo.mutation
}

// Where appends a list predicates to the TrustCenterComplianceHistoryUpdate builder.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) Where(ps ...predicate.TrustCenterComplianceHistory) *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.mutation.Where(ps...)
	return tcchuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) Select(field string, fields ...string) *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.fields = append([]string{field}, fields...)
	return tcchuo
}

// Save executes the query and returns the updated TrustCenterComplianceHistory entity.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) Save(ctx context.Context) (*TrustCenterComplianceHistory, error) {
	if err := tcchuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tcchuo.sqlSave, tcchuo.mutation, tcchuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) SaveX(ctx context.Context) *TrustCenterComplianceHistory {
	node, err := tcchuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := tcchuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := tcchuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) defaults() error {
	if _, ok := tcchuo.mutation.UpdatedAt(); !ok && !tcchuo.mutation.UpdatedAtCleared() {
		if trustcentercompliancehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentercompliancehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentercompliancehistory.UpdateDefaultUpdatedAt()
		tcchuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tcchuo *TrustCenterComplianceHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterComplianceHistoryUpdateOne {
	tcchuo.modifiers = append(tcchuo.modifiers, modifiers...)
	return tcchuo
}

func (tcchuo *TrustCenterComplianceHistoryUpdateOne) sqlSave(ctx context.Context) (_node *TrustCenterComplianceHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(trustcentercompliancehistory.Table, trustcentercompliancehistory.Columns, sqlgraph.NewFieldSpec(trustcentercompliancehistory.FieldID, field.TypeString))
	id, ok := tcchuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TrustCenterComplianceHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcchuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcentercompliancehistory.FieldID)
		for _, f := range fields {
			if !trustcentercompliancehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != trustcentercompliancehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcchuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tcchuo.mutation.RefCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldRef, field.TypeString)
	}
	if tcchuo.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tcchuo.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcchuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldUpdatedAt, field.TypeTime)
	}
	if tcchuo.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tcchuo.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if tcchuo.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tcchuo.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if tcchuo.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tcchuo.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldDeletedBy, field.TypeString, value)
	}
	if tcchuo.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tcchuo.mutation.Tags(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := tcchuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcentercompliancehistory.FieldTags, value)
		})
	}
	if tcchuo.mutation.TagsCleared() {
		_spec.ClearField(trustcentercompliancehistory.FieldTags, field.TypeJSON)
	}
	_spec.Node.Schema = tcchuo.schemaConfig.TrustCenterComplianceHistory
	ctx = internal.NewSchemaConfigContext(ctx, tcchuo.schemaConfig)
	_spec.AddModifiers(tcchuo.modifiers...)
	_node = &TrustCenterComplianceHistory{config: tcchuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcchuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentercompliancehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcchuo.mutation.done = true
	return _node, nil
}
