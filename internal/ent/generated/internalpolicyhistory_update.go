// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicyhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// InternalPolicyHistoryUpdate is the builder for updating InternalPolicyHistory entities.
type InternalPolicyHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *InternalPolicyHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InternalPolicyHistoryUpdate builder.
func (iphu *InternalPolicyHistoryUpdate) Where(ps ...predicate.InternalPolicyHistory) *InternalPolicyHistoryUpdate {
	iphu.mutation.Where(ps...)
	return iphu
}

// SetUpdatedAt sets the "updated_at" field.
func (iphu *InternalPolicyHistoryUpdate) SetUpdatedAt(t time.Time) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetUpdatedAt(t)
	return iphu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (iphu *InternalPolicyHistoryUpdate) ClearUpdatedAt() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearUpdatedAt()
	return iphu
}

// SetUpdatedBy sets the "updated_by" field.
func (iphu *InternalPolicyHistoryUpdate) SetUpdatedBy(s string) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetUpdatedBy(s)
	return iphu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableUpdatedBy(s *string) *InternalPolicyHistoryUpdate {
	if s != nil {
		iphu.SetUpdatedBy(*s)
	}
	return iphu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (iphu *InternalPolicyHistoryUpdate) ClearUpdatedBy() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearUpdatedBy()
	return iphu
}

// SetDeletedAt sets the "deleted_at" field.
func (iphu *InternalPolicyHistoryUpdate) SetDeletedAt(t time.Time) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetDeletedAt(t)
	return iphu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableDeletedAt(t *time.Time) *InternalPolicyHistoryUpdate {
	if t != nil {
		iphu.SetDeletedAt(*t)
	}
	return iphu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iphu *InternalPolicyHistoryUpdate) ClearDeletedAt() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearDeletedAt()
	return iphu
}

// SetDeletedBy sets the "deleted_by" field.
func (iphu *InternalPolicyHistoryUpdate) SetDeletedBy(s string) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetDeletedBy(s)
	return iphu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableDeletedBy(s *string) *InternalPolicyHistoryUpdate {
	if s != nil {
		iphu.SetDeletedBy(*s)
	}
	return iphu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (iphu *InternalPolicyHistoryUpdate) ClearDeletedBy() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearDeletedBy()
	return iphu
}

// SetTags sets the "tags" field.
func (iphu *InternalPolicyHistoryUpdate) SetTags(s []string) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetTags(s)
	return iphu
}

// AppendTags appends s to the "tags" field.
func (iphu *InternalPolicyHistoryUpdate) AppendTags(s []string) *InternalPolicyHistoryUpdate {
	iphu.mutation.AppendTags(s)
	return iphu
}

// ClearTags clears the value of the "tags" field.
func (iphu *InternalPolicyHistoryUpdate) ClearTags() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearTags()
	return iphu
}

// SetRevision sets the "revision" field.
func (iphu *InternalPolicyHistoryUpdate) SetRevision(s string) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetRevision(s)
	return iphu
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableRevision(s *string) *InternalPolicyHistoryUpdate {
	if s != nil {
		iphu.SetRevision(*s)
	}
	return iphu
}

// ClearRevision clears the value of the "revision" field.
func (iphu *InternalPolicyHistoryUpdate) ClearRevision() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearRevision()
	return iphu
}

// SetOwnerID sets the "owner_id" field.
func (iphu *InternalPolicyHistoryUpdate) SetOwnerID(s string) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetOwnerID(s)
	return iphu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableOwnerID(s *string) *InternalPolicyHistoryUpdate {
	if s != nil {
		iphu.SetOwnerID(*s)
	}
	return iphu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (iphu *InternalPolicyHistoryUpdate) ClearOwnerID() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearOwnerID()
	return iphu
}

// SetName sets the "name" field.
func (iphu *InternalPolicyHistoryUpdate) SetName(s string) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetName(s)
	return iphu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableName(s *string) *InternalPolicyHistoryUpdate {
	if s != nil {
		iphu.SetName(*s)
	}
	return iphu
}

// SetStatus sets the "status" field.
func (iphu *InternalPolicyHistoryUpdate) SetStatus(es enums.DocumentStatus) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetStatus(es)
	return iphu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableStatus(es *enums.DocumentStatus) *InternalPolicyHistoryUpdate {
	if es != nil {
		iphu.SetStatus(*es)
	}
	return iphu
}

// ClearStatus clears the value of the "status" field.
func (iphu *InternalPolicyHistoryUpdate) ClearStatus() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearStatus()
	return iphu
}

// SetPolicyType sets the "policy_type" field.
func (iphu *InternalPolicyHistoryUpdate) SetPolicyType(s string) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetPolicyType(s)
	return iphu
}

// SetNillablePolicyType sets the "policy_type" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillablePolicyType(s *string) *InternalPolicyHistoryUpdate {
	if s != nil {
		iphu.SetPolicyType(*s)
	}
	return iphu
}

// ClearPolicyType clears the value of the "policy_type" field.
func (iphu *InternalPolicyHistoryUpdate) ClearPolicyType() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearPolicyType()
	return iphu
}

// SetDetails sets the "details" field.
func (iphu *InternalPolicyHistoryUpdate) SetDetails(s string) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetDetails(s)
	return iphu
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableDetails(s *string) *InternalPolicyHistoryUpdate {
	if s != nil {
		iphu.SetDetails(*s)
	}
	return iphu
}

// ClearDetails clears the value of the "details" field.
func (iphu *InternalPolicyHistoryUpdate) ClearDetails() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearDetails()
	return iphu
}

// SetApprovalRequired sets the "approval_required" field.
func (iphu *InternalPolicyHistoryUpdate) SetApprovalRequired(b bool) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetApprovalRequired(b)
	return iphu
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableApprovalRequired(b *bool) *InternalPolicyHistoryUpdate {
	if b != nil {
		iphu.SetApprovalRequired(*b)
	}
	return iphu
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (iphu *InternalPolicyHistoryUpdate) ClearApprovalRequired() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearApprovalRequired()
	return iphu
}

// SetReviewDue sets the "review_due" field.
func (iphu *InternalPolicyHistoryUpdate) SetReviewDue(t time.Time) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetReviewDue(t)
	return iphu
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableReviewDue(t *time.Time) *InternalPolicyHistoryUpdate {
	if t != nil {
		iphu.SetReviewDue(*t)
	}
	return iphu
}

// ClearReviewDue clears the value of the "review_due" field.
func (iphu *InternalPolicyHistoryUpdate) ClearReviewDue() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearReviewDue()
	return iphu
}

// SetReviewFrequency sets the "review_frequency" field.
func (iphu *InternalPolicyHistoryUpdate) SetReviewFrequency(e enums.Frequency) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetReviewFrequency(e)
	return iphu
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableReviewFrequency(e *enums.Frequency) *InternalPolicyHistoryUpdate {
	if e != nil {
		iphu.SetReviewFrequency(*e)
	}
	return iphu
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (iphu *InternalPolicyHistoryUpdate) ClearReviewFrequency() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearReviewFrequency()
	return iphu
}

// SetApproverID sets the "approver_id" field.
func (iphu *InternalPolicyHistoryUpdate) SetApproverID(s string) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetApproverID(s)
	return iphu
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableApproverID(s *string) *InternalPolicyHistoryUpdate {
	if s != nil {
		iphu.SetApproverID(*s)
	}
	return iphu
}

// ClearApproverID clears the value of the "approver_id" field.
func (iphu *InternalPolicyHistoryUpdate) ClearApproverID() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearApproverID()
	return iphu
}

// SetDelegateID sets the "delegate_id" field.
func (iphu *InternalPolicyHistoryUpdate) SetDelegateID(s string) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetDelegateID(s)
	return iphu
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableDelegateID(s *string) *InternalPolicyHistoryUpdate {
	if s != nil {
		iphu.SetDelegateID(*s)
	}
	return iphu
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (iphu *InternalPolicyHistoryUpdate) ClearDelegateID() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearDelegateID()
	return iphu
}

// SetSummary sets the "summary" field.
func (iphu *InternalPolicyHistoryUpdate) SetSummary(s string) *InternalPolicyHistoryUpdate {
	iphu.mutation.SetSummary(s)
	return iphu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (iphu *InternalPolicyHistoryUpdate) SetNillableSummary(s *string) *InternalPolicyHistoryUpdate {
	if s != nil {
		iphu.SetSummary(*s)
	}
	return iphu
}

// ClearSummary clears the value of the "summary" field.
func (iphu *InternalPolicyHistoryUpdate) ClearSummary() *InternalPolicyHistoryUpdate {
	iphu.mutation.ClearSummary()
	return iphu
}

// Mutation returns the InternalPolicyHistoryMutation object of the builder.
func (iphu *InternalPolicyHistoryUpdate) Mutation() *InternalPolicyHistoryMutation {
	return iphu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iphu *InternalPolicyHistoryUpdate) Save(ctx context.Context) (int, error) {
	iphu.defaults()
	return withHooks(ctx, iphu.sqlSave, iphu.mutation, iphu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iphu *InternalPolicyHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := iphu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iphu *InternalPolicyHistoryUpdate) Exec(ctx context.Context) error {
	_, err := iphu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iphu *InternalPolicyHistoryUpdate) ExecX(ctx context.Context) {
	if err := iphu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iphu *InternalPolicyHistoryUpdate) defaults() {
	if _, ok := iphu.mutation.UpdatedAt(); !ok && !iphu.mutation.UpdatedAtCleared() {
		v := internalpolicyhistory.UpdateDefaultUpdatedAt()
		iphu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iphu *InternalPolicyHistoryUpdate) check() error {
	if v, ok := iphu.mutation.Status(); ok {
		if err := internalpolicyhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "InternalPolicyHistory.status": %w`, err)}
		}
	}
	if v, ok := iphu.mutation.ReviewFrequency(); ok {
		if err := internalpolicyhistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "InternalPolicyHistory.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iphu *InternalPolicyHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InternalPolicyHistoryUpdate {
	iphu.modifiers = append(iphu.modifiers, modifiers...)
	return iphu
}

func (iphu *InternalPolicyHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iphu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(internalpolicyhistory.Table, internalpolicyhistory.Columns, sqlgraph.NewFieldSpec(internalpolicyhistory.FieldID, field.TypeString))
	if ps := iphu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if iphu.mutation.RefCleared() {
		_spec.ClearField(internalpolicyhistory.FieldRef, field.TypeString)
	}
	if iphu.mutation.CreatedAtCleared() {
		_spec.ClearField(internalpolicyhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := iphu.mutation.UpdatedAt(); ok {
		_spec.SetField(internalpolicyhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if iphu.mutation.UpdatedAtCleared() {
		_spec.ClearField(internalpolicyhistory.FieldUpdatedAt, field.TypeTime)
	}
	if iphu.mutation.CreatedByCleared() {
		_spec.ClearField(internalpolicyhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := iphu.mutation.UpdatedBy(); ok {
		_spec.SetField(internalpolicyhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if iphu.mutation.UpdatedByCleared() {
		_spec.ClearField(internalpolicyhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := iphu.mutation.DeletedAt(); ok {
		_spec.SetField(internalpolicyhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if iphu.mutation.DeletedAtCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iphu.mutation.DeletedBy(); ok {
		_spec.SetField(internalpolicyhistory.FieldDeletedBy, field.TypeString, value)
	}
	if iphu.mutation.DeletedByCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := iphu.mutation.Tags(); ok {
		_spec.SetField(internalpolicyhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := iphu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldTags, value)
		})
	}
	if iphu.mutation.TagsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := iphu.mutation.Revision(); ok {
		_spec.SetField(internalpolicyhistory.FieldRevision, field.TypeString, value)
	}
	if iphu.mutation.RevisionCleared() {
		_spec.ClearField(internalpolicyhistory.FieldRevision, field.TypeString)
	}
	if value, ok := iphu.mutation.OwnerID(); ok {
		_spec.SetField(internalpolicyhistory.FieldOwnerID, field.TypeString, value)
	}
	if iphu.mutation.OwnerIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := iphu.mutation.Name(); ok {
		_spec.SetField(internalpolicyhistory.FieldName, field.TypeString, value)
	}
	if value, ok := iphu.mutation.Status(); ok {
		_spec.SetField(internalpolicyhistory.FieldStatus, field.TypeEnum, value)
	}
	if iphu.mutation.StatusCleared() {
		_spec.ClearField(internalpolicyhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := iphu.mutation.PolicyType(); ok {
		_spec.SetField(internalpolicyhistory.FieldPolicyType, field.TypeString, value)
	}
	if iphu.mutation.PolicyTypeCleared() {
		_spec.ClearField(internalpolicyhistory.FieldPolicyType, field.TypeString)
	}
	if value, ok := iphu.mutation.Details(); ok {
		_spec.SetField(internalpolicyhistory.FieldDetails, field.TypeString, value)
	}
	if iphu.mutation.DetailsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDetails, field.TypeString)
	}
	if value, ok := iphu.mutation.ApprovalRequired(); ok {
		_spec.SetField(internalpolicyhistory.FieldApprovalRequired, field.TypeBool, value)
	}
	if iphu.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(internalpolicyhistory.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := iphu.mutation.ReviewDue(); ok {
		_spec.SetField(internalpolicyhistory.FieldReviewDue, field.TypeTime, value)
	}
	if iphu.mutation.ReviewDueCleared() {
		_spec.ClearField(internalpolicyhistory.FieldReviewDue, field.TypeTime)
	}
	if value, ok := iphu.mutation.ReviewFrequency(); ok {
		_spec.SetField(internalpolicyhistory.FieldReviewFrequency, field.TypeEnum, value)
	}
	if iphu.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(internalpolicyhistory.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := iphu.mutation.ApproverID(); ok {
		_spec.SetField(internalpolicyhistory.FieldApproverID, field.TypeString, value)
	}
	if iphu.mutation.ApproverIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldApproverID, field.TypeString)
	}
	if value, ok := iphu.mutation.DelegateID(); ok {
		_spec.SetField(internalpolicyhistory.FieldDelegateID, field.TypeString, value)
	}
	if iphu.mutation.DelegateIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDelegateID, field.TypeString)
	}
	if value, ok := iphu.mutation.Summary(); ok {
		_spec.SetField(internalpolicyhistory.FieldSummary, field.TypeString, value)
	}
	if iphu.mutation.SummaryCleared() {
		_spec.ClearField(internalpolicyhistory.FieldSummary, field.TypeString)
	}
	_spec.Node.Schema = iphu.schemaConfig.InternalPolicyHistory
	ctx = internal.NewSchemaConfigContext(ctx, iphu.schemaConfig)
	_spec.AddModifiers(iphu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, iphu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internalpolicyhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iphu.mutation.done = true
	return n, nil
}

// InternalPolicyHistoryUpdateOne is the builder for updating a single InternalPolicyHistory entity.
type InternalPolicyHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InternalPolicyHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetUpdatedAt(t time.Time) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetUpdatedAt(t)
	return iphuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearUpdatedAt() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearUpdatedAt()
	return iphuo
}

// SetUpdatedBy sets the "updated_by" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetUpdatedBy(s string) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetUpdatedBy(s)
	return iphuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableUpdatedBy(s *string) *InternalPolicyHistoryUpdateOne {
	if s != nil {
		iphuo.SetUpdatedBy(*s)
	}
	return iphuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearUpdatedBy() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearUpdatedBy()
	return iphuo
}

// SetDeletedAt sets the "deleted_at" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetDeletedAt(t time.Time) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetDeletedAt(t)
	return iphuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *InternalPolicyHistoryUpdateOne {
	if t != nil {
		iphuo.SetDeletedAt(*t)
	}
	return iphuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearDeletedAt() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearDeletedAt()
	return iphuo
}

// SetDeletedBy sets the "deleted_by" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetDeletedBy(s string) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetDeletedBy(s)
	return iphuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableDeletedBy(s *string) *InternalPolicyHistoryUpdateOne {
	if s != nil {
		iphuo.SetDeletedBy(*s)
	}
	return iphuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearDeletedBy() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearDeletedBy()
	return iphuo
}

// SetTags sets the "tags" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetTags(s []string) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetTags(s)
	return iphuo
}

// AppendTags appends s to the "tags" field.
func (iphuo *InternalPolicyHistoryUpdateOne) AppendTags(s []string) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.AppendTags(s)
	return iphuo
}

// ClearTags clears the value of the "tags" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearTags() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearTags()
	return iphuo
}

// SetRevision sets the "revision" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetRevision(s string) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetRevision(s)
	return iphuo
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableRevision(s *string) *InternalPolicyHistoryUpdateOne {
	if s != nil {
		iphuo.SetRevision(*s)
	}
	return iphuo
}

// ClearRevision clears the value of the "revision" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearRevision() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearRevision()
	return iphuo
}

// SetOwnerID sets the "owner_id" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetOwnerID(s string) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetOwnerID(s)
	return iphuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableOwnerID(s *string) *InternalPolicyHistoryUpdateOne {
	if s != nil {
		iphuo.SetOwnerID(*s)
	}
	return iphuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearOwnerID() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearOwnerID()
	return iphuo
}

// SetName sets the "name" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetName(s string) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetName(s)
	return iphuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableName(s *string) *InternalPolicyHistoryUpdateOne {
	if s != nil {
		iphuo.SetName(*s)
	}
	return iphuo
}

// SetStatus sets the "status" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetStatus(es enums.DocumentStatus) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetStatus(es)
	return iphuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableStatus(es *enums.DocumentStatus) *InternalPolicyHistoryUpdateOne {
	if es != nil {
		iphuo.SetStatus(*es)
	}
	return iphuo
}

// ClearStatus clears the value of the "status" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearStatus() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearStatus()
	return iphuo
}

// SetPolicyType sets the "policy_type" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetPolicyType(s string) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetPolicyType(s)
	return iphuo
}

// SetNillablePolicyType sets the "policy_type" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillablePolicyType(s *string) *InternalPolicyHistoryUpdateOne {
	if s != nil {
		iphuo.SetPolicyType(*s)
	}
	return iphuo
}

// ClearPolicyType clears the value of the "policy_type" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearPolicyType() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearPolicyType()
	return iphuo
}

// SetDetails sets the "details" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetDetails(s string) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetDetails(s)
	return iphuo
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableDetails(s *string) *InternalPolicyHistoryUpdateOne {
	if s != nil {
		iphuo.SetDetails(*s)
	}
	return iphuo
}

// ClearDetails clears the value of the "details" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearDetails() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearDetails()
	return iphuo
}

// SetApprovalRequired sets the "approval_required" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetApprovalRequired(b bool) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetApprovalRequired(b)
	return iphuo
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableApprovalRequired(b *bool) *InternalPolicyHistoryUpdateOne {
	if b != nil {
		iphuo.SetApprovalRequired(*b)
	}
	return iphuo
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearApprovalRequired() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearApprovalRequired()
	return iphuo
}

// SetReviewDue sets the "review_due" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetReviewDue(t time.Time) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetReviewDue(t)
	return iphuo
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableReviewDue(t *time.Time) *InternalPolicyHistoryUpdateOne {
	if t != nil {
		iphuo.SetReviewDue(*t)
	}
	return iphuo
}

// ClearReviewDue clears the value of the "review_due" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearReviewDue() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearReviewDue()
	return iphuo
}

// SetReviewFrequency sets the "review_frequency" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetReviewFrequency(e enums.Frequency) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetReviewFrequency(e)
	return iphuo
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableReviewFrequency(e *enums.Frequency) *InternalPolicyHistoryUpdateOne {
	if e != nil {
		iphuo.SetReviewFrequency(*e)
	}
	return iphuo
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearReviewFrequency() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearReviewFrequency()
	return iphuo
}

// SetApproverID sets the "approver_id" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetApproverID(s string) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetApproverID(s)
	return iphuo
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableApproverID(s *string) *InternalPolicyHistoryUpdateOne {
	if s != nil {
		iphuo.SetApproverID(*s)
	}
	return iphuo
}

// ClearApproverID clears the value of the "approver_id" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearApproverID() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearApproverID()
	return iphuo
}

// SetDelegateID sets the "delegate_id" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetDelegateID(s string) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetDelegateID(s)
	return iphuo
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableDelegateID(s *string) *InternalPolicyHistoryUpdateOne {
	if s != nil {
		iphuo.SetDelegateID(*s)
	}
	return iphuo
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearDelegateID() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearDelegateID()
	return iphuo
}

// SetSummary sets the "summary" field.
func (iphuo *InternalPolicyHistoryUpdateOne) SetSummary(s string) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.SetSummary(s)
	return iphuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (iphuo *InternalPolicyHistoryUpdateOne) SetNillableSummary(s *string) *InternalPolicyHistoryUpdateOne {
	if s != nil {
		iphuo.SetSummary(*s)
	}
	return iphuo
}

// ClearSummary clears the value of the "summary" field.
func (iphuo *InternalPolicyHistoryUpdateOne) ClearSummary() *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.ClearSummary()
	return iphuo
}

// Mutation returns the InternalPolicyHistoryMutation object of the builder.
func (iphuo *InternalPolicyHistoryUpdateOne) Mutation() *InternalPolicyHistoryMutation {
	return iphuo.mutation
}

// Where appends a list predicates to the InternalPolicyHistoryUpdate builder.
func (iphuo *InternalPolicyHistoryUpdateOne) Where(ps ...predicate.InternalPolicyHistory) *InternalPolicyHistoryUpdateOne {
	iphuo.mutation.Where(ps...)
	return iphuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iphuo *InternalPolicyHistoryUpdateOne) Select(field string, fields ...string) *InternalPolicyHistoryUpdateOne {
	iphuo.fields = append([]string{field}, fields...)
	return iphuo
}

// Save executes the query and returns the updated InternalPolicyHistory entity.
func (iphuo *InternalPolicyHistoryUpdateOne) Save(ctx context.Context) (*InternalPolicyHistory, error) {
	iphuo.defaults()
	return withHooks(ctx, iphuo.sqlSave, iphuo.mutation, iphuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iphuo *InternalPolicyHistoryUpdateOne) SaveX(ctx context.Context) *InternalPolicyHistory {
	node, err := iphuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iphuo *InternalPolicyHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := iphuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iphuo *InternalPolicyHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := iphuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iphuo *InternalPolicyHistoryUpdateOne) defaults() {
	if _, ok := iphuo.mutation.UpdatedAt(); !ok && !iphuo.mutation.UpdatedAtCleared() {
		v := internalpolicyhistory.UpdateDefaultUpdatedAt()
		iphuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iphuo *InternalPolicyHistoryUpdateOne) check() error {
	if v, ok := iphuo.mutation.Status(); ok {
		if err := internalpolicyhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "InternalPolicyHistory.status": %w`, err)}
		}
	}
	if v, ok := iphuo.mutation.ReviewFrequency(); ok {
		if err := internalpolicyhistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "InternalPolicyHistory.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (iphuo *InternalPolicyHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InternalPolicyHistoryUpdateOne {
	iphuo.modifiers = append(iphuo.modifiers, modifiers...)
	return iphuo
}

func (iphuo *InternalPolicyHistoryUpdateOne) sqlSave(ctx context.Context) (_node *InternalPolicyHistory, err error) {
	if err := iphuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(internalpolicyhistory.Table, internalpolicyhistory.Columns, sqlgraph.NewFieldSpec(internalpolicyhistory.FieldID, field.TypeString))
	id, ok := iphuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "InternalPolicyHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iphuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, internalpolicyhistory.FieldID)
		for _, f := range fields {
			if !internalpolicyhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != internalpolicyhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iphuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if iphuo.mutation.RefCleared() {
		_spec.ClearField(internalpolicyhistory.FieldRef, field.TypeString)
	}
	if iphuo.mutation.CreatedAtCleared() {
		_spec.ClearField(internalpolicyhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := iphuo.mutation.UpdatedAt(); ok {
		_spec.SetField(internalpolicyhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if iphuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(internalpolicyhistory.FieldUpdatedAt, field.TypeTime)
	}
	if iphuo.mutation.CreatedByCleared() {
		_spec.ClearField(internalpolicyhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := iphuo.mutation.UpdatedBy(); ok {
		_spec.SetField(internalpolicyhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if iphuo.mutation.UpdatedByCleared() {
		_spec.ClearField(internalpolicyhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := iphuo.mutation.DeletedAt(); ok {
		_spec.SetField(internalpolicyhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if iphuo.mutation.DeletedAtCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := iphuo.mutation.DeletedBy(); ok {
		_spec.SetField(internalpolicyhistory.FieldDeletedBy, field.TypeString, value)
	}
	if iphuo.mutation.DeletedByCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := iphuo.mutation.Tags(); ok {
		_spec.SetField(internalpolicyhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := iphuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldTags, value)
		})
	}
	if iphuo.mutation.TagsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := iphuo.mutation.Revision(); ok {
		_spec.SetField(internalpolicyhistory.FieldRevision, field.TypeString, value)
	}
	if iphuo.mutation.RevisionCleared() {
		_spec.ClearField(internalpolicyhistory.FieldRevision, field.TypeString)
	}
	if value, ok := iphuo.mutation.OwnerID(); ok {
		_spec.SetField(internalpolicyhistory.FieldOwnerID, field.TypeString, value)
	}
	if iphuo.mutation.OwnerIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := iphuo.mutation.Name(); ok {
		_spec.SetField(internalpolicyhistory.FieldName, field.TypeString, value)
	}
	if value, ok := iphuo.mutation.Status(); ok {
		_spec.SetField(internalpolicyhistory.FieldStatus, field.TypeEnum, value)
	}
	if iphuo.mutation.StatusCleared() {
		_spec.ClearField(internalpolicyhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := iphuo.mutation.PolicyType(); ok {
		_spec.SetField(internalpolicyhistory.FieldPolicyType, field.TypeString, value)
	}
	if iphuo.mutation.PolicyTypeCleared() {
		_spec.ClearField(internalpolicyhistory.FieldPolicyType, field.TypeString)
	}
	if value, ok := iphuo.mutation.Details(); ok {
		_spec.SetField(internalpolicyhistory.FieldDetails, field.TypeString, value)
	}
	if iphuo.mutation.DetailsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDetails, field.TypeString)
	}
	if value, ok := iphuo.mutation.ApprovalRequired(); ok {
		_spec.SetField(internalpolicyhistory.FieldApprovalRequired, field.TypeBool, value)
	}
	if iphuo.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(internalpolicyhistory.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := iphuo.mutation.ReviewDue(); ok {
		_spec.SetField(internalpolicyhistory.FieldReviewDue, field.TypeTime, value)
	}
	if iphuo.mutation.ReviewDueCleared() {
		_spec.ClearField(internalpolicyhistory.FieldReviewDue, field.TypeTime)
	}
	if value, ok := iphuo.mutation.ReviewFrequency(); ok {
		_spec.SetField(internalpolicyhistory.FieldReviewFrequency, field.TypeEnum, value)
	}
	if iphuo.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(internalpolicyhistory.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := iphuo.mutation.ApproverID(); ok {
		_spec.SetField(internalpolicyhistory.FieldApproverID, field.TypeString, value)
	}
	if iphuo.mutation.ApproverIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldApproverID, field.TypeString)
	}
	if value, ok := iphuo.mutation.DelegateID(); ok {
		_spec.SetField(internalpolicyhistory.FieldDelegateID, field.TypeString, value)
	}
	if iphuo.mutation.DelegateIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDelegateID, field.TypeString)
	}
	if value, ok := iphuo.mutation.Summary(); ok {
		_spec.SetField(internalpolicyhistory.FieldSummary, field.TypeString, value)
	}
	if iphuo.mutation.SummaryCleared() {
		_spec.ClearField(internalpolicyhistory.FieldSummary, field.TypeString)
	}
	_spec.Node.Schema = iphuo.schemaConfig.InternalPolicyHistory
	ctx = internal.NewSchemaConfigContext(ctx, iphuo.schemaConfig)
	_spec.AddModifiers(iphuo.modifiers...)
	_node = &InternalPolicyHistory{config: iphuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iphuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internalpolicyhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iphuo.mutation.done = true
	return _node, nil
}
