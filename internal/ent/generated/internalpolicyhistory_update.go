// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicyhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// InternalPolicyHistoryUpdate is the builder for updating InternalPolicyHistory entities.
type InternalPolicyHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *InternalPolicyHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the InternalPolicyHistoryUpdate builder.
func (_u *InternalPolicyHistoryUpdate) Where(ps ...predicate.InternalPolicyHistory) *InternalPolicyHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *InternalPolicyHistoryUpdate) SetUpdatedAt(v time.Time) *InternalPolicyHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *InternalPolicyHistoryUpdate) ClearUpdatedAt() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *InternalPolicyHistoryUpdate) SetUpdatedBy(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableUpdatedBy(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *InternalPolicyHistoryUpdate) ClearUpdatedBy() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *InternalPolicyHistoryUpdate) SetDeletedAt(v time.Time) *InternalPolicyHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableDeletedAt(v *time.Time) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *InternalPolicyHistoryUpdate) ClearDeletedAt() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *InternalPolicyHistoryUpdate) SetDeletedBy(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableDeletedBy(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *InternalPolicyHistoryUpdate) ClearDeletedBy() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *InternalPolicyHistoryUpdate) SetTags(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *InternalPolicyHistoryUpdate) AppendTags(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *InternalPolicyHistoryUpdate) ClearTags() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *InternalPolicyHistoryUpdate) SetRevision(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableRevision(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *InternalPolicyHistoryUpdate) ClearRevision() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearRevision()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *InternalPolicyHistoryUpdate) SetOwnerID(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableOwnerID(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *InternalPolicyHistoryUpdate) ClearOwnerID() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *InternalPolicyHistoryUpdate) SetInternalNotes(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableInternalNotes(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *InternalPolicyHistoryUpdate) ClearInternalNotes() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *InternalPolicyHistoryUpdate) SetSystemInternalID(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableSystemInternalID(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *InternalPolicyHistoryUpdate) ClearSystemInternalID() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetName sets the "name" field.
func (_u *InternalPolicyHistoryUpdate) SetName(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableName(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *InternalPolicyHistoryUpdate) SetStatus(v enums.DocumentStatus) *InternalPolicyHistoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableStatus(v *enums.DocumentStatus) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *InternalPolicyHistoryUpdate) ClearStatus() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetPolicyType sets the "policy_type" field.
func (_u *InternalPolicyHistoryUpdate) SetPolicyType(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetPolicyType(v)
	return _u
}

// SetNillablePolicyType sets the "policy_type" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillablePolicyType(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetPolicyType(*v)
	}
	return _u
}

// ClearPolicyType clears the value of the "policy_type" field.
func (_u *InternalPolicyHistoryUpdate) ClearPolicyType() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearPolicyType()
	return _u
}

// SetDetails sets the "details" field.
func (_u *InternalPolicyHistoryUpdate) SetDetails(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableDetails(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *InternalPolicyHistoryUpdate) ClearDetails() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearDetails()
	return _u
}

// SetApprovalRequired sets the "approval_required" field.
func (_u *InternalPolicyHistoryUpdate) SetApprovalRequired(v bool) *InternalPolicyHistoryUpdate {
	_u.mutation.SetApprovalRequired(v)
	return _u
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableApprovalRequired(v *bool) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetApprovalRequired(*v)
	}
	return _u
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (_u *InternalPolicyHistoryUpdate) ClearApprovalRequired() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearApprovalRequired()
	return _u
}

// SetReviewDue sets the "review_due" field.
func (_u *InternalPolicyHistoryUpdate) SetReviewDue(v time.Time) *InternalPolicyHistoryUpdate {
	_u.mutation.SetReviewDue(v)
	return _u
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableReviewDue(v *time.Time) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetReviewDue(*v)
	}
	return _u
}

// ClearReviewDue clears the value of the "review_due" field.
func (_u *InternalPolicyHistoryUpdate) ClearReviewDue() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearReviewDue()
	return _u
}

// SetReviewFrequency sets the "review_frequency" field.
func (_u *InternalPolicyHistoryUpdate) SetReviewFrequency(v enums.Frequency) *InternalPolicyHistoryUpdate {
	_u.mutation.SetReviewFrequency(v)
	return _u
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableReviewFrequency(v *enums.Frequency) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetReviewFrequency(*v)
	}
	return _u
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (_u *InternalPolicyHistoryUpdate) ClearReviewFrequency() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearReviewFrequency()
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *InternalPolicyHistoryUpdate) SetApproverID(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableApproverID(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *InternalPolicyHistoryUpdate) ClearApproverID() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearApproverID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *InternalPolicyHistoryUpdate) SetDelegateID(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableDelegateID(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *InternalPolicyHistoryUpdate) ClearDelegateID() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetSummary sets the "summary" field.
func (_u *InternalPolicyHistoryUpdate) SetSummary(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableSummary(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *InternalPolicyHistoryUpdate) ClearSummary() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearSummary()
	return _u
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) SetTagSuggestions(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetTagSuggestions(v)
	return _u
}

// AppendTagSuggestions appends value to the "tag_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) AppendTagSuggestions(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.AppendTagSuggestions(v)
	return _u
}

// ClearTagSuggestions clears the value of the "tag_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) ClearTagSuggestions() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearTagSuggestions()
	return _u
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) SetDismissedTagSuggestions(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetDismissedTagSuggestions(v)
	return _u
}

// AppendDismissedTagSuggestions appends value to the "dismissed_tag_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) AppendDismissedTagSuggestions(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.AppendDismissedTagSuggestions(v)
	return _u
}

// ClearDismissedTagSuggestions clears the value of the "dismissed_tag_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) ClearDismissedTagSuggestions() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearDismissedTagSuggestions()
	return _u
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) SetControlSuggestions(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetControlSuggestions(v)
	return _u
}

// AppendControlSuggestions appends value to the "control_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) AppendControlSuggestions(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.AppendControlSuggestions(v)
	return _u
}

// ClearControlSuggestions clears the value of the "control_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) ClearControlSuggestions() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearControlSuggestions()
	return _u
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) SetDismissedControlSuggestions(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetDismissedControlSuggestions(v)
	return _u
}

// AppendDismissedControlSuggestions appends value to the "dismissed_control_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) AppendDismissedControlSuggestions(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.AppendDismissedControlSuggestions(v)
	return _u
}

// ClearDismissedControlSuggestions clears the value of the "dismissed_control_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) ClearDismissedControlSuggestions() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearDismissedControlSuggestions()
	return _u
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) SetImprovementSuggestions(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetImprovementSuggestions(v)
	return _u
}

// AppendImprovementSuggestions appends value to the "improvement_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) AppendImprovementSuggestions(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.AppendImprovementSuggestions(v)
	return _u
}

// ClearImprovementSuggestions clears the value of the "improvement_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) ClearImprovementSuggestions() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearImprovementSuggestions()
	return _u
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) SetDismissedImprovementSuggestions(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetDismissedImprovementSuggestions(v)
	return _u
}

// AppendDismissedImprovementSuggestions appends value to the "dismissed_improvement_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) AppendDismissedImprovementSuggestions(v []string) *InternalPolicyHistoryUpdate {
	_u.mutation.AppendDismissedImprovementSuggestions(v)
	return _u
}

// ClearDismissedImprovementSuggestions clears the value of the "dismissed_improvement_suggestions" field.
func (_u *InternalPolicyHistoryUpdate) ClearDismissedImprovementSuggestions() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearDismissedImprovementSuggestions()
	return _u
}

// SetURL sets the "url" field.
func (_u *InternalPolicyHistoryUpdate) SetURL(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableURL(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *InternalPolicyHistoryUpdate) ClearURL() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearURL()
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *InternalPolicyHistoryUpdate) SetFileID(v string) *InternalPolicyHistoryUpdate {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdate) SetNillableFileID(v *string) *InternalPolicyHistoryUpdate {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// ClearFileID clears the value of the "file_id" field.
func (_u *InternalPolicyHistoryUpdate) ClearFileID() *InternalPolicyHistoryUpdate {
	_u.mutation.ClearFileID()
	return _u
}

// Mutation returns the InternalPolicyHistoryMutation object of the builder.
func (_u *InternalPolicyHistoryUpdate) Mutation() *InternalPolicyHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *InternalPolicyHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InternalPolicyHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *InternalPolicyHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InternalPolicyHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *InternalPolicyHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if internalpolicyhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized internalpolicyhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := internalpolicyhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *InternalPolicyHistoryUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := internalpolicyhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "InternalPolicyHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewFrequency(); ok {
		if err := internalpolicyhistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "InternalPolicyHistory.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *InternalPolicyHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InternalPolicyHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *InternalPolicyHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(internalpolicyhistory.Table, internalpolicyhistory.Columns, sqlgraph.NewFieldSpec(internalpolicyhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(internalpolicyhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(internalpolicyhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(internalpolicyhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(internalpolicyhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(internalpolicyhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(internalpolicyhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(internalpolicyhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(internalpolicyhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(internalpolicyhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(internalpolicyhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(internalpolicyhistory.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(internalpolicyhistory.FieldRevision, field.TypeString)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(internalpolicyhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldOwnerID, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(internalpolicyhistory.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(internalpolicyhistory.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(internalpolicyhistory.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(internalpolicyhistory.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(internalpolicyhistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(internalpolicyhistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(internalpolicyhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.PolicyType(); ok {
		_spec.SetField(internalpolicyhistory.FieldPolicyType, field.TypeString, value)
	}
	if _u.mutation.PolicyTypeCleared() {
		_spec.ClearField(internalpolicyhistory.FieldPolicyType, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(internalpolicyhistory.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovalRequired(); ok {
		_spec.SetField(internalpolicyhistory.FieldApprovalRequired, field.TypeBool, value)
	}
	if _u.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(internalpolicyhistory.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := _u.mutation.ReviewDue(); ok {
		_spec.SetField(internalpolicyhistory.FieldReviewDue, field.TypeTime, value)
	}
	if _u.mutation.ReviewDueCleared() {
		_spec.ClearField(internalpolicyhistory.FieldReviewDue, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewFrequency(); ok {
		_spec.SetField(internalpolicyhistory.FieldReviewFrequency, field.TypeEnum, value)
	}
	if _u.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(internalpolicyhistory.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := _u.mutation.ApproverID(); ok {
		_spec.SetField(internalpolicyhistory.FieldApproverID, field.TypeString, value)
	}
	if _u.mutation.ApproverIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldApproverID, field.TypeString)
	}
	if value, ok := _u.mutation.DelegateID(); ok {
		_spec.SetField(internalpolicyhistory.FieldDelegateID, field.TypeString, value)
	}
	if _u.mutation.DelegateIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDelegateID, field.TypeString)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(internalpolicyhistory.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(internalpolicyhistory.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.TagSuggestions(); ok {
		_spec.SetField(internalpolicyhistory.FieldTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldTagSuggestions, value)
		})
	}
	if _u.mutation.TagSuggestionsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(internalpolicyhistory.FieldDismissedTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldDismissedTagSuggestions, value)
		})
	}
	if _u.mutation.DismissedTagSuggestionsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDismissedTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlSuggestions(); ok {
		_spec.SetField(internalpolicyhistory.FieldControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldControlSuggestions, value)
		})
	}
	if _u.mutation.ControlSuggestionsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(internalpolicyhistory.FieldDismissedControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldDismissedControlSuggestions, value)
		})
	}
	if _u.mutation.DismissedControlSuggestionsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDismissedControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(internalpolicyhistory.FieldImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldImprovementSuggestions, value)
		})
	}
	if _u.mutation.ImprovementSuggestionsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(internalpolicyhistory.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldDismissedImprovementSuggestions, value)
		})
	}
	if _u.mutation.DismissedImprovementSuggestionsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDismissedImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(internalpolicyhistory.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(internalpolicyhistory.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.FileID(); ok {
		_spec.SetField(internalpolicyhistory.FieldFileID, field.TypeString, value)
	}
	if _u.mutation.FileIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldFileID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.InternalPolicyHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internalpolicyhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// InternalPolicyHistoryUpdateOne is the builder for updating a single InternalPolicyHistory entity.
type InternalPolicyHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *InternalPolicyHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *InternalPolicyHistoryUpdateOne) SetUpdatedAt(v time.Time) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearUpdatedAt() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *InternalPolicyHistoryUpdateOne) SetUpdatedBy(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableUpdatedBy(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearUpdatedBy() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *InternalPolicyHistoryUpdateOne) SetDeletedAt(v time.Time) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearDeletedAt() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *InternalPolicyHistoryUpdateOne) SetDeletedBy(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableDeletedBy(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearDeletedBy() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *InternalPolicyHistoryUpdateOne) SetTags(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *InternalPolicyHistoryUpdateOne) AppendTags(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearTags() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *InternalPolicyHistoryUpdateOne) SetRevision(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableRevision(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearRevision() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearRevision()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *InternalPolicyHistoryUpdateOne) SetOwnerID(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableOwnerID(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearOwnerID() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *InternalPolicyHistoryUpdateOne) SetInternalNotes(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableInternalNotes(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearInternalNotes() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *InternalPolicyHistoryUpdateOne) SetSystemInternalID(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableSystemInternalID(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearSystemInternalID() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetName sets the "name" field.
func (_u *InternalPolicyHistoryUpdateOne) SetName(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableName(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *InternalPolicyHistoryUpdateOne) SetStatus(v enums.DocumentStatus) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableStatus(v *enums.DocumentStatus) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearStatus() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetPolicyType sets the "policy_type" field.
func (_u *InternalPolicyHistoryUpdateOne) SetPolicyType(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetPolicyType(v)
	return _u
}

// SetNillablePolicyType sets the "policy_type" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillablePolicyType(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetPolicyType(*v)
	}
	return _u
}

// ClearPolicyType clears the value of the "policy_type" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearPolicyType() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearPolicyType()
	return _u
}

// SetDetails sets the "details" field.
func (_u *InternalPolicyHistoryUpdateOne) SetDetails(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableDetails(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearDetails() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearDetails()
	return _u
}

// SetApprovalRequired sets the "approval_required" field.
func (_u *InternalPolicyHistoryUpdateOne) SetApprovalRequired(v bool) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetApprovalRequired(v)
	return _u
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableApprovalRequired(v *bool) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetApprovalRequired(*v)
	}
	return _u
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearApprovalRequired() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearApprovalRequired()
	return _u
}

// SetReviewDue sets the "review_due" field.
func (_u *InternalPolicyHistoryUpdateOne) SetReviewDue(v time.Time) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetReviewDue(v)
	return _u
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableReviewDue(v *time.Time) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetReviewDue(*v)
	}
	return _u
}

// ClearReviewDue clears the value of the "review_due" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearReviewDue() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearReviewDue()
	return _u
}

// SetReviewFrequency sets the "review_frequency" field.
func (_u *InternalPolicyHistoryUpdateOne) SetReviewFrequency(v enums.Frequency) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetReviewFrequency(v)
	return _u
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableReviewFrequency(v *enums.Frequency) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetReviewFrequency(*v)
	}
	return _u
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearReviewFrequency() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearReviewFrequency()
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *InternalPolicyHistoryUpdateOne) SetApproverID(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableApproverID(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearApproverID() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearApproverID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *InternalPolicyHistoryUpdateOne) SetDelegateID(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableDelegateID(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearDelegateID() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetSummary sets the "summary" field.
func (_u *InternalPolicyHistoryUpdateOne) SetSummary(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableSummary(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearSummary() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearSummary()
	return _u
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) SetTagSuggestions(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetTagSuggestions(v)
	return _u
}

// AppendTagSuggestions appends value to the "tag_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) AppendTagSuggestions(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.AppendTagSuggestions(v)
	return _u
}

// ClearTagSuggestions clears the value of the "tag_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearTagSuggestions() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearTagSuggestions()
	return _u
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) SetDismissedTagSuggestions(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetDismissedTagSuggestions(v)
	return _u
}

// AppendDismissedTagSuggestions appends value to the "dismissed_tag_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) AppendDismissedTagSuggestions(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.AppendDismissedTagSuggestions(v)
	return _u
}

// ClearDismissedTagSuggestions clears the value of the "dismissed_tag_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearDismissedTagSuggestions() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearDismissedTagSuggestions()
	return _u
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) SetControlSuggestions(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetControlSuggestions(v)
	return _u
}

// AppendControlSuggestions appends value to the "control_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) AppendControlSuggestions(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.AppendControlSuggestions(v)
	return _u
}

// ClearControlSuggestions clears the value of the "control_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearControlSuggestions() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearControlSuggestions()
	return _u
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) SetDismissedControlSuggestions(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetDismissedControlSuggestions(v)
	return _u
}

// AppendDismissedControlSuggestions appends value to the "dismissed_control_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) AppendDismissedControlSuggestions(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.AppendDismissedControlSuggestions(v)
	return _u
}

// ClearDismissedControlSuggestions clears the value of the "dismissed_control_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearDismissedControlSuggestions() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearDismissedControlSuggestions()
	return _u
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) SetImprovementSuggestions(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetImprovementSuggestions(v)
	return _u
}

// AppendImprovementSuggestions appends value to the "improvement_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) AppendImprovementSuggestions(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.AppendImprovementSuggestions(v)
	return _u
}

// ClearImprovementSuggestions clears the value of the "improvement_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearImprovementSuggestions() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearImprovementSuggestions()
	return _u
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) SetDismissedImprovementSuggestions(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetDismissedImprovementSuggestions(v)
	return _u
}

// AppendDismissedImprovementSuggestions appends value to the "dismissed_improvement_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) AppendDismissedImprovementSuggestions(v []string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.AppendDismissedImprovementSuggestions(v)
	return _u
}

// ClearDismissedImprovementSuggestions clears the value of the "dismissed_improvement_suggestions" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearDismissedImprovementSuggestions() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearDismissedImprovementSuggestions()
	return _u
}

// SetURL sets the "url" field.
func (_u *InternalPolicyHistoryUpdateOne) SetURL(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetURL(v)
	return _u
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableURL(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetURL(*v)
	}
	return _u
}

// ClearURL clears the value of the "url" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearURL() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearURL()
	return _u
}

// SetFileID sets the "file_id" field.
func (_u *InternalPolicyHistoryUpdateOne) SetFileID(v string) *InternalPolicyHistoryUpdateOne {
	_u.mutation.SetFileID(v)
	return _u
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_u *InternalPolicyHistoryUpdateOne) SetNillableFileID(v *string) *InternalPolicyHistoryUpdateOne {
	if v != nil {
		_u.SetFileID(*v)
	}
	return _u
}

// ClearFileID clears the value of the "file_id" field.
func (_u *InternalPolicyHistoryUpdateOne) ClearFileID() *InternalPolicyHistoryUpdateOne {
	_u.mutation.ClearFileID()
	return _u
}

// Mutation returns the InternalPolicyHistoryMutation object of the builder.
func (_u *InternalPolicyHistoryUpdateOne) Mutation() *InternalPolicyHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the InternalPolicyHistoryUpdate builder.
func (_u *InternalPolicyHistoryUpdateOne) Where(ps ...predicate.InternalPolicyHistory) *InternalPolicyHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *InternalPolicyHistoryUpdateOne) Select(field string, fields ...string) *InternalPolicyHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated InternalPolicyHistory entity.
func (_u *InternalPolicyHistoryUpdateOne) Save(ctx context.Context) (*InternalPolicyHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InternalPolicyHistoryUpdateOne) SaveX(ctx context.Context) *InternalPolicyHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *InternalPolicyHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InternalPolicyHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *InternalPolicyHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if internalpolicyhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized internalpolicyhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := internalpolicyhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *InternalPolicyHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := internalpolicyhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "InternalPolicyHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewFrequency(); ok {
		if err := internalpolicyhistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "InternalPolicyHistory.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *InternalPolicyHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *InternalPolicyHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *InternalPolicyHistoryUpdateOne) sqlSave(ctx context.Context) (_node *InternalPolicyHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(internalpolicyhistory.Table, internalpolicyhistory.Columns, sqlgraph.NewFieldSpec(internalpolicyhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "InternalPolicyHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, internalpolicyhistory.FieldID)
		for _, f := range fields {
			if !internalpolicyhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != internalpolicyhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(internalpolicyhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(internalpolicyhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(internalpolicyhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(internalpolicyhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(internalpolicyhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(internalpolicyhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(internalpolicyhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(internalpolicyhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(internalpolicyhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(internalpolicyhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(internalpolicyhistory.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(internalpolicyhistory.FieldRevision, field.TypeString)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(internalpolicyhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldOwnerID, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(internalpolicyhistory.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(internalpolicyhistory.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(internalpolicyhistory.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(internalpolicyhistory.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(internalpolicyhistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(internalpolicyhistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(internalpolicyhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.PolicyType(); ok {
		_spec.SetField(internalpolicyhistory.FieldPolicyType, field.TypeString, value)
	}
	if _u.mutation.PolicyTypeCleared() {
		_spec.ClearField(internalpolicyhistory.FieldPolicyType, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(internalpolicyhistory.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovalRequired(); ok {
		_spec.SetField(internalpolicyhistory.FieldApprovalRequired, field.TypeBool, value)
	}
	if _u.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(internalpolicyhistory.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := _u.mutation.ReviewDue(); ok {
		_spec.SetField(internalpolicyhistory.FieldReviewDue, field.TypeTime, value)
	}
	if _u.mutation.ReviewDueCleared() {
		_spec.ClearField(internalpolicyhistory.FieldReviewDue, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewFrequency(); ok {
		_spec.SetField(internalpolicyhistory.FieldReviewFrequency, field.TypeEnum, value)
	}
	if _u.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(internalpolicyhistory.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := _u.mutation.ApproverID(); ok {
		_spec.SetField(internalpolicyhistory.FieldApproverID, field.TypeString, value)
	}
	if _u.mutation.ApproverIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldApproverID, field.TypeString)
	}
	if value, ok := _u.mutation.DelegateID(); ok {
		_spec.SetField(internalpolicyhistory.FieldDelegateID, field.TypeString, value)
	}
	if _u.mutation.DelegateIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDelegateID, field.TypeString)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(internalpolicyhistory.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(internalpolicyhistory.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.TagSuggestions(); ok {
		_spec.SetField(internalpolicyhistory.FieldTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldTagSuggestions, value)
		})
	}
	if _u.mutation.TagSuggestionsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(internalpolicyhistory.FieldDismissedTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldDismissedTagSuggestions, value)
		})
	}
	if _u.mutation.DismissedTagSuggestionsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDismissedTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlSuggestions(); ok {
		_spec.SetField(internalpolicyhistory.FieldControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldControlSuggestions, value)
		})
	}
	if _u.mutation.ControlSuggestionsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(internalpolicyhistory.FieldDismissedControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldDismissedControlSuggestions, value)
		})
	}
	if _u.mutation.DismissedControlSuggestionsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDismissedControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(internalpolicyhistory.FieldImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldImprovementSuggestions, value)
		})
	}
	if _u.mutation.ImprovementSuggestionsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(internalpolicyhistory.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, internalpolicyhistory.FieldDismissedImprovementSuggestions, value)
		})
	}
	if _u.mutation.DismissedImprovementSuggestionsCleared() {
		_spec.ClearField(internalpolicyhistory.FieldDismissedImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.URL(); ok {
		_spec.SetField(internalpolicyhistory.FieldURL, field.TypeString, value)
	}
	if _u.mutation.URLCleared() {
		_spec.ClearField(internalpolicyhistory.FieldURL, field.TypeString)
	}
	if value, ok := _u.mutation.FileID(); ok {
		_spec.SetField(internalpolicyhistory.FieldFileID, field.TypeString, value)
	}
	if _u.mutation.FileIDCleared() {
		_spec.ClearField(internalpolicyhistory.FieldFileID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.InternalPolicyHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &InternalPolicyHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{internalpolicyhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
