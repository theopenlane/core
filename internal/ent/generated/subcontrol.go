// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
)

// Subcontrol is the model entity for the Subcontrol schema.
type Subcontrol struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the name of the subcontrol
	Name string `json:"name,omitempty"`
	// description of the subcontrol
	Description string `json:"description,omitempty"`
	// status of the subcontrol
	Status string `json:"status,omitempty"`
	// type of the subcontrol
	SubcontrolType string `json:"subcontrol_type,omitempty"`
	// version of the control
	Version string `json:"version,omitempty"`
	// owner of the subcontrol
	Owner string `json:"owner,omitempty"`
	// control number
	SubcontrolNumber string `json:"subcontrol_number,omitempty"`
	// control family
	SubcontrolFamily string `json:"subcontrol_family,omitempty"`
	// control class
	SubcontrolClass string `json:"subcontrol_class,omitempty"`
	// source of the control
	Source string `json:"source,omitempty"`
	// mapped frameworks
	MappedFrameworks string `json:"mapped_frameworks,omitempty"`
	// assigned to
	AssignedTo string `json:"assigned_to,omitempty"`
	// implementation status
	ImplementationStatus string `json:"implementation_status,omitempty"`
	// implementation notes
	ImplementationNotes string `json:"implementation_notes,omitempty"`
	// implementation date
	ImplementationDate string `json:"implementation_date,omitempty"`
	// implementation evidence
	ImplementationEvidence string `json:"implementation_evidence,omitempty"`
	// implementation verification
	ImplementationVerification string `json:"implementation_verification,omitempty"`
	// implementation verification date
	ImplementationVerificationDate string `json:"implementation_verification_date,omitempty"`
	// json schema
	Jsonschema map[string]interface{} `json:"jsonschema,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubcontrolQuery when eager-loading is set.
	Edges                         SubcontrolEdges `json:"edges"`
	control_objective_subcontrols *string
	selectValues                  sql.SelectValues
}

// SubcontrolEdges holds the relations/edges for other nodes in the graph.
type SubcontrolEdges struct {
	// Control holds the value of the control edge.
	Control []*Control `json:"control,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedControl map[string][]*Control
}

// ControlOrErr returns the Control value or an error if the edge
// was not loaded in eager-loading.
func (e SubcontrolEdges) ControlOrErr() ([]*Control, error) {
	if e.loadedTypes[0] {
		return e.Control, nil
	}
	return nil, &NotLoadedError{edge: "control"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subcontrol) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subcontrol.FieldTags, subcontrol.FieldJsonschema:
			values[i] = new([]byte)
		case subcontrol.FieldID, subcontrol.FieldCreatedBy, subcontrol.FieldUpdatedBy, subcontrol.FieldDeletedBy, subcontrol.FieldMappingID, subcontrol.FieldName, subcontrol.FieldDescription, subcontrol.FieldStatus, subcontrol.FieldSubcontrolType, subcontrol.FieldVersion, subcontrol.FieldOwner, subcontrol.FieldSubcontrolNumber, subcontrol.FieldSubcontrolFamily, subcontrol.FieldSubcontrolClass, subcontrol.FieldSource, subcontrol.FieldMappedFrameworks, subcontrol.FieldAssignedTo, subcontrol.FieldImplementationStatus, subcontrol.FieldImplementationNotes, subcontrol.FieldImplementationDate, subcontrol.FieldImplementationEvidence, subcontrol.FieldImplementationVerification, subcontrol.FieldImplementationVerificationDate:
			values[i] = new(sql.NullString)
		case subcontrol.FieldCreatedAt, subcontrol.FieldUpdatedAt, subcontrol.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case subcontrol.ForeignKeys[0]: // control_objective_subcontrols
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subcontrol fields.
func (s *Subcontrol) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subcontrol.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case subcontrol.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case subcontrol.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case subcontrol.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = value.String
			}
		case subcontrol.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = value.String
			}
		case subcontrol.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		case subcontrol.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				s.DeletedBy = value.String
			}
		case subcontrol.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				s.MappingID = value.String
			}
		case subcontrol.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case subcontrol.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case subcontrol.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case subcontrol.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.String
			}
		case subcontrol.FieldSubcontrolType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcontrol_type", values[i])
			} else if value.Valid {
				s.SubcontrolType = value.String
			}
		case subcontrol.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				s.Version = value.String
			}
		case subcontrol.FieldOwner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner", values[i])
			} else if value.Valid {
				s.Owner = value.String
			}
		case subcontrol.FieldSubcontrolNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcontrol_number", values[i])
			} else if value.Valid {
				s.SubcontrolNumber = value.String
			}
		case subcontrol.FieldSubcontrolFamily:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcontrol_family", values[i])
			} else if value.Valid {
				s.SubcontrolFamily = value.String
			}
		case subcontrol.FieldSubcontrolClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcontrol_class", values[i])
			} else if value.Valid {
				s.SubcontrolClass = value.String
			}
		case subcontrol.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				s.Source = value.String
			}
		case subcontrol.FieldMappedFrameworks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapped_frameworks", values[i])
			} else if value.Valid {
				s.MappedFrameworks = value.String
			}
		case subcontrol.FieldAssignedTo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_to", values[i])
			} else if value.Valid {
				s.AssignedTo = value.String
			}
		case subcontrol.FieldImplementationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_status", values[i])
			} else if value.Valid {
				s.ImplementationStatus = value.String
			}
		case subcontrol.FieldImplementationNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_notes", values[i])
			} else if value.Valid {
				s.ImplementationNotes = value.String
			}
		case subcontrol.FieldImplementationDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_date", values[i])
			} else if value.Valid {
				s.ImplementationDate = value.String
			}
		case subcontrol.FieldImplementationEvidence:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_evidence", values[i])
			} else if value.Valid {
				s.ImplementationEvidence = value.String
			}
		case subcontrol.FieldImplementationVerification:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_verification", values[i])
			} else if value.Valid {
				s.ImplementationVerification = value.String
			}
		case subcontrol.FieldImplementationVerificationDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_verification_date", values[i])
			} else if value.Valid {
				s.ImplementationVerificationDate = value.String
			}
		case subcontrol.FieldJsonschema:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field jsonschema", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Jsonschema); err != nil {
					return fmt.Errorf("unmarshal field jsonschema: %w", err)
				}
			}
		case subcontrol.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_objective_subcontrols", values[i])
			} else if value.Valid {
				s.control_objective_subcontrols = new(string)
				*s.control_objective_subcontrols = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subcontrol.
// This includes values selected through modifiers, order, etc.
func (s *Subcontrol) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryControl queries the "control" edge of the Subcontrol entity.
func (s *Subcontrol) QueryControl() *ControlQuery {
	return NewSubcontrolClient(s.config).QueryControl(s)
}

// Update returns a builder for updating this Subcontrol.
// Note that you need to call Subcontrol.Unwrap() before calling this method if this Subcontrol
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subcontrol) Update() *SubcontrolUpdateOne {
	return NewSubcontrolClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subcontrol entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subcontrol) Unwrap() *Subcontrol {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("generated: Subcontrol is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subcontrol) String() string {
	var builder strings.Builder
	builder.WriteString("Subcontrol(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(s.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(s.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(s.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(s.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", s.Tags))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(s.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(s.Status)
	builder.WriteString(", ")
	builder.WriteString("subcontrol_type=")
	builder.WriteString(s.SubcontrolType)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(s.Version)
	builder.WriteString(", ")
	builder.WriteString("owner=")
	builder.WriteString(s.Owner)
	builder.WriteString(", ")
	builder.WriteString("subcontrol_number=")
	builder.WriteString(s.SubcontrolNumber)
	builder.WriteString(", ")
	builder.WriteString("subcontrol_family=")
	builder.WriteString(s.SubcontrolFamily)
	builder.WriteString(", ")
	builder.WriteString("subcontrol_class=")
	builder.WriteString(s.SubcontrolClass)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(s.Source)
	builder.WriteString(", ")
	builder.WriteString("mapped_frameworks=")
	builder.WriteString(s.MappedFrameworks)
	builder.WriteString(", ")
	builder.WriteString("assigned_to=")
	builder.WriteString(s.AssignedTo)
	builder.WriteString(", ")
	builder.WriteString("implementation_status=")
	builder.WriteString(s.ImplementationStatus)
	builder.WriteString(", ")
	builder.WriteString("implementation_notes=")
	builder.WriteString(s.ImplementationNotes)
	builder.WriteString(", ")
	builder.WriteString("implementation_date=")
	builder.WriteString(s.ImplementationDate)
	builder.WriteString(", ")
	builder.WriteString("implementation_evidence=")
	builder.WriteString(s.ImplementationEvidence)
	builder.WriteString(", ")
	builder.WriteString("implementation_verification=")
	builder.WriteString(s.ImplementationVerification)
	builder.WriteString(", ")
	builder.WriteString("implementation_verification_date=")
	builder.WriteString(s.ImplementationVerificationDate)
	builder.WriteString(", ")
	builder.WriteString("jsonschema=")
	builder.WriteString(fmt.Sprintf("%v", s.Jsonschema))
	builder.WriteByte(')')
	return builder.String()
}

// NamedControl returns the Control named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subcontrol) NamedControl(name string) ([]*Control, error) {
	if s.Edges.namedControl == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedControl[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subcontrol) appendNamedControl(name string, edges ...*Control) {
	if s.Edges.namedControl == nil {
		s.Edges.namedControl = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		s.Edges.namedControl[name] = []*Control{}
	} else {
		s.Edges.namedControl[name] = append(s.Edges.namedControl[name], edges...)
	}
}

// Subcontrols is a parsable slice of Subcontrol.
type Subcontrols []*Subcontrol
