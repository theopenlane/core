// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
)

// Subcontrol is the model entity for the Subcontrol schema.
type Subcontrol struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// description of what the control is supposed to accomplish
	Description string `json:"description,omitempty"`
	// internal reference id of the control, can be used for internal tracking
	ReferenceID string `json:"reference_id,omitempty"`
	// external auditor id of the control, can be used to map to external audit partner mappings
	AuditorReferenceID string `json:"auditor_reference_id,omitempty"`
	// status of the control
	Status enums.ControlStatus `json:"status,omitempty"`
	// source of the control, e.g. framework, template, custom, etc.
	Source enums.ControlSource `json:"source,omitempty"`
	// type of the control e.g. preventive, detective, corrective, or deterrent.
	ControlType enums.ControlType `json:"control_type,omitempty"`
	// category of the control
	Category string `json:"category,omitempty"`
	// category id of the control
	CategoryID string `json:"category_id,omitempty"`
	// subcategory of the control
	Subcategory string `json:"subcategory,omitempty"`
	// mapped categories of the control to other standards
	MappedCategories []string `json:"mapped_categories,omitempty"`
	// objectives of the audit assessment for the control
	AssessmentObjectives []models.AssessmentObjective `json:"assessment_objectives,omitempty"`
	// methods used to verify the control implementation during an audit
	AssessmentMethods []models.AssessmentMethod `json:"assessment_methods,omitempty"`
	// questions to ask to verify the control
	ControlQuestions []string `json:"control_questions,omitempty"`
	// implementation guidance for the control
	ImplementationGuidance []models.ImplementationGuidance `json:"implementation_guidance,omitempty"`
	// examples of evidence for the control
	ExampleEvidence []models.ExampleEvidence `json:"example_evidence,omitempty"`
	// references for the control
	References []models.Reference `json:"references,omitempty"`
	// the unique reference code for the control
	RefCode string `json:"ref_code,omitempty"`
	// the id of the parent control
	ControlID string `json:"control_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubcontrolQuery when eager-loading is set.
	Edges                    SubcontrolEdges `json:"edges"`
	program_subcontrols      *string
	subcontrol_control_owner *string
	subcontrol_delegate      *string
	user_subcontrols         *string
	selectValues             sql.SelectValues
}

// SubcontrolEdges holds the relations/edges for other nodes in the graph.
type SubcontrolEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Control holds the value of the control edge.
	Control *Control `json:"control,omitempty"`
	// mapped subcontrols that have a relation to another control or subcontrol
	MappedControls []*MappedControl `json:"mapped_controls,omitempty"`
	// Evidence holds the value of the evidence edge.
	Evidence []*Evidence `json:"evidence,omitempty"`
	// ControlObjectives holds the value of the control_objectives edge.
	ControlObjectives []*ControlObjective `json:"control_objectives,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Narratives holds the value of the narratives edge.
	Narratives []*Narrative `json:"narratives,omitempty"`
	// Risks holds the value of the risks edge.
	Risks []*Risk `json:"risks,omitempty"`
	// ActionPlans holds the value of the action_plans edge.
	ActionPlans []*ActionPlan `json:"action_plans,omitempty"`
	// Procedures holds the value of the procedures edge.
	Procedures []*Procedure `json:"procedures,omitempty"`
	// InternalPolicies holds the value of the internal_policies edge.
	InternalPolicies []*InternalPolicy `json:"internal_policies,omitempty"`
	// the user who is responsible for the subcontrol, defaults to the parent control owner if not set
	ControlOwner *Group `json:"control_owner,omitempty"`
	// temporary delegate for the subcontrol, used for temporary control ownership
	Delegate *Group `json:"delegate,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [13]bool
	// totalCount holds the count of the edges above.
	totalCount [13]map[string]int

	namedMappedControls    map[string][]*MappedControl
	namedEvidence          map[string][]*Evidence
	namedControlObjectives map[string][]*ControlObjective
	namedTasks             map[string][]*Task
	namedNarratives        map[string][]*Narrative
	namedRisks             map[string][]*Risk
	namedActionPlans       map[string][]*ActionPlan
	namedProcedures        map[string][]*Procedure
	namedInternalPolicies  map[string][]*InternalPolicy
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubcontrolEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ControlOrErr returns the Control value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubcontrolEdges) ControlOrErr() (*Control, error) {
	if e.Control != nil {
		return e.Control, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: control.Label}
	}
	return nil, &NotLoadedError{edge: "control"}
}

// MappedControlsOrErr returns the MappedControls value or an error if the edge
// was not loaded in eager-loading.
func (e SubcontrolEdges) MappedControlsOrErr() ([]*MappedControl, error) {
	if e.loadedTypes[2] {
		return e.MappedControls, nil
	}
	return nil, &NotLoadedError{edge: "mapped_controls"}
}

// EvidenceOrErr returns the Evidence value or an error if the edge
// was not loaded in eager-loading.
func (e SubcontrolEdges) EvidenceOrErr() ([]*Evidence, error) {
	if e.loadedTypes[3] {
		return e.Evidence, nil
	}
	return nil, &NotLoadedError{edge: "evidence"}
}

// ControlObjectivesOrErr returns the ControlObjectives value or an error if the edge
// was not loaded in eager-loading.
func (e SubcontrolEdges) ControlObjectivesOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[4] {
		return e.ControlObjectives, nil
	}
	return nil, &NotLoadedError{edge: "control_objectives"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e SubcontrolEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[5] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// NarrativesOrErr returns the Narratives value or an error if the edge
// was not loaded in eager-loading.
func (e SubcontrolEdges) NarrativesOrErr() ([]*Narrative, error) {
	if e.loadedTypes[6] {
		return e.Narratives, nil
	}
	return nil, &NotLoadedError{edge: "narratives"}
}

// RisksOrErr returns the Risks value or an error if the edge
// was not loaded in eager-loading.
func (e SubcontrolEdges) RisksOrErr() ([]*Risk, error) {
	if e.loadedTypes[7] {
		return e.Risks, nil
	}
	return nil, &NotLoadedError{edge: "risks"}
}

// ActionPlansOrErr returns the ActionPlans value or an error if the edge
// was not loaded in eager-loading.
func (e SubcontrolEdges) ActionPlansOrErr() ([]*ActionPlan, error) {
	if e.loadedTypes[8] {
		return e.ActionPlans, nil
	}
	return nil, &NotLoadedError{edge: "action_plans"}
}

// ProceduresOrErr returns the Procedures value or an error if the edge
// was not loaded in eager-loading.
func (e SubcontrolEdges) ProceduresOrErr() ([]*Procedure, error) {
	if e.loadedTypes[9] {
		return e.Procedures, nil
	}
	return nil, &NotLoadedError{edge: "procedures"}
}

// InternalPoliciesOrErr returns the InternalPolicies value or an error if the edge
// was not loaded in eager-loading.
func (e SubcontrolEdges) InternalPoliciesOrErr() ([]*InternalPolicy, error) {
	if e.loadedTypes[10] {
		return e.InternalPolicies, nil
	}
	return nil, &NotLoadedError{edge: "internal_policies"}
}

// ControlOwnerOrErr returns the ControlOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubcontrolEdges) ControlOwnerOrErr() (*Group, error) {
	if e.ControlOwner != nil {
		return e.ControlOwner, nil
	} else if e.loadedTypes[11] {
		return nil, &NotFoundError{label: group.Label}
	}
	return nil, &NotLoadedError{edge: "control_owner"}
}

// DelegateOrErr returns the Delegate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubcontrolEdges) DelegateOrErr() (*Group, error) {
	if e.Delegate != nil {
		return e.Delegate, nil
	} else if e.loadedTypes[12] {
		return nil, &NotFoundError{label: group.Label}
	}
	return nil, &NotLoadedError{edge: "delegate"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subcontrol) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subcontrol.FieldTags, subcontrol.FieldMappedCategories, subcontrol.FieldAssessmentObjectives, subcontrol.FieldAssessmentMethods, subcontrol.FieldControlQuestions, subcontrol.FieldImplementationGuidance, subcontrol.FieldExampleEvidence, subcontrol.FieldReferences:
			values[i] = new([]byte)
		case subcontrol.FieldID, subcontrol.FieldCreatedBy, subcontrol.FieldUpdatedBy, subcontrol.FieldDeletedBy, subcontrol.FieldDisplayID, subcontrol.FieldOwnerID, subcontrol.FieldDescription, subcontrol.FieldReferenceID, subcontrol.FieldAuditorReferenceID, subcontrol.FieldStatus, subcontrol.FieldSource, subcontrol.FieldControlType, subcontrol.FieldCategory, subcontrol.FieldCategoryID, subcontrol.FieldSubcategory, subcontrol.FieldRefCode, subcontrol.FieldControlID:
			values[i] = new(sql.NullString)
		case subcontrol.FieldCreatedAt, subcontrol.FieldUpdatedAt, subcontrol.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case subcontrol.ForeignKeys[0]: // program_subcontrols
			values[i] = new(sql.NullString)
		case subcontrol.ForeignKeys[1]: // subcontrol_control_owner
			values[i] = new(sql.NullString)
		case subcontrol.ForeignKeys[2]: // subcontrol_delegate
			values[i] = new(sql.NullString)
		case subcontrol.ForeignKeys[3]: // user_subcontrols
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subcontrol fields.
func (s *Subcontrol) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subcontrol.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case subcontrol.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case subcontrol.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case subcontrol.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = value.String
			}
		case subcontrol.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = value.String
			}
		case subcontrol.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				s.DeletedAt = value.Time
			}
		case subcontrol.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				s.DeletedBy = value.String
			}
		case subcontrol.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				s.DisplayID = value.String
			}
		case subcontrol.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case subcontrol.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				s.OwnerID = value.String
			}
		case subcontrol.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				s.Description = value.String
			}
		case subcontrol.FieldReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_id", values[i])
			} else if value.Valid {
				s.ReferenceID = value.String
			}
		case subcontrol.FieldAuditorReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auditor_reference_id", values[i])
			} else if value.Valid {
				s.AuditorReferenceID = value.String
			}
		case subcontrol.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = enums.ControlStatus(value.String)
			}
		case subcontrol.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				s.Source = enums.ControlSource(value.String)
			}
		case subcontrol.FieldControlType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_type", values[i])
			} else if value.Valid {
				s.ControlType = enums.ControlType(value.String)
			}
		case subcontrol.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				s.Category = value.String
			}
		case subcontrol.FieldCategoryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				s.CategoryID = value.String
			}
		case subcontrol.FieldSubcategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcategory", values[i])
			} else if value.Valid {
				s.Subcategory = value.String
			}
		case subcontrol.FieldMappedCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field mapped_categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.MappedCategories); err != nil {
					return fmt.Errorf("unmarshal field mapped_categories: %w", err)
				}
			}
		case subcontrol.FieldAssessmentObjectives:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_objectives", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.AssessmentObjectives); err != nil {
					return fmt.Errorf("unmarshal field assessment_objectives: %w", err)
				}
			}
		case subcontrol.FieldAssessmentMethods:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_methods", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.AssessmentMethods); err != nil {
					return fmt.Errorf("unmarshal field assessment_methods: %w", err)
				}
			}
		case subcontrol.FieldControlQuestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field control_questions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.ControlQuestions); err != nil {
					return fmt.Errorf("unmarshal field control_questions: %w", err)
				}
			}
		case subcontrol.FieldImplementationGuidance:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_guidance", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.ImplementationGuidance); err != nil {
					return fmt.Errorf("unmarshal field implementation_guidance: %w", err)
				}
			}
		case subcontrol.FieldExampleEvidence:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field example_evidence", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.ExampleEvidence); err != nil {
					return fmt.Errorf("unmarshal field example_evidence: %w", err)
				}
			}
		case subcontrol.FieldReferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field references", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.References); err != nil {
					return fmt.Errorf("unmarshal field references: %w", err)
				}
			}
		case subcontrol.FieldRefCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref_code", values[i])
			} else if value.Valid {
				s.RefCode = value.String
			}
		case subcontrol.FieldControlID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_id", values[i])
			} else if value.Valid {
				s.ControlID = value.String
			}
		case subcontrol.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field program_subcontrols", values[i])
			} else if value.Valid {
				s.program_subcontrols = new(string)
				*s.program_subcontrols = value.String
			}
		case subcontrol.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcontrol_control_owner", values[i])
			} else if value.Valid {
				s.subcontrol_control_owner = new(string)
				*s.subcontrol_control_owner = value.String
			}
		case subcontrol.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcontrol_delegate", values[i])
			} else if value.Valid {
				s.subcontrol_delegate = new(string)
				*s.subcontrol_delegate = value.String
			}
		case subcontrol.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_subcontrols", values[i])
			} else if value.Valid {
				s.user_subcontrols = new(string)
				*s.user_subcontrols = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subcontrol.
// This includes values selected through modifiers, order, etc.
func (s *Subcontrol) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Subcontrol entity.
func (s *Subcontrol) QueryOwner() *OrganizationQuery {
	return NewSubcontrolClient(s.config).QueryOwner(s)
}

// QueryControl queries the "control" edge of the Subcontrol entity.
func (s *Subcontrol) QueryControl() *ControlQuery {
	return NewSubcontrolClient(s.config).QueryControl(s)
}

// QueryMappedControls queries the "mapped_controls" edge of the Subcontrol entity.
func (s *Subcontrol) QueryMappedControls() *MappedControlQuery {
	return NewSubcontrolClient(s.config).QueryMappedControls(s)
}

// QueryEvidence queries the "evidence" edge of the Subcontrol entity.
func (s *Subcontrol) QueryEvidence() *EvidenceQuery {
	return NewSubcontrolClient(s.config).QueryEvidence(s)
}

// QueryControlObjectives queries the "control_objectives" edge of the Subcontrol entity.
func (s *Subcontrol) QueryControlObjectives() *ControlObjectiveQuery {
	return NewSubcontrolClient(s.config).QueryControlObjectives(s)
}

// QueryTasks queries the "tasks" edge of the Subcontrol entity.
func (s *Subcontrol) QueryTasks() *TaskQuery {
	return NewSubcontrolClient(s.config).QueryTasks(s)
}

// QueryNarratives queries the "narratives" edge of the Subcontrol entity.
func (s *Subcontrol) QueryNarratives() *NarrativeQuery {
	return NewSubcontrolClient(s.config).QueryNarratives(s)
}

// QueryRisks queries the "risks" edge of the Subcontrol entity.
func (s *Subcontrol) QueryRisks() *RiskQuery {
	return NewSubcontrolClient(s.config).QueryRisks(s)
}

// QueryActionPlans queries the "action_plans" edge of the Subcontrol entity.
func (s *Subcontrol) QueryActionPlans() *ActionPlanQuery {
	return NewSubcontrolClient(s.config).QueryActionPlans(s)
}

// QueryProcedures queries the "procedures" edge of the Subcontrol entity.
func (s *Subcontrol) QueryProcedures() *ProcedureQuery {
	return NewSubcontrolClient(s.config).QueryProcedures(s)
}

// QueryInternalPolicies queries the "internal_policies" edge of the Subcontrol entity.
func (s *Subcontrol) QueryInternalPolicies() *InternalPolicyQuery {
	return NewSubcontrolClient(s.config).QueryInternalPolicies(s)
}

// QueryControlOwner queries the "control_owner" edge of the Subcontrol entity.
func (s *Subcontrol) QueryControlOwner() *GroupQuery {
	return NewSubcontrolClient(s.config).QueryControlOwner(s)
}

// QueryDelegate queries the "delegate" edge of the Subcontrol entity.
func (s *Subcontrol) QueryDelegate() *GroupQuery {
	return NewSubcontrolClient(s.config).QueryDelegate(s)
}

// Update returns a builder for updating this Subcontrol.
// Note that you need to call Subcontrol.Unwrap() before calling this method if this Subcontrol
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subcontrol) Update() *SubcontrolUpdateOne {
	return NewSubcontrolClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subcontrol entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subcontrol) Unwrap() *Subcontrol {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("generated: Subcontrol is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subcontrol) String() string {
	var builder strings.Builder
	builder.WriteString("Subcontrol(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(s.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(s.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(s.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(s.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(s.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", s.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(s.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(s.Description)
	builder.WriteString(", ")
	builder.WriteString("reference_id=")
	builder.WriteString(s.ReferenceID)
	builder.WriteString(", ")
	builder.WriteString("auditor_reference_id=")
	builder.WriteString(s.AuditorReferenceID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", s.Source))
	builder.WriteString(", ")
	builder.WriteString("control_type=")
	builder.WriteString(fmt.Sprintf("%v", s.ControlType))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(s.Category)
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(s.CategoryID)
	builder.WriteString(", ")
	builder.WriteString("subcategory=")
	builder.WriteString(s.Subcategory)
	builder.WriteString(", ")
	builder.WriteString("mapped_categories=")
	builder.WriteString(fmt.Sprintf("%v", s.MappedCategories))
	builder.WriteString(", ")
	builder.WriteString("assessment_objectives=")
	builder.WriteString(fmt.Sprintf("%v", s.AssessmentObjectives))
	builder.WriteString(", ")
	builder.WriteString("assessment_methods=")
	builder.WriteString(fmt.Sprintf("%v", s.AssessmentMethods))
	builder.WriteString(", ")
	builder.WriteString("control_questions=")
	builder.WriteString(fmt.Sprintf("%v", s.ControlQuestions))
	builder.WriteString(", ")
	builder.WriteString("implementation_guidance=")
	builder.WriteString(fmt.Sprintf("%v", s.ImplementationGuidance))
	builder.WriteString(", ")
	builder.WriteString("example_evidence=")
	builder.WriteString(fmt.Sprintf("%v", s.ExampleEvidence))
	builder.WriteString(", ")
	builder.WriteString("references=")
	builder.WriteString(fmt.Sprintf("%v", s.References))
	builder.WriteString(", ")
	builder.WriteString("ref_code=")
	builder.WriteString(s.RefCode)
	builder.WriteString(", ")
	builder.WriteString("control_id=")
	builder.WriteString(s.ControlID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedMappedControls returns the MappedControls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subcontrol) NamedMappedControls(name string) ([]*MappedControl, error) {
	if s.Edges.namedMappedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedMappedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subcontrol) appendNamedMappedControls(name string, edges ...*MappedControl) {
	if s.Edges.namedMappedControls == nil {
		s.Edges.namedMappedControls = make(map[string][]*MappedControl)
	}
	if len(edges) == 0 {
		s.Edges.namedMappedControls[name] = []*MappedControl{}
	} else {
		s.Edges.namedMappedControls[name] = append(s.Edges.namedMappedControls[name], edges...)
	}
}

// NamedEvidence returns the Evidence named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subcontrol) NamedEvidence(name string) ([]*Evidence, error) {
	if s.Edges.namedEvidence == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedEvidence[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subcontrol) appendNamedEvidence(name string, edges ...*Evidence) {
	if s.Edges.namedEvidence == nil {
		s.Edges.namedEvidence = make(map[string][]*Evidence)
	}
	if len(edges) == 0 {
		s.Edges.namedEvidence[name] = []*Evidence{}
	} else {
		s.Edges.namedEvidence[name] = append(s.Edges.namedEvidence[name], edges...)
	}
}

// NamedControlObjectives returns the ControlObjectives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subcontrol) NamedControlObjectives(name string) ([]*ControlObjective, error) {
	if s.Edges.namedControlObjectives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedControlObjectives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subcontrol) appendNamedControlObjectives(name string, edges ...*ControlObjective) {
	if s.Edges.namedControlObjectives == nil {
		s.Edges.namedControlObjectives = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		s.Edges.namedControlObjectives[name] = []*ControlObjective{}
	} else {
		s.Edges.namedControlObjectives[name] = append(s.Edges.namedControlObjectives[name], edges...)
	}
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subcontrol) NamedTasks(name string) ([]*Task, error) {
	if s.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subcontrol) appendNamedTasks(name string, edges ...*Task) {
	if s.Edges.namedTasks == nil {
		s.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		s.Edges.namedTasks[name] = []*Task{}
	} else {
		s.Edges.namedTasks[name] = append(s.Edges.namedTasks[name], edges...)
	}
}

// NamedNarratives returns the Narratives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subcontrol) NamedNarratives(name string) ([]*Narrative, error) {
	if s.Edges.namedNarratives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedNarratives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subcontrol) appendNamedNarratives(name string, edges ...*Narrative) {
	if s.Edges.namedNarratives == nil {
		s.Edges.namedNarratives = make(map[string][]*Narrative)
	}
	if len(edges) == 0 {
		s.Edges.namedNarratives[name] = []*Narrative{}
	} else {
		s.Edges.namedNarratives[name] = append(s.Edges.namedNarratives[name], edges...)
	}
}

// NamedRisks returns the Risks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subcontrol) NamedRisks(name string) ([]*Risk, error) {
	if s.Edges.namedRisks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedRisks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subcontrol) appendNamedRisks(name string, edges ...*Risk) {
	if s.Edges.namedRisks == nil {
		s.Edges.namedRisks = make(map[string][]*Risk)
	}
	if len(edges) == 0 {
		s.Edges.namedRisks[name] = []*Risk{}
	} else {
		s.Edges.namedRisks[name] = append(s.Edges.namedRisks[name], edges...)
	}
}

// NamedActionPlans returns the ActionPlans named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subcontrol) NamedActionPlans(name string) ([]*ActionPlan, error) {
	if s.Edges.namedActionPlans == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedActionPlans[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subcontrol) appendNamedActionPlans(name string, edges ...*ActionPlan) {
	if s.Edges.namedActionPlans == nil {
		s.Edges.namedActionPlans = make(map[string][]*ActionPlan)
	}
	if len(edges) == 0 {
		s.Edges.namedActionPlans[name] = []*ActionPlan{}
	} else {
		s.Edges.namedActionPlans[name] = append(s.Edges.namedActionPlans[name], edges...)
	}
}

// NamedProcedures returns the Procedures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subcontrol) NamedProcedures(name string) ([]*Procedure, error) {
	if s.Edges.namedProcedures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedProcedures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subcontrol) appendNamedProcedures(name string, edges ...*Procedure) {
	if s.Edges.namedProcedures == nil {
		s.Edges.namedProcedures = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		s.Edges.namedProcedures[name] = []*Procedure{}
	} else {
		s.Edges.namedProcedures[name] = append(s.Edges.namedProcedures[name], edges...)
	}
}

// NamedInternalPolicies returns the InternalPolicies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (s *Subcontrol) NamedInternalPolicies(name string) ([]*InternalPolicy, error) {
	if s.Edges.namedInternalPolicies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := s.Edges.namedInternalPolicies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (s *Subcontrol) appendNamedInternalPolicies(name string, edges ...*InternalPolicy) {
	if s.Edges.namedInternalPolicies == nil {
		s.Edges.namedInternalPolicies = make(map[string][]*InternalPolicy)
	}
	if len(edges) == 0 {
		s.Edges.namedInternalPolicies[name] = []*InternalPolicy{}
	} else {
		s.Edges.namedInternalPolicies[name] = append(s.Edges.namedInternalPolicies[name], edges...)
	}
}

// Subcontrols is a parsable slice of Subcontrol.
type Subcontrols []*Subcontrol
