// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/assessment"
	"github.com/theopenlane/core/internal/ent/generated/assessmentresponse"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// AssessmentResponseQuery is the builder for querying AssessmentResponse entities.
type AssessmentResponseQuery struct {
	config
	ctx                    *QueryContext
	order                  []assessmentresponse.OrderOption
	inters                 []Interceptor
	predicates             []predicate.AssessmentResponse
	withOwner              *OrganizationQuery
	withBlockedGroups      *GroupQuery
	withEditors            *GroupQuery
	withViewers            *GroupQuery
	withAssessment         *AssessmentQuery
	withUser               *UserQuery
	withDocument           *DocumentDataQuery
	loadTotal              []func(context.Context, []*AssessmentResponse) error
	modifiers              []func(*sql.Selector)
	withNamedBlockedGroups map[string]*GroupQuery
	withNamedEditors       map[string]*GroupQuery
	withNamedViewers       map[string]*GroupQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AssessmentResponseQuery builder.
func (arq *AssessmentResponseQuery) Where(ps ...predicate.AssessmentResponse) *AssessmentResponseQuery {
	arq.predicates = append(arq.predicates, ps...)
	return arq
}

// Limit the number of records to be returned by this query.
func (arq *AssessmentResponseQuery) Limit(limit int) *AssessmentResponseQuery {
	arq.ctx.Limit = &limit
	return arq
}

// Offset to start from.
func (arq *AssessmentResponseQuery) Offset(offset int) *AssessmentResponseQuery {
	arq.ctx.Offset = &offset
	return arq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (arq *AssessmentResponseQuery) Unique(unique bool) *AssessmentResponseQuery {
	arq.ctx.Unique = &unique
	return arq
}

// Order specifies how the records should be ordered.
func (arq *AssessmentResponseQuery) Order(o ...assessmentresponse.OrderOption) *AssessmentResponseQuery {
	arq.order = append(arq.order, o...)
	return arq
}

// QueryOwner chains the current query on the "owner" edge.
func (arq *AssessmentResponseQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: arq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessmentresponse.Table, assessmentresponse.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assessmentresponse.OwnerTable, assessmentresponse.OwnerColumn),
		)
		schemaConfig := arq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.AssessmentResponse
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlockedGroups chains the current query on the "blocked_groups" edge.
func (arq *AssessmentResponseQuery) QueryBlockedGroups() *GroupQuery {
	query := (&GroupClient{config: arq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessmentresponse.Table, assessmentresponse.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, assessmentresponse.BlockedGroupsTable, assessmentresponse.BlockedGroupsPrimaryKey...),
		)
		schemaConfig := arq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.AssessmentResponseBlockedGroups
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEditors chains the current query on the "editors" edge.
func (arq *AssessmentResponseQuery) QueryEditors() *GroupQuery {
	query := (&GroupClient{config: arq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessmentresponse.Table, assessmentresponse.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, assessmentresponse.EditorsTable, assessmentresponse.EditorsPrimaryKey...),
		)
		schemaConfig := arq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.AssessmentResponseEditors
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryViewers chains the current query on the "viewers" edge.
func (arq *AssessmentResponseQuery) QueryViewers() *GroupQuery {
	query := (&GroupClient{config: arq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessmentresponse.Table, assessmentresponse.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, assessmentresponse.ViewersTable, assessmentresponse.ViewersPrimaryKey...),
		)
		schemaConfig := arq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.AssessmentResponseViewers
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssessment chains the current query on the "assessment" edge.
func (arq *AssessmentResponseQuery) QueryAssessment() *AssessmentQuery {
	query := (&AssessmentClient{config: arq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessmentresponse.Table, assessmentresponse.FieldID, selector),
			sqlgraph.To(assessment.Table, assessment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, assessmentresponse.AssessmentTable, assessmentresponse.AssessmentColumn),
		)
		schemaConfig := arq.schemaConfig
		step.To.Schema = schemaConfig.Assessment
		step.Edge.Schema = schemaConfig.AssessmentResponse
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (arq *AssessmentResponseQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: arq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessmentresponse.Table, assessmentresponse.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assessmentresponse.UserTable, assessmentresponse.UserColumn),
		)
		schemaConfig := arq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.AssessmentResponse
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocument chains the current query on the "document" edge.
func (arq *AssessmentResponseQuery) QueryDocument() *DocumentDataQuery {
	query := (&DocumentDataClient{config: arq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(assessmentresponse.Table, assessmentresponse.FieldID, selector),
			sqlgraph.To(documentdata.Table, documentdata.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, assessmentresponse.DocumentTable, assessmentresponse.DocumentColumn),
		)
		schemaConfig := arq.schemaConfig
		step.To.Schema = schemaConfig.DocumentData
		step.Edge.Schema = schemaConfig.AssessmentResponse
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AssessmentResponse entity from the query.
// Returns a *NotFoundError when no AssessmentResponse was found.
func (arq *AssessmentResponseQuery) First(ctx context.Context) (*AssessmentResponse, error) {
	nodes, err := arq.Limit(1).All(setContextOp(ctx, arq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{assessmentresponse.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (arq *AssessmentResponseQuery) FirstX(ctx context.Context) *AssessmentResponse {
	node, err := arq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AssessmentResponse ID from the query.
// Returns a *NotFoundError when no AssessmentResponse ID was found.
func (arq *AssessmentResponseQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = arq.Limit(1).IDs(setContextOp(ctx, arq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{assessmentresponse.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (arq *AssessmentResponseQuery) FirstIDX(ctx context.Context) string {
	id, err := arq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AssessmentResponse entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AssessmentResponse entity is found.
// Returns a *NotFoundError when no AssessmentResponse entities are found.
func (arq *AssessmentResponseQuery) Only(ctx context.Context) (*AssessmentResponse, error) {
	nodes, err := arq.Limit(2).All(setContextOp(ctx, arq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{assessmentresponse.Label}
	default:
		return nil, &NotSingularError{assessmentresponse.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (arq *AssessmentResponseQuery) OnlyX(ctx context.Context) *AssessmentResponse {
	node, err := arq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AssessmentResponse ID in the query.
// Returns a *NotSingularError when more than one AssessmentResponse ID is found.
// Returns a *NotFoundError when no entities are found.
func (arq *AssessmentResponseQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = arq.Limit(2).IDs(setContextOp(ctx, arq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{assessmentresponse.Label}
	default:
		err = &NotSingularError{assessmentresponse.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (arq *AssessmentResponseQuery) OnlyIDX(ctx context.Context) string {
	id, err := arq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AssessmentResponses.
func (arq *AssessmentResponseQuery) All(ctx context.Context) ([]*AssessmentResponse, error) {
	ctx = setContextOp(ctx, arq.ctx, ent.OpQueryAll)
	if err := arq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AssessmentResponse, *AssessmentResponseQuery]()
	return withInterceptors[[]*AssessmentResponse](ctx, arq, qr, arq.inters)
}

// AllX is like All, but panics if an error occurs.
func (arq *AssessmentResponseQuery) AllX(ctx context.Context) []*AssessmentResponse {
	nodes, err := arq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AssessmentResponse IDs.
func (arq *AssessmentResponseQuery) IDs(ctx context.Context) (ids []string, err error) {
	if arq.ctx.Unique == nil && arq.path != nil {
		arq.Unique(true)
	}
	ctx = setContextOp(ctx, arq.ctx, ent.OpQueryIDs)
	if err = arq.Select(assessmentresponse.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (arq *AssessmentResponseQuery) IDsX(ctx context.Context) []string {
	ids, err := arq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (arq *AssessmentResponseQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, arq.ctx, ent.OpQueryCount)
	if err := arq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, arq, querierCount[*AssessmentResponseQuery](), arq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (arq *AssessmentResponseQuery) CountX(ctx context.Context) int {
	count, err := arq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (arq *AssessmentResponseQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, arq.ctx, ent.OpQueryExist)
	switch _, err := arq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (arq *AssessmentResponseQuery) ExistX(ctx context.Context) bool {
	exist, err := arq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AssessmentResponseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (arq *AssessmentResponseQuery) Clone() *AssessmentResponseQuery {
	if arq == nil {
		return nil
	}
	return &AssessmentResponseQuery{
		config:            arq.config,
		ctx:               arq.ctx.Clone(),
		order:             append([]assessmentresponse.OrderOption{}, arq.order...),
		inters:            append([]Interceptor{}, arq.inters...),
		predicates:        append([]predicate.AssessmentResponse{}, arq.predicates...),
		withOwner:         arq.withOwner.Clone(),
		withBlockedGroups: arq.withBlockedGroups.Clone(),
		withEditors:       arq.withEditors.Clone(),
		withViewers:       arq.withViewers.Clone(),
		withAssessment:    arq.withAssessment.Clone(),
		withUser:          arq.withUser.Clone(),
		withDocument:      arq.withDocument.Clone(),
		// clone intermediate query.
		sql:       arq.sql.Clone(),
		path:      arq.path,
		modifiers: append([]func(*sql.Selector){}, arq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AssessmentResponseQuery) WithOwner(opts ...func(*OrganizationQuery)) *AssessmentResponseQuery {
	query := (&OrganizationClient{config: arq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arq.withOwner = query
	return arq
}

// WithBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AssessmentResponseQuery) WithBlockedGroups(opts ...func(*GroupQuery)) *AssessmentResponseQuery {
	query := (&GroupClient{config: arq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arq.withBlockedGroups = query
	return arq
}

// WithEditors tells the query-builder to eager-load the nodes that are connected to
// the "editors" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AssessmentResponseQuery) WithEditors(opts ...func(*GroupQuery)) *AssessmentResponseQuery {
	query := (&GroupClient{config: arq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arq.withEditors = query
	return arq
}

// WithViewers tells the query-builder to eager-load the nodes that are connected to
// the "viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AssessmentResponseQuery) WithViewers(opts ...func(*GroupQuery)) *AssessmentResponseQuery {
	query := (&GroupClient{config: arq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arq.withViewers = query
	return arq
}

// WithAssessment tells the query-builder to eager-load the nodes that are connected to
// the "assessment" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AssessmentResponseQuery) WithAssessment(opts ...func(*AssessmentQuery)) *AssessmentResponseQuery {
	query := (&AssessmentClient{config: arq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arq.withAssessment = query
	return arq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AssessmentResponseQuery) WithUser(opts ...func(*UserQuery)) *AssessmentResponseQuery {
	query := (&UserClient{config: arq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arq.withUser = query
	return arq
}

// WithDocument tells the query-builder to eager-load the nodes that are connected to
// the "document" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AssessmentResponseQuery) WithDocument(opts ...func(*DocumentDataQuery)) *AssessmentResponseQuery {
	query := (&DocumentDataClient{config: arq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arq.withDocument = query
	return arq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AssessmentResponse.Query().
//		GroupBy(assessmentresponse.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (arq *AssessmentResponseQuery) GroupBy(field string, fields ...string) *AssessmentResponseGroupBy {
	arq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AssessmentResponseGroupBy{build: arq}
	grbuild.flds = &arq.ctx.Fields
	grbuild.label = assessmentresponse.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AssessmentResponse.Query().
//		Select(assessmentresponse.FieldCreatedAt).
//		Scan(ctx, &v)
func (arq *AssessmentResponseQuery) Select(fields ...string) *AssessmentResponseSelect {
	arq.ctx.Fields = append(arq.ctx.Fields, fields...)
	sbuild := &AssessmentResponseSelect{AssessmentResponseQuery: arq}
	sbuild.label = assessmentresponse.Label
	sbuild.flds, sbuild.scan = &arq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AssessmentResponseSelect configured with the given aggregations.
func (arq *AssessmentResponseQuery) Aggregate(fns ...AggregateFunc) *AssessmentResponseSelect {
	return arq.Select().Aggregate(fns...)
}

func (arq *AssessmentResponseQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range arq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, arq); err != nil {
				return err
			}
		}
	}
	for _, f := range arq.ctx.Fields {
		if !assessmentresponse.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if arq.path != nil {
		prev, err := arq.path(ctx)
		if err != nil {
			return err
		}
		arq.sql = prev
	}
	if assessmentresponse.Policy == nil {
		return errors.New("generated: uninitialized assessmentresponse.Policy (forgotten import generated/runtime?)")
	}
	if err := assessmentresponse.Policy.EvalQuery(ctx, arq); err != nil {
		return err
	}
	return nil
}

func (arq *AssessmentResponseQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AssessmentResponse, error) {
	var (
		nodes       = []*AssessmentResponse{}
		_spec       = arq.querySpec()
		loadedTypes = [7]bool{
			arq.withOwner != nil,
			arq.withBlockedGroups != nil,
			arq.withEditors != nil,
			arq.withViewers != nil,
			arq.withAssessment != nil,
			arq.withUser != nil,
			arq.withDocument != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AssessmentResponse).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AssessmentResponse{config: arq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = arq.schemaConfig.AssessmentResponse
	ctx = internal.NewSchemaConfigContext(ctx, arq.schemaConfig)
	if len(arq.modifiers) > 0 {
		_spec.Modifiers = arq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, arq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := arq.withOwner; query != nil {
		if err := arq.loadOwner(ctx, query, nodes, nil,
			func(n *AssessmentResponse, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := arq.withBlockedGroups; query != nil {
		if err := arq.loadBlockedGroups(ctx, query, nodes,
			func(n *AssessmentResponse) { n.Edges.BlockedGroups = []*Group{} },
			func(n *AssessmentResponse, e *Group) { n.Edges.BlockedGroups = append(n.Edges.BlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := arq.withEditors; query != nil {
		if err := arq.loadEditors(ctx, query, nodes,
			func(n *AssessmentResponse) { n.Edges.Editors = []*Group{} },
			func(n *AssessmentResponse, e *Group) { n.Edges.Editors = append(n.Edges.Editors, e) }); err != nil {
			return nil, err
		}
	}
	if query := arq.withViewers; query != nil {
		if err := arq.loadViewers(ctx, query, nodes,
			func(n *AssessmentResponse) { n.Edges.Viewers = []*Group{} },
			func(n *AssessmentResponse, e *Group) { n.Edges.Viewers = append(n.Edges.Viewers, e) }); err != nil {
			return nil, err
		}
	}
	if query := arq.withAssessment; query != nil {
		if err := arq.loadAssessment(ctx, query, nodes, nil,
			func(n *AssessmentResponse, e *Assessment) { n.Edges.Assessment = e }); err != nil {
			return nil, err
		}
	}
	if query := arq.withUser; query != nil {
		if err := arq.loadUser(ctx, query, nodes, nil,
			func(n *AssessmentResponse, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := arq.withDocument; query != nil {
		if err := arq.loadDocument(ctx, query, nodes, nil,
			func(n *AssessmentResponse, e *DocumentData) { n.Edges.Document = e }); err != nil {
			return nil, err
		}
	}
	for name, query := range arq.withNamedBlockedGroups {
		if err := arq.loadBlockedGroups(ctx, query, nodes,
			func(n *AssessmentResponse) { n.appendNamedBlockedGroups(name) },
			func(n *AssessmentResponse, e *Group) { n.appendNamedBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range arq.withNamedEditors {
		if err := arq.loadEditors(ctx, query, nodes,
			func(n *AssessmentResponse) { n.appendNamedEditors(name) },
			func(n *AssessmentResponse, e *Group) { n.appendNamedEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range arq.withNamedViewers {
		if err := arq.loadViewers(ctx, query, nodes,
			func(n *AssessmentResponse) { n.appendNamedViewers(name) },
			func(n *AssessmentResponse, e *Group) { n.appendNamedViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range arq.loadTotal {
		if err := arq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (arq *AssessmentResponseQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*AssessmentResponse, init func(*AssessmentResponse), assign func(*AssessmentResponse, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*AssessmentResponse)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (arq *AssessmentResponseQuery) loadBlockedGroups(ctx context.Context, query *GroupQuery, nodes []*AssessmentResponse, init func(*AssessmentResponse), assign func(*AssessmentResponse, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*AssessmentResponse)
	nids := make(map[string]map[*AssessmentResponse]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(assessmentresponse.BlockedGroupsTable)
		joinT.Schema(arq.schemaConfig.AssessmentResponseBlockedGroups)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(assessmentresponse.BlockedGroupsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(assessmentresponse.BlockedGroupsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(assessmentresponse.BlockedGroupsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*AssessmentResponse]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (arq *AssessmentResponseQuery) loadEditors(ctx context.Context, query *GroupQuery, nodes []*AssessmentResponse, init func(*AssessmentResponse), assign func(*AssessmentResponse, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*AssessmentResponse)
	nids := make(map[string]map[*AssessmentResponse]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(assessmentresponse.EditorsTable)
		joinT.Schema(arq.schemaConfig.AssessmentResponseEditors)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(assessmentresponse.EditorsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(assessmentresponse.EditorsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(assessmentresponse.EditorsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*AssessmentResponse]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (arq *AssessmentResponseQuery) loadViewers(ctx context.Context, query *GroupQuery, nodes []*AssessmentResponse, init func(*AssessmentResponse), assign func(*AssessmentResponse, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*AssessmentResponse)
	nids := make(map[string]map[*AssessmentResponse]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(assessmentresponse.ViewersTable)
		joinT.Schema(arq.schemaConfig.AssessmentResponseViewers)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(assessmentresponse.ViewersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(assessmentresponse.ViewersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(assessmentresponse.ViewersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*AssessmentResponse]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "viewers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (arq *AssessmentResponseQuery) loadAssessment(ctx context.Context, query *AssessmentQuery, nodes []*AssessmentResponse, init func(*AssessmentResponse), assign func(*AssessmentResponse, *Assessment)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*AssessmentResponse)
	for i := range nodes {
		fk := nodes[i].AssessmentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(assessment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "assessment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (arq *AssessmentResponseQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*AssessmentResponse, init func(*AssessmentResponse), assign func(*AssessmentResponse, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*AssessmentResponse)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (arq *AssessmentResponseQuery) loadDocument(ctx context.Context, query *DocumentDataQuery, nodes []*AssessmentResponse, init func(*AssessmentResponse), assign func(*AssessmentResponse, *DocumentData)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*AssessmentResponse)
	for i := range nodes {
		fk := nodes[i].ResponseDataID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(documentdata.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "response_data_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (arq *AssessmentResponseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := arq.querySpec()
	_spec.Node.Schema = arq.schemaConfig.AssessmentResponse
	ctx = internal.NewSchemaConfigContext(ctx, arq.schemaConfig)
	if len(arq.modifiers) > 0 {
		_spec.Modifiers = arq.modifiers
	}
	_spec.Node.Columns = arq.ctx.Fields
	if len(arq.ctx.Fields) > 0 {
		_spec.Unique = arq.ctx.Unique != nil && *arq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, arq.driver, _spec)
}

func (arq *AssessmentResponseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(assessmentresponse.Table, assessmentresponse.Columns, sqlgraph.NewFieldSpec(assessmentresponse.FieldID, field.TypeString))
	_spec.From = arq.sql
	if unique := arq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if arq.path != nil {
		_spec.Unique = true
	}
	if fields := arq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, assessmentresponse.FieldID)
		for i := range fields {
			if fields[i] != assessmentresponse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if arq.withOwner != nil {
			_spec.Node.AddColumnOnce(assessmentresponse.FieldOwnerID)
		}
		if arq.withAssessment != nil {
			_spec.Node.AddColumnOnce(assessmentresponse.FieldAssessmentID)
		}
		if arq.withUser != nil {
			_spec.Node.AddColumnOnce(assessmentresponse.FieldUserID)
		}
		if arq.withDocument != nil {
			_spec.Node.AddColumnOnce(assessmentresponse.FieldResponseDataID)
		}
	}
	if ps := arq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := arq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := arq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := arq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (arq *AssessmentResponseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(arq.driver.Dialect())
	t1 := builder.Table(assessmentresponse.Table)
	columns := arq.ctx.Fields
	if len(columns) == 0 {
		columns = assessmentresponse.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if arq.sql != nil {
		selector = arq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if arq.ctx.Unique != nil && *arq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(arq.schemaConfig.AssessmentResponse)
	ctx = internal.NewSchemaConfigContext(ctx, arq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range arq.modifiers {
		m(selector)
	}
	for _, p := range arq.predicates {
		p(selector)
	}
	for _, p := range arq.order {
		p(selector)
	}
	if offset := arq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := arq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (arq *AssessmentResponseQuery) Modify(modifiers ...func(s *sql.Selector)) *AssessmentResponseSelect {
	arq.modifiers = append(arq.modifiers, modifiers...)
	return arq.Select()
}

// WithNamedBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (arq *AssessmentResponseQuery) WithNamedBlockedGroups(name string, opts ...func(*GroupQuery)) *AssessmentResponseQuery {
	query := (&GroupClient{config: arq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if arq.withNamedBlockedGroups == nil {
		arq.withNamedBlockedGroups = make(map[string]*GroupQuery)
	}
	arq.withNamedBlockedGroups[name] = query
	return arq
}

// WithNamedEditors tells the query-builder to eager-load the nodes that are connected to the "editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (arq *AssessmentResponseQuery) WithNamedEditors(name string, opts ...func(*GroupQuery)) *AssessmentResponseQuery {
	query := (&GroupClient{config: arq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if arq.withNamedEditors == nil {
		arq.withNamedEditors = make(map[string]*GroupQuery)
	}
	arq.withNamedEditors[name] = query
	return arq
}

// WithNamedViewers tells the query-builder to eager-load the nodes that are connected to the "viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (arq *AssessmentResponseQuery) WithNamedViewers(name string, opts ...func(*GroupQuery)) *AssessmentResponseQuery {
	query := (&GroupClient{config: arq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if arq.withNamedViewers == nil {
		arq.withNamedViewers = make(map[string]*GroupQuery)
	}
	arq.withNamedViewers[name] = query
	return arq
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (arq *AssessmentResponseQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, arq.ctx, ent.OpQueryIDs)
	if err := arq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return arq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, arq, qr, arq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// AssessmentResponseGroupBy is the group-by builder for AssessmentResponse entities.
type AssessmentResponseGroupBy struct {
	selector
	build *AssessmentResponseQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (argb *AssessmentResponseGroupBy) Aggregate(fns ...AggregateFunc) *AssessmentResponseGroupBy {
	argb.fns = append(argb.fns, fns...)
	return argb
}

// Scan applies the selector query and scans the result into the given value.
func (argb *AssessmentResponseGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, argb.build.ctx, ent.OpQueryGroupBy)
	if err := argb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssessmentResponseQuery, *AssessmentResponseGroupBy](ctx, argb.build, argb, argb.build.inters, v)
}

func (argb *AssessmentResponseGroupBy) sqlScan(ctx context.Context, root *AssessmentResponseQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(argb.fns))
	for _, fn := range argb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*argb.flds)+len(argb.fns))
		for _, f := range *argb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*argb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := argb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AssessmentResponseSelect is the builder for selecting fields of AssessmentResponse entities.
type AssessmentResponseSelect struct {
	*AssessmentResponseQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ars *AssessmentResponseSelect) Aggregate(fns ...AggregateFunc) *AssessmentResponseSelect {
	ars.fns = append(ars.fns, fns...)
	return ars
}

// Scan applies the selector query and scans the result into the given value.
func (ars *AssessmentResponseSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ars.ctx, ent.OpQuerySelect)
	if err := ars.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AssessmentResponseQuery, *AssessmentResponseSelect](ctx, ars.AssessmentResponseQuery, ars, ars.inters, v)
}

func (ars *AssessmentResponseSelect) sqlScan(ctx context.Context, root *AssessmentResponseQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ars.fns))
	for _, fn := range ars.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ars.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ars.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ars *AssessmentResponseSelect) Modify(modifiers ...func(s *sql.Selector)) *AssessmentResponseSelect {
	ars.modifiers = append(ars.modifiers, modifiers...)
	return ars
}
