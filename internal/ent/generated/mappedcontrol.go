// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
)

// MappedControl is the model entity for the MappedControl schema.
type MappedControl struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the id of the control being mapped
	ControlID string `json:"control_id,omitempty"`
	// the id of the control that is mapped to
	MappedControlID string `json:"mapped_control_id,omitempty"`
	// the type of mapping between the two controls, e.g. subset, intersect, equal, superset
	MappingType string `json:"mapping_type,omitempty"`
	// description of how the two controls are related
	Relation string `json:"relation,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MappedControlQuery when eager-loading is set.
	Edges        MappedControlEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MappedControlEdges holds the relations/edges for other nodes in the graph.
type MappedControlEdges struct {
	// Control holds the value of the control edge.
	Control *Control `json:"control,omitempty"`
	// mapped control to the original control, meaning there is overlap between the controls
	MappedControl *Control `json:"mapped_control,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ControlOrErr returns the Control value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MappedControlEdges) ControlOrErr() (*Control, error) {
	if e.Control != nil {
		return e.Control, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: control.Label}
	}
	return nil, &NotLoadedError{edge: "control"}
}

// MappedControlOrErr returns the MappedControl value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MappedControlEdges) MappedControlOrErr() (*Control, error) {
	if e.MappedControl != nil {
		return e.MappedControl, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: control.Label}
	}
	return nil, &NotLoadedError{edge: "mapped_control"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MappedControl) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mappedcontrol.FieldTags:
			values[i] = new([]byte)
		case mappedcontrol.FieldID, mappedcontrol.FieldCreatedBy, mappedcontrol.FieldUpdatedBy, mappedcontrol.FieldDeletedBy, mappedcontrol.FieldControlID, mappedcontrol.FieldMappedControlID, mappedcontrol.FieldMappingType, mappedcontrol.FieldRelation:
			values[i] = new(sql.NullString)
		case mappedcontrol.FieldCreatedAt, mappedcontrol.FieldUpdatedAt, mappedcontrol.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MappedControl fields.
func (mc *MappedControl) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mappedcontrol.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				mc.ID = value.String
			}
		case mappedcontrol.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				mc.CreatedAt = value.Time
			}
		case mappedcontrol.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				mc.UpdatedAt = value.Time
			}
		case mappedcontrol.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				mc.CreatedBy = value.String
			}
		case mappedcontrol.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				mc.UpdatedBy = value.String
			}
		case mappedcontrol.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				mc.DeletedAt = value.Time
			}
		case mappedcontrol.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				mc.DeletedBy = value.String
			}
		case mappedcontrol.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &mc.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case mappedcontrol.FieldControlID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_id", values[i])
			} else if value.Valid {
				mc.ControlID = value.String
			}
		case mappedcontrol.FieldMappedControlID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapped_control_id", values[i])
			} else if value.Valid {
				mc.MappedControlID = value.String
			}
		case mappedcontrol.FieldMappingType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_type", values[i])
			} else if value.Valid {
				mc.MappingType = value.String
			}
		case mappedcontrol.FieldRelation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relation", values[i])
			} else if value.Valid {
				mc.Relation = value.String
			}
		default:
			mc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MappedControl.
// This includes values selected through modifiers, order, etc.
func (mc *MappedControl) Value(name string) (ent.Value, error) {
	return mc.selectValues.Get(name)
}

// QueryControl queries the "control" edge of the MappedControl entity.
func (mc *MappedControl) QueryControl() *ControlQuery {
	return NewMappedControlClient(mc.config).QueryControl(mc)
}

// QueryMappedControl queries the "mapped_control" edge of the MappedControl entity.
func (mc *MappedControl) QueryMappedControl() *ControlQuery {
	return NewMappedControlClient(mc.config).QueryMappedControl(mc)
}

// Update returns a builder for updating this MappedControl.
// Note that you need to call MappedControl.Unwrap() before calling this method if this MappedControl
// was returned from a transaction, and the transaction was committed or rolled back.
func (mc *MappedControl) Update() *MappedControlUpdateOne {
	return NewMappedControlClient(mc.config).UpdateOne(mc)
}

// Unwrap unwraps the MappedControl entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mc *MappedControl) Unwrap() *MappedControl {
	_tx, ok := mc.config.driver.(*txDriver)
	if !ok {
		panic("generated: MappedControl is not a transactional entity")
	}
	mc.config.driver = _tx.drv
	return mc
}

// String implements the fmt.Stringer.
func (mc *MappedControl) String() string {
	var builder strings.Builder
	builder.WriteString("MappedControl(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(mc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(mc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(mc.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(mc.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(mc.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(mc.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", mc.Tags))
	builder.WriteString(", ")
	builder.WriteString("control_id=")
	builder.WriteString(mc.ControlID)
	builder.WriteString(", ")
	builder.WriteString("mapped_control_id=")
	builder.WriteString(mc.MappedControlID)
	builder.WriteString(", ")
	builder.WriteString("mapping_type=")
	builder.WriteString(mc.MappingType)
	builder.WriteString(", ")
	builder.WriteString("relation=")
	builder.WriteString(mc.Relation)
	builder.WriteByte(')')
	return builder.String()
}

// MappedControls is a parsable slice of MappedControl.
type MappedControls []*MappedControl
