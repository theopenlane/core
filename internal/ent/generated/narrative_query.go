// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// NarrativeQuery is the builder for querying Narrative entities.
type NarrativeQuery struct {
	config
	ctx                       *QueryContext
	order                     []narrative.OrderOption
	inters                    []Interceptor
	predicates                []predicate.Narrative
	withOwner                 *OrganizationQuery
	withBlockedGroups         *GroupQuery
	withEditors               *GroupQuery
	withViewers               *GroupQuery
	withInternalPolicy        *InternalPolicyQuery
	withControl               *ControlQuery
	withProcedure             *ProcedureQuery
	withControlObjective      *ControlObjectiveQuery
	withPrograms              *ProgramQuery
	loadTotal                 []func(context.Context, []*Narrative) error
	modifiers                 []func(*sql.Selector)
	withNamedBlockedGroups    map[string]*GroupQuery
	withNamedEditors          map[string]*GroupQuery
	withNamedViewers          map[string]*GroupQuery
	withNamedInternalPolicy   map[string]*InternalPolicyQuery
	withNamedControl          map[string]*ControlQuery
	withNamedProcedure        map[string]*ProcedureQuery
	withNamedControlObjective map[string]*ControlObjectiveQuery
	withNamedPrograms         map[string]*ProgramQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NarrativeQuery builder.
func (nq *NarrativeQuery) Where(ps ...predicate.Narrative) *NarrativeQuery {
	nq.predicates = append(nq.predicates, ps...)
	return nq
}

// Limit the number of records to be returned by this query.
func (nq *NarrativeQuery) Limit(limit int) *NarrativeQuery {
	nq.ctx.Limit = &limit
	return nq
}

// Offset to start from.
func (nq *NarrativeQuery) Offset(offset int) *NarrativeQuery {
	nq.ctx.Offset = &offset
	return nq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nq *NarrativeQuery) Unique(unique bool) *NarrativeQuery {
	nq.ctx.Unique = &unique
	return nq
}

// Order specifies how the records should be ordered.
func (nq *NarrativeQuery) Order(o ...narrative.OrderOption) *NarrativeQuery {
	nq.order = append(nq.order, o...)
	return nq
}

// QueryOwner chains the current query on the "owner" edge.
func (nq *NarrativeQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: nq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(narrative.Table, narrative.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, narrative.OwnerTable, narrative.OwnerColumn),
		)
		schemaConfig := nq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Narrative
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlockedGroups chains the current query on the "blocked_groups" edge.
func (nq *NarrativeQuery) QueryBlockedGroups() *GroupQuery {
	query := (&GroupClient{config: nq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(narrative.Table, narrative.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, narrative.BlockedGroupsTable, narrative.BlockedGroupsPrimaryKey...),
		)
		schemaConfig := nq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.NarrativeBlockedGroups
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEditors chains the current query on the "editors" edge.
func (nq *NarrativeQuery) QueryEditors() *GroupQuery {
	query := (&GroupClient{config: nq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(narrative.Table, narrative.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, narrative.EditorsTable, narrative.EditorsPrimaryKey...),
		)
		schemaConfig := nq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.NarrativeEditors
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryViewers chains the current query on the "viewers" edge.
func (nq *NarrativeQuery) QueryViewers() *GroupQuery {
	query := (&GroupClient{config: nq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(narrative.Table, narrative.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, narrative.ViewersTable, narrative.ViewersPrimaryKey...),
		)
		schemaConfig := nq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.NarrativeViewers
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInternalPolicy chains the current query on the "internal_policy" edge.
func (nq *NarrativeQuery) QueryInternalPolicy() *InternalPolicyQuery {
	query := (&InternalPolicyClient{config: nq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(narrative.Table, narrative.FieldID, selector),
			sqlgraph.To(internalpolicy.Table, internalpolicy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, narrative.InternalPolicyTable, narrative.InternalPolicyPrimaryKey...),
		)
		schemaConfig := nq.schemaConfig
		step.To.Schema = schemaConfig.InternalPolicy
		step.Edge.Schema = schemaConfig.InternalPolicyNarratives
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControl chains the current query on the "control" edge.
func (nq *NarrativeQuery) QueryControl() *ControlQuery {
	query := (&ControlClient{config: nq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(narrative.Table, narrative.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, narrative.ControlTable, narrative.ControlPrimaryKey...),
		)
		schemaConfig := nq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlNarratives
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedure chains the current query on the "procedure" edge.
func (nq *NarrativeQuery) QueryProcedure() *ProcedureQuery {
	query := (&ProcedureClient{config: nq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(narrative.Table, narrative.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, narrative.ProcedureTable, narrative.ProcedurePrimaryKey...),
		)
		schemaConfig := nq.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.ProcedureNarratives
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlObjective chains the current query on the "control_objective" edge.
func (nq *NarrativeQuery) QueryControlObjective() *ControlObjectiveQuery {
	query := (&ControlObjectiveClient{config: nq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(narrative.Table, narrative.FieldID, selector),
			sqlgraph.To(controlobjective.Table, controlobjective.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, narrative.ControlObjectiveTable, narrative.ControlObjectivePrimaryKey...),
		)
		schemaConfig := nq.schemaConfig
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.ControlObjectiveNarratives
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrograms chains the current query on the "programs" edge.
func (nq *NarrativeQuery) QueryPrograms() *ProgramQuery {
	query := (&ProgramClient{config: nq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(narrative.Table, narrative.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, narrative.ProgramsTable, narrative.ProgramsPrimaryKey...),
		)
		schemaConfig := nq.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramNarratives
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Narrative entity from the query.
// Returns a *NotFoundError when no Narrative was found.
func (nq *NarrativeQuery) First(ctx context.Context) (*Narrative, error) {
	nodes, err := nq.Limit(1).All(setContextOp(ctx, nq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{narrative.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nq *NarrativeQuery) FirstX(ctx context.Context) *Narrative {
	node, err := nq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Narrative ID from the query.
// Returns a *NotFoundError when no Narrative ID was found.
func (nq *NarrativeQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = nq.Limit(1).IDs(setContextOp(ctx, nq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{narrative.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nq *NarrativeQuery) FirstIDX(ctx context.Context) string {
	id, err := nq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Narrative entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Narrative entity is found.
// Returns a *NotFoundError when no Narrative entities are found.
func (nq *NarrativeQuery) Only(ctx context.Context) (*Narrative, error) {
	nodes, err := nq.Limit(2).All(setContextOp(ctx, nq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{narrative.Label}
	default:
		return nil, &NotSingularError{narrative.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nq *NarrativeQuery) OnlyX(ctx context.Context) *Narrative {
	node, err := nq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Narrative ID in the query.
// Returns a *NotSingularError when more than one Narrative ID is found.
// Returns a *NotFoundError when no entities are found.
func (nq *NarrativeQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = nq.Limit(2).IDs(setContextOp(ctx, nq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{narrative.Label}
	default:
		err = &NotSingularError{narrative.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nq *NarrativeQuery) OnlyIDX(ctx context.Context) string {
	id, err := nq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Narratives.
func (nq *NarrativeQuery) All(ctx context.Context) ([]*Narrative, error) {
	ctx = setContextOp(ctx, nq.ctx, ent.OpQueryAll)
	if err := nq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Narrative, *NarrativeQuery]()
	return withInterceptors[[]*Narrative](ctx, nq, qr, nq.inters)
}

// AllX is like All, but panics if an error occurs.
func (nq *NarrativeQuery) AllX(ctx context.Context) []*Narrative {
	nodes, err := nq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Narrative IDs.
func (nq *NarrativeQuery) IDs(ctx context.Context) (ids []string, err error) {
	if nq.ctx.Unique == nil && nq.path != nil {
		nq.Unique(true)
	}
	ctx = setContextOp(ctx, nq.ctx, ent.OpQueryIDs)
	if err = nq.Select(narrative.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nq *NarrativeQuery) IDsX(ctx context.Context) []string {
	ids, err := nq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nq *NarrativeQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, nq.ctx, ent.OpQueryCount)
	if err := nq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, nq, querierCount[*NarrativeQuery](), nq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (nq *NarrativeQuery) CountX(ctx context.Context) int {
	count, err := nq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nq *NarrativeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, nq.ctx, ent.OpQueryExist)
	switch _, err := nq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (nq *NarrativeQuery) ExistX(ctx context.Context) bool {
	exist, err := nq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NarrativeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nq *NarrativeQuery) Clone() *NarrativeQuery {
	if nq == nil {
		return nil
	}
	return &NarrativeQuery{
		config:               nq.config,
		ctx:                  nq.ctx.Clone(),
		order:                append([]narrative.OrderOption{}, nq.order...),
		inters:               append([]Interceptor{}, nq.inters...),
		predicates:           append([]predicate.Narrative{}, nq.predicates...),
		withOwner:            nq.withOwner.Clone(),
		withBlockedGroups:    nq.withBlockedGroups.Clone(),
		withEditors:          nq.withEditors.Clone(),
		withViewers:          nq.withViewers.Clone(),
		withInternalPolicy:   nq.withInternalPolicy.Clone(),
		withControl:          nq.withControl.Clone(),
		withProcedure:        nq.withProcedure.Clone(),
		withControlObjective: nq.withControlObjective.Clone(),
		withPrograms:         nq.withPrograms.Clone(),
		// clone intermediate query.
		sql:       nq.sql.Clone(),
		path:      nq.path,
		modifiers: append([]func(*sql.Selector){}, nq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithOwner(opts ...func(*OrganizationQuery)) *NarrativeQuery {
	query := (&OrganizationClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nq.withOwner = query
	return nq
}

// WithBlockedGroups tells the query-builder to eager-load the nodes that are connected to
// the "blocked_groups" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithBlockedGroups(opts ...func(*GroupQuery)) *NarrativeQuery {
	query := (&GroupClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nq.withBlockedGroups = query
	return nq
}

// WithEditors tells the query-builder to eager-load the nodes that are connected to
// the "editors" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithEditors(opts ...func(*GroupQuery)) *NarrativeQuery {
	query := (&GroupClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nq.withEditors = query
	return nq
}

// WithViewers tells the query-builder to eager-load the nodes that are connected to
// the "viewers" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithViewers(opts ...func(*GroupQuery)) *NarrativeQuery {
	query := (&GroupClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nq.withViewers = query
	return nq
}

// WithInternalPolicy tells the query-builder to eager-load the nodes that are connected to
// the "internal_policy" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithInternalPolicy(opts ...func(*InternalPolicyQuery)) *NarrativeQuery {
	query := (&InternalPolicyClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nq.withInternalPolicy = query
	return nq
}

// WithControl tells the query-builder to eager-load the nodes that are connected to
// the "control" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithControl(opts ...func(*ControlQuery)) *NarrativeQuery {
	query := (&ControlClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nq.withControl = query
	return nq
}

// WithProcedure tells the query-builder to eager-load the nodes that are connected to
// the "procedure" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithProcedure(opts ...func(*ProcedureQuery)) *NarrativeQuery {
	query := (&ProcedureClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nq.withProcedure = query
	return nq
}

// WithControlObjective tells the query-builder to eager-load the nodes that are connected to
// the "control_objective" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithControlObjective(opts ...func(*ControlObjectiveQuery)) *NarrativeQuery {
	query := (&ControlObjectiveClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nq.withControlObjective = query
	return nq
}

// WithPrograms tells the query-builder to eager-load the nodes that are connected to
// the "programs" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithPrograms(opts ...func(*ProgramQuery)) *NarrativeQuery {
	query := (&ProgramClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nq.withPrograms = query
	return nq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Narrative.Query().
//		GroupBy(narrative.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (nq *NarrativeQuery) GroupBy(field string, fields ...string) *NarrativeGroupBy {
	nq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NarrativeGroupBy{build: nq}
	grbuild.flds = &nq.ctx.Fields
	grbuild.label = narrative.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Narrative.Query().
//		Select(narrative.FieldCreatedAt).
//		Scan(ctx, &v)
func (nq *NarrativeQuery) Select(fields ...string) *NarrativeSelect {
	nq.ctx.Fields = append(nq.ctx.Fields, fields...)
	sbuild := &NarrativeSelect{NarrativeQuery: nq}
	sbuild.label = narrative.Label
	sbuild.flds, sbuild.scan = &nq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NarrativeSelect configured with the given aggregations.
func (nq *NarrativeQuery) Aggregate(fns ...AggregateFunc) *NarrativeSelect {
	return nq.Select().Aggregate(fns...)
}

func (nq *NarrativeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range nq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, nq); err != nil {
				return err
			}
		}
	}
	for _, f := range nq.ctx.Fields {
		if !narrative.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if nq.path != nil {
		prev, err := nq.path(ctx)
		if err != nil {
			return err
		}
		nq.sql = prev
	}
	if narrative.Policy == nil {
		return errors.New("generated: uninitialized narrative.Policy (forgotten import generated/runtime?)")
	}
	if err := narrative.Policy.EvalQuery(ctx, nq); err != nil {
		return err
	}
	return nil
}

func (nq *NarrativeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Narrative, error) {
	var (
		nodes       = []*Narrative{}
		_spec       = nq.querySpec()
		loadedTypes = [9]bool{
			nq.withOwner != nil,
			nq.withBlockedGroups != nil,
			nq.withEditors != nil,
			nq.withViewers != nil,
			nq.withInternalPolicy != nil,
			nq.withControl != nil,
			nq.withProcedure != nil,
			nq.withControlObjective != nil,
			nq.withPrograms != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Narrative).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Narrative{config: nq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = nq.schemaConfig.Narrative
	ctx = internal.NewSchemaConfigContext(ctx, nq.schemaConfig)
	if len(nq.modifiers) > 0 {
		_spec.Modifiers = nq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nq.withOwner; query != nil {
		if err := nq.loadOwner(ctx, query, nodes, nil,
			func(n *Narrative, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := nq.withBlockedGroups; query != nil {
		if err := nq.loadBlockedGroups(ctx, query, nodes,
			func(n *Narrative) { n.Edges.BlockedGroups = []*Group{} },
			func(n *Narrative, e *Group) { n.Edges.BlockedGroups = append(n.Edges.BlockedGroups, e) }); err != nil {
			return nil, err
		}
	}
	if query := nq.withEditors; query != nil {
		if err := nq.loadEditors(ctx, query, nodes,
			func(n *Narrative) { n.Edges.Editors = []*Group{} },
			func(n *Narrative, e *Group) { n.Edges.Editors = append(n.Edges.Editors, e) }); err != nil {
			return nil, err
		}
	}
	if query := nq.withViewers; query != nil {
		if err := nq.loadViewers(ctx, query, nodes,
			func(n *Narrative) { n.Edges.Viewers = []*Group{} },
			func(n *Narrative, e *Group) { n.Edges.Viewers = append(n.Edges.Viewers, e) }); err != nil {
			return nil, err
		}
	}
	if query := nq.withInternalPolicy; query != nil {
		if err := nq.loadInternalPolicy(ctx, query, nodes,
			func(n *Narrative) { n.Edges.InternalPolicy = []*InternalPolicy{} },
			func(n *Narrative, e *InternalPolicy) { n.Edges.InternalPolicy = append(n.Edges.InternalPolicy, e) }); err != nil {
			return nil, err
		}
	}
	if query := nq.withControl; query != nil {
		if err := nq.loadControl(ctx, query, nodes,
			func(n *Narrative) { n.Edges.Control = []*Control{} },
			func(n *Narrative, e *Control) { n.Edges.Control = append(n.Edges.Control, e) }); err != nil {
			return nil, err
		}
	}
	if query := nq.withProcedure; query != nil {
		if err := nq.loadProcedure(ctx, query, nodes,
			func(n *Narrative) { n.Edges.Procedure = []*Procedure{} },
			func(n *Narrative, e *Procedure) { n.Edges.Procedure = append(n.Edges.Procedure, e) }); err != nil {
			return nil, err
		}
	}
	if query := nq.withControlObjective; query != nil {
		if err := nq.loadControlObjective(ctx, query, nodes,
			func(n *Narrative) { n.Edges.ControlObjective = []*ControlObjective{} },
			func(n *Narrative, e *ControlObjective) {
				n.Edges.ControlObjective = append(n.Edges.ControlObjective, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := nq.withPrograms; query != nil {
		if err := nq.loadPrograms(ctx, query, nodes,
			func(n *Narrative) { n.Edges.Programs = []*Program{} },
			func(n *Narrative, e *Program) { n.Edges.Programs = append(n.Edges.Programs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range nq.withNamedBlockedGroups {
		if err := nq.loadBlockedGroups(ctx, query, nodes,
			func(n *Narrative) { n.appendNamedBlockedGroups(name) },
			func(n *Narrative, e *Group) { n.appendNamedBlockedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range nq.withNamedEditors {
		if err := nq.loadEditors(ctx, query, nodes,
			func(n *Narrative) { n.appendNamedEditors(name) },
			func(n *Narrative, e *Group) { n.appendNamedEditors(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range nq.withNamedViewers {
		if err := nq.loadViewers(ctx, query, nodes,
			func(n *Narrative) { n.appendNamedViewers(name) },
			func(n *Narrative, e *Group) { n.appendNamedViewers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range nq.withNamedInternalPolicy {
		if err := nq.loadInternalPolicy(ctx, query, nodes,
			func(n *Narrative) { n.appendNamedInternalPolicy(name) },
			func(n *Narrative, e *InternalPolicy) { n.appendNamedInternalPolicy(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range nq.withNamedControl {
		if err := nq.loadControl(ctx, query, nodes,
			func(n *Narrative) { n.appendNamedControl(name) },
			func(n *Narrative, e *Control) { n.appendNamedControl(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range nq.withNamedProcedure {
		if err := nq.loadProcedure(ctx, query, nodes,
			func(n *Narrative) { n.appendNamedProcedure(name) },
			func(n *Narrative, e *Procedure) { n.appendNamedProcedure(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range nq.withNamedControlObjective {
		if err := nq.loadControlObjective(ctx, query, nodes,
			func(n *Narrative) { n.appendNamedControlObjective(name) },
			func(n *Narrative, e *ControlObjective) { n.appendNamedControlObjective(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range nq.withNamedPrograms {
		if err := nq.loadPrograms(ctx, query, nodes,
			func(n *Narrative) { n.appendNamedPrograms(name) },
			func(n *Narrative, e *Program) { n.appendNamedPrograms(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range nq.loadTotal {
		if err := nq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nq *NarrativeQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*Narrative, init func(*Narrative), assign func(*Narrative, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Narrative)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (nq *NarrativeQuery) loadBlockedGroups(ctx context.Context, query *GroupQuery, nodes []*Narrative, init func(*Narrative), assign func(*Narrative, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Narrative)
	nids := make(map[string]map[*Narrative]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(narrative.BlockedGroupsTable)
		joinT.Schema(nq.schemaConfig.NarrativeBlockedGroups)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(narrative.BlockedGroupsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(narrative.BlockedGroupsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(narrative.BlockedGroupsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Narrative]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "blocked_groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (nq *NarrativeQuery) loadEditors(ctx context.Context, query *GroupQuery, nodes []*Narrative, init func(*Narrative), assign func(*Narrative, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Narrative)
	nids := make(map[string]map[*Narrative]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(narrative.EditorsTable)
		joinT.Schema(nq.schemaConfig.NarrativeEditors)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(narrative.EditorsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(narrative.EditorsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(narrative.EditorsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Narrative]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "editors" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (nq *NarrativeQuery) loadViewers(ctx context.Context, query *GroupQuery, nodes []*Narrative, init func(*Narrative), assign func(*Narrative, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Narrative)
	nids := make(map[string]map[*Narrative]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(narrative.ViewersTable)
		joinT.Schema(nq.schemaConfig.NarrativeViewers)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(narrative.ViewersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(narrative.ViewersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(narrative.ViewersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Narrative]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "viewers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (nq *NarrativeQuery) loadInternalPolicy(ctx context.Context, query *InternalPolicyQuery, nodes []*Narrative, init func(*Narrative), assign func(*Narrative, *InternalPolicy)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Narrative)
	nids := make(map[string]map[*Narrative]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(narrative.InternalPolicyTable)
		joinT.Schema(nq.schemaConfig.InternalPolicyNarratives)
		s.Join(joinT).On(s.C(internalpolicy.FieldID), joinT.C(narrative.InternalPolicyPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(narrative.InternalPolicyPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(narrative.InternalPolicyPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Narrative]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*InternalPolicy](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "internal_policy" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (nq *NarrativeQuery) loadControl(ctx context.Context, query *ControlQuery, nodes []*Narrative, init func(*Narrative), assign func(*Narrative, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Narrative)
	nids := make(map[string]map[*Narrative]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(narrative.ControlTable)
		joinT.Schema(nq.schemaConfig.ControlNarratives)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(narrative.ControlPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(narrative.ControlPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(narrative.ControlPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Narrative]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (nq *NarrativeQuery) loadProcedure(ctx context.Context, query *ProcedureQuery, nodes []*Narrative, init func(*Narrative), assign func(*Narrative, *Procedure)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Narrative)
	nids := make(map[string]map[*Narrative]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(narrative.ProcedureTable)
		joinT.Schema(nq.schemaConfig.ProcedureNarratives)
		s.Join(joinT).On(s.C(procedure.FieldID), joinT.C(narrative.ProcedurePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(narrative.ProcedurePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(narrative.ProcedurePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Narrative]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Procedure](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "procedure" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (nq *NarrativeQuery) loadControlObjective(ctx context.Context, query *ControlObjectiveQuery, nodes []*Narrative, init func(*Narrative), assign func(*Narrative, *ControlObjective)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Narrative)
	nids := make(map[string]map[*Narrative]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(narrative.ControlObjectiveTable)
		joinT.Schema(nq.schemaConfig.ControlObjectiveNarratives)
		s.Join(joinT).On(s.C(controlobjective.FieldID), joinT.C(narrative.ControlObjectivePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(narrative.ControlObjectivePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(narrative.ControlObjectivePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Narrative]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlObjective](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_objective" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (nq *NarrativeQuery) loadPrograms(ctx context.Context, query *ProgramQuery, nodes []*Narrative, init func(*Narrative), assign func(*Narrative, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Narrative)
	nids := make(map[string]map[*Narrative]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(narrative.ProgramsTable)
		joinT.Schema(nq.schemaConfig.ProgramNarratives)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(narrative.ProgramsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(narrative.ProgramsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(narrative.ProgramsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Narrative]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "programs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (nq *NarrativeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nq.querySpec()
	_spec.Node.Schema = nq.schemaConfig.Narrative
	ctx = internal.NewSchemaConfigContext(ctx, nq.schemaConfig)
	if len(nq.modifiers) > 0 {
		_spec.Modifiers = nq.modifiers
	}
	_spec.Node.Columns = nq.ctx.Fields
	if len(nq.ctx.Fields) > 0 {
		_spec.Unique = nq.ctx.Unique != nil && *nq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, nq.driver, _spec)
}

func (nq *NarrativeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(narrative.Table, narrative.Columns, sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString))
	_spec.From = nq.sql
	if unique := nq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if nq.path != nil {
		_spec.Unique = true
	}
	if fields := nq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, narrative.FieldID)
		for i := range fields {
			if fields[i] != narrative.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if nq.withOwner != nil {
			_spec.Node.AddColumnOnce(narrative.FieldOwnerID)
		}
	}
	if ps := nq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nq *NarrativeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nq.driver.Dialect())
	t1 := builder.Table(narrative.Table)
	columns := nq.ctx.Fields
	if len(columns) == 0 {
		columns = narrative.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nq.sql != nil {
		selector = nq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nq.ctx.Unique != nil && *nq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(nq.schemaConfig.Narrative)
	ctx = internal.NewSchemaConfigContext(ctx, nq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range nq.modifiers {
		m(selector)
	}
	for _, p := range nq.predicates {
		p(selector)
	}
	for _, p := range nq.order {
		p(selector)
	}
	if offset := nq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (nq *NarrativeQuery) Modify(modifiers ...func(s *sql.Selector)) *NarrativeSelect {
	nq.modifiers = append(nq.modifiers, modifiers...)
	return nq.Select()
}

// WithNamedBlockedGroups tells the query-builder to eager-load the nodes that are connected to the "blocked_groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithNamedBlockedGroups(name string, opts ...func(*GroupQuery)) *NarrativeQuery {
	query := (&GroupClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if nq.withNamedBlockedGroups == nil {
		nq.withNamedBlockedGroups = make(map[string]*GroupQuery)
	}
	nq.withNamedBlockedGroups[name] = query
	return nq
}

// WithNamedEditors tells the query-builder to eager-load the nodes that are connected to the "editors"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithNamedEditors(name string, opts ...func(*GroupQuery)) *NarrativeQuery {
	query := (&GroupClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if nq.withNamedEditors == nil {
		nq.withNamedEditors = make(map[string]*GroupQuery)
	}
	nq.withNamedEditors[name] = query
	return nq
}

// WithNamedViewers tells the query-builder to eager-load the nodes that are connected to the "viewers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithNamedViewers(name string, opts ...func(*GroupQuery)) *NarrativeQuery {
	query := (&GroupClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if nq.withNamedViewers == nil {
		nq.withNamedViewers = make(map[string]*GroupQuery)
	}
	nq.withNamedViewers[name] = query
	return nq
}

// WithNamedInternalPolicy tells the query-builder to eager-load the nodes that are connected to the "internal_policy"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithNamedInternalPolicy(name string, opts ...func(*InternalPolicyQuery)) *NarrativeQuery {
	query := (&InternalPolicyClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if nq.withNamedInternalPolicy == nil {
		nq.withNamedInternalPolicy = make(map[string]*InternalPolicyQuery)
	}
	nq.withNamedInternalPolicy[name] = query
	return nq
}

// WithNamedControl tells the query-builder to eager-load the nodes that are connected to the "control"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithNamedControl(name string, opts ...func(*ControlQuery)) *NarrativeQuery {
	query := (&ControlClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if nq.withNamedControl == nil {
		nq.withNamedControl = make(map[string]*ControlQuery)
	}
	nq.withNamedControl[name] = query
	return nq
}

// WithNamedProcedure tells the query-builder to eager-load the nodes that are connected to the "procedure"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithNamedProcedure(name string, opts ...func(*ProcedureQuery)) *NarrativeQuery {
	query := (&ProcedureClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if nq.withNamedProcedure == nil {
		nq.withNamedProcedure = make(map[string]*ProcedureQuery)
	}
	nq.withNamedProcedure[name] = query
	return nq
}

// WithNamedControlObjective tells the query-builder to eager-load the nodes that are connected to the "control_objective"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithNamedControlObjective(name string, opts ...func(*ControlObjectiveQuery)) *NarrativeQuery {
	query := (&ControlObjectiveClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if nq.withNamedControlObjective == nil {
		nq.withNamedControlObjective = make(map[string]*ControlObjectiveQuery)
	}
	nq.withNamedControlObjective[name] = query
	return nq
}

// WithNamedPrograms tells the query-builder to eager-load the nodes that are connected to the "programs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nq *NarrativeQuery) WithNamedPrograms(name string, opts ...func(*ProgramQuery)) *NarrativeQuery {
	query := (&ProgramClient{config: nq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if nq.withNamedPrograms == nil {
		nq.withNamedPrograms = make(map[string]*ProgramQuery)
	}
	nq.withNamedPrograms[name] = query
	return nq
}

// NarrativeGroupBy is the group-by builder for Narrative entities.
type NarrativeGroupBy struct {
	selector
	build *NarrativeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ngb *NarrativeGroupBy) Aggregate(fns ...AggregateFunc) *NarrativeGroupBy {
	ngb.fns = append(ngb.fns, fns...)
	return ngb
}

// Scan applies the selector query and scans the result into the given value.
func (ngb *NarrativeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ngb.build.ctx, ent.OpQueryGroupBy)
	if err := ngb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NarrativeQuery, *NarrativeGroupBy](ctx, ngb.build, ngb, ngb.build.inters, v)
}

func (ngb *NarrativeGroupBy) sqlScan(ctx context.Context, root *NarrativeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ngb.fns))
	for _, fn := range ngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ngb.flds)+len(ngb.fns))
		for _, f := range *ngb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ngb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ngb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NarrativeSelect is the builder for selecting fields of Narrative entities.
type NarrativeSelect struct {
	*NarrativeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ns *NarrativeSelect) Aggregate(fns ...AggregateFunc) *NarrativeSelect {
	ns.fns = append(ns.fns, fns...)
	return ns
}

// Scan applies the selector query and scans the result into the given value.
func (ns *NarrativeSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ns.ctx, ent.OpQuerySelect)
	if err := ns.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NarrativeQuery, *NarrativeSelect](ctx, ns.NarrativeQuery, ns, ns.inters, v)
}

func (ns *NarrativeSelect) sqlScan(ctx context.Context, root *NarrativeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ns.fns))
	for _, fn := range ns.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ns.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ns *NarrativeSelect) Modify(modifiers ...func(s *sql.Selector)) *NarrativeSelect {
	ns.modifiers = append(ns.modifiers, modifiers...)
	return ns
}
