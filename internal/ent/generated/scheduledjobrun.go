// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobrun"
	"github.com/theopenlane/core/pkg/enums"
)

// ScheduledJobRun is the model entity for the ScheduledJobRun schema.
type ScheduledJobRun struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// The runner that this job will be executed on. Useful to know because of self hosted runners
	JobRunnerID string `json:"job_runner_id,omitempty"`
	// The status of the job to be executed. By default will be pending but when
	// 			scheduled on a runner, this will change to acquired.
	Status enums.ScheduledJobRunStatus `json:"status,omitempty"`
	// the parent job for this run
	ScheduledJobID string `json:"scheduled_job_id,omitempty"`
	// When should this job execute on the agent. Since we might potentially schedule a few minutes before
	ExpectedExecutionTime time.Time `json:"expected_execution_time,omitempty"`
	// the script that will be executed by the agent.
	// This script will be templated with the values from the configuration on the job
	Script string `json:"script,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScheduledJobRunQuery when eager-loading is set.
	Edges        ScheduledJobRunEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScheduledJobRunEdges holds the relations/edges for other nodes in the graph.
type ScheduledJobRunEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// ScheduledJob holds the value of the scheduled_job edge.
	ScheduledJob *ScheduledJob `json:"scheduled_job,omitempty"`
	// JobRunner holds the value of the job_runner edge.
	JobRunner *JobRunner `json:"job_runner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduledJobRunEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ScheduledJobOrErr returns the ScheduledJob value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduledJobRunEdges) ScheduledJobOrErr() (*ScheduledJob, error) {
	if e.ScheduledJob != nil {
		return e.ScheduledJob, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: scheduledjob.Label}
	}
	return nil, &NotLoadedError{edge: "scheduled_job"}
}

// JobRunnerOrErr returns the JobRunner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScheduledJobRunEdges) JobRunnerOrErr() (*JobRunner, error) {
	if e.JobRunner != nil {
		return e.JobRunner, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: jobrunner.Label}
	}
	return nil, &NotLoadedError{edge: "job_runner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ScheduledJobRun) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scheduledjobrun.FieldID, scheduledjobrun.FieldCreatedBy, scheduledjobrun.FieldUpdatedBy, scheduledjobrun.FieldDeletedBy, scheduledjobrun.FieldOwnerID, scheduledjobrun.FieldJobRunnerID, scheduledjobrun.FieldStatus, scheduledjobrun.FieldScheduledJobID, scheduledjobrun.FieldScript:
			values[i] = new(sql.NullString)
		case scheduledjobrun.FieldCreatedAt, scheduledjobrun.FieldUpdatedAt, scheduledjobrun.FieldDeletedAt, scheduledjobrun.FieldExpectedExecutionTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ScheduledJobRun fields.
func (sjr *ScheduledJobRun) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scheduledjobrun.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sjr.ID = value.String
			}
		case scheduledjobrun.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sjr.CreatedAt = value.Time
			}
		case scheduledjobrun.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sjr.UpdatedAt = value.Time
			}
		case scheduledjobrun.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sjr.CreatedBy = value.String
			}
		case scheduledjobrun.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sjr.UpdatedBy = value.String
			}
		case scheduledjobrun.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sjr.DeletedAt = value.Time
			}
		case scheduledjobrun.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				sjr.DeletedBy = value.String
			}
		case scheduledjobrun.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				sjr.OwnerID = value.String
			}
		case scheduledjobrun.FieldJobRunnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_runner_id", values[i])
			} else if value.Valid {
				sjr.JobRunnerID = value.String
			}
		case scheduledjobrun.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sjr.Status = enums.ScheduledJobRunStatus(value.String)
			}
		case scheduledjobrun.FieldScheduledJobID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scheduled_job_id", values[i])
			} else if value.Valid {
				sjr.ScheduledJobID = value.String
			}
		case scheduledjobrun.FieldExpectedExecutionTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expected_execution_time", values[i])
			} else if value.Valid {
				sjr.ExpectedExecutionTime = value.Time
			}
		case scheduledjobrun.FieldScript:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script", values[i])
			} else if value.Valid {
				sjr.Script = value.String
			}
		default:
			sjr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ScheduledJobRun.
// This includes values selected through modifiers, order, etc.
func (sjr *ScheduledJobRun) Value(name string) (ent.Value, error) {
	return sjr.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the ScheduledJobRun entity.
func (sjr *ScheduledJobRun) QueryOwner() *OrganizationQuery {
	return NewScheduledJobRunClient(sjr.config).QueryOwner(sjr)
}

// QueryScheduledJob queries the "scheduled_job" edge of the ScheduledJobRun entity.
func (sjr *ScheduledJobRun) QueryScheduledJob() *ScheduledJobQuery {
	return NewScheduledJobRunClient(sjr.config).QueryScheduledJob(sjr)
}

// QueryJobRunner queries the "job_runner" edge of the ScheduledJobRun entity.
func (sjr *ScheduledJobRun) QueryJobRunner() *JobRunnerQuery {
	return NewScheduledJobRunClient(sjr.config).QueryJobRunner(sjr)
}

// Update returns a builder for updating this ScheduledJobRun.
// Note that you need to call ScheduledJobRun.Unwrap() before calling this method if this ScheduledJobRun
// was returned from a transaction, and the transaction was committed or rolled back.
func (sjr *ScheduledJobRun) Update() *ScheduledJobRunUpdateOne {
	return NewScheduledJobRunClient(sjr.config).UpdateOne(sjr)
}

// Unwrap unwraps the ScheduledJobRun entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sjr *ScheduledJobRun) Unwrap() *ScheduledJobRun {
	_tx, ok := sjr.config.driver.(*txDriver)
	if !ok {
		panic("generated: ScheduledJobRun is not a transactional entity")
	}
	sjr.config.driver = _tx.drv
	return sjr
}

// String implements the fmt.Stringer.
func (sjr *ScheduledJobRun) String() string {
	var builder strings.Builder
	builder.WriteString("ScheduledJobRun(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sjr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(sjr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sjr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sjr.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sjr.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(sjr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(sjr.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(sjr.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("job_runner_id=")
	builder.WriteString(sjr.JobRunnerID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sjr.Status))
	builder.WriteString(", ")
	builder.WriteString("scheduled_job_id=")
	builder.WriteString(sjr.ScheduledJobID)
	builder.WriteString(", ")
	builder.WriteString("expected_execution_time=")
	builder.WriteString(sjr.ExpectedExecutionTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("script=")
	builder.WriteString(sjr.Script)
	builder.WriteByte(')')
	return builder.String()
}

// ScheduledJobRuns is a parsable slice of ScheduledJobRun.
type ScheduledJobRuns []*ScheduledJobRun
