// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/groupmembershiphistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// GroupMembershipHistoryCreate is the builder for creating a GroupMembershipHistory entity.
type GroupMembershipHistoryCreate struct {
	config
	mutation *GroupMembershipHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (gmhc *GroupMembershipHistoryCreate) SetHistoryTime(t time.Time) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetHistoryTime(t)
	return gmhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (gmhc *GroupMembershipHistoryCreate) SetNillableHistoryTime(t *time.Time) *GroupMembershipHistoryCreate {
	if t != nil {
		gmhc.SetHistoryTime(*t)
	}
	return gmhc
}

// SetRef sets the "ref" field.
func (gmhc *GroupMembershipHistoryCreate) SetRef(s string) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetRef(s)
	return gmhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (gmhc *GroupMembershipHistoryCreate) SetNillableRef(s *string) *GroupMembershipHistoryCreate {
	if s != nil {
		gmhc.SetRef(*s)
	}
	return gmhc
}

// SetOperation sets the "operation" field.
func (gmhc *GroupMembershipHistoryCreate) SetOperation(ht history.OpType) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetOperation(ht)
	return gmhc
}

// SetCreatedAt sets the "created_at" field.
func (gmhc *GroupMembershipHistoryCreate) SetCreatedAt(t time.Time) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetCreatedAt(t)
	return gmhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gmhc *GroupMembershipHistoryCreate) SetNillableCreatedAt(t *time.Time) *GroupMembershipHistoryCreate {
	if t != nil {
		gmhc.SetCreatedAt(*t)
	}
	return gmhc
}

// SetUpdatedAt sets the "updated_at" field.
func (gmhc *GroupMembershipHistoryCreate) SetUpdatedAt(t time.Time) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetUpdatedAt(t)
	return gmhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gmhc *GroupMembershipHistoryCreate) SetNillableUpdatedAt(t *time.Time) *GroupMembershipHistoryCreate {
	if t != nil {
		gmhc.SetUpdatedAt(*t)
	}
	return gmhc
}

// SetCreatedBy sets the "created_by" field.
func (gmhc *GroupMembershipHistoryCreate) SetCreatedBy(s string) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetCreatedBy(s)
	return gmhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (gmhc *GroupMembershipHistoryCreate) SetNillableCreatedBy(s *string) *GroupMembershipHistoryCreate {
	if s != nil {
		gmhc.SetCreatedBy(*s)
	}
	return gmhc
}

// SetUpdatedBy sets the "updated_by" field.
func (gmhc *GroupMembershipHistoryCreate) SetUpdatedBy(s string) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetUpdatedBy(s)
	return gmhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gmhc *GroupMembershipHistoryCreate) SetNillableUpdatedBy(s *string) *GroupMembershipHistoryCreate {
	if s != nil {
		gmhc.SetUpdatedBy(*s)
	}
	return gmhc
}

// SetMappingID sets the "mapping_id" field.
func (gmhc *GroupMembershipHistoryCreate) SetMappingID(s string) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetMappingID(s)
	return gmhc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (gmhc *GroupMembershipHistoryCreate) SetNillableMappingID(s *string) *GroupMembershipHistoryCreate {
	if s != nil {
		gmhc.SetMappingID(*s)
	}
	return gmhc
}

// SetDeletedAt sets the "deleted_at" field.
func (gmhc *GroupMembershipHistoryCreate) SetDeletedAt(t time.Time) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetDeletedAt(t)
	return gmhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gmhc *GroupMembershipHistoryCreate) SetNillableDeletedAt(t *time.Time) *GroupMembershipHistoryCreate {
	if t != nil {
		gmhc.SetDeletedAt(*t)
	}
	return gmhc
}

// SetDeletedBy sets the "deleted_by" field.
func (gmhc *GroupMembershipHistoryCreate) SetDeletedBy(s string) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetDeletedBy(s)
	return gmhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (gmhc *GroupMembershipHistoryCreate) SetNillableDeletedBy(s *string) *GroupMembershipHistoryCreate {
	if s != nil {
		gmhc.SetDeletedBy(*s)
	}
	return gmhc
}

// SetRole sets the "role" field.
func (gmhc *GroupMembershipHistoryCreate) SetRole(e enums.Role) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetRole(e)
	return gmhc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (gmhc *GroupMembershipHistoryCreate) SetNillableRole(e *enums.Role) *GroupMembershipHistoryCreate {
	if e != nil {
		gmhc.SetRole(*e)
	}
	return gmhc
}

// SetGroupID sets the "group_id" field.
func (gmhc *GroupMembershipHistoryCreate) SetGroupID(s string) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetGroupID(s)
	return gmhc
}

// SetUserID sets the "user_id" field.
func (gmhc *GroupMembershipHistoryCreate) SetUserID(s string) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetUserID(s)
	return gmhc
}

// SetID sets the "id" field.
func (gmhc *GroupMembershipHistoryCreate) SetID(s string) *GroupMembershipHistoryCreate {
	gmhc.mutation.SetID(s)
	return gmhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gmhc *GroupMembershipHistoryCreate) SetNillableID(s *string) *GroupMembershipHistoryCreate {
	if s != nil {
		gmhc.SetID(*s)
	}
	return gmhc
}

// Mutation returns the GroupMembershipHistoryMutation object of the builder.
func (gmhc *GroupMembershipHistoryCreate) Mutation() *GroupMembershipHistoryMutation {
	return gmhc.mutation
}

// Save creates the GroupMembershipHistory in the database.
func (gmhc *GroupMembershipHistoryCreate) Save(ctx context.Context) (*GroupMembershipHistory, error) {
	gmhc.defaults()
	return withHooks(ctx, gmhc.sqlSave, gmhc.mutation, gmhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gmhc *GroupMembershipHistoryCreate) SaveX(ctx context.Context) *GroupMembershipHistory {
	v, err := gmhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmhc *GroupMembershipHistoryCreate) Exec(ctx context.Context) error {
	_, err := gmhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmhc *GroupMembershipHistoryCreate) ExecX(ctx context.Context) {
	if err := gmhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gmhc *GroupMembershipHistoryCreate) defaults() {
	if _, ok := gmhc.mutation.HistoryTime(); !ok {
		v := groupmembershiphistory.DefaultHistoryTime()
		gmhc.mutation.SetHistoryTime(v)
	}
	if _, ok := gmhc.mutation.CreatedAt(); !ok {
		v := groupmembershiphistory.DefaultCreatedAt()
		gmhc.mutation.SetCreatedAt(v)
	}
	if _, ok := gmhc.mutation.UpdatedAt(); !ok {
		v := groupmembershiphistory.DefaultUpdatedAt()
		gmhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gmhc.mutation.MappingID(); !ok {
		v := groupmembershiphistory.DefaultMappingID()
		gmhc.mutation.SetMappingID(v)
	}
	if _, ok := gmhc.mutation.Role(); !ok {
		v := groupmembershiphistory.DefaultRole
		gmhc.mutation.SetRole(v)
	}
	if _, ok := gmhc.mutation.ID(); !ok {
		v := groupmembershiphistory.DefaultID()
		gmhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gmhc *GroupMembershipHistoryCreate) check() error {
	if _, ok := gmhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "GroupMembershipHistory.history_time"`)}
	}
	if _, ok := gmhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "GroupMembershipHistory.operation"`)}
	}
	if v, ok := gmhc.mutation.Operation(); ok {
		if err := groupmembershiphistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "GroupMembershipHistory.operation": %w`, err)}
		}
	}
	if _, ok := gmhc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "GroupMembershipHistory.mapping_id"`)}
	}
	if _, ok := gmhc.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`generated: missing required field "GroupMembershipHistory.role"`)}
	}
	if v, ok := gmhc.mutation.Role(); ok {
		if err := groupmembershiphistory.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "GroupMembershipHistory.role": %w`, err)}
		}
	}
	if _, ok := gmhc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`generated: missing required field "GroupMembershipHistory.group_id"`)}
	}
	if _, ok := gmhc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`generated: missing required field "GroupMembershipHistory.user_id"`)}
	}
	return nil
}

func (gmhc *GroupMembershipHistoryCreate) sqlSave(ctx context.Context) (*GroupMembershipHistory, error) {
	if err := gmhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gmhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gmhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected GroupMembershipHistory.ID type: %T", _spec.ID.Value)
		}
	}
	gmhc.mutation.id = &_node.ID
	gmhc.mutation.done = true
	return _node, nil
}

func (gmhc *GroupMembershipHistoryCreate) createSpec() (*GroupMembershipHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupMembershipHistory{config: gmhc.config}
		_spec = sqlgraph.NewCreateSpec(groupmembershiphistory.Table, sqlgraph.NewFieldSpec(groupmembershiphistory.FieldID, field.TypeString))
	)
	_spec.Schema = gmhc.schemaConfig.GroupMembershipHistory
	if id, ok := gmhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gmhc.mutation.HistoryTime(); ok {
		_spec.SetField(groupmembershiphistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := gmhc.mutation.Ref(); ok {
		_spec.SetField(groupmembershiphistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := gmhc.mutation.Operation(); ok {
		_spec.SetField(groupmembershiphistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := gmhc.mutation.CreatedAt(); ok {
		_spec.SetField(groupmembershiphistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gmhc.mutation.UpdatedAt(); ok {
		_spec.SetField(groupmembershiphistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gmhc.mutation.CreatedBy(); ok {
		_spec.SetField(groupmembershiphistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := gmhc.mutation.UpdatedBy(); ok {
		_spec.SetField(groupmembershiphistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := gmhc.mutation.MappingID(); ok {
		_spec.SetField(groupmembershiphistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := gmhc.mutation.DeletedAt(); ok {
		_spec.SetField(groupmembershiphistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := gmhc.mutation.DeletedBy(); ok {
		_spec.SetField(groupmembershiphistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := gmhc.mutation.Role(); ok {
		_spec.SetField(groupmembershiphistory.FieldRole, field.TypeEnum, value)
		_node.Role = value
	}
	if value, ok := gmhc.mutation.GroupID(); ok {
		_spec.SetField(groupmembershiphistory.FieldGroupID, field.TypeString, value)
		_node.GroupID = value
	}
	if value, ok := gmhc.mutation.UserID(); ok {
		_spec.SetField(groupmembershiphistory.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	return _node, _spec
}

// GroupMembershipHistoryCreateBulk is the builder for creating many GroupMembershipHistory entities in bulk.
type GroupMembershipHistoryCreateBulk struct {
	config
	err      error
	builders []*GroupMembershipHistoryCreate
}

// Save creates the GroupMembershipHistory entities in the database.
func (gmhcb *GroupMembershipHistoryCreateBulk) Save(ctx context.Context) ([]*GroupMembershipHistory, error) {
	if gmhcb.err != nil {
		return nil, gmhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gmhcb.builders))
	nodes := make([]*GroupMembershipHistory, len(gmhcb.builders))
	mutators := make([]Mutator, len(gmhcb.builders))
	for i := range gmhcb.builders {
		func(i int, root context.Context) {
			builder := gmhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupMembershipHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gmhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gmhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gmhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gmhcb *GroupMembershipHistoryCreateBulk) SaveX(ctx context.Context) []*GroupMembershipHistory {
	v, err := gmhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmhcb *GroupMembershipHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := gmhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmhcb *GroupMembershipHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := gmhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
