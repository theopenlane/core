// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ActionPlanHistoryUpdate is the builder for updating ActionPlanHistory entities.
type ActionPlanHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ActionPlanHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ActionPlanHistoryUpdate builder.
func (aphu *ActionPlanHistoryUpdate) Where(ps ...predicate.ActionPlanHistory) *ActionPlanHistoryUpdate {
	aphu.mutation.Where(ps...)
	return aphu
}

// SetUpdatedAt sets the "updated_at" field.
func (aphu *ActionPlanHistoryUpdate) SetUpdatedAt(t time.Time) *ActionPlanHistoryUpdate {
	aphu.mutation.SetUpdatedAt(t)
	return aphu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aphu *ActionPlanHistoryUpdate) ClearUpdatedAt() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearUpdatedAt()
	return aphu
}

// SetUpdatedBy sets the "updated_by" field.
func (aphu *ActionPlanHistoryUpdate) SetUpdatedBy(s string) *ActionPlanHistoryUpdate {
	aphu.mutation.SetUpdatedBy(s)
	return aphu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableUpdatedBy(s *string) *ActionPlanHistoryUpdate {
	if s != nil {
		aphu.SetUpdatedBy(*s)
	}
	return aphu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (aphu *ActionPlanHistoryUpdate) ClearUpdatedBy() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearUpdatedBy()
	return aphu
}

// SetDeletedAt sets the "deleted_at" field.
func (aphu *ActionPlanHistoryUpdate) SetDeletedAt(t time.Time) *ActionPlanHistoryUpdate {
	aphu.mutation.SetDeletedAt(t)
	return aphu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableDeletedAt(t *time.Time) *ActionPlanHistoryUpdate {
	if t != nil {
		aphu.SetDeletedAt(*t)
	}
	return aphu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aphu *ActionPlanHistoryUpdate) ClearDeletedAt() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearDeletedAt()
	return aphu
}

// SetDeletedBy sets the "deleted_by" field.
func (aphu *ActionPlanHistoryUpdate) SetDeletedBy(s string) *ActionPlanHistoryUpdate {
	aphu.mutation.SetDeletedBy(s)
	return aphu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableDeletedBy(s *string) *ActionPlanHistoryUpdate {
	if s != nil {
		aphu.SetDeletedBy(*s)
	}
	return aphu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (aphu *ActionPlanHistoryUpdate) ClearDeletedBy() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearDeletedBy()
	return aphu
}

// SetTags sets the "tags" field.
func (aphu *ActionPlanHistoryUpdate) SetTags(s []string) *ActionPlanHistoryUpdate {
	aphu.mutation.SetTags(s)
	return aphu
}

// AppendTags appends s to the "tags" field.
func (aphu *ActionPlanHistoryUpdate) AppendTags(s []string) *ActionPlanHistoryUpdate {
	aphu.mutation.AppendTags(s)
	return aphu
}

// ClearTags clears the value of the "tags" field.
func (aphu *ActionPlanHistoryUpdate) ClearTags() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearTags()
	return aphu
}

// SetRevision sets the "revision" field.
func (aphu *ActionPlanHistoryUpdate) SetRevision(s string) *ActionPlanHistoryUpdate {
	aphu.mutation.SetRevision(s)
	return aphu
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableRevision(s *string) *ActionPlanHistoryUpdate {
	if s != nil {
		aphu.SetRevision(*s)
	}
	return aphu
}

// ClearRevision clears the value of the "revision" field.
func (aphu *ActionPlanHistoryUpdate) ClearRevision() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearRevision()
	return aphu
}

// SetName sets the "name" field.
func (aphu *ActionPlanHistoryUpdate) SetName(s string) *ActionPlanHistoryUpdate {
	aphu.mutation.SetName(s)
	return aphu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableName(s *string) *ActionPlanHistoryUpdate {
	if s != nil {
		aphu.SetName(*s)
	}
	return aphu
}

// SetStatus sets the "status" field.
func (aphu *ActionPlanHistoryUpdate) SetStatus(es enums.DocumentStatus) *ActionPlanHistoryUpdate {
	aphu.mutation.SetStatus(es)
	return aphu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableStatus(es *enums.DocumentStatus) *ActionPlanHistoryUpdate {
	if es != nil {
		aphu.SetStatus(*es)
	}
	return aphu
}

// ClearStatus clears the value of the "status" field.
func (aphu *ActionPlanHistoryUpdate) ClearStatus() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearStatus()
	return aphu
}

// SetActionPlanType sets the "action_plan_type" field.
func (aphu *ActionPlanHistoryUpdate) SetActionPlanType(s string) *ActionPlanHistoryUpdate {
	aphu.mutation.SetActionPlanType(s)
	return aphu
}

// SetNillableActionPlanType sets the "action_plan_type" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableActionPlanType(s *string) *ActionPlanHistoryUpdate {
	if s != nil {
		aphu.SetActionPlanType(*s)
	}
	return aphu
}

// ClearActionPlanType clears the value of the "action_plan_type" field.
func (aphu *ActionPlanHistoryUpdate) ClearActionPlanType() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearActionPlanType()
	return aphu
}

// SetDetails sets the "details" field.
func (aphu *ActionPlanHistoryUpdate) SetDetails(s string) *ActionPlanHistoryUpdate {
	aphu.mutation.SetDetails(s)
	return aphu
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableDetails(s *string) *ActionPlanHistoryUpdate {
	if s != nil {
		aphu.SetDetails(*s)
	}
	return aphu
}

// ClearDetails clears the value of the "details" field.
func (aphu *ActionPlanHistoryUpdate) ClearDetails() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearDetails()
	return aphu
}

// SetApprovalRequired sets the "approval_required" field.
func (aphu *ActionPlanHistoryUpdate) SetApprovalRequired(b bool) *ActionPlanHistoryUpdate {
	aphu.mutation.SetApprovalRequired(b)
	return aphu
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableApprovalRequired(b *bool) *ActionPlanHistoryUpdate {
	if b != nil {
		aphu.SetApprovalRequired(*b)
	}
	return aphu
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (aphu *ActionPlanHistoryUpdate) ClearApprovalRequired() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearApprovalRequired()
	return aphu
}

// SetReviewDue sets the "review_due" field.
func (aphu *ActionPlanHistoryUpdate) SetReviewDue(t time.Time) *ActionPlanHistoryUpdate {
	aphu.mutation.SetReviewDue(t)
	return aphu
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableReviewDue(t *time.Time) *ActionPlanHistoryUpdate {
	if t != nil {
		aphu.SetReviewDue(*t)
	}
	return aphu
}

// ClearReviewDue clears the value of the "review_due" field.
func (aphu *ActionPlanHistoryUpdate) ClearReviewDue() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearReviewDue()
	return aphu
}

// SetReviewFrequency sets the "review_frequency" field.
func (aphu *ActionPlanHistoryUpdate) SetReviewFrequency(e enums.Frequency) *ActionPlanHistoryUpdate {
	aphu.mutation.SetReviewFrequency(e)
	return aphu
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableReviewFrequency(e *enums.Frequency) *ActionPlanHistoryUpdate {
	if e != nil {
		aphu.SetReviewFrequency(*e)
	}
	return aphu
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (aphu *ActionPlanHistoryUpdate) ClearReviewFrequency() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearReviewFrequency()
	return aphu
}

// SetApproverID sets the "approver_id" field.
func (aphu *ActionPlanHistoryUpdate) SetApproverID(s string) *ActionPlanHistoryUpdate {
	aphu.mutation.SetApproverID(s)
	return aphu
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableApproverID(s *string) *ActionPlanHistoryUpdate {
	if s != nil {
		aphu.SetApproverID(*s)
	}
	return aphu
}

// ClearApproverID clears the value of the "approver_id" field.
func (aphu *ActionPlanHistoryUpdate) ClearApproverID() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearApproverID()
	return aphu
}

// SetDelegateID sets the "delegate_id" field.
func (aphu *ActionPlanHistoryUpdate) SetDelegateID(s string) *ActionPlanHistoryUpdate {
	aphu.mutation.SetDelegateID(s)
	return aphu
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableDelegateID(s *string) *ActionPlanHistoryUpdate {
	if s != nil {
		aphu.SetDelegateID(*s)
	}
	return aphu
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (aphu *ActionPlanHistoryUpdate) ClearDelegateID() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearDelegateID()
	return aphu
}

// SetOwnerID sets the "owner_id" field.
func (aphu *ActionPlanHistoryUpdate) SetOwnerID(s string) *ActionPlanHistoryUpdate {
	aphu.mutation.SetOwnerID(s)
	return aphu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableOwnerID(s *string) *ActionPlanHistoryUpdate {
	if s != nil {
		aphu.SetOwnerID(*s)
	}
	return aphu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (aphu *ActionPlanHistoryUpdate) ClearOwnerID() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearOwnerID()
	return aphu
}

// SetDueDate sets the "due_date" field.
func (aphu *ActionPlanHistoryUpdate) SetDueDate(t time.Time) *ActionPlanHistoryUpdate {
	aphu.mutation.SetDueDate(t)
	return aphu
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableDueDate(t *time.Time) *ActionPlanHistoryUpdate {
	if t != nil {
		aphu.SetDueDate(*t)
	}
	return aphu
}

// ClearDueDate clears the value of the "due_date" field.
func (aphu *ActionPlanHistoryUpdate) ClearDueDate() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearDueDate()
	return aphu
}

// SetPriority sets the "priority" field.
func (aphu *ActionPlanHistoryUpdate) SetPriority(e enums.Priority) *ActionPlanHistoryUpdate {
	aphu.mutation.SetPriority(e)
	return aphu
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillablePriority(e *enums.Priority) *ActionPlanHistoryUpdate {
	if e != nil {
		aphu.SetPriority(*e)
	}
	return aphu
}

// ClearPriority clears the value of the "priority" field.
func (aphu *ActionPlanHistoryUpdate) ClearPriority() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearPriority()
	return aphu
}

// SetSource sets the "source" field.
func (aphu *ActionPlanHistoryUpdate) SetSource(s string) *ActionPlanHistoryUpdate {
	aphu.mutation.SetSource(s)
	return aphu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (aphu *ActionPlanHistoryUpdate) SetNillableSource(s *string) *ActionPlanHistoryUpdate {
	if s != nil {
		aphu.SetSource(*s)
	}
	return aphu
}

// ClearSource clears the value of the "source" field.
func (aphu *ActionPlanHistoryUpdate) ClearSource() *ActionPlanHistoryUpdate {
	aphu.mutation.ClearSource()
	return aphu
}

// Mutation returns the ActionPlanHistoryMutation object of the builder.
func (aphu *ActionPlanHistoryUpdate) Mutation() *ActionPlanHistoryMutation {
	return aphu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aphu *ActionPlanHistoryUpdate) Save(ctx context.Context) (int, error) {
	aphu.defaults()
	return withHooks(ctx, aphu.sqlSave, aphu.mutation, aphu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aphu *ActionPlanHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := aphu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aphu *ActionPlanHistoryUpdate) Exec(ctx context.Context) error {
	_, err := aphu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aphu *ActionPlanHistoryUpdate) ExecX(ctx context.Context) {
	if err := aphu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aphu *ActionPlanHistoryUpdate) defaults() {
	if _, ok := aphu.mutation.UpdatedAt(); !ok && !aphu.mutation.UpdatedAtCleared() {
		v := actionplanhistory.UpdateDefaultUpdatedAt()
		aphu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aphu *ActionPlanHistoryUpdate) check() error {
	if v, ok := aphu.mutation.Status(); ok {
		if err := actionplanhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.status": %w`, err)}
		}
	}
	if v, ok := aphu.mutation.ReviewFrequency(); ok {
		if err := actionplanhistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.review_frequency": %w`, err)}
		}
	}
	if v, ok := aphu.mutation.Priority(); ok {
		if err := actionplanhistory.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.priority": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aphu *ActionPlanHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActionPlanHistoryUpdate {
	aphu.modifiers = append(aphu.modifiers, modifiers...)
	return aphu
}

func (aphu *ActionPlanHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aphu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(actionplanhistory.Table, actionplanhistory.Columns, sqlgraph.NewFieldSpec(actionplanhistory.FieldID, field.TypeString))
	if ps := aphu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if aphu.mutation.RefCleared() {
		_spec.ClearField(actionplanhistory.FieldRef, field.TypeString)
	}
	if aphu.mutation.CreatedAtCleared() {
		_spec.ClearField(actionplanhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := aphu.mutation.UpdatedAt(); ok {
		_spec.SetField(actionplanhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if aphu.mutation.UpdatedAtCleared() {
		_spec.ClearField(actionplanhistory.FieldUpdatedAt, field.TypeTime)
	}
	if aphu.mutation.CreatedByCleared() {
		_spec.ClearField(actionplanhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := aphu.mutation.UpdatedBy(); ok {
		_spec.SetField(actionplanhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if aphu.mutation.UpdatedByCleared() {
		_spec.ClearField(actionplanhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := aphu.mutation.DeletedAt(); ok {
		_spec.SetField(actionplanhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if aphu.mutation.DeletedAtCleared() {
		_spec.ClearField(actionplanhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aphu.mutation.DeletedBy(); ok {
		_spec.SetField(actionplanhistory.FieldDeletedBy, field.TypeString, value)
	}
	if aphu.mutation.DeletedByCleared() {
		_spec.ClearField(actionplanhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := aphu.mutation.Tags(); ok {
		_spec.SetField(actionplanhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := aphu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldTags, value)
		})
	}
	if aphu.mutation.TagsCleared() {
		_spec.ClearField(actionplanhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := aphu.mutation.Revision(); ok {
		_spec.SetField(actionplanhistory.FieldRevision, field.TypeString, value)
	}
	if aphu.mutation.RevisionCleared() {
		_spec.ClearField(actionplanhistory.FieldRevision, field.TypeString)
	}
	if value, ok := aphu.mutation.Name(); ok {
		_spec.SetField(actionplanhistory.FieldName, field.TypeString, value)
	}
	if value, ok := aphu.mutation.Status(); ok {
		_spec.SetField(actionplanhistory.FieldStatus, field.TypeEnum, value)
	}
	if aphu.mutation.StatusCleared() {
		_spec.ClearField(actionplanhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := aphu.mutation.ActionPlanType(); ok {
		_spec.SetField(actionplanhistory.FieldActionPlanType, field.TypeString, value)
	}
	if aphu.mutation.ActionPlanTypeCleared() {
		_spec.ClearField(actionplanhistory.FieldActionPlanType, field.TypeString)
	}
	if value, ok := aphu.mutation.Details(); ok {
		_spec.SetField(actionplanhistory.FieldDetails, field.TypeString, value)
	}
	if aphu.mutation.DetailsCleared() {
		_spec.ClearField(actionplanhistory.FieldDetails, field.TypeString)
	}
	if value, ok := aphu.mutation.ApprovalRequired(); ok {
		_spec.SetField(actionplanhistory.FieldApprovalRequired, field.TypeBool, value)
	}
	if aphu.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(actionplanhistory.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := aphu.mutation.ReviewDue(); ok {
		_spec.SetField(actionplanhistory.FieldReviewDue, field.TypeTime, value)
	}
	if aphu.mutation.ReviewDueCleared() {
		_spec.ClearField(actionplanhistory.FieldReviewDue, field.TypeTime)
	}
	if value, ok := aphu.mutation.ReviewFrequency(); ok {
		_spec.SetField(actionplanhistory.FieldReviewFrequency, field.TypeEnum, value)
	}
	if aphu.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(actionplanhistory.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := aphu.mutation.ApproverID(); ok {
		_spec.SetField(actionplanhistory.FieldApproverID, field.TypeString, value)
	}
	if aphu.mutation.ApproverIDCleared() {
		_spec.ClearField(actionplanhistory.FieldApproverID, field.TypeString)
	}
	if value, ok := aphu.mutation.DelegateID(); ok {
		_spec.SetField(actionplanhistory.FieldDelegateID, field.TypeString, value)
	}
	if aphu.mutation.DelegateIDCleared() {
		_spec.ClearField(actionplanhistory.FieldDelegateID, field.TypeString)
	}
	if value, ok := aphu.mutation.OwnerID(); ok {
		_spec.SetField(actionplanhistory.FieldOwnerID, field.TypeString, value)
	}
	if aphu.mutation.OwnerIDCleared() {
		_spec.ClearField(actionplanhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := aphu.mutation.DueDate(); ok {
		_spec.SetField(actionplanhistory.FieldDueDate, field.TypeTime, value)
	}
	if aphu.mutation.DueDateCleared() {
		_spec.ClearField(actionplanhistory.FieldDueDate, field.TypeTime)
	}
	if value, ok := aphu.mutation.Priority(); ok {
		_spec.SetField(actionplanhistory.FieldPriority, field.TypeEnum, value)
	}
	if aphu.mutation.PriorityCleared() {
		_spec.ClearField(actionplanhistory.FieldPriority, field.TypeEnum)
	}
	if value, ok := aphu.mutation.Source(); ok {
		_spec.SetField(actionplanhistory.FieldSource, field.TypeString, value)
	}
	if aphu.mutation.SourceCleared() {
		_spec.ClearField(actionplanhistory.FieldSource, field.TypeString)
	}
	_spec.Node.Schema = aphu.schemaConfig.ActionPlanHistory
	ctx = internal.NewSchemaConfigContext(ctx, aphu.schemaConfig)
	_spec.AddModifiers(aphu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aphu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionplanhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aphu.mutation.done = true
	return n, nil
}

// ActionPlanHistoryUpdateOne is the builder for updating a single ActionPlanHistory entity.
type ActionPlanHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ActionPlanHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetUpdatedAt(t time.Time) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetUpdatedAt(t)
	return aphuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearUpdatedAt() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearUpdatedAt()
	return aphuo
}

// SetUpdatedBy sets the "updated_by" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetUpdatedBy(s string) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetUpdatedBy(s)
	return aphuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableUpdatedBy(s *string) *ActionPlanHistoryUpdateOne {
	if s != nil {
		aphuo.SetUpdatedBy(*s)
	}
	return aphuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearUpdatedBy() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearUpdatedBy()
	return aphuo
}

// SetDeletedAt sets the "deleted_at" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetDeletedAt(t time.Time) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetDeletedAt(t)
	return aphuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *ActionPlanHistoryUpdateOne {
	if t != nil {
		aphuo.SetDeletedAt(*t)
	}
	return aphuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearDeletedAt() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearDeletedAt()
	return aphuo
}

// SetDeletedBy sets the "deleted_by" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetDeletedBy(s string) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetDeletedBy(s)
	return aphuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableDeletedBy(s *string) *ActionPlanHistoryUpdateOne {
	if s != nil {
		aphuo.SetDeletedBy(*s)
	}
	return aphuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearDeletedBy() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearDeletedBy()
	return aphuo
}

// SetTags sets the "tags" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetTags(s []string) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetTags(s)
	return aphuo
}

// AppendTags appends s to the "tags" field.
func (aphuo *ActionPlanHistoryUpdateOne) AppendTags(s []string) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.AppendTags(s)
	return aphuo
}

// ClearTags clears the value of the "tags" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearTags() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearTags()
	return aphuo
}

// SetRevision sets the "revision" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetRevision(s string) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetRevision(s)
	return aphuo
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableRevision(s *string) *ActionPlanHistoryUpdateOne {
	if s != nil {
		aphuo.SetRevision(*s)
	}
	return aphuo
}

// ClearRevision clears the value of the "revision" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearRevision() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearRevision()
	return aphuo
}

// SetName sets the "name" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetName(s string) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetName(s)
	return aphuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableName(s *string) *ActionPlanHistoryUpdateOne {
	if s != nil {
		aphuo.SetName(*s)
	}
	return aphuo
}

// SetStatus sets the "status" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetStatus(es enums.DocumentStatus) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetStatus(es)
	return aphuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableStatus(es *enums.DocumentStatus) *ActionPlanHistoryUpdateOne {
	if es != nil {
		aphuo.SetStatus(*es)
	}
	return aphuo
}

// ClearStatus clears the value of the "status" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearStatus() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearStatus()
	return aphuo
}

// SetActionPlanType sets the "action_plan_type" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetActionPlanType(s string) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetActionPlanType(s)
	return aphuo
}

// SetNillableActionPlanType sets the "action_plan_type" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableActionPlanType(s *string) *ActionPlanHistoryUpdateOne {
	if s != nil {
		aphuo.SetActionPlanType(*s)
	}
	return aphuo
}

// ClearActionPlanType clears the value of the "action_plan_type" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearActionPlanType() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearActionPlanType()
	return aphuo
}

// SetDetails sets the "details" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetDetails(s string) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetDetails(s)
	return aphuo
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableDetails(s *string) *ActionPlanHistoryUpdateOne {
	if s != nil {
		aphuo.SetDetails(*s)
	}
	return aphuo
}

// ClearDetails clears the value of the "details" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearDetails() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearDetails()
	return aphuo
}

// SetApprovalRequired sets the "approval_required" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetApprovalRequired(b bool) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetApprovalRequired(b)
	return aphuo
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableApprovalRequired(b *bool) *ActionPlanHistoryUpdateOne {
	if b != nil {
		aphuo.SetApprovalRequired(*b)
	}
	return aphuo
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearApprovalRequired() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearApprovalRequired()
	return aphuo
}

// SetReviewDue sets the "review_due" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetReviewDue(t time.Time) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetReviewDue(t)
	return aphuo
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableReviewDue(t *time.Time) *ActionPlanHistoryUpdateOne {
	if t != nil {
		aphuo.SetReviewDue(*t)
	}
	return aphuo
}

// ClearReviewDue clears the value of the "review_due" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearReviewDue() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearReviewDue()
	return aphuo
}

// SetReviewFrequency sets the "review_frequency" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetReviewFrequency(e enums.Frequency) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetReviewFrequency(e)
	return aphuo
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableReviewFrequency(e *enums.Frequency) *ActionPlanHistoryUpdateOne {
	if e != nil {
		aphuo.SetReviewFrequency(*e)
	}
	return aphuo
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearReviewFrequency() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearReviewFrequency()
	return aphuo
}

// SetApproverID sets the "approver_id" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetApproverID(s string) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetApproverID(s)
	return aphuo
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableApproverID(s *string) *ActionPlanHistoryUpdateOne {
	if s != nil {
		aphuo.SetApproverID(*s)
	}
	return aphuo
}

// ClearApproverID clears the value of the "approver_id" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearApproverID() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearApproverID()
	return aphuo
}

// SetDelegateID sets the "delegate_id" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetDelegateID(s string) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetDelegateID(s)
	return aphuo
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableDelegateID(s *string) *ActionPlanHistoryUpdateOne {
	if s != nil {
		aphuo.SetDelegateID(*s)
	}
	return aphuo
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearDelegateID() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearDelegateID()
	return aphuo
}

// SetOwnerID sets the "owner_id" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetOwnerID(s string) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetOwnerID(s)
	return aphuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableOwnerID(s *string) *ActionPlanHistoryUpdateOne {
	if s != nil {
		aphuo.SetOwnerID(*s)
	}
	return aphuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearOwnerID() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearOwnerID()
	return aphuo
}

// SetDueDate sets the "due_date" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetDueDate(t time.Time) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetDueDate(t)
	return aphuo
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableDueDate(t *time.Time) *ActionPlanHistoryUpdateOne {
	if t != nil {
		aphuo.SetDueDate(*t)
	}
	return aphuo
}

// ClearDueDate clears the value of the "due_date" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearDueDate() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearDueDate()
	return aphuo
}

// SetPriority sets the "priority" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetPriority(e enums.Priority) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetPriority(e)
	return aphuo
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillablePriority(e *enums.Priority) *ActionPlanHistoryUpdateOne {
	if e != nil {
		aphuo.SetPriority(*e)
	}
	return aphuo
}

// ClearPriority clears the value of the "priority" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearPriority() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearPriority()
	return aphuo
}

// SetSource sets the "source" field.
func (aphuo *ActionPlanHistoryUpdateOne) SetSource(s string) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.SetSource(s)
	return aphuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (aphuo *ActionPlanHistoryUpdateOne) SetNillableSource(s *string) *ActionPlanHistoryUpdateOne {
	if s != nil {
		aphuo.SetSource(*s)
	}
	return aphuo
}

// ClearSource clears the value of the "source" field.
func (aphuo *ActionPlanHistoryUpdateOne) ClearSource() *ActionPlanHistoryUpdateOne {
	aphuo.mutation.ClearSource()
	return aphuo
}

// Mutation returns the ActionPlanHistoryMutation object of the builder.
func (aphuo *ActionPlanHistoryUpdateOne) Mutation() *ActionPlanHistoryMutation {
	return aphuo.mutation
}

// Where appends a list predicates to the ActionPlanHistoryUpdate builder.
func (aphuo *ActionPlanHistoryUpdateOne) Where(ps ...predicate.ActionPlanHistory) *ActionPlanHistoryUpdateOne {
	aphuo.mutation.Where(ps...)
	return aphuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aphuo *ActionPlanHistoryUpdateOne) Select(field string, fields ...string) *ActionPlanHistoryUpdateOne {
	aphuo.fields = append([]string{field}, fields...)
	return aphuo
}

// Save executes the query and returns the updated ActionPlanHistory entity.
func (aphuo *ActionPlanHistoryUpdateOne) Save(ctx context.Context) (*ActionPlanHistory, error) {
	aphuo.defaults()
	return withHooks(ctx, aphuo.sqlSave, aphuo.mutation, aphuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aphuo *ActionPlanHistoryUpdateOne) SaveX(ctx context.Context) *ActionPlanHistory {
	node, err := aphuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aphuo *ActionPlanHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := aphuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aphuo *ActionPlanHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := aphuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aphuo *ActionPlanHistoryUpdateOne) defaults() {
	if _, ok := aphuo.mutation.UpdatedAt(); !ok && !aphuo.mutation.UpdatedAtCleared() {
		v := actionplanhistory.UpdateDefaultUpdatedAt()
		aphuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aphuo *ActionPlanHistoryUpdateOne) check() error {
	if v, ok := aphuo.mutation.Status(); ok {
		if err := actionplanhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.status": %w`, err)}
		}
	}
	if v, ok := aphuo.mutation.ReviewFrequency(); ok {
		if err := actionplanhistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.review_frequency": %w`, err)}
		}
	}
	if v, ok := aphuo.mutation.Priority(); ok {
		if err := actionplanhistory.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.priority": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aphuo *ActionPlanHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActionPlanHistoryUpdateOne {
	aphuo.modifiers = append(aphuo.modifiers, modifiers...)
	return aphuo
}

func (aphuo *ActionPlanHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ActionPlanHistory, err error) {
	if err := aphuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(actionplanhistory.Table, actionplanhistory.Columns, sqlgraph.NewFieldSpec(actionplanhistory.FieldID, field.TypeString))
	id, ok := aphuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ActionPlanHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aphuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, actionplanhistory.FieldID)
		for _, f := range fields {
			if !actionplanhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != actionplanhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aphuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if aphuo.mutation.RefCleared() {
		_spec.ClearField(actionplanhistory.FieldRef, field.TypeString)
	}
	if aphuo.mutation.CreatedAtCleared() {
		_spec.ClearField(actionplanhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := aphuo.mutation.UpdatedAt(); ok {
		_spec.SetField(actionplanhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if aphuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(actionplanhistory.FieldUpdatedAt, field.TypeTime)
	}
	if aphuo.mutation.CreatedByCleared() {
		_spec.ClearField(actionplanhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := aphuo.mutation.UpdatedBy(); ok {
		_spec.SetField(actionplanhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if aphuo.mutation.UpdatedByCleared() {
		_spec.ClearField(actionplanhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := aphuo.mutation.DeletedAt(); ok {
		_spec.SetField(actionplanhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if aphuo.mutation.DeletedAtCleared() {
		_spec.ClearField(actionplanhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := aphuo.mutation.DeletedBy(); ok {
		_spec.SetField(actionplanhistory.FieldDeletedBy, field.TypeString, value)
	}
	if aphuo.mutation.DeletedByCleared() {
		_spec.ClearField(actionplanhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := aphuo.mutation.Tags(); ok {
		_spec.SetField(actionplanhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := aphuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldTags, value)
		})
	}
	if aphuo.mutation.TagsCleared() {
		_spec.ClearField(actionplanhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := aphuo.mutation.Revision(); ok {
		_spec.SetField(actionplanhistory.FieldRevision, field.TypeString, value)
	}
	if aphuo.mutation.RevisionCleared() {
		_spec.ClearField(actionplanhistory.FieldRevision, field.TypeString)
	}
	if value, ok := aphuo.mutation.Name(); ok {
		_spec.SetField(actionplanhistory.FieldName, field.TypeString, value)
	}
	if value, ok := aphuo.mutation.Status(); ok {
		_spec.SetField(actionplanhistory.FieldStatus, field.TypeEnum, value)
	}
	if aphuo.mutation.StatusCleared() {
		_spec.ClearField(actionplanhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := aphuo.mutation.ActionPlanType(); ok {
		_spec.SetField(actionplanhistory.FieldActionPlanType, field.TypeString, value)
	}
	if aphuo.mutation.ActionPlanTypeCleared() {
		_spec.ClearField(actionplanhistory.FieldActionPlanType, field.TypeString)
	}
	if value, ok := aphuo.mutation.Details(); ok {
		_spec.SetField(actionplanhistory.FieldDetails, field.TypeString, value)
	}
	if aphuo.mutation.DetailsCleared() {
		_spec.ClearField(actionplanhistory.FieldDetails, field.TypeString)
	}
	if value, ok := aphuo.mutation.ApprovalRequired(); ok {
		_spec.SetField(actionplanhistory.FieldApprovalRequired, field.TypeBool, value)
	}
	if aphuo.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(actionplanhistory.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := aphuo.mutation.ReviewDue(); ok {
		_spec.SetField(actionplanhistory.FieldReviewDue, field.TypeTime, value)
	}
	if aphuo.mutation.ReviewDueCleared() {
		_spec.ClearField(actionplanhistory.FieldReviewDue, field.TypeTime)
	}
	if value, ok := aphuo.mutation.ReviewFrequency(); ok {
		_spec.SetField(actionplanhistory.FieldReviewFrequency, field.TypeEnum, value)
	}
	if aphuo.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(actionplanhistory.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := aphuo.mutation.ApproverID(); ok {
		_spec.SetField(actionplanhistory.FieldApproverID, field.TypeString, value)
	}
	if aphuo.mutation.ApproverIDCleared() {
		_spec.ClearField(actionplanhistory.FieldApproverID, field.TypeString)
	}
	if value, ok := aphuo.mutation.DelegateID(); ok {
		_spec.SetField(actionplanhistory.FieldDelegateID, field.TypeString, value)
	}
	if aphuo.mutation.DelegateIDCleared() {
		_spec.ClearField(actionplanhistory.FieldDelegateID, field.TypeString)
	}
	if value, ok := aphuo.mutation.OwnerID(); ok {
		_spec.SetField(actionplanhistory.FieldOwnerID, field.TypeString, value)
	}
	if aphuo.mutation.OwnerIDCleared() {
		_spec.ClearField(actionplanhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := aphuo.mutation.DueDate(); ok {
		_spec.SetField(actionplanhistory.FieldDueDate, field.TypeTime, value)
	}
	if aphuo.mutation.DueDateCleared() {
		_spec.ClearField(actionplanhistory.FieldDueDate, field.TypeTime)
	}
	if value, ok := aphuo.mutation.Priority(); ok {
		_spec.SetField(actionplanhistory.FieldPriority, field.TypeEnum, value)
	}
	if aphuo.mutation.PriorityCleared() {
		_spec.ClearField(actionplanhistory.FieldPriority, field.TypeEnum)
	}
	if value, ok := aphuo.mutation.Source(); ok {
		_spec.SetField(actionplanhistory.FieldSource, field.TypeString, value)
	}
	if aphuo.mutation.SourceCleared() {
		_spec.ClearField(actionplanhistory.FieldSource, field.TypeString)
	}
	_spec.Node.Schema = aphuo.schemaConfig.ActionPlanHistory
	ctx = internal.NewSchemaConfigContext(ctx, aphuo.schemaConfig)
	_spec.AddModifiers(aphuo.modifiers...)
	_node = &ActionPlanHistory{config: aphuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aphuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionplanhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aphuo.mutation.done = true
	return _node, nil
}
