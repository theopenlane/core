// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplanhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ActionPlanHistoryUpdate is the builder for updating ActionPlanHistory entities.
type ActionPlanHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *ActionPlanHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ActionPlanHistoryUpdate builder.
func (_u *ActionPlanHistoryUpdate) Where(ps ...predicate.ActionPlanHistory) *ActionPlanHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ActionPlanHistoryUpdate) SetUpdatedAt(v time.Time) *ActionPlanHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ActionPlanHistoryUpdate) ClearUpdatedAt() *ActionPlanHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ActionPlanHistoryUpdate) SetUpdatedBy(v string) *ActionPlanHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableUpdatedBy(v *string) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ActionPlanHistoryUpdate) ClearUpdatedBy() *ActionPlanHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ActionPlanHistoryUpdate) SetDeletedAt(v time.Time) *ActionPlanHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableDeletedAt(v *time.Time) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ActionPlanHistoryUpdate) ClearDeletedAt() *ActionPlanHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ActionPlanHistoryUpdate) SetDeletedBy(v string) *ActionPlanHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableDeletedBy(v *string) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ActionPlanHistoryUpdate) ClearDeletedBy() *ActionPlanHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ActionPlanHistoryUpdate) SetTags(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ActionPlanHistoryUpdate) AppendTags(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ActionPlanHistoryUpdate) ClearTags() *ActionPlanHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *ActionPlanHistoryUpdate) SetRevision(v string) *ActionPlanHistoryUpdate {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableRevision(v *string) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *ActionPlanHistoryUpdate) ClearRevision() *ActionPlanHistoryUpdate {
	_u.mutation.ClearRevision()
	return _u
}

// SetName sets the "name" field.
func (_u *ActionPlanHistoryUpdate) SetName(v string) *ActionPlanHistoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableName(v *string) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *ActionPlanHistoryUpdate) SetStatus(v enums.DocumentStatus) *ActionPlanHistoryUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableStatus(v *enums.DocumentStatus) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ActionPlanHistoryUpdate) ClearStatus() *ActionPlanHistoryUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetActionPlanType sets the "action_plan_type" field.
func (_u *ActionPlanHistoryUpdate) SetActionPlanType(v string) *ActionPlanHistoryUpdate {
	_u.mutation.SetActionPlanType(v)
	return _u
}

// SetNillableActionPlanType sets the "action_plan_type" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableActionPlanType(v *string) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetActionPlanType(*v)
	}
	return _u
}

// ClearActionPlanType clears the value of the "action_plan_type" field.
func (_u *ActionPlanHistoryUpdate) ClearActionPlanType() *ActionPlanHistoryUpdate {
	_u.mutation.ClearActionPlanType()
	return _u
}

// SetDetails sets the "details" field.
func (_u *ActionPlanHistoryUpdate) SetDetails(v string) *ActionPlanHistoryUpdate {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableDetails(v *string) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *ActionPlanHistoryUpdate) ClearDetails() *ActionPlanHistoryUpdate {
	_u.mutation.ClearDetails()
	return _u
}

// SetApprovalRequired sets the "approval_required" field.
func (_u *ActionPlanHistoryUpdate) SetApprovalRequired(v bool) *ActionPlanHistoryUpdate {
	_u.mutation.SetApprovalRequired(v)
	return _u
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableApprovalRequired(v *bool) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetApprovalRequired(*v)
	}
	return _u
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (_u *ActionPlanHistoryUpdate) ClearApprovalRequired() *ActionPlanHistoryUpdate {
	_u.mutation.ClearApprovalRequired()
	return _u
}

// SetReviewDue sets the "review_due" field.
func (_u *ActionPlanHistoryUpdate) SetReviewDue(v time.Time) *ActionPlanHistoryUpdate {
	_u.mutation.SetReviewDue(v)
	return _u
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableReviewDue(v *time.Time) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetReviewDue(*v)
	}
	return _u
}

// ClearReviewDue clears the value of the "review_due" field.
func (_u *ActionPlanHistoryUpdate) ClearReviewDue() *ActionPlanHistoryUpdate {
	_u.mutation.ClearReviewDue()
	return _u
}

// SetReviewFrequency sets the "review_frequency" field.
func (_u *ActionPlanHistoryUpdate) SetReviewFrequency(v enums.Frequency) *ActionPlanHistoryUpdate {
	_u.mutation.SetReviewFrequency(v)
	return _u
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableReviewFrequency(v *enums.Frequency) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetReviewFrequency(*v)
	}
	return _u
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (_u *ActionPlanHistoryUpdate) ClearReviewFrequency() *ActionPlanHistoryUpdate {
	_u.mutation.ClearReviewFrequency()
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *ActionPlanHistoryUpdate) SetApproverID(v string) *ActionPlanHistoryUpdate {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableApproverID(v *string) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *ActionPlanHistoryUpdate) ClearApproverID() *ActionPlanHistoryUpdate {
	_u.mutation.ClearApproverID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *ActionPlanHistoryUpdate) SetDelegateID(v string) *ActionPlanHistoryUpdate {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableDelegateID(v *string) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *ActionPlanHistoryUpdate) ClearDelegateID() *ActionPlanHistoryUpdate {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetSummary sets the "summary" field.
func (_u *ActionPlanHistoryUpdate) SetSummary(v string) *ActionPlanHistoryUpdate {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableSummary(v *string) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *ActionPlanHistoryUpdate) ClearSummary() *ActionPlanHistoryUpdate {
	_u.mutation.ClearSummary()
	return _u
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_u *ActionPlanHistoryUpdate) SetTagSuggestions(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.SetTagSuggestions(v)
	return _u
}

// AppendTagSuggestions appends value to the "tag_suggestions" field.
func (_u *ActionPlanHistoryUpdate) AppendTagSuggestions(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.AppendTagSuggestions(v)
	return _u
}

// ClearTagSuggestions clears the value of the "tag_suggestions" field.
func (_u *ActionPlanHistoryUpdate) ClearTagSuggestions() *ActionPlanHistoryUpdate {
	_u.mutation.ClearTagSuggestions()
	return _u
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_u *ActionPlanHistoryUpdate) SetDismissedTagSuggestions(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.SetDismissedTagSuggestions(v)
	return _u
}

// AppendDismissedTagSuggestions appends value to the "dismissed_tag_suggestions" field.
func (_u *ActionPlanHistoryUpdate) AppendDismissedTagSuggestions(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.AppendDismissedTagSuggestions(v)
	return _u
}

// ClearDismissedTagSuggestions clears the value of the "dismissed_tag_suggestions" field.
func (_u *ActionPlanHistoryUpdate) ClearDismissedTagSuggestions() *ActionPlanHistoryUpdate {
	_u.mutation.ClearDismissedTagSuggestions()
	return _u
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_u *ActionPlanHistoryUpdate) SetControlSuggestions(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.SetControlSuggestions(v)
	return _u
}

// AppendControlSuggestions appends value to the "control_suggestions" field.
func (_u *ActionPlanHistoryUpdate) AppendControlSuggestions(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.AppendControlSuggestions(v)
	return _u
}

// ClearControlSuggestions clears the value of the "control_suggestions" field.
func (_u *ActionPlanHistoryUpdate) ClearControlSuggestions() *ActionPlanHistoryUpdate {
	_u.mutation.ClearControlSuggestions()
	return _u
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_u *ActionPlanHistoryUpdate) SetDismissedControlSuggestions(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.SetDismissedControlSuggestions(v)
	return _u
}

// AppendDismissedControlSuggestions appends value to the "dismissed_control_suggestions" field.
func (_u *ActionPlanHistoryUpdate) AppendDismissedControlSuggestions(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.AppendDismissedControlSuggestions(v)
	return _u
}

// ClearDismissedControlSuggestions clears the value of the "dismissed_control_suggestions" field.
func (_u *ActionPlanHistoryUpdate) ClearDismissedControlSuggestions() *ActionPlanHistoryUpdate {
	_u.mutation.ClearDismissedControlSuggestions()
	return _u
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_u *ActionPlanHistoryUpdate) SetImprovementSuggestions(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.SetImprovementSuggestions(v)
	return _u
}

// AppendImprovementSuggestions appends value to the "improvement_suggestions" field.
func (_u *ActionPlanHistoryUpdate) AppendImprovementSuggestions(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.AppendImprovementSuggestions(v)
	return _u
}

// ClearImprovementSuggestions clears the value of the "improvement_suggestions" field.
func (_u *ActionPlanHistoryUpdate) ClearImprovementSuggestions() *ActionPlanHistoryUpdate {
	_u.mutation.ClearImprovementSuggestions()
	return _u
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_u *ActionPlanHistoryUpdate) SetDismissedImprovementSuggestions(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.SetDismissedImprovementSuggestions(v)
	return _u
}

// AppendDismissedImprovementSuggestions appends value to the "dismissed_improvement_suggestions" field.
func (_u *ActionPlanHistoryUpdate) AppendDismissedImprovementSuggestions(v []string) *ActionPlanHistoryUpdate {
	_u.mutation.AppendDismissedImprovementSuggestions(v)
	return _u
}

// ClearDismissedImprovementSuggestions clears the value of the "dismissed_improvement_suggestions" field.
func (_u *ActionPlanHistoryUpdate) ClearDismissedImprovementSuggestions() *ActionPlanHistoryUpdate {
	_u.mutation.ClearDismissedImprovementSuggestions()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ActionPlanHistoryUpdate) SetOwnerID(v string) *ActionPlanHistoryUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableOwnerID(v *string) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ActionPlanHistoryUpdate) ClearOwnerID() *ActionPlanHistoryUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *ActionPlanHistoryUpdate) SetDueDate(v time.Time) *ActionPlanHistoryUpdate {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableDueDate(v *time.Time) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// ClearDueDate clears the value of the "due_date" field.
func (_u *ActionPlanHistoryUpdate) ClearDueDate() *ActionPlanHistoryUpdate {
	_u.mutation.ClearDueDate()
	return _u
}

// SetPriority sets the "priority" field.
func (_u *ActionPlanHistoryUpdate) SetPriority(v enums.Priority) *ActionPlanHistoryUpdate {
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillablePriority(v *enums.Priority) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// ClearPriority clears the value of the "priority" field.
func (_u *ActionPlanHistoryUpdate) ClearPriority() *ActionPlanHistoryUpdate {
	_u.mutation.ClearPriority()
	return _u
}

// SetSource sets the "source" field.
func (_u *ActionPlanHistoryUpdate) SetSource(v string) *ActionPlanHistoryUpdate {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdate) SetNillableSource(v *string) *ActionPlanHistoryUpdate {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *ActionPlanHistoryUpdate) ClearSource() *ActionPlanHistoryUpdate {
	_u.mutation.ClearSource()
	return _u
}

// Mutation returns the ActionPlanHistoryMutation object of the builder.
func (_u *ActionPlanHistoryUpdate) Mutation() *ActionPlanHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ActionPlanHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ActionPlanHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ActionPlanHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ActionPlanHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ActionPlanHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if actionplanhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized actionplanhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := actionplanhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ActionPlanHistoryUpdate) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := actionplanhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewFrequency(); ok {
		if err := actionplanhistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.review_frequency": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Priority(); ok {
		if err := actionplanhistory.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.priority": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ActionPlanHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActionPlanHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ActionPlanHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(actionplanhistory.Table, actionplanhistory.Columns, sqlgraph.NewFieldSpec(actionplanhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(actionplanhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(actionplanhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(actionplanhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(actionplanhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(actionplanhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(actionplanhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(actionplanhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(actionplanhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(actionplanhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(actionplanhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(actionplanhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(actionplanhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(actionplanhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(actionplanhistory.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(actionplanhistory.FieldRevision, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(actionplanhistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(actionplanhistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(actionplanhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.ActionPlanType(); ok {
		_spec.SetField(actionplanhistory.FieldActionPlanType, field.TypeString, value)
	}
	if _u.mutation.ActionPlanTypeCleared() {
		_spec.ClearField(actionplanhistory.FieldActionPlanType, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(actionplanhistory.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(actionplanhistory.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovalRequired(); ok {
		_spec.SetField(actionplanhistory.FieldApprovalRequired, field.TypeBool, value)
	}
	if _u.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(actionplanhistory.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := _u.mutation.ReviewDue(); ok {
		_spec.SetField(actionplanhistory.FieldReviewDue, field.TypeTime, value)
	}
	if _u.mutation.ReviewDueCleared() {
		_spec.ClearField(actionplanhistory.FieldReviewDue, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewFrequency(); ok {
		_spec.SetField(actionplanhistory.FieldReviewFrequency, field.TypeEnum, value)
	}
	if _u.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(actionplanhistory.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := _u.mutation.ApproverID(); ok {
		_spec.SetField(actionplanhistory.FieldApproverID, field.TypeString, value)
	}
	if _u.mutation.ApproverIDCleared() {
		_spec.ClearField(actionplanhistory.FieldApproverID, field.TypeString)
	}
	if value, ok := _u.mutation.DelegateID(); ok {
		_spec.SetField(actionplanhistory.FieldDelegateID, field.TypeString, value)
	}
	if _u.mutation.DelegateIDCleared() {
		_spec.ClearField(actionplanhistory.FieldDelegateID, field.TypeString)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(actionplanhistory.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(actionplanhistory.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.TagSuggestions(); ok {
		_spec.SetField(actionplanhistory.FieldTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldTagSuggestions, value)
		})
	}
	if _u.mutation.TagSuggestionsCleared() {
		_spec.ClearField(actionplanhistory.FieldTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(actionplanhistory.FieldDismissedTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldDismissedTagSuggestions, value)
		})
	}
	if _u.mutation.DismissedTagSuggestionsCleared() {
		_spec.ClearField(actionplanhistory.FieldDismissedTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlSuggestions(); ok {
		_spec.SetField(actionplanhistory.FieldControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldControlSuggestions, value)
		})
	}
	if _u.mutation.ControlSuggestionsCleared() {
		_spec.ClearField(actionplanhistory.FieldControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(actionplanhistory.FieldDismissedControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldDismissedControlSuggestions, value)
		})
	}
	if _u.mutation.DismissedControlSuggestionsCleared() {
		_spec.ClearField(actionplanhistory.FieldDismissedControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(actionplanhistory.FieldImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldImprovementSuggestions, value)
		})
	}
	if _u.mutation.ImprovementSuggestionsCleared() {
		_spec.ClearField(actionplanhistory.FieldImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(actionplanhistory.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldDismissedImprovementSuggestions, value)
		})
	}
	if _u.mutation.DismissedImprovementSuggestionsCleared() {
		_spec.ClearField(actionplanhistory.FieldDismissedImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(actionplanhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(actionplanhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(actionplanhistory.FieldDueDate, field.TypeTime, value)
	}
	if _u.mutation.DueDateCleared() {
		_spec.ClearField(actionplanhistory.FieldDueDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Priority(); ok {
		_spec.SetField(actionplanhistory.FieldPriority, field.TypeEnum, value)
	}
	if _u.mutation.PriorityCleared() {
		_spec.ClearField(actionplanhistory.FieldPriority, field.TypeEnum)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(actionplanhistory.FieldSource, field.TypeString, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(actionplanhistory.FieldSource, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.ActionPlanHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionplanhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ActionPlanHistoryUpdateOne is the builder for updating a single ActionPlanHistory entity.
type ActionPlanHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ActionPlanHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ActionPlanHistoryUpdateOne) SetUpdatedAt(v time.Time) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ActionPlanHistoryUpdateOne) ClearUpdatedAt() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ActionPlanHistoryUpdateOne) SetUpdatedBy(v string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableUpdatedBy(v *string) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ActionPlanHistoryUpdateOne) ClearUpdatedBy() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ActionPlanHistoryUpdateOne) SetDeletedAt(v time.Time) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ActionPlanHistoryUpdateOne) ClearDeletedAt() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ActionPlanHistoryUpdateOne) SetDeletedBy(v string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableDeletedBy(v *string) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ActionPlanHistoryUpdateOne) ClearDeletedBy() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ActionPlanHistoryUpdateOne) SetTags(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ActionPlanHistoryUpdateOne) AppendTags(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ActionPlanHistoryUpdateOne) ClearTags() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *ActionPlanHistoryUpdateOne) SetRevision(v string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableRevision(v *string) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *ActionPlanHistoryUpdateOne) ClearRevision() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearRevision()
	return _u
}

// SetName sets the "name" field.
func (_u *ActionPlanHistoryUpdateOne) SetName(v string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableName(v *string) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *ActionPlanHistoryUpdateOne) SetStatus(v enums.DocumentStatus) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableStatus(v *enums.DocumentStatus) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ActionPlanHistoryUpdateOne) ClearStatus() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetActionPlanType sets the "action_plan_type" field.
func (_u *ActionPlanHistoryUpdateOne) SetActionPlanType(v string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetActionPlanType(v)
	return _u
}

// SetNillableActionPlanType sets the "action_plan_type" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableActionPlanType(v *string) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetActionPlanType(*v)
	}
	return _u
}

// ClearActionPlanType clears the value of the "action_plan_type" field.
func (_u *ActionPlanHistoryUpdateOne) ClearActionPlanType() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearActionPlanType()
	return _u
}

// SetDetails sets the "details" field.
func (_u *ActionPlanHistoryUpdateOne) SetDetails(v string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableDetails(v *string) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *ActionPlanHistoryUpdateOne) ClearDetails() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearDetails()
	return _u
}

// SetApprovalRequired sets the "approval_required" field.
func (_u *ActionPlanHistoryUpdateOne) SetApprovalRequired(v bool) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetApprovalRequired(v)
	return _u
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableApprovalRequired(v *bool) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetApprovalRequired(*v)
	}
	return _u
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (_u *ActionPlanHistoryUpdateOne) ClearApprovalRequired() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearApprovalRequired()
	return _u
}

// SetReviewDue sets the "review_due" field.
func (_u *ActionPlanHistoryUpdateOne) SetReviewDue(v time.Time) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetReviewDue(v)
	return _u
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableReviewDue(v *time.Time) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetReviewDue(*v)
	}
	return _u
}

// ClearReviewDue clears the value of the "review_due" field.
func (_u *ActionPlanHistoryUpdateOne) ClearReviewDue() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearReviewDue()
	return _u
}

// SetReviewFrequency sets the "review_frequency" field.
func (_u *ActionPlanHistoryUpdateOne) SetReviewFrequency(v enums.Frequency) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetReviewFrequency(v)
	return _u
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableReviewFrequency(v *enums.Frequency) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetReviewFrequency(*v)
	}
	return _u
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (_u *ActionPlanHistoryUpdateOne) ClearReviewFrequency() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearReviewFrequency()
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *ActionPlanHistoryUpdateOne) SetApproverID(v string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableApproverID(v *string) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *ActionPlanHistoryUpdateOne) ClearApproverID() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearApproverID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *ActionPlanHistoryUpdateOne) SetDelegateID(v string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableDelegateID(v *string) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *ActionPlanHistoryUpdateOne) ClearDelegateID() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetSummary sets the "summary" field.
func (_u *ActionPlanHistoryUpdateOne) SetSummary(v string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableSummary(v *string) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *ActionPlanHistoryUpdateOne) ClearSummary() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearSummary()
	return _u
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) SetTagSuggestions(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetTagSuggestions(v)
	return _u
}

// AppendTagSuggestions appends value to the "tag_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) AppendTagSuggestions(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.AppendTagSuggestions(v)
	return _u
}

// ClearTagSuggestions clears the value of the "tag_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) ClearTagSuggestions() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearTagSuggestions()
	return _u
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) SetDismissedTagSuggestions(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetDismissedTagSuggestions(v)
	return _u
}

// AppendDismissedTagSuggestions appends value to the "dismissed_tag_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) AppendDismissedTagSuggestions(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.AppendDismissedTagSuggestions(v)
	return _u
}

// ClearDismissedTagSuggestions clears the value of the "dismissed_tag_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) ClearDismissedTagSuggestions() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearDismissedTagSuggestions()
	return _u
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) SetControlSuggestions(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetControlSuggestions(v)
	return _u
}

// AppendControlSuggestions appends value to the "control_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) AppendControlSuggestions(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.AppendControlSuggestions(v)
	return _u
}

// ClearControlSuggestions clears the value of the "control_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) ClearControlSuggestions() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearControlSuggestions()
	return _u
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) SetDismissedControlSuggestions(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetDismissedControlSuggestions(v)
	return _u
}

// AppendDismissedControlSuggestions appends value to the "dismissed_control_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) AppendDismissedControlSuggestions(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.AppendDismissedControlSuggestions(v)
	return _u
}

// ClearDismissedControlSuggestions clears the value of the "dismissed_control_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) ClearDismissedControlSuggestions() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearDismissedControlSuggestions()
	return _u
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) SetImprovementSuggestions(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetImprovementSuggestions(v)
	return _u
}

// AppendImprovementSuggestions appends value to the "improvement_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) AppendImprovementSuggestions(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.AppendImprovementSuggestions(v)
	return _u
}

// ClearImprovementSuggestions clears the value of the "improvement_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) ClearImprovementSuggestions() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearImprovementSuggestions()
	return _u
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) SetDismissedImprovementSuggestions(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetDismissedImprovementSuggestions(v)
	return _u
}

// AppendDismissedImprovementSuggestions appends value to the "dismissed_improvement_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) AppendDismissedImprovementSuggestions(v []string) *ActionPlanHistoryUpdateOne {
	_u.mutation.AppendDismissedImprovementSuggestions(v)
	return _u
}

// ClearDismissedImprovementSuggestions clears the value of the "dismissed_improvement_suggestions" field.
func (_u *ActionPlanHistoryUpdateOne) ClearDismissedImprovementSuggestions() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearDismissedImprovementSuggestions()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ActionPlanHistoryUpdateOne) SetOwnerID(v string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableOwnerID(v *string) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ActionPlanHistoryUpdateOne) ClearOwnerID() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetDueDate sets the "due_date" field.
func (_u *ActionPlanHistoryUpdateOne) SetDueDate(v time.Time) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetDueDate(v)
	return _u
}

// SetNillableDueDate sets the "due_date" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableDueDate(v *time.Time) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetDueDate(*v)
	}
	return _u
}

// ClearDueDate clears the value of the "due_date" field.
func (_u *ActionPlanHistoryUpdateOne) ClearDueDate() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearDueDate()
	return _u
}

// SetPriority sets the "priority" field.
func (_u *ActionPlanHistoryUpdateOne) SetPriority(v enums.Priority) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillablePriority(v *enums.Priority) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// ClearPriority clears the value of the "priority" field.
func (_u *ActionPlanHistoryUpdateOne) ClearPriority() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearPriority()
	return _u
}

// SetSource sets the "source" field.
func (_u *ActionPlanHistoryUpdateOne) SetSource(v string) *ActionPlanHistoryUpdateOne {
	_u.mutation.SetSource(v)
	return _u
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_u *ActionPlanHistoryUpdateOne) SetNillableSource(v *string) *ActionPlanHistoryUpdateOne {
	if v != nil {
		_u.SetSource(*v)
	}
	return _u
}

// ClearSource clears the value of the "source" field.
func (_u *ActionPlanHistoryUpdateOne) ClearSource() *ActionPlanHistoryUpdateOne {
	_u.mutation.ClearSource()
	return _u
}

// Mutation returns the ActionPlanHistoryMutation object of the builder.
func (_u *ActionPlanHistoryUpdateOne) Mutation() *ActionPlanHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the ActionPlanHistoryUpdate builder.
func (_u *ActionPlanHistoryUpdateOne) Where(ps ...predicate.ActionPlanHistory) *ActionPlanHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ActionPlanHistoryUpdateOne) Select(field string, fields ...string) *ActionPlanHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ActionPlanHistory entity.
func (_u *ActionPlanHistoryUpdateOne) Save(ctx context.Context) (*ActionPlanHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ActionPlanHistoryUpdateOne) SaveX(ctx context.Context) *ActionPlanHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ActionPlanHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ActionPlanHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ActionPlanHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if actionplanhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized actionplanhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := actionplanhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ActionPlanHistoryUpdateOne) check() error {
	if v, ok := _u.mutation.Status(); ok {
		if err := actionplanhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewFrequency(); ok {
		if err := actionplanhistory.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.review_frequency": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Priority(); ok {
		if err := actionplanhistory.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`generated: validator failed for field "ActionPlanHistory.priority": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ActionPlanHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ActionPlanHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ActionPlanHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ActionPlanHistory, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(actionplanhistory.Table, actionplanhistory.Columns, sqlgraph.NewFieldSpec(actionplanhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ActionPlanHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, actionplanhistory.FieldID)
		for _, f := range fields {
			if !actionplanhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != actionplanhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(actionplanhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(actionplanhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(actionplanhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(actionplanhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(actionplanhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(actionplanhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(actionplanhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(actionplanhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(actionplanhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(actionplanhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(actionplanhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(actionplanhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(actionplanhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(actionplanhistory.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(actionplanhistory.FieldRevision, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(actionplanhistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(actionplanhistory.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(actionplanhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.ActionPlanType(); ok {
		_spec.SetField(actionplanhistory.FieldActionPlanType, field.TypeString, value)
	}
	if _u.mutation.ActionPlanTypeCleared() {
		_spec.ClearField(actionplanhistory.FieldActionPlanType, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(actionplanhistory.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(actionplanhistory.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovalRequired(); ok {
		_spec.SetField(actionplanhistory.FieldApprovalRequired, field.TypeBool, value)
	}
	if _u.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(actionplanhistory.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := _u.mutation.ReviewDue(); ok {
		_spec.SetField(actionplanhistory.FieldReviewDue, field.TypeTime, value)
	}
	if _u.mutation.ReviewDueCleared() {
		_spec.ClearField(actionplanhistory.FieldReviewDue, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewFrequency(); ok {
		_spec.SetField(actionplanhistory.FieldReviewFrequency, field.TypeEnum, value)
	}
	if _u.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(actionplanhistory.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := _u.mutation.ApproverID(); ok {
		_spec.SetField(actionplanhistory.FieldApproverID, field.TypeString, value)
	}
	if _u.mutation.ApproverIDCleared() {
		_spec.ClearField(actionplanhistory.FieldApproverID, field.TypeString)
	}
	if value, ok := _u.mutation.DelegateID(); ok {
		_spec.SetField(actionplanhistory.FieldDelegateID, field.TypeString, value)
	}
	if _u.mutation.DelegateIDCleared() {
		_spec.ClearField(actionplanhistory.FieldDelegateID, field.TypeString)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(actionplanhistory.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(actionplanhistory.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.TagSuggestions(); ok {
		_spec.SetField(actionplanhistory.FieldTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldTagSuggestions, value)
		})
	}
	if _u.mutation.TagSuggestionsCleared() {
		_spec.ClearField(actionplanhistory.FieldTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(actionplanhistory.FieldDismissedTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldDismissedTagSuggestions, value)
		})
	}
	if _u.mutation.DismissedTagSuggestionsCleared() {
		_spec.ClearField(actionplanhistory.FieldDismissedTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlSuggestions(); ok {
		_spec.SetField(actionplanhistory.FieldControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldControlSuggestions, value)
		})
	}
	if _u.mutation.ControlSuggestionsCleared() {
		_spec.ClearField(actionplanhistory.FieldControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(actionplanhistory.FieldDismissedControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldDismissedControlSuggestions, value)
		})
	}
	if _u.mutation.DismissedControlSuggestionsCleared() {
		_spec.ClearField(actionplanhistory.FieldDismissedControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(actionplanhistory.FieldImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldImprovementSuggestions, value)
		})
	}
	if _u.mutation.ImprovementSuggestionsCleared() {
		_spec.ClearField(actionplanhistory.FieldImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(actionplanhistory.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, actionplanhistory.FieldDismissedImprovementSuggestions, value)
		})
	}
	if _u.mutation.DismissedImprovementSuggestionsCleared() {
		_spec.ClearField(actionplanhistory.FieldDismissedImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(actionplanhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(actionplanhistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.DueDate(); ok {
		_spec.SetField(actionplanhistory.FieldDueDate, field.TypeTime, value)
	}
	if _u.mutation.DueDateCleared() {
		_spec.ClearField(actionplanhistory.FieldDueDate, field.TypeTime)
	}
	if value, ok := _u.mutation.Priority(); ok {
		_spec.SetField(actionplanhistory.FieldPriority, field.TypeEnum, value)
	}
	if _u.mutation.PriorityCleared() {
		_spec.ClearField(actionplanhistory.FieldPriority, field.TypeEnum)
	}
	if value, ok := _u.mutation.Source(); ok {
		_spec.SetField(actionplanhistory.FieldSource, field.TypeString, value)
	}
	if _u.mutation.SourceCleared() {
		_spec.ClearField(actionplanhistory.FieldSource, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.ActionPlanHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &ActionPlanHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{actionplanhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
