// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/groupsetting"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// Group is the model entity for the Group schema.
type Group struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the group - must be unique within the organization
	Name string `json:"name,omitempty"`
	// the groups description
	Description string `json:"description,omitempty"`
	// the URL to an auto generated gravatar image for the group
	GravatarLogoURL string `json:"gravatar_logo_url,omitempty"`
	// the URL to an image uploaded by the customer for the groups avatar image
	LogoURL string `json:"logo_url,omitempty"`
	// The group's displayed 'friendly' name
	DisplayName string `json:"display_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupQuery when eager-loading is set.
	Edges        GroupEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GroupEdges holds the relations/edges for other nodes in the graph.
type GroupEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// ControlCreators holds the value of the control_creators edge.
	ControlCreators []*Organization `json:"control_creators,omitempty"`
	// ControlObjectiveCreators holds the value of the control_objective_creators edge.
	ControlObjectiveCreators []*Organization `json:"control_objective_creators,omitempty"`
	// GroupCreators holds the value of the group_creators edge.
	GroupCreators []*Organization `json:"group_creators,omitempty"`
	// InternalPolicyCreators holds the value of the internal_policy_creators edge.
	InternalPolicyCreators []*Organization `json:"internal_policy_creators,omitempty"`
	// NarrativeCreators holds the value of the narrative_creators edge.
	NarrativeCreators []*Organization `json:"narrative_creators,omitempty"`
	// ProcedureCreators holds the value of the procedure_creators edge.
	ProcedureCreators []*Organization `json:"procedure_creators,omitempty"`
	// ProgramCreators holds the value of the program_creators edge.
	ProgramCreators []*Organization `json:"program_creators,omitempty"`
	// RiskCreators holds the value of the risk_creators edge.
	RiskCreators []*Organization `json:"risk_creators,omitempty"`
	// TemplateCreators holds the value of the template_creators edge.
	TemplateCreators []*Organization `json:"template_creators,omitempty"`
	// ProcedureEditors holds the value of the procedure_editors edge.
	ProcedureEditors []*Procedure `json:"procedure_editors,omitempty"`
	// ProcedureBlockedGroups holds the value of the procedure_blocked_groups edge.
	ProcedureBlockedGroups []*Procedure `json:"procedure_blocked_groups,omitempty"`
	// InternalPolicyEditors holds the value of the internal_policy_editors edge.
	InternalPolicyEditors []*InternalPolicy `json:"internal_policy_editors,omitempty"`
	// InternalPolicyBlockedGroups holds the value of the internal_policy_blocked_groups edge.
	InternalPolicyBlockedGroups []*InternalPolicy `json:"internal_policy_blocked_groups,omitempty"`
	// ProgramEditors holds the value of the program_editors edge.
	ProgramEditors []*Program `json:"program_editors,omitempty"`
	// ProgramBlockedGroups holds the value of the program_blocked_groups edge.
	ProgramBlockedGroups []*Program `json:"program_blocked_groups,omitempty"`
	// ProgramViewers holds the value of the program_viewers edge.
	ProgramViewers []*Program `json:"program_viewers,omitempty"`
	// RiskEditors holds the value of the risk_editors edge.
	RiskEditors []*Risk `json:"risk_editors,omitempty"`
	// RiskBlockedGroups holds the value of the risk_blocked_groups edge.
	RiskBlockedGroups []*Risk `json:"risk_blocked_groups,omitempty"`
	// RiskViewers holds the value of the risk_viewers edge.
	RiskViewers []*Risk `json:"risk_viewers,omitempty"`
	// ControlObjectiveEditors holds the value of the control_objective_editors edge.
	ControlObjectiveEditors []*ControlObjective `json:"control_objective_editors,omitempty"`
	// ControlObjectiveBlockedGroups holds the value of the control_objective_blocked_groups edge.
	ControlObjectiveBlockedGroups []*ControlObjective `json:"control_objective_blocked_groups,omitempty"`
	// ControlObjectiveViewers holds the value of the control_objective_viewers edge.
	ControlObjectiveViewers []*ControlObjective `json:"control_objective_viewers,omitempty"`
	// ControlEditors holds the value of the control_editors edge.
	ControlEditors []*Control `json:"control_editors,omitempty"`
	// ControlBlockedGroups holds the value of the control_blocked_groups edge.
	ControlBlockedGroups []*Control `json:"control_blocked_groups,omitempty"`
	// ControlViewers holds the value of the control_viewers edge.
	ControlViewers []*Control `json:"control_viewers,omitempty"`
	// NarrativeEditors holds the value of the narrative_editors edge.
	NarrativeEditors []*Narrative `json:"narrative_editors,omitempty"`
	// NarrativeBlockedGroups holds the value of the narrative_blocked_groups edge.
	NarrativeBlockedGroups []*Narrative `json:"narrative_blocked_groups,omitempty"`
	// NarrativeViewers holds the value of the narrative_viewers edge.
	NarrativeViewers []*Narrative `json:"narrative_viewers,omitempty"`
	// Setting holds the value of the setting edge.
	Setting *GroupSetting `json:"setting,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Integrations holds the value of the integrations edge.
	Integrations []*Integration `json:"integrations,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Members holds the value of the members edge.
	Members []*GroupMembership `json:"members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [36]bool
	// totalCount holds the count of the edges above.
	totalCount [36]map[string]int

	namedControlCreators               map[string][]*Organization
	namedControlObjectiveCreators      map[string][]*Organization
	namedGroupCreators                 map[string][]*Organization
	namedInternalPolicyCreators        map[string][]*Organization
	namedNarrativeCreators             map[string][]*Organization
	namedProcedureCreators             map[string][]*Organization
	namedProgramCreators               map[string][]*Organization
	namedRiskCreators                  map[string][]*Organization
	namedTemplateCreators              map[string][]*Organization
	namedProcedureEditors              map[string][]*Procedure
	namedProcedureBlockedGroups        map[string][]*Procedure
	namedInternalPolicyEditors         map[string][]*InternalPolicy
	namedInternalPolicyBlockedGroups   map[string][]*InternalPolicy
	namedProgramEditors                map[string][]*Program
	namedProgramBlockedGroups          map[string][]*Program
	namedProgramViewers                map[string][]*Program
	namedRiskEditors                   map[string][]*Risk
	namedRiskBlockedGroups             map[string][]*Risk
	namedRiskViewers                   map[string][]*Risk
	namedControlObjectiveEditors       map[string][]*ControlObjective
	namedControlObjectiveBlockedGroups map[string][]*ControlObjective
	namedControlObjectiveViewers       map[string][]*ControlObjective
	namedControlEditors                map[string][]*Control
	namedControlBlockedGroups          map[string][]*Control
	namedControlViewers                map[string][]*Control
	namedNarrativeEditors              map[string][]*Narrative
	namedNarrativeBlockedGroups        map[string][]*Narrative
	namedNarrativeViewers              map[string][]*Narrative
	namedUsers                         map[string][]*User
	namedEvents                        map[string][]*Event
	namedIntegrations                  map[string][]*Integration
	namedFiles                         map[string][]*File
	namedTasks                         map[string][]*Task
	namedMembers                       map[string][]*GroupMembership
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ControlCreatorsOrErr returns the ControlCreators value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ControlCreatorsOrErr() ([]*Organization, error) {
	if e.loadedTypes[1] {
		return e.ControlCreators, nil
	}
	return nil, &NotLoadedError{edge: "control_creators"}
}

// ControlObjectiveCreatorsOrErr returns the ControlObjectiveCreators value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ControlObjectiveCreatorsOrErr() ([]*Organization, error) {
	if e.loadedTypes[2] {
		return e.ControlObjectiveCreators, nil
	}
	return nil, &NotLoadedError{edge: "control_objective_creators"}
}

// GroupCreatorsOrErr returns the GroupCreators value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) GroupCreatorsOrErr() ([]*Organization, error) {
	if e.loadedTypes[3] {
		return e.GroupCreators, nil
	}
	return nil, &NotLoadedError{edge: "group_creators"}
}

// InternalPolicyCreatorsOrErr returns the InternalPolicyCreators value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) InternalPolicyCreatorsOrErr() ([]*Organization, error) {
	if e.loadedTypes[4] {
		return e.InternalPolicyCreators, nil
	}
	return nil, &NotLoadedError{edge: "internal_policy_creators"}
}

// NarrativeCreatorsOrErr returns the NarrativeCreators value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) NarrativeCreatorsOrErr() ([]*Organization, error) {
	if e.loadedTypes[5] {
		return e.NarrativeCreators, nil
	}
	return nil, &NotLoadedError{edge: "narrative_creators"}
}

// ProcedureCreatorsOrErr returns the ProcedureCreators value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ProcedureCreatorsOrErr() ([]*Organization, error) {
	if e.loadedTypes[6] {
		return e.ProcedureCreators, nil
	}
	return nil, &NotLoadedError{edge: "procedure_creators"}
}

// ProgramCreatorsOrErr returns the ProgramCreators value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ProgramCreatorsOrErr() ([]*Organization, error) {
	if e.loadedTypes[7] {
		return e.ProgramCreators, nil
	}
	return nil, &NotLoadedError{edge: "program_creators"}
}

// RiskCreatorsOrErr returns the RiskCreators value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) RiskCreatorsOrErr() ([]*Organization, error) {
	if e.loadedTypes[8] {
		return e.RiskCreators, nil
	}
	return nil, &NotLoadedError{edge: "risk_creators"}
}

// TemplateCreatorsOrErr returns the TemplateCreators value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) TemplateCreatorsOrErr() ([]*Organization, error) {
	if e.loadedTypes[9] {
		return e.TemplateCreators, nil
	}
	return nil, &NotLoadedError{edge: "template_creators"}
}

// ProcedureEditorsOrErr returns the ProcedureEditors value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ProcedureEditorsOrErr() ([]*Procedure, error) {
	if e.loadedTypes[10] {
		return e.ProcedureEditors, nil
	}
	return nil, &NotLoadedError{edge: "procedure_editors"}
}

// ProcedureBlockedGroupsOrErr returns the ProcedureBlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ProcedureBlockedGroupsOrErr() ([]*Procedure, error) {
	if e.loadedTypes[11] {
		return e.ProcedureBlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "procedure_blocked_groups"}
}

// InternalPolicyEditorsOrErr returns the InternalPolicyEditors value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) InternalPolicyEditorsOrErr() ([]*InternalPolicy, error) {
	if e.loadedTypes[12] {
		return e.InternalPolicyEditors, nil
	}
	return nil, &NotLoadedError{edge: "internal_policy_editors"}
}

// InternalPolicyBlockedGroupsOrErr returns the InternalPolicyBlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) InternalPolicyBlockedGroupsOrErr() ([]*InternalPolicy, error) {
	if e.loadedTypes[13] {
		return e.InternalPolicyBlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "internal_policy_blocked_groups"}
}

// ProgramEditorsOrErr returns the ProgramEditors value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ProgramEditorsOrErr() ([]*Program, error) {
	if e.loadedTypes[14] {
		return e.ProgramEditors, nil
	}
	return nil, &NotLoadedError{edge: "program_editors"}
}

// ProgramBlockedGroupsOrErr returns the ProgramBlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ProgramBlockedGroupsOrErr() ([]*Program, error) {
	if e.loadedTypes[15] {
		return e.ProgramBlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "program_blocked_groups"}
}

// ProgramViewersOrErr returns the ProgramViewers value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ProgramViewersOrErr() ([]*Program, error) {
	if e.loadedTypes[16] {
		return e.ProgramViewers, nil
	}
	return nil, &NotLoadedError{edge: "program_viewers"}
}

// RiskEditorsOrErr returns the RiskEditors value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) RiskEditorsOrErr() ([]*Risk, error) {
	if e.loadedTypes[17] {
		return e.RiskEditors, nil
	}
	return nil, &NotLoadedError{edge: "risk_editors"}
}

// RiskBlockedGroupsOrErr returns the RiskBlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) RiskBlockedGroupsOrErr() ([]*Risk, error) {
	if e.loadedTypes[18] {
		return e.RiskBlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "risk_blocked_groups"}
}

// RiskViewersOrErr returns the RiskViewers value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) RiskViewersOrErr() ([]*Risk, error) {
	if e.loadedTypes[19] {
		return e.RiskViewers, nil
	}
	return nil, &NotLoadedError{edge: "risk_viewers"}
}

// ControlObjectiveEditorsOrErr returns the ControlObjectiveEditors value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ControlObjectiveEditorsOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[20] {
		return e.ControlObjectiveEditors, nil
	}
	return nil, &NotLoadedError{edge: "control_objective_editors"}
}

// ControlObjectiveBlockedGroupsOrErr returns the ControlObjectiveBlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ControlObjectiveBlockedGroupsOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[21] {
		return e.ControlObjectiveBlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "control_objective_blocked_groups"}
}

// ControlObjectiveViewersOrErr returns the ControlObjectiveViewers value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ControlObjectiveViewersOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[22] {
		return e.ControlObjectiveViewers, nil
	}
	return nil, &NotLoadedError{edge: "control_objective_viewers"}
}

// ControlEditorsOrErr returns the ControlEditors value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ControlEditorsOrErr() ([]*Control, error) {
	if e.loadedTypes[23] {
		return e.ControlEditors, nil
	}
	return nil, &NotLoadedError{edge: "control_editors"}
}

// ControlBlockedGroupsOrErr returns the ControlBlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ControlBlockedGroupsOrErr() ([]*Control, error) {
	if e.loadedTypes[24] {
		return e.ControlBlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "control_blocked_groups"}
}

// ControlViewersOrErr returns the ControlViewers value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) ControlViewersOrErr() ([]*Control, error) {
	if e.loadedTypes[25] {
		return e.ControlViewers, nil
	}
	return nil, &NotLoadedError{edge: "control_viewers"}
}

// NarrativeEditorsOrErr returns the NarrativeEditors value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) NarrativeEditorsOrErr() ([]*Narrative, error) {
	if e.loadedTypes[26] {
		return e.NarrativeEditors, nil
	}
	return nil, &NotLoadedError{edge: "narrative_editors"}
}

// NarrativeBlockedGroupsOrErr returns the NarrativeBlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) NarrativeBlockedGroupsOrErr() ([]*Narrative, error) {
	if e.loadedTypes[27] {
		return e.NarrativeBlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "narrative_blocked_groups"}
}

// NarrativeViewersOrErr returns the NarrativeViewers value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) NarrativeViewersOrErr() ([]*Narrative, error) {
	if e.loadedTypes[28] {
		return e.NarrativeViewers, nil
	}
	return nil, &NotLoadedError{edge: "narrative_viewers"}
}

// SettingOrErr returns the Setting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupEdges) SettingOrErr() (*GroupSetting, error) {
	if e.Setting != nil {
		return e.Setting, nil
	} else if e.loadedTypes[29] {
		return nil, &NotFoundError{label: groupsetting.Label}
	}
	return nil, &NotLoadedError{edge: "setting"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[30] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[31] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// IntegrationsOrErr returns the Integrations value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) IntegrationsOrErr() ([]*Integration, error) {
	if e.loadedTypes[32] {
		return e.Integrations, nil
	}
	return nil, &NotLoadedError{edge: "integrations"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[33] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[34] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) MembersOrErr() ([]*GroupMembership, error) {
	if e.loadedTypes[35] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Group) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case group.FieldTags:
			values[i] = new([]byte)
		case group.FieldID, group.FieldCreatedBy, group.FieldUpdatedBy, group.FieldDeletedBy, group.FieldMappingID, group.FieldOwnerID, group.FieldName, group.FieldDescription, group.FieldGravatarLogoURL, group.FieldLogoURL, group.FieldDisplayName:
			values[i] = new(sql.NullString)
		case group.FieldCreatedAt, group.FieldUpdatedAt, group.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Group fields.
func (gr *Group) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case group.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gr.ID = value.String
			}
		case group.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gr.CreatedAt = value.Time
			}
		case group.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gr.UpdatedAt = value.Time
			}
		case group.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				gr.CreatedBy = value.String
			}
		case group.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				gr.UpdatedBy = value.String
			}
		case group.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gr.DeletedAt = value.Time
			}
		case group.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				gr.DeletedBy = value.String
			}
		case group.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				gr.MappingID = value.String
			}
		case group.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &gr.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case group.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				gr.OwnerID = value.String
			}
		case group.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gr.Name = value.String
			}
		case group.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				gr.Description = value.String
			}
		case group.FieldGravatarLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gravatar_logo_url", values[i])
			} else if value.Valid {
				gr.GravatarLogoURL = value.String
			}
		case group.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				gr.LogoURL = value.String
			}
		case group.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				gr.DisplayName = value.String
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Group.
// This includes values selected through modifiers, order, etc.
func (gr *Group) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Group entity.
func (gr *Group) QueryOwner() *OrganizationQuery {
	return NewGroupClient(gr.config).QueryOwner(gr)
}

// QueryControlCreators queries the "control_creators" edge of the Group entity.
func (gr *Group) QueryControlCreators() *OrganizationQuery {
	return NewGroupClient(gr.config).QueryControlCreators(gr)
}

// QueryControlObjectiveCreators queries the "control_objective_creators" edge of the Group entity.
func (gr *Group) QueryControlObjectiveCreators() *OrganizationQuery {
	return NewGroupClient(gr.config).QueryControlObjectiveCreators(gr)
}

// QueryGroupCreators queries the "group_creators" edge of the Group entity.
func (gr *Group) QueryGroupCreators() *OrganizationQuery {
	return NewGroupClient(gr.config).QueryGroupCreators(gr)
}

// QueryInternalPolicyCreators queries the "internal_policy_creators" edge of the Group entity.
func (gr *Group) QueryInternalPolicyCreators() *OrganizationQuery {
	return NewGroupClient(gr.config).QueryInternalPolicyCreators(gr)
}

// QueryNarrativeCreators queries the "narrative_creators" edge of the Group entity.
func (gr *Group) QueryNarrativeCreators() *OrganizationQuery {
	return NewGroupClient(gr.config).QueryNarrativeCreators(gr)
}

// QueryProcedureCreators queries the "procedure_creators" edge of the Group entity.
func (gr *Group) QueryProcedureCreators() *OrganizationQuery {
	return NewGroupClient(gr.config).QueryProcedureCreators(gr)
}

// QueryProgramCreators queries the "program_creators" edge of the Group entity.
func (gr *Group) QueryProgramCreators() *OrganizationQuery {
	return NewGroupClient(gr.config).QueryProgramCreators(gr)
}

// QueryRiskCreators queries the "risk_creators" edge of the Group entity.
func (gr *Group) QueryRiskCreators() *OrganizationQuery {
	return NewGroupClient(gr.config).QueryRiskCreators(gr)
}

// QueryTemplateCreators queries the "template_creators" edge of the Group entity.
func (gr *Group) QueryTemplateCreators() *OrganizationQuery {
	return NewGroupClient(gr.config).QueryTemplateCreators(gr)
}

// QueryProcedureEditors queries the "procedure_editors" edge of the Group entity.
func (gr *Group) QueryProcedureEditors() *ProcedureQuery {
	return NewGroupClient(gr.config).QueryProcedureEditors(gr)
}

// QueryProcedureBlockedGroups queries the "procedure_blocked_groups" edge of the Group entity.
func (gr *Group) QueryProcedureBlockedGroups() *ProcedureQuery {
	return NewGroupClient(gr.config).QueryProcedureBlockedGroups(gr)
}

// QueryInternalPolicyEditors queries the "internal_policy_editors" edge of the Group entity.
func (gr *Group) QueryInternalPolicyEditors() *InternalPolicyQuery {
	return NewGroupClient(gr.config).QueryInternalPolicyEditors(gr)
}

// QueryInternalPolicyBlockedGroups queries the "internal_policy_blocked_groups" edge of the Group entity.
func (gr *Group) QueryInternalPolicyBlockedGroups() *InternalPolicyQuery {
	return NewGroupClient(gr.config).QueryInternalPolicyBlockedGroups(gr)
}

// QueryProgramEditors queries the "program_editors" edge of the Group entity.
func (gr *Group) QueryProgramEditors() *ProgramQuery {
	return NewGroupClient(gr.config).QueryProgramEditors(gr)
}

// QueryProgramBlockedGroups queries the "program_blocked_groups" edge of the Group entity.
func (gr *Group) QueryProgramBlockedGroups() *ProgramQuery {
	return NewGroupClient(gr.config).QueryProgramBlockedGroups(gr)
}

// QueryProgramViewers queries the "program_viewers" edge of the Group entity.
func (gr *Group) QueryProgramViewers() *ProgramQuery {
	return NewGroupClient(gr.config).QueryProgramViewers(gr)
}

// QueryRiskEditors queries the "risk_editors" edge of the Group entity.
func (gr *Group) QueryRiskEditors() *RiskQuery {
	return NewGroupClient(gr.config).QueryRiskEditors(gr)
}

// QueryRiskBlockedGroups queries the "risk_blocked_groups" edge of the Group entity.
func (gr *Group) QueryRiskBlockedGroups() *RiskQuery {
	return NewGroupClient(gr.config).QueryRiskBlockedGroups(gr)
}

// QueryRiskViewers queries the "risk_viewers" edge of the Group entity.
func (gr *Group) QueryRiskViewers() *RiskQuery {
	return NewGroupClient(gr.config).QueryRiskViewers(gr)
}

// QueryControlObjectiveEditors queries the "control_objective_editors" edge of the Group entity.
func (gr *Group) QueryControlObjectiveEditors() *ControlObjectiveQuery {
	return NewGroupClient(gr.config).QueryControlObjectiveEditors(gr)
}

// QueryControlObjectiveBlockedGroups queries the "control_objective_blocked_groups" edge of the Group entity.
func (gr *Group) QueryControlObjectiveBlockedGroups() *ControlObjectiveQuery {
	return NewGroupClient(gr.config).QueryControlObjectiveBlockedGroups(gr)
}

// QueryControlObjectiveViewers queries the "control_objective_viewers" edge of the Group entity.
func (gr *Group) QueryControlObjectiveViewers() *ControlObjectiveQuery {
	return NewGroupClient(gr.config).QueryControlObjectiveViewers(gr)
}

// QueryControlEditors queries the "control_editors" edge of the Group entity.
func (gr *Group) QueryControlEditors() *ControlQuery {
	return NewGroupClient(gr.config).QueryControlEditors(gr)
}

// QueryControlBlockedGroups queries the "control_blocked_groups" edge of the Group entity.
func (gr *Group) QueryControlBlockedGroups() *ControlQuery {
	return NewGroupClient(gr.config).QueryControlBlockedGroups(gr)
}

// QueryControlViewers queries the "control_viewers" edge of the Group entity.
func (gr *Group) QueryControlViewers() *ControlQuery {
	return NewGroupClient(gr.config).QueryControlViewers(gr)
}

// QueryNarrativeEditors queries the "narrative_editors" edge of the Group entity.
func (gr *Group) QueryNarrativeEditors() *NarrativeQuery {
	return NewGroupClient(gr.config).QueryNarrativeEditors(gr)
}

// QueryNarrativeBlockedGroups queries the "narrative_blocked_groups" edge of the Group entity.
func (gr *Group) QueryNarrativeBlockedGroups() *NarrativeQuery {
	return NewGroupClient(gr.config).QueryNarrativeBlockedGroups(gr)
}

// QueryNarrativeViewers queries the "narrative_viewers" edge of the Group entity.
func (gr *Group) QueryNarrativeViewers() *NarrativeQuery {
	return NewGroupClient(gr.config).QueryNarrativeViewers(gr)
}

// QuerySetting queries the "setting" edge of the Group entity.
func (gr *Group) QuerySetting() *GroupSettingQuery {
	return NewGroupClient(gr.config).QuerySetting(gr)
}

// QueryUsers queries the "users" edge of the Group entity.
func (gr *Group) QueryUsers() *UserQuery {
	return NewGroupClient(gr.config).QueryUsers(gr)
}

// QueryEvents queries the "events" edge of the Group entity.
func (gr *Group) QueryEvents() *EventQuery {
	return NewGroupClient(gr.config).QueryEvents(gr)
}

// QueryIntegrations queries the "integrations" edge of the Group entity.
func (gr *Group) QueryIntegrations() *IntegrationQuery {
	return NewGroupClient(gr.config).QueryIntegrations(gr)
}

// QueryFiles queries the "files" edge of the Group entity.
func (gr *Group) QueryFiles() *FileQuery {
	return NewGroupClient(gr.config).QueryFiles(gr)
}

// QueryTasks queries the "tasks" edge of the Group entity.
func (gr *Group) QueryTasks() *TaskQuery {
	return NewGroupClient(gr.config).QueryTasks(gr)
}

// QueryMembers queries the "members" edge of the Group entity.
func (gr *Group) QueryMembers() *GroupMembershipQuery {
	return NewGroupClient(gr.config).QueryMembers(gr)
}

// Update returns a builder for updating this Group.
// Note that you need to call Group.Unwrap() before calling this method if this Group
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Group) Update() *GroupUpdateOne {
	return NewGroupClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the Group entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Group) Unwrap() *Group {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("generated: Group is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Group) String() string {
	var builder strings.Builder
	builder.WriteString("Group(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("created_at=")
	builder.WriteString(gr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(gr.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(gr.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(gr.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(gr.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(gr.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", gr.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(gr.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(gr.Description)
	builder.WriteString(", ")
	builder.WriteString("gravatar_logo_url=")
	builder.WriteString(gr.GravatarLogoURL)
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(gr.LogoURL)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(gr.DisplayName)
	builder.WriteByte(')')
	return builder.String()
}

// NamedControlCreators returns the ControlCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedControlCreators(name string) ([]*Organization, error) {
	if gr.Edges.namedControlCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedControlCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedControlCreators(name string, edges ...*Organization) {
	if gr.Edges.namedControlCreators == nil {
		gr.Edges.namedControlCreators = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		gr.Edges.namedControlCreators[name] = []*Organization{}
	} else {
		gr.Edges.namedControlCreators[name] = append(gr.Edges.namedControlCreators[name], edges...)
	}
}

// NamedControlObjectiveCreators returns the ControlObjectiveCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedControlObjectiveCreators(name string) ([]*Organization, error) {
	if gr.Edges.namedControlObjectiveCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedControlObjectiveCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedControlObjectiveCreators(name string, edges ...*Organization) {
	if gr.Edges.namedControlObjectiveCreators == nil {
		gr.Edges.namedControlObjectiveCreators = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		gr.Edges.namedControlObjectiveCreators[name] = []*Organization{}
	} else {
		gr.Edges.namedControlObjectiveCreators[name] = append(gr.Edges.namedControlObjectiveCreators[name], edges...)
	}
}

// NamedGroupCreators returns the GroupCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedGroupCreators(name string) ([]*Organization, error) {
	if gr.Edges.namedGroupCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedGroupCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedGroupCreators(name string, edges ...*Organization) {
	if gr.Edges.namedGroupCreators == nil {
		gr.Edges.namedGroupCreators = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		gr.Edges.namedGroupCreators[name] = []*Organization{}
	} else {
		gr.Edges.namedGroupCreators[name] = append(gr.Edges.namedGroupCreators[name], edges...)
	}
}

// NamedInternalPolicyCreators returns the InternalPolicyCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedInternalPolicyCreators(name string) ([]*Organization, error) {
	if gr.Edges.namedInternalPolicyCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedInternalPolicyCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedInternalPolicyCreators(name string, edges ...*Organization) {
	if gr.Edges.namedInternalPolicyCreators == nil {
		gr.Edges.namedInternalPolicyCreators = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		gr.Edges.namedInternalPolicyCreators[name] = []*Organization{}
	} else {
		gr.Edges.namedInternalPolicyCreators[name] = append(gr.Edges.namedInternalPolicyCreators[name], edges...)
	}
}

// NamedNarrativeCreators returns the NarrativeCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedNarrativeCreators(name string) ([]*Organization, error) {
	if gr.Edges.namedNarrativeCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedNarrativeCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedNarrativeCreators(name string, edges ...*Organization) {
	if gr.Edges.namedNarrativeCreators == nil {
		gr.Edges.namedNarrativeCreators = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		gr.Edges.namedNarrativeCreators[name] = []*Organization{}
	} else {
		gr.Edges.namedNarrativeCreators[name] = append(gr.Edges.namedNarrativeCreators[name], edges...)
	}
}

// NamedProcedureCreators returns the ProcedureCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedProcedureCreators(name string) ([]*Organization, error) {
	if gr.Edges.namedProcedureCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedProcedureCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedProcedureCreators(name string, edges ...*Organization) {
	if gr.Edges.namedProcedureCreators == nil {
		gr.Edges.namedProcedureCreators = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		gr.Edges.namedProcedureCreators[name] = []*Organization{}
	} else {
		gr.Edges.namedProcedureCreators[name] = append(gr.Edges.namedProcedureCreators[name], edges...)
	}
}

// NamedProgramCreators returns the ProgramCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedProgramCreators(name string) ([]*Organization, error) {
	if gr.Edges.namedProgramCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedProgramCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedProgramCreators(name string, edges ...*Organization) {
	if gr.Edges.namedProgramCreators == nil {
		gr.Edges.namedProgramCreators = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		gr.Edges.namedProgramCreators[name] = []*Organization{}
	} else {
		gr.Edges.namedProgramCreators[name] = append(gr.Edges.namedProgramCreators[name], edges...)
	}
}

// NamedRiskCreators returns the RiskCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedRiskCreators(name string) ([]*Organization, error) {
	if gr.Edges.namedRiskCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedRiskCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedRiskCreators(name string, edges ...*Organization) {
	if gr.Edges.namedRiskCreators == nil {
		gr.Edges.namedRiskCreators = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		gr.Edges.namedRiskCreators[name] = []*Organization{}
	} else {
		gr.Edges.namedRiskCreators[name] = append(gr.Edges.namedRiskCreators[name], edges...)
	}
}

// NamedTemplateCreators returns the TemplateCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedTemplateCreators(name string) ([]*Organization, error) {
	if gr.Edges.namedTemplateCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedTemplateCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedTemplateCreators(name string, edges ...*Organization) {
	if gr.Edges.namedTemplateCreators == nil {
		gr.Edges.namedTemplateCreators = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		gr.Edges.namedTemplateCreators[name] = []*Organization{}
	} else {
		gr.Edges.namedTemplateCreators[name] = append(gr.Edges.namedTemplateCreators[name], edges...)
	}
}

// NamedProcedureEditors returns the ProcedureEditors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedProcedureEditors(name string) ([]*Procedure, error) {
	if gr.Edges.namedProcedureEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedProcedureEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedProcedureEditors(name string, edges ...*Procedure) {
	if gr.Edges.namedProcedureEditors == nil {
		gr.Edges.namedProcedureEditors = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		gr.Edges.namedProcedureEditors[name] = []*Procedure{}
	} else {
		gr.Edges.namedProcedureEditors[name] = append(gr.Edges.namedProcedureEditors[name], edges...)
	}
}

// NamedProcedureBlockedGroups returns the ProcedureBlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedProcedureBlockedGroups(name string) ([]*Procedure, error) {
	if gr.Edges.namedProcedureBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedProcedureBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedProcedureBlockedGroups(name string, edges ...*Procedure) {
	if gr.Edges.namedProcedureBlockedGroups == nil {
		gr.Edges.namedProcedureBlockedGroups = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		gr.Edges.namedProcedureBlockedGroups[name] = []*Procedure{}
	} else {
		gr.Edges.namedProcedureBlockedGroups[name] = append(gr.Edges.namedProcedureBlockedGroups[name], edges...)
	}
}

// NamedInternalPolicyEditors returns the InternalPolicyEditors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedInternalPolicyEditors(name string) ([]*InternalPolicy, error) {
	if gr.Edges.namedInternalPolicyEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedInternalPolicyEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedInternalPolicyEditors(name string, edges ...*InternalPolicy) {
	if gr.Edges.namedInternalPolicyEditors == nil {
		gr.Edges.namedInternalPolicyEditors = make(map[string][]*InternalPolicy)
	}
	if len(edges) == 0 {
		gr.Edges.namedInternalPolicyEditors[name] = []*InternalPolicy{}
	} else {
		gr.Edges.namedInternalPolicyEditors[name] = append(gr.Edges.namedInternalPolicyEditors[name], edges...)
	}
}

// NamedInternalPolicyBlockedGroups returns the InternalPolicyBlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedInternalPolicyBlockedGroups(name string) ([]*InternalPolicy, error) {
	if gr.Edges.namedInternalPolicyBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedInternalPolicyBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedInternalPolicyBlockedGroups(name string, edges ...*InternalPolicy) {
	if gr.Edges.namedInternalPolicyBlockedGroups == nil {
		gr.Edges.namedInternalPolicyBlockedGroups = make(map[string][]*InternalPolicy)
	}
	if len(edges) == 0 {
		gr.Edges.namedInternalPolicyBlockedGroups[name] = []*InternalPolicy{}
	} else {
		gr.Edges.namedInternalPolicyBlockedGroups[name] = append(gr.Edges.namedInternalPolicyBlockedGroups[name], edges...)
	}
}

// NamedProgramEditors returns the ProgramEditors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedProgramEditors(name string) ([]*Program, error) {
	if gr.Edges.namedProgramEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedProgramEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedProgramEditors(name string, edges ...*Program) {
	if gr.Edges.namedProgramEditors == nil {
		gr.Edges.namedProgramEditors = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		gr.Edges.namedProgramEditors[name] = []*Program{}
	} else {
		gr.Edges.namedProgramEditors[name] = append(gr.Edges.namedProgramEditors[name], edges...)
	}
}

// NamedProgramBlockedGroups returns the ProgramBlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedProgramBlockedGroups(name string) ([]*Program, error) {
	if gr.Edges.namedProgramBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedProgramBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedProgramBlockedGroups(name string, edges ...*Program) {
	if gr.Edges.namedProgramBlockedGroups == nil {
		gr.Edges.namedProgramBlockedGroups = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		gr.Edges.namedProgramBlockedGroups[name] = []*Program{}
	} else {
		gr.Edges.namedProgramBlockedGroups[name] = append(gr.Edges.namedProgramBlockedGroups[name], edges...)
	}
}

// NamedProgramViewers returns the ProgramViewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedProgramViewers(name string) ([]*Program, error) {
	if gr.Edges.namedProgramViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedProgramViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedProgramViewers(name string, edges ...*Program) {
	if gr.Edges.namedProgramViewers == nil {
		gr.Edges.namedProgramViewers = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		gr.Edges.namedProgramViewers[name] = []*Program{}
	} else {
		gr.Edges.namedProgramViewers[name] = append(gr.Edges.namedProgramViewers[name], edges...)
	}
}

// NamedRiskEditors returns the RiskEditors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedRiskEditors(name string) ([]*Risk, error) {
	if gr.Edges.namedRiskEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedRiskEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedRiskEditors(name string, edges ...*Risk) {
	if gr.Edges.namedRiskEditors == nil {
		gr.Edges.namedRiskEditors = make(map[string][]*Risk)
	}
	if len(edges) == 0 {
		gr.Edges.namedRiskEditors[name] = []*Risk{}
	} else {
		gr.Edges.namedRiskEditors[name] = append(gr.Edges.namedRiskEditors[name], edges...)
	}
}

// NamedRiskBlockedGroups returns the RiskBlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedRiskBlockedGroups(name string) ([]*Risk, error) {
	if gr.Edges.namedRiskBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedRiskBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedRiskBlockedGroups(name string, edges ...*Risk) {
	if gr.Edges.namedRiskBlockedGroups == nil {
		gr.Edges.namedRiskBlockedGroups = make(map[string][]*Risk)
	}
	if len(edges) == 0 {
		gr.Edges.namedRiskBlockedGroups[name] = []*Risk{}
	} else {
		gr.Edges.namedRiskBlockedGroups[name] = append(gr.Edges.namedRiskBlockedGroups[name], edges...)
	}
}

// NamedRiskViewers returns the RiskViewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedRiskViewers(name string) ([]*Risk, error) {
	if gr.Edges.namedRiskViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedRiskViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedRiskViewers(name string, edges ...*Risk) {
	if gr.Edges.namedRiskViewers == nil {
		gr.Edges.namedRiskViewers = make(map[string][]*Risk)
	}
	if len(edges) == 0 {
		gr.Edges.namedRiskViewers[name] = []*Risk{}
	} else {
		gr.Edges.namedRiskViewers[name] = append(gr.Edges.namedRiskViewers[name], edges...)
	}
}

// NamedControlObjectiveEditors returns the ControlObjectiveEditors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedControlObjectiveEditors(name string) ([]*ControlObjective, error) {
	if gr.Edges.namedControlObjectiveEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedControlObjectiveEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedControlObjectiveEditors(name string, edges ...*ControlObjective) {
	if gr.Edges.namedControlObjectiveEditors == nil {
		gr.Edges.namedControlObjectiveEditors = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		gr.Edges.namedControlObjectiveEditors[name] = []*ControlObjective{}
	} else {
		gr.Edges.namedControlObjectiveEditors[name] = append(gr.Edges.namedControlObjectiveEditors[name], edges...)
	}
}

// NamedControlObjectiveBlockedGroups returns the ControlObjectiveBlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedControlObjectiveBlockedGroups(name string) ([]*ControlObjective, error) {
	if gr.Edges.namedControlObjectiveBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedControlObjectiveBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedControlObjectiveBlockedGroups(name string, edges ...*ControlObjective) {
	if gr.Edges.namedControlObjectiveBlockedGroups == nil {
		gr.Edges.namedControlObjectiveBlockedGroups = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		gr.Edges.namedControlObjectiveBlockedGroups[name] = []*ControlObjective{}
	} else {
		gr.Edges.namedControlObjectiveBlockedGroups[name] = append(gr.Edges.namedControlObjectiveBlockedGroups[name], edges...)
	}
}

// NamedControlObjectiveViewers returns the ControlObjectiveViewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedControlObjectiveViewers(name string) ([]*ControlObjective, error) {
	if gr.Edges.namedControlObjectiveViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedControlObjectiveViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedControlObjectiveViewers(name string, edges ...*ControlObjective) {
	if gr.Edges.namedControlObjectiveViewers == nil {
		gr.Edges.namedControlObjectiveViewers = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		gr.Edges.namedControlObjectiveViewers[name] = []*ControlObjective{}
	} else {
		gr.Edges.namedControlObjectiveViewers[name] = append(gr.Edges.namedControlObjectiveViewers[name], edges...)
	}
}

// NamedControlEditors returns the ControlEditors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedControlEditors(name string) ([]*Control, error) {
	if gr.Edges.namedControlEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedControlEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedControlEditors(name string, edges ...*Control) {
	if gr.Edges.namedControlEditors == nil {
		gr.Edges.namedControlEditors = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		gr.Edges.namedControlEditors[name] = []*Control{}
	} else {
		gr.Edges.namedControlEditors[name] = append(gr.Edges.namedControlEditors[name], edges...)
	}
}

// NamedControlBlockedGroups returns the ControlBlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedControlBlockedGroups(name string) ([]*Control, error) {
	if gr.Edges.namedControlBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedControlBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedControlBlockedGroups(name string, edges ...*Control) {
	if gr.Edges.namedControlBlockedGroups == nil {
		gr.Edges.namedControlBlockedGroups = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		gr.Edges.namedControlBlockedGroups[name] = []*Control{}
	} else {
		gr.Edges.namedControlBlockedGroups[name] = append(gr.Edges.namedControlBlockedGroups[name], edges...)
	}
}

// NamedControlViewers returns the ControlViewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedControlViewers(name string) ([]*Control, error) {
	if gr.Edges.namedControlViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedControlViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedControlViewers(name string, edges ...*Control) {
	if gr.Edges.namedControlViewers == nil {
		gr.Edges.namedControlViewers = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		gr.Edges.namedControlViewers[name] = []*Control{}
	} else {
		gr.Edges.namedControlViewers[name] = append(gr.Edges.namedControlViewers[name], edges...)
	}
}

// NamedNarrativeEditors returns the NarrativeEditors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedNarrativeEditors(name string) ([]*Narrative, error) {
	if gr.Edges.namedNarrativeEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedNarrativeEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedNarrativeEditors(name string, edges ...*Narrative) {
	if gr.Edges.namedNarrativeEditors == nil {
		gr.Edges.namedNarrativeEditors = make(map[string][]*Narrative)
	}
	if len(edges) == 0 {
		gr.Edges.namedNarrativeEditors[name] = []*Narrative{}
	} else {
		gr.Edges.namedNarrativeEditors[name] = append(gr.Edges.namedNarrativeEditors[name], edges...)
	}
}

// NamedNarrativeBlockedGroups returns the NarrativeBlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedNarrativeBlockedGroups(name string) ([]*Narrative, error) {
	if gr.Edges.namedNarrativeBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedNarrativeBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedNarrativeBlockedGroups(name string, edges ...*Narrative) {
	if gr.Edges.namedNarrativeBlockedGroups == nil {
		gr.Edges.namedNarrativeBlockedGroups = make(map[string][]*Narrative)
	}
	if len(edges) == 0 {
		gr.Edges.namedNarrativeBlockedGroups[name] = []*Narrative{}
	} else {
		gr.Edges.namedNarrativeBlockedGroups[name] = append(gr.Edges.namedNarrativeBlockedGroups[name], edges...)
	}
}

// NamedNarrativeViewers returns the NarrativeViewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedNarrativeViewers(name string) ([]*Narrative, error) {
	if gr.Edges.namedNarrativeViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedNarrativeViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedNarrativeViewers(name string, edges ...*Narrative) {
	if gr.Edges.namedNarrativeViewers == nil {
		gr.Edges.namedNarrativeViewers = make(map[string][]*Narrative)
	}
	if len(edges) == 0 {
		gr.Edges.namedNarrativeViewers[name] = []*Narrative{}
	} else {
		gr.Edges.namedNarrativeViewers[name] = append(gr.Edges.namedNarrativeViewers[name], edges...)
	}
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedUsers(name string) ([]*User, error) {
	if gr.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedUsers(name string, edges ...*User) {
	if gr.Edges.namedUsers == nil {
		gr.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		gr.Edges.namedUsers[name] = []*User{}
	} else {
		gr.Edges.namedUsers[name] = append(gr.Edges.namedUsers[name], edges...)
	}
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedEvents(name string) ([]*Event, error) {
	if gr.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedEvents(name string, edges ...*Event) {
	if gr.Edges.namedEvents == nil {
		gr.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		gr.Edges.namedEvents[name] = []*Event{}
	} else {
		gr.Edges.namedEvents[name] = append(gr.Edges.namedEvents[name], edges...)
	}
}

// NamedIntegrations returns the Integrations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedIntegrations(name string) ([]*Integration, error) {
	if gr.Edges.namedIntegrations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedIntegrations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedIntegrations(name string, edges ...*Integration) {
	if gr.Edges.namedIntegrations == nil {
		gr.Edges.namedIntegrations = make(map[string][]*Integration)
	}
	if len(edges) == 0 {
		gr.Edges.namedIntegrations[name] = []*Integration{}
	} else {
		gr.Edges.namedIntegrations[name] = append(gr.Edges.namedIntegrations[name], edges...)
	}
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedFiles(name string) ([]*File, error) {
	if gr.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedFiles(name string, edges ...*File) {
	if gr.Edges.namedFiles == nil {
		gr.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		gr.Edges.namedFiles[name] = []*File{}
	} else {
		gr.Edges.namedFiles[name] = append(gr.Edges.namedFiles[name], edges...)
	}
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedTasks(name string) ([]*Task, error) {
	if gr.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedTasks(name string, edges ...*Task) {
	if gr.Edges.namedTasks == nil {
		gr.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		gr.Edges.namedTasks[name] = []*Task{}
	} else {
		gr.Edges.namedTasks[name] = append(gr.Edges.namedTasks[name], edges...)
	}
}

// NamedMembers returns the Members named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gr *Group) NamedMembers(name string) ([]*GroupMembership, error) {
	if gr.Edges.namedMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gr.Edges.namedMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gr *Group) appendNamedMembers(name string, edges ...*GroupMembership) {
	if gr.Edges.namedMembers == nil {
		gr.Edges.namedMembers = make(map[string][]*GroupMembership)
	}
	if len(edges) == 0 {
		gr.Edges.namedMembers[name] = []*GroupMembership{}
	} else {
		gr.Edges.namedMembers[name] = append(gr.Edges.namedMembers[name], edges...)
	}
}

// Groups is a parsable slice of Group.
type Groups []*Group
