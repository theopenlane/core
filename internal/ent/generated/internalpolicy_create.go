// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/task"
)

// InternalPolicyCreate is the builder for creating a InternalPolicy entity.
type InternalPolicyCreate struct {
	config
	mutation *InternalPolicyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ipc *InternalPolicyCreate) SetCreatedAt(t time.Time) *InternalPolicyCreate {
	ipc.mutation.SetCreatedAt(t)
	return ipc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillableCreatedAt(t *time.Time) *InternalPolicyCreate {
	if t != nil {
		ipc.SetCreatedAt(*t)
	}
	return ipc
}

// SetUpdatedAt sets the "updated_at" field.
func (ipc *InternalPolicyCreate) SetUpdatedAt(t time.Time) *InternalPolicyCreate {
	ipc.mutation.SetUpdatedAt(t)
	return ipc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillableUpdatedAt(t *time.Time) *InternalPolicyCreate {
	if t != nil {
		ipc.SetUpdatedAt(*t)
	}
	return ipc
}

// SetCreatedBy sets the "created_by" field.
func (ipc *InternalPolicyCreate) SetCreatedBy(s string) *InternalPolicyCreate {
	ipc.mutation.SetCreatedBy(s)
	return ipc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillableCreatedBy(s *string) *InternalPolicyCreate {
	if s != nil {
		ipc.SetCreatedBy(*s)
	}
	return ipc
}

// SetUpdatedBy sets the "updated_by" field.
func (ipc *InternalPolicyCreate) SetUpdatedBy(s string) *InternalPolicyCreate {
	ipc.mutation.SetUpdatedBy(s)
	return ipc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillableUpdatedBy(s *string) *InternalPolicyCreate {
	if s != nil {
		ipc.SetUpdatedBy(*s)
	}
	return ipc
}

// SetDeletedAt sets the "deleted_at" field.
func (ipc *InternalPolicyCreate) SetDeletedAt(t time.Time) *InternalPolicyCreate {
	ipc.mutation.SetDeletedAt(t)
	return ipc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillableDeletedAt(t *time.Time) *InternalPolicyCreate {
	if t != nil {
		ipc.SetDeletedAt(*t)
	}
	return ipc
}

// SetDeletedBy sets the "deleted_by" field.
func (ipc *InternalPolicyCreate) SetDeletedBy(s string) *InternalPolicyCreate {
	ipc.mutation.SetDeletedBy(s)
	return ipc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillableDeletedBy(s *string) *InternalPolicyCreate {
	if s != nil {
		ipc.SetDeletedBy(*s)
	}
	return ipc
}

// SetMappingID sets the "mapping_id" field.
func (ipc *InternalPolicyCreate) SetMappingID(s string) *InternalPolicyCreate {
	ipc.mutation.SetMappingID(s)
	return ipc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillableMappingID(s *string) *InternalPolicyCreate {
	if s != nil {
		ipc.SetMappingID(*s)
	}
	return ipc
}

// SetTags sets the "tags" field.
func (ipc *InternalPolicyCreate) SetTags(s []string) *InternalPolicyCreate {
	ipc.mutation.SetTags(s)
	return ipc
}

// SetName sets the "name" field.
func (ipc *InternalPolicyCreate) SetName(s string) *InternalPolicyCreate {
	ipc.mutation.SetName(s)
	return ipc
}

// SetDescription sets the "description" field.
func (ipc *InternalPolicyCreate) SetDescription(s string) *InternalPolicyCreate {
	ipc.mutation.SetDescription(s)
	return ipc
}

// SetStatus sets the "status" field.
func (ipc *InternalPolicyCreate) SetStatus(s string) *InternalPolicyCreate {
	ipc.mutation.SetStatus(s)
	return ipc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillableStatus(s *string) *InternalPolicyCreate {
	if s != nil {
		ipc.SetStatus(*s)
	}
	return ipc
}

// SetPolicyType sets the "policy_type" field.
func (ipc *InternalPolicyCreate) SetPolicyType(s string) *InternalPolicyCreate {
	ipc.mutation.SetPolicyType(s)
	return ipc
}

// SetNillablePolicyType sets the "policy_type" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillablePolicyType(s *string) *InternalPolicyCreate {
	if s != nil {
		ipc.SetPolicyType(*s)
	}
	return ipc
}

// SetVersion sets the "version" field.
func (ipc *InternalPolicyCreate) SetVersion(s string) *InternalPolicyCreate {
	ipc.mutation.SetVersion(s)
	return ipc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillableVersion(s *string) *InternalPolicyCreate {
	if s != nil {
		ipc.SetVersion(*s)
	}
	return ipc
}

// SetPurposeAndScope sets the "purpose_and_scope" field.
func (ipc *InternalPolicyCreate) SetPurposeAndScope(s string) *InternalPolicyCreate {
	ipc.mutation.SetPurposeAndScope(s)
	return ipc
}

// SetNillablePurposeAndScope sets the "purpose_and_scope" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillablePurposeAndScope(s *string) *InternalPolicyCreate {
	if s != nil {
		ipc.SetPurposeAndScope(*s)
	}
	return ipc
}

// SetBackground sets the "background" field.
func (ipc *InternalPolicyCreate) SetBackground(s string) *InternalPolicyCreate {
	ipc.mutation.SetBackground(s)
	return ipc
}

// SetNillableBackground sets the "background" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillableBackground(s *string) *InternalPolicyCreate {
	if s != nil {
		ipc.SetBackground(*s)
	}
	return ipc
}

// SetDetails sets the "details" field.
func (ipc *InternalPolicyCreate) SetDetails(m map[string]interface{}) *InternalPolicyCreate {
	ipc.mutation.SetDetails(m)
	return ipc
}

// SetID sets the "id" field.
func (ipc *InternalPolicyCreate) SetID(s string) *InternalPolicyCreate {
	ipc.mutation.SetID(s)
	return ipc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ipc *InternalPolicyCreate) SetNillableID(s *string) *InternalPolicyCreate {
	if s != nil {
		ipc.SetID(*s)
	}
	return ipc
}

// AddControlobjectiveIDs adds the "controlobjectives" edge to the ControlObjective entity by IDs.
func (ipc *InternalPolicyCreate) AddControlobjectiveIDs(ids ...string) *InternalPolicyCreate {
	ipc.mutation.AddControlobjectiveIDs(ids...)
	return ipc
}

// AddControlobjectives adds the "controlobjectives" edges to the ControlObjective entity.
func (ipc *InternalPolicyCreate) AddControlobjectives(c ...*ControlObjective) *InternalPolicyCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ipc.AddControlobjectiveIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (ipc *InternalPolicyCreate) AddControlIDs(ids ...string) *InternalPolicyCreate {
	ipc.mutation.AddControlIDs(ids...)
	return ipc
}

// AddControls adds the "controls" edges to the Control entity.
func (ipc *InternalPolicyCreate) AddControls(c ...*Control) *InternalPolicyCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ipc.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (ipc *InternalPolicyCreate) AddProcedureIDs(ids ...string) *InternalPolicyCreate {
	ipc.mutation.AddProcedureIDs(ids...)
	return ipc
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (ipc *InternalPolicyCreate) AddProcedures(p ...*Procedure) *InternalPolicyCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ipc.AddProcedureIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (ipc *InternalPolicyCreate) AddNarrativeIDs(ids ...string) *InternalPolicyCreate {
	ipc.mutation.AddNarrativeIDs(ids...)
	return ipc
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (ipc *InternalPolicyCreate) AddNarratives(n ...*Narrative) *InternalPolicyCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return ipc.AddNarrativeIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (ipc *InternalPolicyCreate) AddTaskIDs(ids ...string) *InternalPolicyCreate {
	ipc.mutation.AddTaskIDs(ids...)
	return ipc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (ipc *InternalPolicyCreate) AddTasks(t ...*Task) *InternalPolicyCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ipc.AddTaskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (ipc *InternalPolicyCreate) AddProgramIDs(ids ...string) *InternalPolicyCreate {
	ipc.mutation.AddProgramIDs(ids...)
	return ipc
}

// AddPrograms adds the "programs" edges to the Program entity.
func (ipc *InternalPolicyCreate) AddPrograms(p ...*Program) *InternalPolicyCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ipc.AddProgramIDs(ids...)
}

// Mutation returns the InternalPolicyMutation object of the builder.
func (ipc *InternalPolicyCreate) Mutation() *InternalPolicyMutation {
	return ipc.mutation
}

// Save creates the InternalPolicy in the database.
func (ipc *InternalPolicyCreate) Save(ctx context.Context) (*InternalPolicy, error) {
	if err := ipc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, ipc.sqlSave, ipc.mutation, ipc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ipc *InternalPolicyCreate) SaveX(ctx context.Context) *InternalPolicy {
	v, err := ipc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ipc *InternalPolicyCreate) Exec(ctx context.Context) error {
	_, err := ipc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipc *InternalPolicyCreate) ExecX(ctx context.Context) {
	if err := ipc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ipc *InternalPolicyCreate) defaults() error {
	if _, ok := ipc.mutation.CreatedAt(); !ok {
		if internalpolicy.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized internalpolicy.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := internalpolicy.DefaultCreatedAt()
		ipc.mutation.SetCreatedAt(v)
	}
	if _, ok := ipc.mutation.UpdatedAt(); !ok {
		if internalpolicy.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized internalpolicy.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := internalpolicy.DefaultUpdatedAt()
		ipc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ipc.mutation.MappingID(); !ok {
		if internalpolicy.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized internalpolicy.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := internalpolicy.DefaultMappingID()
		ipc.mutation.SetMappingID(v)
	}
	if _, ok := ipc.mutation.Tags(); !ok {
		v := internalpolicy.DefaultTags
		ipc.mutation.SetTags(v)
	}
	if _, ok := ipc.mutation.ID(); !ok {
		if internalpolicy.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized internalpolicy.DefaultID (forgotten import generated/runtime?)")
		}
		v := internalpolicy.DefaultID()
		ipc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ipc *InternalPolicyCreate) check() error {
	if _, ok := ipc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "InternalPolicy.mapping_id"`)}
	}
	if _, ok := ipc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "InternalPolicy.name"`)}
	}
	if _, ok := ipc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`generated: missing required field "InternalPolicy.description"`)}
	}
	return nil
}

func (ipc *InternalPolicyCreate) sqlSave(ctx context.Context) (*InternalPolicy, error) {
	if err := ipc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ipc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ipc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected InternalPolicy.ID type: %T", _spec.ID.Value)
		}
	}
	ipc.mutation.id = &_node.ID
	ipc.mutation.done = true
	return _node, nil
}

func (ipc *InternalPolicyCreate) createSpec() (*InternalPolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &InternalPolicy{config: ipc.config}
		_spec = sqlgraph.NewCreateSpec(internalpolicy.Table, sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString))
	)
	_spec.Schema = ipc.schemaConfig.InternalPolicy
	if id, ok := ipc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ipc.mutation.CreatedAt(); ok {
		_spec.SetField(internalpolicy.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ipc.mutation.UpdatedAt(); ok {
		_spec.SetField(internalpolicy.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ipc.mutation.CreatedBy(); ok {
		_spec.SetField(internalpolicy.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ipc.mutation.UpdatedBy(); ok {
		_spec.SetField(internalpolicy.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ipc.mutation.DeletedAt(); ok {
		_spec.SetField(internalpolicy.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ipc.mutation.DeletedBy(); ok {
		_spec.SetField(internalpolicy.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := ipc.mutation.MappingID(); ok {
		_spec.SetField(internalpolicy.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := ipc.mutation.Tags(); ok {
		_spec.SetField(internalpolicy.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := ipc.mutation.Name(); ok {
		_spec.SetField(internalpolicy.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ipc.mutation.Description(); ok {
		_spec.SetField(internalpolicy.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ipc.mutation.Status(); ok {
		_spec.SetField(internalpolicy.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ipc.mutation.PolicyType(); ok {
		_spec.SetField(internalpolicy.FieldPolicyType, field.TypeString, value)
		_node.PolicyType = value
	}
	if value, ok := ipc.mutation.Version(); ok {
		_spec.SetField(internalpolicy.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := ipc.mutation.PurposeAndScope(); ok {
		_spec.SetField(internalpolicy.FieldPurposeAndScope, field.TypeString, value)
		_node.PurposeAndScope = value
	}
	if value, ok := ipc.mutation.Background(); ok {
		_spec.SetField(internalpolicy.FieldBackground, field.TypeString, value)
		_node.Background = value
	}
	if value, ok := ipc.mutation.Details(); ok {
		_spec.SetField(internalpolicy.FieldDetails, field.TypeJSON, value)
		_node.Details = value
	}
	if nodes := ipc.mutation.ControlobjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlobjectivesTable,
			Columns: internalpolicy.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipc.schemaConfig.InternalPolicyControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ipc.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: []string{internalpolicy.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipc.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ipc.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipc.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ipc.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipc.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ipc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipc.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ipc.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = ipc.schemaConfig.ProgramPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InternalPolicyCreateBulk is the builder for creating many InternalPolicy entities in bulk.
type InternalPolicyCreateBulk struct {
	config
	err      error
	builders []*InternalPolicyCreate
}

// Save creates the InternalPolicy entities in the database.
func (ipcb *InternalPolicyCreateBulk) Save(ctx context.Context) ([]*InternalPolicy, error) {
	if ipcb.err != nil {
		return nil, ipcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ipcb.builders))
	nodes := make([]*InternalPolicy, len(ipcb.builders))
	mutators := make([]Mutator, len(ipcb.builders))
	for i := range ipcb.builders {
		func(i int, root context.Context) {
			builder := ipcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InternalPolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ipcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ipcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ipcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ipcb *InternalPolicyCreateBulk) SaveX(ctx context.Context) []*InternalPolicy {
	v, err := ipcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ipcb *InternalPolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := ipcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ipcb *InternalPolicyCreateBulk) ExecX(ctx context.Context) {
	if err := ipcb.Exec(ctx); err != nil {
		panic(err)
	}
}
