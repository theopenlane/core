// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"
)

// InternalPolicyCreate is the builder for creating a InternalPolicy entity.
type InternalPolicyCreate struct {
	config
	mutation *InternalPolicyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *InternalPolicyCreate) SetCreatedAt(v time.Time) *InternalPolicyCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableCreatedAt(v *time.Time) *InternalPolicyCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *InternalPolicyCreate) SetUpdatedAt(v time.Time) *InternalPolicyCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableUpdatedAt(v *time.Time) *InternalPolicyCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *InternalPolicyCreate) SetCreatedBy(v string) *InternalPolicyCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableCreatedBy(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *InternalPolicyCreate) SetUpdatedBy(v string) *InternalPolicyCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableUpdatedBy(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *InternalPolicyCreate) SetDeletedAt(v time.Time) *InternalPolicyCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableDeletedAt(v *time.Time) *InternalPolicyCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *InternalPolicyCreate) SetDeletedBy(v string) *InternalPolicyCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableDeletedBy(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetDisplayID sets the "display_id" field.
func (_c *InternalPolicyCreate) SetDisplayID(v string) *InternalPolicyCreate {
	_c.mutation.SetDisplayID(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *InternalPolicyCreate) SetTags(v []string) *InternalPolicyCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetRevision sets the "revision" field.
func (_c *InternalPolicyCreate) SetRevision(v string) *InternalPolicyCreate {
	_c.mutation.SetRevision(v)
	return _c
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableRevision(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetRevision(*v)
	}
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *InternalPolicyCreate) SetOwnerID(v string) *InternalPolicyCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableOwnerID(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *InternalPolicyCreate) SetName(v string) *InternalPolicyCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *InternalPolicyCreate) SetStatus(v enums.DocumentStatus) *InternalPolicyCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableStatus(v *enums.DocumentStatus) *InternalPolicyCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetPolicyType sets the "policy_type" field.
func (_c *InternalPolicyCreate) SetPolicyType(v string) *InternalPolicyCreate {
	_c.mutation.SetPolicyType(v)
	return _c
}

// SetNillablePolicyType sets the "policy_type" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillablePolicyType(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetPolicyType(*v)
	}
	return _c
}

// SetDetails sets the "details" field.
func (_c *InternalPolicyCreate) SetDetails(v string) *InternalPolicyCreate {
	_c.mutation.SetDetails(v)
	return _c
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableDetails(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetDetails(*v)
	}
	return _c
}

// SetApprovalRequired sets the "approval_required" field.
func (_c *InternalPolicyCreate) SetApprovalRequired(v bool) *InternalPolicyCreate {
	_c.mutation.SetApprovalRequired(v)
	return _c
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableApprovalRequired(v *bool) *InternalPolicyCreate {
	if v != nil {
		_c.SetApprovalRequired(*v)
	}
	return _c
}

// SetReviewDue sets the "review_due" field.
func (_c *InternalPolicyCreate) SetReviewDue(v time.Time) *InternalPolicyCreate {
	_c.mutation.SetReviewDue(v)
	return _c
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableReviewDue(v *time.Time) *InternalPolicyCreate {
	if v != nil {
		_c.SetReviewDue(*v)
	}
	return _c
}

// SetReviewFrequency sets the "review_frequency" field.
func (_c *InternalPolicyCreate) SetReviewFrequency(v enums.Frequency) *InternalPolicyCreate {
	_c.mutation.SetReviewFrequency(v)
	return _c
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableReviewFrequency(v *enums.Frequency) *InternalPolicyCreate {
	if v != nil {
		_c.SetReviewFrequency(*v)
	}
	return _c
}

// SetApproverID sets the "approver_id" field.
func (_c *InternalPolicyCreate) SetApproverID(v string) *InternalPolicyCreate {
	_c.mutation.SetApproverID(v)
	return _c
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableApproverID(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetApproverID(*v)
	}
	return _c
}

// SetDelegateID sets the "delegate_id" field.
func (_c *InternalPolicyCreate) SetDelegateID(v string) *InternalPolicyCreate {
	_c.mutation.SetDelegateID(v)
	return _c
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableDelegateID(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetDelegateID(*v)
	}
	return _c
}

// SetSummary sets the "summary" field.
func (_c *InternalPolicyCreate) SetSummary(v string) *InternalPolicyCreate {
	_c.mutation.SetSummary(v)
	return _c
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableSummary(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetSummary(*v)
	}
	return _c
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_c *InternalPolicyCreate) SetTagSuggestions(v []string) *InternalPolicyCreate {
	_c.mutation.SetTagSuggestions(v)
	return _c
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_c *InternalPolicyCreate) SetDismissedTagSuggestions(v []string) *InternalPolicyCreate {
	_c.mutation.SetDismissedTagSuggestions(v)
	return _c
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_c *InternalPolicyCreate) SetControlSuggestions(v []string) *InternalPolicyCreate {
	_c.mutation.SetControlSuggestions(v)
	return _c
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_c *InternalPolicyCreate) SetDismissedControlSuggestions(v []string) *InternalPolicyCreate {
	_c.mutation.SetDismissedControlSuggestions(v)
	return _c
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_c *InternalPolicyCreate) SetImprovementSuggestions(v []string) *InternalPolicyCreate {
	_c.mutation.SetImprovementSuggestions(v)
	return _c
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_c *InternalPolicyCreate) SetDismissedImprovementSuggestions(v []string) *InternalPolicyCreate {
	_c.mutation.SetDismissedImprovementSuggestions(v)
	return _c
}

// SetFileID sets the "file_id" field.
func (_c *InternalPolicyCreate) SetFileID(v string) *InternalPolicyCreate {
	_c.mutation.SetFileID(v)
	return _c
}

// SetNillableFileID sets the "file_id" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableFileID(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetFileID(*v)
	}
	return _c
}

// SetURL sets the "url" field.
func (_c *InternalPolicyCreate) SetURL(v string) *InternalPolicyCreate {
	_c.mutation.SetURL(v)
	return _c
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableURL(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetURL(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *InternalPolicyCreate) SetID(v string) *InternalPolicyCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *InternalPolicyCreate) SetNillableID(v *string) *InternalPolicyCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *InternalPolicyCreate) SetOwner(v *Organization) *InternalPolicyCreate {
	return _c.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_c *InternalPolicyCreate) AddBlockedGroupIDs(ids ...string) *InternalPolicyCreate {
	_c.mutation.AddBlockedGroupIDs(ids...)
	return _c
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_c *InternalPolicyCreate) AddBlockedGroups(v ...*Group) *InternalPolicyCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_c *InternalPolicyCreate) AddEditorIDs(ids ...string) *InternalPolicyCreate {
	_c.mutation.AddEditorIDs(ids...)
	return _c
}

// AddEditors adds the "editors" edges to the Group entity.
func (_c *InternalPolicyCreate) AddEditors(v ...*Group) *InternalPolicyCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEditorIDs(ids...)
}

// SetApprover sets the "approver" edge to the Group entity.
func (_c *InternalPolicyCreate) SetApprover(v *Group) *InternalPolicyCreate {
	return _c.SetApproverID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_c *InternalPolicyCreate) SetDelegate(v *Group) *InternalPolicyCreate {
	return _c.SetDelegateID(v.ID)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_c *InternalPolicyCreate) AddControlObjectiveIDs(ids ...string) *InternalPolicyCreate {
	_c.mutation.AddControlObjectiveIDs(ids...)
	return _c
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_c *InternalPolicyCreate) AddControlObjectives(v ...*ControlObjective) *InternalPolicyCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlObjectiveIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_c *InternalPolicyCreate) AddControlImplementationIDs(ids ...string) *InternalPolicyCreate {
	_c.mutation.AddControlImplementationIDs(ids...)
	return _c
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_c *InternalPolicyCreate) AddControlImplementations(v ...*ControlImplementation) *InternalPolicyCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlImplementationIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_c *InternalPolicyCreate) AddControlIDs(ids ...string) *InternalPolicyCreate {
	_c.mutation.AddControlIDs(ids...)
	return _c
}

// AddControls adds the "controls" edges to the Control entity.
func (_c *InternalPolicyCreate) AddControls(v ...*Control) *InternalPolicyCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_c *InternalPolicyCreate) AddSubcontrolIDs(ids ...string) *InternalPolicyCreate {
	_c.mutation.AddSubcontrolIDs(ids...)
	return _c
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_c *InternalPolicyCreate) AddSubcontrols(v ...*Subcontrol) *InternalPolicyCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubcontrolIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_c *InternalPolicyCreate) AddProcedureIDs(ids ...string) *InternalPolicyCreate {
	_c.mutation.AddProcedureIDs(ids...)
	return _c
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_c *InternalPolicyCreate) AddProcedures(v ...*Procedure) *InternalPolicyCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProcedureIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_c *InternalPolicyCreate) AddNarrativeIDs(ids ...string) *InternalPolicyCreate {
	_c.mutation.AddNarrativeIDs(ids...)
	return _c
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_c *InternalPolicyCreate) AddNarratives(v ...*Narrative) *InternalPolicyCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNarrativeIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_c *InternalPolicyCreate) AddTaskIDs(ids ...string) *InternalPolicyCreate {
	_c.mutation.AddTaskIDs(ids...)
	return _c
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_c *InternalPolicyCreate) AddTasks(v ...*Task) *InternalPolicyCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTaskIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_c *InternalPolicyCreate) AddRiskIDs(ids ...string) *InternalPolicyCreate {
	_c.mutation.AddRiskIDs(ids...)
	return _c
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_c *InternalPolicyCreate) AddRisks(v ...*Risk) *InternalPolicyCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRiskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_c *InternalPolicyCreate) AddProgramIDs(ids ...string) *InternalPolicyCreate {
	_c.mutation.AddProgramIDs(ids...)
	return _c
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_c *InternalPolicyCreate) AddPrograms(v ...*Program) *InternalPolicyCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramIDs(ids...)
}

// SetFile sets the "file" edge to the File entity.
func (_c *InternalPolicyCreate) SetFile(v *File) *InternalPolicyCreate {
	return _c.SetFileID(v.ID)
}

// Mutation returns the InternalPolicyMutation object of the builder.
func (_c *InternalPolicyCreate) Mutation() *InternalPolicyMutation {
	return _c.mutation
}

// Save creates the InternalPolicy in the database.
func (_c *InternalPolicyCreate) Save(ctx context.Context) (*InternalPolicy, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *InternalPolicyCreate) SaveX(ctx context.Context) *InternalPolicy {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *InternalPolicyCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *InternalPolicyCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *InternalPolicyCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if internalpolicy.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized internalpolicy.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := internalpolicy.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if internalpolicy.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized internalpolicy.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := internalpolicy.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := internalpolicy.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.Revision(); !ok {
		v := internalpolicy.DefaultRevision
		_c.mutation.SetRevision(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := internalpolicy.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.ApprovalRequired(); !ok {
		v := internalpolicy.DefaultApprovalRequired
		_c.mutation.SetApprovalRequired(v)
	}
	if _, ok := _c.mutation.ReviewDue(); !ok {
		v := internalpolicy.DefaultReviewDue
		_c.mutation.SetReviewDue(v)
	}
	if _, ok := _c.mutation.ReviewFrequency(); !ok {
		v := internalpolicy.DefaultReviewFrequency
		_c.mutation.SetReviewFrequency(v)
	}
	if _, ok := _c.mutation.TagSuggestions(); !ok {
		v := internalpolicy.DefaultTagSuggestions
		_c.mutation.SetTagSuggestions(v)
	}
	if _, ok := _c.mutation.DismissedTagSuggestions(); !ok {
		v := internalpolicy.DefaultDismissedTagSuggestions
		_c.mutation.SetDismissedTagSuggestions(v)
	}
	if _, ok := _c.mutation.ControlSuggestions(); !ok {
		v := internalpolicy.DefaultControlSuggestions
		_c.mutation.SetControlSuggestions(v)
	}
	if _, ok := _c.mutation.DismissedControlSuggestions(); !ok {
		v := internalpolicy.DefaultDismissedControlSuggestions
		_c.mutation.SetDismissedControlSuggestions(v)
	}
	if _, ok := _c.mutation.ImprovementSuggestions(); !ok {
		v := internalpolicy.DefaultImprovementSuggestions
		_c.mutation.SetImprovementSuggestions(v)
	}
	if _, ok := _c.mutation.DismissedImprovementSuggestions(); !ok {
		v := internalpolicy.DefaultDismissedImprovementSuggestions
		_c.mutation.SetDismissedImprovementSuggestions(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if internalpolicy.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized internalpolicy.DefaultID (forgotten import generated/runtime?)")
		}
		v := internalpolicy.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *InternalPolicyCreate) check() error {
	if _, ok := _c.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "InternalPolicy.display_id"`)}
	}
	if v, ok := _c.mutation.DisplayID(); ok {
		if err := internalpolicy.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.display_id": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Revision(); ok {
		if err := internalpolicy.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.revision": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "InternalPolicy.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := internalpolicy.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := internalpolicy.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ReviewFrequency(); ok {
		if err := internalpolicy.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "InternalPolicy.review_frequency": %w`, err)}
		}
	}
	return nil
}

func (_c *InternalPolicyCreate) sqlSave(ctx context.Context) (*InternalPolicy, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected InternalPolicy.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *InternalPolicyCreate) createSpec() (*InternalPolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &InternalPolicy{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(internalpolicy.Table, sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.InternalPolicy
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(internalpolicy.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(internalpolicy.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(internalpolicy.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(internalpolicy.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(internalpolicy.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(internalpolicy.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.DisplayID(); ok {
		_spec.SetField(internalpolicy.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(internalpolicy.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Revision(); ok {
		_spec.SetField(internalpolicy.FieldRevision, field.TypeString, value)
		_node.Revision = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(internalpolicy.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(internalpolicy.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.PolicyType(); ok {
		_spec.SetField(internalpolicy.FieldPolicyType, field.TypeString, value)
		_node.PolicyType = value
	}
	if value, ok := _c.mutation.Details(); ok {
		_spec.SetField(internalpolicy.FieldDetails, field.TypeString, value)
		_node.Details = value
	}
	if value, ok := _c.mutation.ApprovalRequired(); ok {
		_spec.SetField(internalpolicy.FieldApprovalRequired, field.TypeBool, value)
		_node.ApprovalRequired = value
	}
	if value, ok := _c.mutation.ReviewDue(); ok {
		_spec.SetField(internalpolicy.FieldReviewDue, field.TypeTime, value)
		_node.ReviewDue = value
	}
	if value, ok := _c.mutation.ReviewFrequency(); ok {
		_spec.SetField(internalpolicy.FieldReviewFrequency, field.TypeEnum, value)
		_node.ReviewFrequency = value
	}
	if value, ok := _c.mutation.Summary(); ok {
		_spec.SetField(internalpolicy.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := _c.mutation.TagSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldTagSuggestions, field.TypeJSON, value)
		_node.TagSuggestions = value
	}
	if value, ok := _c.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldDismissedTagSuggestions, field.TypeJSON, value)
		_node.DismissedTagSuggestions = value
	}
	if value, ok := _c.mutation.ControlSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldControlSuggestions, field.TypeJSON, value)
		_node.ControlSuggestions = value
	}
	if value, ok := _c.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldDismissedControlSuggestions, field.TypeJSON, value)
		_node.DismissedControlSuggestions = value
	}
	if value, ok := _c.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldImprovementSuggestions, field.TypeJSON, value)
		_node.ImprovementSuggestions = value
	}
	if value, ok := _c.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(internalpolicy.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
		_node.DismissedImprovementSuggestions = value
	}
	if value, ok := _c.mutation.URL(); ok {
		_spec.SetField(internalpolicy.FieldURL, field.TypeString, value)
		_node.URL = &value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   internalpolicy.OwnerTable,
			Columns: []string{internalpolicy.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.BlockedGroupsTable,
			Columns: internalpolicy.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicyBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.EditorsTable,
			Columns: internalpolicy.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicyEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.ApproverTable,
			Columns: []string{internalpolicy.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApproverID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.DelegateTable,
			Columns: []string{internalpolicy.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DelegateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlObjectivesTable,
			Columns: internalpolicy.ControlObjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicyControlObjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   internalpolicy.ControlImplementationsTable,
			Columns: []string{internalpolicy.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ControlsTable,
			Columns: internalpolicy.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicyControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.SubcontrolsTable,
			Columns: internalpolicy.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicySubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.ProceduresTable,
			Columns: internalpolicy.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.NarrativesTable,
			Columns: internalpolicy.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicyNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.TasksTable,
			Columns: internalpolicy.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicyTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   internalpolicy.RisksTable,
			Columns: internalpolicy.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicyRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   internalpolicy.ProgramsTable,
			Columns: internalpolicy.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ProgramInternalPolicies
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   internalpolicy.FileTable,
			Columns: []string{internalpolicy.FileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.FileID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InternalPolicyCreateBulk is the builder for creating many InternalPolicy entities in bulk.
type InternalPolicyCreateBulk struct {
	config
	err      error
	builders []*InternalPolicyCreate
}

// Save creates the InternalPolicy entities in the database.
func (_c *InternalPolicyCreateBulk) Save(ctx context.Context) ([]*InternalPolicy, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*InternalPolicy, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InternalPolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *InternalPolicyCreateBulk) SaveX(ctx context.Context) []*InternalPolicy {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *InternalPolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *InternalPolicyCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
