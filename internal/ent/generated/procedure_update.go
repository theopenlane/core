// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ProcedureUpdate is the builder for updating Procedure entities.
type ProcedureUpdate struct {
	config
	hooks     []Hook
	mutation  *ProcedureMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProcedureUpdate builder.
func (_u *ProcedureUpdate) Where(ps ...predicate.Procedure) *ProcedureUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProcedureUpdate) SetUpdatedAt(v time.Time) *ProcedureUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ProcedureUpdate) ClearUpdatedAt() *ProcedureUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ProcedureUpdate) SetUpdatedBy(v string) *ProcedureUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableUpdatedBy(v *string) *ProcedureUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ProcedureUpdate) ClearUpdatedBy() *ProcedureUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ProcedureUpdate) SetDeletedAt(v time.Time) *ProcedureUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableDeletedAt(v *time.Time) *ProcedureUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ProcedureUpdate) ClearDeletedAt() *ProcedureUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ProcedureUpdate) SetDeletedBy(v string) *ProcedureUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableDeletedBy(v *string) *ProcedureUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ProcedureUpdate) ClearDeletedBy() *ProcedureUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ProcedureUpdate) SetTags(v []string) *ProcedureUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ProcedureUpdate) AppendTags(v []string) *ProcedureUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ProcedureUpdate) ClearTags() *ProcedureUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *ProcedureUpdate) SetRevision(v string) *ProcedureUpdate {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableRevision(v *string) *ProcedureUpdate {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *ProcedureUpdate) ClearRevision() *ProcedureUpdate {
	_u.mutation.ClearRevision()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ProcedureUpdate) SetOwnerID(v string) *ProcedureUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableOwnerID(v *string) *ProcedureUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ProcedureUpdate) ClearOwnerID() *ProcedureUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *ProcedureUpdate) SetName(v string) *ProcedureUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableName(v *string) *ProcedureUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *ProcedureUpdate) SetStatus(v enums.DocumentStatus) *ProcedureUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableStatus(v *enums.DocumentStatus) *ProcedureUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ProcedureUpdate) ClearStatus() *ProcedureUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetProcedureType sets the "procedure_type" field.
func (_u *ProcedureUpdate) SetProcedureType(v string) *ProcedureUpdate {
	_u.mutation.SetProcedureType(v)
	return _u
}

// SetNillableProcedureType sets the "procedure_type" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableProcedureType(v *string) *ProcedureUpdate {
	if v != nil {
		_u.SetProcedureType(*v)
	}
	return _u
}

// ClearProcedureType clears the value of the "procedure_type" field.
func (_u *ProcedureUpdate) ClearProcedureType() *ProcedureUpdate {
	_u.mutation.ClearProcedureType()
	return _u
}

// SetDetails sets the "details" field.
func (_u *ProcedureUpdate) SetDetails(v string) *ProcedureUpdate {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableDetails(v *string) *ProcedureUpdate {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *ProcedureUpdate) ClearDetails() *ProcedureUpdate {
	_u.mutation.ClearDetails()
	return _u
}

// SetApprovalRequired sets the "approval_required" field.
func (_u *ProcedureUpdate) SetApprovalRequired(v bool) *ProcedureUpdate {
	_u.mutation.SetApprovalRequired(v)
	return _u
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableApprovalRequired(v *bool) *ProcedureUpdate {
	if v != nil {
		_u.SetApprovalRequired(*v)
	}
	return _u
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (_u *ProcedureUpdate) ClearApprovalRequired() *ProcedureUpdate {
	_u.mutation.ClearApprovalRequired()
	return _u
}

// SetReviewDue sets the "review_due" field.
func (_u *ProcedureUpdate) SetReviewDue(v time.Time) *ProcedureUpdate {
	_u.mutation.SetReviewDue(v)
	return _u
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableReviewDue(v *time.Time) *ProcedureUpdate {
	if v != nil {
		_u.SetReviewDue(*v)
	}
	return _u
}

// ClearReviewDue clears the value of the "review_due" field.
func (_u *ProcedureUpdate) ClearReviewDue() *ProcedureUpdate {
	_u.mutation.ClearReviewDue()
	return _u
}

// SetReviewFrequency sets the "review_frequency" field.
func (_u *ProcedureUpdate) SetReviewFrequency(v enums.Frequency) *ProcedureUpdate {
	_u.mutation.SetReviewFrequency(v)
	return _u
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableReviewFrequency(v *enums.Frequency) *ProcedureUpdate {
	if v != nil {
		_u.SetReviewFrequency(*v)
	}
	return _u
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (_u *ProcedureUpdate) ClearReviewFrequency() *ProcedureUpdate {
	_u.mutation.ClearReviewFrequency()
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *ProcedureUpdate) SetApproverID(v string) *ProcedureUpdate {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableApproverID(v *string) *ProcedureUpdate {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *ProcedureUpdate) ClearApproverID() *ProcedureUpdate {
	_u.mutation.ClearApproverID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *ProcedureUpdate) SetDelegateID(v string) *ProcedureUpdate {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableDelegateID(v *string) *ProcedureUpdate {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *ProcedureUpdate) ClearDelegateID() *ProcedureUpdate {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetSummary sets the "summary" field.
func (_u *ProcedureUpdate) SetSummary(v string) *ProcedureUpdate {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *ProcedureUpdate) SetNillableSummary(v *string) *ProcedureUpdate {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *ProcedureUpdate) ClearSummary() *ProcedureUpdate {
	_u.mutation.ClearSummary()
	return _u
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_u *ProcedureUpdate) SetTagSuggestions(v []string) *ProcedureUpdate {
	_u.mutation.SetTagSuggestions(v)
	return _u
}

// AppendTagSuggestions appends value to the "tag_suggestions" field.
func (_u *ProcedureUpdate) AppendTagSuggestions(v []string) *ProcedureUpdate {
	_u.mutation.AppendTagSuggestions(v)
	return _u
}

// ClearTagSuggestions clears the value of the "tag_suggestions" field.
func (_u *ProcedureUpdate) ClearTagSuggestions() *ProcedureUpdate {
	_u.mutation.ClearTagSuggestions()
	return _u
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_u *ProcedureUpdate) SetDismissedTagSuggestions(v []string) *ProcedureUpdate {
	_u.mutation.SetDismissedTagSuggestions(v)
	return _u
}

// AppendDismissedTagSuggestions appends value to the "dismissed_tag_suggestions" field.
func (_u *ProcedureUpdate) AppendDismissedTagSuggestions(v []string) *ProcedureUpdate {
	_u.mutation.AppendDismissedTagSuggestions(v)
	return _u
}

// ClearDismissedTagSuggestions clears the value of the "dismissed_tag_suggestions" field.
func (_u *ProcedureUpdate) ClearDismissedTagSuggestions() *ProcedureUpdate {
	_u.mutation.ClearDismissedTagSuggestions()
	return _u
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_u *ProcedureUpdate) SetControlSuggestions(v []string) *ProcedureUpdate {
	_u.mutation.SetControlSuggestions(v)
	return _u
}

// AppendControlSuggestions appends value to the "control_suggestions" field.
func (_u *ProcedureUpdate) AppendControlSuggestions(v []string) *ProcedureUpdate {
	_u.mutation.AppendControlSuggestions(v)
	return _u
}

// ClearControlSuggestions clears the value of the "control_suggestions" field.
func (_u *ProcedureUpdate) ClearControlSuggestions() *ProcedureUpdate {
	_u.mutation.ClearControlSuggestions()
	return _u
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_u *ProcedureUpdate) SetDismissedControlSuggestions(v []string) *ProcedureUpdate {
	_u.mutation.SetDismissedControlSuggestions(v)
	return _u
}

// AppendDismissedControlSuggestions appends value to the "dismissed_control_suggestions" field.
func (_u *ProcedureUpdate) AppendDismissedControlSuggestions(v []string) *ProcedureUpdate {
	_u.mutation.AppendDismissedControlSuggestions(v)
	return _u
}

// ClearDismissedControlSuggestions clears the value of the "dismissed_control_suggestions" field.
func (_u *ProcedureUpdate) ClearDismissedControlSuggestions() *ProcedureUpdate {
	_u.mutation.ClearDismissedControlSuggestions()
	return _u
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_u *ProcedureUpdate) SetImprovementSuggestions(v []string) *ProcedureUpdate {
	_u.mutation.SetImprovementSuggestions(v)
	return _u
}

// AppendImprovementSuggestions appends value to the "improvement_suggestions" field.
func (_u *ProcedureUpdate) AppendImprovementSuggestions(v []string) *ProcedureUpdate {
	_u.mutation.AppendImprovementSuggestions(v)
	return _u
}

// ClearImprovementSuggestions clears the value of the "improvement_suggestions" field.
func (_u *ProcedureUpdate) ClearImprovementSuggestions() *ProcedureUpdate {
	_u.mutation.ClearImprovementSuggestions()
	return _u
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_u *ProcedureUpdate) SetDismissedImprovementSuggestions(v []string) *ProcedureUpdate {
	_u.mutation.SetDismissedImprovementSuggestions(v)
	return _u
}

// AppendDismissedImprovementSuggestions appends value to the "dismissed_improvement_suggestions" field.
func (_u *ProcedureUpdate) AppendDismissedImprovementSuggestions(v []string) *ProcedureUpdate {
	_u.mutation.AppendDismissedImprovementSuggestions(v)
	return _u
}

// ClearDismissedImprovementSuggestions clears the value of the "dismissed_improvement_suggestions" field.
func (_u *ProcedureUpdate) ClearDismissedImprovementSuggestions() *ProcedureUpdate {
	_u.mutation.ClearDismissedImprovementSuggestions()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *ProcedureUpdate) SetOwner(v *Organization) *ProcedureUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *ProcedureUpdate) AddBlockedGroupIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *ProcedureUpdate) AddBlockedGroups(v ...*Group) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *ProcedureUpdate) AddEditorIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *ProcedureUpdate) AddEditors(v ...*Group) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// SetApprover sets the "approver" edge to the Group entity.
func (_u *ProcedureUpdate) SetApprover(v *Group) *ProcedureUpdate {
	return _u.SetApproverID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_u *ProcedureUpdate) SetDelegate(v *Group) *ProcedureUpdate {
	return _u.SetDelegateID(v.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *ProcedureUpdate) AddControlIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *ProcedureUpdate) AddControls(v ...*Control) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *ProcedureUpdate) AddSubcontrolIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *ProcedureUpdate) AddSubcontrols(v ...*Subcontrol) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_u *ProcedureUpdate) AddInternalPolicyIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.AddInternalPolicyIDs(ids...)
	return _u
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_u *ProcedureUpdate) AddInternalPolicies(v ...*InternalPolicy) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *ProcedureUpdate) AddProgramIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *ProcedureUpdate) AddPrograms(v ...*Program) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_u *ProcedureUpdate) AddNarrativeIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.AddNarrativeIDs(ids...)
	return _u
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_u *ProcedureUpdate) AddNarratives(v ...*Narrative) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *ProcedureUpdate) AddRiskIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *ProcedureUpdate) AddRisks(v ...*Risk) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *ProcedureUpdate) AddTaskIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *ProcedureUpdate) AddTasks(v ...*Task) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// Mutation returns the ProcedureMutation object of the builder.
func (_u *ProcedureUpdate) Mutation() *ProcedureMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *ProcedureUpdate) ClearOwner() *ProcedureUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *ProcedureUpdate) ClearBlockedGroups() *ProcedureUpdate {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *ProcedureUpdate) RemoveBlockedGroupIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *ProcedureUpdate) RemoveBlockedGroups(v ...*Group) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *ProcedureUpdate) ClearEditors() *ProcedureUpdate {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *ProcedureUpdate) RemoveEditorIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *ProcedureUpdate) RemoveEditors(v ...*Group) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearApprover clears the "approver" edge to the Group entity.
func (_u *ProcedureUpdate) ClearApprover() *ProcedureUpdate {
	_u.mutation.ClearApprover()
	return _u
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (_u *ProcedureUpdate) ClearDelegate() *ProcedureUpdate {
	_u.mutation.ClearDelegate()
	return _u
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *ProcedureUpdate) ClearControls() *ProcedureUpdate {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *ProcedureUpdate) RemoveControlIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *ProcedureUpdate) RemoveControls(v ...*Control) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *ProcedureUpdate) ClearSubcontrols() *ProcedureUpdate {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *ProcedureUpdate) RemoveSubcontrolIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *ProcedureUpdate) RemoveSubcontrols(v ...*Subcontrol) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (_u *ProcedureUpdate) ClearInternalPolicies() *ProcedureUpdate {
	_u.mutation.ClearInternalPolicies()
	return _u
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (_u *ProcedureUpdate) RemoveInternalPolicyIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.RemoveInternalPolicyIDs(ids...)
	return _u
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (_u *ProcedureUpdate) RemoveInternalPolicies(v ...*InternalPolicy) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *ProcedureUpdate) ClearPrograms() *ProcedureUpdate {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *ProcedureUpdate) RemoveProgramIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *ProcedureUpdate) RemovePrograms(v ...*Program) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (_u *ProcedureUpdate) ClearNarratives() *ProcedureUpdate {
	_u.mutation.ClearNarratives()
	return _u
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (_u *ProcedureUpdate) RemoveNarrativeIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.RemoveNarrativeIDs(ids...)
	return _u
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (_u *ProcedureUpdate) RemoveNarratives(v ...*Narrative) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *ProcedureUpdate) ClearRisks() *ProcedureUpdate {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *ProcedureUpdate) RemoveRiskIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *ProcedureUpdate) RemoveRisks(v ...*Risk) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *ProcedureUpdate) ClearTasks() *ProcedureUpdate {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *ProcedureUpdate) RemoveTaskIDs(ids ...string) *ProcedureUpdate {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *ProcedureUpdate) RemoveTasks(v ...*Task) *ProcedureUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProcedureUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProcedureUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProcedureUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProcedureUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProcedureUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if procedure.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized procedure.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := procedure.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProcedureUpdate) check() error {
	if v, ok := _u.mutation.Revision(); ok {
		if err := procedure.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "Procedure.revision": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := procedure.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Procedure.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := procedure.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Procedure.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewFrequency(); ok {
		if err := procedure.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "Procedure.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ProcedureUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProcedureUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ProcedureUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(procedure.Table, procedure.Columns, sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(procedure.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(procedure.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(procedure.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(procedure.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(procedure.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(procedure.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(procedure.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(procedure.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(procedure.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(procedure.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(procedure.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(procedure.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(procedure.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(procedure.FieldRevision, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(procedure.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(procedure.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(procedure.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.ProcedureType(); ok {
		_spec.SetField(procedure.FieldProcedureType, field.TypeString, value)
	}
	if _u.mutation.ProcedureTypeCleared() {
		_spec.ClearField(procedure.FieldProcedureType, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(procedure.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(procedure.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovalRequired(); ok {
		_spec.SetField(procedure.FieldApprovalRequired, field.TypeBool, value)
	}
	if _u.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(procedure.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := _u.mutation.ReviewDue(); ok {
		_spec.SetField(procedure.FieldReviewDue, field.TypeTime, value)
	}
	if _u.mutation.ReviewDueCleared() {
		_spec.ClearField(procedure.FieldReviewDue, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewFrequency(); ok {
		_spec.SetField(procedure.FieldReviewFrequency, field.TypeEnum, value)
	}
	if _u.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(procedure.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(procedure.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(procedure.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.TagSuggestions(); ok {
		_spec.SetField(procedure.FieldTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldTagSuggestions, value)
		})
	}
	if _u.mutation.TagSuggestionsCleared() {
		_spec.ClearField(procedure.FieldTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(procedure.FieldDismissedTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldDismissedTagSuggestions, value)
		})
	}
	if _u.mutation.DismissedTagSuggestionsCleared() {
		_spec.ClearField(procedure.FieldDismissedTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlSuggestions(); ok {
		_spec.SetField(procedure.FieldControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldControlSuggestions, value)
		})
	}
	if _u.mutation.ControlSuggestionsCleared() {
		_spec.ClearField(procedure.FieldControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(procedure.FieldDismissedControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldDismissedControlSuggestions, value)
		})
	}
	if _u.mutation.DismissedControlSuggestionsCleared() {
		_spec.ClearField(procedure.FieldDismissedControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(procedure.FieldImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldImprovementSuggestions, value)
		})
	}
	if _u.mutation.ImprovementSuggestionsCleared() {
		_spec.ClearField(procedure.FieldImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(procedure.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldDismissedImprovementSuggestions, value)
		})
	}
	if _u.mutation.DismissedImprovementSuggestionsCleared() {
		_spec.ClearField(procedure.FieldDismissedImprovementSuggestions, field.TypeJSON)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.OwnerTable,
			Columns: []string{procedure.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.OwnerTable,
			Columns: []string{procedure.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.ApproverTable,
			Columns: []string{procedure.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.ApproverTable,
			Columns: []string{procedure.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.DelegateTable,
			Columns: []string{procedure.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.DelegateTable,
			Columns: []string{procedure.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.SubcontrolsTable,
			Columns: procedure.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.SubcontrolsTable,
			Columns: procedure.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.SubcontrolsTable,
			Columns: procedure.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !_u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: procedure.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !_u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: procedure.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: procedure.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Procedure
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procedure.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProcedureUpdateOne is the builder for updating a single Procedure entity.
type ProcedureUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProcedureMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProcedureUpdateOne) SetUpdatedAt(v time.Time) *ProcedureUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *ProcedureUpdateOne) ClearUpdatedAt() *ProcedureUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ProcedureUpdateOne) SetUpdatedBy(v string) *ProcedureUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableUpdatedBy(v *string) *ProcedureUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *ProcedureUpdateOne) ClearUpdatedBy() *ProcedureUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *ProcedureUpdateOne) SetDeletedAt(v time.Time) *ProcedureUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableDeletedAt(v *time.Time) *ProcedureUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *ProcedureUpdateOne) ClearDeletedAt() *ProcedureUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *ProcedureUpdateOne) SetDeletedBy(v string) *ProcedureUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableDeletedBy(v *string) *ProcedureUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *ProcedureUpdateOne) ClearDeletedBy() *ProcedureUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *ProcedureUpdateOne) SetTags(v []string) *ProcedureUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *ProcedureUpdateOne) AppendTags(v []string) *ProcedureUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *ProcedureUpdateOne) ClearTags() *ProcedureUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetRevision sets the "revision" field.
func (_u *ProcedureUpdateOne) SetRevision(v string) *ProcedureUpdateOne {
	_u.mutation.SetRevision(v)
	return _u
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableRevision(v *string) *ProcedureUpdateOne {
	if v != nil {
		_u.SetRevision(*v)
	}
	return _u
}

// ClearRevision clears the value of the "revision" field.
func (_u *ProcedureUpdateOne) ClearRevision() *ProcedureUpdateOne {
	_u.mutation.ClearRevision()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *ProcedureUpdateOne) SetOwnerID(v string) *ProcedureUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableOwnerID(v *string) *ProcedureUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *ProcedureUpdateOne) ClearOwnerID() *ProcedureUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetName sets the "name" field.
func (_u *ProcedureUpdateOne) SetName(v string) *ProcedureUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableName(v *string) *ProcedureUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *ProcedureUpdateOne) SetStatus(v enums.DocumentStatus) *ProcedureUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableStatus(v *enums.DocumentStatus) *ProcedureUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *ProcedureUpdateOne) ClearStatus() *ProcedureUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetProcedureType sets the "procedure_type" field.
func (_u *ProcedureUpdateOne) SetProcedureType(v string) *ProcedureUpdateOne {
	_u.mutation.SetProcedureType(v)
	return _u
}

// SetNillableProcedureType sets the "procedure_type" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableProcedureType(v *string) *ProcedureUpdateOne {
	if v != nil {
		_u.SetProcedureType(*v)
	}
	return _u
}

// ClearProcedureType clears the value of the "procedure_type" field.
func (_u *ProcedureUpdateOne) ClearProcedureType() *ProcedureUpdateOne {
	_u.mutation.ClearProcedureType()
	return _u
}

// SetDetails sets the "details" field.
func (_u *ProcedureUpdateOne) SetDetails(v string) *ProcedureUpdateOne {
	_u.mutation.SetDetails(v)
	return _u
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableDetails(v *string) *ProcedureUpdateOne {
	if v != nil {
		_u.SetDetails(*v)
	}
	return _u
}

// ClearDetails clears the value of the "details" field.
func (_u *ProcedureUpdateOne) ClearDetails() *ProcedureUpdateOne {
	_u.mutation.ClearDetails()
	return _u
}

// SetApprovalRequired sets the "approval_required" field.
func (_u *ProcedureUpdateOne) SetApprovalRequired(v bool) *ProcedureUpdateOne {
	_u.mutation.SetApprovalRequired(v)
	return _u
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableApprovalRequired(v *bool) *ProcedureUpdateOne {
	if v != nil {
		_u.SetApprovalRequired(*v)
	}
	return _u
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (_u *ProcedureUpdateOne) ClearApprovalRequired() *ProcedureUpdateOne {
	_u.mutation.ClearApprovalRequired()
	return _u
}

// SetReviewDue sets the "review_due" field.
func (_u *ProcedureUpdateOne) SetReviewDue(v time.Time) *ProcedureUpdateOne {
	_u.mutation.SetReviewDue(v)
	return _u
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableReviewDue(v *time.Time) *ProcedureUpdateOne {
	if v != nil {
		_u.SetReviewDue(*v)
	}
	return _u
}

// ClearReviewDue clears the value of the "review_due" field.
func (_u *ProcedureUpdateOne) ClearReviewDue() *ProcedureUpdateOne {
	_u.mutation.ClearReviewDue()
	return _u
}

// SetReviewFrequency sets the "review_frequency" field.
func (_u *ProcedureUpdateOne) SetReviewFrequency(v enums.Frequency) *ProcedureUpdateOne {
	_u.mutation.SetReviewFrequency(v)
	return _u
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableReviewFrequency(v *enums.Frequency) *ProcedureUpdateOne {
	if v != nil {
		_u.SetReviewFrequency(*v)
	}
	return _u
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (_u *ProcedureUpdateOne) ClearReviewFrequency() *ProcedureUpdateOne {
	_u.mutation.ClearReviewFrequency()
	return _u
}

// SetApproverID sets the "approver_id" field.
func (_u *ProcedureUpdateOne) SetApproverID(v string) *ProcedureUpdateOne {
	_u.mutation.SetApproverID(v)
	return _u
}

// SetNillableApproverID sets the "approver_id" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableApproverID(v *string) *ProcedureUpdateOne {
	if v != nil {
		_u.SetApproverID(*v)
	}
	return _u
}

// ClearApproverID clears the value of the "approver_id" field.
func (_u *ProcedureUpdateOne) ClearApproverID() *ProcedureUpdateOne {
	_u.mutation.ClearApproverID()
	return _u
}

// SetDelegateID sets the "delegate_id" field.
func (_u *ProcedureUpdateOne) SetDelegateID(v string) *ProcedureUpdateOne {
	_u.mutation.SetDelegateID(v)
	return _u
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableDelegateID(v *string) *ProcedureUpdateOne {
	if v != nil {
		_u.SetDelegateID(*v)
	}
	return _u
}

// ClearDelegateID clears the value of the "delegate_id" field.
func (_u *ProcedureUpdateOne) ClearDelegateID() *ProcedureUpdateOne {
	_u.mutation.ClearDelegateID()
	return _u
}

// SetSummary sets the "summary" field.
func (_u *ProcedureUpdateOne) SetSummary(v string) *ProcedureUpdateOne {
	_u.mutation.SetSummary(v)
	return _u
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (_u *ProcedureUpdateOne) SetNillableSummary(v *string) *ProcedureUpdateOne {
	if v != nil {
		_u.SetSummary(*v)
	}
	return _u
}

// ClearSummary clears the value of the "summary" field.
func (_u *ProcedureUpdateOne) ClearSummary() *ProcedureUpdateOne {
	_u.mutation.ClearSummary()
	return _u
}

// SetTagSuggestions sets the "tag_suggestions" field.
func (_u *ProcedureUpdateOne) SetTagSuggestions(v []string) *ProcedureUpdateOne {
	_u.mutation.SetTagSuggestions(v)
	return _u
}

// AppendTagSuggestions appends value to the "tag_suggestions" field.
func (_u *ProcedureUpdateOne) AppendTagSuggestions(v []string) *ProcedureUpdateOne {
	_u.mutation.AppendTagSuggestions(v)
	return _u
}

// ClearTagSuggestions clears the value of the "tag_suggestions" field.
func (_u *ProcedureUpdateOne) ClearTagSuggestions() *ProcedureUpdateOne {
	_u.mutation.ClearTagSuggestions()
	return _u
}

// SetDismissedTagSuggestions sets the "dismissed_tag_suggestions" field.
func (_u *ProcedureUpdateOne) SetDismissedTagSuggestions(v []string) *ProcedureUpdateOne {
	_u.mutation.SetDismissedTagSuggestions(v)
	return _u
}

// AppendDismissedTagSuggestions appends value to the "dismissed_tag_suggestions" field.
func (_u *ProcedureUpdateOne) AppendDismissedTagSuggestions(v []string) *ProcedureUpdateOne {
	_u.mutation.AppendDismissedTagSuggestions(v)
	return _u
}

// ClearDismissedTagSuggestions clears the value of the "dismissed_tag_suggestions" field.
func (_u *ProcedureUpdateOne) ClearDismissedTagSuggestions() *ProcedureUpdateOne {
	_u.mutation.ClearDismissedTagSuggestions()
	return _u
}

// SetControlSuggestions sets the "control_suggestions" field.
func (_u *ProcedureUpdateOne) SetControlSuggestions(v []string) *ProcedureUpdateOne {
	_u.mutation.SetControlSuggestions(v)
	return _u
}

// AppendControlSuggestions appends value to the "control_suggestions" field.
func (_u *ProcedureUpdateOne) AppendControlSuggestions(v []string) *ProcedureUpdateOne {
	_u.mutation.AppendControlSuggestions(v)
	return _u
}

// ClearControlSuggestions clears the value of the "control_suggestions" field.
func (_u *ProcedureUpdateOne) ClearControlSuggestions() *ProcedureUpdateOne {
	_u.mutation.ClearControlSuggestions()
	return _u
}

// SetDismissedControlSuggestions sets the "dismissed_control_suggestions" field.
func (_u *ProcedureUpdateOne) SetDismissedControlSuggestions(v []string) *ProcedureUpdateOne {
	_u.mutation.SetDismissedControlSuggestions(v)
	return _u
}

// AppendDismissedControlSuggestions appends value to the "dismissed_control_suggestions" field.
func (_u *ProcedureUpdateOne) AppendDismissedControlSuggestions(v []string) *ProcedureUpdateOne {
	_u.mutation.AppendDismissedControlSuggestions(v)
	return _u
}

// ClearDismissedControlSuggestions clears the value of the "dismissed_control_suggestions" field.
func (_u *ProcedureUpdateOne) ClearDismissedControlSuggestions() *ProcedureUpdateOne {
	_u.mutation.ClearDismissedControlSuggestions()
	return _u
}

// SetImprovementSuggestions sets the "improvement_suggestions" field.
func (_u *ProcedureUpdateOne) SetImprovementSuggestions(v []string) *ProcedureUpdateOne {
	_u.mutation.SetImprovementSuggestions(v)
	return _u
}

// AppendImprovementSuggestions appends value to the "improvement_suggestions" field.
func (_u *ProcedureUpdateOne) AppendImprovementSuggestions(v []string) *ProcedureUpdateOne {
	_u.mutation.AppendImprovementSuggestions(v)
	return _u
}

// ClearImprovementSuggestions clears the value of the "improvement_suggestions" field.
func (_u *ProcedureUpdateOne) ClearImprovementSuggestions() *ProcedureUpdateOne {
	_u.mutation.ClearImprovementSuggestions()
	return _u
}

// SetDismissedImprovementSuggestions sets the "dismissed_improvement_suggestions" field.
func (_u *ProcedureUpdateOne) SetDismissedImprovementSuggestions(v []string) *ProcedureUpdateOne {
	_u.mutation.SetDismissedImprovementSuggestions(v)
	return _u
}

// AppendDismissedImprovementSuggestions appends value to the "dismissed_improvement_suggestions" field.
func (_u *ProcedureUpdateOne) AppendDismissedImprovementSuggestions(v []string) *ProcedureUpdateOne {
	_u.mutation.AppendDismissedImprovementSuggestions(v)
	return _u
}

// ClearDismissedImprovementSuggestions clears the value of the "dismissed_improvement_suggestions" field.
func (_u *ProcedureUpdateOne) ClearDismissedImprovementSuggestions() *ProcedureUpdateOne {
	_u.mutation.ClearDismissedImprovementSuggestions()
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *ProcedureUpdateOne) SetOwner(v *Organization) *ProcedureUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_u *ProcedureUpdateOne) AddBlockedGroupIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.AddBlockedGroupIDs(ids...)
	return _u
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_u *ProcedureUpdateOne) AddBlockedGroups(v ...*Group) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_u *ProcedureUpdateOne) AddEditorIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.AddEditorIDs(ids...)
	return _u
}

// AddEditors adds the "editors" edges to the Group entity.
func (_u *ProcedureUpdateOne) AddEditors(v ...*Group) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEditorIDs(ids...)
}

// SetApprover sets the "approver" edge to the Group entity.
func (_u *ProcedureUpdateOne) SetApprover(v *Group) *ProcedureUpdateOne {
	return _u.SetApproverID(v.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (_u *ProcedureUpdateOne) SetDelegate(v *Group) *ProcedureUpdateOne {
	return _u.SetDelegateID(v.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_u *ProcedureUpdateOne) AddControlIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.AddControlIDs(ids...)
	return _u
}

// AddControls adds the "controls" edges to the Control entity.
func (_u *ProcedureUpdateOne) AddControls(v ...*Control) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_u *ProcedureUpdateOne) AddSubcontrolIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.AddSubcontrolIDs(ids...)
	return _u
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_u *ProcedureUpdateOne) AddSubcontrols(v ...*Subcontrol) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSubcontrolIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_u *ProcedureUpdateOne) AddInternalPolicyIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.AddInternalPolicyIDs(ids...)
	return _u
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_u *ProcedureUpdateOne) AddInternalPolicies(v ...*InternalPolicy) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInternalPolicyIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_u *ProcedureUpdateOne) AddProgramIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.AddProgramIDs(ids...)
	return _u
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_u *ProcedureUpdateOne) AddPrograms(v ...*Program) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProgramIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_u *ProcedureUpdateOne) AddNarrativeIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.AddNarrativeIDs(ids...)
	return _u
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_u *ProcedureUpdateOne) AddNarratives(v ...*Narrative) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_u *ProcedureUpdateOne) AddRiskIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.AddRiskIDs(ids...)
	return _u
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_u *ProcedureUpdateOne) AddRisks(v ...*Risk) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddRiskIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *ProcedureUpdateOne) AddTaskIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *ProcedureUpdateOne) AddTasks(v ...*Task) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// Mutation returns the ProcedureMutation object of the builder.
func (_u *ProcedureUpdateOne) Mutation() *ProcedureMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *ProcedureUpdateOne) ClearOwner() *ProcedureUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (_u *ProcedureUpdateOne) ClearBlockedGroups() *ProcedureUpdateOne {
	_u.mutation.ClearBlockedGroups()
	return _u
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (_u *ProcedureUpdateOne) RemoveBlockedGroupIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.RemoveBlockedGroupIDs(ids...)
	return _u
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (_u *ProcedureUpdateOne) RemoveBlockedGroups(v ...*Group) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (_u *ProcedureUpdateOne) ClearEditors() *ProcedureUpdateOne {
	_u.mutation.ClearEditors()
	return _u
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (_u *ProcedureUpdateOne) RemoveEditorIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.RemoveEditorIDs(ids...)
	return _u
}

// RemoveEditors removes "editors" edges to Group entities.
func (_u *ProcedureUpdateOne) RemoveEditors(v ...*Group) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEditorIDs(ids...)
}

// ClearApprover clears the "approver" edge to the Group entity.
func (_u *ProcedureUpdateOne) ClearApprover() *ProcedureUpdateOne {
	_u.mutation.ClearApprover()
	return _u
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (_u *ProcedureUpdateOne) ClearDelegate() *ProcedureUpdateOne {
	_u.mutation.ClearDelegate()
	return _u
}

// ClearControls clears all "controls" edges to the Control entity.
func (_u *ProcedureUpdateOne) ClearControls() *ProcedureUpdateOne {
	_u.mutation.ClearControls()
	return _u
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (_u *ProcedureUpdateOne) RemoveControlIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.RemoveControlIDs(ids...)
	return _u
}

// RemoveControls removes "controls" edges to Control entities.
func (_u *ProcedureUpdateOne) RemoveControls(v ...*Control) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (_u *ProcedureUpdateOne) ClearSubcontrols() *ProcedureUpdateOne {
	_u.mutation.ClearSubcontrols()
	return _u
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (_u *ProcedureUpdateOne) RemoveSubcontrolIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.RemoveSubcontrolIDs(ids...)
	return _u
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (_u *ProcedureUpdateOne) RemoveSubcontrols(v ...*Subcontrol) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSubcontrolIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (_u *ProcedureUpdateOne) ClearInternalPolicies() *ProcedureUpdateOne {
	_u.mutation.ClearInternalPolicies()
	return _u
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (_u *ProcedureUpdateOne) RemoveInternalPolicyIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.RemoveInternalPolicyIDs(ids...)
	return _u
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (_u *ProcedureUpdateOne) RemoveInternalPolicies(v ...*InternalPolicy) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInternalPolicyIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (_u *ProcedureUpdateOne) ClearPrograms() *ProcedureUpdateOne {
	_u.mutation.ClearPrograms()
	return _u
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (_u *ProcedureUpdateOne) RemoveProgramIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.RemoveProgramIDs(ids...)
	return _u
}

// RemovePrograms removes "programs" edges to Program entities.
func (_u *ProcedureUpdateOne) RemovePrograms(v ...*Program) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProgramIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (_u *ProcedureUpdateOne) ClearNarratives() *ProcedureUpdateOne {
	_u.mutation.ClearNarratives()
	return _u
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (_u *ProcedureUpdateOne) RemoveNarrativeIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.RemoveNarrativeIDs(ids...)
	return _u
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (_u *ProcedureUpdateOne) RemoveNarratives(v ...*Narrative) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNarrativeIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (_u *ProcedureUpdateOne) ClearRisks() *ProcedureUpdateOne {
	_u.mutation.ClearRisks()
	return _u
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (_u *ProcedureUpdateOne) RemoveRiskIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.RemoveRiskIDs(ids...)
	return _u
}

// RemoveRisks removes "risks" edges to Risk entities.
func (_u *ProcedureUpdateOne) RemoveRisks(v ...*Risk) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveRiskIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *ProcedureUpdateOne) ClearTasks() *ProcedureUpdateOne {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *ProcedureUpdateOne) RemoveTaskIDs(ids ...string) *ProcedureUpdateOne {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *ProcedureUpdateOne) RemoveTasks(v ...*Task) *ProcedureUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the ProcedureUpdate builder.
func (_u *ProcedureUpdateOne) Where(ps ...predicate.Procedure) *ProcedureUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProcedureUpdateOne) Select(field string, fields ...string) *ProcedureUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Procedure entity.
func (_u *ProcedureUpdateOne) Save(ctx context.Context) (*Procedure, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProcedureUpdateOne) SaveX(ctx context.Context) *Procedure {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProcedureUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProcedureUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProcedureUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if procedure.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized procedure.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := procedure.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProcedureUpdateOne) check() error {
	if v, ok := _u.mutation.Revision(); ok {
		if err := procedure.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "Procedure.revision": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Name(); ok {
		if err := procedure.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Procedure.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := procedure.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Procedure.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ReviewFrequency(); ok {
		if err := procedure.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "Procedure.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *ProcedureUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProcedureUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *ProcedureUpdateOne) sqlSave(ctx context.Context) (_node *Procedure, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(procedure.Table, procedure.Columns, sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Procedure.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, procedure.FieldID)
		for _, f := range fields {
			if !procedure.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != procedure.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(procedure.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(procedure.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(procedure.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(procedure.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(procedure.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(procedure.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(procedure.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(procedure.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(procedure.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(procedure.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(procedure.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(procedure.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Revision(); ok {
		_spec.SetField(procedure.FieldRevision, field.TypeString, value)
	}
	if _u.mutation.RevisionCleared() {
		_spec.ClearField(procedure.FieldRevision, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(procedure.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(procedure.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(procedure.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.ProcedureType(); ok {
		_spec.SetField(procedure.FieldProcedureType, field.TypeString, value)
	}
	if _u.mutation.ProcedureTypeCleared() {
		_spec.ClearField(procedure.FieldProcedureType, field.TypeString)
	}
	if value, ok := _u.mutation.Details(); ok {
		_spec.SetField(procedure.FieldDetails, field.TypeString, value)
	}
	if _u.mutation.DetailsCleared() {
		_spec.ClearField(procedure.FieldDetails, field.TypeString)
	}
	if value, ok := _u.mutation.ApprovalRequired(); ok {
		_spec.SetField(procedure.FieldApprovalRequired, field.TypeBool, value)
	}
	if _u.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(procedure.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := _u.mutation.ReviewDue(); ok {
		_spec.SetField(procedure.FieldReviewDue, field.TypeTime, value)
	}
	if _u.mutation.ReviewDueCleared() {
		_spec.ClearField(procedure.FieldReviewDue, field.TypeTime)
	}
	if value, ok := _u.mutation.ReviewFrequency(); ok {
		_spec.SetField(procedure.FieldReviewFrequency, field.TypeEnum, value)
	}
	if _u.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(procedure.FieldReviewFrequency, field.TypeEnum)
	}
	if value, ok := _u.mutation.Summary(); ok {
		_spec.SetField(procedure.FieldSummary, field.TypeString, value)
	}
	if _u.mutation.SummaryCleared() {
		_spec.ClearField(procedure.FieldSummary, field.TypeString)
	}
	if value, ok := _u.mutation.TagSuggestions(); ok {
		_spec.SetField(procedure.FieldTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldTagSuggestions, value)
		})
	}
	if _u.mutation.TagSuggestionsCleared() {
		_spec.ClearField(procedure.FieldTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedTagSuggestions(); ok {
		_spec.SetField(procedure.FieldDismissedTagSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedTagSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldDismissedTagSuggestions, value)
		})
	}
	if _u.mutation.DismissedTagSuggestionsCleared() {
		_spec.ClearField(procedure.FieldDismissedTagSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ControlSuggestions(); ok {
		_spec.SetField(procedure.FieldControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldControlSuggestions, value)
		})
	}
	if _u.mutation.ControlSuggestionsCleared() {
		_spec.ClearField(procedure.FieldControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedControlSuggestions(); ok {
		_spec.SetField(procedure.FieldDismissedControlSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedControlSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldDismissedControlSuggestions, value)
		})
	}
	if _u.mutation.DismissedControlSuggestionsCleared() {
		_spec.ClearField(procedure.FieldDismissedControlSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.ImprovementSuggestions(); ok {
		_spec.SetField(procedure.FieldImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldImprovementSuggestions, value)
		})
	}
	if _u.mutation.ImprovementSuggestionsCleared() {
		_spec.ClearField(procedure.FieldImprovementSuggestions, field.TypeJSON)
	}
	if value, ok := _u.mutation.DismissedImprovementSuggestions(); ok {
		_spec.SetField(procedure.FieldDismissedImprovementSuggestions, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedDismissedImprovementSuggestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldDismissedImprovementSuggestions, value)
		})
	}
	if _u.mutation.DismissedImprovementSuggestionsCleared() {
		_spec.ClearField(procedure.FieldDismissedImprovementSuggestions, field.TypeJSON)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.OwnerTable,
			Columns: []string{procedure.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.OwnerTable,
			Columns: []string{procedure.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !_u.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !_u.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.ApproverTable,
			Columns: []string{procedure.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.ApproverTable,
			Columns: []string{procedure.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.DelegateTable,
			Columns: []string{procedure.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.DelegateTable,
			Columns: []string{procedure.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedControlsIDs(); len(nodes) > 0 && !_u.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.SubcontrolsTable,
			Columns: procedure.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !_u.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.SubcontrolsTable,
			Columns: procedure.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.SubcontrolsTable,
			Columns: procedure.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubcontrolProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !_u.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !_u.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: procedure.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureNarratives
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !_u.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: procedure.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: procedure.NarrativesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureNarratives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedRisksIDs(); len(nodes) > 0 && !_u.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Procedure
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Procedure{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procedure.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
