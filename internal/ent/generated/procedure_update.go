// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ProcedureUpdate is the builder for updating Procedure entities.
type ProcedureUpdate struct {
	config
	hooks     []Hook
	mutation  *ProcedureMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProcedureUpdate builder.
func (pu *ProcedureUpdate) Where(ps ...predicate.Procedure) *ProcedureUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *ProcedureUpdate) SetUpdatedAt(t time.Time) *ProcedureUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pu *ProcedureUpdate) ClearUpdatedAt() *ProcedureUpdate {
	pu.mutation.ClearUpdatedAt()
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *ProcedureUpdate) SetUpdatedBy(s string) *ProcedureUpdate {
	pu.mutation.SetUpdatedBy(s)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableUpdatedBy(s *string) *ProcedureUpdate {
	if s != nil {
		pu.SetUpdatedBy(*s)
	}
	return pu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pu *ProcedureUpdate) ClearUpdatedBy() *ProcedureUpdate {
	pu.mutation.ClearUpdatedBy()
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *ProcedureUpdate) SetDeletedAt(t time.Time) *ProcedureUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableDeletedAt(t *time.Time) *ProcedureUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *ProcedureUpdate) ClearDeletedAt() *ProcedureUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetDeletedBy sets the "deleted_by" field.
func (pu *ProcedureUpdate) SetDeletedBy(s string) *ProcedureUpdate {
	pu.mutation.SetDeletedBy(s)
	return pu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableDeletedBy(s *string) *ProcedureUpdate {
	if s != nil {
		pu.SetDeletedBy(*s)
	}
	return pu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pu *ProcedureUpdate) ClearDeletedBy() *ProcedureUpdate {
	pu.mutation.ClearDeletedBy()
	return pu
}

// SetTags sets the "tags" field.
func (pu *ProcedureUpdate) SetTags(s []string) *ProcedureUpdate {
	pu.mutation.SetTags(s)
	return pu
}

// AppendTags appends s to the "tags" field.
func (pu *ProcedureUpdate) AppendTags(s []string) *ProcedureUpdate {
	pu.mutation.AppendTags(s)
	return pu
}

// ClearTags clears the value of the "tags" field.
func (pu *ProcedureUpdate) ClearTags() *ProcedureUpdate {
	pu.mutation.ClearTags()
	return pu
}

// SetRevision sets the "revision" field.
func (pu *ProcedureUpdate) SetRevision(s string) *ProcedureUpdate {
	pu.mutation.SetRevision(s)
	return pu
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableRevision(s *string) *ProcedureUpdate {
	if s != nil {
		pu.SetRevision(*s)
	}
	return pu
}

// ClearRevision clears the value of the "revision" field.
func (pu *ProcedureUpdate) ClearRevision() *ProcedureUpdate {
	pu.mutation.ClearRevision()
	return pu
}

// SetOwnerID sets the "owner_id" field.
func (pu *ProcedureUpdate) SetOwnerID(s string) *ProcedureUpdate {
	pu.mutation.SetOwnerID(s)
	return pu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableOwnerID(s *string) *ProcedureUpdate {
	if s != nil {
		pu.SetOwnerID(*s)
	}
	return pu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (pu *ProcedureUpdate) ClearOwnerID() *ProcedureUpdate {
	pu.mutation.ClearOwnerID()
	return pu
}

// SetName sets the "name" field.
func (pu *ProcedureUpdate) SetName(s string) *ProcedureUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableName(s *string) *ProcedureUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// SetStatus sets the "status" field.
func (pu *ProcedureUpdate) SetStatus(es enums.DocumentStatus) *ProcedureUpdate {
	pu.mutation.SetStatus(es)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableStatus(es *enums.DocumentStatus) *ProcedureUpdate {
	if es != nil {
		pu.SetStatus(*es)
	}
	return pu
}

// ClearStatus clears the value of the "status" field.
func (pu *ProcedureUpdate) ClearStatus() *ProcedureUpdate {
	pu.mutation.ClearStatus()
	return pu
}

// SetProcedureType sets the "procedure_type" field.
func (pu *ProcedureUpdate) SetProcedureType(s string) *ProcedureUpdate {
	pu.mutation.SetProcedureType(s)
	return pu
}

// SetNillableProcedureType sets the "procedure_type" field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableProcedureType(s *string) *ProcedureUpdate {
	if s != nil {
		pu.SetProcedureType(*s)
	}
	return pu
}

// ClearProcedureType clears the value of the "procedure_type" field.
func (pu *ProcedureUpdate) ClearProcedureType() *ProcedureUpdate {
	pu.mutation.ClearProcedureType()
	return pu
}

// SetDetails sets the "details" field.
func (pu *ProcedureUpdate) SetDetails(s string) *ProcedureUpdate {
	pu.mutation.SetDetails(s)
	return pu
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableDetails(s *string) *ProcedureUpdate {
	if s != nil {
		pu.SetDetails(*s)
	}
	return pu
}

// ClearDetails clears the value of the "details" field.
func (pu *ProcedureUpdate) ClearDetails() *ProcedureUpdate {
	pu.mutation.ClearDetails()
	return pu
}

// SetApprovalRequired sets the "approval_required" field.
func (pu *ProcedureUpdate) SetApprovalRequired(b bool) *ProcedureUpdate {
	pu.mutation.SetApprovalRequired(b)
	return pu
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableApprovalRequired(b *bool) *ProcedureUpdate {
	if b != nil {
		pu.SetApprovalRequired(*b)
	}
	return pu
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (pu *ProcedureUpdate) ClearApprovalRequired() *ProcedureUpdate {
	pu.mutation.ClearApprovalRequired()
	return pu
}

// SetReviewDue sets the "review_due" field.
func (pu *ProcedureUpdate) SetReviewDue(t time.Time) *ProcedureUpdate {
	pu.mutation.SetReviewDue(t)
	return pu
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableReviewDue(t *time.Time) *ProcedureUpdate {
	if t != nil {
		pu.SetReviewDue(*t)
	}
	return pu
}

// ClearReviewDue clears the value of the "review_due" field.
func (pu *ProcedureUpdate) ClearReviewDue() *ProcedureUpdate {
	pu.mutation.ClearReviewDue()
	return pu
}

// SetReviewFrequency sets the "review_frequency" field.
func (pu *ProcedureUpdate) SetReviewFrequency(e enums.Frequency) *ProcedureUpdate {
	pu.mutation.SetReviewFrequency(e)
	return pu
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableReviewFrequency(e *enums.Frequency) *ProcedureUpdate {
	if e != nil {
		pu.SetReviewFrequency(*e)
	}
	return pu
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (pu *ProcedureUpdate) ClearReviewFrequency() *ProcedureUpdate {
	pu.mutation.ClearReviewFrequency()
	return pu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (pu *ProcedureUpdate) SetOwner(o *Organization) *ProcedureUpdate {
	return pu.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (pu *ProcedureUpdate) AddBlockedGroupIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.AddBlockedGroupIDs(ids...)
	return pu
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (pu *ProcedureUpdate) AddBlockedGroups(g ...*Group) *ProcedureUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pu.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (pu *ProcedureUpdate) AddEditorIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.AddEditorIDs(ids...)
	return pu
}

// AddEditors adds the "editors" edges to the Group entity.
func (pu *ProcedureUpdate) AddEditors(g ...*Group) *ProcedureUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pu.AddEditorIDs(ids...)
}

// SetApproverID sets the "approver" edge to the Group entity by ID.
func (pu *ProcedureUpdate) SetApproverID(id string) *ProcedureUpdate {
	pu.mutation.SetApproverID(id)
	return pu
}

// SetNillableApproverID sets the "approver" edge to the Group entity by ID if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableApproverID(id *string) *ProcedureUpdate {
	if id != nil {
		pu = pu.SetApproverID(*id)
	}
	return pu
}

// SetApprover sets the "approver" edge to the Group entity.
func (pu *ProcedureUpdate) SetApprover(g *Group) *ProcedureUpdate {
	return pu.SetApproverID(g.ID)
}

// SetDelegateID sets the "delegate" edge to the Group entity by ID.
func (pu *ProcedureUpdate) SetDelegateID(id string) *ProcedureUpdate {
	pu.mutation.SetDelegateID(id)
	return pu
}

// SetNillableDelegateID sets the "delegate" edge to the Group entity by ID if the given value is not nil.
func (pu *ProcedureUpdate) SetNillableDelegateID(id *string) *ProcedureUpdate {
	if id != nil {
		pu = pu.SetDelegateID(*id)
	}
	return pu
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (pu *ProcedureUpdate) SetDelegate(g *Group) *ProcedureUpdate {
	return pu.SetDelegateID(g.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (pu *ProcedureUpdate) AddControlIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.AddControlIDs(ids...)
	return pu
}

// AddControls adds the "controls" edges to the Control entity.
func (pu *ProcedureUpdate) AddControls(c ...*Control) *ProcedureUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddControlIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (pu *ProcedureUpdate) AddInternalPolicyIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.AddInternalPolicyIDs(ids...)
	return pu
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (pu *ProcedureUpdate) AddInternalPolicies(i ...*InternalPolicy) *ProcedureUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddInternalPolicyIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (pu *ProcedureUpdate) AddProgramIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.AddProgramIDs(ids...)
	return pu
}

// AddPrograms adds the "programs" edges to the Program entity.
func (pu *ProcedureUpdate) AddPrograms(p ...*Program) *ProcedureUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.AddProgramIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (pu *ProcedureUpdate) AddNarrativeIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.AddNarrativeIDs(ids...)
	return pu
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (pu *ProcedureUpdate) AddNarratives(n ...*Narrative) *ProcedureUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (pu *ProcedureUpdate) AddRiskIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.AddRiskIDs(ids...)
	return pu
}

// AddRisks adds the "risks" edges to the Risk entity.
func (pu *ProcedureUpdate) AddRisks(r ...*Risk) *ProcedureUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddRiskIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pu *ProcedureUpdate) AddTaskIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.AddTaskIDs(ids...)
	return pu
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pu *ProcedureUpdate) AddTasks(t ...*Task) *ProcedureUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTaskIDs(ids...)
}

// Mutation returns the ProcedureMutation object of the builder.
func (pu *ProcedureUpdate) Mutation() *ProcedureMutation {
	return pu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (pu *ProcedureUpdate) ClearOwner() *ProcedureUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (pu *ProcedureUpdate) ClearBlockedGroups() *ProcedureUpdate {
	pu.mutation.ClearBlockedGroups()
	return pu
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (pu *ProcedureUpdate) RemoveBlockedGroupIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.RemoveBlockedGroupIDs(ids...)
	return pu
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (pu *ProcedureUpdate) RemoveBlockedGroups(g ...*Group) *ProcedureUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pu.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (pu *ProcedureUpdate) ClearEditors() *ProcedureUpdate {
	pu.mutation.ClearEditors()
	return pu
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (pu *ProcedureUpdate) RemoveEditorIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.RemoveEditorIDs(ids...)
	return pu
}

// RemoveEditors removes "editors" edges to Group entities.
func (pu *ProcedureUpdate) RemoveEditors(g ...*Group) *ProcedureUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pu.RemoveEditorIDs(ids...)
}

// ClearApprover clears the "approver" edge to the Group entity.
func (pu *ProcedureUpdate) ClearApprover() *ProcedureUpdate {
	pu.mutation.ClearApprover()
	return pu
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (pu *ProcedureUpdate) ClearDelegate() *ProcedureUpdate {
	pu.mutation.ClearDelegate()
	return pu
}

// ClearControls clears all "controls" edges to the Control entity.
func (pu *ProcedureUpdate) ClearControls() *ProcedureUpdate {
	pu.mutation.ClearControls()
	return pu
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (pu *ProcedureUpdate) RemoveControlIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.RemoveControlIDs(ids...)
	return pu
}

// RemoveControls removes "controls" edges to Control entities.
func (pu *ProcedureUpdate) RemoveControls(c ...*Control) *ProcedureUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveControlIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (pu *ProcedureUpdate) ClearInternalPolicies() *ProcedureUpdate {
	pu.mutation.ClearInternalPolicies()
	return pu
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (pu *ProcedureUpdate) RemoveInternalPolicyIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.RemoveInternalPolicyIDs(ids...)
	return pu
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (pu *ProcedureUpdate) RemoveInternalPolicies(i ...*InternalPolicy) *ProcedureUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemoveInternalPolicyIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (pu *ProcedureUpdate) ClearPrograms() *ProcedureUpdate {
	pu.mutation.ClearPrograms()
	return pu
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (pu *ProcedureUpdate) RemoveProgramIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.RemoveProgramIDs(ids...)
	return pu
}

// RemovePrograms removes "programs" edges to Program entities.
func (pu *ProcedureUpdate) RemovePrograms(p ...*Program) *ProcedureUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pu.RemoveProgramIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (pu *ProcedureUpdate) ClearNarratives() *ProcedureUpdate {
	pu.mutation.ClearNarratives()
	return pu
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (pu *ProcedureUpdate) RemoveNarrativeIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.RemoveNarrativeIDs(ids...)
	return pu
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (pu *ProcedureUpdate) RemoveNarratives(n ...*Narrative) *ProcedureUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return pu.RemoveNarrativeIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (pu *ProcedureUpdate) ClearRisks() *ProcedureUpdate {
	pu.mutation.ClearRisks()
	return pu
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (pu *ProcedureUpdate) RemoveRiskIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.RemoveRiskIDs(ids...)
	return pu
}

// RemoveRisks removes "risks" edges to Risk entities.
func (pu *ProcedureUpdate) RemoveRisks(r ...*Risk) *ProcedureUpdate {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveRiskIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (pu *ProcedureUpdate) ClearTasks() *ProcedureUpdate {
	pu.mutation.ClearTasks()
	return pu
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (pu *ProcedureUpdate) RemoveTaskIDs(ids ...string) *ProcedureUpdate {
	pu.mutation.RemoveTaskIDs(ids...)
	return pu
}

// RemoveTasks removes "tasks" edges to Task entities.
func (pu *ProcedureUpdate) RemoveTasks(t ...*Task) *ProcedureUpdate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProcedureUpdate) Save(ctx context.Context) (int, error) {
	if err := pu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProcedureUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProcedureUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProcedureUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *ProcedureUpdate) defaults() error {
	if _, ok := pu.mutation.UpdatedAt(); !ok && !pu.mutation.UpdatedAtCleared() {
		if procedure.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized procedure.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := procedure.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProcedureUpdate) check() error {
	if v, ok := pu.mutation.Revision(); ok {
		if err := procedure.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "Procedure.revision": %w`, err)}
		}
	}
	if v, ok := pu.mutation.OwnerID(); ok {
		if err := procedure.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Procedure.owner_id": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := procedure.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Procedure.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Status(); ok {
		if err := procedure.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Procedure.status": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ReviewFrequency(); ok {
		if err := procedure.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "Procedure.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *ProcedureUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProcedureUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *ProcedureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(procedure.Table, procedure.Columns, sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pu.mutation.CreatedAtCleared() {
		_spec.ClearField(procedure.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(procedure.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.UpdatedAtCleared() {
		_spec.ClearField(procedure.FieldUpdatedAt, field.TypeTime)
	}
	if pu.mutation.CreatedByCleared() {
		_spec.ClearField(procedure.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(procedure.FieldUpdatedBy, field.TypeString, value)
	}
	if pu.mutation.UpdatedByCleared() {
		_spec.ClearField(procedure.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(procedure.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(procedure.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.DeletedBy(); ok {
		_spec.SetField(procedure.FieldDeletedBy, field.TypeString, value)
	}
	if pu.mutation.DeletedByCleared() {
		_spec.ClearField(procedure.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pu.mutation.Tags(); ok {
		_spec.SetField(procedure.FieldTags, field.TypeJSON, value)
	}
	if value, ok := pu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldTags, value)
		})
	}
	if pu.mutation.TagsCleared() {
		_spec.ClearField(procedure.FieldTags, field.TypeJSON)
	}
	if value, ok := pu.mutation.Revision(); ok {
		_spec.SetField(procedure.FieldRevision, field.TypeString, value)
	}
	if pu.mutation.RevisionCleared() {
		_spec.ClearField(procedure.FieldRevision, field.TypeString)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(procedure.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(procedure.FieldStatus, field.TypeEnum, value)
	}
	if pu.mutation.StatusCleared() {
		_spec.ClearField(procedure.FieldStatus, field.TypeEnum)
	}
	if value, ok := pu.mutation.ProcedureType(); ok {
		_spec.SetField(procedure.FieldProcedureType, field.TypeString, value)
	}
	if pu.mutation.ProcedureTypeCleared() {
		_spec.ClearField(procedure.FieldProcedureType, field.TypeString)
	}
	if value, ok := pu.mutation.Details(); ok {
		_spec.SetField(procedure.FieldDetails, field.TypeString, value)
	}
	if pu.mutation.DetailsCleared() {
		_spec.ClearField(procedure.FieldDetails, field.TypeString)
	}
	if value, ok := pu.mutation.ApprovalRequired(); ok {
		_spec.SetField(procedure.FieldApprovalRequired, field.TypeBool, value)
	}
	if pu.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(procedure.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := pu.mutation.ReviewDue(); ok {
		_spec.SetField(procedure.FieldReviewDue, field.TypeTime, value)
	}
	if pu.mutation.ReviewDueCleared() {
		_spec.ClearField(procedure.FieldReviewDue, field.TypeTime)
	}
	if value, ok := pu.mutation.ReviewFrequency(); ok {
		_spec.SetField(procedure.FieldReviewFrequency, field.TypeEnum, value)
	}
	if pu.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(procedure.FieldReviewFrequency, field.TypeEnum)
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.OwnerTable,
			Columns: []string{procedure.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.OwnerTable,
			Columns: []string{procedure.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProcedureBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !pu.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProcedureEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !pu.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.ApproverTable,
			Columns: []string{procedure.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.ApproverTable,
			Columns: []string{procedure.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.DelegateTable,
			Columns: []string{procedure.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.DelegateTable,
			Columns: []string{procedure.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ControlProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedControlsIDs(); len(nodes) > 0 && !pu.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.InternalPolicyProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !pu.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !pu.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: []string{procedure.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Narrative
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !pu.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: []string{procedure.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: []string{procedure.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProcedureRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedRisksIDs(); len(nodes) > 0 && !pu.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProcedureTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTasksIDs(); len(nodes) > 0 && !pu.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = pu.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = pu.schemaConfig.Procedure
	ctx = internal.NewSchemaConfigContext(ctx, pu.schemaConfig)
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procedure.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// ProcedureUpdateOne is the builder for updating a single Procedure entity.
type ProcedureUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProcedureMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *ProcedureUpdateOne) SetUpdatedAt(t time.Time) *ProcedureUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (puo *ProcedureUpdateOne) ClearUpdatedAt() *ProcedureUpdateOne {
	puo.mutation.ClearUpdatedAt()
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *ProcedureUpdateOne) SetUpdatedBy(s string) *ProcedureUpdateOne {
	puo.mutation.SetUpdatedBy(s)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableUpdatedBy(s *string) *ProcedureUpdateOne {
	if s != nil {
		puo.SetUpdatedBy(*s)
	}
	return puo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puo *ProcedureUpdateOne) ClearUpdatedBy() *ProcedureUpdateOne {
	puo.mutation.ClearUpdatedBy()
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *ProcedureUpdateOne) SetDeletedAt(t time.Time) *ProcedureUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableDeletedAt(t *time.Time) *ProcedureUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *ProcedureUpdateOne) ClearDeletedAt() *ProcedureUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetDeletedBy sets the "deleted_by" field.
func (puo *ProcedureUpdateOne) SetDeletedBy(s string) *ProcedureUpdateOne {
	puo.mutation.SetDeletedBy(s)
	return puo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableDeletedBy(s *string) *ProcedureUpdateOne {
	if s != nil {
		puo.SetDeletedBy(*s)
	}
	return puo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (puo *ProcedureUpdateOne) ClearDeletedBy() *ProcedureUpdateOne {
	puo.mutation.ClearDeletedBy()
	return puo
}

// SetTags sets the "tags" field.
func (puo *ProcedureUpdateOne) SetTags(s []string) *ProcedureUpdateOne {
	puo.mutation.SetTags(s)
	return puo
}

// AppendTags appends s to the "tags" field.
func (puo *ProcedureUpdateOne) AppendTags(s []string) *ProcedureUpdateOne {
	puo.mutation.AppendTags(s)
	return puo
}

// ClearTags clears the value of the "tags" field.
func (puo *ProcedureUpdateOne) ClearTags() *ProcedureUpdateOne {
	puo.mutation.ClearTags()
	return puo
}

// SetRevision sets the "revision" field.
func (puo *ProcedureUpdateOne) SetRevision(s string) *ProcedureUpdateOne {
	puo.mutation.SetRevision(s)
	return puo
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableRevision(s *string) *ProcedureUpdateOne {
	if s != nil {
		puo.SetRevision(*s)
	}
	return puo
}

// ClearRevision clears the value of the "revision" field.
func (puo *ProcedureUpdateOne) ClearRevision() *ProcedureUpdateOne {
	puo.mutation.ClearRevision()
	return puo
}

// SetOwnerID sets the "owner_id" field.
func (puo *ProcedureUpdateOne) SetOwnerID(s string) *ProcedureUpdateOne {
	puo.mutation.SetOwnerID(s)
	return puo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableOwnerID(s *string) *ProcedureUpdateOne {
	if s != nil {
		puo.SetOwnerID(*s)
	}
	return puo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (puo *ProcedureUpdateOne) ClearOwnerID() *ProcedureUpdateOne {
	puo.mutation.ClearOwnerID()
	return puo
}

// SetName sets the "name" field.
func (puo *ProcedureUpdateOne) SetName(s string) *ProcedureUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableName(s *string) *ProcedureUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// SetStatus sets the "status" field.
func (puo *ProcedureUpdateOne) SetStatus(es enums.DocumentStatus) *ProcedureUpdateOne {
	puo.mutation.SetStatus(es)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableStatus(es *enums.DocumentStatus) *ProcedureUpdateOne {
	if es != nil {
		puo.SetStatus(*es)
	}
	return puo
}

// ClearStatus clears the value of the "status" field.
func (puo *ProcedureUpdateOne) ClearStatus() *ProcedureUpdateOne {
	puo.mutation.ClearStatus()
	return puo
}

// SetProcedureType sets the "procedure_type" field.
func (puo *ProcedureUpdateOne) SetProcedureType(s string) *ProcedureUpdateOne {
	puo.mutation.SetProcedureType(s)
	return puo
}

// SetNillableProcedureType sets the "procedure_type" field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableProcedureType(s *string) *ProcedureUpdateOne {
	if s != nil {
		puo.SetProcedureType(*s)
	}
	return puo
}

// ClearProcedureType clears the value of the "procedure_type" field.
func (puo *ProcedureUpdateOne) ClearProcedureType() *ProcedureUpdateOne {
	puo.mutation.ClearProcedureType()
	return puo
}

// SetDetails sets the "details" field.
func (puo *ProcedureUpdateOne) SetDetails(s string) *ProcedureUpdateOne {
	puo.mutation.SetDetails(s)
	return puo
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableDetails(s *string) *ProcedureUpdateOne {
	if s != nil {
		puo.SetDetails(*s)
	}
	return puo
}

// ClearDetails clears the value of the "details" field.
func (puo *ProcedureUpdateOne) ClearDetails() *ProcedureUpdateOne {
	puo.mutation.ClearDetails()
	return puo
}

// SetApprovalRequired sets the "approval_required" field.
func (puo *ProcedureUpdateOne) SetApprovalRequired(b bool) *ProcedureUpdateOne {
	puo.mutation.SetApprovalRequired(b)
	return puo
}

// SetNillableApprovalRequired sets the "approval_required" field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableApprovalRequired(b *bool) *ProcedureUpdateOne {
	if b != nil {
		puo.SetApprovalRequired(*b)
	}
	return puo
}

// ClearApprovalRequired clears the value of the "approval_required" field.
func (puo *ProcedureUpdateOne) ClearApprovalRequired() *ProcedureUpdateOne {
	puo.mutation.ClearApprovalRequired()
	return puo
}

// SetReviewDue sets the "review_due" field.
func (puo *ProcedureUpdateOne) SetReviewDue(t time.Time) *ProcedureUpdateOne {
	puo.mutation.SetReviewDue(t)
	return puo
}

// SetNillableReviewDue sets the "review_due" field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableReviewDue(t *time.Time) *ProcedureUpdateOne {
	if t != nil {
		puo.SetReviewDue(*t)
	}
	return puo
}

// ClearReviewDue clears the value of the "review_due" field.
func (puo *ProcedureUpdateOne) ClearReviewDue() *ProcedureUpdateOne {
	puo.mutation.ClearReviewDue()
	return puo
}

// SetReviewFrequency sets the "review_frequency" field.
func (puo *ProcedureUpdateOne) SetReviewFrequency(e enums.Frequency) *ProcedureUpdateOne {
	puo.mutation.SetReviewFrequency(e)
	return puo
}

// SetNillableReviewFrequency sets the "review_frequency" field if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableReviewFrequency(e *enums.Frequency) *ProcedureUpdateOne {
	if e != nil {
		puo.SetReviewFrequency(*e)
	}
	return puo
}

// ClearReviewFrequency clears the value of the "review_frequency" field.
func (puo *ProcedureUpdateOne) ClearReviewFrequency() *ProcedureUpdateOne {
	puo.mutation.ClearReviewFrequency()
	return puo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (puo *ProcedureUpdateOne) SetOwner(o *Organization) *ProcedureUpdateOne {
	return puo.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (puo *ProcedureUpdateOne) AddBlockedGroupIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.AddBlockedGroupIDs(ids...)
	return puo
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (puo *ProcedureUpdateOne) AddBlockedGroups(g ...*Group) *ProcedureUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return puo.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (puo *ProcedureUpdateOne) AddEditorIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.AddEditorIDs(ids...)
	return puo
}

// AddEditors adds the "editors" edges to the Group entity.
func (puo *ProcedureUpdateOne) AddEditors(g ...*Group) *ProcedureUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return puo.AddEditorIDs(ids...)
}

// SetApproverID sets the "approver" edge to the Group entity by ID.
func (puo *ProcedureUpdateOne) SetApproverID(id string) *ProcedureUpdateOne {
	puo.mutation.SetApproverID(id)
	return puo
}

// SetNillableApproverID sets the "approver" edge to the Group entity by ID if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableApproverID(id *string) *ProcedureUpdateOne {
	if id != nil {
		puo = puo.SetApproverID(*id)
	}
	return puo
}

// SetApprover sets the "approver" edge to the Group entity.
func (puo *ProcedureUpdateOne) SetApprover(g *Group) *ProcedureUpdateOne {
	return puo.SetApproverID(g.ID)
}

// SetDelegateID sets the "delegate" edge to the Group entity by ID.
func (puo *ProcedureUpdateOne) SetDelegateID(id string) *ProcedureUpdateOne {
	puo.mutation.SetDelegateID(id)
	return puo
}

// SetNillableDelegateID sets the "delegate" edge to the Group entity by ID if the given value is not nil.
func (puo *ProcedureUpdateOne) SetNillableDelegateID(id *string) *ProcedureUpdateOne {
	if id != nil {
		puo = puo.SetDelegateID(*id)
	}
	return puo
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (puo *ProcedureUpdateOne) SetDelegate(g *Group) *ProcedureUpdateOne {
	return puo.SetDelegateID(g.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (puo *ProcedureUpdateOne) AddControlIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.AddControlIDs(ids...)
	return puo
}

// AddControls adds the "controls" edges to the Control entity.
func (puo *ProcedureUpdateOne) AddControls(c ...*Control) *ProcedureUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddControlIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (puo *ProcedureUpdateOne) AddInternalPolicyIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.AddInternalPolicyIDs(ids...)
	return puo
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (puo *ProcedureUpdateOne) AddInternalPolicies(i ...*InternalPolicy) *ProcedureUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddInternalPolicyIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (puo *ProcedureUpdateOne) AddProgramIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.AddProgramIDs(ids...)
	return puo
}

// AddPrograms adds the "programs" edges to the Program entity.
func (puo *ProcedureUpdateOne) AddPrograms(p ...*Program) *ProcedureUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.AddProgramIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (puo *ProcedureUpdateOne) AddNarrativeIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.AddNarrativeIDs(ids...)
	return puo
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (puo *ProcedureUpdateOne) AddNarratives(n ...*Narrative) *ProcedureUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.AddNarrativeIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (puo *ProcedureUpdateOne) AddRiskIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.AddRiskIDs(ids...)
	return puo
}

// AddRisks adds the "risks" edges to the Risk entity.
func (puo *ProcedureUpdateOne) AddRisks(r ...*Risk) *ProcedureUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddRiskIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (puo *ProcedureUpdateOne) AddTaskIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.AddTaskIDs(ids...)
	return puo
}

// AddTasks adds the "tasks" edges to the Task entity.
func (puo *ProcedureUpdateOne) AddTasks(t ...*Task) *ProcedureUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTaskIDs(ids...)
}

// Mutation returns the ProcedureMutation object of the builder.
func (puo *ProcedureUpdateOne) Mutation() *ProcedureMutation {
	return puo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (puo *ProcedureUpdateOne) ClearOwner() *ProcedureUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// ClearBlockedGroups clears all "blocked_groups" edges to the Group entity.
func (puo *ProcedureUpdateOne) ClearBlockedGroups() *ProcedureUpdateOne {
	puo.mutation.ClearBlockedGroups()
	return puo
}

// RemoveBlockedGroupIDs removes the "blocked_groups" edge to Group entities by IDs.
func (puo *ProcedureUpdateOne) RemoveBlockedGroupIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.RemoveBlockedGroupIDs(ids...)
	return puo
}

// RemoveBlockedGroups removes "blocked_groups" edges to Group entities.
func (puo *ProcedureUpdateOne) RemoveBlockedGroups(g ...*Group) *ProcedureUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return puo.RemoveBlockedGroupIDs(ids...)
}

// ClearEditors clears all "editors" edges to the Group entity.
func (puo *ProcedureUpdateOne) ClearEditors() *ProcedureUpdateOne {
	puo.mutation.ClearEditors()
	return puo
}

// RemoveEditorIDs removes the "editors" edge to Group entities by IDs.
func (puo *ProcedureUpdateOne) RemoveEditorIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.RemoveEditorIDs(ids...)
	return puo
}

// RemoveEditors removes "editors" edges to Group entities.
func (puo *ProcedureUpdateOne) RemoveEditors(g ...*Group) *ProcedureUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return puo.RemoveEditorIDs(ids...)
}

// ClearApprover clears the "approver" edge to the Group entity.
func (puo *ProcedureUpdateOne) ClearApprover() *ProcedureUpdateOne {
	puo.mutation.ClearApprover()
	return puo
}

// ClearDelegate clears the "delegate" edge to the Group entity.
func (puo *ProcedureUpdateOne) ClearDelegate() *ProcedureUpdateOne {
	puo.mutation.ClearDelegate()
	return puo
}

// ClearControls clears all "controls" edges to the Control entity.
func (puo *ProcedureUpdateOne) ClearControls() *ProcedureUpdateOne {
	puo.mutation.ClearControls()
	return puo
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (puo *ProcedureUpdateOne) RemoveControlIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.RemoveControlIDs(ids...)
	return puo
}

// RemoveControls removes "controls" edges to Control entities.
func (puo *ProcedureUpdateOne) RemoveControls(c ...*Control) *ProcedureUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveControlIDs(ids...)
}

// ClearInternalPolicies clears all "internal_policies" edges to the InternalPolicy entity.
func (puo *ProcedureUpdateOne) ClearInternalPolicies() *ProcedureUpdateOne {
	puo.mutation.ClearInternalPolicies()
	return puo
}

// RemoveInternalPolicyIDs removes the "internal_policies" edge to InternalPolicy entities by IDs.
func (puo *ProcedureUpdateOne) RemoveInternalPolicyIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.RemoveInternalPolicyIDs(ids...)
	return puo
}

// RemoveInternalPolicies removes "internal_policies" edges to InternalPolicy entities.
func (puo *ProcedureUpdateOne) RemoveInternalPolicies(i ...*InternalPolicy) *ProcedureUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemoveInternalPolicyIDs(ids...)
}

// ClearPrograms clears all "programs" edges to the Program entity.
func (puo *ProcedureUpdateOne) ClearPrograms() *ProcedureUpdateOne {
	puo.mutation.ClearPrograms()
	return puo
}

// RemoveProgramIDs removes the "programs" edge to Program entities by IDs.
func (puo *ProcedureUpdateOne) RemoveProgramIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.RemoveProgramIDs(ids...)
	return puo
}

// RemovePrograms removes "programs" edges to Program entities.
func (puo *ProcedureUpdateOne) RemovePrograms(p ...*Program) *ProcedureUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return puo.RemoveProgramIDs(ids...)
}

// ClearNarratives clears all "narratives" edges to the Narrative entity.
func (puo *ProcedureUpdateOne) ClearNarratives() *ProcedureUpdateOne {
	puo.mutation.ClearNarratives()
	return puo
}

// RemoveNarrativeIDs removes the "narratives" edge to Narrative entities by IDs.
func (puo *ProcedureUpdateOne) RemoveNarrativeIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.RemoveNarrativeIDs(ids...)
	return puo
}

// RemoveNarratives removes "narratives" edges to Narrative entities.
func (puo *ProcedureUpdateOne) RemoveNarratives(n ...*Narrative) *ProcedureUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return puo.RemoveNarrativeIDs(ids...)
}

// ClearRisks clears all "risks" edges to the Risk entity.
func (puo *ProcedureUpdateOne) ClearRisks() *ProcedureUpdateOne {
	puo.mutation.ClearRisks()
	return puo
}

// RemoveRiskIDs removes the "risks" edge to Risk entities by IDs.
func (puo *ProcedureUpdateOne) RemoveRiskIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.RemoveRiskIDs(ids...)
	return puo
}

// RemoveRisks removes "risks" edges to Risk entities.
func (puo *ProcedureUpdateOne) RemoveRisks(r ...*Risk) *ProcedureUpdateOne {
	ids := make([]string, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveRiskIDs(ids...)
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (puo *ProcedureUpdateOne) ClearTasks() *ProcedureUpdateOne {
	puo.mutation.ClearTasks()
	return puo
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (puo *ProcedureUpdateOne) RemoveTaskIDs(ids ...string) *ProcedureUpdateOne {
	puo.mutation.RemoveTaskIDs(ids...)
	return puo
}

// RemoveTasks removes "tasks" edges to Task entities.
func (puo *ProcedureUpdateOne) RemoveTasks(t ...*Task) *ProcedureUpdateOne {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the ProcedureUpdate builder.
func (puo *ProcedureUpdateOne) Where(ps ...predicate.Procedure) *ProcedureUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProcedureUpdateOne) Select(field string, fields ...string) *ProcedureUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Procedure entity.
func (puo *ProcedureUpdateOne) Save(ctx context.Context) (*Procedure, error) {
	if err := puo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProcedureUpdateOne) SaveX(ctx context.Context) *Procedure {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProcedureUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProcedureUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *ProcedureUpdateOne) defaults() error {
	if _, ok := puo.mutation.UpdatedAt(); !ok && !puo.mutation.UpdatedAtCleared() {
		if procedure.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized procedure.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := procedure.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProcedureUpdateOne) check() error {
	if v, ok := puo.mutation.Revision(); ok {
		if err := procedure.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "Procedure.revision": %w`, err)}
		}
	}
	if v, ok := puo.mutation.OwnerID(); ok {
		if err := procedure.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Procedure.owner_id": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := procedure.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Procedure.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Status(); ok {
		if err := procedure.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Procedure.status": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ReviewFrequency(); ok {
		if err := procedure.ReviewFrequencyValidator(v); err != nil {
			return &ValidationError{Name: "review_frequency", err: fmt.Errorf(`generated: validator failed for field "Procedure.review_frequency": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *ProcedureUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProcedureUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *ProcedureUpdateOne) sqlSave(ctx context.Context) (_node *Procedure, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(procedure.Table, procedure.Columns, sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Procedure.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, procedure.FieldID)
		for _, f := range fields {
			if !procedure.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != procedure.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if puo.mutation.CreatedAtCleared() {
		_spec.ClearField(procedure.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(procedure.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.UpdatedAtCleared() {
		_spec.ClearField(procedure.FieldUpdatedAt, field.TypeTime)
	}
	if puo.mutation.CreatedByCleared() {
		_spec.ClearField(procedure.FieldCreatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(procedure.FieldUpdatedBy, field.TypeString, value)
	}
	if puo.mutation.UpdatedByCleared() {
		_spec.ClearField(procedure.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(procedure.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(procedure.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.DeletedBy(); ok {
		_spec.SetField(procedure.FieldDeletedBy, field.TypeString, value)
	}
	if puo.mutation.DeletedByCleared() {
		_spec.ClearField(procedure.FieldDeletedBy, field.TypeString)
	}
	if value, ok := puo.mutation.Tags(); ok {
		_spec.SetField(procedure.FieldTags, field.TypeJSON, value)
	}
	if value, ok := puo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, procedure.FieldTags, value)
		})
	}
	if puo.mutation.TagsCleared() {
		_spec.ClearField(procedure.FieldTags, field.TypeJSON)
	}
	if value, ok := puo.mutation.Revision(); ok {
		_spec.SetField(procedure.FieldRevision, field.TypeString, value)
	}
	if puo.mutation.RevisionCleared() {
		_spec.ClearField(procedure.FieldRevision, field.TypeString)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(procedure.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(procedure.FieldStatus, field.TypeEnum, value)
	}
	if puo.mutation.StatusCleared() {
		_spec.ClearField(procedure.FieldStatus, field.TypeEnum)
	}
	if value, ok := puo.mutation.ProcedureType(); ok {
		_spec.SetField(procedure.FieldProcedureType, field.TypeString, value)
	}
	if puo.mutation.ProcedureTypeCleared() {
		_spec.ClearField(procedure.FieldProcedureType, field.TypeString)
	}
	if value, ok := puo.mutation.Details(); ok {
		_spec.SetField(procedure.FieldDetails, field.TypeString, value)
	}
	if puo.mutation.DetailsCleared() {
		_spec.ClearField(procedure.FieldDetails, field.TypeString)
	}
	if value, ok := puo.mutation.ApprovalRequired(); ok {
		_spec.SetField(procedure.FieldApprovalRequired, field.TypeBool, value)
	}
	if puo.mutation.ApprovalRequiredCleared() {
		_spec.ClearField(procedure.FieldApprovalRequired, field.TypeBool)
	}
	if value, ok := puo.mutation.ReviewDue(); ok {
		_spec.SetField(procedure.FieldReviewDue, field.TypeTime, value)
	}
	if puo.mutation.ReviewDueCleared() {
		_spec.ClearField(procedure.FieldReviewDue, field.TypeTime)
	}
	if value, ok := puo.mutation.ReviewFrequency(); ok {
		_spec.SetField(procedure.FieldReviewFrequency, field.TypeEnum, value)
	}
	if puo.mutation.ReviewFrequencyCleared() {
		_spec.ClearField(procedure.FieldReviewFrequency, field.TypeEnum)
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.OwnerTable,
			Columns: []string{procedure.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   procedure.OwnerTable,
			Columns: []string{procedure.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProcedureBlockedGroups
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedBlockedGroupsIDs(); len(nodes) > 0 && !puo.mutation.BlockedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.BlockedGroupsTable,
			Columns: procedure.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProcedureBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProcedureEditors
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedEditorsIDs(); len(nodes) > 0 && !puo.mutation.EditorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.EditorsTable,
			Columns: procedure.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProcedureEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.ApproverTable,
			Columns: []string{procedure.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.ApproverTable,
			Columns: []string{procedure.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.DelegateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.DelegateTable,
			Columns: []string{procedure.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Procedure
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   procedure.DelegateTable,
			Columns: []string{procedure.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ControlProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !puo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ControlsTable,
			Columns: procedure.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ControlProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.InternalPolicyProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedInternalPoliciesIDs(); len(nodes) > 0 && !puo.mutation.InternalPoliciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.InternalPoliciesTable,
			Columns: procedure.InternalPoliciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.InternalPolicyProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramProcedures
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedProgramsIDs(); len(nodes) > 0 && !puo.mutation.ProgramsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   procedure.ProgramsTable,
			Columns: procedure.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProgramProcedures
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: []string{procedure.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Narrative
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedNarrativesIDs(); len(nodes) > 0 && !puo.mutation.NarrativesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: []string{procedure.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   procedure.NarrativesTable,
			Columns: []string{procedure.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProcedureRisks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedRisksIDs(); len(nodes) > 0 && !puo.mutation.RisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.RisksTable,
			Columns: procedure.RisksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProcedureTasks
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTasksIDs(); len(nodes) > 0 && !puo.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   procedure.TasksTable,
			Columns: procedure.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = puo.schemaConfig.ProcedureTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = puo.schemaConfig.Procedure
	ctx = internal.NewSchemaConfigContext(ctx, puo.schemaConfig)
	_spec.AddModifiers(puo.modifiers...)
	_node = &Procedure{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procedure.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
