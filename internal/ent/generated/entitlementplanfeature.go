// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/organization"
)

// EntitlementPlanFeature is the model entity for the EntitlementPlanFeature schema.
type EntitlementPlanFeature struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// metadata for the entitlement plan feature such as usage limits
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	// PlanID holds the value of the "plan_id" field.
	PlanID string `json:"plan_id,omitempty"`
	// the product ID in Stripe
	StripeProductID string `json:"stripe_product_id,omitempty"`
	// FeatureID holds the value of the "feature_id" field.
	FeatureID string `json:"feature_id,omitempty"`
	// the feature ID in Stripe
	StripeFeatureID string `json:"stripe_feature_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntitlementPlanFeatureQuery when eager-loading is set.
	Edges        EntitlementPlanFeatureEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EntitlementPlanFeatureEdges holds the relations/edges for other nodes in the graph.
type EntitlementPlanFeatureEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Plan holds the value of the plan edge.
	Plan *EntitlementPlan `json:"plan,omitempty"`
	// Feature holds the value of the feature edge.
	Feature *Feature `json:"feature,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedEvents map[string][]*Event
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntitlementPlanFeatureEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// PlanOrErr returns the Plan value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntitlementPlanFeatureEdges) PlanOrErr() (*EntitlementPlan, error) {
	if e.Plan != nil {
		return e.Plan, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: entitlementplan.Label}
	}
	return nil, &NotLoadedError{edge: "plan"}
}

// FeatureOrErr returns the Feature value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntitlementPlanFeatureEdges) FeatureOrErr() (*Feature, error) {
	if e.Feature != nil {
		return e.Feature, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: feature.Label}
	}
	return nil, &NotLoadedError{edge: "feature"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e EntitlementPlanFeatureEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[3] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntitlementPlanFeature) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entitlementplanfeature.FieldTags, entitlementplanfeature.FieldMetadata:
			values[i] = new([]byte)
		case entitlementplanfeature.FieldID, entitlementplanfeature.FieldCreatedBy, entitlementplanfeature.FieldUpdatedBy, entitlementplanfeature.FieldMappingID, entitlementplanfeature.FieldDeletedBy, entitlementplanfeature.FieldOwnerID, entitlementplanfeature.FieldPlanID, entitlementplanfeature.FieldStripeProductID, entitlementplanfeature.FieldFeatureID, entitlementplanfeature.FieldStripeFeatureID:
			values[i] = new(sql.NullString)
		case entitlementplanfeature.FieldCreatedAt, entitlementplanfeature.FieldUpdatedAt, entitlementplanfeature.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntitlementPlanFeature fields.
func (epf *EntitlementPlanFeature) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entitlementplanfeature.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				epf.ID = value.String
			}
		case entitlementplanfeature.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				epf.CreatedAt = value.Time
			}
		case entitlementplanfeature.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				epf.UpdatedAt = value.Time
			}
		case entitlementplanfeature.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				epf.CreatedBy = value.String
			}
		case entitlementplanfeature.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				epf.UpdatedBy = value.String
			}
		case entitlementplanfeature.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				epf.MappingID = value.String
			}
		case entitlementplanfeature.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				epf.DeletedAt = value.Time
			}
		case entitlementplanfeature.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				epf.DeletedBy = value.String
			}
		case entitlementplanfeature.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &epf.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case entitlementplanfeature.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				epf.OwnerID = value.String
			}
		case entitlementplanfeature.FieldMetadata:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &epf.Metadata); err != nil {
					return fmt.Errorf("unmarshal field metadata: %w", err)
				}
			}
		case entitlementplanfeature.FieldPlanID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field plan_id", values[i])
			} else if value.Valid {
				epf.PlanID = value.String
			}
		case entitlementplanfeature.FieldStripeProductID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_product_id", values[i])
			} else if value.Valid {
				epf.StripeProductID = value.String
			}
		case entitlementplanfeature.FieldFeatureID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field feature_id", values[i])
			} else if value.Valid {
				epf.FeatureID = value.String
			}
		case entitlementplanfeature.FieldStripeFeatureID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_feature_id", values[i])
			} else if value.Valid {
				epf.StripeFeatureID = value.String
			}
		default:
			epf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntitlementPlanFeature.
// This includes values selected through modifiers, order, etc.
func (epf *EntitlementPlanFeature) Value(name string) (ent.Value, error) {
	return epf.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the EntitlementPlanFeature entity.
func (epf *EntitlementPlanFeature) QueryOwner() *OrganizationQuery {
	return NewEntitlementPlanFeatureClient(epf.config).QueryOwner(epf)
}

// QueryPlan queries the "plan" edge of the EntitlementPlanFeature entity.
func (epf *EntitlementPlanFeature) QueryPlan() *EntitlementPlanQuery {
	return NewEntitlementPlanFeatureClient(epf.config).QueryPlan(epf)
}

// QueryFeature queries the "feature" edge of the EntitlementPlanFeature entity.
func (epf *EntitlementPlanFeature) QueryFeature() *FeatureQuery {
	return NewEntitlementPlanFeatureClient(epf.config).QueryFeature(epf)
}

// QueryEvents queries the "events" edge of the EntitlementPlanFeature entity.
func (epf *EntitlementPlanFeature) QueryEvents() *EventQuery {
	return NewEntitlementPlanFeatureClient(epf.config).QueryEvents(epf)
}

// Update returns a builder for updating this EntitlementPlanFeature.
// Note that you need to call EntitlementPlanFeature.Unwrap() before calling this method if this EntitlementPlanFeature
// was returned from a transaction, and the transaction was committed or rolled back.
func (epf *EntitlementPlanFeature) Update() *EntitlementPlanFeatureUpdateOne {
	return NewEntitlementPlanFeatureClient(epf.config).UpdateOne(epf)
}

// Unwrap unwraps the EntitlementPlanFeature entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (epf *EntitlementPlanFeature) Unwrap() *EntitlementPlanFeature {
	_tx, ok := epf.config.driver.(*txDriver)
	if !ok {
		panic("generated: EntitlementPlanFeature is not a transactional entity")
	}
	epf.config.driver = _tx.drv
	return epf
}

// String implements the fmt.Stringer.
func (epf *EntitlementPlanFeature) String() string {
	var builder strings.Builder
	builder.WriteString("EntitlementPlanFeature(")
	builder.WriteString(fmt.Sprintf("id=%v, ", epf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(epf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(epf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(epf.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(epf.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(epf.MappingID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(epf.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(epf.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", epf.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(epf.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(fmt.Sprintf("%v", epf.Metadata))
	builder.WriteString(", ")
	builder.WriteString("plan_id=")
	builder.WriteString(epf.PlanID)
	builder.WriteString(", ")
	builder.WriteString("stripe_product_id=")
	builder.WriteString(epf.StripeProductID)
	builder.WriteString(", ")
	builder.WriteString("feature_id=")
	builder.WriteString(epf.FeatureID)
	builder.WriteString(", ")
	builder.WriteString("stripe_feature_id=")
	builder.WriteString(epf.StripeFeatureID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (epf *EntitlementPlanFeature) NamedEvents(name string) ([]*Event, error) {
	if epf.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := epf.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (epf *EntitlementPlanFeature) appendNamedEvents(name string, edges ...*Event) {
	if epf.Edges.namedEvents == nil {
		epf.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		epf.Edges.namedEvents[name] = []*Event{}
	} else {
		epf.Edges.namedEvents[name] = append(epf.Edges.namedEvents[name], edges...)
	}
}

// EntitlementPlanFeatures is a parsable slice of EntitlementPlanFeature.
type EntitlementPlanFeatures []*EntitlementPlanFeature
