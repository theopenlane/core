// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/control"
)

// Control is the model entity for the Control schema.
type Control struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the name of the control
	Name string `json:"name,omitempty"`
	// description of the control
	Description string `json:"description,omitempty"`
	// status of the control
	Status string `json:"status,omitempty"`
	// type of the control
	ControlType string `json:"control_type,omitempty"`
	// version of the control
	Version string `json:"version,omitempty"`
	// control number or identifier
	ControlNumber string `json:"control_number,omitempty"`
	// family associated with the control
	Family string `json:"family,omitempty"`
	// class associated with the control
	Class string `json:"class,omitempty"`
	// source of the control, e.g. framework, template, custom, etc.
	Source string `json:"source,omitempty"`
	// which control objectives are satisfied by the control
	Satisfies string `json:"satisfies,omitempty"`
	// mapped frameworks
	MappedFrameworks string `json:"mapped_frameworks,omitempty"`
	// json data including details of the control
	Details map[string]interface{} `json:"details,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ControlQuery when eager-loading is set.
	Edges                      ControlEdges `json:"edges"`
	control_objective_controls *string
	internal_policy_controls   *string
	selectValues               sql.SelectValues
}

// ControlEdges holds the relations/edges for other nodes in the graph.
type ControlEdges struct {
	// Procedures holds the value of the procedures edge.
	Procedures []*Procedure `json:"procedures,omitempty"`
	// Subcontrols holds the value of the subcontrols edge.
	Subcontrols []*Subcontrol `json:"subcontrols,omitempty"`
	// Controlobjectives holds the value of the controlobjectives edge.
	Controlobjectives []*ControlObjective `json:"controlobjectives,omitempty"`
	// Standard holds the value of the standard edge.
	Standard []*Standard `json:"standard,omitempty"`
	// Narratives holds the value of the narratives edge.
	Narratives []*Narrative `json:"narratives,omitempty"`
	// Risks holds the value of the risks edge.
	Risks []*Risk `json:"risks,omitempty"`
	// Actionplans holds the value of the actionplans edge.
	Actionplans []*ActionPlan `json:"actionplans,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
	// totalCount holds the count of the edges above.
	totalCount [9]map[string]int

	namedProcedures        map[string][]*Procedure
	namedSubcontrols       map[string][]*Subcontrol
	namedControlobjectives map[string][]*ControlObjective
	namedStandard          map[string][]*Standard
	namedNarratives        map[string][]*Narrative
	namedRisks             map[string][]*Risk
	namedActionplans       map[string][]*ActionPlan
	namedTasks             map[string][]*Task
	namedPrograms          map[string][]*Program
}

// ProceduresOrErr returns the Procedures value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) ProceduresOrErr() ([]*Procedure, error) {
	if e.loadedTypes[0] {
		return e.Procedures, nil
	}
	return nil, &NotLoadedError{edge: "procedures"}
}

// SubcontrolsOrErr returns the Subcontrols value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) SubcontrolsOrErr() ([]*Subcontrol, error) {
	if e.loadedTypes[1] {
		return e.Subcontrols, nil
	}
	return nil, &NotLoadedError{edge: "subcontrols"}
}

// ControlobjectivesOrErr returns the Controlobjectives value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) ControlobjectivesOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[2] {
		return e.Controlobjectives, nil
	}
	return nil, &NotLoadedError{edge: "controlobjectives"}
}

// StandardOrErr returns the Standard value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) StandardOrErr() ([]*Standard, error) {
	if e.loadedTypes[3] {
		return e.Standard, nil
	}
	return nil, &NotLoadedError{edge: "standard"}
}

// NarrativesOrErr returns the Narratives value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) NarrativesOrErr() ([]*Narrative, error) {
	if e.loadedTypes[4] {
		return e.Narratives, nil
	}
	return nil, &NotLoadedError{edge: "narratives"}
}

// RisksOrErr returns the Risks value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) RisksOrErr() ([]*Risk, error) {
	if e.loadedTypes[5] {
		return e.Risks, nil
	}
	return nil, &NotLoadedError{edge: "risks"}
}

// ActionplansOrErr returns the Actionplans value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) ActionplansOrErr() ([]*ActionPlan, error) {
	if e.loadedTypes[6] {
		return e.Actionplans, nil
	}
	return nil, &NotLoadedError{edge: "actionplans"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[7] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[8] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Control) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case control.FieldTags, control.FieldDetails:
			values[i] = new([]byte)
		case control.FieldID, control.FieldCreatedBy, control.FieldUpdatedBy, control.FieldDeletedBy, control.FieldMappingID, control.FieldName, control.FieldDescription, control.FieldStatus, control.FieldControlType, control.FieldVersion, control.FieldControlNumber, control.FieldFamily, control.FieldClass, control.FieldSource, control.FieldSatisfies, control.FieldMappedFrameworks:
			values[i] = new(sql.NullString)
		case control.FieldCreatedAt, control.FieldUpdatedAt, control.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case control.ForeignKeys[0]: // control_objective_controls
			values[i] = new(sql.NullString)
		case control.ForeignKeys[1]: // internal_policy_controls
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Control fields.
func (c *Control) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case control.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case control.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case control.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case control.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				c.CreatedBy = value.String
			}
		case control.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				c.UpdatedBy = value.String
			}
		case control.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = value.Time
			}
		case control.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				c.DeletedBy = value.String
			}
		case control.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				c.MappingID = value.String
			}
		case control.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case control.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case control.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case control.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = value.String
			}
		case control.FieldControlType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_type", values[i])
			} else if value.Valid {
				c.ControlType = value.String
			}
		case control.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				c.Version = value.String
			}
		case control.FieldControlNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_number", values[i])
			} else if value.Valid {
				c.ControlNumber = value.String
			}
		case control.FieldFamily:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field family", values[i])
			} else if value.Valid {
				c.Family = value.String
			}
		case control.FieldClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class", values[i])
			} else if value.Valid {
				c.Class = value.String
			}
		case control.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				c.Source = value.String
			}
		case control.FieldSatisfies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field satisfies", values[i])
			} else if value.Valid {
				c.Satisfies = value.String
			}
		case control.FieldMappedFrameworks:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapped_frameworks", values[i])
			} else if value.Valid {
				c.MappedFrameworks = value.String
			}
		case control.FieldDetails:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field details", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Details); err != nil {
					return fmt.Errorf("unmarshal field details: %w", err)
				}
			}
		case control.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_objective_controls", values[i])
			} else if value.Valid {
				c.control_objective_controls = new(string)
				*c.control_objective_controls = value.String
			}
		case control.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_policy_controls", values[i])
			} else if value.Valid {
				c.internal_policy_controls = new(string)
				*c.internal_policy_controls = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Control.
// This includes values selected through modifiers, order, etc.
func (c *Control) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryProcedures queries the "procedures" edge of the Control entity.
func (c *Control) QueryProcedures() *ProcedureQuery {
	return NewControlClient(c.config).QueryProcedures(c)
}

// QuerySubcontrols queries the "subcontrols" edge of the Control entity.
func (c *Control) QuerySubcontrols() *SubcontrolQuery {
	return NewControlClient(c.config).QuerySubcontrols(c)
}

// QueryControlobjectives queries the "controlobjectives" edge of the Control entity.
func (c *Control) QueryControlobjectives() *ControlObjectiveQuery {
	return NewControlClient(c.config).QueryControlobjectives(c)
}

// QueryStandard queries the "standard" edge of the Control entity.
func (c *Control) QueryStandard() *StandardQuery {
	return NewControlClient(c.config).QueryStandard(c)
}

// QueryNarratives queries the "narratives" edge of the Control entity.
func (c *Control) QueryNarratives() *NarrativeQuery {
	return NewControlClient(c.config).QueryNarratives(c)
}

// QueryRisks queries the "risks" edge of the Control entity.
func (c *Control) QueryRisks() *RiskQuery {
	return NewControlClient(c.config).QueryRisks(c)
}

// QueryActionplans queries the "actionplans" edge of the Control entity.
func (c *Control) QueryActionplans() *ActionPlanQuery {
	return NewControlClient(c.config).QueryActionplans(c)
}

// QueryTasks queries the "tasks" edge of the Control entity.
func (c *Control) QueryTasks() *TaskQuery {
	return NewControlClient(c.config).QueryTasks(c)
}

// QueryPrograms queries the "programs" edge of the Control entity.
func (c *Control) QueryPrograms() *ProgramQuery {
	return NewControlClient(c.config).QueryPrograms(c)
}

// Update returns a builder for updating this Control.
// Note that you need to call Control.Unwrap() before calling this method if this Control
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Control) Update() *ControlUpdateOne {
	return NewControlClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Control entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Control) Unwrap() *Control {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("generated: Control is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Control) String() string {
	var builder strings.Builder
	builder.WriteString("Control(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(c.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(c.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(c.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(c.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(c.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", c.Tags))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(c.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(c.Status)
	builder.WriteString(", ")
	builder.WriteString("control_type=")
	builder.WriteString(c.ControlType)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(c.Version)
	builder.WriteString(", ")
	builder.WriteString("control_number=")
	builder.WriteString(c.ControlNumber)
	builder.WriteString(", ")
	builder.WriteString("family=")
	builder.WriteString(c.Family)
	builder.WriteString(", ")
	builder.WriteString("class=")
	builder.WriteString(c.Class)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(c.Source)
	builder.WriteString(", ")
	builder.WriteString("satisfies=")
	builder.WriteString(c.Satisfies)
	builder.WriteString(", ")
	builder.WriteString("mapped_frameworks=")
	builder.WriteString(c.MappedFrameworks)
	builder.WriteString(", ")
	builder.WriteString("details=")
	builder.WriteString(fmt.Sprintf("%v", c.Details))
	builder.WriteByte(')')
	return builder.String()
}

// NamedProcedures returns the Procedures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedProcedures(name string) ([]*Procedure, error) {
	if c.Edges.namedProcedures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedProcedures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedProcedures(name string, edges ...*Procedure) {
	if c.Edges.namedProcedures == nil {
		c.Edges.namedProcedures = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		c.Edges.namedProcedures[name] = []*Procedure{}
	} else {
		c.Edges.namedProcedures[name] = append(c.Edges.namedProcedures[name], edges...)
	}
}

// NamedSubcontrols returns the Subcontrols named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedSubcontrols(name string) ([]*Subcontrol, error) {
	if c.Edges.namedSubcontrols == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedSubcontrols[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedSubcontrols(name string, edges ...*Subcontrol) {
	if c.Edges.namedSubcontrols == nil {
		c.Edges.namedSubcontrols = make(map[string][]*Subcontrol)
	}
	if len(edges) == 0 {
		c.Edges.namedSubcontrols[name] = []*Subcontrol{}
	} else {
		c.Edges.namedSubcontrols[name] = append(c.Edges.namedSubcontrols[name], edges...)
	}
}

// NamedControlobjectives returns the Controlobjectives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedControlobjectives(name string) ([]*ControlObjective, error) {
	if c.Edges.namedControlobjectives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedControlobjectives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedControlobjectives(name string, edges ...*ControlObjective) {
	if c.Edges.namedControlobjectives == nil {
		c.Edges.namedControlobjectives = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		c.Edges.namedControlobjectives[name] = []*ControlObjective{}
	} else {
		c.Edges.namedControlobjectives[name] = append(c.Edges.namedControlobjectives[name], edges...)
	}
}

// NamedStandard returns the Standard named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedStandard(name string) ([]*Standard, error) {
	if c.Edges.namedStandard == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedStandard[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedStandard(name string, edges ...*Standard) {
	if c.Edges.namedStandard == nil {
		c.Edges.namedStandard = make(map[string][]*Standard)
	}
	if len(edges) == 0 {
		c.Edges.namedStandard[name] = []*Standard{}
	} else {
		c.Edges.namedStandard[name] = append(c.Edges.namedStandard[name], edges...)
	}
}

// NamedNarratives returns the Narratives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedNarratives(name string) ([]*Narrative, error) {
	if c.Edges.namedNarratives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedNarratives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedNarratives(name string, edges ...*Narrative) {
	if c.Edges.namedNarratives == nil {
		c.Edges.namedNarratives = make(map[string][]*Narrative)
	}
	if len(edges) == 0 {
		c.Edges.namedNarratives[name] = []*Narrative{}
	} else {
		c.Edges.namedNarratives[name] = append(c.Edges.namedNarratives[name], edges...)
	}
}

// NamedRisks returns the Risks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedRisks(name string) ([]*Risk, error) {
	if c.Edges.namedRisks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedRisks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedRisks(name string, edges ...*Risk) {
	if c.Edges.namedRisks == nil {
		c.Edges.namedRisks = make(map[string][]*Risk)
	}
	if len(edges) == 0 {
		c.Edges.namedRisks[name] = []*Risk{}
	} else {
		c.Edges.namedRisks[name] = append(c.Edges.namedRisks[name], edges...)
	}
}

// NamedActionplans returns the Actionplans named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedActionplans(name string) ([]*ActionPlan, error) {
	if c.Edges.namedActionplans == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedActionplans[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedActionplans(name string, edges ...*ActionPlan) {
	if c.Edges.namedActionplans == nil {
		c.Edges.namedActionplans = make(map[string][]*ActionPlan)
	}
	if len(edges) == 0 {
		c.Edges.namedActionplans[name] = []*ActionPlan{}
	} else {
		c.Edges.namedActionplans[name] = append(c.Edges.namedActionplans[name], edges...)
	}
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedTasks(name string) ([]*Task, error) {
	if c.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedTasks(name string, edges ...*Task) {
	if c.Edges.namedTasks == nil {
		c.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		c.Edges.namedTasks[name] = []*Task{}
	} else {
		c.Edges.namedTasks[name] = append(c.Edges.namedTasks[name], edges...)
	}
}

// NamedPrograms returns the Programs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedPrograms(name string) ([]*Program, error) {
	if c.Edges.namedPrograms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedPrograms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedPrograms(name string, edges ...*Program) {
	if c.Edges.namedPrograms == nil {
		c.Edges.namedPrograms = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		c.Edges.namedPrograms[name] = []*Program{}
	} else {
		c.Edges.namedPrograms[name] = append(c.Edges.namedPrograms[name], edges...)
	}
}

// Controls is a parsable slice of Control.
type Controls []*Control
