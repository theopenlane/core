// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/core/pkg/models"
)

// Control is the model entity for the Control schema.
type Control struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// description of what the control is supposed to accomplish
	Description string `json:"description,omitempty"`
	// internal reference id of the control, can be used for internal tracking
	ReferenceID string `json:"reference_id,omitempty"`
	// external auditor id of the control, can be used to map to external audit partner mappings
	AuditorReferenceID string `json:"auditor_reference_id,omitempty"`
	// status of the control
	Status enums.ControlStatus `json:"status,omitempty"`
	// source of the control, e.g. framework, template, custom, etc.
	Source enums.ControlSource `json:"source,omitempty"`
	// type of the control e.g. preventive, detective, corrective, or deterrent.
	ControlType enums.ControlType `json:"control_type,omitempty"`
	// category of the control
	Category string `json:"category,omitempty"`
	// category id of the control
	CategoryID string `json:"category_id,omitempty"`
	// subcategory of the control
	Subcategory string `json:"subcategory,omitempty"`
	// mapped categories of the control to other standards
	MappedCategories []string `json:"mapped_categories,omitempty"`
	// objectives of the audit assessment for the control
	AssessmentObjectives []models.AssessmentObjective `json:"assessment_objectives,omitempty"`
	// methods used to verify the control implementation during an audit
	AssessmentMethods []models.AssessmentMethod `json:"assessment_methods,omitempty"`
	// questions to ask to verify the control
	ControlQuestions []string `json:"control_questions,omitempty"`
	// implementation guidance for the control
	ImplementationGuidance []models.ImplementationGuidance `json:"implementation_guidance,omitempty"`
	// examples of evidence for the control
	ExampleEvidence []models.ExampleEvidence `json:"example_evidence,omitempty"`
	// references for the control
	References []models.Reference `json:"references,omitempty"`
	// the unique reference code for the control
	RefCode string `json:"ref_code,omitempty"`
	// the id of the standard that the control belongs to, if applicable
	StandardID string `json:"standard_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ControlQuery when eager-loading is set.
	Edges                    ControlEdges `json:"edges"`
	control_control_owner    *string
	control_delegate         *string
	internal_policy_controls *string
	selectValues             sql.SelectValues
}

// ControlEdges holds the relations/edges for other nodes in the graph.
type ControlEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// groups that are blocked from viewing or editing the risk
	BlockedGroups []*Group `json:"blocked_groups,omitempty"`
	// provides edit access to the risk to members of the group
	Editors []*Group `json:"editors,omitempty"`
	// provides view access to the risk to members of the group
	Viewers []*Group `json:"viewers,omitempty"`
	// Standard holds the value of the standard edge.
	Standard *Standard `json:"standard,omitempty"`
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// Evidence holds the value of the evidence edge.
	Evidence []*Evidence `json:"evidence,omitempty"`
	// the implementation(s) of the control
	ControlImplementations []*ControlImplementation `json:"control_implementations,omitempty"`
	// mapped subcontrols that have a relation to another control or subcontrol
	MappedControls []*MappedControl `json:"mapped_controls,omitempty"`
	// ControlObjectives holds the value of the control_objectives edge.
	ControlObjectives []*ControlObjective `json:"control_objectives,omitempty"`
	// Subcontrols holds the value of the subcontrols edge.
	Subcontrols []*Subcontrol `json:"subcontrols,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Narratives holds the value of the narratives edge.
	Narratives []*Narrative `json:"narratives,omitempty"`
	// Risks holds the value of the risks edge.
	Risks []*Risk `json:"risks,omitempty"`
	// ActionPlans holds the value of the action_plans edge.
	ActionPlans []*ActionPlan `json:"action_plans,omitempty"`
	// Procedures holds the value of the procedures edge.
	Procedures []*Procedure `json:"procedures,omitempty"`
	// InternalPolicies holds the value of the internal_policies edge.
	InternalPolicies []*InternalPolicy `json:"internal_policies,omitempty"`
	// the group of users who are responsible for the control, will be assigned tasks, approval, etc.
	ControlOwner *Group `json:"control_owner,omitempty"`
	// temporary delegate for the control, used for temporary control ownership
	Delegate *Group `json:"delegate,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [19]bool
	// totalCount holds the count of the edges above.
	totalCount [19]map[string]int

	namedBlockedGroups          map[string][]*Group
	namedEditors                map[string][]*Group
	namedViewers                map[string][]*Group
	namedPrograms               map[string][]*Program
	namedEvidence               map[string][]*Evidence
	namedControlImplementations map[string][]*ControlImplementation
	namedMappedControls         map[string][]*MappedControl
	namedControlObjectives      map[string][]*ControlObjective
	namedSubcontrols            map[string][]*Subcontrol
	namedTasks                  map[string][]*Task
	namedNarratives             map[string][]*Narrative
	namedRisks                  map[string][]*Risk
	namedActionPlans            map[string][]*ActionPlan
	namedProcedures             map[string][]*Procedure
	namedInternalPolicies       map[string][]*InternalPolicy
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ControlEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// BlockedGroupsOrErr returns the BlockedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) BlockedGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.BlockedGroups, nil
	}
	return nil, &NotLoadedError{edge: "blocked_groups"}
}

// EditorsOrErr returns the Editors value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) EditorsOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.Editors, nil
	}
	return nil, &NotLoadedError{edge: "editors"}
}

// ViewersOrErr returns the Viewers value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) ViewersOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.Viewers, nil
	}
	return nil, &NotLoadedError{edge: "viewers"}
}

// StandardOrErr returns the Standard value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ControlEdges) StandardOrErr() (*Standard, error) {
	if e.Standard != nil {
		return e.Standard, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: standard.Label}
	}
	return nil, &NotLoadedError{edge: "standard"}
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[5] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// EvidenceOrErr returns the Evidence value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) EvidenceOrErr() ([]*Evidence, error) {
	if e.loadedTypes[6] {
		return e.Evidence, nil
	}
	return nil, &NotLoadedError{edge: "evidence"}
}

// ControlImplementationsOrErr returns the ControlImplementations value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) ControlImplementationsOrErr() ([]*ControlImplementation, error) {
	if e.loadedTypes[7] {
		return e.ControlImplementations, nil
	}
	return nil, &NotLoadedError{edge: "control_implementations"}
}

// MappedControlsOrErr returns the MappedControls value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) MappedControlsOrErr() ([]*MappedControl, error) {
	if e.loadedTypes[8] {
		return e.MappedControls, nil
	}
	return nil, &NotLoadedError{edge: "mapped_controls"}
}

// ControlObjectivesOrErr returns the ControlObjectives value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) ControlObjectivesOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[9] {
		return e.ControlObjectives, nil
	}
	return nil, &NotLoadedError{edge: "control_objectives"}
}

// SubcontrolsOrErr returns the Subcontrols value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) SubcontrolsOrErr() ([]*Subcontrol, error) {
	if e.loadedTypes[10] {
		return e.Subcontrols, nil
	}
	return nil, &NotLoadedError{edge: "subcontrols"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[11] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// NarrativesOrErr returns the Narratives value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) NarrativesOrErr() ([]*Narrative, error) {
	if e.loadedTypes[12] {
		return e.Narratives, nil
	}
	return nil, &NotLoadedError{edge: "narratives"}
}

// RisksOrErr returns the Risks value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) RisksOrErr() ([]*Risk, error) {
	if e.loadedTypes[13] {
		return e.Risks, nil
	}
	return nil, &NotLoadedError{edge: "risks"}
}

// ActionPlansOrErr returns the ActionPlans value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) ActionPlansOrErr() ([]*ActionPlan, error) {
	if e.loadedTypes[14] {
		return e.ActionPlans, nil
	}
	return nil, &NotLoadedError{edge: "action_plans"}
}

// ProceduresOrErr returns the Procedures value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) ProceduresOrErr() ([]*Procedure, error) {
	if e.loadedTypes[15] {
		return e.Procedures, nil
	}
	return nil, &NotLoadedError{edge: "procedures"}
}

// InternalPoliciesOrErr returns the InternalPolicies value or an error if the edge
// was not loaded in eager-loading.
func (e ControlEdges) InternalPoliciesOrErr() ([]*InternalPolicy, error) {
	if e.loadedTypes[16] {
		return e.InternalPolicies, nil
	}
	return nil, &NotLoadedError{edge: "internal_policies"}
}

// ControlOwnerOrErr returns the ControlOwner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ControlEdges) ControlOwnerOrErr() (*Group, error) {
	if e.ControlOwner != nil {
		return e.ControlOwner, nil
	} else if e.loadedTypes[17] {
		return nil, &NotFoundError{label: group.Label}
	}
	return nil, &NotLoadedError{edge: "control_owner"}
}

// DelegateOrErr returns the Delegate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ControlEdges) DelegateOrErr() (*Group, error) {
	if e.Delegate != nil {
		return e.Delegate, nil
	} else if e.loadedTypes[18] {
		return nil, &NotFoundError{label: group.Label}
	}
	return nil, &NotLoadedError{edge: "delegate"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Control) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case control.FieldTags, control.FieldMappedCategories, control.FieldAssessmentObjectives, control.FieldAssessmentMethods, control.FieldControlQuestions, control.FieldImplementationGuidance, control.FieldExampleEvidence, control.FieldReferences:
			values[i] = new([]byte)
		case control.FieldID, control.FieldCreatedBy, control.FieldUpdatedBy, control.FieldDeletedBy, control.FieldDisplayID, control.FieldOwnerID, control.FieldDescription, control.FieldReferenceID, control.FieldAuditorReferenceID, control.FieldStatus, control.FieldSource, control.FieldControlType, control.FieldCategory, control.FieldCategoryID, control.FieldSubcategory, control.FieldRefCode, control.FieldStandardID:
			values[i] = new(sql.NullString)
		case control.FieldCreatedAt, control.FieldUpdatedAt, control.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case control.ForeignKeys[0]: // control_control_owner
			values[i] = new(sql.NullString)
		case control.ForeignKeys[1]: // control_delegate
			values[i] = new(sql.NullString)
		case control.ForeignKeys[2]: // internal_policy_controls
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Control fields.
func (c *Control) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case control.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case control.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case control.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case control.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				c.CreatedBy = value.String
			}
		case control.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				c.UpdatedBy = value.String
			}
		case control.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				c.DeletedAt = value.Time
			}
		case control.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				c.DeletedBy = value.String
			}
		case control.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				c.DisplayID = value.String
			}
		case control.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case control.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				c.OwnerID = value.String
			}
		case control.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				c.Description = value.String
			}
		case control.FieldReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_id", values[i])
			} else if value.Valid {
				c.ReferenceID = value.String
			}
		case control.FieldAuditorReferenceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auditor_reference_id", values[i])
			} else if value.Valid {
				c.AuditorReferenceID = value.String
			}
		case control.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = enums.ControlStatus(value.String)
			}
		case control.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				c.Source = enums.ControlSource(value.String)
			}
		case control.FieldControlType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_type", values[i])
			} else if value.Valid {
				c.ControlType = enums.ControlType(value.String)
			}
		case control.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				c.Category = value.String
			}
		case control.FieldCategoryID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_id", values[i])
			} else if value.Valid {
				c.CategoryID = value.String
			}
		case control.FieldSubcategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcategory", values[i])
			} else if value.Valid {
				c.Subcategory = value.String
			}
		case control.FieldMappedCategories:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field mapped_categories", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.MappedCategories); err != nil {
					return fmt.Errorf("unmarshal field mapped_categories: %w", err)
				}
			}
		case control.FieldAssessmentObjectives:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_objectives", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.AssessmentObjectives); err != nil {
					return fmt.Errorf("unmarshal field assessment_objectives: %w", err)
				}
			}
		case control.FieldAssessmentMethods:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_methods", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.AssessmentMethods); err != nil {
					return fmt.Errorf("unmarshal field assessment_methods: %w", err)
				}
			}
		case control.FieldControlQuestions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field control_questions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.ControlQuestions); err != nil {
					return fmt.Errorf("unmarshal field control_questions: %w", err)
				}
			}
		case control.FieldImplementationGuidance:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field implementation_guidance", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.ImplementationGuidance); err != nil {
					return fmt.Errorf("unmarshal field implementation_guidance: %w", err)
				}
			}
		case control.FieldExampleEvidence:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field example_evidence", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.ExampleEvidence); err != nil {
					return fmt.Errorf("unmarshal field example_evidence: %w", err)
				}
			}
		case control.FieldReferences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field references", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &c.References); err != nil {
					return fmt.Errorf("unmarshal field references: %w", err)
				}
			}
		case control.FieldRefCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref_code", values[i])
			} else if value.Valid {
				c.RefCode = value.String
			}
		case control.FieldStandardID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field standard_id", values[i])
			} else if value.Valid {
				c.StandardID = value.String
			}
		case control.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_control_owner", values[i])
			} else if value.Valid {
				c.control_control_owner = new(string)
				*c.control_control_owner = value.String
			}
		case control.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_delegate", values[i])
			} else if value.Valid {
				c.control_delegate = new(string)
				*c.control_delegate = value.String
			}
		case control.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field internal_policy_controls", values[i])
			} else if value.Valid {
				c.internal_policy_controls = new(string)
				*c.internal_policy_controls = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Control.
// This includes values selected through modifiers, order, etc.
func (c *Control) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Control entity.
func (c *Control) QueryOwner() *OrganizationQuery {
	return NewControlClient(c.config).QueryOwner(c)
}

// QueryBlockedGroups queries the "blocked_groups" edge of the Control entity.
func (c *Control) QueryBlockedGroups() *GroupQuery {
	return NewControlClient(c.config).QueryBlockedGroups(c)
}

// QueryEditors queries the "editors" edge of the Control entity.
func (c *Control) QueryEditors() *GroupQuery {
	return NewControlClient(c.config).QueryEditors(c)
}

// QueryViewers queries the "viewers" edge of the Control entity.
func (c *Control) QueryViewers() *GroupQuery {
	return NewControlClient(c.config).QueryViewers(c)
}

// QueryStandard queries the "standard" edge of the Control entity.
func (c *Control) QueryStandard() *StandardQuery {
	return NewControlClient(c.config).QueryStandard(c)
}

// QueryPrograms queries the "programs" edge of the Control entity.
func (c *Control) QueryPrograms() *ProgramQuery {
	return NewControlClient(c.config).QueryPrograms(c)
}

// QueryEvidence queries the "evidence" edge of the Control entity.
func (c *Control) QueryEvidence() *EvidenceQuery {
	return NewControlClient(c.config).QueryEvidence(c)
}

// QueryControlImplementations queries the "control_implementations" edge of the Control entity.
func (c *Control) QueryControlImplementations() *ControlImplementationQuery {
	return NewControlClient(c.config).QueryControlImplementations(c)
}

// QueryMappedControls queries the "mapped_controls" edge of the Control entity.
func (c *Control) QueryMappedControls() *MappedControlQuery {
	return NewControlClient(c.config).QueryMappedControls(c)
}

// QueryControlObjectives queries the "control_objectives" edge of the Control entity.
func (c *Control) QueryControlObjectives() *ControlObjectiveQuery {
	return NewControlClient(c.config).QueryControlObjectives(c)
}

// QuerySubcontrols queries the "subcontrols" edge of the Control entity.
func (c *Control) QuerySubcontrols() *SubcontrolQuery {
	return NewControlClient(c.config).QuerySubcontrols(c)
}

// QueryTasks queries the "tasks" edge of the Control entity.
func (c *Control) QueryTasks() *TaskQuery {
	return NewControlClient(c.config).QueryTasks(c)
}

// QueryNarratives queries the "narratives" edge of the Control entity.
func (c *Control) QueryNarratives() *NarrativeQuery {
	return NewControlClient(c.config).QueryNarratives(c)
}

// QueryRisks queries the "risks" edge of the Control entity.
func (c *Control) QueryRisks() *RiskQuery {
	return NewControlClient(c.config).QueryRisks(c)
}

// QueryActionPlans queries the "action_plans" edge of the Control entity.
func (c *Control) QueryActionPlans() *ActionPlanQuery {
	return NewControlClient(c.config).QueryActionPlans(c)
}

// QueryProcedures queries the "procedures" edge of the Control entity.
func (c *Control) QueryProcedures() *ProcedureQuery {
	return NewControlClient(c.config).QueryProcedures(c)
}

// QueryInternalPolicies queries the "internal_policies" edge of the Control entity.
func (c *Control) QueryInternalPolicies() *InternalPolicyQuery {
	return NewControlClient(c.config).QueryInternalPolicies(c)
}

// QueryControlOwner queries the "control_owner" edge of the Control entity.
func (c *Control) QueryControlOwner() *GroupQuery {
	return NewControlClient(c.config).QueryControlOwner(c)
}

// QueryDelegate queries the "delegate" edge of the Control entity.
func (c *Control) QueryDelegate() *GroupQuery {
	return NewControlClient(c.config).QueryDelegate(c)
}

// Update returns a builder for updating this Control.
// Note that you need to call Control.Unwrap() before calling this method if this Control
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Control) Update() *ControlUpdateOne {
	return NewControlClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Control entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Control) Unwrap() *Control {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("generated: Control is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Control) String() string {
	var builder strings.Builder
	builder.WriteString("Control(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(c.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(c.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(c.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(c.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(c.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", c.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(c.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(c.Description)
	builder.WriteString(", ")
	builder.WriteString("reference_id=")
	builder.WriteString(c.ReferenceID)
	builder.WriteString(", ")
	builder.WriteString("auditor_reference_id=")
	builder.WriteString(c.AuditorReferenceID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", c.Source))
	builder.WriteString(", ")
	builder.WriteString("control_type=")
	builder.WriteString(fmt.Sprintf("%v", c.ControlType))
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(c.Category)
	builder.WriteString(", ")
	builder.WriteString("category_id=")
	builder.WriteString(c.CategoryID)
	builder.WriteString(", ")
	builder.WriteString("subcategory=")
	builder.WriteString(c.Subcategory)
	builder.WriteString(", ")
	builder.WriteString("mapped_categories=")
	builder.WriteString(fmt.Sprintf("%v", c.MappedCategories))
	builder.WriteString(", ")
	builder.WriteString("assessment_objectives=")
	builder.WriteString(fmt.Sprintf("%v", c.AssessmentObjectives))
	builder.WriteString(", ")
	builder.WriteString("assessment_methods=")
	builder.WriteString(fmt.Sprintf("%v", c.AssessmentMethods))
	builder.WriteString(", ")
	builder.WriteString("control_questions=")
	builder.WriteString(fmt.Sprintf("%v", c.ControlQuestions))
	builder.WriteString(", ")
	builder.WriteString("implementation_guidance=")
	builder.WriteString(fmt.Sprintf("%v", c.ImplementationGuidance))
	builder.WriteString(", ")
	builder.WriteString("example_evidence=")
	builder.WriteString(fmt.Sprintf("%v", c.ExampleEvidence))
	builder.WriteString(", ")
	builder.WriteString("references=")
	builder.WriteString(fmt.Sprintf("%v", c.References))
	builder.WriteString(", ")
	builder.WriteString("ref_code=")
	builder.WriteString(c.RefCode)
	builder.WriteString(", ")
	builder.WriteString("standard_id=")
	builder.WriteString(c.StandardID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedBlockedGroups returns the BlockedGroups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedBlockedGroups(name string) ([]*Group, error) {
	if c.Edges.namedBlockedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedBlockedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedBlockedGroups(name string, edges ...*Group) {
	if c.Edges.namedBlockedGroups == nil {
		c.Edges.namedBlockedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		c.Edges.namedBlockedGroups[name] = []*Group{}
	} else {
		c.Edges.namedBlockedGroups[name] = append(c.Edges.namedBlockedGroups[name], edges...)
	}
}

// NamedEditors returns the Editors named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedEditors(name string) ([]*Group, error) {
	if c.Edges.namedEditors == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedEditors[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedEditors(name string, edges ...*Group) {
	if c.Edges.namedEditors == nil {
		c.Edges.namedEditors = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		c.Edges.namedEditors[name] = []*Group{}
	} else {
		c.Edges.namedEditors[name] = append(c.Edges.namedEditors[name], edges...)
	}
}

// NamedViewers returns the Viewers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedViewers(name string) ([]*Group, error) {
	if c.Edges.namedViewers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedViewers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedViewers(name string, edges ...*Group) {
	if c.Edges.namedViewers == nil {
		c.Edges.namedViewers = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		c.Edges.namedViewers[name] = []*Group{}
	} else {
		c.Edges.namedViewers[name] = append(c.Edges.namedViewers[name], edges...)
	}
}

// NamedPrograms returns the Programs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedPrograms(name string) ([]*Program, error) {
	if c.Edges.namedPrograms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedPrograms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedPrograms(name string, edges ...*Program) {
	if c.Edges.namedPrograms == nil {
		c.Edges.namedPrograms = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		c.Edges.namedPrograms[name] = []*Program{}
	} else {
		c.Edges.namedPrograms[name] = append(c.Edges.namedPrograms[name], edges...)
	}
}

// NamedEvidence returns the Evidence named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedEvidence(name string) ([]*Evidence, error) {
	if c.Edges.namedEvidence == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedEvidence[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedEvidence(name string, edges ...*Evidence) {
	if c.Edges.namedEvidence == nil {
		c.Edges.namedEvidence = make(map[string][]*Evidence)
	}
	if len(edges) == 0 {
		c.Edges.namedEvidence[name] = []*Evidence{}
	} else {
		c.Edges.namedEvidence[name] = append(c.Edges.namedEvidence[name], edges...)
	}
}

// NamedControlImplementations returns the ControlImplementations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedControlImplementations(name string) ([]*ControlImplementation, error) {
	if c.Edges.namedControlImplementations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedControlImplementations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedControlImplementations(name string, edges ...*ControlImplementation) {
	if c.Edges.namedControlImplementations == nil {
		c.Edges.namedControlImplementations = make(map[string][]*ControlImplementation)
	}
	if len(edges) == 0 {
		c.Edges.namedControlImplementations[name] = []*ControlImplementation{}
	} else {
		c.Edges.namedControlImplementations[name] = append(c.Edges.namedControlImplementations[name], edges...)
	}
}

// NamedMappedControls returns the MappedControls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedMappedControls(name string) ([]*MappedControl, error) {
	if c.Edges.namedMappedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedMappedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedMappedControls(name string, edges ...*MappedControl) {
	if c.Edges.namedMappedControls == nil {
		c.Edges.namedMappedControls = make(map[string][]*MappedControl)
	}
	if len(edges) == 0 {
		c.Edges.namedMappedControls[name] = []*MappedControl{}
	} else {
		c.Edges.namedMappedControls[name] = append(c.Edges.namedMappedControls[name], edges...)
	}
}

// NamedControlObjectives returns the ControlObjectives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedControlObjectives(name string) ([]*ControlObjective, error) {
	if c.Edges.namedControlObjectives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedControlObjectives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedControlObjectives(name string, edges ...*ControlObjective) {
	if c.Edges.namedControlObjectives == nil {
		c.Edges.namedControlObjectives = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		c.Edges.namedControlObjectives[name] = []*ControlObjective{}
	} else {
		c.Edges.namedControlObjectives[name] = append(c.Edges.namedControlObjectives[name], edges...)
	}
}

// NamedSubcontrols returns the Subcontrols named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedSubcontrols(name string) ([]*Subcontrol, error) {
	if c.Edges.namedSubcontrols == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedSubcontrols[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedSubcontrols(name string, edges ...*Subcontrol) {
	if c.Edges.namedSubcontrols == nil {
		c.Edges.namedSubcontrols = make(map[string][]*Subcontrol)
	}
	if len(edges) == 0 {
		c.Edges.namedSubcontrols[name] = []*Subcontrol{}
	} else {
		c.Edges.namedSubcontrols[name] = append(c.Edges.namedSubcontrols[name], edges...)
	}
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedTasks(name string) ([]*Task, error) {
	if c.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedTasks(name string, edges ...*Task) {
	if c.Edges.namedTasks == nil {
		c.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		c.Edges.namedTasks[name] = []*Task{}
	} else {
		c.Edges.namedTasks[name] = append(c.Edges.namedTasks[name], edges...)
	}
}

// NamedNarratives returns the Narratives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedNarratives(name string) ([]*Narrative, error) {
	if c.Edges.namedNarratives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedNarratives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedNarratives(name string, edges ...*Narrative) {
	if c.Edges.namedNarratives == nil {
		c.Edges.namedNarratives = make(map[string][]*Narrative)
	}
	if len(edges) == 0 {
		c.Edges.namedNarratives[name] = []*Narrative{}
	} else {
		c.Edges.namedNarratives[name] = append(c.Edges.namedNarratives[name], edges...)
	}
}

// NamedRisks returns the Risks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedRisks(name string) ([]*Risk, error) {
	if c.Edges.namedRisks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedRisks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedRisks(name string, edges ...*Risk) {
	if c.Edges.namedRisks == nil {
		c.Edges.namedRisks = make(map[string][]*Risk)
	}
	if len(edges) == 0 {
		c.Edges.namedRisks[name] = []*Risk{}
	} else {
		c.Edges.namedRisks[name] = append(c.Edges.namedRisks[name], edges...)
	}
}

// NamedActionPlans returns the ActionPlans named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedActionPlans(name string) ([]*ActionPlan, error) {
	if c.Edges.namedActionPlans == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedActionPlans[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedActionPlans(name string, edges ...*ActionPlan) {
	if c.Edges.namedActionPlans == nil {
		c.Edges.namedActionPlans = make(map[string][]*ActionPlan)
	}
	if len(edges) == 0 {
		c.Edges.namedActionPlans[name] = []*ActionPlan{}
	} else {
		c.Edges.namedActionPlans[name] = append(c.Edges.namedActionPlans[name], edges...)
	}
}

// NamedProcedures returns the Procedures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedProcedures(name string) ([]*Procedure, error) {
	if c.Edges.namedProcedures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedProcedures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedProcedures(name string, edges ...*Procedure) {
	if c.Edges.namedProcedures == nil {
		c.Edges.namedProcedures = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		c.Edges.namedProcedures[name] = []*Procedure{}
	} else {
		c.Edges.namedProcedures[name] = append(c.Edges.namedProcedures[name], edges...)
	}
}

// NamedInternalPolicies returns the InternalPolicies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (c *Control) NamedInternalPolicies(name string) ([]*InternalPolicy, error) {
	if c.Edges.namedInternalPolicies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := c.Edges.namedInternalPolicies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (c *Control) appendNamedInternalPolicies(name string, edges ...*InternalPolicy) {
	if c.Edges.namedInternalPolicies == nil {
		c.Edges.namedInternalPolicies = make(map[string][]*InternalPolicy)
	}
	if len(edges) == 0 {
		c.Edges.namedInternalPolicies[name] = []*InternalPolicy{}
	} else {
		c.Edges.namedInternalPolicies[name] = append(c.Edges.namedInternalPolicies[name], edges...)
	}
}

// Controls is a parsable slice of Control.
type Controls []*Control
