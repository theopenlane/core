// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/programhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ProgramHistoryCreate is the builder for creating a ProgramHistory entity.
type ProgramHistoryCreate struct {
	config
	mutation *ProgramHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (phc *ProgramHistoryCreate) SetHistoryTime(t time.Time) *ProgramHistoryCreate {
	phc.mutation.SetHistoryTime(t)
	return phc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableHistoryTime(t *time.Time) *ProgramHistoryCreate {
	if t != nil {
		phc.SetHistoryTime(*t)
	}
	return phc
}

// SetRef sets the "ref" field.
func (phc *ProgramHistoryCreate) SetRef(s string) *ProgramHistoryCreate {
	phc.mutation.SetRef(s)
	return phc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableRef(s *string) *ProgramHistoryCreate {
	if s != nil {
		phc.SetRef(*s)
	}
	return phc
}

// SetOperation sets the "operation" field.
func (phc *ProgramHistoryCreate) SetOperation(ht history.OpType) *ProgramHistoryCreate {
	phc.mutation.SetOperation(ht)
	return phc
}

// SetCreatedAt sets the "created_at" field.
func (phc *ProgramHistoryCreate) SetCreatedAt(t time.Time) *ProgramHistoryCreate {
	phc.mutation.SetCreatedAt(t)
	return phc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableCreatedAt(t *time.Time) *ProgramHistoryCreate {
	if t != nil {
		phc.SetCreatedAt(*t)
	}
	return phc
}

// SetUpdatedAt sets the "updated_at" field.
func (phc *ProgramHistoryCreate) SetUpdatedAt(t time.Time) *ProgramHistoryCreate {
	phc.mutation.SetUpdatedAt(t)
	return phc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableUpdatedAt(t *time.Time) *ProgramHistoryCreate {
	if t != nil {
		phc.SetUpdatedAt(*t)
	}
	return phc
}

// SetCreatedBy sets the "created_by" field.
func (phc *ProgramHistoryCreate) SetCreatedBy(s string) *ProgramHistoryCreate {
	phc.mutation.SetCreatedBy(s)
	return phc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableCreatedBy(s *string) *ProgramHistoryCreate {
	if s != nil {
		phc.SetCreatedBy(*s)
	}
	return phc
}

// SetUpdatedBy sets the "updated_by" field.
func (phc *ProgramHistoryCreate) SetUpdatedBy(s string) *ProgramHistoryCreate {
	phc.mutation.SetUpdatedBy(s)
	return phc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableUpdatedBy(s *string) *ProgramHistoryCreate {
	if s != nil {
		phc.SetUpdatedBy(*s)
	}
	return phc
}

// SetMappingID sets the "mapping_id" field.
func (phc *ProgramHistoryCreate) SetMappingID(s string) *ProgramHistoryCreate {
	phc.mutation.SetMappingID(s)
	return phc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableMappingID(s *string) *ProgramHistoryCreate {
	if s != nil {
		phc.SetMappingID(*s)
	}
	return phc
}

// SetDeletedAt sets the "deleted_at" field.
func (phc *ProgramHistoryCreate) SetDeletedAt(t time.Time) *ProgramHistoryCreate {
	phc.mutation.SetDeletedAt(t)
	return phc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableDeletedAt(t *time.Time) *ProgramHistoryCreate {
	if t != nil {
		phc.SetDeletedAt(*t)
	}
	return phc
}

// SetDeletedBy sets the "deleted_by" field.
func (phc *ProgramHistoryCreate) SetDeletedBy(s string) *ProgramHistoryCreate {
	phc.mutation.SetDeletedBy(s)
	return phc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableDeletedBy(s *string) *ProgramHistoryCreate {
	if s != nil {
		phc.SetDeletedBy(*s)
	}
	return phc
}

// SetTags sets the "tags" field.
func (phc *ProgramHistoryCreate) SetTags(s []string) *ProgramHistoryCreate {
	phc.mutation.SetTags(s)
	return phc
}

// SetName sets the "name" field.
func (phc *ProgramHistoryCreate) SetName(s string) *ProgramHistoryCreate {
	phc.mutation.SetName(s)
	return phc
}

// SetDescription sets the "description" field.
func (phc *ProgramHistoryCreate) SetDescription(s string) *ProgramHistoryCreate {
	phc.mutation.SetDescription(s)
	return phc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableDescription(s *string) *ProgramHistoryCreate {
	if s != nil {
		phc.SetDescription(*s)
	}
	return phc
}

// SetStatus sets the "status" field.
func (phc *ProgramHistoryCreate) SetStatus(es enums.ProgramStatus) *ProgramHistoryCreate {
	phc.mutation.SetStatus(es)
	return phc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableStatus(es *enums.ProgramStatus) *ProgramHistoryCreate {
	if es != nil {
		phc.SetStatus(*es)
	}
	return phc
}

// SetStartDate sets the "start_date" field.
func (phc *ProgramHistoryCreate) SetStartDate(t time.Time) *ProgramHistoryCreate {
	phc.mutation.SetStartDate(t)
	return phc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableStartDate(t *time.Time) *ProgramHistoryCreate {
	if t != nil {
		phc.SetStartDate(*t)
	}
	return phc
}

// SetEndDate sets the "end_date" field.
func (phc *ProgramHistoryCreate) SetEndDate(t time.Time) *ProgramHistoryCreate {
	phc.mutation.SetEndDate(t)
	return phc
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableEndDate(t *time.Time) *ProgramHistoryCreate {
	if t != nil {
		phc.SetEndDate(*t)
	}
	return phc
}

// SetOrganizationID sets the "organization_id" field.
func (phc *ProgramHistoryCreate) SetOrganizationID(s string) *ProgramHistoryCreate {
	phc.mutation.SetOrganizationID(s)
	return phc
}

// SetAuditorReady sets the "auditor_ready" field.
func (phc *ProgramHistoryCreate) SetAuditorReady(b bool) *ProgramHistoryCreate {
	phc.mutation.SetAuditorReady(b)
	return phc
}

// SetNillableAuditorReady sets the "auditor_ready" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableAuditorReady(b *bool) *ProgramHistoryCreate {
	if b != nil {
		phc.SetAuditorReady(*b)
	}
	return phc
}

// SetAuditorWriteComments sets the "auditor_write_comments" field.
func (phc *ProgramHistoryCreate) SetAuditorWriteComments(b bool) *ProgramHistoryCreate {
	phc.mutation.SetAuditorWriteComments(b)
	return phc
}

// SetNillableAuditorWriteComments sets the "auditor_write_comments" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableAuditorWriteComments(b *bool) *ProgramHistoryCreate {
	if b != nil {
		phc.SetAuditorWriteComments(*b)
	}
	return phc
}

// SetAuditorReadComments sets the "auditor_read_comments" field.
func (phc *ProgramHistoryCreate) SetAuditorReadComments(b bool) *ProgramHistoryCreate {
	phc.mutation.SetAuditorReadComments(b)
	return phc
}

// SetNillableAuditorReadComments sets the "auditor_read_comments" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableAuditorReadComments(b *bool) *ProgramHistoryCreate {
	if b != nil {
		phc.SetAuditorReadComments(*b)
	}
	return phc
}

// SetID sets the "id" field.
func (phc *ProgramHistoryCreate) SetID(s string) *ProgramHistoryCreate {
	phc.mutation.SetID(s)
	return phc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (phc *ProgramHistoryCreate) SetNillableID(s *string) *ProgramHistoryCreate {
	if s != nil {
		phc.SetID(*s)
	}
	return phc
}

// Mutation returns the ProgramHistoryMutation object of the builder.
func (phc *ProgramHistoryCreate) Mutation() *ProgramHistoryMutation {
	return phc.mutation
}

// Save creates the ProgramHistory in the database.
func (phc *ProgramHistoryCreate) Save(ctx context.Context) (*ProgramHistory, error) {
	phc.defaults()
	return withHooks(ctx, phc.sqlSave, phc.mutation, phc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (phc *ProgramHistoryCreate) SaveX(ctx context.Context) *ProgramHistory {
	v, err := phc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (phc *ProgramHistoryCreate) Exec(ctx context.Context) error {
	_, err := phc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phc *ProgramHistoryCreate) ExecX(ctx context.Context) {
	if err := phc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (phc *ProgramHistoryCreate) defaults() {
	if _, ok := phc.mutation.HistoryTime(); !ok {
		v := programhistory.DefaultHistoryTime()
		phc.mutation.SetHistoryTime(v)
	}
	if _, ok := phc.mutation.CreatedAt(); !ok {
		v := programhistory.DefaultCreatedAt()
		phc.mutation.SetCreatedAt(v)
	}
	if _, ok := phc.mutation.UpdatedAt(); !ok {
		v := programhistory.DefaultUpdatedAt()
		phc.mutation.SetUpdatedAt(v)
	}
	if _, ok := phc.mutation.MappingID(); !ok {
		v := programhistory.DefaultMappingID()
		phc.mutation.SetMappingID(v)
	}
	if _, ok := phc.mutation.Tags(); !ok {
		v := programhistory.DefaultTags
		phc.mutation.SetTags(v)
	}
	if _, ok := phc.mutation.Status(); !ok {
		v := programhistory.DefaultStatus
		phc.mutation.SetStatus(v)
	}
	if _, ok := phc.mutation.AuditorReady(); !ok {
		v := programhistory.DefaultAuditorReady
		phc.mutation.SetAuditorReady(v)
	}
	if _, ok := phc.mutation.AuditorWriteComments(); !ok {
		v := programhistory.DefaultAuditorWriteComments
		phc.mutation.SetAuditorWriteComments(v)
	}
	if _, ok := phc.mutation.AuditorReadComments(); !ok {
		v := programhistory.DefaultAuditorReadComments
		phc.mutation.SetAuditorReadComments(v)
	}
	if _, ok := phc.mutation.ID(); !ok {
		v := programhistory.DefaultID()
		phc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (phc *ProgramHistoryCreate) check() error {
	if _, ok := phc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "ProgramHistory.history_time"`)}
	}
	if _, ok := phc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "ProgramHistory.operation"`)}
	}
	if v, ok := phc.mutation.Operation(); ok {
		if err := programhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "ProgramHistory.operation": %w`, err)}
		}
	}
	if _, ok := phc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "ProgramHistory.mapping_id"`)}
	}
	if _, ok := phc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ProgramHistory.name"`)}
	}
	if _, ok := phc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "ProgramHistory.status"`)}
	}
	if v, ok := phc.mutation.Status(); ok {
		if err := programhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProgramHistory.status": %w`, err)}
		}
	}
	if _, ok := phc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`generated: missing required field "ProgramHistory.organization_id"`)}
	}
	if _, ok := phc.mutation.AuditorReady(); !ok {
		return &ValidationError{Name: "auditor_ready", err: errors.New(`generated: missing required field "ProgramHistory.auditor_ready"`)}
	}
	if _, ok := phc.mutation.AuditorWriteComments(); !ok {
		return &ValidationError{Name: "auditor_write_comments", err: errors.New(`generated: missing required field "ProgramHistory.auditor_write_comments"`)}
	}
	if _, ok := phc.mutation.AuditorReadComments(); !ok {
		return &ValidationError{Name: "auditor_read_comments", err: errors.New(`generated: missing required field "ProgramHistory.auditor_read_comments"`)}
	}
	return nil
}

func (phc *ProgramHistoryCreate) sqlSave(ctx context.Context) (*ProgramHistory, error) {
	if err := phc.check(); err != nil {
		return nil, err
	}
	_node, _spec := phc.createSpec()
	if err := sqlgraph.CreateNode(ctx, phc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ProgramHistory.ID type: %T", _spec.ID.Value)
		}
	}
	phc.mutation.id = &_node.ID
	phc.mutation.done = true
	return _node, nil
}

func (phc *ProgramHistoryCreate) createSpec() (*ProgramHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ProgramHistory{config: phc.config}
		_spec = sqlgraph.NewCreateSpec(programhistory.Table, sqlgraph.NewFieldSpec(programhistory.FieldID, field.TypeString))
	)
	_spec.Schema = phc.schemaConfig.ProgramHistory
	if id, ok := phc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := phc.mutation.HistoryTime(); ok {
		_spec.SetField(programhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := phc.mutation.Ref(); ok {
		_spec.SetField(programhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := phc.mutation.Operation(); ok {
		_spec.SetField(programhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := phc.mutation.CreatedAt(); ok {
		_spec.SetField(programhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := phc.mutation.UpdatedAt(); ok {
		_spec.SetField(programhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := phc.mutation.CreatedBy(); ok {
		_spec.SetField(programhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := phc.mutation.UpdatedBy(); ok {
		_spec.SetField(programhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := phc.mutation.MappingID(); ok {
		_spec.SetField(programhistory.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := phc.mutation.DeletedAt(); ok {
		_spec.SetField(programhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := phc.mutation.DeletedBy(); ok {
		_spec.SetField(programhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := phc.mutation.Tags(); ok {
		_spec.SetField(programhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := phc.mutation.Name(); ok {
		_spec.SetField(programhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := phc.mutation.Description(); ok {
		_spec.SetField(programhistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := phc.mutation.Status(); ok {
		_spec.SetField(programhistory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := phc.mutation.StartDate(); ok {
		_spec.SetField(programhistory.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := phc.mutation.EndDate(); ok {
		_spec.SetField(programhistory.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := phc.mutation.OrganizationID(); ok {
		_spec.SetField(programhistory.FieldOrganizationID, field.TypeString, value)
		_node.OrganizationID = value
	}
	if value, ok := phc.mutation.AuditorReady(); ok {
		_spec.SetField(programhistory.FieldAuditorReady, field.TypeBool, value)
		_node.AuditorReady = value
	}
	if value, ok := phc.mutation.AuditorWriteComments(); ok {
		_spec.SetField(programhistory.FieldAuditorWriteComments, field.TypeBool, value)
		_node.AuditorWriteComments = value
	}
	if value, ok := phc.mutation.AuditorReadComments(); ok {
		_spec.SetField(programhistory.FieldAuditorReadComments, field.TypeBool, value)
		_node.AuditorReadComments = value
	}
	return _node, _spec
}

// ProgramHistoryCreateBulk is the builder for creating many ProgramHistory entities in bulk.
type ProgramHistoryCreateBulk struct {
	config
	err      error
	builders []*ProgramHistoryCreate
}

// Save creates the ProgramHistory entities in the database.
func (phcb *ProgramHistoryCreateBulk) Save(ctx context.Context) ([]*ProgramHistory, error) {
	if phcb.err != nil {
		return nil, phcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(phcb.builders))
	nodes := make([]*ProgramHistory, len(phcb.builders))
	mutators := make([]Mutator, len(phcb.builders))
	for i := range phcb.builders {
		func(i int, root context.Context) {
			builder := phcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProgramHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, phcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, phcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, phcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (phcb *ProgramHistoryCreateBulk) SaveX(ctx context.Context) []*ProgramHistory {
	v, err := phcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (phcb *ProgramHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := phcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (phcb *ProgramHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := phcb.Exec(ctx); err != nil {
		panic(err)
	}
}
