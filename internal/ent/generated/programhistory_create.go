// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/programhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ProgramHistoryCreate is the builder for creating a ProgramHistory entity.
type ProgramHistoryCreate struct {
	config
	mutation *ProgramHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (_c *ProgramHistoryCreate) SetHistoryTime(v time.Time) *ProgramHistoryCreate {
	_c.mutation.SetHistoryTime(v)
	return _c
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableHistoryTime(v *time.Time) *ProgramHistoryCreate {
	if v != nil {
		_c.SetHistoryTime(*v)
	}
	return _c
}

// SetRef sets the "ref" field.
func (_c *ProgramHistoryCreate) SetRef(v string) *ProgramHistoryCreate {
	_c.mutation.SetRef(v)
	return _c
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableRef(v *string) *ProgramHistoryCreate {
	if v != nil {
		_c.SetRef(*v)
	}
	return _c
}

// SetOperation sets the "operation" field.
func (_c *ProgramHistoryCreate) SetOperation(v history.OpType) *ProgramHistoryCreate {
	_c.mutation.SetOperation(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *ProgramHistoryCreate) SetCreatedAt(v time.Time) *ProgramHistoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableCreatedAt(v *time.Time) *ProgramHistoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ProgramHistoryCreate) SetUpdatedAt(v time.Time) *ProgramHistoryCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableUpdatedAt(v *time.Time) *ProgramHistoryCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *ProgramHistoryCreate) SetCreatedBy(v string) *ProgramHistoryCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableCreatedBy(v *string) *ProgramHistoryCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *ProgramHistoryCreate) SetUpdatedBy(v string) *ProgramHistoryCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableUpdatedBy(v *string) *ProgramHistoryCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *ProgramHistoryCreate) SetDeletedAt(v time.Time) *ProgramHistoryCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableDeletedAt(v *time.Time) *ProgramHistoryCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *ProgramHistoryCreate) SetDeletedBy(v string) *ProgramHistoryCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableDeletedBy(v *string) *ProgramHistoryCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetDisplayID sets the "display_id" field.
func (_c *ProgramHistoryCreate) SetDisplayID(v string) *ProgramHistoryCreate {
	_c.mutation.SetDisplayID(v)
	return _c
}

// SetTags sets the "tags" field.
func (_c *ProgramHistoryCreate) SetTags(v []string) *ProgramHistoryCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *ProgramHistoryCreate) SetOwnerID(v string) *ProgramHistoryCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableOwnerID(v *string) *ProgramHistoryCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *ProgramHistoryCreate) SetName(v string) *ProgramHistoryCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *ProgramHistoryCreate) SetDescription(v string) *ProgramHistoryCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableDescription(v *string) *ProgramHistoryCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *ProgramHistoryCreate) SetStatus(v enums.ProgramStatus) *ProgramHistoryCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableStatus(v *enums.ProgramStatus) *ProgramHistoryCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetProgramType sets the "program_type" field.
func (_c *ProgramHistoryCreate) SetProgramType(v enums.ProgramType) *ProgramHistoryCreate {
	_c.mutation.SetProgramType(v)
	return _c
}

// SetNillableProgramType sets the "program_type" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableProgramType(v *enums.ProgramType) *ProgramHistoryCreate {
	if v != nil {
		_c.SetProgramType(*v)
	}
	return _c
}

// SetFrameworkName sets the "framework_name" field.
func (_c *ProgramHistoryCreate) SetFrameworkName(v string) *ProgramHistoryCreate {
	_c.mutation.SetFrameworkName(v)
	return _c
}

// SetNillableFrameworkName sets the "framework_name" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableFrameworkName(v *string) *ProgramHistoryCreate {
	if v != nil {
		_c.SetFrameworkName(*v)
	}
	return _c
}

// SetStartDate sets the "start_date" field.
func (_c *ProgramHistoryCreate) SetStartDate(v time.Time) *ProgramHistoryCreate {
	_c.mutation.SetStartDate(v)
	return _c
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableStartDate(v *time.Time) *ProgramHistoryCreate {
	if v != nil {
		_c.SetStartDate(*v)
	}
	return _c
}

// SetEndDate sets the "end_date" field.
func (_c *ProgramHistoryCreate) SetEndDate(v time.Time) *ProgramHistoryCreate {
	_c.mutation.SetEndDate(v)
	return _c
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableEndDate(v *time.Time) *ProgramHistoryCreate {
	if v != nil {
		_c.SetEndDate(*v)
	}
	return _c
}

// SetAuditorReady sets the "auditor_ready" field.
func (_c *ProgramHistoryCreate) SetAuditorReady(v bool) *ProgramHistoryCreate {
	_c.mutation.SetAuditorReady(v)
	return _c
}

// SetNillableAuditorReady sets the "auditor_ready" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableAuditorReady(v *bool) *ProgramHistoryCreate {
	if v != nil {
		_c.SetAuditorReady(*v)
	}
	return _c
}

// SetAuditorWriteComments sets the "auditor_write_comments" field.
func (_c *ProgramHistoryCreate) SetAuditorWriteComments(v bool) *ProgramHistoryCreate {
	_c.mutation.SetAuditorWriteComments(v)
	return _c
}

// SetNillableAuditorWriteComments sets the "auditor_write_comments" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableAuditorWriteComments(v *bool) *ProgramHistoryCreate {
	if v != nil {
		_c.SetAuditorWriteComments(*v)
	}
	return _c
}

// SetAuditorReadComments sets the "auditor_read_comments" field.
func (_c *ProgramHistoryCreate) SetAuditorReadComments(v bool) *ProgramHistoryCreate {
	_c.mutation.SetAuditorReadComments(v)
	return _c
}

// SetNillableAuditorReadComments sets the "auditor_read_comments" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableAuditorReadComments(v *bool) *ProgramHistoryCreate {
	if v != nil {
		_c.SetAuditorReadComments(*v)
	}
	return _c
}

// SetAuditFirm sets the "audit_firm" field.
func (_c *ProgramHistoryCreate) SetAuditFirm(v string) *ProgramHistoryCreate {
	_c.mutation.SetAuditFirm(v)
	return _c
}

// SetNillableAuditFirm sets the "audit_firm" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableAuditFirm(v *string) *ProgramHistoryCreate {
	if v != nil {
		_c.SetAuditFirm(*v)
	}
	return _c
}

// SetAuditor sets the "auditor" field.
func (_c *ProgramHistoryCreate) SetAuditor(v string) *ProgramHistoryCreate {
	_c.mutation.SetAuditor(v)
	return _c
}

// SetNillableAuditor sets the "auditor" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableAuditor(v *string) *ProgramHistoryCreate {
	if v != nil {
		_c.SetAuditor(*v)
	}
	return _c
}

// SetAuditorEmail sets the "auditor_email" field.
func (_c *ProgramHistoryCreate) SetAuditorEmail(v string) *ProgramHistoryCreate {
	_c.mutation.SetAuditorEmail(v)
	return _c
}

// SetNillableAuditorEmail sets the "auditor_email" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableAuditorEmail(v *string) *ProgramHistoryCreate {
	if v != nil {
		_c.SetAuditorEmail(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ProgramHistoryCreate) SetID(v string) *ProgramHistoryCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ProgramHistoryCreate) SetNillableID(v *string) *ProgramHistoryCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the ProgramHistoryMutation object of the builder.
func (_c *ProgramHistoryCreate) Mutation() *ProgramHistoryMutation {
	return _c.mutation
}

// Save creates the ProgramHistory in the database.
func (_c *ProgramHistoryCreate) Save(ctx context.Context) (*ProgramHistory, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ProgramHistoryCreate) SaveX(ctx context.Context) *ProgramHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProgramHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProgramHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ProgramHistoryCreate) defaults() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		if programhistory.DefaultHistoryTime == nil {
			return fmt.Errorf("generated: uninitialized programhistory.DefaultHistoryTime (forgotten import generated/runtime?)")
		}
		v := programhistory.DefaultHistoryTime()
		_c.mutation.SetHistoryTime(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if programhistory.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized programhistory.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := programhistory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if programhistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized programhistory.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := programhistory.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := programhistory.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := programhistory.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.ProgramType(); !ok {
		v := programhistory.DefaultProgramType
		_c.mutation.SetProgramType(v)
	}
	if _, ok := _c.mutation.AuditorReady(); !ok {
		v := programhistory.DefaultAuditorReady
		_c.mutation.SetAuditorReady(v)
	}
	if _, ok := _c.mutation.AuditorWriteComments(); !ok {
		v := programhistory.DefaultAuditorWriteComments
		_c.mutation.SetAuditorWriteComments(v)
	}
	if _, ok := _c.mutation.AuditorReadComments(); !ok {
		v := programhistory.DefaultAuditorReadComments
		_c.mutation.SetAuditorReadComments(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if programhistory.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized programhistory.DefaultID (forgotten import generated/runtime?)")
		}
		v := programhistory.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *ProgramHistoryCreate) check() error {
	if _, ok := _c.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "ProgramHistory.history_time"`)}
	}
	if _, ok := _c.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "ProgramHistory.operation"`)}
	}
	if v, ok := _c.mutation.Operation(); ok {
		if err := programhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "ProgramHistory.operation": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "ProgramHistory.display_id"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "ProgramHistory.name"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "ProgramHistory.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := programhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ProgramHistory.status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ProgramType(); !ok {
		return &ValidationError{Name: "program_type", err: errors.New(`generated: missing required field "ProgramHistory.program_type"`)}
	}
	if v, ok := _c.mutation.ProgramType(); ok {
		if err := programhistory.ProgramTypeValidator(v); err != nil {
			return &ValidationError{Name: "program_type", err: fmt.Errorf(`generated: validator failed for field "ProgramHistory.program_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.AuditorReady(); !ok {
		return &ValidationError{Name: "auditor_ready", err: errors.New(`generated: missing required field "ProgramHistory.auditor_ready"`)}
	}
	if _, ok := _c.mutation.AuditorWriteComments(); !ok {
		return &ValidationError{Name: "auditor_write_comments", err: errors.New(`generated: missing required field "ProgramHistory.auditor_write_comments"`)}
	}
	if _, ok := _c.mutation.AuditorReadComments(); !ok {
		return &ValidationError{Name: "auditor_read_comments", err: errors.New(`generated: missing required field "ProgramHistory.auditor_read_comments"`)}
	}
	return nil
}

func (_c *ProgramHistoryCreate) sqlSave(ctx context.Context) (*ProgramHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ProgramHistory.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ProgramHistoryCreate) createSpec() (*ProgramHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ProgramHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(programhistory.Table, sqlgraph.NewFieldSpec(programhistory.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.ProgramHistory
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.HistoryTime(); ok {
		_spec.SetField(programhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := _c.mutation.Ref(); ok {
		_spec.SetField(programhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := _c.mutation.Operation(); ok {
		_spec.SetField(programhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(programhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(programhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(programhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(programhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(programhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(programhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.DisplayID(); ok {
		_spec.SetField(programhistory.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(programhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.OwnerID(); ok {
		_spec.SetField(programhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(programhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(programhistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(programhistory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.ProgramType(); ok {
		_spec.SetField(programhistory.FieldProgramType, field.TypeEnum, value)
		_node.ProgramType = value
	}
	if value, ok := _c.mutation.FrameworkName(); ok {
		_spec.SetField(programhistory.FieldFrameworkName, field.TypeString, value)
		_node.FrameworkName = value
	}
	if value, ok := _c.mutation.StartDate(); ok {
		_spec.SetField(programhistory.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := _c.mutation.EndDate(); ok {
		_spec.SetField(programhistory.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := _c.mutation.AuditorReady(); ok {
		_spec.SetField(programhistory.FieldAuditorReady, field.TypeBool, value)
		_node.AuditorReady = value
	}
	if value, ok := _c.mutation.AuditorWriteComments(); ok {
		_spec.SetField(programhistory.FieldAuditorWriteComments, field.TypeBool, value)
		_node.AuditorWriteComments = value
	}
	if value, ok := _c.mutation.AuditorReadComments(); ok {
		_spec.SetField(programhistory.FieldAuditorReadComments, field.TypeBool, value)
		_node.AuditorReadComments = value
	}
	if value, ok := _c.mutation.AuditFirm(); ok {
		_spec.SetField(programhistory.FieldAuditFirm, field.TypeString, value)
		_node.AuditFirm = value
	}
	if value, ok := _c.mutation.Auditor(); ok {
		_spec.SetField(programhistory.FieldAuditor, field.TypeString, value)
		_node.Auditor = value
	}
	if value, ok := _c.mutation.AuditorEmail(); ok {
		_spec.SetField(programhistory.FieldAuditorEmail, field.TypeString, value)
		_node.AuditorEmail = value
	}
	return _node, _spec
}

// ProgramHistoryCreateBulk is the builder for creating many ProgramHistory entities in bulk.
type ProgramHistoryCreateBulk struct {
	config
	err      error
	builders []*ProgramHistoryCreate
}

// Save creates the ProgramHistory entities in the database.
func (_c *ProgramHistoryCreateBulk) Save(ctx context.Context) ([]*ProgramHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ProgramHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProgramHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ProgramHistoryCreateBulk) SaveX(ctx context.Context) []*ProgramHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProgramHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProgramHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
