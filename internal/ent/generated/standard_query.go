// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/standard"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// StandardQuery is the builder for querying Standard entities.
type StandardQuery struct {
	config
	ctx                        *QueryContext
	order                      []standard.OrderOption
	inters                     []Interceptor
	predicates                 []predicate.Standard
	withControlobjectives      *ControlObjectiveQuery
	withControls               *ControlQuery
	withProcedures             *ProcedureQuery
	withActionplans            *ActionPlanQuery
	withPrograms               *ProgramQuery
	loadTotal                  []func(context.Context, []*Standard) error
	modifiers                  []func(*sql.Selector)
	withNamedControlobjectives map[string]*ControlObjectiveQuery
	withNamedControls          map[string]*ControlQuery
	withNamedProcedures        map[string]*ProcedureQuery
	withNamedActionplans       map[string]*ActionPlanQuery
	withNamedPrograms          map[string]*ProgramQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StandardQuery builder.
func (sq *StandardQuery) Where(ps ...predicate.Standard) *StandardQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *StandardQuery) Limit(limit int) *StandardQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *StandardQuery) Offset(offset int) *StandardQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *StandardQuery) Unique(unique bool) *StandardQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *StandardQuery) Order(o ...standard.OrderOption) *StandardQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryControlobjectives chains the current query on the "controlobjectives" edge.
func (sq *StandardQuery) QueryControlobjectives() *ControlObjectiveQuery {
	query := (&ControlObjectiveClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(standard.Table, standard.FieldID, selector),
			sqlgraph.To(controlobjective.Table, controlobjective.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, standard.ControlobjectivesTable, standard.ControlobjectivesPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.StandardControlobjectives
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControls chains the current query on the "controls" edge.
func (sq *StandardQuery) QueryControls() *ControlQuery {
	query := (&ControlClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(standard.Table, standard.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, standard.ControlsTable, standard.ControlsPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.StandardControls
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedures chains the current query on the "procedures" edge.
func (sq *StandardQuery) QueryProcedures() *ProcedureQuery {
	query := (&ProcedureClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(standard.Table, standard.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, standard.ProceduresTable, standard.ProceduresColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.Procedure
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryActionplans chains the current query on the "actionplans" edge.
func (sq *StandardQuery) QueryActionplans() *ActionPlanQuery {
	query := (&ActionPlanClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(standard.Table, standard.FieldID, selector),
			sqlgraph.To(actionplan.Table, actionplan.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, standard.ActionplansTable, standard.ActionplansPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.ActionPlan
		step.Edge.Schema = schemaConfig.StandardActionplans
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrograms chains the current query on the "programs" edge.
func (sq *StandardQuery) QueryPrograms() *ProgramQuery {
	query := (&ProgramClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(standard.Table, standard.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, standard.ProgramsTable, standard.ProgramsPrimaryKey...),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.StandardPrograms
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Standard entity from the query.
// Returns a *NotFoundError when no Standard was found.
func (sq *StandardQuery) First(ctx context.Context) (*Standard, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{standard.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *StandardQuery) FirstX(ctx context.Context) *Standard {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Standard ID from the query.
// Returns a *NotFoundError when no Standard ID was found.
func (sq *StandardQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{standard.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *StandardQuery) FirstIDX(ctx context.Context) string {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Standard entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Standard entity is found.
// Returns a *NotFoundError when no Standard entities are found.
func (sq *StandardQuery) Only(ctx context.Context) (*Standard, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{standard.Label}
	default:
		return nil, &NotSingularError{standard.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *StandardQuery) OnlyX(ctx context.Context) *Standard {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Standard ID in the query.
// Returns a *NotSingularError when more than one Standard ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *StandardQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{standard.Label}
	default:
		err = &NotSingularError{standard.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *StandardQuery) OnlyIDX(ctx context.Context) string {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Standards.
func (sq *StandardQuery) All(ctx context.Context) ([]*Standard, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryAll)
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Standard, *StandardQuery]()
	return withInterceptors[[]*Standard](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *StandardQuery) AllX(ctx context.Context) []*Standard {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Standard IDs.
func (sq *StandardQuery) IDs(ctx context.Context) (ids []string, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryIDs)
	if err = sq.Select(standard.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *StandardQuery) IDsX(ctx context.Context) []string {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *StandardQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryCount)
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*StandardQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *StandardQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *StandardQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryExist)
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *StandardQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StandardQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *StandardQuery) Clone() *StandardQuery {
	if sq == nil {
		return nil
	}
	return &StandardQuery{
		config:                sq.config,
		ctx:                   sq.ctx.Clone(),
		order:                 append([]standard.OrderOption{}, sq.order...),
		inters:                append([]Interceptor{}, sq.inters...),
		predicates:            append([]predicate.Standard{}, sq.predicates...),
		withControlobjectives: sq.withControlobjectives.Clone(),
		withControls:          sq.withControls.Clone(),
		withProcedures:        sq.withProcedures.Clone(),
		withActionplans:       sq.withActionplans.Clone(),
		withPrograms:          sq.withPrograms.Clone(),
		// clone intermediate query.
		sql:       sq.sql.Clone(),
		path:      sq.path,
		modifiers: append([]func(*sql.Selector){}, sq.modifiers...),
	}
}

// WithControlobjectives tells the query-builder to eager-load the nodes that are connected to
// the "controlobjectives" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithControlobjectives(opts ...func(*ControlObjectiveQuery)) *StandardQuery {
	query := (&ControlObjectiveClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withControlobjectives = query
	return sq
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithControls(opts ...func(*ControlQuery)) *StandardQuery {
	query := (&ControlClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withControls = query
	return sq
}

// WithProcedures tells the query-builder to eager-load the nodes that are connected to
// the "procedures" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithProcedures(opts ...func(*ProcedureQuery)) *StandardQuery {
	query := (&ProcedureClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withProcedures = query
	return sq
}

// WithActionplans tells the query-builder to eager-load the nodes that are connected to
// the "actionplans" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithActionplans(opts ...func(*ActionPlanQuery)) *StandardQuery {
	query := (&ActionPlanClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withActionplans = query
	return sq
}

// WithPrograms tells the query-builder to eager-load the nodes that are connected to
// the "programs" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithPrograms(opts ...func(*ProgramQuery)) *StandardQuery {
	query := (&ProgramClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withPrograms = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Standard.Query().
//		GroupBy(standard.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (sq *StandardQuery) GroupBy(field string, fields ...string) *StandardGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &StandardGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = standard.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Standard.Query().
//		Select(standard.FieldCreatedAt).
//		Scan(ctx, &v)
func (sq *StandardQuery) Select(fields ...string) *StandardSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &StandardSelect{StandardQuery: sq}
	sbuild.label = standard.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a StandardSelect configured with the given aggregations.
func (sq *StandardQuery) Aggregate(fns ...AggregateFunc) *StandardSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *StandardQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !standard.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	return nil
}

func (sq *StandardQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Standard, error) {
	var (
		nodes       = []*Standard{}
		_spec       = sq.querySpec()
		loadedTypes = [5]bool{
			sq.withControlobjectives != nil,
			sq.withControls != nil,
			sq.withProcedures != nil,
			sq.withActionplans != nil,
			sq.withPrograms != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Standard).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Standard{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = sq.schemaConfig.Standard
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withControlobjectives; query != nil {
		if err := sq.loadControlobjectives(ctx, query, nodes,
			func(n *Standard) { n.Edges.Controlobjectives = []*ControlObjective{} },
			func(n *Standard, e *ControlObjective) {
				n.Edges.Controlobjectives = append(n.Edges.Controlobjectives, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := sq.withControls; query != nil {
		if err := sq.loadControls(ctx, query, nodes,
			func(n *Standard) { n.Edges.Controls = []*Control{} },
			func(n *Standard, e *Control) { n.Edges.Controls = append(n.Edges.Controls, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withProcedures; query != nil {
		if err := sq.loadProcedures(ctx, query, nodes,
			func(n *Standard) { n.Edges.Procedures = []*Procedure{} },
			func(n *Standard, e *Procedure) { n.Edges.Procedures = append(n.Edges.Procedures, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withActionplans; query != nil {
		if err := sq.loadActionplans(ctx, query, nodes,
			func(n *Standard) { n.Edges.Actionplans = []*ActionPlan{} },
			func(n *Standard, e *ActionPlan) { n.Edges.Actionplans = append(n.Edges.Actionplans, e) }); err != nil {
			return nil, err
		}
	}
	if query := sq.withPrograms; query != nil {
		if err := sq.loadPrograms(ctx, query, nodes,
			func(n *Standard) { n.Edges.Programs = []*Program{} },
			func(n *Standard, e *Program) { n.Edges.Programs = append(n.Edges.Programs, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedControlobjectives {
		if err := sq.loadControlobjectives(ctx, query, nodes,
			func(n *Standard) { n.appendNamedControlobjectives(name) },
			func(n *Standard, e *ControlObjective) { n.appendNamedControlobjectives(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedControls {
		if err := sq.loadControls(ctx, query, nodes,
			func(n *Standard) { n.appendNamedControls(name) },
			func(n *Standard, e *Control) { n.appendNamedControls(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedProcedures {
		if err := sq.loadProcedures(ctx, query, nodes,
			func(n *Standard) { n.appendNamedProcedures(name) },
			func(n *Standard, e *Procedure) { n.appendNamedProcedures(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedActionplans {
		if err := sq.loadActionplans(ctx, query, nodes,
			func(n *Standard) { n.appendNamedActionplans(name) },
			func(n *Standard, e *ActionPlan) { n.appendNamedActionplans(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedPrograms {
		if err := sq.loadPrograms(ctx, query, nodes,
			func(n *Standard) { n.appendNamedPrograms(name) },
			func(n *Standard, e *Program) { n.appendNamedPrograms(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range sq.loadTotal {
		if err := sq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *StandardQuery) loadControlobjectives(ctx context.Context, query *ControlObjectiveQuery, nodes []*Standard, init func(*Standard), assign func(*Standard, *ControlObjective)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Standard)
	nids := make(map[string]map[*Standard]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(standard.ControlobjectivesTable)
		joinT.Schema(sq.schemaConfig.StandardControlobjectives)
		s.Join(joinT).On(s.C(controlobjective.FieldID), joinT.C(standard.ControlobjectivesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(standard.ControlobjectivesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(standard.ControlobjectivesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Standard]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlObjective](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "controlobjectives" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *StandardQuery) loadControls(ctx context.Context, query *ControlQuery, nodes []*Standard, init func(*Standard), assign func(*Standard, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Standard)
	nids := make(map[string]map[*Standard]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(standard.ControlsTable)
		joinT.Schema(sq.schemaConfig.StandardControls)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(standard.ControlsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(standard.ControlsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(standard.ControlsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Standard]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "controls" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *StandardQuery) loadProcedures(ctx context.Context, query *ProcedureQuery, nodes []*Standard, init func(*Standard), assign func(*Standard, *Procedure)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Standard)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Procedure(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(standard.ProceduresColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.standard_procedures
		if fk == nil {
			return fmt.Errorf(`foreign-key "standard_procedures" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "standard_procedures" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (sq *StandardQuery) loadActionplans(ctx context.Context, query *ActionPlanQuery, nodes []*Standard, init func(*Standard), assign func(*Standard, *ActionPlan)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Standard)
	nids := make(map[string]map[*Standard]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(standard.ActionplansTable)
		joinT.Schema(sq.schemaConfig.StandardActionplans)
		s.Join(joinT).On(s.C(actionplan.FieldID), joinT.C(standard.ActionplansPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(standard.ActionplansPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(standard.ActionplansPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Standard]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ActionPlan](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "actionplans" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (sq *StandardQuery) loadPrograms(ctx context.Context, query *ProgramQuery, nodes []*Standard, init func(*Standard), assign func(*Standard, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Standard)
	nids := make(map[string]map[*Standard]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(standard.ProgramsTable)
		joinT.Schema(sq.schemaConfig.StandardPrograms)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(standard.ProgramsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(standard.ProgramsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(standard.ProgramsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Standard]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "programs" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (sq *StandardQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	_spec.Node.Schema = sq.schemaConfig.Standard
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *StandardQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(standard.Table, standard.Columns, sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, standard.FieldID)
		for i := range fields {
			if fields[i] != standard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *StandardQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(standard.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = standard.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(sq.schemaConfig.Standard)
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range sq.modifiers {
		m(selector)
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sq *StandardQuery) Modify(modifiers ...func(s *sql.Selector)) *StandardSelect {
	sq.modifiers = append(sq.modifiers, modifiers...)
	return sq.Select()
}

// WithNamedControlobjectives tells the query-builder to eager-load the nodes that are connected to the "controlobjectives"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithNamedControlobjectives(name string, opts ...func(*ControlObjectiveQuery)) *StandardQuery {
	query := (&ControlObjectiveClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedControlobjectives == nil {
		sq.withNamedControlobjectives = make(map[string]*ControlObjectiveQuery)
	}
	sq.withNamedControlobjectives[name] = query
	return sq
}

// WithNamedControls tells the query-builder to eager-load the nodes that are connected to the "controls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithNamedControls(name string, opts ...func(*ControlQuery)) *StandardQuery {
	query := (&ControlClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedControls == nil {
		sq.withNamedControls = make(map[string]*ControlQuery)
	}
	sq.withNamedControls[name] = query
	return sq
}

// WithNamedProcedures tells the query-builder to eager-load the nodes that are connected to the "procedures"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithNamedProcedures(name string, opts ...func(*ProcedureQuery)) *StandardQuery {
	query := (&ProcedureClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedProcedures == nil {
		sq.withNamedProcedures = make(map[string]*ProcedureQuery)
	}
	sq.withNamedProcedures[name] = query
	return sq
}

// WithNamedActionplans tells the query-builder to eager-load the nodes that are connected to the "actionplans"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithNamedActionplans(name string, opts ...func(*ActionPlanQuery)) *StandardQuery {
	query := (&ActionPlanClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedActionplans == nil {
		sq.withNamedActionplans = make(map[string]*ActionPlanQuery)
	}
	sq.withNamedActionplans[name] = query
	return sq
}

// WithNamedPrograms tells the query-builder to eager-load the nodes that are connected to the "programs"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithNamedPrograms(name string, opts ...func(*ProgramQuery)) *StandardQuery {
	query := (&ProgramClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedPrograms == nil {
		sq.withNamedPrograms = make(map[string]*ProgramQuery)
	}
	sq.withNamedPrograms[name] = query
	return sq
}

// StandardGroupBy is the group-by builder for Standard entities.
type StandardGroupBy struct {
	selector
	build *StandardQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *StandardGroupBy) Aggregate(fns ...AggregateFunc) *StandardGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *StandardGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, ent.OpQueryGroupBy)
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StandardQuery, *StandardGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *StandardGroupBy) sqlScan(ctx context.Context, root *StandardQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// StandardSelect is the builder for selecting fields of Standard entities.
type StandardSelect struct {
	*StandardQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *StandardSelect) Aggregate(fns ...AggregateFunc) *StandardSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *StandardSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, ent.OpQuerySelect)
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StandardQuery, *StandardSelect](ctx, ss.StandardQuery, ss, ss.inters, v)
}

func (ss *StandardSelect) sqlScan(ctx context.Context, root *StandardQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ss *StandardSelect) Modify(modifiers ...func(s *sql.Selector)) *StandardSelect {
	ss.modifiers = append(ss.modifiers, modifiers...)
	return ss
}
