// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/standard"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// StandardQuery is the builder for querying Standard entities.
type StandardQuery struct {
	config
	ctx               *QueryContext
	order             []standard.OrderOption
	inters            []Interceptor
	predicates        []predicate.Standard
	withOwner         *OrganizationQuery
	withControls      *ControlQuery
	loadTotal         []func(context.Context, []*Standard) error
	modifiers         []func(*sql.Selector)
	withNamedControls map[string]*ControlQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StandardQuery builder.
func (sq *StandardQuery) Where(ps ...predicate.Standard) *StandardQuery {
	sq.predicates = append(sq.predicates, ps...)
	return sq
}

// Limit the number of records to be returned by this query.
func (sq *StandardQuery) Limit(limit int) *StandardQuery {
	sq.ctx.Limit = &limit
	return sq
}

// Offset to start from.
func (sq *StandardQuery) Offset(offset int) *StandardQuery {
	sq.ctx.Offset = &offset
	return sq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (sq *StandardQuery) Unique(unique bool) *StandardQuery {
	sq.ctx.Unique = &unique
	return sq
}

// Order specifies how the records should be ordered.
func (sq *StandardQuery) Order(o ...standard.OrderOption) *StandardQuery {
	sq.order = append(sq.order, o...)
	return sq
}

// QueryOwner chains the current query on the "owner" edge.
func (sq *StandardQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(standard.Table, standard.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, standard.OwnerTable, standard.OwnerColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Standard
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControls chains the current query on the "controls" edge.
func (sq *StandardQuery) QueryControls() *ControlQuery {
	query := (&ControlClient{config: sq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := sq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := sq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(standard.Table, standard.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, standard.ControlsTable, standard.ControlsColumn),
		)
		schemaConfig := sq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.Control
		fromU = sqlgraph.SetNeighbors(sq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Standard entity from the query.
// Returns a *NotFoundError when no Standard was found.
func (sq *StandardQuery) First(ctx context.Context) (*Standard, error) {
	nodes, err := sq.Limit(1).All(setContextOp(ctx, sq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{standard.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (sq *StandardQuery) FirstX(ctx context.Context) *Standard {
	node, err := sq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Standard ID from the query.
// Returns a *NotFoundError when no Standard ID was found.
func (sq *StandardQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sq.Limit(1).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{standard.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (sq *StandardQuery) FirstIDX(ctx context.Context) string {
	id, err := sq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Standard entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Standard entity is found.
// Returns a *NotFoundError when no Standard entities are found.
func (sq *StandardQuery) Only(ctx context.Context) (*Standard, error) {
	nodes, err := sq.Limit(2).All(setContextOp(ctx, sq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{standard.Label}
	default:
		return nil, &NotSingularError{standard.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (sq *StandardQuery) OnlyX(ctx context.Context) *Standard {
	node, err := sq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Standard ID in the query.
// Returns a *NotSingularError when more than one Standard ID is found.
// Returns a *NotFoundError when no entities are found.
func (sq *StandardQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = sq.Limit(2).IDs(setContextOp(ctx, sq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{standard.Label}
	default:
		err = &NotSingularError{standard.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (sq *StandardQuery) OnlyIDX(ctx context.Context) string {
	id, err := sq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Standards.
func (sq *StandardQuery) All(ctx context.Context) ([]*Standard, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryAll)
	if err := sq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Standard, *StandardQuery]()
	return withInterceptors[[]*Standard](ctx, sq, qr, sq.inters)
}

// AllX is like All, but panics if an error occurs.
func (sq *StandardQuery) AllX(ctx context.Context) []*Standard {
	nodes, err := sq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Standard IDs.
func (sq *StandardQuery) IDs(ctx context.Context) (ids []string, err error) {
	if sq.ctx.Unique == nil && sq.path != nil {
		sq.Unique(true)
	}
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryIDs)
	if err = sq.Select(standard.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (sq *StandardQuery) IDsX(ctx context.Context) []string {
	ids, err := sq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (sq *StandardQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryCount)
	if err := sq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, sq, querierCount[*StandardQuery](), sq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (sq *StandardQuery) CountX(ctx context.Context) int {
	count, err := sq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (sq *StandardQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, sq.ctx, ent.OpQueryExist)
	switch _, err := sq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (sq *StandardQuery) ExistX(ctx context.Context) bool {
	exist, err := sq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StandardQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (sq *StandardQuery) Clone() *StandardQuery {
	if sq == nil {
		return nil
	}
	return &StandardQuery{
		config:       sq.config,
		ctx:          sq.ctx.Clone(),
		order:        append([]standard.OrderOption{}, sq.order...),
		inters:       append([]Interceptor{}, sq.inters...),
		predicates:   append([]predicate.Standard{}, sq.predicates...),
		withOwner:    sq.withOwner.Clone(),
		withControls: sq.withControls.Clone(),
		// clone intermediate query.
		sql:       sq.sql.Clone(),
		path:      sq.path,
		modifiers: append([]func(*sql.Selector){}, sq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithOwner(opts ...func(*OrganizationQuery)) *StandardQuery {
	query := (&OrganizationClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withOwner = query
	return sq
}

// WithControls tells the query-builder to eager-load the nodes that are connected to
// the "controls" edge. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithControls(opts ...func(*ControlQuery)) *StandardQuery {
	query := (&ControlClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	sq.withControls = query
	return sq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Standard.Query().
//		GroupBy(standard.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (sq *StandardQuery) GroupBy(field string, fields ...string) *StandardGroupBy {
	sq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &StandardGroupBy{build: sq}
	grbuild.flds = &sq.ctx.Fields
	grbuild.label = standard.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Standard.Query().
//		Select(standard.FieldCreatedAt).
//		Scan(ctx, &v)
func (sq *StandardQuery) Select(fields ...string) *StandardSelect {
	sq.ctx.Fields = append(sq.ctx.Fields, fields...)
	sbuild := &StandardSelect{StandardQuery: sq}
	sbuild.label = standard.Label
	sbuild.flds, sbuild.scan = &sq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a StandardSelect configured with the given aggregations.
func (sq *StandardQuery) Aggregate(fns ...AggregateFunc) *StandardSelect {
	return sq.Select().Aggregate(fns...)
}

func (sq *StandardQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range sq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, sq); err != nil {
				return err
			}
		}
	}
	for _, f := range sq.ctx.Fields {
		if !standard.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if sq.path != nil {
		prev, err := sq.path(ctx)
		if err != nil {
			return err
		}
		sq.sql = prev
	}
	if standard.Policy == nil {
		return errors.New("generated: uninitialized standard.Policy (forgotten import generated/runtime?)")
	}
	if err := standard.Policy.EvalQuery(ctx, sq); err != nil {
		return err
	}
	return nil
}

func (sq *StandardQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Standard, error) {
	var (
		nodes       = []*Standard{}
		_spec       = sq.querySpec()
		loadedTypes = [2]bool{
			sq.withOwner != nil,
			sq.withControls != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Standard).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Standard{config: sq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = sq.schemaConfig.Standard
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, sq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := sq.withOwner; query != nil {
		if err := sq.loadOwner(ctx, query, nodes, nil,
			func(n *Standard, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := sq.withControls; query != nil {
		if err := sq.loadControls(ctx, query, nodes,
			func(n *Standard) { n.Edges.Controls = []*Control{} },
			func(n *Standard, e *Control) { n.Edges.Controls = append(n.Edges.Controls, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range sq.withNamedControls {
		if err := sq.loadControls(ctx, query, nodes,
			func(n *Standard) { n.appendNamedControls(name) },
			func(n *Standard, e *Control) { n.appendNamedControls(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range sq.loadTotal {
		if err := sq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (sq *StandardQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*Standard, init func(*Standard), assign func(*Standard, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Standard)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (sq *StandardQuery) loadControls(ctx context.Context, query *ControlQuery, nodes []*Standard, init func(*Standard), assign func(*Standard, *Control)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Standard)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(control.FieldStandardID)
	}
	query.Where(predicate.Control(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(standard.ControlsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.StandardID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "standard_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (sq *StandardQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := sq.querySpec()
	_spec.Node.Schema = sq.schemaConfig.Standard
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	if len(sq.modifiers) > 0 {
		_spec.Modifiers = sq.modifiers
	}
	_spec.Node.Columns = sq.ctx.Fields
	if len(sq.ctx.Fields) > 0 {
		_spec.Unique = sq.ctx.Unique != nil && *sq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, sq.driver, _spec)
}

func (sq *StandardQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(standard.Table, standard.Columns, sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString))
	_spec.From = sq.sql
	if unique := sq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if sq.path != nil {
		_spec.Unique = true
	}
	if fields := sq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, standard.FieldID)
		for i := range fields {
			if fields[i] != standard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if sq.withOwner != nil {
			_spec.Node.AddColumnOnce(standard.FieldOwnerID)
		}
	}
	if ps := sq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := sq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := sq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := sq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (sq *StandardQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(sq.driver.Dialect())
	t1 := builder.Table(standard.Table)
	columns := sq.ctx.Fields
	if len(columns) == 0 {
		columns = standard.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if sq.sql != nil {
		selector = sq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if sq.ctx.Unique != nil && *sq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(sq.schemaConfig.Standard)
	ctx = internal.NewSchemaConfigContext(ctx, sq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range sq.modifiers {
		m(selector)
	}
	for _, p := range sq.predicates {
		p(selector)
	}
	for _, p := range sq.order {
		p(selector)
	}
	if offset := sq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := sq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (sq *StandardQuery) Modify(modifiers ...func(s *sql.Selector)) *StandardSelect {
	sq.modifiers = append(sq.modifiers, modifiers...)
	return sq.Select()
}

// WithNamedControls tells the query-builder to eager-load the nodes that are connected to the "controls"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (sq *StandardQuery) WithNamedControls(name string, opts ...func(*ControlQuery)) *StandardQuery {
	query := (&ControlClient{config: sq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if sq.withNamedControls == nil {
		sq.withNamedControls = make(map[string]*ControlQuery)
	}
	sq.withNamedControls[name] = query
	return sq
}

// StandardGroupBy is the group-by builder for Standard entities.
type StandardGroupBy struct {
	selector
	build *StandardQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sgb *StandardGroupBy) Aggregate(fns ...AggregateFunc) *StandardGroupBy {
	sgb.fns = append(sgb.fns, fns...)
	return sgb
}

// Scan applies the selector query and scans the result into the given value.
func (sgb *StandardGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sgb.build.ctx, ent.OpQueryGroupBy)
	if err := sgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StandardQuery, *StandardGroupBy](ctx, sgb.build, sgb, sgb.build.inters, v)
}

func (sgb *StandardGroupBy) sqlScan(ctx context.Context, root *StandardQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(sgb.fns))
	for _, fn := range sgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*sgb.flds)+len(sgb.fns))
		for _, f := range *sgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*sgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// StandardSelect is the builder for selecting fields of Standard entities.
type StandardSelect struct {
	*StandardQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ss *StandardSelect) Aggregate(fns ...AggregateFunc) *StandardSelect {
	ss.fns = append(ss.fns, fns...)
	return ss
}

// Scan applies the selector query and scans the result into the given value.
func (ss *StandardSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ss.ctx, ent.OpQuerySelect)
	if err := ss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StandardQuery, *StandardSelect](ctx, ss.StandardQuery, ss, ss.inters, v)
}

func (ss *StandardSelect) sqlScan(ctx context.Context, root *StandardQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ss.fns))
	for _, fn := range ss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ss *StandardSelect) Modify(modifiers ...func(s *sql.Selector)) *StandardSelect {
	ss.modifiers = append(ss.modifiers, modifiers...)
	return ss
}
