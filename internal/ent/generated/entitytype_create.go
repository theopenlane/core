// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/user"
)

// EntityTypeCreate is the builder for creating a EntityType entity.
type EntityTypeCreate struct {
	config
	mutation *EntityTypeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (etc *EntityTypeCreate) SetCreatedAt(t time.Time) *EntityTypeCreate {
	etc.mutation.SetCreatedAt(t)
	return etc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableCreatedAt(t *time.Time) *EntityTypeCreate {
	if t != nil {
		etc.SetCreatedAt(*t)
	}
	return etc
}

// SetUpdatedAt sets the "updated_at" field.
func (etc *EntityTypeCreate) SetUpdatedAt(t time.Time) *EntityTypeCreate {
	etc.mutation.SetUpdatedAt(t)
	return etc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableUpdatedAt(t *time.Time) *EntityTypeCreate {
	if t != nil {
		etc.SetUpdatedAt(*t)
	}
	return etc
}

// SetCreatedByID sets the "created_by_id" field.
func (etc *EntityTypeCreate) SetCreatedByID(s string) *EntityTypeCreate {
	etc.mutation.SetCreatedByID(s)
	return etc
}

// SetNillableCreatedByID sets the "created_by_id" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableCreatedByID(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetCreatedByID(*s)
	}
	return etc
}

// SetUpdatedByID sets the "updated_by_id" field.
func (etc *EntityTypeCreate) SetUpdatedByID(s string) *EntityTypeCreate {
	etc.mutation.SetUpdatedByID(s)
	return etc
}

// SetNillableUpdatedByID sets the "updated_by_id" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableUpdatedByID(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetUpdatedByID(*s)
	}
	return etc
}

// SetCreatedByUserID sets the "created_by_user_id" field.
func (etc *EntityTypeCreate) SetCreatedByUserID(s string) *EntityTypeCreate {
	etc.mutation.SetCreatedByUserID(s)
	return etc
}

// SetNillableCreatedByUserID sets the "created_by_user_id" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableCreatedByUserID(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetCreatedByUserID(*s)
	}
	return etc
}

// SetUpdatedByUserID sets the "updated_by_user_id" field.
func (etc *EntityTypeCreate) SetUpdatedByUserID(s string) *EntityTypeCreate {
	etc.mutation.SetUpdatedByUserID(s)
	return etc
}

// SetNillableUpdatedByUserID sets the "updated_by_user_id" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableUpdatedByUserID(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetUpdatedByUserID(*s)
	}
	return etc
}

// SetCreatedByServiceID sets the "created_by_service_id" field.
func (etc *EntityTypeCreate) SetCreatedByServiceID(s string) *EntityTypeCreate {
	etc.mutation.SetCreatedByServiceID(s)
	return etc
}

// SetNillableCreatedByServiceID sets the "created_by_service_id" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableCreatedByServiceID(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetCreatedByServiceID(*s)
	}
	return etc
}

// SetUpdatedByServiceID sets the "updated_by_service_id" field.
func (etc *EntityTypeCreate) SetUpdatedByServiceID(s string) *EntityTypeCreate {
	etc.mutation.SetUpdatedByServiceID(s)
	return etc
}

// SetNillableUpdatedByServiceID sets the "updated_by_service_id" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableUpdatedByServiceID(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetUpdatedByServiceID(*s)
	}
	return etc
}

// SetMappingID sets the "mapping_id" field.
func (etc *EntityTypeCreate) SetMappingID(s string) *EntityTypeCreate {
	etc.mutation.SetMappingID(s)
	return etc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableMappingID(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetMappingID(*s)
	}
	return etc
}

// SetDeletedAt sets the "deleted_at" field.
func (etc *EntityTypeCreate) SetDeletedAt(t time.Time) *EntityTypeCreate {
	etc.mutation.SetDeletedAt(t)
	return etc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableDeletedAt(t *time.Time) *EntityTypeCreate {
	if t != nil {
		etc.SetDeletedAt(*t)
	}
	return etc
}

// SetDeletedByID sets the "deleted_by_id" field.
func (etc *EntityTypeCreate) SetDeletedByID(s string) *EntityTypeCreate {
	etc.mutation.SetDeletedByID(s)
	return etc
}

// SetNillableDeletedByID sets the "deleted_by_id" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableDeletedByID(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetDeletedByID(*s)
	}
	return etc
}

// SetTags sets the "tags" field.
func (etc *EntityTypeCreate) SetTags(s []string) *EntityTypeCreate {
	etc.mutation.SetTags(s)
	return etc
}

// SetOwnerID sets the "owner_id" field.
func (etc *EntityTypeCreate) SetOwnerID(s string) *EntityTypeCreate {
	etc.mutation.SetOwnerID(s)
	return etc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableOwnerID(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetOwnerID(*s)
	}
	return etc
}

// SetName sets the "name" field.
func (etc *EntityTypeCreate) SetName(s string) *EntityTypeCreate {
	etc.mutation.SetName(s)
	return etc
}

// SetID sets the "id" field.
func (etc *EntityTypeCreate) SetID(s string) *EntityTypeCreate {
	etc.mutation.SetID(s)
	return etc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (etc *EntityTypeCreate) SetNillableID(s *string) *EntityTypeCreate {
	if s != nil {
		etc.SetID(*s)
	}
	return etc
}

// SetCreatedByUser sets the "created_by_user" edge to the User entity.
func (etc *EntityTypeCreate) SetCreatedByUser(u *User) *EntityTypeCreate {
	return etc.SetCreatedByUserID(u.ID)
}

// SetUpdatedByUser sets the "updated_by_user" edge to the User entity.
func (etc *EntityTypeCreate) SetUpdatedByUser(u *User) *EntityTypeCreate {
	return etc.SetUpdatedByUserID(u.ID)
}

// SetCreatedByService sets the "created_by_service" edge to the APIToken entity.
func (etc *EntityTypeCreate) SetCreatedByService(a *APIToken) *EntityTypeCreate {
	return etc.SetCreatedByServiceID(a.ID)
}

// SetUpdatedByService sets the "updated_by_service" edge to the APIToken entity.
func (etc *EntityTypeCreate) SetUpdatedByService(a *APIToken) *EntityTypeCreate {
	return etc.SetUpdatedByServiceID(a.ID)
}

// SetOwner sets the "owner" edge to the Organization entity.
func (etc *EntityTypeCreate) SetOwner(o *Organization) *EntityTypeCreate {
	return etc.SetOwnerID(o.ID)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (etc *EntityTypeCreate) AddEntityIDs(ids ...string) *EntityTypeCreate {
	etc.mutation.AddEntityIDs(ids...)
	return etc
}

// AddEntities adds the "entities" edges to the Entity entity.
func (etc *EntityTypeCreate) AddEntities(e ...*Entity) *EntityTypeCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return etc.AddEntityIDs(ids...)
}

// Mutation returns the EntityTypeMutation object of the builder.
func (etc *EntityTypeCreate) Mutation() *EntityTypeMutation {
	return etc.mutation
}

// Save creates the EntityType in the database.
func (etc *EntityTypeCreate) Save(ctx context.Context) (*EntityType, error) {
	if err := etc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, etc.sqlSave, etc.mutation, etc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (etc *EntityTypeCreate) SaveX(ctx context.Context) *EntityType {
	v, err := etc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etc *EntityTypeCreate) Exec(ctx context.Context) error {
	_, err := etc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etc *EntityTypeCreate) ExecX(ctx context.Context) {
	if err := etc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (etc *EntityTypeCreate) defaults() error {
	if _, ok := etc.mutation.CreatedAt(); !ok {
		if entitytype.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitytype.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := entitytype.DefaultCreatedAt()
		etc.mutation.SetCreatedAt(v)
	}
	if _, ok := etc.mutation.UpdatedAt(); !ok {
		if entitytype.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitytype.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitytype.DefaultUpdatedAt()
		etc.mutation.SetUpdatedAt(v)
	}
	if _, ok := etc.mutation.MappingID(); !ok {
		if entitytype.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized entitytype.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := entitytype.DefaultMappingID()
		etc.mutation.SetMappingID(v)
	}
	if _, ok := etc.mutation.Tags(); !ok {
		v := entitytype.DefaultTags
		etc.mutation.SetTags(v)
	}
	if _, ok := etc.mutation.ID(); !ok {
		if entitytype.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized entitytype.DefaultID (forgotten import generated/runtime?)")
		}
		v := entitytype.DefaultID()
		etc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (etc *EntityTypeCreate) check() error {
	if _, ok := etc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "EntityType.mapping_id"`)}
	}
	if v, ok := etc.mutation.OwnerID(); ok {
		if err := entitytype.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "EntityType.owner_id": %w`, err)}
		}
	}
	if _, ok := etc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "EntityType.name"`)}
	}
	if v, ok := etc.mutation.Name(); ok {
		if err := entitytype.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "EntityType.name": %w`, err)}
		}
	}
	return nil
}

func (etc *EntityTypeCreate) sqlSave(ctx context.Context) (*EntityType, error) {
	if err := etc.check(); err != nil {
		return nil, err
	}
	_node, _spec := etc.createSpec()
	if err := sqlgraph.CreateNode(ctx, etc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected EntityType.ID type: %T", _spec.ID.Value)
		}
	}
	etc.mutation.id = &_node.ID
	etc.mutation.done = true
	return _node, nil
}

func (etc *EntityTypeCreate) createSpec() (*EntityType, *sqlgraph.CreateSpec) {
	var (
		_node = &EntityType{config: etc.config}
		_spec = sqlgraph.NewCreateSpec(entitytype.Table, sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString))
	)
	_spec.Schema = etc.schemaConfig.EntityType
	if id, ok := etc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := etc.mutation.CreatedAt(); ok {
		_spec.SetField(entitytype.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := etc.mutation.UpdatedAt(); ok {
		_spec.SetField(entitytype.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := etc.mutation.CreatedByID(); ok {
		_spec.SetField(entitytype.FieldCreatedByID, field.TypeString, value)
		_node.CreatedByID = value
	}
	if value, ok := etc.mutation.UpdatedByID(); ok {
		_spec.SetField(entitytype.FieldUpdatedByID, field.TypeString, value)
		_node.UpdatedByID = value
	}
	if value, ok := etc.mutation.MappingID(); ok {
		_spec.SetField(entitytype.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := etc.mutation.DeletedAt(); ok {
		_spec.SetField(entitytype.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := etc.mutation.DeletedByID(); ok {
		_spec.SetField(entitytype.FieldDeletedByID, field.TypeString, value)
		_node.DeletedByID = value
	}
	if value, ok := etc.mutation.Tags(); ok {
		_spec.SetField(entitytype.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := etc.mutation.Name(); ok {
		_spec.SetField(entitytype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := etc.mutation.CreatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entitytype.CreatedByUserTable,
			Columns: []string{entitytype.CreatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = etc.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedByUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.UpdatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entitytype.UpdatedByUserTable,
			Columns: []string{entitytype.UpdatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = etc.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedByUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.CreatedByServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entitytype.CreatedByServiceTable,
			Columns: []string{entitytype.CreatedByServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = etc.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatedByServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.UpdatedByServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   entitytype.UpdatedByServiceTable,
			Columns: []string{entitytype.UpdatedByServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = etc.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UpdatedByServiceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitytype.OwnerTable,
			Columns: []string{entitytype.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = etc.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := etc.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entitytype.EntitiesTable,
			Columns: []string{entitytype.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = etc.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntityTypeCreateBulk is the builder for creating many EntityType entities in bulk.
type EntityTypeCreateBulk struct {
	config
	err      error
	builders []*EntityTypeCreate
}

// Save creates the EntityType entities in the database.
func (etcb *EntityTypeCreateBulk) Save(ctx context.Context) ([]*EntityType, error) {
	if etcb.err != nil {
		return nil, etcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(etcb.builders))
	nodes := make([]*EntityType, len(etcb.builders))
	mutators := make([]Mutator, len(etcb.builders))
	for i := range etcb.builders {
		func(i int, root context.Context) {
			builder := etcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntityTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, etcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, etcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, etcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (etcb *EntityTypeCreateBulk) SaveX(ctx context.Context) []*EntityType {
	v, err := etcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (etcb *EntityTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := etcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (etcb *EntityTypeCreateBulk) ExecX(ctx context.Context) {
	if err := etcb.Exec(ctx); err != nil {
		panic(err)
	}
}
