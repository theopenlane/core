// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
)

// OrgSubscriptionCreate is the builder for creating a OrgSubscription entity.
type OrgSubscriptionCreate struct {
	config
	mutation *OrgSubscriptionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (osc *OrgSubscriptionCreate) SetCreatedAt(t time.Time) *OrgSubscriptionCreate {
	osc.mutation.SetCreatedAt(t)
	return osc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableCreatedAt(t *time.Time) *OrgSubscriptionCreate {
	if t != nil {
		osc.SetCreatedAt(*t)
	}
	return osc
}

// SetUpdatedAt sets the "updated_at" field.
func (osc *OrgSubscriptionCreate) SetUpdatedAt(t time.Time) *OrgSubscriptionCreate {
	osc.mutation.SetUpdatedAt(t)
	return osc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableUpdatedAt(t *time.Time) *OrgSubscriptionCreate {
	if t != nil {
		osc.SetUpdatedAt(*t)
	}
	return osc
}

// SetCreatedBy sets the "created_by" field.
func (osc *OrgSubscriptionCreate) SetCreatedBy(s string) *OrgSubscriptionCreate {
	osc.mutation.SetCreatedBy(s)
	return osc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableCreatedBy(s *string) *OrgSubscriptionCreate {
	if s != nil {
		osc.SetCreatedBy(*s)
	}
	return osc
}

// SetUpdatedBy sets the "updated_by" field.
func (osc *OrgSubscriptionCreate) SetUpdatedBy(s string) *OrgSubscriptionCreate {
	osc.mutation.SetUpdatedBy(s)
	return osc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableUpdatedBy(s *string) *OrgSubscriptionCreate {
	if s != nil {
		osc.SetUpdatedBy(*s)
	}
	return osc
}

// SetMappingID sets the "mapping_id" field.
func (osc *OrgSubscriptionCreate) SetMappingID(s string) *OrgSubscriptionCreate {
	osc.mutation.SetMappingID(s)
	return osc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableMappingID(s *string) *OrgSubscriptionCreate {
	if s != nil {
		osc.SetMappingID(*s)
	}
	return osc
}

// SetTags sets the "tags" field.
func (osc *OrgSubscriptionCreate) SetTags(s []string) *OrgSubscriptionCreate {
	osc.mutation.SetTags(s)
	return osc
}

// SetDeletedAt sets the "deleted_at" field.
func (osc *OrgSubscriptionCreate) SetDeletedAt(t time.Time) *OrgSubscriptionCreate {
	osc.mutation.SetDeletedAt(t)
	return osc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableDeletedAt(t *time.Time) *OrgSubscriptionCreate {
	if t != nil {
		osc.SetDeletedAt(*t)
	}
	return osc
}

// SetDeletedBy sets the "deleted_by" field.
func (osc *OrgSubscriptionCreate) SetDeletedBy(s string) *OrgSubscriptionCreate {
	osc.mutation.SetDeletedBy(s)
	return osc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableDeletedBy(s *string) *OrgSubscriptionCreate {
	if s != nil {
		osc.SetDeletedBy(*s)
	}
	return osc
}

// SetOwnerID sets the "owner_id" field.
func (osc *OrgSubscriptionCreate) SetOwnerID(s string) *OrgSubscriptionCreate {
	osc.mutation.SetOwnerID(s)
	return osc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableOwnerID(s *string) *OrgSubscriptionCreate {
	if s != nil {
		osc.SetOwnerID(*s)
	}
	return osc
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (osc *OrgSubscriptionCreate) SetStripeSubscriptionID(s string) *OrgSubscriptionCreate {
	osc.mutation.SetStripeSubscriptionID(s)
	return osc
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableStripeSubscriptionID(s *string) *OrgSubscriptionCreate {
	if s != nil {
		osc.SetStripeSubscriptionID(*s)
	}
	return osc
}

// SetProductTier sets the "product_tier" field.
func (osc *OrgSubscriptionCreate) SetProductTier(s string) *OrgSubscriptionCreate {
	osc.mutation.SetProductTier(s)
	return osc
}

// SetNillableProductTier sets the "product_tier" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableProductTier(s *string) *OrgSubscriptionCreate {
	if s != nil {
		osc.SetProductTier(*s)
	}
	return osc
}

// SetStripeProductTierID sets the "stripe_product_tier_id" field.
func (osc *OrgSubscriptionCreate) SetStripeProductTierID(s string) *OrgSubscriptionCreate {
	osc.mutation.SetStripeProductTierID(s)
	return osc
}

// SetNillableStripeProductTierID sets the "stripe_product_tier_id" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableStripeProductTierID(s *string) *OrgSubscriptionCreate {
	if s != nil {
		osc.SetStripeProductTierID(*s)
	}
	return osc
}

// SetStripeSubscriptionStatus sets the "stripe_subscription_status" field.
func (osc *OrgSubscriptionCreate) SetStripeSubscriptionStatus(s string) *OrgSubscriptionCreate {
	osc.mutation.SetStripeSubscriptionStatus(s)
	return osc
}

// SetNillableStripeSubscriptionStatus sets the "stripe_subscription_status" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableStripeSubscriptionStatus(s *string) *OrgSubscriptionCreate {
	if s != nil {
		osc.SetStripeSubscriptionStatus(*s)
	}
	return osc
}

// SetActive sets the "active" field.
func (osc *OrgSubscriptionCreate) SetActive(b bool) *OrgSubscriptionCreate {
	osc.mutation.SetActive(b)
	return osc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableActive(b *bool) *OrgSubscriptionCreate {
	if b != nil {
		osc.SetActive(*b)
	}
	return osc
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (osc *OrgSubscriptionCreate) SetStripeCustomerID(s string) *OrgSubscriptionCreate {
	osc.mutation.SetStripeCustomerID(s)
	return osc
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableStripeCustomerID(s *string) *OrgSubscriptionCreate {
	if s != nil {
		osc.SetStripeCustomerID(*s)
	}
	return osc
}

// SetExpiresAt sets the "expires_at" field.
func (osc *OrgSubscriptionCreate) SetExpiresAt(t time.Time) *OrgSubscriptionCreate {
	osc.mutation.SetExpiresAt(t)
	return osc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableExpiresAt(t *time.Time) *OrgSubscriptionCreate {
	if t != nil {
		osc.SetExpiresAt(*t)
	}
	return osc
}

// SetFeatures sets the "features" field.
func (osc *OrgSubscriptionCreate) SetFeatures(s []string) *OrgSubscriptionCreate {
	osc.mutation.SetFeatures(s)
	return osc
}

// SetID sets the "id" field.
func (osc *OrgSubscriptionCreate) SetID(s string) *OrgSubscriptionCreate {
	osc.mutation.SetID(s)
	return osc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (osc *OrgSubscriptionCreate) SetNillableID(s *string) *OrgSubscriptionCreate {
	if s != nil {
		osc.SetID(*s)
	}
	return osc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (osc *OrgSubscriptionCreate) SetOwner(o *Organization) *OrgSubscriptionCreate {
	return osc.SetOwnerID(o.ID)
}

// Mutation returns the OrgSubscriptionMutation object of the builder.
func (osc *OrgSubscriptionCreate) Mutation() *OrgSubscriptionMutation {
	return osc.mutation
}

// Save creates the OrgSubscription in the database.
func (osc *OrgSubscriptionCreate) Save(ctx context.Context) (*OrgSubscription, error) {
	if err := osc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OrgSubscriptionCreate) SaveX(ctx context.Context) *OrgSubscription {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OrgSubscriptionCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OrgSubscriptionCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osc *OrgSubscriptionCreate) defaults() error {
	if _, ok := osc.mutation.CreatedAt(); !ok {
		if orgsubscription.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgsubscription.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := orgsubscription.DefaultCreatedAt()
		osc.mutation.SetCreatedAt(v)
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		if orgsubscription.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized orgsubscription.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := orgsubscription.DefaultUpdatedAt()
		osc.mutation.SetUpdatedAt(v)
	}
	if _, ok := osc.mutation.MappingID(); !ok {
		if orgsubscription.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized orgsubscription.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := orgsubscription.DefaultMappingID()
		osc.mutation.SetMappingID(v)
	}
	if _, ok := osc.mutation.Tags(); !ok {
		v := orgsubscription.DefaultTags
		osc.mutation.SetTags(v)
	}
	if _, ok := osc.mutation.Active(); !ok {
		v := orgsubscription.DefaultActive
		osc.mutation.SetActive(v)
	}
	if _, ok := osc.mutation.ID(); !ok {
		if orgsubscription.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized orgsubscription.DefaultID (forgotten import generated/runtime?)")
		}
		v := orgsubscription.DefaultID()
		osc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (osc *OrgSubscriptionCreate) check() error {
	if _, ok := osc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "OrgSubscription.mapping_id"`)}
	}
	if v, ok := osc.mutation.OwnerID(); ok {
		if err := orgsubscription.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "OrgSubscription.owner_id": %w`, err)}
		}
	}
	if _, ok := osc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`generated: missing required field "OrgSubscription.active"`)}
	}
	return nil
}

func (osc *OrgSubscriptionCreate) sqlSave(ctx context.Context) (*OrgSubscription, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrgSubscription.ID type: %T", _spec.ID.Value)
		}
	}
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OrgSubscriptionCreate) createSpec() (*OrgSubscription, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgSubscription{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(orgsubscription.Table, sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString))
	)
	_spec.Schema = osc.schemaConfig.OrgSubscription
	if id, ok := osc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := osc.mutation.CreatedAt(); ok {
		_spec.SetField(orgsubscription.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := osc.mutation.UpdatedAt(); ok {
		_spec.SetField(orgsubscription.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := osc.mutation.CreatedBy(); ok {
		_spec.SetField(orgsubscription.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := osc.mutation.UpdatedBy(); ok {
		_spec.SetField(orgsubscription.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := osc.mutation.MappingID(); ok {
		_spec.SetField(orgsubscription.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := osc.mutation.Tags(); ok {
		_spec.SetField(orgsubscription.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := osc.mutation.DeletedAt(); ok {
		_spec.SetField(orgsubscription.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := osc.mutation.DeletedBy(); ok {
		_spec.SetField(orgsubscription.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := osc.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(orgsubscription.FieldStripeSubscriptionID, field.TypeString, value)
		_node.StripeSubscriptionID = value
	}
	if value, ok := osc.mutation.ProductTier(); ok {
		_spec.SetField(orgsubscription.FieldProductTier, field.TypeString, value)
		_node.ProductTier = value
	}
	if value, ok := osc.mutation.StripeProductTierID(); ok {
		_spec.SetField(orgsubscription.FieldStripeProductTierID, field.TypeString, value)
		_node.StripeProductTierID = value
	}
	if value, ok := osc.mutation.StripeSubscriptionStatus(); ok {
		_spec.SetField(orgsubscription.FieldStripeSubscriptionStatus, field.TypeString, value)
		_node.StripeSubscriptionStatus = value
	}
	if value, ok := osc.mutation.Active(); ok {
		_spec.SetField(orgsubscription.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := osc.mutation.StripeCustomerID(); ok {
		_spec.SetField(orgsubscription.FieldStripeCustomerID, field.TypeString, value)
		_node.StripeCustomerID = value
	}
	if value, ok := osc.mutation.ExpiresAt(); ok {
		_spec.SetField(orgsubscription.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if value, ok := osc.mutation.Features(); ok {
		_spec.SetField(orgsubscription.FieldFeatures, field.TypeJSON, value)
		_node.Features = value
	}
	if nodes := osc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   orgsubscription.OwnerTable,
			Columns: []string{orgsubscription.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = osc.schemaConfig.OrgSubscription
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrgSubscriptionCreateBulk is the builder for creating many OrgSubscription entities in bulk.
type OrgSubscriptionCreateBulk struct {
	config
	err      error
	builders []*OrgSubscriptionCreate
}

// Save creates the OrgSubscription entities in the database.
func (oscb *OrgSubscriptionCreateBulk) Save(ctx context.Context) ([]*OrgSubscription, error) {
	if oscb.err != nil {
		return nil, oscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OrgSubscription, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgSubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OrgSubscriptionCreateBulk) SaveX(ctx context.Context) []*OrgSubscription {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OrgSubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OrgSubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}
