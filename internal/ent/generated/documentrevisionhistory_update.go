// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/documentrevisionhistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// DocumentRevisionHistoryUpdate is the builder for updating DocumentRevisionHistory entities.
type DocumentRevisionHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *DocumentRevisionHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the DocumentRevisionHistoryUpdate builder.
func (drhu *DocumentRevisionHistoryUpdate) Where(ps ...predicate.DocumentRevisionHistory) *DocumentRevisionHistoryUpdate {
	drhu.mutation.Where(ps...)
	return drhu
}

// SetUpdatedAt sets the "updated_at" field.
func (drhu *DocumentRevisionHistoryUpdate) SetUpdatedAt(t time.Time) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetUpdatedAt(t)
	return drhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearUpdatedAt() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearUpdatedAt()
	return drhu
}

// SetUpdatedBy sets the "updated_by" field.
func (drhu *DocumentRevisionHistoryUpdate) SetUpdatedBy(s string) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetUpdatedBy(s)
	return drhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (drhu *DocumentRevisionHistoryUpdate) SetNillableUpdatedBy(s *string) *DocumentRevisionHistoryUpdate {
	if s != nil {
		drhu.SetUpdatedBy(*s)
	}
	return drhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearUpdatedBy() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearUpdatedBy()
	return drhu
}

// SetDeletedAt sets the "deleted_at" field.
func (drhu *DocumentRevisionHistoryUpdate) SetDeletedAt(t time.Time) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetDeletedAt(t)
	return drhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (drhu *DocumentRevisionHistoryUpdate) SetNillableDeletedAt(t *time.Time) *DocumentRevisionHistoryUpdate {
	if t != nil {
		drhu.SetDeletedAt(*t)
	}
	return drhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearDeletedAt() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearDeletedAt()
	return drhu
}

// SetDeletedBy sets the "deleted_by" field.
func (drhu *DocumentRevisionHistoryUpdate) SetDeletedBy(s string) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetDeletedBy(s)
	return drhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (drhu *DocumentRevisionHistoryUpdate) SetNillableDeletedBy(s *string) *DocumentRevisionHistoryUpdate {
	if s != nil {
		drhu.SetDeletedBy(*s)
	}
	return drhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearDeletedBy() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearDeletedBy()
	return drhu
}

// SetTags sets the "tags" field.
func (drhu *DocumentRevisionHistoryUpdate) SetTags(s []string) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetTags(s)
	return drhu
}

// AppendTags appends s to the "tags" field.
func (drhu *DocumentRevisionHistoryUpdate) AppendTags(s []string) *DocumentRevisionHistoryUpdate {
	drhu.mutation.AppendTags(s)
	return drhu
}

// ClearTags clears the value of the "tags" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearTags() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearTags()
	return drhu
}

// SetRevision sets the "revision" field.
func (drhu *DocumentRevisionHistoryUpdate) SetRevision(s string) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetRevision(s)
	return drhu
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (drhu *DocumentRevisionHistoryUpdate) SetNillableRevision(s *string) *DocumentRevisionHistoryUpdate {
	if s != nil {
		drhu.SetRevision(*s)
	}
	return drhu
}

// ClearRevision clears the value of the "revision" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearRevision() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearRevision()
	return drhu
}

// SetDetails sets the "details" field.
func (drhu *DocumentRevisionHistoryUpdate) SetDetails(s string) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetDetails(s)
	return drhu
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (drhu *DocumentRevisionHistoryUpdate) SetNillableDetails(s *string) *DocumentRevisionHistoryUpdate {
	if s != nil {
		drhu.SetDetails(*s)
	}
	return drhu
}

// ClearDetails clears the value of the "details" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearDetails() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearDetails()
	return drhu
}

// SetStatus sets the "status" field.
func (drhu *DocumentRevisionHistoryUpdate) SetStatus(es enums.ApprovalStatus) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetStatus(es)
	return drhu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (drhu *DocumentRevisionHistoryUpdate) SetNillableStatus(es *enums.ApprovalStatus) *DocumentRevisionHistoryUpdate {
	if es != nil {
		drhu.SetStatus(*es)
	}
	return drhu
}

// ClearStatus clears the value of the "status" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearStatus() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearStatus()
	return drhu
}

// SetApprovalDate sets the "approval_date" field.
func (drhu *DocumentRevisionHistoryUpdate) SetApprovalDate(t time.Time) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetApprovalDate(t)
	return drhu
}

// SetNillableApprovalDate sets the "approval_date" field if the given value is not nil.
func (drhu *DocumentRevisionHistoryUpdate) SetNillableApprovalDate(t *time.Time) *DocumentRevisionHistoryUpdate {
	if t != nil {
		drhu.SetApprovalDate(*t)
	}
	return drhu
}

// ClearApprovalDate clears the value of the "approval_date" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearApprovalDate() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearApprovalDate()
	return drhu
}

// SetSubmittedByID sets the "submitted_by_id" field.
func (drhu *DocumentRevisionHistoryUpdate) SetSubmittedByID(s string) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetSubmittedByID(s)
	return drhu
}

// SetNillableSubmittedByID sets the "submitted_by_id" field if the given value is not nil.
func (drhu *DocumentRevisionHistoryUpdate) SetNillableSubmittedByID(s *string) *DocumentRevisionHistoryUpdate {
	if s != nil {
		drhu.SetSubmittedByID(*s)
	}
	return drhu
}

// ClearSubmittedByID clears the value of the "submitted_by_id" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearSubmittedByID() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearSubmittedByID()
	return drhu
}

// SetApprovedByID sets the "approved_by_id" field.
func (drhu *DocumentRevisionHistoryUpdate) SetApprovedByID(s string) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetApprovedByID(s)
	return drhu
}

// SetNillableApprovedByID sets the "approved_by_id" field if the given value is not nil.
func (drhu *DocumentRevisionHistoryUpdate) SetNillableApprovedByID(s *string) *DocumentRevisionHistoryUpdate {
	if s != nil {
		drhu.SetApprovedByID(*s)
	}
	return drhu
}

// ClearApprovedByID clears the value of the "approved_by_id" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearApprovedByID() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearApprovedByID()
	return drhu
}

// SetInternalPolicyID sets the "internal_policy_id" field.
func (drhu *DocumentRevisionHistoryUpdate) SetInternalPolicyID(s string) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetInternalPolicyID(s)
	return drhu
}

// SetNillableInternalPolicyID sets the "internal_policy_id" field if the given value is not nil.
func (drhu *DocumentRevisionHistoryUpdate) SetNillableInternalPolicyID(s *string) *DocumentRevisionHistoryUpdate {
	if s != nil {
		drhu.SetInternalPolicyID(*s)
	}
	return drhu
}

// ClearInternalPolicyID clears the value of the "internal_policy_id" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearInternalPolicyID() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearInternalPolicyID()
	return drhu
}

// SetProcedureID sets the "procedure_id" field.
func (drhu *DocumentRevisionHistoryUpdate) SetProcedureID(s string) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetProcedureID(s)
	return drhu
}

// SetNillableProcedureID sets the "procedure_id" field if the given value is not nil.
func (drhu *DocumentRevisionHistoryUpdate) SetNillableProcedureID(s *string) *DocumentRevisionHistoryUpdate {
	if s != nil {
		drhu.SetProcedureID(*s)
	}
	return drhu
}

// ClearProcedureID clears the value of the "procedure_id" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearProcedureID() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearProcedureID()
	return drhu
}

// SetActionPlanID sets the "action_plan_id" field.
func (drhu *DocumentRevisionHistoryUpdate) SetActionPlanID(s string) *DocumentRevisionHistoryUpdate {
	drhu.mutation.SetActionPlanID(s)
	return drhu
}

// SetNillableActionPlanID sets the "action_plan_id" field if the given value is not nil.
func (drhu *DocumentRevisionHistoryUpdate) SetNillableActionPlanID(s *string) *DocumentRevisionHistoryUpdate {
	if s != nil {
		drhu.SetActionPlanID(*s)
	}
	return drhu
}

// ClearActionPlanID clears the value of the "action_plan_id" field.
func (drhu *DocumentRevisionHistoryUpdate) ClearActionPlanID() *DocumentRevisionHistoryUpdate {
	drhu.mutation.ClearActionPlanID()
	return drhu
}

// Mutation returns the DocumentRevisionHistoryMutation object of the builder.
func (drhu *DocumentRevisionHistoryUpdate) Mutation() *DocumentRevisionHistoryMutation {
	return drhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (drhu *DocumentRevisionHistoryUpdate) Save(ctx context.Context) (int, error) {
	drhu.defaults()
	return withHooks(ctx, drhu.sqlSave, drhu.mutation, drhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (drhu *DocumentRevisionHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := drhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (drhu *DocumentRevisionHistoryUpdate) Exec(ctx context.Context) error {
	_, err := drhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drhu *DocumentRevisionHistoryUpdate) ExecX(ctx context.Context) {
	if err := drhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drhu *DocumentRevisionHistoryUpdate) defaults() {
	if _, ok := drhu.mutation.UpdatedAt(); !ok && !drhu.mutation.UpdatedAtCleared() {
		v := documentrevisionhistory.UpdateDefaultUpdatedAt()
		drhu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drhu *DocumentRevisionHistoryUpdate) check() error {
	if v, ok := drhu.mutation.Status(); ok {
		if err := documentrevisionhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "DocumentRevisionHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (drhu *DocumentRevisionHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DocumentRevisionHistoryUpdate {
	drhu.modifiers = append(drhu.modifiers, modifiers...)
	return drhu
}

func (drhu *DocumentRevisionHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := drhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(documentrevisionhistory.Table, documentrevisionhistory.Columns, sqlgraph.NewFieldSpec(documentrevisionhistory.FieldID, field.TypeString))
	if ps := drhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if drhu.mutation.RefCleared() {
		_spec.ClearField(documentrevisionhistory.FieldRef, field.TypeString)
	}
	if drhu.mutation.CreatedAtCleared() {
		_spec.ClearField(documentrevisionhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := drhu.mutation.UpdatedAt(); ok {
		_spec.SetField(documentrevisionhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if drhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(documentrevisionhistory.FieldUpdatedAt, field.TypeTime)
	}
	if drhu.mutation.CreatedByCleared() {
		_spec.ClearField(documentrevisionhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := drhu.mutation.UpdatedBy(); ok {
		_spec.SetField(documentrevisionhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if drhu.mutation.UpdatedByCleared() {
		_spec.ClearField(documentrevisionhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := drhu.mutation.DeletedAt(); ok {
		_spec.SetField(documentrevisionhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if drhu.mutation.DeletedAtCleared() {
		_spec.ClearField(documentrevisionhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := drhu.mutation.DeletedBy(); ok {
		_spec.SetField(documentrevisionhistory.FieldDeletedBy, field.TypeString, value)
	}
	if drhu.mutation.DeletedByCleared() {
		_spec.ClearField(documentrevisionhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := drhu.mutation.Tags(); ok {
		_spec.SetField(documentrevisionhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := drhu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, documentrevisionhistory.FieldTags, value)
		})
	}
	if drhu.mutation.TagsCleared() {
		_spec.ClearField(documentrevisionhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := drhu.mutation.Revision(); ok {
		_spec.SetField(documentrevisionhistory.FieldRevision, field.TypeString, value)
	}
	if drhu.mutation.RevisionCleared() {
		_spec.ClearField(documentrevisionhistory.FieldRevision, field.TypeString)
	}
	if value, ok := drhu.mutation.Details(); ok {
		_spec.SetField(documentrevisionhistory.FieldDetails, field.TypeString, value)
	}
	if drhu.mutation.DetailsCleared() {
		_spec.ClearField(documentrevisionhistory.FieldDetails, field.TypeString)
	}
	if value, ok := drhu.mutation.Status(); ok {
		_spec.SetField(documentrevisionhistory.FieldStatus, field.TypeEnum, value)
	}
	if drhu.mutation.StatusCleared() {
		_spec.ClearField(documentrevisionhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := drhu.mutation.ApprovalDate(); ok {
		_spec.SetField(documentrevisionhistory.FieldApprovalDate, field.TypeTime, value)
	}
	if drhu.mutation.ApprovalDateCleared() {
		_spec.ClearField(documentrevisionhistory.FieldApprovalDate, field.TypeTime)
	}
	if value, ok := drhu.mutation.SubmittedByID(); ok {
		_spec.SetField(documentrevisionhistory.FieldSubmittedByID, field.TypeString, value)
	}
	if drhu.mutation.SubmittedByIDCleared() {
		_spec.ClearField(documentrevisionhistory.FieldSubmittedByID, field.TypeString)
	}
	if value, ok := drhu.mutation.ApprovedByID(); ok {
		_spec.SetField(documentrevisionhistory.FieldApprovedByID, field.TypeString, value)
	}
	if drhu.mutation.ApprovedByIDCleared() {
		_spec.ClearField(documentrevisionhistory.FieldApprovedByID, field.TypeString)
	}
	if value, ok := drhu.mutation.InternalPolicyID(); ok {
		_spec.SetField(documentrevisionhistory.FieldInternalPolicyID, field.TypeString, value)
	}
	if drhu.mutation.InternalPolicyIDCleared() {
		_spec.ClearField(documentrevisionhistory.FieldInternalPolicyID, field.TypeString)
	}
	if value, ok := drhu.mutation.ProcedureID(); ok {
		_spec.SetField(documentrevisionhistory.FieldProcedureID, field.TypeString, value)
	}
	if drhu.mutation.ProcedureIDCleared() {
		_spec.ClearField(documentrevisionhistory.FieldProcedureID, field.TypeString)
	}
	if value, ok := drhu.mutation.ActionPlanID(); ok {
		_spec.SetField(documentrevisionhistory.FieldActionPlanID, field.TypeString, value)
	}
	if drhu.mutation.ActionPlanIDCleared() {
		_spec.ClearField(documentrevisionhistory.FieldActionPlanID, field.TypeString)
	}
	_spec.Node.Schema = drhu.schemaConfig.DocumentRevisionHistory
	ctx = internal.NewSchemaConfigContext(ctx, drhu.schemaConfig)
	_spec.AddModifiers(drhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, drhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{documentrevisionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	drhu.mutation.done = true
	return n, nil
}

// DocumentRevisionHistoryUpdateOne is the builder for updating a single DocumentRevisionHistory entity.
type DocumentRevisionHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *DocumentRevisionHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetUpdatedAt(t time.Time) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetUpdatedAt(t)
	return drhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearUpdatedAt() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearUpdatedAt()
	return drhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetUpdatedBy(s string) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetUpdatedBy(s)
	return drhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetNillableUpdatedBy(s *string) *DocumentRevisionHistoryUpdateOne {
	if s != nil {
		drhuo.SetUpdatedBy(*s)
	}
	return drhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearUpdatedBy() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearUpdatedBy()
	return drhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetDeletedAt(t time.Time) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetDeletedAt(t)
	return drhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *DocumentRevisionHistoryUpdateOne {
	if t != nil {
		drhuo.SetDeletedAt(*t)
	}
	return drhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearDeletedAt() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearDeletedAt()
	return drhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetDeletedBy(s string) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetDeletedBy(s)
	return drhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetNillableDeletedBy(s *string) *DocumentRevisionHistoryUpdateOne {
	if s != nil {
		drhuo.SetDeletedBy(*s)
	}
	return drhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearDeletedBy() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearDeletedBy()
	return drhuo
}

// SetTags sets the "tags" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetTags(s []string) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetTags(s)
	return drhuo
}

// AppendTags appends s to the "tags" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) AppendTags(s []string) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.AppendTags(s)
	return drhuo
}

// ClearTags clears the value of the "tags" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearTags() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearTags()
	return drhuo
}

// SetRevision sets the "revision" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetRevision(s string) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetRevision(s)
	return drhuo
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetNillableRevision(s *string) *DocumentRevisionHistoryUpdateOne {
	if s != nil {
		drhuo.SetRevision(*s)
	}
	return drhuo
}

// ClearRevision clears the value of the "revision" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearRevision() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearRevision()
	return drhuo
}

// SetDetails sets the "details" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetDetails(s string) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetDetails(s)
	return drhuo
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetNillableDetails(s *string) *DocumentRevisionHistoryUpdateOne {
	if s != nil {
		drhuo.SetDetails(*s)
	}
	return drhuo
}

// ClearDetails clears the value of the "details" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearDetails() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearDetails()
	return drhuo
}

// SetStatus sets the "status" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetStatus(es enums.ApprovalStatus) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetStatus(es)
	return drhuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetNillableStatus(es *enums.ApprovalStatus) *DocumentRevisionHistoryUpdateOne {
	if es != nil {
		drhuo.SetStatus(*es)
	}
	return drhuo
}

// ClearStatus clears the value of the "status" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearStatus() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearStatus()
	return drhuo
}

// SetApprovalDate sets the "approval_date" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetApprovalDate(t time.Time) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetApprovalDate(t)
	return drhuo
}

// SetNillableApprovalDate sets the "approval_date" field if the given value is not nil.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetNillableApprovalDate(t *time.Time) *DocumentRevisionHistoryUpdateOne {
	if t != nil {
		drhuo.SetApprovalDate(*t)
	}
	return drhuo
}

// ClearApprovalDate clears the value of the "approval_date" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearApprovalDate() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearApprovalDate()
	return drhuo
}

// SetSubmittedByID sets the "submitted_by_id" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetSubmittedByID(s string) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetSubmittedByID(s)
	return drhuo
}

// SetNillableSubmittedByID sets the "submitted_by_id" field if the given value is not nil.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetNillableSubmittedByID(s *string) *DocumentRevisionHistoryUpdateOne {
	if s != nil {
		drhuo.SetSubmittedByID(*s)
	}
	return drhuo
}

// ClearSubmittedByID clears the value of the "submitted_by_id" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearSubmittedByID() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearSubmittedByID()
	return drhuo
}

// SetApprovedByID sets the "approved_by_id" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetApprovedByID(s string) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetApprovedByID(s)
	return drhuo
}

// SetNillableApprovedByID sets the "approved_by_id" field if the given value is not nil.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetNillableApprovedByID(s *string) *DocumentRevisionHistoryUpdateOne {
	if s != nil {
		drhuo.SetApprovedByID(*s)
	}
	return drhuo
}

// ClearApprovedByID clears the value of the "approved_by_id" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearApprovedByID() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearApprovedByID()
	return drhuo
}

// SetInternalPolicyID sets the "internal_policy_id" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetInternalPolicyID(s string) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetInternalPolicyID(s)
	return drhuo
}

// SetNillableInternalPolicyID sets the "internal_policy_id" field if the given value is not nil.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetNillableInternalPolicyID(s *string) *DocumentRevisionHistoryUpdateOne {
	if s != nil {
		drhuo.SetInternalPolicyID(*s)
	}
	return drhuo
}

// ClearInternalPolicyID clears the value of the "internal_policy_id" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearInternalPolicyID() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearInternalPolicyID()
	return drhuo
}

// SetProcedureID sets the "procedure_id" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetProcedureID(s string) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetProcedureID(s)
	return drhuo
}

// SetNillableProcedureID sets the "procedure_id" field if the given value is not nil.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetNillableProcedureID(s *string) *DocumentRevisionHistoryUpdateOne {
	if s != nil {
		drhuo.SetProcedureID(*s)
	}
	return drhuo
}

// ClearProcedureID clears the value of the "procedure_id" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearProcedureID() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearProcedureID()
	return drhuo
}

// SetActionPlanID sets the "action_plan_id" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetActionPlanID(s string) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.SetActionPlanID(s)
	return drhuo
}

// SetNillableActionPlanID sets the "action_plan_id" field if the given value is not nil.
func (drhuo *DocumentRevisionHistoryUpdateOne) SetNillableActionPlanID(s *string) *DocumentRevisionHistoryUpdateOne {
	if s != nil {
		drhuo.SetActionPlanID(*s)
	}
	return drhuo
}

// ClearActionPlanID clears the value of the "action_plan_id" field.
func (drhuo *DocumentRevisionHistoryUpdateOne) ClearActionPlanID() *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.ClearActionPlanID()
	return drhuo
}

// Mutation returns the DocumentRevisionHistoryMutation object of the builder.
func (drhuo *DocumentRevisionHistoryUpdateOne) Mutation() *DocumentRevisionHistoryMutation {
	return drhuo.mutation
}

// Where appends a list predicates to the DocumentRevisionHistoryUpdate builder.
func (drhuo *DocumentRevisionHistoryUpdateOne) Where(ps ...predicate.DocumentRevisionHistory) *DocumentRevisionHistoryUpdateOne {
	drhuo.mutation.Where(ps...)
	return drhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (drhuo *DocumentRevisionHistoryUpdateOne) Select(field string, fields ...string) *DocumentRevisionHistoryUpdateOne {
	drhuo.fields = append([]string{field}, fields...)
	return drhuo
}

// Save executes the query and returns the updated DocumentRevisionHistory entity.
func (drhuo *DocumentRevisionHistoryUpdateOne) Save(ctx context.Context) (*DocumentRevisionHistory, error) {
	drhuo.defaults()
	return withHooks(ctx, drhuo.sqlSave, drhuo.mutation, drhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (drhuo *DocumentRevisionHistoryUpdateOne) SaveX(ctx context.Context) *DocumentRevisionHistory {
	node, err := drhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (drhuo *DocumentRevisionHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := drhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drhuo *DocumentRevisionHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := drhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drhuo *DocumentRevisionHistoryUpdateOne) defaults() {
	if _, ok := drhuo.mutation.UpdatedAt(); !ok && !drhuo.mutation.UpdatedAtCleared() {
		v := documentrevisionhistory.UpdateDefaultUpdatedAt()
		drhuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drhuo *DocumentRevisionHistoryUpdateOne) check() error {
	if v, ok := drhuo.mutation.Status(); ok {
		if err := documentrevisionhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "DocumentRevisionHistory.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (drhuo *DocumentRevisionHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *DocumentRevisionHistoryUpdateOne {
	drhuo.modifiers = append(drhuo.modifiers, modifiers...)
	return drhuo
}

func (drhuo *DocumentRevisionHistoryUpdateOne) sqlSave(ctx context.Context) (_node *DocumentRevisionHistory, err error) {
	if err := drhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(documentrevisionhistory.Table, documentrevisionhistory.Columns, sqlgraph.NewFieldSpec(documentrevisionhistory.FieldID, field.TypeString))
	id, ok := drhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "DocumentRevisionHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := drhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, documentrevisionhistory.FieldID)
		for _, f := range fields {
			if !documentrevisionhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != documentrevisionhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := drhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if drhuo.mutation.RefCleared() {
		_spec.ClearField(documentrevisionhistory.FieldRef, field.TypeString)
	}
	if drhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(documentrevisionhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := drhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(documentrevisionhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if drhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(documentrevisionhistory.FieldUpdatedAt, field.TypeTime)
	}
	if drhuo.mutation.CreatedByCleared() {
		_spec.ClearField(documentrevisionhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := drhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(documentrevisionhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if drhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(documentrevisionhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := drhuo.mutation.DeletedAt(); ok {
		_spec.SetField(documentrevisionhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if drhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(documentrevisionhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := drhuo.mutation.DeletedBy(); ok {
		_spec.SetField(documentrevisionhistory.FieldDeletedBy, field.TypeString, value)
	}
	if drhuo.mutation.DeletedByCleared() {
		_spec.ClearField(documentrevisionhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := drhuo.mutation.Tags(); ok {
		_spec.SetField(documentrevisionhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := drhuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, documentrevisionhistory.FieldTags, value)
		})
	}
	if drhuo.mutation.TagsCleared() {
		_spec.ClearField(documentrevisionhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := drhuo.mutation.Revision(); ok {
		_spec.SetField(documentrevisionhistory.FieldRevision, field.TypeString, value)
	}
	if drhuo.mutation.RevisionCleared() {
		_spec.ClearField(documentrevisionhistory.FieldRevision, field.TypeString)
	}
	if value, ok := drhuo.mutation.Details(); ok {
		_spec.SetField(documentrevisionhistory.FieldDetails, field.TypeString, value)
	}
	if drhuo.mutation.DetailsCleared() {
		_spec.ClearField(documentrevisionhistory.FieldDetails, field.TypeString)
	}
	if value, ok := drhuo.mutation.Status(); ok {
		_spec.SetField(documentrevisionhistory.FieldStatus, field.TypeEnum, value)
	}
	if drhuo.mutation.StatusCleared() {
		_spec.ClearField(documentrevisionhistory.FieldStatus, field.TypeEnum)
	}
	if value, ok := drhuo.mutation.ApprovalDate(); ok {
		_spec.SetField(documentrevisionhistory.FieldApprovalDate, field.TypeTime, value)
	}
	if drhuo.mutation.ApprovalDateCleared() {
		_spec.ClearField(documentrevisionhistory.FieldApprovalDate, field.TypeTime)
	}
	if value, ok := drhuo.mutation.SubmittedByID(); ok {
		_spec.SetField(documentrevisionhistory.FieldSubmittedByID, field.TypeString, value)
	}
	if drhuo.mutation.SubmittedByIDCleared() {
		_spec.ClearField(documentrevisionhistory.FieldSubmittedByID, field.TypeString)
	}
	if value, ok := drhuo.mutation.ApprovedByID(); ok {
		_spec.SetField(documentrevisionhistory.FieldApprovedByID, field.TypeString, value)
	}
	if drhuo.mutation.ApprovedByIDCleared() {
		_spec.ClearField(documentrevisionhistory.FieldApprovedByID, field.TypeString)
	}
	if value, ok := drhuo.mutation.InternalPolicyID(); ok {
		_spec.SetField(documentrevisionhistory.FieldInternalPolicyID, field.TypeString, value)
	}
	if drhuo.mutation.InternalPolicyIDCleared() {
		_spec.ClearField(documentrevisionhistory.FieldInternalPolicyID, field.TypeString)
	}
	if value, ok := drhuo.mutation.ProcedureID(); ok {
		_spec.SetField(documentrevisionhistory.FieldProcedureID, field.TypeString, value)
	}
	if drhuo.mutation.ProcedureIDCleared() {
		_spec.ClearField(documentrevisionhistory.FieldProcedureID, field.TypeString)
	}
	if value, ok := drhuo.mutation.ActionPlanID(); ok {
		_spec.SetField(documentrevisionhistory.FieldActionPlanID, field.TypeString, value)
	}
	if drhuo.mutation.ActionPlanIDCleared() {
		_spec.ClearField(documentrevisionhistory.FieldActionPlanID, field.TypeString)
	}
	_spec.Node.Schema = drhuo.schemaConfig.DocumentRevisionHistory
	ctx = internal.NewSchemaConfigContext(ctx, drhuo.schemaConfig)
	_spec.AddModifiers(drhuo.modifiers...)
	_node = &DocumentRevisionHistory{config: drhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, drhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{documentrevisionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	drhuo.mutation.done = true
	return _node, nil
}
