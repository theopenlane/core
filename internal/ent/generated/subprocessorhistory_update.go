// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subprocessorhistory"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// SubprocessorHistoryUpdate is the builder for updating SubprocessorHistory entities.
type SubprocessorHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *SubprocessorHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubprocessorHistoryUpdate builder.
func (_u *SubprocessorHistoryUpdate) Where(ps ...predicate.SubprocessorHistory) *SubprocessorHistoryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubprocessorHistoryUpdate) SetUpdatedAt(v time.Time) *SubprocessorHistoryUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SubprocessorHistoryUpdate) ClearUpdatedAt() *SubprocessorHistoryUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *SubprocessorHistoryUpdate) SetUpdatedBy(v string) *SubprocessorHistoryUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdate) SetNillableUpdatedBy(v *string) *SubprocessorHistoryUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *SubprocessorHistoryUpdate) ClearUpdatedBy() *SubprocessorHistoryUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubprocessorHistoryUpdate) SetDeletedAt(v time.Time) *SubprocessorHistoryUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdate) SetNillableDeletedAt(v *time.Time) *SubprocessorHistoryUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubprocessorHistoryUpdate) ClearDeletedAt() *SubprocessorHistoryUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *SubprocessorHistoryUpdate) SetDeletedBy(v string) *SubprocessorHistoryUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdate) SetNillableDeletedBy(v *string) *SubprocessorHistoryUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *SubprocessorHistoryUpdate) ClearDeletedBy() *SubprocessorHistoryUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *SubprocessorHistoryUpdate) SetTags(v []string) *SubprocessorHistoryUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *SubprocessorHistoryUpdate) AppendTags(v []string) *SubprocessorHistoryUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *SubprocessorHistoryUpdate) ClearTags() *SubprocessorHistoryUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *SubprocessorHistoryUpdate) SetOwnerID(v string) *SubprocessorHistoryUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdate) SetNillableOwnerID(v *string) *SubprocessorHistoryUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *SubprocessorHistoryUpdate) ClearOwnerID() *SubprocessorHistoryUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *SubprocessorHistoryUpdate) SetInternalNotes(v string) *SubprocessorHistoryUpdate {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdate) SetNillableInternalNotes(v *string) *SubprocessorHistoryUpdate {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *SubprocessorHistoryUpdate) ClearInternalNotes() *SubprocessorHistoryUpdate {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *SubprocessorHistoryUpdate) SetSystemInternalID(v string) *SubprocessorHistoryUpdate {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdate) SetNillableSystemInternalID(v *string) *SubprocessorHistoryUpdate {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *SubprocessorHistoryUpdate) ClearSystemInternalID() *SubprocessorHistoryUpdate {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetName sets the "name" field.
func (_u *SubprocessorHistoryUpdate) SetName(v string) *SubprocessorHistoryUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdate) SetNillableName(v *string) *SubprocessorHistoryUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *SubprocessorHistoryUpdate) SetDescription(v string) *SubprocessorHistoryUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdate) SetNillableDescription(v *string) *SubprocessorHistoryUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *SubprocessorHistoryUpdate) ClearDescription() *SubprocessorHistoryUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (_u *SubprocessorHistoryUpdate) SetLogoRemoteURL(v string) *SubprocessorHistoryUpdate {
	_u.mutation.SetLogoRemoteURL(v)
	return _u
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdate) SetNillableLogoRemoteURL(v *string) *SubprocessorHistoryUpdate {
	if v != nil {
		_u.SetLogoRemoteURL(*v)
	}
	return _u
}

// ClearLogoRemoteURL clears the value of the "logo_remote_url" field.
func (_u *SubprocessorHistoryUpdate) ClearLogoRemoteURL() *SubprocessorHistoryUpdate {
	_u.mutation.ClearLogoRemoteURL()
	return _u
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (_u *SubprocessorHistoryUpdate) SetLogoLocalFileID(v string) *SubprocessorHistoryUpdate {
	_u.mutation.SetLogoLocalFileID(v)
	return _u
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdate) SetNillableLogoLocalFileID(v *string) *SubprocessorHistoryUpdate {
	if v != nil {
		_u.SetLogoLocalFileID(*v)
	}
	return _u
}

// ClearLogoLocalFileID clears the value of the "logo_local_file_id" field.
func (_u *SubprocessorHistoryUpdate) ClearLogoLocalFileID() *SubprocessorHistoryUpdate {
	_u.mutation.ClearLogoLocalFileID()
	return _u
}

// Mutation returns the SubprocessorHistoryMutation object of the builder.
func (_u *SubprocessorHistoryUpdate) Mutation() *SubprocessorHistoryMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SubprocessorHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubprocessorHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SubprocessorHistoryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubprocessorHistoryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubprocessorHistoryUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if subprocessorhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subprocessorhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subprocessorhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *SubprocessorHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubprocessorHistoryUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *SubprocessorHistoryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subprocessorhistory.Table, subprocessorhistory.Columns, sqlgraph.NewFieldSpec(subprocessorhistory.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(subprocessorhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(subprocessorhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subprocessorhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(subprocessorhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(subprocessorhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(subprocessorhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(subprocessorhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subprocessorhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subprocessorhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(subprocessorhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(subprocessorhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(subprocessorhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subprocessorhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(subprocessorhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(subprocessorhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(subprocessorhistory.FieldOwnerID, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(subprocessorhistory.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(subprocessorhistory.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(subprocessorhistory.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(subprocessorhistory.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(subprocessorhistory.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(subprocessorhistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(subprocessorhistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(subprocessorhistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.LogoRemoteURL(); ok {
		_spec.SetField(subprocessorhistory.FieldLogoRemoteURL, field.TypeString, value)
	}
	if _u.mutation.LogoRemoteURLCleared() {
		_spec.ClearField(subprocessorhistory.FieldLogoRemoteURL, field.TypeString)
	}
	if value, ok := _u.mutation.LogoLocalFileID(); ok {
		_spec.SetField(subprocessorhistory.FieldLogoLocalFileID, field.TypeString, value)
	}
	if _u.mutation.LogoLocalFileIDCleared() {
		_spec.ClearField(subprocessorhistory.FieldLogoLocalFileID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.SubprocessorHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subprocessorhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SubprocessorHistoryUpdateOne is the builder for updating a single SubprocessorHistory entity.
type SubprocessorHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubprocessorHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubprocessorHistoryUpdateOne) SetUpdatedAt(v time.Time) *SubprocessorHistoryUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SubprocessorHistoryUpdateOne) ClearUpdatedAt() *SubprocessorHistoryUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *SubprocessorHistoryUpdateOne) SetUpdatedBy(v string) *SubprocessorHistoryUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdateOne) SetNillableUpdatedBy(v *string) *SubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *SubprocessorHistoryUpdateOne) ClearUpdatedBy() *SubprocessorHistoryUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubprocessorHistoryUpdateOne) SetDeletedAt(v time.Time) *SubprocessorHistoryUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdateOne) SetNillableDeletedAt(v *time.Time) *SubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubprocessorHistoryUpdateOne) ClearDeletedAt() *SubprocessorHistoryUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *SubprocessorHistoryUpdateOne) SetDeletedBy(v string) *SubprocessorHistoryUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdateOne) SetNillableDeletedBy(v *string) *SubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *SubprocessorHistoryUpdateOne) ClearDeletedBy() *SubprocessorHistoryUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *SubprocessorHistoryUpdateOne) SetTags(v []string) *SubprocessorHistoryUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *SubprocessorHistoryUpdateOne) AppendTags(v []string) *SubprocessorHistoryUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *SubprocessorHistoryUpdateOne) ClearTags() *SubprocessorHistoryUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *SubprocessorHistoryUpdateOne) SetOwnerID(v string) *SubprocessorHistoryUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdateOne) SetNillableOwnerID(v *string) *SubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *SubprocessorHistoryUpdateOne) ClearOwnerID() *SubprocessorHistoryUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetInternalNotes sets the "internal_notes" field.
func (_u *SubprocessorHistoryUpdateOne) SetInternalNotes(v string) *SubprocessorHistoryUpdateOne {
	_u.mutation.SetInternalNotes(v)
	return _u
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdateOne) SetNillableInternalNotes(v *string) *SubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetInternalNotes(*v)
	}
	return _u
}

// ClearInternalNotes clears the value of the "internal_notes" field.
func (_u *SubprocessorHistoryUpdateOne) ClearInternalNotes() *SubprocessorHistoryUpdateOne {
	_u.mutation.ClearInternalNotes()
	return _u
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_u *SubprocessorHistoryUpdateOne) SetSystemInternalID(v string) *SubprocessorHistoryUpdateOne {
	_u.mutation.SetSystemInternalID(v)
	return _u
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdateOne) SetNillableSystemInternalID(v *string) *SubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetSystemInternalID(*v)
	}
	return _u
}

// ClearSystemInternalID clears the value of the "system_internal_id" field.
func (_u *SubprocessorHistoryUpdateOne) ClearSystemInternalID() *SubprocessorHistoryUpdateOne {
	_u.mutation.ClearSystemInternalID()
	return _u
}

// SetName sets the "name" field.
func (_u *SubprocessorHistoryUpdateOne) SetName(v string) *SubprocessorHistoryUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdateOne) SetNillableName(v *string) *SubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *SubprocessorHistoryUpdateOne) SetDescription(v string) *SubprocessorHistoryUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdateOne) SetNillableDescription(v *string) *SubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *SubprocessorHistoryUpdateOne) ClearDescription() *SubprocessorHistoryUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetLogoRemoteURL sets the "logo_remote_url" field.
func (_u *SubprocessorHistoryUpdateOne) SetLogoRemoteURL(v string) *SubprocessorHistoryUpdateOne {
	_u.mutation.SetLogoRemoteURL(v)
	return _u
}

// SetNillableLogoRemoteURL sets the "logo_remote_url" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdateOne) SetNillableLogoRemoteURL(v *string) *SubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetLogoRemoteURL(*v)
	}
	return _u
}

// ClearLogoRemoteURL clears the value of the "logo_remote_url" field.
func (_u *SubprocessorHistoryUpdateOne) ClearLogoRemoteURL() *SubprocessorHistoryUpdateOne {
	_u.mutation.ClearLogoRemoteURL()
	return _u
}

// SetLogoLocalFileID sets the "logo_local_file_id" field.
func (_u *SubprocessorHistoryUpdateOne) SetLogoLocalFileID(v string) *SubprocessorHistoryUpdateOne {
	_u.mutation.SetLogoLocalFileID(v)
	return _u
}

// SetNillableLogoLocalFileID sets the "logo_local_file_id" field if the given value is not nil.
func (_u *SubprocessorHistoryUpdateOne) SetNillableLogoLocalFileID(v *string) *SubprocessorHistoryUpdateOne {
	if v != nil {
		_u.SetLogoLocalFileID(*v)
	}
	return _u
}

// ClearLogoLocalFileID clears the value of the "logo_local_file_id" field.
func (_u *SubprocessorHistoryUpdateOne) ClearLogoLocalFileID() *SubprocessorHistoryUpdateOne {
	_u.mutation.ClearLogoLocalFileID()
	return _u
}

// Mutation returns the SubprocessorHistoryMutation object of the builder.
func (_u *SubprocessorHistoryUpdateOne) Mutation() *SubprocessorHistoryMutation {
	return _u.mutation
}

// Where appends a list predicates to the SubprocessorHistoryUpdate builder.
func (_u *SubprocessorHistoryUpdateOne) Where(ps ...predicate.SubprocessorHistory) *SubprocessorHistoryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SubprocessorHistoryUpdateOne) Select(field string, fields ...string) *SubprocessorHistoryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SubprocessorHistory entity.
func (_u *SubprocessorHistoryUpdateOne) Save(ctx context.Context) (*SubprocessorHistory, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubprocessorHistoryUpdateOne) SaveX(ctx context.Context) *SubprocessorHistory {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SubprocessorHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubprocessorHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubprocessorHistoryUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if subprocessorhistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subprocessorhistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subprocessorhistory.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *SubprocessorHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubprocessorHistoryUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *SubprocessorHistoryUpdateOne) sqlSave(ctx context.Context) (_node *SubprocessorHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(subprocessorhistory.Table, subprocessorhistory.Columns, sqlgraph.NewFieldSpec(subprocessorhistory.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "SubprocessorHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subprocessorhistory.FieldID)
		for _, f := range fields {
			if !subprocessorhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subprocessorhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.RefCleared() {
		_spec.ClearField(subprocessorhistory.FieldRef, field.TypeString)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(subprocessorhistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subprocessorhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(subprocessorhistory.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(subprocessorhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(subprocessorhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(subprocessorhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subprocessorhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subprocessorhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(subprocessorhistory.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(subprocessorhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(subprocessorhistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subprocessorhistory.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(subprocessorhistory.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(subprocessorhistory.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(subprocessorhistory.FieldOwnerID, field.TypeString)
	}
	if _u.mutation.SystemOwnedCleared() {
		_spec.ClearField(subprocessorhistory.FieldSystemOwned, field.TypeBool)
	}
	if value, ok := _u.mutation.InternalNotes(); ok {
		_spec.SetField(subprocessorhistory.FieldInternalNotes, field.TypeString, value)
	}
	if _u.mutation.InternalNotesCleared() {
		_spec.ClearField(subprocessorhistory.FieldInternalNotes, field.TypeString)
	}
	if value, ok := _u.mutation.SystemInternalID(); ok {
		_spec.SetField(subprocessorhistory.FieldSystemInternalID, field.TypeString, value)
	}
	if _u.mutation.SystemInternalIDCleared() {
		_spec.ClearField(subprocessorhistory.FieldSystemInternalID, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(subprocessorhistory.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(subprocessorhistory.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(subprocessorhistory.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.LogoRemoteURL(); ok {
		_spec.SetField(subprocessorhistory.FieldLogoRemoteURL, field.TypeString, value)
	}
	if _u.mutation.LogoRemoteURLCleared() {
		_spec.ClearField(subprocessorhistory.FieldLogoRemoteURL, field.TypeString)
	}
	if value, ok := _u.mutation.LogoLocalFileID(); ok {
		_spec.SetField(subprocessorhistory.FieldLogoLocalFileID, field.TypeString, value)
	}
	if _u.mutation.LogoLocalFileIDCleared() {
		_spec.ClearField(subprocessorhistory.FieldLogoLocalFileID, field.TypeString)
	}
	_spec.Node.Schema = _u.schemaConfig.SubprocessorHistory
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &SubprocessorHistory{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subprocessorhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
