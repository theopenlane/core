// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscriptionhistory"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx/history"
)

// OrgSubscriptionHistoryCreate is the builder for creating a OrgSubscriptionHistory entity.
type OrgSubscriptionHistoryCreate struct {
	config
	mutation *OrgSubscriptionHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (oshc *OrgSubscriptionHistoryCreate) SetHistoryTime(t time.Time) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetHistoryTime(t)
	return oshc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableHistoryTime(t *time.Time) *OrgSubscriptionHistoryCreate {
	if t != nil {
		oshc.SetHistoryTime(*t)
	}
	return oshc
}

// SetRef sets the "ref" field.
func (oshc *OrgSubscriptionHistoryCreate) SetRef(s string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetRef(s)
	return oshc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableRef(s *string) *OrgSubscriptionHistoryCreate {
	if s != nil {
		oshc.SetRef(*s)
	}
	return oshc
}

// SetOperation sets the "operation" field.
func (oshc *OrgSubscriptionHistoryCreate) SetOperation(ht history.OpType) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetOperation(ht)
	return oshc
}

// SetCreatedAt sets the "created_at" field.
func (oshc *OrgSubscriptionHistoryCreate) SetCreatedAt(t time.Time) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetCreatedAt(t)
	return oshc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableCreatedAt(t *time.Time) *OrgSubscriptionHistoryCreate {
	if t != nil {
		oshc.SetCreatedAt(*t)
	}
	return oshc
}

// SetUpdatedAt sets the "updated_at" field.
func (oshc *OrgSubscriptionHistoryCreate) SetUpdatedAt(t time.Time) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetUpdatedAt(t)
	return oshc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableUpdatedAt(t *time.Time) *OrgSubscriptionHistoryCreate {
	if t != nil {
		oshc.SetUpdatedAt(*t)
	}
	return oshc
}

// SetCreatedBy sets the "created_by" field.
func (oshc *OrgSubscriptionHistoryCreate) SetCreatedBy(s string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetCreatedBy(s)
	return oshc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableCreatedBy(s *string) *OrgSubscriptionHistoryCreate {
	if s != nil {
		oshc.SetCreatedBy(*s)
	}
	return oshc
}

// SetUpdatedBy sets the "updated_by" field.
func (oshc *OrgSubscriptionHistoryCreate) SetUpdatedBy(s string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetUpdatedBy(s)
	return oshc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableUpdatedBy(s *string) *OrgSubscriptionHistoryCreate {
	if s != nil {
		oshc.SetUpdatedBy(*s)
	}
	return oshc
}

// SetTags sets the "tags" field.
func (oshc *OrgSubscriptionHistoryCreate) SetTags(s []string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetTags(s)
	return oshc
}

// SetDeletedAt sets the "deleted_at" field.
func (oshc *OrgSubscriptionHistoryCreate) SetDeletedAt(t time.Time) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetDeletedAt(t)
	return oshc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableDeletedAt(t *time.Time) *OrgSubscriptionHistoryCreate {
	if t != nil {
		oshc.SetDeletedAt(*t)
	}
	return oshc
}

// SetDeletedBy sets the "deleted_by" field.
func (oshc *OrgSubscriptionHistoryCreate) SetDeletedBy(s string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetDeletedBy(s)
	return oshc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableDeletedBy(s *string) *OrgSubscriptionHistoryCreate {
	if s != nil {
		oshc.SetDeletedBy(*s)
	}
	return oshc
}

// SetOwnerID sets the "owner_id" field.
func (oshc *OrgSubscriptionHistoryCreate) SetOwnerID(s string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetOwnerID(s)
	return oshc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableOwnerID(s *string) *OrgSubscriptionHistoryCreate {
	if s != nil {
		oshc.SetOwnerID(*s)
	}
	return oshc
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (oshc *OrgSubscriptionHistoryCreate) SetStripeSubscriptionID(s string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetStripeSubscriptionID(s)
	return oshc
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableStripeSubscriptionID(s *string) *OrgSubscriptionHistoryCreate {
	if s != nil {
		oshc.SetStripeSubscriptionID(*s)
	}
	return oshc
}

// SetProductTier sets the "product_tier" field.
func (oshc *OrgSubscriptionHistoryCreate) SetProductTier(s string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetProductTier(s)
	return oshc
}

// SetNillableProductTier sets the "product_tier" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableProductTier(s *string) *OrgSubscriptionHistoryCreate {
	if s != nil {
		oshc.SetProductTier(*s)
	}
	return oshc
}

// SetProductPrice sets the "product_price" field.
func (oshc *OrgSubscriptionHistoryCreate) SetProductPrice(m models.Price) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetProductPrice(m)
	return oshc
}

// SetNillableProductPrice sets the "product_price" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableProductPrice(m *models.Price) *OrgSubscriptionHistoryCreate {
	if m != nil {
		oshc.SetProductPrice(*m)
	}
	return oshc
}

// SetStripeProductTierID sets the "stripe_product_tier_id" field.
func (oshc *OrgSubscriptionHistoryCreate) SetStripeProductTierID(s string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetStripeProductTierID(s)
	return oshc
}

// SetNillableStripeProductTierID sets the "stripe_product_tier_id" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableStripeProductTierID(s *string) *OrgSubscriptionHistoryCreate {
	if s != nil {
		oshc.SetStripeProductTierID(*s)
	}
	return oshc
}

// SetStripeSubscriptionStatus sets the "stripe_subscription_status" field.
func (oshc *OrgSubscriptionHistoryCreate) SetStripeSubscriptionStatus(s string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetStripeSubscriptionStatus(s)
	return oshc
}

// SetNillableStripeSubscriptionStatus sets the "stripe_subscription_status" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableStripeSubscriptionStatus(s *string) *OrgSubscriptionHistoryCreate {
	if s != nil {
		oshc.SetStripeSubscriptionStatus(*s)
	}
	return oshc
}

// SetActive sets the "active" field.
func (oshc *OrgSubscriptionHistoryCreate) SetActive(b bool) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetActive(b)
	return oshc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableActive(b *bool) *OrgSubscriptionHistoryCreate {
	if b != nil {
		oshc.SetActive(*b)
	}
	return oshc
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (oshc *OrgSubscriptionHistoryCreate) SetStripeCustomerID(s string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetStripeCustomerID(s)
	return oshc
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableStripeCustomerID(s *string) *OrgSubscriptionHistoryCreate {
	if s != nil {
		oshc.SetStripeCustomerID(*s)
	}
	return oshc
}

// SetExpiresAt sets the "expires_at" field.
func (oshc *OrgSubscriptionHistoryCreate) SetExpiresAt(t time.Time) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetExpiresAt(t)
	return oshc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableExpiresAt(t *time.Time) *OrgSubscriptionHistoryCreate {
	if t != nil {
		oshc.SetExpiresAt(*t)
	}
	return oshc
}

// SetTrialExpiresAt sets the "trial_expires_at" field.
func (oshc *OrgSubscriptionHistoryCreate) SetTrialExpiresAt(t time.Time) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetTrialExpiresAt(t)
	return oshc
}

// SetNillableTrialExpiresAt sets the "trial_expires_at" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableTrialExpiresAt(t *time.Time) *OrgSubscriptionHistoryCreate {
	if t != nil {
		oshc.SetTrialExpiresAt(*t)
	}
	return oshc
}

// SetDaysUntilDue sets the "days_until_due" field.
func (oshc *OrgSubscriptionHistoryCreate) SetDaysUntilDue(s string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetDaysUntilDue(s)
	return oshc
}

// SetNillableDaysUntilDue sets the "days_until_due" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableDaysUntilDue(s *string) *OrgSubscriptionHistoryCreate {
	if s != nil {
		oshc.SetDaysUntilDue(*s)
	}
	return oshc
}

// SetPaymentMethodAdded sets the "payment_method_added" field.
func (oshc *OrgSubscriptionHistoryCreate) SetPaymentMethodAdded(b bool) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetPaymentMethodAdded(b)
	return oshc
}

// SetNillablePaymentMethodAdded sets the "payment_method_added" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillablePaymentMethodAdded(b *bool) *OrgSubscriptionHistoryCreate {
	if b != nil {
		oshc.SetPaymentMethodAdded(*b)
	}
	return oshc
}

// SetFeatures sets the "features" field.
func (oshc *OrgSubscriptionHistoryCreate) SetFeatures(s []string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetFeatures(s)
	return oshc
}

// SetFeatureLookupKeys sets the "feature_lookup_keys" field.
func (oshc *OrgSubscriptionHistoryCreate) SetFeatureLookupKeys(s []string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetFeatureLookupKeys(s)
	return oshc
}

// SetID sets the "id" field.
func (oshc *OrgSubscriptionHistoryCreate) SetID(s string) *OrgSubscriptionHistoryCreate {
	oshc.mutation.SetID(s)
	return oshc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oshc *OrgSubscriptionHistoryCreate) SetNillableID(s *string) *OrgSubscriptionHistoryCreate {
	if s != nil {
		oshc.SetID(*s)
	}
	return oshc
}

// Mutation returns the OrgSubscriptionHistoryMutation object of the builder.
func (oshc *OrgSubscriptionHistoryCreate) Mutation() *OrgSubscriptionHistoryMutation {
	return oshc.mutation
}

// Save creates the OrgSubscriptionHistory in the database.
func (oshc *OrgSubscriptionHistoryCreate) Save(ctx context.Context) (*OrgSubscriptionHistory, error) {
	oshc.defaults()
	return withHooks(ctx, oshc.sqlSave, oshc.mutation, oshc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oshc *OrgSubscriptionHistoryCreate) SaveX(ctx context.Context) *OrgSubscriptionHistory {
	v, err := oshc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oshc *OrgSubscriptionHistoryCreate) Exec(ctx context.Context) error {
	_, err := oshc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oshc *OrgSubscriptionHistoryCreate) ExecX(ctx context.Context) {
	if err := oshc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oshc *OrgSubscriptionHistoryCreate) defaults() {
	if _, ok := oshc.mutation.HistoryTime(); !ok {
		v := orgsubscriptionhistory.DefaultHistoryTime()
		oshc.mutation.SetHistoryTime(v)
	}
	if _, ok := oshc.mutation.CreatedAt(); !ok {
		v := orgsubscriptionhistory.DefaultCreatedAt()
		oshc.mutation.SetCreatedAt(v)
	}
	if _, ok := oshc.mutation.UpdatedAt(); !ok {
		v := orgsubscriptionhistory.DefaultUpdatedAt()
		oshc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oshc.mutation.Tags(); !ok {
		v := orgsubscriptionhistory.DefaultTags
		oshc.mutation.SetTags(v)
	}
	if _, ok := oshc.mutation.Active(); !ok {
		v := orgsubscriptionhistory.DefaultActive
		oshc.mutation.SetActive(v)
	}
	if _, ok := oshc.mutation.ID(); !ok {
		v := orgsubscriptionhistory.DefaultID()
		oshc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oshc *OrgSubscriptionHistoryCreate) check() error {
	if _, ok := oshc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "OrgSubscriptionHistory.history_time"`)}
	}
	if _, ok := oshc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "OrgSubscriptionHistory.operation"`)}
	}
	if v, ok := oshc.mutation.Operation(); ok {
		if err := orgsubscriptionhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "OrgSubscriptionHistory.operation": %w`, err)}
		}
	}
	if _, ok := oshc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`generated: missing required field "OrgSubscriptionHistory.active"`)}
	}
	return nil
}

func (oshc *OrgSubscriptionHistoryCreate) sqlSave(ctx context.Context) (*OrgSubscriptionHistory, error) {
	if err := oshc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oshc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oshc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrgSubscriptionHistory.ID type: %T", _spec.ID.Value)
		}
	}
	oshc.mutation.id = &_node.ID
	oshc.mutation.done = true
	return _node, nil
}

func (oshc *OrgSubscriptionHistoryCreate) createSpec() (*OrgSubscriptionHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &OrgSubscriptionHistory{config: oshc.config}
		_spec = sqlgraph.NewCreateSpec(orgsubscriptionhistory.Table, sqlgraph.NewFieldSpec(orgsubscriptionhistory.FieldID, field.TypeString))
	)
	_spec.Schema = oshc.schemaConfig.OrgSubscriptionHistory
	if id, ok := oshc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oshc.mutation.HistoryTime(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := oshc.mutation.Ref(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := oshc.mutation.Operation(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := oshc.mutation.CreatedAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oshc.mutation.UpdatedAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oshc.mutation.CreatedBy(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := oshc.mutation.UpdatedBy(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := oshc.mutation.Tags(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := oshc.mutation.DeletedAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := oshc.mutation.DeletedBy(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := oshc.mutation.OwnerID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := oshc.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeSubscriptionID, field.TypeString, value)
		_node.StripeSubscriptionID = value
	}
	if value, ok := oshc.mutation.ProductTier(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldProductTier, field.TypeString, value)
		_node.ProductTier = value
	}
	if value, ok := oshc.mutation.ProductPrice(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldProductPrice, field.TypeJSON, value)
		_node.ProductPrice = value
	}
	if value, ok := oshc.mutation.StripeProductTierID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeProductTierID, field.TypeString, value)
		_node.StripeProductTierID = value
	}
	if value, ok := oshc.mutation.StripeSubscriptionStatus(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeSubscriptionStatus, field.TypeString, value)
		_node.StripeSubscriptionStatus = value
	}
	if value, ok := oshc.mutation.Active(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := oshc.mutation.StripeCustomerID(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldStripeCustomerID, field.TypeString, value)
		_node.StripeCustomerID = value
	}
	if value, ok := oshc.mutation.ExpiresAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = &value
	}
	if value, ok := oshc.mutation.TrialExpiresAt(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldTrialExpiresAt, field.TypeTime, value)
		_node.TrialExpiresAt = &value
	}
	if value, ok := oshc.mutation.DaysUntilDue(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldDaysUntilDue, field.TypeString, value)
		_node.DaysUntilDue = &value
	}
	if value, ok := oshc.mutation.PaymentMethodAdded(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldPaymentMethodAdded, field.TypeBool, value)
		_node.PaymentMethodAdded = &value
	}
	if value, ok := oshc.mutation.Features(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldFeatures, field.TypeJSON, value)
		_node.Features = value
	}
	if value, ok := oshc.mutation.FeatureLookupKeys(); ok {
		_spec.SetField(orgsubscriptionhistory.FieldFeatureLookupKeys, field.TypeJSON, value)
		_node.FeatureLookupKeys = value
	}
	return _node, _spec
}

// OrgSubscriptionHistoryCreateBulk is the builder for creating many OrgSubscriptionHistory entities in bulk.
type OrgSubscriptionHistoryCreateBulk struct {
	config
	err      error
	builders []*OrgSubscriptionHistoryCreate
}

// Save creates the OrgSubscriptionHistory entities in the database.
func (oshcb *OrgSubscriptionHistoryCreateBulk) Save(ctx context.Context) ([]*OrgSubscriptionHistory, error) {
	if oshcb.err != nil {
		return nil, oshcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oshcb.builders))
	nodes := make([]*OrgSubscriptionHistory, len(oshcb.builders))
	mutators := make([]Mutator, len(oshcb.builders))
	for i := range oshcb.builders {
		func(i int, root context.Context) {
			builder := oshcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrgSubscriptionHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oshcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oshcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oshcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oshcb *OrgSubscriptionHistoryCreateBulk) SaveX(ctx context.Context) []*OrgSubscriptionHistory {
	v, err := oshcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oshcb *OrgSubscriptionHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := oshcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oshcb *OrgSubscriptionHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := oshcb.Exec(ctx); err != nil {
		panic(err)
	}
}
