// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/controlobjectivehistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ControlObjectiveHistory is the model entity for the ControlObjectiveHistory schema.
type ControlObjectiveHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// revision of the object as a semver (e.g. v1.0.0), by default any update will bump the patch version, unless the revision_bump field is set
	Revision string `json:"revision,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the control objective
	Name string `json:"name,omitempty"`
	// the desired outcome or target of the control objective
	DesiredOutcome string `json:"desired_outcome,omitempty"`
	// status of the control objective
	Status string `json:"status,omitempty"`
	// source of the control, e.g. framework, template, custom, etc.
	Source enums.ControlSource `json:"source,omitempty"`
	// type of the control objective e.g. compliance, financial, operational, etc.
	ControlObjectiveType string `json:"control_objective_type,omitempty"`
	// category of the control
	Category string `json:"category,omitempty"`
	// subcategory of the control
	Subcategory  string `json:"subcategory,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ControlObjectiveHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case controlobjectivehistory.FieldTags:
			values[i] = new([]byte)
		case controlobjectivehistory.FieldOperation:
			values[i] = new(history.OpType)
		case controlobjectivehistory.FieldID, controlobjectivehistory.FieldRef, controlobjectivehistory.FieldCreatedBy, controlobjectivehistory.FieldUpdatedBy, controlobjectivehistory.FieldDeletedBy, controlobjectivehistory.FieldDisplayID, controlobjectivehistory.FieldRevision, controlobjectivehistory.FieldOwnerID, controlobjectivehistory.FieldName, controlobjectivehistory.FieldDesiredOutcome, controlobjectivehistory.FieldStatus, controlobjectivehistory.FieldSource, controlobjectivehistory.FieldControlObjectiveType, controlobjectivehistory.FieldCategory, controlobjectivehistory.FieldSubcategory:
			values[i] = new(sql.NullString)
		case controlobjectivehistory.FieldHistoryTime, controlobjectivehistory.FieldCreatedAt, controlobjectivehistory.FieldUpdatedAt, controlobjectivehistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ControlObjectiveHistory fields.
func (coh *ControlObjectiveHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case controlobjectivehistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				coh.ID = value.String
			}
		case controlobjectivehistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				coh.HistoryTime = value.Time
			}
		case controlobjectivehistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				coh.Ref = value.String
			}
		case controlobjectivehistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				coh.Operation = *value
			}
		case controlobjectivehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				coh.CreatedAt = value.Time
			}
		case controlobjectivehistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				coh.UpdatedAt = value.Time
			}
		case controlobjectivehistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				coh.CreatedBy = value.String
			}
		case controlobjectivehistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				coh.UpdatedBy = value.String
			}
		case controlobjectivehistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				coh.DeletedAt = value.Time
			}
		case controlobjectivehistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				coh.DeletedBy = value.String
			}
		case controlobjectivehistory.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				coh.DisplayID = value.String
			}
		case controlobjectivehistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &coh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case controlobjectivehistory.FieldRevision:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field revision", values[i])
			} else if value.Valid {
				coh.Revision = value.String
			}
		case controlobjectivehistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				coh.OwnerID = value.String
			}
		case controlobjectivehistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				coh.Name = value.String
			}
		case controlobjectivehistory.FieldDesiredOutcome:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desired_outcome", values[i])
			} else if value.Valid {
				coh.DesiredOutcome = value.String
			}
		case controlobjectivehistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				coh.Status = value.String
			}
		case controlobjectivehistory.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				coh.Source = enums.ControlSource(value.String)
			}
		case controlobjectivehistory.FieldControlObjectiveType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field control_objective_type", values[i])
			} else if value.Valid {
				coh.ControlObjectiveType = value.String
			}
		case controlobjectivehistory.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				coh.Category = value.String
			}
		case controlobjectivehistory.FieldSubcategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field subcategory", values[i])
			} else if value.Valid {
				coh.Subcategory = value.String
			}
		default:
			coh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ControlObjectiveHistory.
// This includes values selected through modifiers, order, etc.
func (coh *ControlObjectiveHistory) Value(name string) (ent.Value, error) {
	return coh.selectValues.Get(name)
}

// Update returns a builder for updating this ControlObjectiveHistory.
// Note that you need to call ControlObjectiveHistory.Unwrap() before calling this method if this ControlObjectiveHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (coh *ControlObjectiveHistory) Update() *ControlObjectiveHistoryUpdateOne {
	return NewControlObjectiveHistoryClient(coh.config).UpdateOne(coh)
}

// Unwrap unwraps the ControlObjectiveHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (coh *ControlObjectiveHistory) Unwrap() *ControlObjectiveHistory {
	_tx, ok := coh.config.driver.(*txDriver)
	if !ok {
		panic("generated: ControlObjectiveHistory is not a transactional entity")
	}
	coh.config.driver = _tx.drv
	return coh
}

// String implements the fmt.Stringer.
func (coh *ControlObjectiveHistory) String() string {
	var builder strings.Builder
	builder.WriteString("ControlObjectiveHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", coh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(coh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(coh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", coh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(coh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(coh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(coh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(coh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(coh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(coh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(coh.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", coh.Tags))
	builder.WriteString(", ")
	builder.WriteString("revision=")
	builder.WriteString(coh.Revision)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(coh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(coh.Name)
	builder.WriteString(", ")
	builder.WriteString("desired_outcome=")
	builder.WriteString(coh.DesiredOutcome)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(coh.Status)
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(fmt.Sprintf("%v", coh.Source))
	builder.WriteString(", ")
	builder.WriteString("control_objective_type=")
	builder.WriteString(coh.ControlObjectiveType)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(coh.Category)
	builder.WriteString(", ")
	builder.WriteString("subcategory=")
	builder.WriteString(coh.Subcategory)
	builder.WriteByte(')')
	return builder.String()
}

// ControlObjectiveHistories is a parsable slice of ControlObjectiveHistory.
type ControlObjectiveHistories []*ControlObjectiveHistory
