// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/subprocessorhistory"
	"github.com/theopenlane/entx/history"
)

// SubprocessorHistory is the model entity for the SubprocessorHistory schema.
type SubprocessorHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// indicates if the record is owned by the the openlane system and not by an organization
	SystemOwned bool `json:"system_owned,omitempty"`
	// name of the standard body
	Name string `json:"name,omitempty"`
	// description of the subprocessor
	Description string `json:"description,omitempty"`
	// URL of the logo
	LogoRemoteURL *string `json:"logo_remote_url,omitempty"`
	// The local logo file id, takes precedence over the logo remote URL
	LogoLocalFileID *string `json:"logo_local_file_id,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubprocessorHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subprocessorhistory.FieldTags:
			values[i] = new([]byte)
		case subprocessorhistory.FieldOperation:
			values[i] = new(history.OpType)
		case subprocessorhistory.FieldSystemOwned:
			values[i] = new(sql.NullBool)
		case subprocessorhistory.FieldID, subprocessorhistory.FieldRef, subprocessorhistory.FieldCreatedBy, subprocessorhistory.FieldUpdatedBy, subprocessorhistory.FieldDeletedBy, subprocessorhistory.FieldOwnerID, subprocessorhistory.FieldName, subprocessorhistory.FieldDescription, subprocessorhistory.FieldLogoRemoteURL, subprocessorhistory.FieldLogoLocalFileID:
			values[i] = new(sql.NullString)
		case subprocessorhistory.FieldHistoryTime, subprocessorhistory.FieldCreatedAt, subprocessorhistory.FieldUpdatedAt, subprocessorhistory.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubprocessorHistory fields.
func (sh *SubprocessorHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subprocessorhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sh.ID = value.String
			}
		case subprocessorhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				sh.HistoryTime = value.Time
			}
		case subprocessorhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				sh.Ref = value.String
			}
		case subprocessorhistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				sh.Operation = *value
			}
		case subprocessorhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sh.CreatedAt = value.Time
			}
		case subprocessorhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sh.UpdatedAt = value.Time
			}
		case subprocessorhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sh.CreatedBy = value.String
			}
		case subprocessorhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sh.UpdatedBy = value.String
			}
		case subprocessorhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				sh.DeletedAt = value.Time
			}
		case subprocessorhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				sh.DeletedBy = value.String
			}
		case subprocessorhistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &sh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case subprocessorhistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				sh.OwnerID = value.String
			}
		case subprocessorhistory.FieldSystemOwned:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field system_owned", values[i])
			} else if value.Valid {
				sh.SystemOwned = value.Bool
			}
		case subprocessorhistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sh.Name = value.String
			}
		case subprocessorhistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				sh.Description = value.String
			}
		case subprocessorhistory.FieldLogoRemoteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_remote_url", values[i])
			} else if value.Valid {
				sh.LogoRemoteURL = new(string)
				*sh.LogoRemoteURL = value.String
			}
		case subprocessorhistory.FieldLogoLocalFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_local_file_id", values[i])
			} else if value.Valid {
				sh.LogoLocalFileID = new(string)
				*sh.LogoLocalFileID = value.String
			}
		default:
			sh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubprocessorHistory.
// This includes values selected through modifiers, order, etc.
func (sh *SubprocessorHistory) Value(name string) (ent.Value, error) {
	return sh.selectValues.Get(name)
}

// Update returns a builder for updating this SubprocessorHistory.
// Note that you need to call SubprocessorHistory.Unwrap() before calling this method if this SubprocessorHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (sh *SubprocessorHistory) Update() *SubprocessorHistoryUpdateOne {
	return NewSubprocessorHistoryClient(sh.config).UpdateOne(sh)
}

// Unwrap unwraps the SubprocessorHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sh *SubprocessorHistory) Unwrap() *SubprocessorHistory {
	_tx, ok := sh.config.driver.(*txDriver)
	if !ok {
		panic("generated: SubprocessorHistory is not a transactional entity")
	}
	sh.config.driver = _tx.drv
	return sh
}

// String implements the fmt.Stringer.
func (sh *SubprocessorHistory) String() string {
	var builder strings.Builder
	builder.WriteString("SubprocessorHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(sh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(sh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", sh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(sh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(sh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", sh.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(sh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("system_owned=")
	builder.WriteString(fmt.Sprintf("%v", sh.SystemOwned))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(sh.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(sh.Description)
	builder.WriteString(", ")
	if v := sh.LogoRemoteURL; v != nil {
		builder.WriteString("logo_remote_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := sh.LogoLocalFileID; v != nil {
		builder.WriteString("logo_local_file_id=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// SubprocessorHistories is a parsable slice of SubprocessorHistory.
type SubprocessorHistories []*SubprocessorHistory
