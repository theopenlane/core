// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnerhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// JobRunnerHistoryCreate is the builder for creating a JobRunnerHistory entity.
type JobRunnerHistoryCreate struct {
	config
	mutation *JobRunnerHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (jrhc *JobRunnerHistoryCreate) SetHistoryTime(t time.Time) *JobRunnerHistoryCreate {
	jrhc.mutation.SetHistoryTime(t)
	return jrhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (jrhc *JobRunnerHistoryCreate) SetNillableHistoryTime(t *time.Time) *JobRunnerHistoryCreate {
	if t != nil {
		jrhc.SetHistoryTime(*t)
	}
	return jrhc
}

// SetRef sets the "ref" field.
func (jrhc *JobRunnerHistoryCreate) SetRef(s string) *JobRunnerHistoryCreate {
	jrhc.mutation.SetRef(s)
	return jrhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (jrhc *JobRunnerHistoryCreate) SetNillableRef(s *string) *JobRunnerHistoryCreate {
	if s != nil {
		jrhc.SetRef(*s)
	}
	return jrhc
}

// SetOperation sets the "operation" field.
func (jrhc *JobRunnerHistoryCreate) SetOperation(ht history.OpType) *JobRunnerHistoryCreate {
	jrhc.mutation.SetOperation(ht)
	return jrhc
}

// SetCreatedAt sets the "created_at" field.
func (jrhc *JobRunnerHistoryCreate) SetCreatedAt(t time.Time) *JobRunnerHistoryCreate {
	jrhc.mutation.SetCreatedAt(t)
	return jrhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jrhc *JobRunnerHistoryCreate) SetNillableCreatedAt(t *time.Time) *JobRunnerHistoryCreate {
	if t != nil {
		jrhc.SetCreatedAt(*t)
	}
	return jrhc
}

// SetUpdatedAt sets the "updated_at" field.
func (jrhc *JobRunnerHistoryCreate) SetUpdatedAt(t time.Time) *JobRunnerHistoryCreate {
	jrhc.mutation.SetUpdatedAt(t)
	return jrhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (jrhc *JobRunnerHistoryCreate) SetNillableUpdatedAt(t *time.Time) *JobRunnerHistoryCreate {
	if t != nil {
		jrhc.SetUpdatedAt(*t)
	}
	return jrhc
}

// SetCreatedBy sets the "created_by" field.
func (jrhc *JobRunnerHistoryCreate) SetCreatedBy(s string) *JobRunnerHistoryCreate {
	jrhc.mutation.SetCreatedBy(s)
	return jrhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (jrhc *JobRunnerHistoryCreate) SetNillableCreatedBy(s *string) *JobRunnerHistoryCreate {
	if s != nil {
		jrhc.SetCreatedBy(*s)
	}
	return jrhc
}

// SetUpdatedBy sets the "updated_by" field.
func (jrhc *JobRunnerHistoryCreate) SetUpdatedBy(s string) *JobRunnerHistoryCreate {
	jrhc.mutation.SetUpdatedBy(s)
	return jrhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (jrhc *JobRunnerHistoryCreate) SetNillableUpdatedBy(s *string) *JobRunnerHistoryCreate {
	if s != nil {
		jrhc.SetUpdatedBy(*s)
	}
	return jrhc
}

// SetDeletedAt sets the "deleted_at" field.
func (jrhc *JobRunnerHistoryCreate) SetDeletedAt(t time.Time) *JobRunnerHistoryCreate {
	jrhc.mutation.SetDeletedAt(t)
	return jrhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (jrhc *JobRunnerHistoryCreate) SetNillableDeletedAt(t *time.Time) *JobRunnerHistoryCreate {
	if t != nil {
		jrhc.SetDeletedAt(*t)
	}
	return jrhc
}

// SetDeletedBy sets the "deleted_by" field.
func (jrhc *JobRunnerHistoryCreate) SetDeletedBy(s string) *JobRunnerHistoryCreate {
	jrhc.mutation.SetDeletedBy(s)
	return jrhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (jrhc *JobRunnerHistoryCreate) SetNillableDeletedBy(s *string) *JobRunnerHistoryCreate {
	if s != nil {
		jrhc.SetDeletedBy(*s)
	}
	return jrhc
}

// SetDisplayID sets the "display_id" field.
func (jrhc *JobRunnerHistoryCreate) SetDisplayID(s string) *JobRunnerHistoryCreate {
	jrhc.mutation.SetDisplayID(s)
	return jrhc
}

// SetTags sets the "tags" field.
func (jrhc *JobRunnerHistoryCreate) SetTags(s []string) *JobRunnerHistoryCreate {
	jrhc.mutation.SetTags(s)
	return jrhc
}

// SetOwnerID sets the "owner_id" field.
func (jrhc *JobRunnerHistoryCreate) SetOwnerID(s string) *JobRunnerHistoryCreate {
	jrhc.mutation.SetOwnerID(s)
	return jrhc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (jrhc *JobRunnerHistoryCreate) SetNillableOwnerID(s *string) *JobRunnerHistoryCreate {
	if s != nil {
		jrhc.SetOwnerID(*s)
	}
	return jrhc
}

// SetSystemOwned sets the "system_owned" field.
func (jrhc *JobRunnerHistoryCreate) SetSystemOwned(b bool) *JobRunnerHistoryCreate {
	jrhc.mutation.SetSystemOwned(b)
	return jrhc
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (jrhc *JobRunnerHistoryCreate) SetNillableSystemOwned(b *bool) *JobRunnerHistoryCreate {
	if b != nil {
		jrhc.SetSystemOwned(*b)
	}
	return jrhc
}

// SetName sets the "name" field.
func (jrhc *JobRunnerHistoryCreate) SetName(s string) *JobRunnerHistoryCreate {
	jrhc.mutation.SetName(s)
	return jrhc
}

// SetStatus sets the "status" field.
func (jrhc *JobRunnerHistoryCreate) SetStatus(ers enums.JobRunnerStatus) *JobRunnerHistoryCreate {
	jrhc.mutation.SetStatus(ers)
	return jrhc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jrhc *JobRunnerHistoryCreate) SetNillableStatus(ers *enums.JobRunnerStatus) *JobRunnerHistoryCreate {
	if ers != nil {
		jrhc.SetStatus(*ers)
	}
	return jrhc
}

// SetIPAddress sets the "ip_address" field.
func (jrhc *JobRunnerHistoryCreate) SetIPAddress(s string) *JobRunnerHistoryCreate {
	jrhc.mutation.SetIPAddress(s)
	return jrhc
}

// SetID sets the "id" field.
func (jrhc *JobRunnerHistoryCreate) SetID(s string) *JobRunnerHistoryCreate {
	jrhc.mutation.SetID(s)
	return jrhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (jrhc *JobRunnerHistoryCreate) SetNillableID(s *string) *JobRunnerHistoryCreate {
	if s != nil {
		jrhc.SetID(*s)
	}
	return jrhc
}

// Mutation returns the JobRunnerHistoryMutation object of the builder.
func (jrhc *JobRunnerHistoryCreate) Mutation() *JobRunnerHistoryMutation {
	return jrhc.mutation
}

// Save creates the JobRunnerHistory in the database.
func (jrhc *JobRunnerHistoryCreate) Save(ctx context.Context) (*JobRunnerHistory, error) {
	jrhc.defaults()
	return withHooks(ctx, jrhc.sqlSave, jrhc.mutation, jrhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jrhc *JobRunnerHistoryCreate) SaveX(ctx context.Context) *JobRunnerHistory {
	v, err := jrhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrhc *JobRunnerHistoryCreate) Exec(ctx context.Context) error {
	_, err := jrhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrhc *JobRunnerHistoryCreate) ExecX(ctx context.Context) {
	if err := jrhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jrhc *JobRunnerHistoryCreate) defaults() {
	if _, ok := jrhc.mutation.HistoryTime(); !ok {
		v := jobrunnerhistory.DefaultHistoryTime()
		jrhc.mutation.SetHistoryTime(v)
	}
	if _, ok := jrhc.mutation.CreatedAt(); !ok {
		v := jobrunnerhistory.DefaultCreatedAt()
		jrhc.mutation.SetCreatedAt(v)
	}
	if _, ok := jrhc.mutation.UpdatedAt(); !ok {
		v := jobrunnerhistory.DefaultUpdatedAt()
		jrhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jrhc.mutation.Tags(); !ok {
		v := jobrunnerhistory.DefaultTags
		jrhc.mutation.SetTags(v)
	}
	if _, ok := jrhc.mutation.SystemOwned(); !ok {
		v := jobrunnerhistory.DefaultSystemOwned
		jrhc.mutation.SetSystemOwned(v)
	}
	if _, ok := jrhc.mutation.Status(); !ok {
		v := jobrunnerhistory.DefaultStatus
		jrhc.mutation.SetStatus(v)
	}
	if _, ok := jrhc.mutation.ID(); !ok {
		v := jobrunnerhistory.DefaultID()
		jrhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jrhc *JobRunnerHistoryCreate) check() error {
	if _, ok := jrhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "JobRunnerHistory.history_time"`)}
	}
	if _, ok := jrhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "JobRunnerHistory.operation"`)}
	}
	if v, ok := jrhc.mutation.Operation(); ok {
		if err := jobrunnerhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "JobRunnerHistory.operation": %w`, err)}
		}
	}
	if _, ok := jrhc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "JobRunnerHistory.display_id"`)}
	}
	if _, ok := jrhc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "JobRunnerHistory.name"`)}
	}
	if _, ok := jrhc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "JobRunnerHistory.status"`)}
	}
	if v, ok := jrhc.mutation.Status(); ok {
		if err := jobrunnerhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "JobRunnerHistory.status": %w`, err)}
		}
	}
	if _, ok := jrhc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`generated: missing required field "JobRunnerHistory.ip_address"`)}
	}
	return nil
}

func (jrhc *JobRunnerHistoryCreate) sqlSave(ctx context.Context) (*JobRunnerHistory, error) {
	if err := jrhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jrhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jrhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected JobRunnerHistory.ID type: %T", _spec.ID.Value)
		}
	}
	jrhc.mutation.id = &_node.ID
	jrhc.mutation.done = true
	return _node, nil
}

func (jrhc *JobRunnerHistoryCreate) createSpec() (*JobRunnerHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &JobRunnerHistory{config: jrhc.config}
		_spec = sqlgraph.NewCreateSpec(jobrunnerhistory.Table, sqlgraph.NewFieldSpec(jobrunnerhistory.FieldID, field.TypeString))
	)
	_spec.Schema = jrhc.schemaConfig.JobRunnerHistory
	if id, ok := jrhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jrhc.mutation.HistoryTime(); ok {
		_spec.SetField(jobrunnerhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := jrhc.mutation.Ref(); ok {
		_spec.SetField(jobrunnerhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := jrhc.mutation.Operation(); ok {
		_spec.SetField(jobrunnerhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := jrhc.mutation.CreatedAt(); ok {
		_spec.SetField(jobrunnerhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jrhc.mutation.UpdatedAt(); ok {
		_spec.SetField(jobrunnerhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := jrhc.mutation.CreatedBy(); ok {
		_spec.SetField(jobrunnerhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := jrhc.mutation.UpdatedBy(); ok {
		_spec.SetField(jobrunnerhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := jrhc.mutation.DeletedAt(); ok {
		_spec.SetField(jobrunnerhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := jrhc.mutation.DeletedBy(); ok {
		_spec.SetField(jobrunnerhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := jrhc.mutation.DisplayID(); ok {
		_spec.SetField(jobrunnerhistory.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := jrhc.mutation.Tags(); ok {
		_spec.SetField(jobrunnerhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := jrhc.mutation.OwnerID(); ok {
		_spec.SetField(jobrunnerhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := jrhc.mutation.SystemOwned(); ok {
		_spec.SetField(jobrunnerhistory.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := jrhc.mutation.Name(); ok {
		_spec.SetField(jobrunnerhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := jrhc.mutation.Status(); ok {
		_spec.SetField(jobrunnerhistory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := jrhc.mutation.IPAddress(); ok {
		_spec.SetField(jobrunnerhistory.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	return _node, _spec
}

// JobRunnerHistoryCreateBulk is the builder for creating many JobRunnerHistory entities in bulk.
type JobRunnerHistoryCreateBulk struct {
	config
	err      error
	builders []*JobRunnerHistoryCreate
}

// Save creates the JobRunnerHistory entities in the database.
func (jrhcb *JobRunnerHistoryCreateBulk) Save(ctx context.Context) ([]*JobRunnerHistory, error) {
	if jrhcb.err != nil {
		return nil, jrhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jrhcb.builders))
	nodes := make([]*JobRunnerHistory, len(jrhcb.builders))
	mutators := make([]Mutator, len(jrhcb.builders))
	for i := range jrhcb.builders {
		func(i int, root context.Context) {
			builder := jrhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobRunnerHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jrhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jrhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jrhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jrhcb *JobRunnerHistoryCreateBulk) SaveX(ctx context.Context) []*JobRunnerHistory {
	v, err := jrhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jrhcb *JobRunnerHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := jrhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jrhcb *JobRunnerHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := jrhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
