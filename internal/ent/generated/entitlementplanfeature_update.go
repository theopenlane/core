// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EntitlementPlanFeatureUpdate is the builder for updating EntitlementPlanFeature entities.
type EntitlementPlanFeatureUpdate struct {
	config
	hooks     []Hook
	mutation  *EntitlementPlanFeatureMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EntitlementPlanFeatureUpdate builder.
func (epfu *EntitlementPlanFeatureUpdate) Where(ps ...predicate.EntitlementPlanFeature) *EntitlementPlanFeatureUpdate {
	epfu.mutation.Where(ps...)
	return epfu
}

// SetUpdatedAt sets the "updated_at" field.
func (epfu *EntitlementPlanFeatureUpdate) SetUpdatedAt(t time.Time) *EntitlementPlanFeatureUpdate {
	epfu.mutation.SetUpdatedAt(t)
	return epfu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (epfu *EntitlementPlanFeatureUpdate) ClearUpdatedAt() *EntitlementPlanFeatureUpdate {
	epfu.mutation.ClearUpdatedAt()
	return epfu
}

// SetUpdatedBy sets the "updated_by" field.
func (epfu *EntitlementPlanFeatureUpdate) SetUpdatedBy(s string) *EntitlementPlanFeatureUpdate {
	epfu.mutation.SetUpdatedBy(s)
	return epfu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (epfu *EntitlementPlanFeatureUpdate) SetNillableUpdatedBy(s *string) *EntitlementPlanFeatureUpdate {
	if s != nil {
		epfu.SetUpdatedBy(*s)
	}
	return epfu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (epfu *EntitlementPlanFeatureUpdate) ClearUpdatedBy() *EntitlementPlanFeatureUpdate {
	epfu.mutation.ClearUpdatedBy()
	return epfu
}

// SetDeletedAt sets the "deleted_at" field.
func (epfu *EntitlementPlanFeatureUpdate) SetDeletedAt(t time.Time) *EntitlementPlanFeatureUpdate {
	epfu.mutation.SetDeletedAt(t)
	return epfu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epfu *EntitlementPlanFeatureUpdate) SetNillableDeletedAt(t *time.Time) *EntitlementPlanFeatureUpdate {
	if t != nil {
		epfu.SetDeletedAt(*t)
	}
	return epfu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (epfu *EntitlementPlanFeatureUpdate) ClearDeletedAt() *EntitlementPlanFeatureUpdate {
	epfu.mutation.ClearDeletedAt()
	return epfu
}

// SetDeletedBy sets the "deleted_by" field.
func (epfu *EntitlementPlanFeatureUpdate) SetDeletedBy(s string) *EntitlementPlanFeatureUpdate {
	epfu.mutation.SetDeletedBy(s)
	return epfu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (epfu *EntitlementPlanFeatureUpdate) SetNillableDeletedBy(s *string) *EntitlementPlanFeatureUpdate {
	if s != nil {
		epfu.SetDeletedBy(*s)
	}
	return epfu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (epfu *EntitlementPlanFeatureUpdate) ClearDeletedBy() *EntitlementPlanFeatureUpdate {
	epfu.mutation.ClearDeletedBy()
	return epfu
}

// SetTags sets the "tags" field.
func (epfu *EntitlementPlanFeatureUpdate) SetTags(s []string) *EntitlementPlanFeatureUpdate {
	epfu.mutation.SetTags(s)
	return epfu
}

// AppendTags appends s to the "tags" field.
func (epfu *EntitlementPlanFeatureUpdate) AppendTags(s []string) *EntitlementPlanFeatureUpdate {
	epfu.mutation.AppendTags(s)
	return epfu
}

// ClearTags clears the value of the "tags" field.
func (epfu *EntitlementPlanFeatureUpdate) ClearTags() *EntitlementPlanFeatureUpdate {
	epfu.mutation.ClearTags()
	return epfu
}

// SetOwnerID sets the "owner_id" field.
func (epfu *EntitlementPlanFeatureUpdate) SetOwnerID(s string) *EntitlementPlanFeatureUpdate {
	epfu.mutation.SetOwnerID(s)
	return epfu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (epfu *EntitlementPlanFeatureUpdate) SetNillableOwnerID(s *string) *EntitlementPlanFeatureUpdate {
	if s != nil {
		epfu.SetOwnerID(*s)
	}
	return epfu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (epfu *EntitlementPlanFeatureUpdate) ClearOwnerID() *EntitlementPlanFeatureUpdate {
	epfu.mutation.ClearOwnerID()
	return epfu
}

// SetMetadata sets the "metadata" field.
func (epfu *EntitlementPlanFeatureUpdate) SetMetadata(m map[string]interface{}) *EntitlementPlanFeatureUpdate {
	epfu.mutation.SetMetadata(m)
	return epfu
}

// ClearMetadata clears the value of the "metadata" field.
func (epfu *EntitlementPlanFeatureUpdate) ClearMetadata() *EntitlementPlanFeatureUpdate {
	epfu.mutation.ClearMetadata()
	return epfu
}

// SetOwner sets the "owner" edge to the Organization entity.
func (epfu *EntitlementPlanFeatureUpdate) SetOwner(o *Organization) *EntitlementPlanFeatureUpdate {
	return epfu.SetOwnerID(o.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (epfu *EntitlementPlanFeatureUpdate) AddEventIDs(ids ...string) *EntitlementPlanFeatureUpdate {
	epfu.mutation.AddEventIDs(ids...)
	return epfu
}

// AddEvents adds the "events" edges to the Event entity.
func (epfu *EntitlementPlanFeatureUpdate) AddEvents(e ...*Event) *EntitlementPlanFeatureUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epfu.AddEventIDs(ids...)
}

// Mutation returns the EntitlementPlanFeatureMutation object of the builder.
func (epfu *EntitlementPlanFeatureUpdate) Mutation() *EntitlementPlanFeatureMutation {
	return epfu.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (epfu *EntitlementPlanFeatureUpdate) ClearOwner() *EntitlementPlanFeatureUpdate {
	epfu.mutation.ClearOwner()
	return epfu
}

// ClearEvents clears all "events" edges to the Event entity.
func (epfu *EntitlementPlanFeatureUpdate) ClearEvents() *EntitlementPlanFeatureUpdate {
	epfu.mutation.ClearEvents()
	return epfu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (epfu *EntitlementPlanFeatureUpdate) RemoveEventIDs(ids ...string) *EntitlementPlanFeatureUpdate {
	epfu.mutation.RemoveEventIDs(ids...)
	return epfu
}

// RemoveEvents removes "events" edges to Event entities.
func (epfu *EntitlementPlanFeatureUpdate) RemoveEvents(e ...*Event) *EntitlementPlanFeatureUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epfu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epfu *EntitlementPlanFeatureUpdate) Save(ctx context.Context) (int, error) {
	if err := epfu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, epfu.sqlSave, epfu.mutation, epfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epfu *EntitlementPlanFeatureUpdate) SaveX(ctx context.Context) int {
	affected, err := epfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epfu *EntitlementPlanFeatureUpdate) Exec(ctx context.Context) error {
	_, err := epfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epfu *EntitlementPlanFeatureUpdate) ExecX(ctx context.Context) {
	if err := epfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epfu *EntitlementPlanFeatureUpdate) defaults() error {
	if _, ok := epfu.mutation.UpdatedAt(); !ok && !epfu.mutation.UpdatedAtCleared() {
		if entitlementplanfeature.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeature.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeature.UpdateDefaultUpdatedAt()
		epfu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epfu *EntitlementPlanFeatureUpdate) check() error {
	if v, ok := epfu.mutation.OwnerID(); ok {
		if err := entitlementplanfeature.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "EntitlementPlanFeature.owner_id": %w`, err)}
		}
	}
	if epfu.mutation.PlanCleared() && len(epfu.mutation.PlanIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "EntitlementPlanFeature.plan"`)
	}
	if epfu.mutation.FeatureCleared() && len(epfu.mutation.FeatureIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "EntitlementPlanFeature.feature"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (epfu *EntitlementPlanFeatureUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntitlementPlanFeatureUpdate {
	epfu.modifiers = append(epfu.modifiers, modifiers...)
	return epfu
}

func (epfu *EntitlementPlanFeatureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := epfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(entitlementplanfeature.Table, entitlementplanfeature.Columns, sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString))
	if ps := epfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if epfu.mutation.CreatedAtCleared() {
		_spec.ClearField(entitlementplanfeature.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := epfu.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlementplanfeature.FieldUpdatedAt, field.TypeTime, value)
	}
	if epfu.mutation.UpdatedAtCleared() {
		_spec.ClearField(entitlementplanfeature.FieldUpdatedAt, field.TypeTime)
	}
	if epfu.mutation.CreatedByCleared() {
		_spec.ClearField(entitlementplanfeature.FieldCreatedBy, field.TypeString)
	}
	if value, ok := epfu.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlementplanfeature.FieldUpdatedBy, field.TypeString, value)
	}
	if epfu.mutation.UpdatedByCleared() {
		_spec.ClearField(entitlementplanfeature.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := epfu.mutation.DeletedAt(); ok {
		_spec.SetField(entitlementplanfeature.FieldDeletedAt, field.TypeTime, value)
	}
	if epfu.mutation.DeletedAtCleared() {
		_spec.ClearField(entitlementplanfeature.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := epfu.mutation.DeletedBy(); ok {
		_spec.SetField(entitlementplanfeature.FieldDeletedBy, field.TypeString, value)
	}
	if epfu.mutation.DeletedByCleared() {
		_spec.ClearField(entitlementplanfeature.FieldDeletedBy, field.TypeString)
	}
	if value, ok := epfu.mutation.Tags(); ok {
		_spec.SetField(entitlementplanfeature.FieldTags, field.TypeJSON, value)
	}
	if value, ok := epfu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitlementplanfeature.FieldTags, value)
		})
	}
	if epfu.mutation.TagsCleared() {
		_spec.ClearField(entitlementplanfeature.FieldTags, field.TypeJSON)
	}
	if value, ok := epfu.mutation.Metadata(); ok {
		_spec.SetField(entitlementplanfeature.FieldMetadata, field.TypeJSON, value)
	}
	if epfu.mutation.MetadataCleared() {
		_spec.ClearField(entitlementplanfeature.FieldMetadata, field.TypeJSON)
	}
	if epfu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlementplanfeature.OwnerTable,
			Columns: []string{entitlementplanfeature.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfu.schemaConfig.EntitlementPlanFeature
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epfu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlementplanfeature.OwnerTable,
			Columns: []string{entitlementplanfeature.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfu.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epfu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplanfeature.EventsTable,
			Columns: entitlementplanfeature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfu.schemaConfig.EntitlementPlanFeatureEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epfu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !epfu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplanfeature.EventsTable,
			Columns: entitlementplanfeature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfu.schemaConfig.EntitlementPlanFeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epfu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplanfeature.EventsTable,
			Columns: entitlementplanfeature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfu.schemaConfig.EntitlementPlanFeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = epfu.schemaConfig.EntitlementPlanFeature
	ctx = internal.NewSchemaConfigContext(ctx, epfu.schemaConfig)
	_spec.AddModifiers(epfu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, epfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlementplanfeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epfu.mutation.done = true
	return n, nil
}

// EntitlementPlanFeatureUpdateOne is the builder for updating a single EntitlementPlanFeature entity.
type EntitlementPlanFeatureUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EntitlementPlanFeatureMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) SetUpdatedAt(t time.Time) *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.SetUpdatedAt(t)
	return epfuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) ClearUpdatedAt() *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.ClearUpdatedAt()
	return epfuo
}

// SetUpdatedBy sets the "updated_by" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) SetUpdatedBy(s string) *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.SetUpdatedBy(s)
	return epfuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (epfuo *EntitlementPlanFeatureUpdateOne) SetNillableUpdatedBy(s *string) *EntitlementPlanFeatureUpdateOne {
	if s != nil {
		epfuo.SetUpdatedBy(*s)
	}
	return epfuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) ClearUpdatedBy() *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.ClearUpdatedBy()
	return epfuo
}

// SetDeletedAt sets the "deleted_at" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) SetDeletedAt(t time.Time) *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.SetDeletedAt(t)
	return epfuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epfuo *EntitlementPlanFeatureUpdateOne) SetNillableDeletedAt(t *time.Time) *EntitlementPlanFeatureUpdateOne {
	if t != nil {
		epfuo.SetDeletedAt(*t)
	}
	return epfuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) ClearDeletedAt() *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.ClearDeletedAt()
	return epfuo
}

// SetDeletedBy sets the "deleted_by" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) SetDeletedBy(s string) *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.SetDeletedBy(s)
	return epfuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (epfuo *EntitlementPlanFeatureUpdateOne) SetNillableDeletedBy(s *string) *EntitlementPlanFeatureUpdateOne {
	if s != nil {
		epfuo.SetDeletedBy(*s)
	}
	return epfuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) ClearDeletedBy() *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.ClearDeletedBy()
	return epfuo
}

// SetTags sets the "tags" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) SetTags(s []string) *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.SetTags(s)
	return epfuo
}

// AppendTags appends s to the "tags" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) AppendTags(s []string) *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.AppendTags(s)
	return epfuo
}

// ClearTags clears the value of the "tags" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) ClearTags() *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.ClearTags()
	return epfuo
}

// SetOwnerID sets the "owner_id" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) SetOwnerID(s string) *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.SetOwnerID(s)
	return epfuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (epfuo *EntitlementPlanFeatureUpdateOne) SetNillableOwnerID(s *string) *EntitlementPlanFeatureUpdateOne {
	if s != nil {
		epfuo.SetOwnerID(*s)
	}
	return epfuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) ClearOwnerID() *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.ClearOwnerID()
	return epfuo
}

// SetMetadata sets the "metadata" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) SetMetadata(m map[string]interface{}) *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.SetMetadata(m)
	return epfuo
}

// ClearMetadata clears the value of the "metadata" field.
func (epfuo *EntitlementPlanFeatureUpdateOne) ClearMetadata() *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.ClearMetadata()
	return epfuo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (epfuo *EntitlementPlanFeatureUpdateOne) SetOwner(o *Organization) *EntitlementPlanFeatureUpdateOne {
	return epfuo.SetOwnerID(o.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (epfuo *EntitlementPlanFeatureUpdateOne) AddEventIDs(ids ...string) *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.AddEventIDs(ids...)
	return epfuo
}

// AddEvents adds the "events" edges to the Event entity.
func (epfuo *EntitlementPlanFeatureUpdateOne) AddEvents(e ...*Event) *EntitlementPlanFeatureUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epfuo.AddEventIDs(ids...)
}

// Mutation returns the EntitlementPlanFeatureMutation object of the builder.
func (epfuo *EntitlementPlanFeatureUpdateOne) Mutation() *EntitlementPlanFeatureMutation {
	return epfuo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (epfuo *EntitlementPlanFeatureUpdateOne) ClearOwner() *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.ClearOwner()
	return epfuo
}

// ClearEvents clears all "events" edges to the Event entity.
func (epfuo *EntitlementPlanFeatureUpdateOne) ClearEvents() *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.ClearEvents()
	return epfuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (epfuo *EntitlementPlanFeatureUpdateOne) RemoveEventIDs(ids ...string) *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.RemoveEventIDs(ids...)
	return epfuo
}

// RemoveEvents removes "events" edges to Event entities.
func (epfuo *EntitlementPlanFeatureUpdateOne) RemoveEvents(e ...*Event) *EntitlementPlanFeatureUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return epfuo.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the EntitlementPlanFeatureUpdate builder.
func (epfuo *EntitlementPlanFeatureUpdateOne) Where(ps ...predicate.EntitlementPlanFeature) *EntitlementPlanFeatureUpdateOne {
	epfuo.mutation.Where(ps...)
	return epfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epfuo *EntitlementPlanFeatureUpdateOne) Select(field string, fields ...string) *EntitlementPlanFeatureUpdateOne {
	epfuo.fields = append([]string{field}, fields...)
	return epfuo
}

// Save executes the query and returns the updated EntitlementPlanFeature entity.
func (epfuo *EntitlementPlanFeatureUpdateOne) Save(ctx context.Context) (*EntitlementPlanFeature, error) {
	if err := epfuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, epfuo.sqlSave, epfuo.mutation, epfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epfuo *EntitlementPlanFeatureUpdateOne) SaveX(ctx context.Context) *EntitlementPlanFeature {
	node, err := epfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epfuo *EntitlementPlanFeatureUpdateOne) Exec(ctx context.Context) error {
	_, err := epfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epfuo *EntitlementPlanFeatureUpdateOne) ExecX(ctx context.Context) {
	if err := epfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epfuo *EntitlementPlanFeatureUpdateOne) defaults() error {
	if _, ok := epfuo.mutation.UpdatedAt(); !ok && !epfuo.mutation.UpdatedAtCleared() {
		if entitlementplanfeature.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeature.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeature.UpdateDefaultUpdatedAt()
		epfuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (epfuo *EntitlementPlanFeatureUpdateOne) check() error {
	if v, ok := epfuo.mutation.OwnerID(); ok {
		if err := entitlementplanfeature.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "EntitlementPlanFeature.owner_id": %w`, err)}
		}
	}
	if epfuo.mutation.PlanCleared() && len(epfuo.mutation.PlanIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "EntitlementPlanFeature.plan"`)
	}
	if epfuo.mutation.FeatureCleared() && len(epfuo.mutation.FeatureIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "EntitlementPlanFeature.feature"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (epfuo *EntitlementPlanFeatureUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntitlementPlanFeatureUpdateOne {
	epfuo.modifiers = append(epfuo.modifiers, modifiers...)
	return epfuo
}

func (epfuo *EntitlementPlanFeatureUpdateOne) sqlSave(ctx context.Context) (_node *EntitlementPlanFeature, err error) {
	if err := epfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(entitlementplanfeature.Table, entitlementplanfeature.Columns, sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString))
	id, ok := epfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "EntitlementPlanFeature.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitlementplanfeature.FieldID)
		for _, f := range fields {
			if !entitlementplanfeature.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != entitlementplanfeature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if epfuo.mutation.CreatedAtCleared() {
		_spec.ClearField(entitlementplanfeature.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := epfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlementplanfeature.FieldUpdatedAt, field.TypeTime, value)
	}
	if epfuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(entitlementplanfeature.FieldUpdatedAt, field.TypeTime)
	}
	if epfuo.mutation.CreatedByCleared() {
		_spec.ClearField(entitlementplanfeature.FieldCreatedBy, field.TypeString)
	}
	if value, ok := epfuo.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlementplanfeature.FieldUpdatedBy, field.TypeString, value)
	}
	if epfuo.mutation.UpdatedByCleared() {
		_spec.ClearField(entitlementplanfeature.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := epfuo.mutation.DeletedAt(); ok {
		_spec.SetField(entitlementplanfeature.FieldDeletedAt, field.TypeTime, value)
	}
	if epfuo.mutation.DeletedAtCleared() {
		_spec.ClearField(entitlementplanfeature.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := epfuo.mutation.DeletedBy(); ok {
		_spec.SetField(entitlementplanfeature.FieldDeletedBy, field.TypeString, value)
	}
	if epfuo.mutation.DeletedByCleared() {
		_spec.ClearField(entitlementplanfeature.FieldDeletedBy, field.TypeString)
	}
	if value, ok := epfuo.mutation.Tags(); ok {
		_spec.SetField(entitlementplanfeature.FieldTags, field.TypeJSON, value)
	}
	if value, ok := epfuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitlementplanfeature.FieldTags, value)
		})
	}
	if epfuo.mutation.TagsCleared() {
		_spec.ClearField(entitlementplanfeature.FieldTags, field.TypeJSON)
	}
	if value, ok := epfuo.mutation.Metadata(); ok {
		_spec.SetField(entitlementplanfeature.FieldMetadata, field.TypeJSON, value)
	}
	if epfuo.mutation.MetadataCleared() {
		_spec.ClearField(entitlementplanfeature.FieldMetadata, field.TypeJSON)
	}
	if epfuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlementplanfeature.OwnerTable,
			Columns: []string{entitlementplanfeature.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfuo.schemaConfig.EntitlementPlanFeature
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epfuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlementplanfeature.OwnerTable,
			Columns: []string{entitlementplanfeature.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfuo.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if epfuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplanfeature.EventsTable,
			Columns: entitlementplanfeature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfuo.schemaConfig.EntitlementPlanFeatureEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epfuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !epfuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplanfeature.EventsTable,
			Columns: entitlementplanfeature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfuo.schemaConfig.EntitlementPlanFeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := epfuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   entitlementplanfeature.EventsTable,
			Columns: entitlementplanfeature.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = epfuo.schemaConfig.EntitlementPlanFeatureEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = epfuo.schemaConfig.EntitlementPlanFeature
	ctx = internal.NewSchemaConfigContext(ctx, epfuo.schemaConfig)
	_spec.AddModifiers(epfuo.modifiers...)
	_node = &EntitlementPlanFeature{config: epfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlementplanfeature.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epfuo.mutation.done = true
	return _node, nil
}
