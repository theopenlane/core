// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/scanhistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// ScanHistoryCreate is the builder for creating a ScanHistory entity.
type ScanHistoryCreate struct {
	config
	mutation *ScanHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (shc *ScanHistoryCreate) SetHistoryTime(t time.Time) *ScanHistoryCreate {
	shc.mutation.SetHistoryTime(t)
	return shc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (shc *ScanHistoryCreate) SetNillableHistoryTime(t *time.Time) *ScanHistoryCreate {
	if t != nil {
		shc.SetHistoryTime(*t)
	}
	return shc
}

// SetRef sets the "ref" field.
func (shc *ScanHistoryCreate) SetRef(s string) *ScanHistoryCreate {
	shc.mutation.SetRef(s)
	return shc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (shc *ScanHistoryCreate) SetNillableRef(s *string) *ScanHistoryCreate {
	if s != nil {
		shc.SetRef(*s)
	}
	return shc
}

// SetOperation sets the "operation" field.
func (shc *ScanHistoryCreate) SetOperation(ht history.OpType) *ScanHistoryCreate {
	shc.mutation.SetOperation(ht)
	return shc
}

// SetCreatedAt sets the "created_at" field.
func (shc *ScanHistoryCreate) SetCreatedAt(t time.Time) *ScanHistoryCreate {
	shc.mutation.SetCreatedAt(t)
	return shc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (shc *ScanHistoryCreate) SetNillableCreatedAt(t *time.Time) *ScanHistoryCreate {
	if t != nil {
		shc.SetCreatedAt(*t)
	}
	return shc
}

// SetUpdatedAt sets the "updated_at" field.
func (shc *ScanHistoryCreate) SetUpdatedAt(t time.Time) *ScanHistoryCreate {
	shc.mutation.SetUpdatedAt(t)
	return shc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (shc *ScanHistoryCreate) SetNillableUpdatedAt(t *time.Time) *ScanHistoryCreate {
	if t != nil {
		shc.SetUpdatedAt(*t)
	}
	return shc
}

// SetCreatedBy sets the "created_by" field.
func (shc *ScanHistoryCreate) SetCreatedBy(s string) *ScanHistoryCreate {
	shc.mutation.SetCreatedBy(s)
	return shc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (shc *ScanHistoryCreate) SetNillableCreatedBy(s *string) *ScanHistoryCreate {
	if s != nil {
		shc.SetCreatedBy(*s)
	}
	return shc
}

// SetUpdatedBy sets the "updated_by" field.
func (shc *ScanHistoryCreate) SetUpdatedBy(s string) *ScanHistoryCreate {
	shc.mutation.SetUpdatedBy(s)
	return shc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (shc *ScanHistoryCreate) SetNillableUpdatedBy(s *string) *ScanHistoryCreate {
	if s != nil {
		shc.SetUpdatedBy(*s)
	}
	return shc
}

// SetDeletedAt sets the "deleted_at" field.
func (shc *ScanHistoryCreate) SetDeletedAt(t time.Time) *ScanHistoryCreate {
	shc.mutation.SetDeletedAt(t)
	return shc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (shc *ScanHistoryCreate) SetNillableDeletedAt(t *time.Time) *ScanHistoryCreate {
	if t != nil {
		shc.SetDeletedAt(*t)
	}
	return shc
}

// SetDeletedBy sets the "deleted_by" field.
func (shc *ScanHistoryCreate) SetDeletedBy(s string) *ScanHistoryCreate {
	shc.mutation.SetDeletedBy(s)
	return shc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (shc *ScanHistoryCreate) SetNillableDeletedBy(s *string) *ScanHistoryCreate {
	if s != nil {
		shc.SetDeletedBy(*s)
	}
	return shc
}

// SetTags sets the "tags" field.
func (shc *ScanHistoryCreate) SetTags(s []string) *ScanHistoryCreate {
	shc.mutation.SetTags(s)
	return shc
}

// SetOwnerID sets the "owner_id" field.
func (shc *ScanHistoryCreate) SetOwnerID(s string) *ScanHistoryCreate {
	shc.mutation.SetOwnerID(s)
	return shc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (shc *ScanHistoryCreate) SetNillableOwnerID(s *string) *ScanHistoryCreate {
	if s != nil {
		shc.SetOwnerID(*s)
	}
	return shc
}

// SetTarget sets the "target" field.
func (shc *ScanHistoryCreate) SetTarget(s string) *ScanHistoryCreate {
	shc.mutation.SetTarget(s)
	return shc
}

// SetScanType sets the "scan_type" field.
func (shc *ScanHistoryCreate) SetScanType(et enums.ScanType) *ScanHistoryCreate {
	shc.mutation.SetScanType(et)
	return shc
}

// SetNillableScanType sets the "scan_type" field if the given value is not nil.
func (shc *ScanHistoryCreate) SetNillableScanType(et *enums.ScanType) *ScanHistoryCreate {
	if et != nil {
		shc.SetScanType(*et)
	}
	return shc
}

// SetMetadata sets the "metadata" field.
func (shc *ScanHistoryCreate) SetMetadata(m map[string]interface{}) *ScanHistoryCreate {
	shc.mutation.SetMetadata(m)
	return shc
}

// SetStatus sets the "status" field.
func (shc *ScanHistoryCreate) SetStatus(es enums.ScanStatus) *ScanHistoryCreate {
	shc.mutation.SetStatus(es)
	return shc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (shc *ScanHistoryCreate) SetNillableStatus(es *enums.ScanStatus) *ScanHistoryCreate {
	if es != nil {
		shc.SetStatus(*es)
	}
	return shc
}

// SetID sets the "id" field.
func (shc *ScanHistoryCreate) SetID(s string) *ScanHistoryCreate {
	shc.mutation.SetID(s)
	return shc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (shc *ScanHistoryCreate) SetNillableID(s *string) *ScanHistoryCreate {
	if s != nil {
		shc.SetID(*s)
	}
	return shc
}

// Mutation returns the ScanHistoryMutation object of the builder.
func (shc *ScanHistoryCreate) Mutation() *ScanHistoryMutation {
	return shc.mutation
}

// Save creates the ScanHistory in the database.
func (shc *ScanHistoryCreate) Save(ctx context.Context) (*ScanHistory, error) {
	shc.defaults()
	return withHooks(ctx, shc.sqlSave, shc.mutation, shc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (shc *ScanHistoryCreate) SaveX(ctx context.Context) *ScanHistory {
	v, err := shc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shc *ScanHistoryCreate) Exec(ctx context.Context) error {
	_, err := shc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shc *ScanHistoryCreate) ExecX(ctx context.Context) {
	if err := shc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shc *ScanHistoryCreate) defaults() {
	if _, ok := shc.mutation.HistoryTime(); !ok {
		v := scanhistory.DefaultHistoryTime()
		shc.mutation.SetHistoryTime(v)
	}
	if _, ok := shc.mutation.CreatedAt(); !ok {
		v := scanhistory.DefaultCreatedAt()
		shc.mutation.SetCreatedAt(v)
	}
	if _, ok := shc.mutation.UpdatedAt(); !ok {
		v := scanhistory.DefaultUpdatedAt()
		shc.mutation.SetUpdatedAt(v)
	}
	if _, ok := shc.mutation.Tags(); !ok {
		v := scanhistory.DefaultTags
		shc.mutation.SetTags(v)
	}
	if _, ok := shc.mutation.ScanType(); !ok {
		v := scanhistory.DefaultScanType
		shc.mutation.SetScanType(v)
	}
	if _, ok := shc.mutation.Status(); !ok {
		v := scanhistory.DefaultStatus
		shc.mutation.SetStatus(v)
	}
	if _, ok := shc.mutation.ID(); !ok {
		v := scanhistory.DefaultID()
		shc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (shc *ScanHistoryCreate) check() error {
	if _, ok := shc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "ScanHistory.history_time"`)}
	}
	if _, ok := shc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "ScanHistory.operation"`)}
	}
	if v, ok := shc.mutation.Operation(); ok {
		if err := scanhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "ScanHistory.operation": %w`, err)}
		}
	}
	if _, ok := shc.mutation.Target(); !ok {
		return &ValidationError{Name: "target", err: errors.New(`generated: missing required field "ScanHistory.target"`)}
	}
	if _, ok := shc.mutation.ScanType(); !ok {
		return &ValidationError{Name: "scan_type", err: errors.New(`generated: missing required field "ScanHistory.scan_type"`)}
	}
	if v, ok := shc.mutation.ScanType(); ok {
		if err := scanhistory.ScanTypeValidator(v); err != nil {
			return &ValidationError{Name: "scan_type", err: fmt.Errorf(`generated: validator failed for field "ScanHistory.scan_type": %w`, err)}
		}
	}
	if _, ok := shc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "ScanHistory.status"`)}
	}
	if v, ok := shc.mutation.Status(); ok {
		if err := scanhistory.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "ScanHistory.status": %w`, err)}
		}
	}
	return nil
}

func (shc *ScanHistoryCreate) sqlSave(ctx context.Context) (*ScanHistory, error) {
	if err := shc.check(); err != nil {
		return nil, err
	}
	_node, _spec := shc.createSpec()
	if err := sqlgraph.CreateNode(ctx, shc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ScanHistory.ID type: %T", _spec.ID.Value)
		}
	}
	shc.mutation.id = &_node.ID
	shc.mutation.done = true
	return _node, nil
}

func (shc *ScanHistoryCreate) createSpec() (*ScanHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ScanHistory{config: shc.config}
		_spec = sqlgraph.NewCreateSpec(scanhistory.Table, sqlgraph.NewFieldSpec(scanhistory.FieldID, field.TypeString))
	)
	_spec.Schema = shc.schemaConfig.ScanHistory
	if id, ok := shc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := shc.mutation.HistoryTime(); ok {
		_spec.SetField(scanhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := shc.mutation.Ref(); ok {
		_spec.SetField(scanhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := shc.mutation.Operation(); ok {
		_spec.SetField(scanhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := shc.mutation.CreatedAt(); ok {
		_spec.SetField(scanhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := shc.mutation.UpdatedAt(); ok {
		_spec.SetField(scanhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := shc.mutation.CreatedBy(); ok {
		_spec.SetField(scanhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := shc.mutation.UpdatedBy(); ok {
		_spec.SetField(scanhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := shc.mutation.DeletedAt(); ok {
		_spec.SetField(scanhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := shc.mutation.DeletedBy(); ok {
		_spec.SetField(scanhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := shc.mutation.Tags(); ok {
		_spec.SetField(scanhistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := shc.mutation.OwnerID(); ok {
		_spec.SetField(scanhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := shc.mutation.Target(); ok {
		_spec.SetField(scanhistory.FieldTarget, field.TypeString, value)
		_node.Target = value
	}
	if value, ok := shc.mutation.ScanType(); ok {
		_spec.SetField(scanhistory.FieldScanType, field.TypeEnum, value)
		_node.ScanType = value
	}
	if value, ok := shc.mutation.Metadata(); ok {
		_spec.SetField(scanhistory.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := shc.mutation.Status(); ok {
		_spec.SetField(scanhistory.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	return _node, _spec
}

// ScanHistoryCreateBulk is the builder for creating many ScanHistory entities in bulk.
type ScanHistoryCreateBulk struct {
	config
	err      error
	builders []*ScanHistoryCreate
}

// Save creates the ScanHistory entities in the database.
func (shcb *ScanHistoryCreateBulk) Save(ctx context.Context) ([]*ScanHistory, error) {
	if shcb.err != nil {
		return nil, shcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(shcb.builders))
	nodes := make([]*ScanHistory, len(shcb.builders))
	mutators := make([]Mutator, len(shcb.builders))
	for i := range shcb.builders {
		func(i int, root context.Context) {
			builder := shcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScanHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, shcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, shcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, shcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (shcb *ScanHistoryCreateBulk) SaveX(ctx context.Context) []*ScanHistory {
	v, err := shcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shcb *ScanHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := shcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shcb *ScanHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := shcb.Exec(ctx); err != nil {
		panic(err)
	}
}
