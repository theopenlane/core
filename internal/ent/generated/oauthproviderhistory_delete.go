// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
	"github.com/theopenlane/core/internal/ent/generated/oauthproviderhistory"
)

// OauthProviderHistoryDelete is the builder for deleting a OauthProviderHistory entity.
type OauthProviderHistoryDelete struct {
	config
	hooks    []Hook
	mutation *OauthProviderHistoryMutation
}

// Where appends a list predicates to the OauthProviderHistoryDelete builder.
func (ophd *OauthProviderHistoryDelete) Where(ps ...predicate.OauthProviderHistory) *OauthProviderHistoryDelete {
	ophd.mutation.Where(ps...)
	return ophd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ophd *OauthProviderHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ophd.sqlExec, ophd.mutation, ophd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ophd *OauthProviderHistoryDelete) ExecX(ctx context.Context) int {
	n, err := ophd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ophd *OauthProviderHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(oauthproviderhistory.Table, sqlgraph.NewFieldSpec(oauthproviderhistory.FieldID, field.TypeString))
	_spec.Node.Schema = ophd.schemaConfig.OauthProviderHistory
	ctx = internal.NewSchemaConfigContext(ctx, ophd.schemaConfig)
	if ps := ophd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ophd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ophd.mutation.done = true
	return affected, err
}

// OauthProviderHistoryDeleteOne is the builder for deleting a single OauthProviderHistory entity.
type OauthProviderHistoryDeleteOne struct {
	ophd *OauthProviderHistoryDelete
}

// Where appends a list predicates to the OauthProviderHistoryDelete builder.
func (ophdo *OauthProviderHistoryDeleteOne) Where(ps ...predicate.OauthProviderHistory) *OauthProviderHistoryDeleteOne {
	ophdo.ophd.mutation.Where(ps...)
	return ophdo
}

// Exec executes the deletion query.
func (ophdo *OauthProviderHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := ophdo.ophd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{oauthproviderhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ophdo *OauthProviderHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := ophdo.Exec(ctx); err != nil {
		panic(err)
	}
}
