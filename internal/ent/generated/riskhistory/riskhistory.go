// Code generated by ent, DO NOT EDIT.

package riskhistory

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

const (
	// Label holds the string label denoting the riskhistory type in the database.
	Label = "risk_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHistoryTime holds the string denoting the history_time field in the database.
	FieldHistoryTime = "history_time"
	// FieldRef holds the string denoting the ref field in the database.
	FieldRef = "ref"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldDisplayID holds the string denoting the display_id field in the database.
	FieldDisplayID = "display_id"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldOwnerID holds the string denoting the owner_id field in the database.
	FieldOwnerID = "owner_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldRiskType holds the string denoting the risk_type field in the database.
	FieldRiskType = "risk_type"
	// FieldCategory holds the string denoting the category field in the database.
	FieldCategory = "category"
	// FieldImpact holds the string denoting the impact field in the database.
	FieldImpact = "impact"
	// FieldLikelihood holds the string denoting the likelihood field in the database.
	FieldLikelihood = "likelihood"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// FieldMitigation holds the string denoting the mitigation field in the database.
	FieldMitigation = "mitigation"
	// FieldDetails holds the string denoting the details field in the database.
	FieldDetails = "details"
	// FieldBusinessCosts holds the string denoting the business_costs field in the database.
	FieldBusinessCosts = "business_costs"
	// Table holds the table name of the riskhistory in the database.
	Table = "risk_history"
)

// Columns holds all SQL columns for riskhistory fields.
var Columns = []string{
	FieldID,
	FieldHistoryTime,
	FieldRef,
	FieldOperation,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldDisplayID,
	FieldTags,
	FieldOwnerID,
	FieldName,
	FieldStatus,
	FieldRiskType,
	FieldCategory,
	FieldImpact,
	FieldLikelihood,
	FieldScore,
	FieldMitigation,
	FieldDetails,
	FieldBusinessCosts,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Interceptors [1]ent.Interceptor
	// DefaultHistoryTime holds the default value on creation for the "history_time" field.
	DefaultHistoryTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OperationValidator is a validator for the "operation" field enum values. It is called by the builders before save.
func OperationValidator(o history.OpType) error {
	switch o.String() {
	case "INSERT", "UPDATE", "DELETE":
		return nil
	default:
		return fmt.Errorf("riskhistory: invalid enum value for operation field: %q", o)
	}
}

const DefaultStatus enums.RiskStatus = "OPEN"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.RiskStatus) error {
	switch s.String() {
	case "OPEN", "IN_PROGRESS", "ONGOING", "MITIGATED", "ARCHIVED":
		return nil
	default:
		return fmt.Errorf("riskhistory: invalid enum value for status field: %q", s)
	}
}

const DefaultImpact enums.RiskImpact = "MODERATE"

// ImpactValidator is a validator for the "impact" field enum values. It is called by the builders before save.
func ImpactValidator(i enums.RiskImpact) error {
	switch i.String() {
	case "LOW", "MODERATE", "HIGH", "CRITICAL":
		return nil
	default:
		return fmt.Errorf("riskhistory: invalid enum value for impact field: %q", i)
	}
}

const DefaultLikelihood enums.RiskLikelihood = "LIKELY"

// LikelihoodValidator is a validator for the "likelihood" field enum values. It is called by the builders before save.
func LikelihoodValidator(l enums.RiskLikelihood) error {
	switch l.String() {
	case "UNLIKELY", "LIKELY", "HIGHLY_LIKELY":
		return nil
	default:
		return fmt.Errorf("riskhistory: invalid enum value for likelihood field: %q", l)
	}
}

// OrderOption defines the ordering options for the RiskHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHistoryTime orders the results by the history_time field.
func ByHistoryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHistoryTime, opts...).ToFunc()
}

// ByRef orders the results by the ref field.
func ByRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRef, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByDisplayID orders the results by the display_id field.
func ByDisplayID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDisplayID, opts...).ToFunc()
}

// ByOwnerID orders the results by the owner_id field.
func ByOwnerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRiskType orders the results by the risk_type field.
func ByRiskType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRiskType, opts...).ToFunc()
}

// ByCategory orders the results by the category field.
func ByCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategory, opts...).ToFunc()
}

// ByImpact orders the results by the impact field.
func ByImpact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImpact, opts...).ToFunc()
}

// ByLikelihood orders the results by the likelihood field.
func ByLikelihood(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikelihood, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByMitigation orders the results by the mitigation field.
func ByMitigation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMitigation, opts...).ToFunc()
}

// ByDetails orders the results by the details field.
func ByDetails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetails, opts...).ToFunc()
}

// ByBusinessCosts orders the results by the business_costs field.
func ByBusinessCosts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBusinessCosts, opts...).ToFunc()
}

var (
	// history.OpType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*history.OpType)(nil)
	// history.OpType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*history.OpType)(nil)
)

var (
	// enums.RiskStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.RiskStatus)(nil)
	// enums.RiskStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.RiskStatus)(nil)
)

var (
	// enums.RiskImpact must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.RiskImpact)(nil)
	// enums.RiskImpact must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.RiskImpact)(nil)
)

var (
	// enums.RiskLikelihood must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.RiskLikelihood)(nil)
	// enums.RiskLikelihood must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.RiskLikelihood)(nil)
)
