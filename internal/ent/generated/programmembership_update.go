// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/programmembership"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ProgramMembershipUpdate is the builder for updating ProgramMembership entities.
type ProgramMembershipUpdate struct {
	config
	hooks     []Hook
	mutation  *ProgramMembershipMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProgramMembershipUpdate builder.
func (pmu *ProgramMembershipUpdate) Where(ps ...predicate.ProgramMembership) *ProgramMembershipUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetUpdatedAt sets the "updated_at" field.
func (pmu *ProgramMembershipUpdate) SetUpdatedAt(t time.Time) *ProgramMembershipUpdate {
	pmu.mutation.SetUpdatedAt(t)
	return pmu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pmu *ProgramMembershipUpdate) ClearUpdatedAt() *ProgramMembershipUpdate {
	pmu.mutation.ClearUpdatedAt()
	return pmu
}

// SetUpdatedByID sets the "updated_by_id" field.
func (pmu *ProgramMembershipUpdate) SetUpdatedByID(s string) *ProgramMembershipUpdate {
	pmu.mutation.SetUpdatedByID(s)
	return pmu
}

// SetNillableUpdatedByID sets the "updated_by_id" field if the given value is not nil.
func (pmu *ProgramMembershipUpdate) SetNillableUpdatedByID(s *string) *ProgramMembershipUpdate {
	if s != nil {
		pmu.SetUpdatedByID(*s)
	}
	return pmu
}

// ClearUpdatedByID clears the value of the "updated_by_id" field.
func (pmu *ProgramMembershipUpdate) ClearUpdatedByID() *ProgramMembershipUpdate {
	pmu.mutation.ClearUpdatedByID()
	return pmu
}

// SetUpdatedByUserID sets the "updated_by_user_id" field.
func (pmu *ProgramMembershipUpdate) SetUpdatedByUserID(s string) *ProgramMembershipUpdate {
	pmu.mutation.SetUpdatedByUserID(s)
	return pmu
}

// SetNillableUpdatedByUserID sets the "updated_by_user_id" field if the given value is not nil.
func (pmu *ProgramMembershipUpdate) SetNillableUpdatedByUserID(s *string) *ProgramMembershipUpdate {
	if s != nil {
		pmu.SetUpdatedByUserID(*s)
	}
	return pmu
}

// ClearUpdatedByUserID clears the value of the "updated_by_user_id" field.
func (pmu *ProgramMembershipUpdate) ClearUpdatedByUserID() *ProgramMembershipUpdate {
	pmu.mutation.ClearUpdatedByUserID()
	return pmu
}

// SetUpdatedByServiceID sets the "updated_by_service_id" field.
func (pmu *ProgramMembershipUpdate) SetUpdatedByServiceID(s string) *ProgramMembershipUpdate {
	pmu.mutation.SetUpdatedByServiceID(s)
	return pmu
}

// SetNillableUpdatedByServiceID sets the "updated_by_service_id" field if the given value is not nil.
func (pmu *ProgramMembershipUpdate) SetNillableUpdatedByServiceID(s *string) *ProgramMembershipUpdate {
	if s != nil {
		pmu.SetUpdatedByServiceID(*s)
	}
	return pmu
}

// ClearUpdatedByServiceID clears the value of the "updated_by_service_id" field.
func (pmu *ProgramMembershipUpdate) ClearUpdatedByServiceID() *ProgramMembershipUpdate {
	pmu.mutation.ClearUpdatedByServiceID()
	return pmu
}

// SetRole sets the "role" field.
func (pmu *ProgramMembershipUpdate) SetRole(e enums.Role) *ProgramMembershipUpdate {
	pmu.mutation.SetRole(e)
	return pmu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (pmu *ProgramMembershipUpdate) SetNillableRole(e *enums.Role) *ProgramMembershipUpdate {
	if e != nil {
		pmu.SetRole(*e)
	}
	return pmu
}

// SetUpdatedByUser sets the "updated_by_user" edge to the User entity.
func (pmu *ProgramMembershipUpdate) SetUpdatedByUser(u *User) *ProgramMembershipUpdate {
	return pmu.SetUpdatedByUserID(u.ID)
}

// SetUpdatedByService sets the "updated_by_service" edge to the APIToken entity.
func (pmu *ProgramMembershipUpdate) SetUpdatedByService(a *APIToken) *ProgramMembershipUpdate {
	return pmu.SetUpdatedByServiceID(a.ID)
}

// Mutation returns the ProgramMembershipMutation object of the builder.
func (pmu *ProgramMembershipUpdate) Mutation() *ProgramMembershipMutation {
	return pmu.mutation
}

// ClearUpdatedByUser clears the "updated_by_user" edge to the User entity.
func (pmu *ProgramMembershipUpdate) ClearUpdatedByUser() *ProgramMembershipUpdate {
	pmu.mutation.ClearUpdatedByUser()
	return pmu
}

// ClearUpdatedByService clears the "updated_by_service" edge to the APIToken entity.
func (pmu *ProgramMembershipUpdate) ClearUpdatedByService() *ProgramMembershipUpdate {
	pmu.mutation.ClearUpdatedByService()
	return pmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *ProgramMembershipUpdate) Save(ctx context.Context) (int, error) {
	if err := pmu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, pmu.sqlSave, pmu.mutation, pmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *ProgramMembershipUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *ProgramMembershipUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *ProgramMembershipUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmu *ProgramMembershipUpdate) defaults() error {
	if _, ok := pmu.mutation.UpdatedAt(); !ok && !pmu.mutation.UpdatedAtCleared() {
		if programmembership.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized programmembership.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := programmembership.UpdateDefaultUpdatedAt()
		pmu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pmu *ProgramMembershipUpdate) check() error {
	if v, ok := pmu.mutation.Role(); ok {
		if err := programmembership.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "ProgramMembership.role": %w`, err)}
		}
	}
	if pmu.mutation.ProgramCleared() && len(pmu.mutation.ProgramIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ProgramMembership.program"`)
	}
	if pmu.mutation.UserCleared() && len(pmu.mutation.UserIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ProgramMembership.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pmu *ProgramMembershipUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProgramMembershipUpdate {
	pmu.modifiers = append(pmu.modifiers, modifiers...)
	return pmu
}

func (pmu *ProgramMembershipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(programmembership.Table, programmembership.Columns, sqlgraph.NewFieldSpec(programmembership.FieldID, field.TypeString))
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pmu.mutation.CreatedAtCleared() {
		_spec.ClearField(programmembership.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pmu.mutation.UpdatedAt(); ok {
		_spec.SetField(programmembership.FieldUpdatedAt, field.TypeTime, value)
	}
	if pmu.mutation.UpdatedAtCleared() {
		_spec.ClearField(programmembership.FieldUpdatedAt, field.TypeTime)
	}
	if pmu.mutation.CreatedByIDCleared() {
		_spec.ClearField(programmembership.FieldCreatedByID, field.TypeString)
	}
	if value, ok := pmu.mutation.UpdatedByID(); ok {
		_spec.SetField(programmembership.FieldUpdatedByID, field.TypeString, value)
	}
	if pmu.mutation.UpdatedByIDCleared() {
		_spec.ClearField(programmembership.FieldUpdatedByID, field.TypeString)
	}
	if pmu.mutation.DeletedAtCleared() {
		_spec.ClearField(programmembership.FieldDeletedAt, field.TypeTime)
	}
	if pmu.mutation.DeletedByIDCleared() {
		_spec.ClearField(programmembership.FieldDeletedByID, field.TypeString)
	}
	if value, ok := pmu.mutation.Role(); ok {
		_spec.SetField(programmembership.FieldRole, field.TypeEnum, value)
	}
	if pmu.mutation.UpdatedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programmembership.UpdatedByUserTable,
			Columns: []string{programmembership.UpdatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = pmu.schemaConfig.ProgramMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.UpdatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programmembership.UpdatedByUserTable,
			Columns: []string{programmembership.UpdatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = pmu.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.UpdatedByServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programmembership.UpdatedByServiceTable,
			Columns: []string{programmembership.UpdatedByServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = pmu.schemaConfig.ProgramMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.UpdatedByServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programmembership.UpdatedByServiceTable,
			Columns: []string{programmembership.UpdatedByServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = pmu.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = pmu.schemaConfig.ProgramMembership
	ctx = internal.NewSchemaConfigContext(ctx, pmu.schemaConfig)
	_spec.AddModifiers(pmu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{programmembership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pmu.mutation.done = true
	return n, nil
}

// ProgramMembershipUpdateOne is the builder for updating a single ProgramMembership entity.
type ProgramMembershipUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProgramMembershipMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pmuo *ProgramMembershipUpdateOne) SetUpdatedAt(t time.Time) *ProgramMembershipUpdateOne {
	pmuo.mutation.SetUpdatedAt(t)
	return pmuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pmuo *ProgramMembershipUpdateOne) ClearUpdatedAt() *ProgramMembershipUpdateOne {
	pmuo.mutation.ClearUpdatedAt()
	return pmuo
}

// SetUpdatedByID sets the "updated_by_id" field.
func (pmuo *ProgramMembershipUpdateOne) SetUpdatedByID(s string) *ProgramMembershipUpdateOne {
	pmuo.mutation.SetUpdatedByID(s)
	return pmuo
}

// SetNillableUpdatedByID sets the "updated_by_id" field if the given value is not nil.
func (pmuo *ProgramMembershipUpdateOne) SetNillableUpdatedByID(s *string) *ProgramMembershipUpdateOne {
	if s != nil {
		pmuo.SetUpdatedByID(*s)
	}
	return pmuo
}

// ClearUpdatedByID clears the value of the "updated_by_id" field.
func (pmuo *ProgramMembershipUpdateOne) ClearUpdatedByID() *ProgramMembershipUpdateOne {
	pmuo.mutation.ClearUpdatedByID()
	return pmuo
}

// SetUpdatedByUserID sets the "updated_by_user_id" field.
func (pmuo *ProgramMembershipUpdateOne) SetUpdatedByUserID(s string) *ProgramMembershipUpdateOne {
	pmuo.mutation.SetUpdatedByUserID(s)
	return pmuo
}

// SetNillableUpdatedByUserID sets the "updated_by_user_id" field if the given value is not nil.
func (pmuo *ProgramMembershipUpdateOne) SetNillableUpdatedByUserID(s *string) *ProgramMembershipUpdateOne {
	if s != nil {
		pmuo.SetUpdatedByUserID(*s)
	}
	return pmuo
}

// ClearUpdatedByUserID clears the value of the "updated_by_user_id" field.
func (pmuo *ProgramMembershipUpdateOne) ClearUpdatedByUserID() *ProgramMembershipUpdateOne {
	pmuo.mutation.ClearUpdatedByUserID()
	return pmuo
}

// SetUpdatedByServiceID sets the "updated_by_service_id" field.
func (pmuo *ProgramMembershipUpdateOne) SetUpdatedByServiceID(s string) *ProgramMembershipUpdateOne {
	pmuo.mutation.SetUpdatedByServiceID(s)
	return pmuo
}

// SetNillableUpdatedByServiceID sets the "updated_by_service_id" field if the given value is not nil.
func (pmuo *ProgramMembershipUpdateOne) SetNillableUpdatedByServiceID(s *string) *ProgramMembershipUpdateOne {
	if s != nil {
		pmuo.SetUpdatedByServiceID(*s)
	}
	return pmuo
}

// ClearUpdatedByServiceID clears the value of the "updated_by_service_id" field.
func (pmuo *ProgramMembershipUpdateOne) ClearUpdatedByServiceID() *ProgramMembershipUpdateOne {
	pmuo.mutation.ClearUpdatedByServiceID()
	return pmuo
}

// SetRole sets the "role" field.
func (pmuo *ProgramMembershipUpdateOne) SetRole(e enums.Role) *ProgramMembershipUpdateOne {
	pmuo.mutation.SetRole(e)
	return pmuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (pmuo *ProgramMembershipUpdateOne) SetNillableRole(e *enums.Role) *ProgramMembershipUpdateOne {
	if e != nil {
		pmuo.SetRole(*e)
	}
	return pmuo
}

// SetUpdatedByUser sets the "updated_by_user" edge to the User entity.
func (pmuo *ProgramMembershipUpdateOne) SetUpdatedByUser(u *User) *ProgramMembershipUpdateOne {
	return pmuo.SetUpdatedByUserID(u.ID)
}

// SetUpdatedByService sets the "updated_by_service" edge to the APIToken entity.
func (pmuo *ProgramMembershipUpdateOne) SetUpdatedByService(a *APIToken) *ProgramMembershipUpdateOne {
	return pmuo.SetUpdatedByServiceID(a.ID)
}

// Mutation returns the ProgramMembershipMutation object of the builder.
func (pmuo *ProgramMembershipUpdateOne) Mutation() *ProgramMembershipMutation {
	return pmuo.mutation
}

// ClearUpdatedByUser clears the "updated_by_user" edge to the User entity.
func (pmuo *ProgramMembershipUpdateOne) ClearUpdatedByUser() *ProgramMembershipUpdateOne {
	pmuo.mutation.ClearUpdatedByUser()
	return pmuo
}

// ClearUpdatedByService clears the "updated_by_service" edge to the APIToken entity.
func (pmuo *ProgramMembershipUpdateOne) ClearUpdatedByService() *ProgramMembershipUpdateOne {
	pmuo.mutation.ClearUpdatedByService()
	return pmuo
}

// Where appends a list predicates to the ProgramMembershipUpdate builder.
func (pmuo *ProgramMembershipUpdateOne) Where(ps ...predicate.ProgramMembership) *ProgramMembershipUpdateOne {
	pmuo.mutation.Where(ps...)
	return pmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *ProgramMembershipUpdateOne) Select(field string, fields ...string) *ProgramMembershipUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated ProgramMembership entity.
func (pmuo *ProgramMembershipUpdateOne) Save(ctx context.Context) (*ProgramMembership, error) {
	if err := pmuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, pmuo.sqlSave, pmuo.mutation, pmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *ProgramMembershipUpdateOne) SaveX(ctx context.Context) *ProgramMembership {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *ProgramMembershipUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *ProgramMembershipUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmuo *ProgramMembershipUpdateOne) defaults() error {
	if _, ok := pmuo.mutation.UpdatedAt(); !ok && !pmuo.mutation.UpdatedAtCleared() {
		if programmembership.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized programmembership.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := programmembership.UpdateDefaultUpdatedAt()
		pmuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (pmuo *ProgramMembershipUpdateOne) check() error {
	if v, ok := pmuo.mutation.Role(); ok {
		if err := programmembership.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "ProgramMembership.role": %w`, err)}
		}
	}
	if pmuo.mutation.ProgramCleared() && len(pmuo.mutation.ProgramIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ProgramMembership.program"`)
	}
	if pmuo.mutation.UserCleared() && len(pmuo.mutation.UserIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ProgramMembership.user"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pmuo *ProgramMembershipUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProgramMembershipUpdateOne {
	pmuo.modifiers = append(pmuo.modifiers, modifiers...)
	return pmuo
}

func (pmuo *ProgramMembershipUpdateOne) sqlSave(ctx context.Context) (_node *ProgramMembership, err error) {
	if err := pmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(programmembership.Table, programmembership.Columns, sqlgraph.NewFieldSpec(programmembership.FieldID, field.TypeString))
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ProgramMembership.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, programmembership.FieldID)
		for _, f := range fields {
			if !programmembership.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != programmembership.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pmuo.mutation.CreatedAtCleared() {
		_spec.ClearField(programmembership.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pmuo.mutation.UpdatedAt(); ok {
		_spec.SetField(programmembership.FieldUpdatedAt, field.TypeTime, value)
	}
	if pmuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(programmembership.FieldUpdatedAt, field.TypeTime)
	}
	if pmuo.mutation.CreatedByIDCleared() {
		_spec.ClearField(programmembership.FieldCreatedByID, field.TypeString)
	}
	if value, ok := pmuo.mutation.UpdatedByID(); ok {
		_spec.SetField(programmembership.FieldUpdatedByID, field.TypeString, value)
	}
	if pmuo.mutation.UpdatedByIDCleared() {
		_spec.ClearField(programmembership.FieldUpdatedByID, field.TypeString)
	}
	if pmuo.mutation.DeletedAtCleared() {
		_spec.ClearField(programmembership.FieldDeletedAt, field.TypeTime)
	}
	if pmuo.mutation.DeletedByIDCleared() {
		_spec.ClearField(programmembership.FieldDeletedByID, field.TypeString)
	}
	if value, ok := pmuo.mutation.Role(); ok {
		_spec.SetField(programmembership.FieldRole, field.TypeEnum, value)
	}
	if pmuo.mutation.UpdatedByUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programmembership.UpdatedByUserTable,
			Columns: []string{programmembership.UpdatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = pmuo.schemaConfig.ProgramMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.UpdatedByUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programmembership.UpdatedByUserTable,
			Columns: []string{programmembership.UpdatedByUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = pmuo.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.UpdatedByServiceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programmembership.UpdatedByServiceTable,
			Columns: []string{programmembership.UpdatedByServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = pmuo.schemaConfig.ProgramMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.UpdatedByServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   programmembership.UpdatedByServiceTable,
			Columns: []string{programmembership.UpdatedByServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = pmuo.schemaConfig.ProgramMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = pmuo.schemaConfig.ProgramMembership
	ctx = internal.NewSchemaConfigContext(ctx, pmuo.schemaConfig)
	_spec.AddModifiers(pmuo.modifiers...)
	_node = &ProgramMembership{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{programmembership.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pmuo.mutation.done = true
	return _node, nil
}
