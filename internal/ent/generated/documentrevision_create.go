// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/documentrevision"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/pkg/enums"
)

// DocumentRevisionCreate is the builder for creating a DocumentRevision entity.
type DocumentRevisionCreate struct {
	config
	mutation *DocumentRevisionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (drc *DocumentRevisionCreate) SetCreatedAt(t time.Time) *DocumentRevisionCreate {
	drc.mutation.SetCreatedAt(t)
	return drc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableCreatedAt(t *time.Time) *DocumentRevisionCreate {
	if t != nil {
		drc.SetCreatedAt(*t)
	}
	return drc
}

// SetUpdatedAt sets the "updated_at" field.
func (drc *DocumentRevisionCreate) SetUpdatedAt(t time.Time) *DocumentRevisionCreate {
	drc.mutation.SetUpdatedAt(t)
	return drc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableUpdatedAt(t *time.Time) *DocumentRevisionCreate {
	if t != nil {
		drc.SetUpdatedAt(*t)
	}
	return drc
}

// SetCreatedBy sets the "created_by" field.
func (drc *DocumentRevisionCreate) SetCreatedBy(s string) *DocumentRevisionCreate {
	drc.mutation.SetCreatedBy(s)
	return drc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableCreatedBy(s *string) *DocumentRevisionCreate {
	if s != nil {
		drc.SetCreatedBy(*s)
	}
	return drc
}

// SetUpdatedBy sets the "updated_by" field.
func (drc *DocumentRevisionCreate) SetUpdatedBy(s string) *DocumentRevisionCreate {
	drc.mutation.SetUpdatedBy(s)
	return drc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableUpdatedBy(s *string) *DocumentRevisionCreate {
	if s != nil {
		drc.SetUpdatedBy(*s)
	}
	return drc
}

// SetDeletedAt sets the "deleted_at" field.
func (drc *DocumentRevisionCreate) SetDeletedAt(t time.Time) *DocumentRevisionCreate {
	drc.mutation.SetDeletedAt(t)
	return drc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableDeletedAt(t *time.Time) *DocumentRevisionCreate {
	if t != nil {
		drc.SetDeletedAt(*t)
	}
	return drc
}

// SetDeletedBy sets the "deleted_by" field.
func (drc *DocumentRevisionCreate) SetDeletedBy(s string) *DocumentRevisionCreate {
	drc.mutation.SetDeletedBy(s)
	return drc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableDeletedBy(s *string) *DocumentRevisionCreate {
	if s != nil {
		drc.SetDeletedBy(*s)
	}
	return drc
}

// SetTags sets the "tags" field.
func (drc *DocumentRevisionCreate) SetTags(s []string) *DocumentRevisionCreate {
	drc.mutation.SetTags(s)
	return drc
}

// SetRevision sets the "revision" field.
func (drc *DocumentRevisionCreate) SetRevision(s string) *DocumentRevisionCreate {
	drc.mutation.SetRevision(s)
	return drc
}

// SetNillableRevision sets the "revision" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableRevision(s *string) *DocumentRevisionCreate {
	if s != nil {
		drc.SetRevision(*s)
	}
	return drc
}

// SetDetails sets the "details" field.
func (drc *DocumentRevisionCreate) SetDetails(s string) *DocumentRevisionCreate {
	drc.mutation.SetDetails(s)
	return drc
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableDetails(s *string) *DocumentRevisionCreate {
	if s != nil {
		drc.SetDetails(*s)
	}
	return drc
}

// SetStatus sets the "status" field.
func (drc *DocumentRevisionCreate) SetStatus(es enums.ApprovalStatus) *DocumentRevisionCreate {
	drc.mutation.SetStatus(es)
	return drc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableStatus(es *enums.ApprovalStatus) *DocumentRevisionCreate {
	if es != nil {
		drc.SetStatus(*es)
	}
	return drc
}

// SetApprovalDate sets the "approval_date" field.
func (drc *DocumentRevisionCreate) SetApprovalDate(t time.Time) *DocumentRevisionCreate {
	drc.mutation.SetApprovalDate(t)
	return drc
}

// SetNillableApprovalDate sets the "approval_date" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableApprovalDate(t *time.Time) *DocumentRevisionCreate {
	if t != nil {
		drc.SetApprovalDate(*t)
	}
	return drc
}

// SetSubmittedByID sets the "submitted_by_id" field.
func (drc *DocumentRevisionCreate) SetSubmittedByID(s string) *DocumentRevisionCreate {
	drc.mutation.SetSubmittedByID(s)
	return drc
}

// SetNillableSubmittedByID sets the "submitted_by_id" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableSubmittedByID(s *string) *DocumentRevisionCreate {
	if s != nil {
		drc.SetSubmittedByID(*s)
	}
	return drc
}

// SetApprovedByID sets the "approved_by_id" field.
func (drc *DocumentRevisionCreate) SetApprovedByID(s string) *DocumentRevisionCreate {
	drc.mutation.SetApprovedByID(s)
	return drc
}

// SetNillableApprovedByID sets the "approved_by_id" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableApprovedByID(s *string) *DocumentRevisionCreate {
	if s != nil {
		drc.SetApprovedByID(*s)
	}
	return drc
}

// SetInternalPolicyID sets the "internal_policy_id" field.
func (drc *DocumentRevisionCreate) SetInternalPolicyID(s string) *DocumentRevisionCreate {
	drc.mutation.SetInternalPolicyID(s)
	return drc
}

// SetNillableInternalPolicyID sets the "internal_policy_id" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableInternalPolicyID(s *string) *DocumentRevisionCreate {
	if s != nil {
		drc.SetInternalPolicyID(*s)
	}
	return drc
}

// SetProcedureID sets the "procedure_id" field.
func (drc *DocumentRevisionCreate) SetProcedureID(s string) *DocumentRevisionCreate {
	drc.mutation.SetProcedureID(s)
	return drc
}

// SetNillableProcedureID sets the "procedure_id" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableProcedureID(s *string) *DocumentRevisionCreate {
	if s != nil {
		drc.SetProcedureID(*s)
	}
	return drc
}

// SetActionPlanID sets the "action_plan_id" field.
func (drc *DocumentRevisionCreate) SetActionPlanID(s string) *DocumentRevisionCreate {
	drc.mutation.SetActionPlanID(s)
	return drc
}

// SetNillableActionPlanID sets the "action_plan_id" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableActionPlanID(s *string) *DocumentRevisionCreate {
	if s != nil {
		drc.SetActionPlanID(*s)
	}
	return drc
}

// SetID sets the "id" field.
func (drc *DocumentRevisionCreate) SetID(s string) *DocumentRevisionCreate {
	drc.mutation.SetID(s)
	return drc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (drc *DocumentRevisionCreate) SetNillableID(s *string) *DocumentRevisionCreate {
	if s != nil {
		drc.SetID(*s)
	}
	return drc
}

// SetSubmittedBy sets the "submitted_by" edge to the User entity.
func (drc *DocumentRevisionCreate) SetSubmittedBy(u *User) *DocumentRevisionCreate {
	return drc.SetSubmittedByID(u.ID)
}

// SetApprovedBy sets the "approved_by" edge to the User entity.
func (drc *DocumentRevisionCreate) SetApprovedBy(u *User) *DocumentRevisionCreate {
	return drc.SetApprovedByID(u.ID)
}

// SetInternalPolicy sets the "internal_policy" edge to the InternalPolicy entity.
func (drc *DocumentRevisionCreate) SetInternalPolicy(i *InternalPolicy) *DocumentRevisionCreate {
	return drc.SetInternalPolicyID(i.ID)
}

// SetProcedure sets the "procedure" edge to the Procedure entity.
func (drc *DocumentRevisionCreate) SetProcedure(p *Procedure) *DocumentRevisionCreate {
	return drc.SetProcedureID(p.ID)
}

// SetActionPlan sets the "action_plan" edge to the ActionPlan entity.
func (drc *DocumentRevisionCreate) SetActionPlan(a *ActionPlan) *DocumentRevisionCreate {
	return drc.SetActionPlanID(a.ID)
}

// Mutation returns the DocumentRevisionMutation object of the builder.
func (drc *DocumentRevisionCreate) Mutation() *DocumentRevisionMutation {
	return drc.mutation
}

// Save creates the DocumentRevision in the database.
func (drc *DocumentRevisionCreate) Save(ctx context.Context) (*DocumentRevision, error) {
	if err := drc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, drc.sqlSave, drc.mutation, drc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DocumentRevisionCreate) SaveX(ctx context.Context) *DocumentRevision {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drc *DocumentRevisionCreate) Exec(ctx context.Context) error {
	_, err := drc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drc *DocumentRevisionCreate) ExecX(ctx context.Context) {
	if err := drc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (drc *DocumentRevisionCreate) defaults() error {
	if _, ok := drc.mutation.CreatedAt(); !ok {
		if documentrevision.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized documentrevision.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := documentrevision.DefaultCreatedAt()
		drc.mutation.SetCreatedAt(v)
	}
	if _, ok := drc.mutation.UpdatedAt(); !ok {
		if documentrevision.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized documentrevision.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := documentrevision.DefaultUpdatedAt()
		drc.mutation.SetUpdatedAt(v)
	}
	if _, ok := drc.mutation.Tags(); !ok {
		v := documentrevision.DefaultTags
		drc.mutation.SetTags(v)
	}
	if _, ok := drc.mutation.Revision(); !ok {
		v := documentrevision.DefaultRevision
		drc.mutation.SetRevision(v)
	}
	if _, ok := drc.mutation.Status(); !ok {
		v := documentrevision.DefaultStatus
		drc.mutation.SetStatus(v)
	}
	if _, ok := drc.mutation.ID(); !ok {
		if documentrevision.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized documentrevision.DefaultID (forgotten import generated/runtime?)")
		}
		v := documentrevision.DefaultID()
		drc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (drc *DocumentRevisionCreate) check() error {
	if v, ok := drc.mutation.Revision(); ok {
		if err := documentrevision.RevisionValidator(v); err != nil {
			return &ValidationError{Name: "revision", err: fmt.Errorf(`generated: validator failed for field "DocumentRevision.revision": %w`, err)}
		}
	}
	if v, ok := drc.mutation.Status(); ok {
		if err := documentrevision.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "DocumentRevision.status": %w`, err)}
		}
	}
	if v, ok := drc.mutation.SubmittedByID(); ok {
		if err := documentrevision.SubmittedByIDValidator(v); err != nil {
			return &ValidationError{Name: "submitted_by_id", err: fmt.Errorf(`generated: validator failed for field "DocumentRevision.submitted_by_id": %w`, err)}
		}
	}
	if v, ok := drc.mutation.ApprovedByID(); ok {
		if err := documentrevision.ApprovedByIDValidator(v); err != nil {
			return &ValidationError{Name: "approved_by_id", err: fmt.Errorf(`generated: validator failed for field "DocumentRevision.approved_by_id": %w`, err)}
		}
	}
	return nil
}

func (drc *DocumentRevisionCreate) sqlSave(ctx context.Context) (*DocumentRevision, error) {
	if err := drc.check(); err != nil {
		return nil, err
	}
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected DocumentRevision.ID type: %T", _spec.ID.Value)
		}
	}
	drc.mutation.id = &_node.ID
	drc.mutation.done = true
	return _node, nil
}

func (drc *DocumentRevisionCreate) createSpec() (*DocumentRevision, *sqlgraph.CreateSpec) {
	var (
		_node = &DocumentRevision{config: drc.config}
		_spec = sqlgraph.NewCreateSpec(documentrevision.Table, sqlgraph.NewFieldSpec(documentrevision.FieldID, field.TypeString))
	)
	_spec.Schema = drc.schemaConfig.DocumentRevision
	if id, ok := drc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := drc.mutation.CreatedAt(); ok {
		_spec.SetField(documentrevision.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := drc.mutation.UpdatedAt(); ok {
		_spec.SetField(documentrevision.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := drc.mutation.CreatedBy(); ok {
		_spec.SetField(documentrevision.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := drc.mutation.UpdatedBy(); ok {
		_spec.SetField(documentrevision.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := drc.mutation.DeletedAt(); ok {
		_spec.SetField(documentrevision.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := drc.mutation.DeletedBy(); ok {
		_spec.SetField(documentrevision.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := drc.mutation.Tags(); ok {
		_spec.SetField(documentrevision.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := drc.mutation.Revision(); ok {
		_spec.SetField(documentrevision.FieldRevision, field.TypeString, value)
		_node.Revision = value
	}
	if value, ok := drc.mutation.Details(); ok {
		_spec.SetField(documentrevision.FieldDetails, field.TypeString, value)
		_node.Details = value
	}
	if value, ok := drc.mutation.Status(); ok {
		_spec.SetField(documentrevision.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := drc.mutation.ApprovalDate(); ok {
		_spec.SetField(documentrevision.FieldApprovalDate, field.TypeTime, value)
		_node.ApprovalDate = &value
	}
	if nodes := drc.mutation.SubmittedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentrevision.SubmittedByTable,
			Columns: []string{documentrevision.SubmittedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = drc.schemaConfig.DocumentRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SubmittedByID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.ApprovedByIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentrevision.ApprovedByTable,
			Columns: []string{documentrevision.ApprovedByColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = drc.schemaConfig.DocumentRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ApprovedByID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.InternalPolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentrevision.InternalPolicyTable,
			Columns: []string{documentrevision.InternalPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = drc.schemaConfig.DocumentRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.InternalPolicyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.ProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentrevision.ProcedureTable,
			Columns: []string{documentrevision.ProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = drc.schemaConfig.DocumentRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProcedureID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := drc.mutation.ActionPlanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   documentrevision.ActionPlanTable,
			Columns: []string{documentrevision.ActionPlanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = drc.schemaConfig.DocumentRevision
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ActionPlanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DocumentRevisionCreateBulk is the builder for creating many DocumentRevision entities in bulk.
type DocumentRevisionCreateBulk struct {
	config
	err      error
	builders []*DocumentRevisionCreate
}

// Save creates the DocumentRevision entities in the database.
func (drcb *DocumentRevisionCreateBulk) Save(ctx context.Context) ([]*DocumentRevision, error) {
	if drcb.err != nil {
		return nil, drcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DocumentRevision, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentRevisionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (drcb *DocumentRevisionCreateBulk) SaveX(ctx context.Context) []*DocumentRevision {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (drcb *DocumentRevisionCreateBulk) Exec(ctx context.Context) error {
	_, err := drcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (drcb *DocumentRevisionCreateBulk) ExecX(ctx context.Context) {
	if err := drcb.Exec(ctx); err != nil {
		panic(err)
	}
}
