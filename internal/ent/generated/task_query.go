// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/user"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TaskQuery is the builder for querying Task entities.
type TaskQuery struct {
	config
	ctx                       *QueryContext
	order                     []task.OrderOption
	inters                    []Interceptor
	predicates                []predicate.Task
	withAssigner              *UserQuery
	withAssignee              *UserQuery
	withOrganization          *OrganizationQuery
	withGroup                 *GroupQuery
	withPolicy                *InternalPolicyQuery
	withProcedure             *ProcedureQuery
	withControl               *ControlQuery
	withControlObjective      *ControlObjectiveQuery
	withSubcontrol            *SubcontrolQuery
	withProgram               *ProgramQuery
	withFKs                   bool
	loadTotal                 []func(context.Context, []*Task) error
	modifiers                 []func(*sql.Selector)
	withNamedOrganization     map[string]*OrganizationQuery
	withNamedGroup            map[string]*GroupQuery
	withNamedPolicy           map[string]*InternalPolicyQuery
	withNamedProcedure        map[string]*ProcedureQuery
	withNamedControl          map[string]*ControlQuery
	withNamedControlObjective map[string]*ControlObjectiveQuery
	withNamedSubcontrol       map[string]*SubcontrolQuery
	withNamedProgram          map[string]*ProgramQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TaskQuery builder.
func (tq *TaskQuery) Where(ps ...predicate.Task) *TaskQuery {
	tq.predicates = append(tq.predicates, ps...)
	return tq
}

// Limit the number of records to be returned by this query.
func (tq *TaskQuery) Limit(limit int) *TaskQuery {
	tq.ctx.Limit = &limit
	return tq
}

// Offset to start from.
func (tq *TaskQuery) Offset(offset int) *TaskQuery {
	tq.ctx.Offset = &offset
	return tq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tq *TaskQuery) Unique(unique bool) *TaskQuery {
	tq.ctx.Unique = &unique
	return tq
}

// Order specifies how the records should be ordered.
func (tq *TaskQuery) Order(o ...task.OrderOption) *TaskQuery {
	tq.order = append(tq.order, o...)
	return tq
}

// QueryAssigner chains the current query on the "assigner" edge.
func (tq *TaskQuery) QueryAssigner() *UserQuery {
	query := (&UserClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.AssignerTable, task.AssignerColumn),
		)
		schemaConfig := tq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Task
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAssignee chains the current query on the "assignee" edge.
func (tq *TaskQuery) QueryAssignee() *UserQuery {
	query := (&UserClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, task.AssigneeTable, task.AssigneeColumn),
		)
		schemaConfig := tq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Task
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganization chains the current query on the "organization" edge.
func (tq *TaskQuery) QueryOrganization() *OrganizationQuery {
	query := (&OrganizationClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, task.OrganizationTable, task.OrganizationPrimaryKey...),
		)
		schemaConfig := tq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrganizationTasks
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroup chains the current query on the "group" edge.
func (tq *TaskQuery) QueryGroup() *GroupQuery {
	query := (&GroupClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, task.GroupTable, task.GroupPrimaryKey...),
		)
		schemaConfig := tq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupTasks
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPolicy chains the current query on the "policy" edge.
func (tq *TaskQuery) QueryPolicy() *InternalPolicyQuery {
	query := (&InternalPolicyClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(internalpolicy.Table, internalpolicy.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, task.PolicyTable, task.PolicyPrimaryKey...),
		)
		schemaConfig := tq.schemaConfig
		step.To.Schema = schemaConfig.InternalPolicy
		step.Edge.Schema = schemaConfig.InternalPolicyTasks
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProcedure chains the current query on the "procedure" edge.
func (tq *TaskQuery) QueryProcedure() *ProcedureQuery {
	query := (&ProcedureClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(procedure.Table, procedure.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, task.ProcedureTable, task.ProcedurePrimaryKey...),
		)
		schemaConfig := tq.schemaConfig
		step.To.Schema = schemaConfig.Procedure
		step.Edge.Schema = schemaConfig.ProcedureTasks
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControl chains the current query on the "control" edge.
func (tq *TaskQuery) QueryControl() *ControlQuery {
	query := (&ControlClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(control.Table, control.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, task.ControlTable, task.ControlPrimaryKey...),
		)
		schemaConfig := tq.schemaConfig
		step.To.Schema = schemaConfig.Control
		step.Edge.Schema = schemaConfig.ControlTasks
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryControlObjective chains the current query on the "control_objective" edge.
func (tq *TaskQuery) QueryControlObjective() *ControlObjectiveQuery {
	query := (&ControlObjectiveClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(controlobjective.Table, controlobjective.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, task.ControlObjectiveTable, task.ControlObjectivePrimaryKey...),
		)
		schemaConfig := tq.schemaConfig
		step.To.Schema = schemaConfig.ControlObjective
		step.Edge.Schema = schemaConfig.ControlObjectiveTasks
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubcontrol chains the current query on the "subcontrol" edge.
func (tq *TaskQuery) QuerySubcontrol() *SubcontrolQuery {
	query := (&SubcontrolClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(subcontrol.Table, subcontrol.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, task.SubcontrolTable, task.SubcontrolPrimaryKey...),
		)
		schemaConfig := tq.schemaConfig
		step.To.Schema = schemaConfig.Subcontrol
		step.Edge.Schema = schemaConfig.SubcontrolTasks
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProgram chains the current query on the "program" edge.
func (tq *TaskQuery) QueryProgram() *ProgramQuery {
	query := (&ProgramClient{config: tq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(task.Table, task.FieldID, selector),
			sqlgraph.To(program.Table, program.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, task.ProgramTable, task.ProgramPrimaryKey...),
		)
		schemaConfig := tq.schemaConfig
		step.To.Schema = schemaConfig.Program
		step.Edge.Schema = schemaConfig.ProgramTasks
		fromU = sqlgraph.SetNeighbors(tq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Task entity from the query.
// Returns a *NotFoundError when no Task was found.
func (tq *TaskQuery) First(ctx context.Context) (*Task, error) {
	nodes, err := tq.Limit(1).All(setContextOp(ctx, tq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{task.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tq *TaskQuery) FirstX(ctx context.Context) *Task {
	node, err := tq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Task ID from the query.
// Returns a *NotFoundError when no Task ID was found.
func (tq *TaskQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tq.Limit(1).IDs(setContextOp(ctx, tq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{task.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tq *TaskQuery) FirstIDX(ctx context.Context) string {
	id, err := tq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Task entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Task entity is found.
// Returns a *NotFoundError when no Task entities are found.
func (tq *TaskQuery) Only(ctx context.Context) (*Task, error) {
	nodes, err := tq.Limit(2).All(setContextOp(ctx, tq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{task.Label}
	default:
		return nil, &NotSingularError{task.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tq *TaskQuery) OnlyX(ctx context.Context) *Task {
	node, err := tq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Task ID in the query.
// Returns a *NotSingularError when more than one Task ID is found.
// Returns a *NotFoundError when no entities are found.
func (tq *TaskQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = tq.Limit(2).IDs(setContextOp(ctx, tq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{task.Label}
	default:
		err = &NotSingularError{task.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tq *TaskQuery) OnlyIDX(ctx context.Context) string {
	id, err := tq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Tasks.
func (tq *TaskQuery) All(ctx context.Context) ([]*Task, error) {
	ctx = setContextOp(ctx, tq.ctx, ent.OpQueryAll)
	if err := tq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Task, *TaskQuery]()
	return withInterceptors[[]*Task](ctx, tq, qr, tq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tq *TaskQuery) AllX(ctx context.Context) []*Task {
	nodes, err := tq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Task IDs.
func (tq *TaskQuery) IDs(ctx context.Context) (ids []string, err error) {
	if tq.ctx.Unique == nil && tq.path != nil {
		tq.Unique(true)
	}
	ctx = setContextOp(ctx, tq.ctx, ent.OpQueryIDs)
	if err = tq.Select(task.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tq *TaskQuery) IDsX(ctx context.Context) []string {
	ids, err := tq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tq *TaskQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tq.ctx, ent.OpQueryCount)
	if err := tq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tq, querierCount[*TaskQuery](), tq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tq *TaskQuery) CountX(ctx context.Context) int {
	count, err := tq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tq *TaskQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tq.ctx, ent.OpQueryExist)
	switch _, err := tq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tq *TaskQuery) ExistX(ctx context.Context) bool {
	exist, err := tq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TaskQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tq *TaskQuery) Clone() *TaskQuery {
	if tq == nil {
		return nil
	}
	return &TaskQuery{
		config:               tq.config,
		ctx:                  tq.ctx.Clone(),
		order:                append([]task.OrderOption{}, tq.order...),
		inters:               append([]Interceptor{}, tq.inters...),
		predicates:           append([]predicate.Task{}, tq.predicates...),
		withAssigner:         tq.withAssigner.Clone(),
		withAssignee:         tq.withAssignee.Clone(),
		withOrganization:     tq.withOrganization.Clone(),
		withGroup:            tq.withGroup.Clone(),
		withPolicy:           tq.withPolicy.Clone(),
		withProcedure:        tq.withProcedure.Clone(),
		withControl:          tq.withControl.Clone(),
		withControlObjective: tq.withControlObjective.Clone(),
		withSubcontrol:       tq.withSubcontrol.Clone(),
		withProgram:          tq.withProgram.Clone(),
		// clone intermediate query.
		sql:       tq.sql.Clone(),
		path:      tq.path,
		modifiers: append([]func(*sql.Selector){}, tq.modifiers...),
	}
}

// WithAssigner tells the query-builder to eager-load the nodes that are connected to
// the "assigner" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithAssigner(opts ...func(*UserQuery)) *TaskQuery {
	query := (&UserClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withAssigner = query
	return tq
}

// WithAssignee tells the query-builder to eager-load the nodes that are connected to
// the "assignee" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithAssignee(opts ...func(*UserQuery)) *TaskQuery {
	query := (&UserClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withAssignee = query
	return tq
}

// WithOrganization tells the query-builder to eager-load the nodes that are connected to
// the "organization" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithOrganization(opts ...func(*OrganizationQuery)) *TaskQuery {
	query := (&OrganizationClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withOrganization = query
	return tq
}

// WithGroup tells the query-builder to eager-load the nodes that are connected to
// the "group" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithGroup(opts ...func(*GroupQuery)) *TaskQuery {
	query := (&GroupClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withGroup = query
	return tq
}

// WithPolicy tells the query-builder to eager-load the nodes that are connected to
// the "policy" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithPolicy(opts ...func(*InternalPolicyQuery)) *TaskQuery {
	query := (&InternalPolicyClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withPolicy = query
	return tq
}

// WithProcedure tells the query-builder to eager-load the nodes that are connected to
// the "procedure" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithProcedure(opts ...func(*ProcedureQuery)) *TaskQuery {
	query := (&ProcedureClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withProcedure = query
	return tq
}

// WithControl tells the query-builder to eager-load the nodes that are connected to
// the "control" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithControl(opts ...func(*ControlQuery)) *TaskQuery {
	query := (&ControlClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withControl = query
	return tq
}

// WithControlObjective tells the query-builder to eager-load the nodes that are connected to
// the "control_objective" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithControlObjective(opts ...func(*ControlObjectiveQuery)) *TaskQuery {
	query := (&ControlObjectiveClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withControlObjective = query
	return tq
}

// WithSubcontrol tells the query-builder to eager-load the nodes that are connected to
// the "subcontrol" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithSubcontrol(opts ...func(*SubcontrolQuery)) *TaskQuery {
	query := (&SubcontrolClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withSubcontrol = query
	return tq
}

// WithProgram tells the query-builder to eager-load the nodes that are connected to
// the "program" edge. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithProgram(opts ...func(*ProgramQuery)) *TaskQuery {
	query := (&ProgramClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tq.withProgram = query
	return tq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Task.Query().
//		GroupBy(task.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (tq *TaskQuery) GroupBy(field string, fields ...string) *TaskGroupBy {
	tq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TaskGroupBy{build: tq}
	grbuild.flds = &tq.ctx.Fields
	grbuild.label = task.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Task.Query().
//		Select(task.FieldCreatedAt).
//		Scan(ctx, &v)
func (tq *TaskQuery) Select(fields ...string) *TaskSelect {
	tq.ctx.Fields = append(tq.ctx.Fields, fields...)
	sbuild := &TaskSelect{TaskQuery: tq}
	sbuild.label = task.Label
	sbuild.flds, sbuild.scan = &tq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TaskSelect configured with the given aggregations.
func (tq *TaskQuery) Aggregate(fns ...AggregateFunc) *TaskSelect {
	return tq.Select().Aggregate(fns...)
}

func (tq *TaskQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tq); err != nil {
				return err
			}
		}
	}
	for _, f := range tq.ctx.Fields {
		if !task.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if tq.path != nil {
		prev, err := tq.path(ctx)
		if err != nil {
			return err
		}
		tq.sql = prev
	}
	if task.Policy == nil {
		return errors.New("generated: uninitialized task.Policy (forgotten import generated/runtime?)")
	}
	if err := task.Policy.EvalQuery(ctx, tq); err != nil {
		return err
	}
	return nil
}

func (tq *TaskQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Task, error) {
	var (
		nodes       = []*Task{}
		withFKs     = tq.withFKs
		_spec       = tq.querySpec()
		loadedTypes = [10]bool{
			tq.withAssigner != nil,
			tq.withAssignee != nil,
			tq.withOrganization != nil,
			tq.withGroup != nil,
			tq.withPolicy != nil,
			tq.withProcedure != nil,
			tq.withControl != nil,
			tq.withControlObjective != nil,
			tq.withSubcontrol != nil,
			tq.withProgram != nil,
		}
	)
	if tq.withAssigner != nil || tq.withAssignee != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, task.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Task).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Task{config: tq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = tq.schemaConfig.Task
	ctx = internal.NewSchemaConfigContext(ctx, tq.schemaConfig)
	if len(tq.modifiers) > 0 {
		_spec.Modifiers = tq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tq.withAssigner; query != nil {
		if err := tq.loadAssigner(ctx, query, nodes, nil,
			func(n *Task, e *User) { n.Edges.Assigner = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withAssignee; query != nil {
		if err := tq.loadAssignee(ctx, query, nodes, nil,
			func(n *Task, e *User) { n.Edges.Assignee = e }); err != nil {
			return nil, err
		}
	}
	if query := tq.withOrganization; query != nil {
		if err := tq.loadOrganization(ctx, query, nodes,
			func(n *Task) { n.Edges.Organization = []*Organization{} },
			func(n *Task, e *Organization) { n.Edges.Organization = append(n.Edges.Organization, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withGroup; query != nil {
		if err := tq.loadGroup(ctx, query, nodes,
			func(n *Task) { n.Edges.Group = []*Group{} },
			func(n *Task, e *Group) { n.Edges.Group = append(n.Edges.Group, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withPolicy; query != nil {
		if err := tq.loadPolicy(ctx, query, nodes,
			func(n *Task) { n.Edges.Policy = []*InternalPolicy{} },
			func(n *Task, e *InternalPolicy) { n.Edges.Policy = append(n.Edges.Policy, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withProcedure; query != nil {
		if err := tq.loadProcedure(ctx, query, nodes,
			func(n *Task) { n.Edges.Procedure = []*Procedure{} },
			func(n *Task, e *Procedure) { n.Edges.Procedure = append(n.Edges.Procedure, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withControl; query != nil {
		if err := tq.loadControl(ctx, query, nodes,
			func(n *Task) { n.Edges.Control = []*Control{} },
			func(n *Task, e *Control) { n.Edges.Control = append(n.Edges.Control, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withControlObjective; query != nil {
		if err := tq.loadControlObjective(ctx, query, nodes,
			func(n *Task) { n.Edges.ControlObjective = []*ControlObjective{} },
			func(n *Task, e *ControlObjective) { n.Edges.ControlObjective = append(n.Edges.ControlObjective, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withSubcontrol; query != nil {
		if err := tq.loadSubcontrol(ctx, query, nodes,
			func(n *Task) { n.Edges.Subcontrol = []*Subcontrol{} },
			func(n *Task, e *Subcontrol) { n.Edges.Subcontrol = append(n.Edges.Subcontrol, e) }); err != nil {
			return nil, err
		}
	}
	if query := tq.withProgram; query != nil {
		if err := tq.loadProgram(ctx, query, nodes,
			func(n *Task) { n.Edges.Program = []*Program{} },
			func(n *Task, e *Program) { n.Edges.Program = append(n.Edges.Program, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tq.withNamedOrganization {
		if err := tq.loadOrganization(ctx, query, nodes,
			func(n *Task) { n.appendNamedOrganization(name) },
			func(n *Task, e *Organization) { n.appendNamedOrganization(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tq.withNamedGroup {
		if err := tq.loadGroup(ctx, query, nodes,
			func(n *Task) { n.appendNamedGroup(name) },
			func(n *Task, e *Group) { n.appendNamedGroup(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tq.withNamedPolicy {
		if err := tq.loadPolicy(ctx, query, nodes,
			func(n *Task) { n.appendNamedPolicy(name) },
			func(n *Task, e *InternalPolicy) { n.appendNamedPolicy(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tq.withNamedProcedure {
		if err := tq.loadProcedure(ctx, query, nodes,
			func(n *Task) { n.appendNamedProcedure(name) },
			func(n *Task, e *Procedure) { n.appendNamedProcedure(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tq.withNamedControl {
		if err := tq.loadControl(ctx, query, nodes,
			func(n *Task) { n.appendNamedControl(name) },
			func(n *Task, e *Control) { n.appendNamedControl(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tq.withNamedControlObjective {
		if err := tq.loadControlObjective(ctx, query, nodes,
			func(n *Task) { n.appendNamedControlObjective(name) },
			func(n *Task, e *ControlObjective) { n.appendNamedControlObjective(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tq.withNamedSubcontrol {
		if err := tq.loadSubcontrol(ctx, query, nodes,
			func(n *Task) { n.appendNamedSubcontrol(name) },
			func(n *Task, e *Subcontrol) { n.appendNamedSubcontrol(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range tq.withNamedProgram {
		if err := tq.loadProgram(ctx, query, nodes,
			func(n *Task) { n.appendNamedProgram(name) },
			func(n *Task, e *Program) { n.appendNamedProgram(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range tq.loadTotal {
		if err := tq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tq *TaskQuery) loadAssigner(ctx context.Context, query *UserQuery, nodes []*Task, init func(*Task), assign func(*Task, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Task)
	for i := range nodes {
		if nodes[i].user_assigner_tasks == nil {
			continue
		}
		fk := *nodes[i].user_assigner_tasks
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_assigner_tasks" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TaskQuery) loadAssignee(ctx context.Context, query *UserQuery, nodes []*Task, init func(*Task), assign func(*Task, *User)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Task)
	for i := range nodes {
		if nodes[i].user_assignee_tasks == nil {
			continue
		}
		fk := *nodes[i].user_assignee_tasks
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_assignee_tasks" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tq *TaskQuery) loadOrganization(ctx context.Context, query *OrganizationQuery, nodes []*Task, init func(*Task), assign func(*Task, *Organization)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Task)
	nids := make(map[string]map[*Task]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(task.OrganizationTable)
		joinT.Schema(tq.schemaConfig.OrganizationTasks)
		s.Join(joinT).On(s.C(organization.FieldID), joinT.C(task.OrganizationPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(task.OrganizationPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(task.OrganizationPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Task]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Organization](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "organization" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TaskQuery) loadGroup(ctx context.Context, query *GroupQuery, nodes []*Task, init func(*Task), assign func(*Task, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Task)
	nids := make(map[string]map[*Task]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(task.GroupTable)
		joinT.Schema(tq.schemaConfig.GroupTasks)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(task.GroupPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(task.GroupPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(task.GroupPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Task]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "group" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TaskQuery) loadPolicy(ctx context.Context, query *InternalPolicyQuery, nodes []*Task, init func(*Task), assign func(*Task, *InternalPolicy)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Task)
	nids := make(map[string]map[*Task]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(task.PolicyTable)
		joinT.Schema(tq.schemaConfig.InternalPolicyTasks)
		s.Join(joinT).On(s.C(internalpolicy.FieldID), joinT.C(task.PolicyPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(task.PolicyPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(task.PolicyPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Task]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*InternalPolicy](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "policy" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TaskQuery) loadProcedure(ctx context.Context, query *ProcedureQuery, nodes []*Task, init func(*Task), assign func(*Task, *Procedure)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Task)
	nids := make(map[string]map[*Task]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(task.ProcedureTable)
		joinT.Schema(tq.schemaConfig.ProcedureTasks)
		s.Join(joinT).On(s.C(procedure.FieldID), joinT.C(task.ProcedurePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(task.ProcedurePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(task.ProcedurePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Task]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Procedure](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "procedure" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TaskQuery) loadControl(ctx context.Context, query *ControlQuery, nodes []*Task, init func(*Task), assign func(*Task, *Control)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Task)
	nids := make(map[string]map[*Task]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(task.ControlTable)
		joinT.Schema(tq.schemaConfig.ControlTasks)
		s.Join(joinT).On(s.C(control.FieldID), joinT.C(task.ControlPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(task.ControlPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(task.ControlPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Task]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Control](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TaskQuery) loadControlObjective(ctx context.Context, query *ControlObjectiveQuery, nodes []*Task, init func(*Task), assign func(*Task, *ControlObjective)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Task)
	nids := make(map[string]map[*Task]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(task.ControlObjectiveTable)
		joinT.Schema(tq.schemaConfig.ControlObjectiveTasks)
		s.Join(joinT).On(s.C(controlobjective.FieldID), joinT.C(task.ControlObjectivePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(task.ControlObjectivePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(task.ControlObjectivePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Task]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*ControlObjective](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "control_objective" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TaskQuery) loadSubcontrol(ctx context.Context, query *SubcontrolQuery, nodes []*Task, init func(*Task), assign func(*Task, *Subcontrol)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Task)
	nids := make(map[string]map[*Task]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(task.SubcontrolTable)
		joinT.Schema(tq.schemaConfig.SubcontrolTasks)
		s.Join(joinT).On(s.C(subcontrol.FieldID), joinT.C(task.SubcontrolPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(task.SubcontrolPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(task.SubcontrolPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Task]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Subcontrol](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "subcontrol" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tq *TaskQuery) loadProgram(ctx context.Context, query *ProgramQuery, nodes []*Task, init func(*Task), assign func(*Task, *Program)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Task)
	nids := make(map[string]map[*Task]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(task.ProgramTable)
		joinT.Schema(tq.schemaConfig.ProgramTasks)
		s.Join(joinT).On(s.C(program.FieldID), joinT.C(task.ProgramPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(task.ProgramPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(task.ProgramPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Task]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Program](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "program" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (tq *TaskQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tq.querySpec()
	_spec.Node.Schema = tq.schemaConfig.Task
	ctx = internal.NewSchemaConfigContext(ctx, tq.schemaConfig)
	if len(tq.modifiers) > 0 {
		_spec.Modifiers = tq.modifiers
	}
	_spec.Node.Columns = tq.ctx.Fields
	if len(tq.ctx.Fields) > 0 {
		_spec.Unique = tq.ctx.Unique != nil && *tq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tq.driver, _spec)
}

func (tq *TaskQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeString))
	_spec.From = tq.sql
	if unique := tq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tq.path != nil {
		_spec.Unique = true
	}
	if fields := tq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for i := range fields {
			if fields[i] != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := tq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tq *TaskQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tq.driver.Dialect())
	t1 := builder.Table(task.Table)
	columns := tq.ctx.Fields
	if len(columns) == 0 {
		columns = task.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tq.sql != nil {
		selector = tq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tq.ctx.Unique != nil && *tq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(tq.schemaConfig.Task)
	ctx = internal.NewSchemaConfigContext(ctx, tq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range tq.modifiers {
		m(selector)
	}
	for _, p := range tq.predicates {
		p(selector)
	}
	for _, p := range tq.order {
		p(selector)
	}
	if offset := tq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (tq *TaskQuery) Modify(modifiers ...func(s *sql.Selector)) *TaskSelect {
	tq.modifiers = append(tq.modifiers, modifiers...)
	return tq.Select()
}

// WithNamedOrganization tells the query-builder to eager-load the nodes that are connected to the "organization"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithNamedOrganization(name string, opts ...func(*OrganizationQuery)) *TaskQuery {
	query := (&OrganizationClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tq.withNamedOrganization == nil {
		tq.withNamedOrganization = make(map[string]*OrganizationQuery)
	}
	tq.withNamedOrganization[name] = query
	return tq
}

// WithNamedGroup tells the query-builder to eager-load the nodes that are connected to the "group"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithNamedGroup(name string, opts ...func(*GroupQuery)) *TaskQuery {
	query := (&GroupClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tq.withNamedGroup == nil {
		tq.withNamedGroup = make(map[string]*GroupQuery)
	}
	tq.withNamedGroup[name] = query
	return tq
}

// WithNamedPolicy tells the query-builder to eager-load the nodes that are connected to the "policy"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithNamedPolicy(name string, opts ...func(*InternalPolicyQuery)) *TaskQuery {
	query := (&InternalPolicyClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tq.withNamedPolicy == nil {
		tq.withNamedPolicy = make(map[string]*InternalPolicyQuery)
	}
	tq.withNamedPolicy[name] = query
	return tq
}

// WithNamedProcedure tells the query-builder to eager-load the nodes that are connected to the "procedure"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithNamedProcedure(name string, opts ...func(*ProcedureQuery)) *TaskQuery {
	query := (&ProcedureClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tq.withNamedProcedure == nil {
		tq.withNamedProcedure = make(map[string]*ProcedureQuery)
	}
	tq.withNamedProcedure[name] = query
	return tq
}

// WithNamedControl tells the query-builder to eager-load the nodes that are connected to the "control"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithNamedControl(name string, opts ...func(*ControlQuery)) *TaskQuery {
	query := (&ControlClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tq.withNamedControl == nil {
		tq.withNamedControl = make(map[string]*ControlQuery)
	}
	tq.withNamedControl[name] = query
	return tq
}

// WithNamedControlObjective tells the query-builder to eager-load the nodes that are connected to the "control_objective"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithNamedControlObjective(name string, opts ...func(*ControlObjectiveQuery)) *TaskQuery {
	query := (&ControlObjectiveClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tq.withNamedControlObjective == nil {
		tq.withNamedControlObjective = make(map[string]*ControlObjectiveQuery)
	}
	tq.withNamedControlObjective[name] = query
	return tq
}

// WithNamedSubcontrol tells the query-builder to eager-load the nodes that are connected to the "subcontrol"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithNamedSubcontrol(name string, opts ...func(*SubcontrolQuery)) *TaskQuery {
	query := (&SubcontrolClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tq.withNamedSubcontrol == nil {
		tq.withNamedSubcontrol = make(map[string]*SubcontrolQuery)
	}
	tq.withNamedSubcontrol[name] = query
	return tq
}

// WithNamedProgram tells the query-builder to eager-load the nodes that are connected to the "program"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (tq *TaskQuery) WithNamedProgram(name string, opts ...func(*ProgramQuery)) *TaskQuery {
	query := (&ProgramClient{config: tq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if tq.withNamedProgram == nil {
		tq.withNamedProgram = make(map[string]*ProgramQuery)
	}
	tq.withNamedProgram[name] = query
	return tq
}

// TaskGroupBy is the group-by builder for Task entities.
type TaskGroupBy struct {
	selector
	build *TaskQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tgb *TaskGroupBy) Aggregate(fns ...AggregateFunc) *TaskGroupBy {
	tgb.fns = append(tgb.fns, fns...)
	return tgb
}

// Scan applies the selector query and scans the result into the given value.
func (tgb *TaskGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tgb.build.ctx, ent.OpQueryGroupBy)
	if err := tgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TaskQuery, *TaskGroupBy](ctx, tgb.build, tgb, tgb.build.inters, v)
}

func (tgb *TaskGroupBy) sqlScan(ctx context.Context, root *TaskQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tgb.fns))
	for _, fn := range tgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tgb.flds)+len(tgb.fns))
		for _, f := range *tgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TaskSelect is the builder for selecting fields of Task entities.
type TaskSelect struct {
	*TaskQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ts *TaskSelect) Aggregate(fns ...AggregateFunc) *TaskSelect {
	ts.fns = append(ts.fns, fns...)
	return ts
}

// Scan applies the selector query and scans the result into the given value.
func (ts *TaskSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ts.ctx, ent.OpQuerySelect)
	if err := ts.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TaskQuery, *TaskSelect](ctx, ts.TaskQuery, ts, ts.inters, v)
}

func (ts *TaskSelect) sqlScan(ctx context.Context, root *TaskQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ts.fns))
	for _, fn := range ts.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ts.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ts *TaskSelect) Modify(modifiers ...func(s *sql.Selector)) *TaskSelect {
	ts.modifiers = append(ts.modifiers, modifiers...)
	return ts
}
