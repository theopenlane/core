// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/assessmentresponsehistory"
	"github.com/theopenlane/core/pkg/enums"
	"github.com/theopenlane/entx/history"
)

// AssessmentResponseHistory is the model entity for the AssessmentResponseHistory schema.
type AssessmentResponseHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// the assessment this response is for
	AssessmentID string `json:"assessment_id,omitempty"`
	// the user who is responding to the assessment
	UserID string `json:"user_id,omitempty"`
	// the current status of the assessment for this user
	Status enums.AssessmentResponseStatus `json:"status,omitempty"`
	// when the assessment was assigned to the user
	AssignedAt time.Time `json:"assigned_at,omitempty"`
	// when the user started the assessment
	StartedAt time.Time `json:"started_at,omitempty"`
	// when the user completed the assessment
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// when the assessment is due
	DueDate time.Time `json:"due_date,omitempty"`
	// the document containing the user's response data
	ResponseDataID string `json:"response_data_id,omitempty"`
	selectValues   sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AssessmentResponseHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case assessmentresponsehistory.FieldTags:
			values[i] = new([]byte)
		case assessmentresponsehistory.FieldOperation:
			values[i] = new(history.OpType)
		case assessmentresponsehistory.FieldID, assessmentresponsehistory.FieldRef, assessmentresponsehistory.FieldCreatedBy, assessmentresponsehistory.FieldUpdatedBy, assessmentresponsehistory.FieldDeletedBy, assessmentresponsehistory.FieldOwnerID, assessmentresponsehistory.FieldAssessmentID, assessmentresponsehistory.FieldUserID, assessmentresponsehistory.FieldStatus, assessmentresponsehistory.FieldResponseDataID:
			values[i] = new(sql.NullString)
		case assessmentresponsehistory.FieldHistoryTime, assessmentresponsehistory.FieldCreatedAt, assessmentresponsehistory.FieldUpdatedAt, assessmentresponsehistory.FieldDeletedAt, assessmentresponsehistory.FieldAssignedAt, assessmentresponsehistory.FieldStartedAt, assessmentresponsehistory.FieldCompletedAt, assessmentresponsehistory.FieldDueDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AssessmentResponseHistory fields.
func (arh *AssessmentResponseHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case assessmentresponsehistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				arh.ID = value.String
			}
		case assessmentresponsehistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				arh.HistoryTime = value.Time
			}
		case assessmentresponsehistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				arh.Ref = value.String
			}
		case assessmentresponsehistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				arh.Operation = *value
			}
		case assessmentresponsehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				arh.CreatedAt = value.Time
			}
		case assessmentresponsehistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				arh.UpdatedAt = value.Time
			}
		case assessmentresponsehistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				arh.CreatedBy = value.String
			}
		case assessmentresponsehistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				arh.UpdatedBy = value.String
			}
		case assessmentresponsehistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				arh.DeletedAt = value.Time
			}
		case assessmentresponsehistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				arh.DeletedBy = value.String
			}
		case assessmentresponsehistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &arh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case assessmentresponsehistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				arh.OwnerID = value.String
			}
		case assessmentresponsehistory.FieldAssessmentID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field assessment_id", values[i])
			} else if value.Valid {
				arh.AssessmentID = value.String
			}
		case assessmentresponsehistory.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				arh.UserID = value.String
			}
		case assessmentresponsehistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				arh.Status = enums.AssessmentResponseStatus(value.String)
			}
		case assessmentresponsehistory.FieldAssignedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field assigned_at", values[i])
			} else if value.Valid {
				arh.AssignedAt = value.Time
			}
		case assessmentresponsehistory.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				arh.StartedAt = value.Time
			}
		case assessmentresponsehistory.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				arh.CompletedAt = value.Time
			}
		case assessmentresponsehistory.FieldDueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field due_date", values[i])
			} else if value.Valid {
				arh.DueDate = value.Time
			}
		case assessmentresponsehistory.FieldResponseDataID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_data_id", values[i])
			} else if value.Valid {
				arh.ResponseDataID = value.String
			}
		default:
			arh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AssessmentResponseHistory.
// This includes values selected through modifiers, order, etc.
func (arh *AssessmentResponseHistory) Value(name string) (ent.Value, error) {
	return arh.selectValues.Get(name)
}

// Update returns a builder for updating this AssessmentResponseHistory.
// Note that you need to call AssessmentResponseHistory.Unwrap() before calling this method if this AssessmentResponseHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (arh *AssessmentResponseHistory) Update() *AssessmentResponseHistoryUpdateOne {
	return NewAssessmentResponseHistoryClient(arh.config).UpdateOne(arh)
}

// Unwrap unwraps the AssessmentResponseHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (arh *AssessmentResponseHistory) Unwrap() *AssessmentResponseHistory {
	_tx, ok := arh.config.driver.(*txDriver)
	if !ok {
		panic("generated: AssessmentResponseHistory is not a transactional entity")
	}
	arh.config.driver = _tx.drv
	return arh
}

// String implements the fmt.Stringer.
func (arh *AssessmentResponseHistory) String() string {
	var builder strings.Builder
	builder.WriteString("AssessmentResponseHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", arh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(arh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(arh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", arh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(arh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(arh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(arh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(arh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(arh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(arh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", arh.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(arh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("assessment_id=")
	builder.WriteString(arh.AssessmentID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(arh.UserID)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", arh.Status))
	builder.WriteString(", ")
	builder.WriteString("assigned_at=")
	builder.WriteString(arh.AssignedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(arh.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(arh.CompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("due_date=")
	builder.WriteString(arh.DueDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("response_data_id=")
	builder.WriteString(arh.ResponseDataID)
	builder.WriteByte(')')
	return builder.String()
}

// AssessmentResponseHistories is a parsable slice of AssessmentResponseHistory.
type AssessmentResponseHistories []*AssessmentResponseHistory
