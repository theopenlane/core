// Code generated by ent, DO NOT EDIT.

package filehistory

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/entx/history"
)

const (
	// Label holds the string label denoting the filehistory type in the database.
	Label = "file_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHistoryTime holds the string denoting the history_time field in the database.
	FieldHistoryTime = "history_time"
	// FieldRef holds the string denoting the ref field in the database.
	FieldRef = "ref"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldProvidedFileName holds the string denoting the provided_file_name field in the database.
	FieldProvidedFileName = "provided_file_name"
	// FieldProvidedFileExtension holds the string denoting the provided_file_extension field in the database.
	FieldProvidedFileExtension = "provided_file_extension"
	// FieldProvidedFileSize holds the string denoting the provided_file_size field in the database.
	FieldProvidedFileSize = "provided_file_size"
	// FieldPersistedFileSize holds the string denoting the persisted_file_size field in the database.
	FieldPersistedFileSize = "persisted_file_size"
	// FieldDetectedMimeType holds the string denoting the detected_mime_type field in the database.
	FieldDetectedMimeType = "detected_mime_type"
	// FieldMd5Hash holds the string denoting the md5_hash field in the database.
	FieldMd5Hash = "md5_hash"
	// FieldDetectedContentType holds the string denoting the detected_content_type field in the database.
	FieldDetectedContentType = "detected_content_type"
	// FieldStoreKey holds the string denoting the store_key field in the database.
	FieldStoreKey = "store_key"
	// FieldCategoryType holds the string denoting the category_type field in the database.
	FieldCategoryType = "category_type"
	// FieldURI holds the string denoting the uri field in the database.
	FieldURI = "uri"
	// FieldStorageScheme holds the string denoting the storage_scheme field in the database.
	FieldStorageScheme = "storage_scheme"
	// FieldStorageVolume holds the string denoting the storage_volume field in the database.
	FieldStorageVolume = "storage_volume"
	// FieldStoragePath holds the string denoting the storage_path field in the database.
	FieldStoragePath = "storage_path"
	// FieldFileContents holds the string denoting the file_contents field in the database.
	FieldFileContents = "file_contents"
	// Table holds the table name of the filehistory in the database.
	Table = "file_history"
)

// Columns holds all SQL columns for filehistory fields.
var Columns = []string{
	FieldID,
	FieldHistoryTime,
	FieldRef,
	FieldOperation,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTags,
	FieldProvidedFileName,
	FieldProvidedFileExtension,
	FieldProvidedFileSize,
	FieldPersistedFileSize,
	FieldDetectedMimeType,
	FieldMd5Hash,
	FieldDetectedContentType,
	FieldStoreKey,
	FieldCategoryType,
	FieldURI,
	FieldStorageScheme,
	FieldStorageVolume,
	FieldStoragePath,
	FieldFileContents,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Interceptors [1]ent.Interceptor
	// DefaultHistoryTime holds the default value on creation for the "history_time" field.
	DefaultHistoryTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OperationValidator is a validator for the "operation" field enum values. It is called by the builders before save.
func OperationValidator(o history.OpType) error {
	switch o.String() {
	case "INSERT", "UPDATE", "DELETE":
		return nil
	default:
		return fmt.Errorf("filehistory: invalid enum value for operation field: %q", o)
	}
}

// OrderOption defines the ordering options for the FileHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHistoryTime orders the results by the history_time field.
func ByHistoryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHistoryTime, opts...).ToFunc()
}

// ByRef orders the results by the ref field.
func ByRef(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRef, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByProvidedFileName orders the results by the provided_file_name field.
func ByProvidedFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvidedFileName, opts...).ToFunc()
}

// ByProvidedFileExtension orders the results by the provided_file_extension field.
func ByProvidedFileExtension(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvidedFileExtension, opts...).ToFunc()
}

// ByProvidedFileSize orders the results by the provided_file_size field.
func ByProvidedFileSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvidedFileSize, opts...).ToFunc()
}

// ByPersistedFileSize orders the results by the persisted_file_size field.
func ByPersistedFileSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPersistedFileSize, opts...).ToFunc()
}

// ByDetectedMimeType orders the results by the detected_mime_type field.
func ByDetectedMimeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetectedMimeType, opts...).ToFunc()
}

// ByMd5Hash orders the results by the md5_hash field.
func ByMd5Hash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMd5Hash, opts...).ToFunc()
}

// ByDetectedContentType orders the results by the detected_content_type field.
func ByDetectedContentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetectedContentType, opts...).ToFunc()
}

// ByStoreKey orders the results by the store_key field.
func ByStoreKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoreKey, opts...).ToFunc()
}

// ByCategoryType orders the results by the category_type field.
func ByCategoryType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCategoryType, opts...).ToFunc()
}

// ByURI orders the results by the uri field.
func ByURI(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURI, opts...).ToFunc()
}

// ByStorageScheme orders the results by the storage_scheme field.
func ByStorageScheme(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorageScheme, opts...).ToFunc()
}

// ByStorageVolume orders the results by the storage_volume field.
func ByStorageVolume(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStorageVolume, opts...).ToFunc()
}

// ByStoragePath orders the results by the storage_path field.
func ByStoragePath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStoragePath, opts...).ToFunc()
}

var (
	// history.OpType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*history.OpType)(nil)
	// history.OpType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*history.OpType)(nil)
)
