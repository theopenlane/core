// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/trustcentercompliancehistory"
	"github.com/theopenlane/entx/history"
)

// TrustCenterComplianceHistoryCreate is the builder for creating a TrustCenterComplianceHistory entity.
type TrustCenterComplianceHistoryCreate struct {
	config
	mutation *TrustCenterComplianceHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (tcchc *TrustCenterComplianceHistoryCreate) SetHistoryTime(t time.Time) *TrustCenterComplianceHistoryCreate {
	tcchc.mutation.SetHistoryTime(t)
	return tcchc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (tcchc *TrustCenterComplianceHistoryCreate) SetNillableHistoryTime(t *time.Time) *TrustCenterComplianceHistoryCreate {
	if t != nil {
		tcchc.SetHistoryTime(*t)
	}
	return tcchc
}

// SetRef sets the "ref" field.
func (tcchc *TrustCenterComplianceHistoryCreate) SetRef(s string) *TrustCenterComplianceHistoryCreate {
	tcchc.mutation.SetRef(s)
	return tcchc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (tcchc *TrustCenterComplianceHistoryCreate) SetNillableRef(s *string) *TrustCenterComplianceHistoryCreate {
	if s != nil {
		tcchc.SetRef(*s)
	}
	return tcchc
}

// SetOperation sets the "operation" field.
func (tcchc *TrustCenterComplianceHistoryCreate) SetOperation(ht history.OpType) *TrustCenterComplianceHistoryCreate {
	tcchc.mutation.SetOperation(ht)
	return tcchc
}

// SetCreatedAt sets the "created_at" field.
func (tcchc *TrustCenterComplianceHistoryCreate) SetCreatedAt(t time.Time) *TrustCenterComplianceHistoryCreate {
	tcchc.mutation.SetCreatedAt(t)
	return tcchc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcchc *TrustCenterComplianceHistoryCreate) SetNillableCreatedAt(t *time.Time) *TrustCenterComplianceHistoryCreate {
	if t != nil {
		tcchc.SetCreatedAt(*t)
	}
	return tcchc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcchc *TrustCenterComplianceHistoryCreate) SetUpdatedAt(t time.Time) *TrustCenterComplianceHistoryCreate {
	tcchc.mutation.SetUpdatedAt(t)
	return tcchc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcchc *TrustCenterComplianceHistoryCreate) SetNillableUpdatedAt(t *time.Time) *TrustCenterComplianceHistoryCreate {
	if t != nil {
		tcchc.SetUpdatedAt(*t)
	}
	return tcchc
}

// SetCreatedBy sets the "created_by" field.
func (tcchc *TrustCenterComplianceHistoryCreate) SetCreatedBy(s string) *TrustCenterComplianceHistoryCreate {
	tcchc.mutation.SetCreatedBy(s)
	return tcchc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tcchc *TrustCenterComplianceHistoryCreate) SetNillableCreatedBy(s *string) *TrustCenterComplianceHistoryCreate {
	if s != nil {
		tcchc.SetCreatedBy(*s)
	}
	return tcchc
}

// SetUpdatedBy sets the "updated_by" field.
func (tcchc *TrustCenterComplianceHistoryCreate) SetUpdatedBy(s string) *TrustCenterComplianceHistoryCreate {
	tcchc.mutation.SetUpdatedBy(s)
	return tcchc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tcchc *TrustCenterComplianceHistoryCreate) SetNillableUpdatedBy(s *string) *TrustCenterComplianceHistoryCreate {
	if s != nil {
		tcchc.SetUpdatedBy(*s)
	}
	return tcchc
}

// SetDeletedAt sets the "deleted_at" field.
func (tcchc *TrustCenterComplianceHistoryCreate) SetDeletedAt(t time.Time) *TrustCenterComplianceHistoryCreate {
	tcchc.mutation.SetDeletedAt(t)
	return tcchc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tcchc *TrustCenterComplianceHistoryCreate) SetNillableDeletedAt(t *time.Time) *TrustCenterComplianceHistoryCreate {
	if t != nil {
		tcchc.SetDeletedAt(*t)
	}
	return tcchc
}

// SetDeletedBy sets the "deleted_by" field.
func (tcchc *TrustCenterComplianceHistoryCreate) SetDeletedBy(s string) *TrustCenterComplianceHistoryCreate {
	tcchc.mutation.SetDeletedBy(s)
	return tcchc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tcchc *TrustCenterComplianceHistoryCreate) SetNillableDeletedBy(s *string) *TrustCenterComplianceHistoryCreate {
	if s != nil {
		tcchc.SetDeletedBy(*s)
	}
	return tcchc
}

// SetTags sets the "tags" field.
func (tcchc *TrustCenterComplianceHistoryCreate) SetTags(s []string) *TrustCenterComplianceHistoryCreate {
	tcchc.mutation.SetTags(s)
	return tcchc
}

// SetID sets the "id" field.
func (tcchc *TrustCenterComplianceHistoryCreate) SetID(s string) *TrustCenterComplianceHistoryCreate {
	tcchc.mutation.SetID(s)
	return tcchc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tcchc *TrustCenterComplianceHistoryCreate) SetNillableID(s *string) *TrustCenterComplianceHistoryCreate {
	if s != nil {
		tcchc.SetID(*s)
	}
	return tcchc
}

// Mutation returns the TrustCenterComplianceHistoryMutation object of the builder.
func (tcchc *TrustCenterComplianceHistoryCreate) Mutation() *TrustCenterComplianceHistoryMutation {
	return tcchc.mutation
}

// Save creates the TrustCenterComplianceHistory in the database.
func (tcchc *TrustCenterComplianceHistoryCreate) Save(ctx context.Context) (*TrustCenterComplianceHistory, error) {
	if err := tcchc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tcchc.sqlSave, tcchc.mutation, tcchc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcchc *TrustCenterComplianceHistoryCreate) SaveX(ctx context.Context) *TrustCenterComplianceHistory {
	v, err := tcchc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcchc *TrustCenterComplianceHistoryCreate) Exec(ctx context.Context) error {
	_, err := tcchc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcchc *TrustCenterComplianceHistoryCreate) ExecX(ctx context.Context) {
	if err := tcchc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcchc *TrustCenterComplianceHistoryCreate) defaults() error {
	if _, ok := tcchc.mutation.HistoryTime(); !ok {
		if trustcentercompliancehistory.DefaultHistoryTime == nil {
			return fmt.Errorf("generated: uninitialized trustcentercompliancehistory.DefaultHistoryTime (forgotten import generated/runtime?)")
		}
		v := trustcentercompliancehistory.DefaultHistoryTime()
		tcchc.mutation.SetHistoryTime(v)
	}
	if _, ok := tcchc.mutation.CreatedAt(); !ok {
		if trustcentercompliancehistory.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentercompliancehistory.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentercompliancehistory.DefaultCreatedAt()
		tcchc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcchc.mutation.UpdatedAt(); !ok {
		if trustcentercompliancehistory.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentercompliancehistory.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentercompliancehistory.DefaultUpdatedAt()
		tcchc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcchc.mutation.Tags(); !ok {
		v := trustcentercompliancehistory.DefaultTags
		tcchc.mutation.SetTags(v)
	}
	if _, ok := tcchc.mutation.ID(); !ok {
		if trustcentercompliancehistory.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized trustcentercompliancehistory.DefaultID (forgotten import generated/runtime?)")
		}
		v := trustcentercompliancehistory.DefaultID()
		tcchc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tcchc *TrustCenterComplianceHistoryCreate) check() error {
	if _, ok := tcchc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "TrustCenterComplianceHistory.history_time"`)}
	}
	if _, ok := tcchc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "TrustCenterComplianceHistory.operation"`)}
	}
	if v, ok := tcchc.mutation.Operation(); ok {
		if err := trustcentercompliancehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "TrustCenterComplianceHistory.operation": %w`, err)}
		}
	}
	return nil
}

func (tcchc *TrustCenterComplianceHistoryCreate) sqlSave(ctx context.Context) (*TrustCenterComplianceHistory, error) {
	if err := tcchc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcchc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcchc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TrustCenterComplianceHistory.ID type: %T", _spec.ID.Value)
		}
	}
	tcchc.mutation.id = &_node.ID
	tcchc.mutation.done = true
	return _node, nil
}

func (tcchc *TrustCenterComplianceHistoryCreate) createSpec() (*TrustCenterComplianceHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &TrustCenterComplianceHistory{config: tcchc.config}
		_spec = sqlgraph.NewCreateSpec(trustcentercompliancehistory.Table, sqlgraph.NewFieldSpec(trustcentercompliancehistory.FieldID, field.TypeString))
	)
	_spec.Schema = tcchc.schemaConfig.TrustCenterComplianceHistory
	if id, ok := tcchc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcchc.mutation.HistoryTime(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := tcchc.mutation.Ref(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := tcchc.mutation.Operation(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := tcchc.mutation.CreatedAt(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tcchc.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tcchc.mutation.CreatedBy(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tcchc.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tcchc.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tcchc.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := tcchc.mutation.Tags(); ok {
		_spec.SetField(trustcentercompliancehistory.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	return _node, _spec
}

// TrustCenterComplianceHistoryCreateBulk is the builder for creating many TrustCenterComplianceHistory entities in bulk.
type TrustCenterComplianceHistoryCreateBulk struct {
	config
	err      error
	builders []*TrustCenterComplianceHistoryCreate
}

// Save creates the TrustCenterComplianceHistory entities in the database.
func (tcchcb *TrustCenterComplianceHistoryCreateBulk) Save(ctx context.Context) ([]*TrustCenterComplianceHistory, error) {
	if tcchcb.err != nil {
		return nil, tcchcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcchcb.builders))
	nodes := make([]*TrustCenterComplianceHistory, len(tcchcb.builders))
	mutators := make([]Mutator, len(tcchcb.builders))
	for i := range tcchcb.builders {
		func(i int, root context.Context) {
			builder := tcchcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TrustCenterComplianceHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcchcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcchcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcchcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcchcb *TrustCenterComplianceHistoryCreateBulk) SaveX(ctx context.Context) []*TrustCenterComplianceHistory {
	v, err := tcchcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcchcb *TrustCenterComplianceHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := tcchcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcchcb *TrustCenterComplianceHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := tcchcb.Exec(ctx); err != nil {
		panic(err)
	}
}
