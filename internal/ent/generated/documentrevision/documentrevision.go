// Code generated by ent, DO NOT EDIT.

package documentrevision

import (
	"fmt"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/core/pkg/enums"
)

const (
	// Label holds the string label denoting the documentrevision type in the database.
	Label = "document_revision"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// FieldRevision holds the string denoting the revision field in the database.
	FieldRevision = "revision"
	// FieldDetails holds the string denoting the details field in the database.
	FieldDetails = "details"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldApprovalDate holds the string denoting the approval_date field in the database.
	FieldApprovalDate = "approval_date"
	// FieldSubmittedByID holds the string denoting the submitted_by_id field in the database.
	FieldSubmittedByID = "submitted_by_id"
	// FieldApprovedByID holds the string denoting the approved_by_id field in the database.
	FieldApprovedByID = "approved_by_id"
	// FieldInternalPolicyID holds the string denoting the internal_policy_id field in the database.
	FieldInternalPolicyID = "internal_policy_id"
	// FieldProcedureID holds the string denoting the procedure_id field in the database.
	FieldProcedureID = "procedure_id"
	// FieldActionPlanID holds the string denoting the action_plan_id field in the database.
	FieldActionPlanID = "action_plan_id"
	// EdgeSubmittedBy holds the string denoting the submitted_by edge name in mutations.
	EdgeSubmittedBy = "submitted_by"
	// EdgeApprovedBy holds the string denoting the approved_by edge name in mutations.
	EdgeApprovedBy = "approved_by"
	// EdgeInternalPolicy holds the string denoting the internal_policy edge name in mutations.
	EdgeInternalPolicy = "internal_policy"
	// EdgeProcedure holds the string denoting the procedure edge name in mutations.
	EdgeProcedure = "procedure"
	// EdgeActionPlan holds the string denoting the action_plan edge name in mutations.
	EdgeActionPlan = "action_plan"
	// Table holds the table name of the documentrevision in the database.
	Table = "document_revisions"
	// SubmittedByTable is the table that holds the submitted_by relation/edge.
	SubmittedByTable = "document_revisions"
	// SubmittedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SubmittedByInverseTable = "users"
	// SubmittedByColumn is the table column denoting the submitted_by relation/edge.
	SubmittedByColumn = "submitted_by_id"
	// ApprovedByTable is the table that holds the approved_by relation/edge.
	ApprovedByTable = "document_revisions"
	// ApprovedByInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ApprovedByInverseTable = "users"
	// ApprovedByColumn is the table column denoting the approved_by relation/edge.
	ApprovedByColumn = "approved_by_id"
	// InternalPolicyTable is the table that holds the internal_policy relation/edge.
	InternalPolicyTable = "document_revisions"
	// InternalPolicyInverseTable is the table name for the InternalPolicy entity.
	// It exists in this package in order to avoid circular dependency with the "internalpolicy" package.
	InternalPolicyInverseTable = "internal_policies"
	// InternalPolicyColumn is the table column denoting the internal_policy relation/edge.
	InternalPolicyColumn = "internal_policy_id"
	// ProcedureTable is the table that holds the procedure relation/edge.
	ProcedureTable = "document_revisions"
	// ProcedureInverseTable is the table name for the Procedure entity.
	// It exists in this package in order to avoid circular dependency with the "procedure" package.
	ProcedureInverseTable = "procedures"
	// ProcedureColumn is the table column denoting the procedure relation/edge.
	ProcedureColumn = "procedure_id"
	// ActionPlanTable is the table that holds the action_plan relation/edge.
	ActionPlanTable = "document_revisions"
	// ActionPlanInverseTable is the table name for the ActionPlan entity.
	// It exists in this package in order to avoid circular dependency with the "actionplan" package.
	ActionPlanInverseTable = "action_plans"
	// ActionPlanColumn is the table column denoting the action_plan relation/edge.
	ActionPlanColumn = "action_plan_id"
)

// Columns holds all SQL columns for documentrevision fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDeletedAt,
	FieldDeletedBy,
	FieldTags,
	FieldRevision,
	FieldDetails,
	FieldStatus,
	FieldApprovalDate,
	FieldSubmittedByID,
	FieldApprovedByID,
	FieldInternalPolicyID,
	FieldProcedureID,
	FieldActionPlanID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "document_revisions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"action_plan_document_revisions",
	"internal_policy_document_revisions",
	"procedure_document_revisions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/theopenlane/core/internal/ent/generated/runtime"
var (
	Hooks        [4]ent.Hook
	Interceptors [1]ent.Interceptor
	Policy       ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultRevision holds the default value on creation for the "revision" field.
	DefaultRevision string
	// RevisionValidator is a validator for the "revision" field. It is called by the builders before save.
	RevisionValidator func(string) error
	// SubmittedByIDValidator is a validator for the "submitted_by_id" field. It is called by the builders before save.
	SubmittedByIDValidator func(string) error
	// ApprovedByIDValidator is a validator for the "approved_by_id" field. It is called by the builders before save.
	ApprovedByIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

const DefaultStatus enums.ApprovalStatus = "PENDING"

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s enums.ApprovalStatus) error {
	switch s.String() {
	case "APPROVED", "PENDING", "REJECTED":
		return nil
	default:
		return fmt.Errorf("documentrevision: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the DocumentRevision queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByRevision orders the results by the revision field.
func ByRevision(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevision, opts...).ToFunc()
}

// ByDetails orders the results by the details field.
func ByDetails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDetails, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByApprovalDate orders the results by the approval_date field.
func ByApprovalDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovalDate, opts...).ToFunc()
}

// BySubmittedByID orders the results by the submitted_by_id field.
func BySubmittedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubmittedByID, opts...).ToFunc()
}

// ByApprovedByID orders the results by the approved_by_id field.
func ByApprovedByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApprovedByID, opts...).ToFunc()
}

// ByInternalPolicyID orders the results by the internal_policy_id field.
func ByInternalPolicyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInternalPolicyID, opts...).ToFunc()
}

// ByProcedureID orders the results by the procedure_id field.
func ByProcedureID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProcedureID, opts...).ToFunc()
}

// ByActionPlanID orders the results by the action_plan_id field.
func ByActionPlanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActionPlanID, opts...).ToFunc()
}

// BySubmittedByField orders the results by submitted_by field.
func BySubmittedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmittedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByApprovedByField orders the results by approved_by field.
func ByApprovedByField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApprovedByStep(), sql.OrderByField(field, opts...))
	}
}

// ByInternalPolicyField orders the results by internal_policy field.
func ByInternalPolicyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInternalPolicyStep(), sql.OrderByField(field, opts...))
	}
}

// ByProcedureField orders the results by procedure field.
func ByProcedureField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProcedureStep(), sql.OrderByField(field, opts...))
	}
}

// ByActionPlanField orders the results by action_plan field.
func ByActionPlanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newActionPlanStep(), sql.OrderByField(field, opts...))
	}
}
func newSubmittedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmittedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SubmittedByTable, SubmittedByColumn),
	)
}
func newApprovedByStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApprovedByInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ApprovedByTable, ApprovedByColumn),
	)
}
func newInternalPolicyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InternalPolicyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, InternalPolicyTable, InternalPolicyColumn),
	)
}
func newProcedureStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProcedureInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProcedureTable, ProcedureColumn),
	)
}
func newActionPlanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ActionPlanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ActionPlanTable, ActionPlanColumn),
	)
}

var (
	// enums.ApprovalStatus must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.ApprovalStatus)(nil)
	// enums.ApprovalStatus must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.ApprovalStatus)(nil)
)
