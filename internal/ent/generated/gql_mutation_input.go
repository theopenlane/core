// Code generated by ent, DO NOT EDIT.

package generated

import (
	"time"

	"github.com/theopenlane/core/internal/ent/customtypes"
	"github.com/theopenlane/core/pkg/enums"
)

// CreateAPITokenInput represents a mutation input for creating apitokens.
type CreateAPITokenInput struct {
	Tags        []string
	Name        string
	ExpiresAt   *time.Time
	Description *string
	Scopes      []string
	LastUsedAt  *time.Time
	OwnerID     *string
}

// Mutate applies the CreateAPITokenInput on the APITokenMutation builder.
func (i *CreateAPITokenInput) Mutate(m *APITokenMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.ExpiresAt; v != nil {
		m.SetExpiresAt(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	if v := i.LastUsedAt; v != nil {
		m.SetLastUsedAt(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateAPITokenInput on the APITokenCreate builder.
func (c *APITokenCreate) SetInput(i CreateAPITokenInput) *APITokenCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAPITokenInput represents a mutation input for updating apitokens.
type UpdateAPITokenInput struct {
	ClearTags        bool
	Tags             []string
	AppendTags       []string
	Name             *string
	ClearDescription bool
	Description      *string
	ClearScopes      bool
	Scopes           []string
	AppendScopes     []string
	ClearLastUsedAt  bool
	LastUsedAt       *time.Time
	ClearOwner       bool
	OwnerID          *string
}

// Mutate applies the UpdateAPITokenInput on the APITokenMutation builder.
func (i *UpdateAPITokenInput) Mutate(m *APITokenMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearScopes {
		m.ClearScopes()
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	if i.AppendScopes != nil {
		m.AppendScopes(i.Scopes)
	}
	if i.ClearLastUsedAt {
		m.ClearLastUsedAt()
	}
	if v := i.LastUsedAt; v != nil {
		m.SetLastUsedAt(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateAPITokenInput on the APITokenUpdate builder.
func (c *APITokenUpdate) SetInput(i UpdateAPITokenInput) *APITokenUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAPITokenInput on the APITokenUpdateOne builder.
func (c *APITokenUpdateOne) SetInput(i UpdateAPITokenInput) *APITokenUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateActionPlanInput represents a mutation input for creating actionplans.
type CreateActionPlanInput struct {
	Tags        []string
	Name        string
	Description *string
	Status      *string
	DueDate     *time.Time
	Priority    *string
	Source      *string
	Details     map[string]interface{}
	StandardIDs []string
	RiskIDs     []string
	ControlIDs  []string
	UserIDs     []string
	ProgramIDs  []string
}

// Mutate applies the CreateActionPlanInput on the ActionPlanMutation builder.
func (i *CreateActionPlanInput) Mutate(m *ActionPlanMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if v := i.StandardIDs; len(v) > 0 {
		m.AddStandardIDs(v...)
	}
	if v := i.RiskIDs; len(v) > 0 {
		m.AddRiskIDs(v...)
	}
	if v := i.ControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateActionPlanInput on the ActionPlanCreate builder.
func (c *ActionPlanCreate) SetInput(i CreateActionPlanInput) *ActionPlanCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateActionPlanInput represents a mutation input for updating actionplans.
type UpdateActionPlanInput struct {
	ClearTags         bool
	Tags              []string
	AppendTags        []string
	Name              *string
	ClearDescription  bool
	Description       *string
	ClearStatus       bool
	Status            *string
	ClearDueDate      bool
	DueDate           *time.Time
	ClearPriority     bool
	Priority          *string
	ClearSource       bool
	Source            *string
	ClearDetails      bool
	Details           map[string]interface{}
	ClearStandard     bool
	AddStandardIDs    []string
	RemoveStandardIDs []string
	ClearRisk         bool
	AddRiskIDs        []string
	RemoveRiskIDs     []string
	ClearControl      bool
	AddControlIDs     []string
	RemoveControlIDs  []string
	ClearUser         bool
	AddUserIDs        []string
	RemoveUserIDs     []string
	ClearProgram      bool
	AddProgramIDs     []string
	RemoveProgramIDs  []string
}

// Mutate applies the UpdateActionPlanInput on the ActionPlanMutation builder.
func (i *UpdateActionPlanInput) Mutate(m *ActionPlanMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearDueDate {
		m.ClearDueDate()
	}
	if v := i.DueDate; v != nil {
		m.SetDueDate(*v)
	}
	if i.ClearPriority {
		m.ClearPriority()
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if i.ClearSource {
		m.ClearSource()
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	if i.ClearDetails {
		m.ClearDetails()
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if i.ClearStandard {
		m.ClearStandard()
	}
	if v := i.AddStandardIDs; len(v) > 0 {
		m.AddStandardIDs(v...)
	}
	if v := i.RemoveStandardIDs; len(v) > 0 {
		m.RemoveStandardIDs(v...)
	}
	if i.ClearRisk {
		m.ClearRisk()
	}
	if v := i.AddRiskIDs; len(v) > 0 {
		m.AddRiskIDs(v...)
	}
	if v := i.RemoveRiskIDs; len(v) > 0 {
		m.RemoveRiskIDs(v...)
	}
	if i.ClearControl {
		m.ClearControl()
	}
	if v := i.AddControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.RemoveControlIDs; len(v) > 0 {
		m.RemoveControlIDs(v...)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearProgram {
		m.ClearProgram()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateActionPlanInput on the ActionPlanUpdate builder.
func (c *ActionPlanUpdate) SetInput(i UpdateActionPlanInput) *ActionPlanUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateActionPlanInput on the ActionPlanUpdateOne builder.
func (c *ActionPlanUpdateOne) SetInput(i UpdateActionPlanInput) *ActionPlanUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateContactInput represents a mutation input for creating contacts.
type CreateContactInput struct {
	Tags        []string
	FullName    string
	Title       *string
	Company     *string
	Email       *string
	PhoneNumber *string
	Address     *string
	Status      *enums.UserStatus
	OwnerID     *string
	EntityIDs   []string
	FileIDs     []string
}

// Mutate applies the CreateContactInput on the ContactMutation builder.
func (i *CreateContactInput) Mutate(m *ContactMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetFullName(i.FullName)
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Company; v != nil {
		m.SetCompany(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.EntityIDs; len(v) > 0 {
		m.AddEntityIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
}

// SetInput applies the change-set in the CreateContactInput on the ContactCreate builder.
func (c *ContactCreate) SetInput(i CreateContactInput) *ContactCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateContactInput represents a mutation input for updating contacts.
type UpdateContactInput struct {
	ClearTags        bool
	Tags             []string
	AppendTags       []string
	FullName         *string
	ClearTitle       bool
	Title            *string
	ClearCompany     bool
	Company          *string
	ClearEmail       bool
	Email            *string
	ClearPhoneNumber bool
	PhoneNumber      *string
	ClearAddress     bool
	Address          *string
	Status           *enums.UserStatus
	ClearOwner       bool
	OwnerID          *string
	ClearEntities    bool
	AddEntityIDs     []string
	RemoveEntityIDs  []string
	ClearFiles       bool
	AddFileIDs       []string
	RemoveFileIDs    []string
}

// Mutate applies the UpdateContactInput on the ContactMutation builder.
func (i *UpdateContactInput) Mutate(m *ContactMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.FullName; v != nil {
		m.SetFullName(*v)
	}
	if i.ClearTitle {
		m.ClearTitle()
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.Company; v != nil {
		m.SetCompany(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearPhoneNumber {
		m.ClearPhoneNumber()
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearEntities {
		m.ClearEntities()
	}
	if v := i.AddEntityIDs; len(v) > 0 {
		m.AddEntityIDs(v...)
	}
	if v := i.RemoveEntityIDs; len(v) > 0 {
		m.RemoveEntityIDs(v...)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateContactInput on the ContactUpdate builder.
func (c *ContactUpdate) SetInput(i UpdateContactInput) *ContactUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateContactInput on the ContactUpdateOne builder.
func (c *ContactUpdateOne) SetInput(i UpdateContactInput) *ContactUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateControlInput represents a mutation input for creating controls.
type CreateControlInput struct {
	Tags                []string
	Name                string
	Description         *string
	Status              *string
	ControlType         *string
	Version             *string
	ControlNumber       *string
	Family              *string
	Class               *string
	Source              *string
	Satisfies           *string
	MappedFrameworks    *string
	Details             map[string]interface{}
	ProcedureIDs        []string
	SubcontrolIDs       []string
	ControlobjectiveIDs []string
	StandardIDs         []string
	NarrativeIDs        []string
	RiskIDs             []string
	ActionplanIDs       []string
	TaskIDs             []string
	ProgramIDs          []string
}

// Mutate applies the CreateControlInput on the ControlMutation builder.
func (i *CreateControlInput) Mutate(m *ControlMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.ControlType; v != nil {
		m.SetControlType(*v)
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if v := i.ControlNumber; v != nil {
		m.SetControlNumber(*v)
	}
	if v := i.Family; v != nil {
		m.SetFamily(*v)
	}
	if v := i.Class; v != nil {
		m.SetClass(*v)
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	if v := i.Satisfies; v != nil {
		m.SetSatisfies(*v)
	}
	if v := i.MappedFrameworks; v != nil {
		m.SetMappedFrameworks(*v)
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if v := i.ProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.SubcontrolIDs; len(v) > 0 {
		m.AddSubcontrolIDs(v...)
	}
	if v := i.ControlobjectiveIDs; len(v) > 0 {
		m.AddControlobjectiveIDs(v...)
	}
	if v := i.StandardIDs; len(v) > 0 {
		m.AddStandardIDs(v...)
	}
	if v := i.NarrativeIDs; len(v) > 0 {
		m.AddNarrativeIDs(v...)
	}
	if v := i.RiskIDs; len(v) > 0 {
		m.AddRiskIDs(v...)
	}
	if v := i.ActionplanIDs; len(v) > 0 {
		m.AddActionplanIDs(v...)
	}
	if v := i.TaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateControlInput on the ControlCreate builder.
func (c *ControlCreate) SetInput(i CreateControlInput) *ControlCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateControlInput represents a mutation input for updating controls.
type UpdateControlInput struct {
	ClearTags                 bool
	Tags                      []string
	AppendTags                []string
	Name                      *string
	ClearDescription          bool
	Description               *string
	ClearStatus               bool
	Status                    *string
	ClearControlType          bool
	ControlType               *string
	ClearVersion              bool
	Version                   *string
	ClearControlNumber        bool
	ControlNumber             *string
	ClearFamily               bool
	Family                    *string
	ClearClass                bool
	Class                     *string
	ClearSource               bool
	Source                    *string
	ClearSatisfies            bool
	Satisfies                 *string
	ClearMappedFrameworks     bool
	MappedFrameworks          *string
	ClearDetails              bool
	Details                   map[string]interface{}
	ClearProcedures           bool
	AddProcedureIDs           []string
	RemoveProcedureIDs        []string
	ClearSubcontrols          bool
	AddSubcontrolIDs          []string
	RemoveSubcontrolIDs       []string
	ClearControlobjectives    bool
	AddControlobjectiveIDs    []string
	RemoveControlobjectiveIDs []string
	ClearStandard             bool
	AddStandardIDs            []string
	RemoveStandardIDs         []string
	ClearNarratives           bool
	AddNarrativeIDs           []string
	RemoveNarrativeIDs        []string
	ClearRisks                bool
	AddRiskIDs                []string
	RemoveRiskIDs             []string
	ClearActionplans          bool
	AddActionplanIDs          []string
	RemoveActionplanIDs       []string
	ClearTasks                bool
	AddTaskIDs                []string
	RemoveTaskIDs             []string
	ClearPrograms             bool
	AddProgramIDs             []string
	RemoveProgramIDs          []string
}

// Mutate applies the UpdateControlInput on the ControlMutation builder.
func (i *UpdateControlInput) Mutate(m *ControlMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearControlType {
		m.ClearControlType()
	}
	if v := i.ControlType; v != nil {
		m.SetControlType(*v)
	}
	if i.ClearVersion {
		m.ClearVersion()
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if i.ClearControlNumber {
		m.ClearControlNumber()
	}
	if v := i.ControlNumber; v != nil {
		m.SetControlNumber(*v)
	}
	if i.ClearFamily {
		m.ClearFamily()
	}
	if v := i.Family; v != nil {
		m.SetFamily(*v)
	}
	if i.ClearClass {
		m.ClearClass()
	}
	if v := i.Class; v != nil {
		m.SetClass(*v)
	}
	if i.ClearSource {
		m.ClearSource()
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	if i.ClearSatisfies {
		m.ClearSatisfies()
	}
	if v := i.Satisfies; v != nil {
		m.SetSatisfies(*v)
	}
	if i.ClearMappedFrameworks {
		m.ClearMappedFrameworks()
	}
	if v := i.MappedFrameworks; v != nil {
		m.SetMappedFrameworks(*v)
	}
	if i.ClearDetails {
		m.ClearDetails()
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if i.ClearProcedures {
		m.ClearProcedures()
	}
	if v := i.AddProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.RemoveProcedureIDs; len(v) > 0 {
		m.RemoveProcedureIDs(v...)
	}
	if i.ClearSubcontrols {
		m.ClearSubcontrols()
	}
	if v := i.AddSubcontrolIDs; len(v) > 0 {
		m.AddSubcontrolIDs(v...)
	}
	if v := i.RemoveSubcontrolIDs; len(v) > 0 {
		m.RemoveSubcontrolIDs(v...)
	}
	if i.ClearControlobjectives {
		m.ClearControlobjectives()
	}
	if v := i.AddControlobjectiveIDs; len(v) > 0 {
		m.AddControlobjectiveIDs(v...)
	}
	if v := i.RemoveControlobjectiveIDs; len(v) > 0 {
		m.RemoveControlobjectiveIDs(v...)
	}
	if i.ClearStandard {
		m.ClearStandard()
	}
	if v := i.AddStandardIDs; len(v) > 0 {
		m.AddStandardIDs(v...)
	}
	if v := i.RemoveStandardIDs; len(v) > 0 {
		m.RemoveStandardIDs(v...)
	}
	if i.ClearNarratives {
		m.ClearNarratives()
	}
	if v := i.AddNarrativeIDs; len(v) > 0 {
		m.AddNarrativeIDs(v...)
	}
	if v := i.RemoveNarrativeIDs; len(v) > 0 {
		m.RemoveNarrativeIDs(v...)
	}
	if i.ClearRisks {
		m.ClearRisks()
	}
	if v := i.AddRiskIDs; len(v) > 0 {
		m.AddRiskIDs(v...)
	}
	if v := i.RemoveRiskIDs; len(v) > 0 {
		m.RemoveRiskIDs(v...)
	}
	if i.ClearActionplans {
		m.ClearActionplans()
	}
	if v := i.AddActionplanIDs; len(v) > 0 {
		m.AddActionplanIDs(v...)
	}
	if v := i.RemoveActionplanIDs; len(v) > 0 {
		m.RemoveActionplanIDs(v...)
	}
	if i.ClearTasks {
		m.ClearTasks()
	}
	if v := i.AddTaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.RemoveTaskIDs; len(v) > 0 {
		m.RemoveTaskIDs(v...)
	}
	if i.ClearPrograms {
		m.ClearPrograms()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateControlInput on the ControlUpdate builder.
func (c *ControlUpdate) SetInput(i UpdateControlInput) *ControlUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateControlInput on the ControlUpdateOne builder.
func (c *ControlUpdateOne) SetInput(i UpdateControlInput) *ControlUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateControlObjectiveInput represents a mutation input for creating controlobjectives.
type CreateControlObjectiveInput struct {
	Tags                 []string
	Name                 string
	Description          *string
	Status               *string
	ControlObjectiveType *string
	Version              *string
	ControlNumber        *string
	Family               *string
	Class                *string
	Source               *string
	MappedFrameworks     *string
	Details              map[string]interface{}
	PolicyIDs            []string
	ControlIDs           []string
	ProcedureIDs         []string
	RiskIDs              []string
	SubcontrolIDs        []string
	StandardIDs          []string
	NarrativeIDs         []string
	TaskIDs              []string
	ProgramIDs           []string
}

// Mutate applies the CreateControlObjectiveInput on the ControlObjectiveMutation builder.
func (i *CreateControlObjectiveInput) Mutate(m *ControlObjectiveMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.ControlObjectiveType; v != nil {
		m.SetControlObjectiveType(*v)
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if v := i.ControlNumber; v != nil {
		m.SetControlNumber(*v)
	}
	if v := i.Family; v != nil {
		m.SetFamily(*v)
	}
	if v := i.Class; v != nil {
		m.SetClass(*v)
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	if v := i.MappedFrameworks; v != nil {
		m.SetMappedFrameworks(*v)
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if v := i.PolicyIDs; len(v) > 0 {
		m.AddPolicyIDs(v...)
	}
	if v := i.ControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.ProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.RiskIDs; len(v) > 0 {
		m.AddRiskIDs(v...)
	}
	if v := i.SubcontrolIDs; len(v) > 0 {
		m.AddSubcontrolIDs(v...)
	}
	if v := i.StandardIDs; len(v) > 0 {
		m.AddStandardIDs(v...)
	}
	if v := i.NarrativeIDs; len(v) > 0 {
		m.AddNarrativeIDs(v...)
	}
	if v := i.TaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateControlObjectiveInput on the ControlObjectiveCreate builder.
func (c *ControlObjectiveCreate) SetInput(i CreateControlObjectiveInput) *ControlObjectiveCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateControlObjectiveInput represents a mutation input for updating controlobjectives.
type UpdateControlObjectiveInput struct {
	ClearTags                 bool
	Tags                      []string
	AppendTags                []string
	Name                      *string
	ClearDescription          bool
	Description               *string
	ClearStatus               bool
	Status                    *string
	ClearControlObjectiveType bool
	ControlObjectiveType      *string
	ClearVersion              bool
	Version                   *string
	ClearControlNumber        bool
	ControlNumber             *string
	ClearFamily               bool
	Family                    *string
	ClearClass                bool
	Class                     *string
	ClearSource               bool
	Source                    *string
	ClearMappedFrameworks     bool
	MappedFrameworks          *string
	ClearDetails              bool
	Details                   map[string]interface{}
	ClearPolicy               bool
	AddPolicyIDs              []string
	RemovePolicyIDs           []string
	ClearControls             bool
	AddControlIDs             []string
	RemoveControlIDs          []string
	ClearProcedures           bool
	AddProcedureIDs           []string
	RemoveProcedureIDs        []string
	ClearRisks                bool
	AddRiskIDs                []string
	RemoveRiskIDs             []string
	ClearSubcontrols          bool
	AddSubcontrolIDs          []string
	RemoveSubcontrolIDs       []string
	ClearStandard             bool
	AddStandardIDs            []string
	RemoveStandardIDs         []string
	ClearNarratives           bool
	AddNarrativeIDs           []string
	RemoveNarrativeIDs        []string
	ClearTasks                bool
	AddTaskIDs                []string
	RemoveTaskIDs             []string
	ClearPrograms             bool
	AddProgramIDs             []string
	RemoveProgramIDs          []string
}

// Mutate applies the UpdateControlObjectiveInput on the ControlObjectiveMutation builder.
func (i *UpdateControlObjectiveInput) Mutate(m *ControlObjectiveMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearControlObjectiveType {
		m.ClearControlObjectiveType()
	}
	if v := i.ControlObjectiveType; v != nil {
		m.SetControlObjectiveType(*v)
	}
	if i.ClearVersion {
		m.ClearVersion()
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if i.ClearControlNumber {
		m.ClearControlNumber()
	}
	if v := i.ControlNumber; v != nil {
		m.SetControlNumber(*v)
	}
	if i.ClearFamily {
		m.ClearFamily()
	}
	if v := i.Family; v != nil {
		m.SetFamily(*v)
	}
	if i.ClearClass {
		m.ClearClass()
	}
	if v := i.Class; v != nil {
		m.SetClass(*v)
	}
	if i.ClearSource {
		m.ClearSource()
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	if i.ClearMappedFrameworks {
		m.ClearMappedFrameworks()
	}
	if v := i.MappedFrameworks; v != nil {
		m.SetMappedFrameworks(*v)
	}
	if i.ClearDetails {
		m.ClearDetails()
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if i.ClearPolicy {
		m.ClearPolicy()
	}
	if v := i.AddPolicyIDs; len(v) > 0 {
		m.AddPolicyIDs(v...)
	}
	if v := i.RemovePolicyIDs; len(v) > 0 {
		m.RemovePolicyIDs(v...)
	}
	if i.ClearControls {
		m.ClearControls()
	}
	if v := i.AddControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.RemoveControlIDs; len(v) > 0 {
		m.RemoveControlIDs(v...)
	}
	if i.ClearProcedures {
		m.ClearProcedures()
	}
	if v := i.AddProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.RemoveProcedureIDs; len(v) > 0 {
		m.RemoveProcedureIDs(v...)
	}
	if i.ClearRisks {
		m.ClearRisks()
	}
	if v := i.AddRiskIDs; len(v) > 0 {
		m.AddRiskIDs(v...)
	}
	if v := i.RemoveRiskIDs; len(v) > 0 {
		m.RemoveRiskIDs(v...)
	}
	if i.ClearSubcontrols {
		m.ClearSubcontrols()
	}
	if v := i.AddSubcontrolIDs; len(v) > 0 {
		m.AddSubcontrolIDs(v...)
	}
	if v := i.RemoveSubcontrolIDs; len(v) > 0 {
		m.RemoveSubcontrolIDs(v...)
	}
	if i.ClearStandard {
		m.ClearStandard()
	}
	if v := i.AddStandardIDs; len(v) > 0 {
		m.AddStandardIDs(v...)
	}
	if v := i.RemoveStandardIDs; len(v) > 0 {
		m.RemoveStandardIDs(v...)
	}
	if i.ClearNarratives {
		m.ClearNarratives()
	}
	if v := i.AddNarrativeIDs; len(v) > 0 {
		m.AddNarrativeIDs(v...)
	}
	if v := i.RemoveNarrativeIDs; len(v) > 0 {
		m.RemoveNarrativeIDs(v...)
	}
	if i.ClearTasks {
		m.ClearTasks()
	}
	if v := i.AddTaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.RemoveTaskIDs; len(v) > 0 {
		m.RemoveTaskIDs(v...)
	}
	if i.ClearPrograms {
		m.ClearPrograms()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateControlObjectiveInput on the ControlObjectiveUpdate builder.
func (c *ControlObjectiveUpdate) SetInput(i UpdateControlObjectiveInput) *ControlObjectiveUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateControlObjectiveInput on the ControlObjectiveUpdateOne builder.
func (c *ControlObjectiveUpdateOne) SetInput(i UpdateControlObjectiveInput) *ControlObjectiveUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateDocumentDataInput represents a mutation input for creating documentdataslice.
type CreateDocumentDataInput struct {
	Tags       []string
	Data       customtypes.JSONObject
	OwnerID    *string
	TemplateID string
	EntityIDs  []string
	FileIDs    []string
}

// Mutate applies the CreateDocumentDataInput on the DocumentDataMutation builder.
func (i *CreateDocumentDataInput) Mutate(m *DocumentDataMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.Data; v != nil {
		m.SetData(v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	m.SetTemplateID(i.TemplateID)
	if v := i.EntityIDs; len(v) > 0 {
		m.AddEntityIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
}

// SetInput applies the change-set in the CreateDocumentDataInput on the DocumentDataCreate builder.
func (c *DocumentDataCreate) SetInput(i CreateDocumentDataInput) *DocumentDataCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDocumentDataInput represents a mutation input for updating documentdataslice.
type UpdateDocumentDataInput struct {
	ClearTags       bool
	Tags            []string
	AppendTags      []string
	Data            customtypes.JSONObject
	ClearOwner      bool
	OwnerID         *string
	TemplateID      *string
	ClearEntity     bool
	AddEntityIDs    []string
	RemoveEntityIDs []string
	ClearFiles      bool
	AddFileIDs      []string
	RemoveFileIDs   []string
}

// Mutate applies the UpdateDocumentDataInput on the DocumentDataMutation builder.
func (i *UpdateDocumentDataInput) Mutate(m *DocumentDataMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Data; v != nil {
		m.SetData(v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.TemplateID; v != nil {
		m.SetTemplateID(*v)
	}
	if i.ClearEntity {
		m.ClearEntity()
	}
	if v := i.AddEntityIDs; len(v) > 0 {
		m.AddEntityIDs(v...)
	}
	if v := i.RemoveEntityIDs; len(v) > 0 {
		m.RemoveEntityIDs(v...)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateDocumentDataInput on the DocumentDataUpdate builder.
func (c *DocumentDataUpdate) SetInput(i UpdateDocumentDataInput) *DocumentDataUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDocumentDataInput on the DocumentDataUpdateOne builder.
func (c *DocumentDataUpdateOne) SetInput(i UpdateDocumentDataInput) *DocumentDataUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateEntitlementInput represents a mutation input for creating entitlements.
type CreateEntitlementInput struct {
	Tags                   []string
	ExternalCustomerID     *string
	ExternalSubscriptionID *string
	ExpiresAt              *time.Time
	Cancelled              *bool
	OwnerID                *string
	PlanID                 string
	OrganizationID         string
	EventIDs               []string
}

// Mutate applies the CreateEntitlementInput on the EntitlementMutation builder.
func (i *CreateEntitlementInput) Mutate(m *EntitlementMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.ExternalCustomerID; v != nil {
		m.SetExternalCustomerID(*v)
	}
	if v := i.ExternalSubscriptionID; v != nil {
		m.SetExternalSubscriptionID(*v)
	}
	if v := i.ExpiresAt; v != nil {
		m.SetExpiresAt(*v)
	}
	if v := i.Cancelled; v != nil {
		m.SetCancelled(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	m.SetPlanID(i.PlanID)
	m.SetOrganizationID(i.OrganizationID)
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
}

// SetInput applies the change-set in the CreateEntitlementInput on the EntitlementCreate builder.
func (c *EntitlementCreate) SetInput(i CreateEntitlementInput) *EntitlementCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEntitlementInput represents a mutation input for updating entitlements.
type UpdateEntitlementInput struct {
	ClearTags                   bool
	Tags                        []string
	AppendTags                  []string
	ClearExternalCustomerID     bool
	ExternalCustomerID          *string
	ClearExternalSubscriptionID bool
	ExternalSubscriptionID      *string
	ClearExpiresAt              bool
	ExpiresAt                   *time.Time
	Cancelled                   *bool
	ClearOwner                  bool
	OwnerID                     *string
	ClearEvents                 bool
	AddEventIDs                 []string
	RemoveEventIDs              []string
}

// Mutate applies the UpdateEntitlementInput on the EntitlementMutation builder.
func (i *UpdateEntitlementInput) Mutate(m *EntitlementMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if i.ClearExternalCustomerID {
		m.ClearExternalCustomerID()
	}
	if v := i.ExternalCustomerID; v != nil {
		m.SetExternalCustomerID(*v)
	}
	if i.ClearExternalSubscriptionID {
		m.ClearExternalSubscriptionID()
	}
	if v := i.ExternalSubscriptionID; v != nil {
		m.SetExternalSubscriptionID(*v)
	}
	if i.ClearExpiresAt {
		m.ClearExpiresAt()
	}
	if v := i.ExpiresAt; v != nil {
		m.SetExpiresAt(*v)
	}
	if v := i.Cancelled; v != nil {
		m.SetCancelled(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateEntitlementInput on the EntitlementUpdate builder.
func (c *EntitlementUpdate) SetInput(i UpdateEntitlementInput) *EntitlementUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEntitlementInput on the EntitlementUpdateOne builder.
func (c *EntitlementUpdateOne) SetInput(i UpdateEntitlementInput) *EntitlementUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateEntitlementPlanInput represents a mutation input for creating entitlementplans.
type CreateEntitlementPlanInput struct {
	Tags           []string
	DisplayName    *string
	Name           string
	Description    *string
	Version        string
	Metadata       map[string]interface{}
	OwnerID        *string
	EntitlementIDs []string
	BaseFeatureIDs []string
	EventIDs       []string
}

// Mutate applies the CreateEntitlementPlanInput on the EntitlementPlanMutation builder.
func (i *CreateEntitlementPlanInput) Mutate(m *EntitlementPlanMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	m.SetVersion(i.Version)
	if v := i.Metadata; v != nil {
		m.SetMetadata(v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.EntitlementIDs; len(v) > 0 {
		m.AddEntitlementIDs(v...)
	}
	if v := i.BaseFeatureIDs; len(v) > 0 {
		m.AddBaseFeatureIDs(v...)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
}

// SetInput applies the change-set in the CreateEntitlementPlanInput on the EntitlementPlanCreate builder.
func (c *EntitlementPlanCreate) SetInput(i CreateEntitlementPlanInput) *EntitlementPlanCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEntitlementPlanInput represents a mutation input for updating entitlementplans.
type UpdateEntitlementPlanInput struct {
	ClearTags            bool
	Tags                 []string
	AppendTags           []string
	ClearDisplayName     bool
	DisplayName          *string
	ClearDescription     bool
	Description          *string
	ClearMetadata        bool
	Metadata             map[string]interface{}
	ClearOwner           bool
	OwnerID              *string
	ClearEntitlements    bool
	AddEntitlementIDs    []string
	RemoveEntitlementIDs []string
	ClearBaseFeatures    bool
	AddBaseFeatureIDs    []string
	RemoveBaseFeatureIDs []string
	ClearEvents          bool
	AddEventIDs          []string
	RemoveEventIDs       []string
}

// Mutate applies the UpdateEntitlementPlanInput on the EntitlementPlanMutation builder.
func (i *UpdateEntitlementPlanInput) Mutate(m *EntitlementPlanMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadata(v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearEntitlements {
		m.ClearEntitlements()
	}
	if v := i.AddEntitlementIDs; len(v) > 0 {
		m.AddEntitlementIDs(v...)
	}
	if v := i.RemoveEntitlementIDs; len(v) > 0 {
		m.RemoveEntitlementIDs(v...)
	}
	if i.ClearBaseFeatures {
		m.ClearBaseFeatures()
	}
	if v := i.AddBaseFeatureIDs; len(v) > 0 {
		m.AddBaseFeatureIDs(v...)
	}
	if v := i.RemoveBaseFeatureIDs; len(v) > 0 {
		m.RemoveBaseFeatureIDs(v...)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateEntitlementPlanInput on the EntitlementPlanUpdate builder.
func (c *EntitlementPlanUpdate) SetInput(i UpdateEntitlementPlanInput) *EntitlementPlanUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEntitlementPlanInput on the EntitlementPlanUpdateOne builder.
func (c *EntitlementPlanUpdateOne) SetInput(i UpdateEntitlementPlanInput) *EntitlementPlanUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateEntitlementPlanFeatureInput represents a mutation input for creating entitlementplanfeatures.
type CreateEntitlementPlanFeatureInput struct {
	Tags      []string
	Metadata  map[string]interface{}
	OwnerID   *string
	PlanID    string
	FeatureID string
	EventIDs  []string
}

// Mutate applies the CreateEntitlementPlanFeatureInput on the EntitlementPlanFeatureMutation builder.
func (i *CreateEntitlementPlanFeatureInput) Mutate(m *EntitlementPlanFeatureMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadata(v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	m.SetPlanID(i.PlanID)
	m.SetFeatureID(i.FeatureID)
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
}

// SetInput applies the change-set in the CreateEntitlementPlanFeatureInput on the EntitlementPlanFeatureCreate builder.
func (c *EntitlementPlanFeatureCreate) SetInput(i CreateEntitlementPlanFeatureInput) *EntitlementPlanFeatureCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEntitlementPlanFeatureInput represents a mutation input for updating entitlementplanfeatures.
type UpdateEntitlementPlanFeatureInput struct {
	ClearTags      bool
	Tags           []string
	AppendTags     []string
	ClearMetadata  bool
	Metadata       map[string]interface{}
	ClearOwner     bool
	OwnerID        *string
	ClearEvents    bool
	AddEventIDs    []string
	RemoveEventIDs []string
}

// Mutate applies the UpdateEntitlementPlanFeatureInput on the EntitlementPlanFeatureMutation builder.
func (i *UpdateEntitlementPlanFeatureInput) Mutate(m *EntitlementPlanFeatureMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadata(v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateEntitlementPlanFeatureInput on the EntitlementPlanFeatureUpdate builder.
func (c *EntitlementPlanFeatureUpdate) SetInput(i UpdateEntitlementPlanFeatureInput) *EntitlementPlanFeatureUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEntitlementPlanFeatureInput on the EntitlementPlanFeatureUpdateOne builder.
func (c *EntitlementPlanFeatureUpdateOne) SetInput(i UpdateEntitlementPlanFeatureInput) *EntitlementPlanFeatureUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateEntityInput represents a mutation input for creating entities.
type CreateEntityInput struct {
	Tags         []string
	Name         *string
	DisplayName  *string
	Description  *string
	Domains      []string
	Status       *string
	OwnerID      *string
	ContactIDs   []string
	DocumentIDs  []string
	NoteIDs      []string
	FileIDs      []string
	EntityTypeID *string
}

// Mutate applies the CreateEntityInput on the EntityMutation builder.
func (i *CreateEntityInput) Mutate(m *EntityMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Domains; v != nil {
		m.SetDomains(v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.ContactIDs; len(v) > 0 {
		m.AddContactIDs(v...)
	}
	if v := i.DocumentIDs; len(v) > 0 {
		m.AddDocumentIDs(v...)
	}
	if v := i.NoteIDs; len(v) > 0 {
		m.AddNoteIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.EntityTypeID; v != nil {
		m.SetEntityTypeID(*v)
	}
}

// SetInput applies the change-set in the CreateEntityInput on the EntityCreate builder.
func (c *EntityCreate) SetInput(i CreateEntityInput) *EntityCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEntityInput represents a mutation input for updating entities.
type UpdateEntityInput struct {
	ClearTags         bool
	Tags              []string
	AppendTags        []string
	ClearName         bool
	Name              *string
	ClearDisplayName  bool
	DisplayName       *string
	ClearDescription  bool
	Description       *string
	ClearDomains      bool
	Domains           []string
	AppendDomains     []string
	ClearStatus       bool
	Status            *string
	ClearOwner        bool
	OwnerID           *string
	ClearContacts     bool
	AddContactIDs     []string
	RemoveContactIDs  []string
	ClearDocuments    bool
	AddDocumentIDs    []string
	RemoveDocumentIDs []string
	ClearNotes        bool
	AddNoteIDs        []string
	RemoveNoteIDs     []string
	ClearFiles        bool
	AddFileIDs        []string
	RemoveFileIDs     []string
	ClearEntityType   bool
	EntityTypeID      *string
}

// Mutate applies the UpdateEntityInput on the EntityMutation builder.
func (i *UpdateEntityInput) Mutate(m *EntityMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearDomains {
		m.ClearDomains()
	}
	if v := i.Domains; v != nil {
		m.SetDomains(v)
	}
	if i.AppendDomains != nil {
		m.AppendDomains(i.Domains)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearContacts {
		m.ClearContacts()
	}
	if v := i.AddContactIDs; len(v) > 0 {
		m.AddContactIDs(v...)
	}
	if v := i.RemoveContactIDs; len(v) > 0 {
		m.RemoveContactIDs(v...)
	}
	if i.ClearDocuments {
		m.ClearDocuments()
	}
	if v := i.AddDocumentIDs; len(v) > 0 {
		m.AddDocumentIDs(v...)
	}
	if v := i.RemoveDocumentIDs; len(v) > 0 {
		m.RemoveDocumentIDs(v...)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.AddNoteIDs; len(v) > 0 {
		m.AddNoteIDs(v...)
	}
	if v := i.RemoveNoteIDs; len(v) > 0 {
		m.RemoveNoteIDs(v...)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
	if i.ClearEntityType {
		m.ClearEntityType()
	}
	if v := i.EntityTypeID; v != nil {
		m.SetEntityTypeID(*v)
	}
}

// SetInput applies the change-set in the UpdateEntityInput on the EntityUpdate builder.
func (c *EntityUpdate) SetInput(i UpdateEntityInput) *EntityUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEntityInput on the EntityUpdateOne builder.
func (c *EntityUpdateOne) SetInput(i UpdateEntityInput) *EntityUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateEntityTypeInput represents a mutation input for creating entitytypes.
type CreateEntityTypeInput struct {
	Tags      []string
	Name      string
	OwnerID   *string
	EntityIDs []string
}

// Mutate applies the CreateEntityTypeInput on the EntityTypeMutation builder.
func (i *CreateEntityTypeInput) Mutate(m *EntityTypeMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.EntityIDs; len(v) > 0 {
		m.AddEntityIDs(v...)
	}
}

// SetInput applies the change-set in the CreateEntityTypeInput on the EntityTypeCreate builder.
func (c *EntityTypeCreate) SetInput(i CreateEntityTypeInput) *EntityTypeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEntityTypeInput represents a mutation input for updating entitytypes.
type UpdateEntityTypeInput struct {
	ClearTags       bool
	Tags            []string
	AppendTags      []string
	Name            *string
	ClearOwner      bool
	OwnerID         *string
	ClearEntities   bool
	AddEntityIDs    []string
	RemoveEntityIDs []string
}

// Mutate applies the UpdateEntityTypeInput on the EntityTypeMutation builder.
func (i *UpdateEntityTypeInput) Mutate(m *EntityTypeMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearEntities {
		m.ClearEntities()
	}
	if v := i.AddEntityIDs; len(v) > 0 {
		m.AddEntityIDs(v...)
	}
	if v := i.RemoveEntityIDs; len(v) > 0 {
		m.RemoveEntityIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateEntityTypeInput on the EntityTypeUpdate builder.
func (c *EntityTypeUpdate) SetInput(i UpdateEntityTypeInput) *EntityTypeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEntityTypeInput on the EntityTypeUpdateOne builder.
func (c *EntityTypeUpdateOne) SetInput(i UpdateEntityTypeInput) *EntityTypeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateEventInput represents a mutation input for creating events.
type CreateEventInput struct {
	Tags                   []string
	EventID                *string
	CorrelationID          *string
	EventType              string
	Metadata               map[string]interface{}
	UserIDs                []string
	GroupIDs               []string
	IntegrationIDs         []string
	OrganizationIDs        []string
	InviteIDs              []string
	FeatureIDs             []string
	EntitlementplanIDs     []string
	PersonalAccessTokenIDs []string
	Oauth2tokenIDs         []string
	HushIDs                []string
	EntitlementIDs         []string
	WebhookIDs             []string
	SubscriberIDs          []string
	FileIDs                []string
}

// Mutate applies the CreateEventInput on the EventMutation builder.
func (i *CreateEventInput) Mutate(m *EventMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.EventID; v != nil {
		m.SetEventID(*v)
	}
	if v := i.CorrelationID; v != nil {
		m.SetCorrelationID(*v)
	}
	m.SetEventType(i.EventType)
	if v := i.Metadata; v != nil {
		m.SetMetadata(v)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.GroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.IntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.OrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.InviteIDs; len(v) > 0 {
		m.AddInviteIDs(v...)
	}
	if v := i.FeatureIDs; len(v) > 0 {
		m.AddFeatureIDs(v...)
	}
	if v := i.EntitlementplanIDs; len(v) > 0 {
		m.AddEntitlementplanIDs(v...)
	}
	if v := i.PersonalAccessTokenIDs; len(v) > 0 {
		m.AddPersonalAccessTokenIDs(v...)
	}
	if v := i.Oauth2tokenIDs; len(v) > 0 {
		m.AddOauth2tokenIDs(v...)
	}
	if v := i.HushIDs; len(v) > 0 {
		m.AddHushIDs(v...)
	}
	if v := i.EntitlementIDs; len(v) > 0 {
		m.AddEntitlementIDs(v...)
	}
	if v := i.WebhookIDs; len(v) > 0 {
		m.AddWebhookIDs(v...)
	}
	if v := i.SubscriberIDs; len(v) > 0 {
		m.AddSubscriberIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
}

// SetInput applies the change-set in the CreateEventInput on the EventCreate builder.
func (c *EventCreate) SetInput(i CreateEventInput) *EventCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEventInput represents a mutation input for updating events.
type UpdateEventInput struct {
	ClearTags                    bool
	Tags                         []string
	AppendTags                   []string
	ClearEventID                 bool
	EventID                      *string
	ClearCorrelationID           bool
	CorrelationID                *string
	EventType                    *string
	ClearMetadata                bool
	Metadata                     map[string]interface{}
	ClearUser                    bool
	AddUserIDs                   []string
	RemoveUserIDs                []string
	ClearGroup                   bool
	AddGroupIDs                  []string
	RemoveGroupIDs               []string
	ClearIntegration             bool
	AddIntegrationIDs            []string
	RemoveIntegrationIDs         []string
	ClearOrganization            bool
	AddOrganizationIDs           []string
	RemoveOrganizationIDs        []string
	ClearInvite                  bool
	AddInviteIDs                 []string
	RemoveInviteIDs              []string
	ClearFeature                 bool
	AddFeatureIDs                []string
	RemoveFeatureIDs             []string
	ClearEntitlementplan         bool
	AddEntitlementplanIDs        []string
	RemoveEntitlementplanIDs     []string
	ClearPersonalAccessToken     bool
	AddPersonalAccessTokenIDs    []string
	RemovePersonalAccessTokenIDs []string
	ClearOauth2token             bool
	AddOauth2tokenIDs            []string
	RemoveOauth2tokenIDs         []string
	ClearHush                    bool
	AddHushIDs                   []string
	RemoveHushIDs                []string
	ClearEntitlement             bool
	AddEntitlementIDs            []string
	RemoveEntitlementIDs         []string
	ClearWebhook                 bool
	AddWebhookIDs                []string
	RemoveWebhookIDs             []string
	ClearSubscriber              bool
	AddSubscriberIDs             []string
	RemoveSubscriberIDs          []string
	ClearFile                    bool
	AddFileIDs                   []string
	RemoveFileIDs                []string
}

// Mutate applies the UpdateEventInput on the EventMutation builder.
func (i *UpdateEventInput) Mutate(m *EventMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if i.ClearEventID {
		m.ClearEventID()
	}
	if v := i.EventID; v != nil {
		m.SetEventID(*v)
	}
	if i.ClearCorrelationID {
		m.ClearCorrelationID()
	}
	if v := i.CorrelationID; v != nil {
		m.SetCorrelationID(*v)
	}
	if v := i.EventType; v != nil {
		m.SetEventType(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadata(v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearGroup {
		m.ClearGroup()
	}
	if v := i.AddGroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.RemoveGroupIDs; len(v) > 0 {
		m.RemoveGroupIDs(v...)
	}
	if i.ClearIntegration {
		m.ClearIntegration()
	}
	if v := i.AddIntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.RemoveIntegrationIDs; len(v) > 0 {
		m.RemoveIntegrationIDs(v...)
	}
	if i.ClearOrganization {
		m.ClearOrganization()
	}
	if v := i.AddOrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.RemoveOrganizationIDs; len(v) > 0 {
		m.RemoveOrganizationIDs(v...)
	}
	if i.ClearInvite {
		m.ClearInvite()
	}
	if v := i.AddInviteIDs; len(v) > 0 {
		m.AddInviteIDs(v...)
	}
	if v := i.RemoveInviteIDs; len(v) > 0 {
		m.RemoveInviteIDs(v...)
	}
	if i.ClearFeature {
		m.ClearFeature()
	}
	if v := i.AddFeatureIDs; len(v) > 0 {
		m.AddFeatureIDs(v...)
	}
	if v := i.RemoveFeatureIDs; len(v) > 0 {
		m.RemoveFeatureIDs(v...)
	}
	if i.ClearEntitlementplan {
		m.ClearEntitlementplan()
	}
	if v := i.AddEntitlementplanIDs; len(v) > 0 {
		m.AddEntitlementplanIDs(v...)
	}
	if v := i.RemoveEntitlementplanIDs; len(v) > 0 {
		m.RemoveEntitlementplanIDs(v...)
	}
	if i.ClearPersonalAccessToken {
		m.ClearPersonalAccessToken()
	}
	if v := i.AddPersonalAccessTokenIDs; len(v) > 0 {
		m.AddPersonalAccessTokenIDs(v...)
	}
	if v := i.RemovePersonalAccessTokenIDs; len(v) > 0 {
		m.RemovePersonalAccessTokenIDs(v...)
	}
	if i.ClearOauth2token {
		m.ClearOauth2token()
	}
	if v := i.AddOauth2tokenIDs; len(v) > 0 {
		m.AddOauth2tokenIDs(v...)
	}
	if v := i.RemoveOauth2tokenIDs; len(v) > 0 {
		m.RemoveOauth2tokenIDs(v...)
	}
	if i.ClearHush {
		m.ClearHush()
	}
	if v := i.AddHushIDs; len(v) > 0 {
		m.AddHushIDs(v...)
	}
	if v := i.RemoveHushIDs; len(v) > 0 {
		m.RemoveHushIDs(v...)
	}
	if i.ClearEntitlement {
		m.ClearEntitlement()
	}
	if v := i.AddEntitlementIDs; len(v) > 0 {
		m.AddEntitlementIDs(v...)
	}
	if v := i.RemoveEntitlementIDs; len(v) > 0 {
		m.RemoveEntitlementIDs(v...)
	}
	if i.ClearWebhook {
		m.ClearWebhook()
	}
	if v := i.AddWebhookIDs; len(v) > 0 {
		m.AddWebhookIDs(v...)
	}
	if v := i.RemoveWebhookIDs; len(v) > 0 {
		m.RemoveWebhookIDs(v...)
	}
	if i.ClearSubscriber {
		m.ClearSubscriber()
	}
	if v := i.AddSubscriberIDs; len(v) > 0 {
		m.AddSubscriberIDs(v...)
	}
	if v := i.RemoveSubscriberIDs; len(v) > 0 {
		m.RemoveSubscriberIDs(v...)
	}
	if i.ClearFile {
		m.ClearFile()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateEventInput on the EventUpdate builder.
func (c *EventUpdate) SetInput(i UpdateEventInput) *EventUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEventInput on the EventUpdateOne builder.
func (c *EventUpdateOne) SetInput(i UpdateEventInput) *EventUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateFeatureInput represents a mutation input for creating features.
type CreateFeatureInput struct {
	Tags        []string
	Name        string
	DisplayName *string
	Enabled     *bool
	Description *string
	Metadata    map[string]interface{}
	OwnerID     *string
	PlanIDs     []string
	EventIDs    []string
}

// Mutate applies the CreateFeatureInput on the FeatureMutation builder.
func (i *CreateFeatureInput) Mutate(m *FeatureMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Enabled; v != nil {
		m.SetEnabled(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Metadata; v != nil {
		m.SetMetadata(v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.PlanIDs; len(v) > 0 {
		m.AddPlanIDs(v...)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
}

// SetInput applies the change-set in the CreateFeatureInput on the FeatureCreate builder.
func (c *FeatureCreate) SetInput(i CreateFeatureInput) *FeatureCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFeatureInput represents a mutation input for updating features.
type UpdateFeatureInput struct {
	ClearTags        bool
	Tags             []string
	AppendTags       []string
	ClearDisplayName bool
	DisplayName      *string
	Enabled          *bool
	ClearDescription bool
	Description      *string
	ClearMetadata    bool
	Metadata         map[string]interface{}
	ClearOwner       bool
	OwnerID          *string
	ClearPlans       bool
	AddPlanIDs       []string
	RemovePlanIDs    []string
	ClearEvents      bool
	AddEventIDs      []string
	RemoveEventIDs   []string
}

// Mutate applies the UpdateFeatureInput on the FeatureMutation builder.
func (i *UpdateFeatureInput) Mutate(m *FeatureMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if i.ClearDisplayName {
		m.ClearDisplayName()
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Enabled; v != nil {
		m.SetEnabled(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearMetadata {
		m.ClearMetadata()
	}
	if v := i.Metadata; v != nil {
		m.SetMetadata(v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearPlans {
		m.ClearPlans()
	}
	if v := i.AddPlanIDs; len(v) > 0 {
		m.AddPlanIDs(v...)
	}
	if v := i.RemovePlanIDs; len(v) > 0 {
		m.RemovePlanIDs(v...)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateFeatureInput on the FeatureUpdate builder.
func (c *FeatureUpdate) SetInput(i UpdateFeatureInput) *FeatureUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFeatureInput on the FeatureUpdateOne builder.
func (c *FeatureUpdateOne) SetInput(i UpdateFeatureInput) *FeatureUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateFileInput represents a mutation input for creating files.
type CreateFileInput struct {
	Tags                   []string
	ProvidedFileName       string
	ProvidedFileExtension  string
	ProvidedFileSize       *int64
	PersistedFileSize      *int64
	DetectedMimeType       *string
	Md5Hash                *string
	DetectedContentType    string
	StoreKey               *string
	CategoryType           *string
	URI                    *string
	StorageScheme          *string
	StorageVolume          *string
	StoragePath            *string
	UserIDs                []string
	OrganizationIDs        []string
	GroupIDs               []string
	ContactIDs             []string
	EntityIDs              []string
	UsersettingIDs         []string
	OrganizationsettingIDs []string
	TemplateIDs            []string
	DocumentdatumIDs       []string
	EventIDs               []string
	ProgramIDs             []string
}

// Mutate applies the CreateFileInput on the FileMutation builder.
func (i *CreateFileInput) Mutate(m *FileMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetProvidedFileName(i.ProvidedFileName)
	m.SetProvidedFileExtension(i.ProvidedFileExtension)
	if v := i.ProvidedFileSize; v != nil {
		m.SetProvidedFileSize(*v)
	}
	if v := i.PersistedFileSize; v != nil {
		m.SetPersistedFileSize(*v)
	}
	if v := i.DetectedMimeType; v != nil {
		m.SetDetectedMimeType(*v)
	}
	if v := i.Md5Hash; v != nil {
		m.SetMd5Hash(*v)
	}
	m.SetDetectedContentType(i.DetectedContentType)
	if v := i.StoreKey; v != nil {
		m.SetStoreKey(*v)
	}
	if v := i.CategoryType; v != nil {
		m.SetCategoryType(*v)
	}
	if v := i.URI; v != nil {
		m.SetURI(*v)
	}
	if v := i.StorageScheme; v != nil {
		m.SetStorageScheme(*v)
	}
	if v := i.StorageVolume; v != nil {
		m.SetStorageVolume(*v)
	}
	if v := i.StoragePath; v != nil {
		m.SetStoragePath(*v)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.OrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.GroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.ContactIDs; len(v) > 0 {
		m.AddContactIDs(v...)
	}
	if v := i.EntityIDs; len(v) > 0 {
		m.AddEntityIDs(v...)
	}
	if v := i.UsersettingIDs; len(v) > 0 {
		m.AddUsersettingIDs(v...)
	}
	if v := i.OrganizationsettingIDs; len(v) > 0 {
		m.AddOrganizationsettingIDs(v...)
	}
	if v := i.TemplateIDs; len(v) > 0 {
		m.AddTemplateIDs(v...)
	}
	if v := i.DocumentdatumIDs; len(v) > 0 {
		m.AddDocumentdatumIDs(v...)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateFileInput on the FileCreate builder.
func (c *FileCreate) SetInput(i CreateFileInput) *FileCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFileInput represents a mutation input for updating files.
type UpdateFileInput struct {
	ClearTags                    bool
	Tags                         []string
	AppendTags                   []string
	ProvidedFileName             *string
	ProvidedFileExtension        *string
	ClearProvidedFileSize        bool
	ProvidedFileSize             *int64
	ClearPersistedFileSize       bool
	PersistedFileSize            *int64
	ClearDetectedMimeType        bool
	DetectedMimeType             *string
	ClearMd5Hash                 bool
	Md5Hash                      *string
	DetectedContentType          *string
	ClearStoreKey                bool
	StoreKey                     *string
	ClearCategoryType            bool
	CategoryType                 *string
	ClearURI                     bool
	URI                          *string
	ClearStorageScheme           bool
	StorageScheme                *string
	ClearStorageVolume           bool
	StorageVolume                *string
	ClearStoragePath             bool
	StoragePath                  *string
	ClearUser                    bool
	AddUserIDs                   []string
	RemoveUserIDs                []string
	ClearOrganization            bool
	AddOrganizationIDs           []string
	RemoveOrganizationIDs        []string
	ClearGroup                   bool
	AddGroupIDs                  []string
	RemoveGroupIDs               []string
	ClearContact                 bool
	AddContactIDs                []string
	RemoveContactIDs             []string
	ClearEntity                  bool
	AddEntityIDs                 []string
	RemoveEntityIDs              []string
	ClearUsersetting             bool
	AddUsersettingIDs            []string
	RemoveUsersettingIDs         []string
	ClearOrganizationsetting     bool
	AddOrganizationsettingIDs    []string
	RemoveOrganizationsettingIDs []string
	ClearTemplate                bool
	AddTemplateIDs               []string
	RemoveTemplateIDs            []string
	ClearDocumentdata            bool
	AddDocumentdatumIDs          []string
	RemoveDocumentdatumIDs       []string
	ClearEvents                  bool
	AddEventIDs                  []string
	RemoveEventIDs               []string
	ClearProgram                 bool
	AddProgramIDs                []string
	RemoveProgramIDs             []string
}

// Mutate applies the UpdateFileInput on the FileMutation builder.
func (i *UpdateFileInput) Mutate(m *FileMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.ProvidedFileName; v != nil {
		m.SetProvidedFileName(*v)
	}
	if v := i.ProvidedFileExtension; v != nil {
		m.SetProvidedFileExtension(*v)
	}
	if i.ClearProvidedFileSize {
		m.ClearProvidedFileSize()
	}
	if v := i.ProvidedFileSize; v != nil {
		m.SetProvidedFileSize(*v)
	}
	if i.ClearPersistedFileSize {
		m.ClearPersistedFileSize()
	}
	if v := i.PersistedFileSize; v != nil {
		m.SetPersistedFileSize(*v)
	}
	if i.ClearDetectedMimeType {
		m.ClearDetectedMimeType()
	}
	if v := i.DetectedMimeType; v != nil {
		m.SetDetectedMimeType(*v)
	}
	if i.ClearMd5Hash {
		m.ClearMd5Hash()
	}
	if v := i.Md5Hash; v != nil {
		m.SetMd5Hash(*v)
	}
	if v := i.DetectedContentType; v != nil {
		m.SetDetectedContentType(*v)
	}
	if i.ClearStoreKey {
		m.ClearStoreKey()
	}
	if v := i.StoreKey; v != nil {
		m.SetStoreKey(*v)
	}
	if i.ClearCategoryType {
		m.ClearCategoryType()
	}
	if v := i.CategoryType; v != nil {
		m.SetCategoryType(*v)
	}
	if i.ClearURI {
		m.ClearURI()
	}
	if v := i.URI; v != nil {
		m.SetURI(*v)
	}
	if i.ClearStorageScheme {
		m.ClearStorageScheme()
	}
	if v := i.StorageScheme; v != nil {
		m.SetStorageScheme(*v)
	}
	if i.ClearStorageVolume {
		m.ClearStorageVolume()
	}
	if v := i.StorageVolume; v != nil {
		m.SetStorageVolume(*v)
	}
	if i.ClearStoragePath {
		m.ClearStoragePath()
	}
	if v := i.StoragePath; v != nil {
		m.SetStoragePath(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearOrganization {
		m.ClearOrganization()
	}
	if v := i.AddOrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.RemoveOrganizationIDs; len(v) > 0 {
		m.RemoveOrganizationIDs(v...)
	}
	if i.ClearGroup {
		m.ClearGroup()
	}
	if v := i.AddGroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.RemoveGroupIDs; len(v) > 0 {
		m.RemoveGroupIDs(v...)
	}
	if i.ClearContact {
		m.ClearContact()
	}
	if v := i.AddContactIDs; len(v) > 0 {
		m.AddContactIDs(v...)
	}
	if v := i.RemoveContactIDs; len(v) > 0 {
		m.RemoveContactIDs(v...)
	}
	if i.ClearEntity {
		m.ClearEntity()
	}
	if v := i.AddEntityIDs; len(v) > 0 {
		m.AddEntityIDs(v...)
	}
	if v := i.RemoveEntityIDs; len(v) > 0 {
		m.RemoveEntityIDs(v...)
	}
	if i.ClearUsersetting {
		m.ClearUsersetting()
	}
	if v := i.AddUsersettingIDs; len(v) > 0 {
		m.AddUsersettingIDs(v...)
	}
	if v := i.RemoveUsersettingIDs; len(v) > 0 {
		m.RemoveUsersettingIDs(v...)
	}
	if i.ClearOrganizationsetting {
		m.ClearOrganizationsetting()
	}
	if v := i.AddOrganizationsettingIDs; len(v) > 0 {
		m.AddOrganizationsettingIDs(v...)
	}
	if v := i.RemoveOrganizationsettingIDs; len(v) > 0 {
		m.RemoveOrganizationsettingIDs(v...)
	}
	if i.ClearTemplate {
		m.ClearTemplate()
	}
	if v := i.AddTemplateIDs; len(v) > 0 {
		m.AddTemplateIDs(v...)
	}
	if v := i.RemoveTemplateIDs; len(v) > 0 {
		m.RemoveTemplateIDs(v...)
	}
	if i.ClearDocumentdata {
		m.ClearDocumentdata()
	}
	if v := i.AddDocumentdatumIDs; len(v) > 0 {
		m.AddDocumentdatumIDs(v...)
	}
	if v := i.RemoveDocumentdatumIDs; len(v) > 0 {
		m.RemoveDocumentdatumIDs(v...)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
	if i.ClearProgram {
		m.ClearProgram()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateFileInput on the FileUpdate builder.
func (c *FileUpdate) SetInput(i UpdateFileInput) *FileUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFileInput on the FileUpdateOne builder.
func (c *FileUpdateOne) SetInput(i UpdateFileInput) *FileUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateGroupInput represents a mutation input for creating groups.
type CreateGroupInput struct {
	Tags            []string
	Name            string
	Description     *string
	GravatarLogoURL *string
	LogoURL         *string
	DisplayName     *string
	OwnerID         *string
	SettingID       string
	UserIDs         []string
	EventIDs        []string
	IntegrationIDs  []string
	FileIDs         []string
	TaskIDs         []string
}

// Mutate applies the CreateGroupInput on the GroupMutation builder.
func (i *CreateGroupInput) Mutate(m *GroupMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.GravatarLogoURL; v != nil {
		m.SetGravatarLogoURL(*v)
	}
	if v := i.LogoURL; v != nil {
		m.SetLogoURL(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	m.SetSettingID(i.SettingID)
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.IntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.TaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
}

// SetInput applies the change-set in the CreateGroupInput on the GroupCreate builder.
func (c *GroupCreate) SetInput(i CreateGroupInput) *GroupCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateGroupInput represents a mutation input for updating groups.
type UpdateGroupInput struct {
	ClearTags            bool
	Tags                 []string
	AppendTags           []string
	Name                 *string
	ClearDescription     bool
	Description          *string
	ClearGravatarLogoURL bool
	GravatarLogoURL      *string
	ClearLogoURL         bool
	LogoURL              *string
	DisplayName          *string
	ClearOwner           bool
	OwnerID              *string
	SettingID            *string
	ClearUsers           bool
	AddUserIDs           []string
	RemoveUserIDs        []string
	ClearEvents          bool
	AddEventIDs          []string
	RemoveEventIDs       []string
	ClearIntegrations    bool
	AddIntegrationIDs    []string
	RemoveIntegrationIDs []string
	ClearFiles           bool
	AddFileIDs           []string
	RemoveFileIDs        []string
	ClearTasks           bool
	AddTaskIDs           []string
	RemoveTaskIDs        []string
}

// Mutate applies the UpdateGroupInput on the GroupMutation builder.
func (i *UpdateGroupInput) Mutate(m *GroupMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearGravatarLogoURL {
		m.ClearGravatarLogoURL()
	}
	if v := i.GravatarLogoURL; v != nil {
		m.SetGravatarLogoURL(*v)
	}
	if i.ClearLogoURL {
		m.ClearLogoURL()
	}
	if v := i.LogoURL; v != nil {
		m.SetLogoURL(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.SettingID; v != nil {
		m.SetSettingID(*v)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
	if i.ClearIntegrations {
		m.ClearIntegrations()
	}
	if v := i.AddIntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.RemoveIntegrationIDs; len(v) > 0 {
		m.RemoveIntegrationIDs(v...)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
	if i.ClearTasks {
		m.ClearTasks()
	}
	if v := i.AddTaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.RemoveTaskIDs; len(v) > 0 {
		m.RemoveTaskIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateGroupInput on the GroupUpdate builder.
func (c *GroupUpdate) SetInput(i UpdateGroupInput) *GroupUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateGroupInput on the GroupUpdateOne builder.
func (c *GroupUpdateOne) SetInput(i UpdateGroupInput) *GroupUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateGroupMembershipInput represents a mutation input for creating groupmemberships.
type CreateGroupMembershipInput struct {
	Role     *enums.Role
	GroupID  string
	UserID   string
	EventIDs []string
}

// Mutate applies the CreateGroupMembershipInput on the GroupMembershipMutation builder.
func (i *CreateGroupMembershipInput) Mutate(m *GroupMembershipMutation) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	m.SetGroupID(i.GroupID)
	m.SetUserID(i.UserID)
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
}

// SetInput applies the change-set in the CreateGroupMembershipInput on the GroupMembershipCreate builder.
func (c *GroupMembershipCreate) SetInput(i CreateGroupMembershipInput) *GroupMembershipCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateGroupMembershipInput represents a mutation input for updating groupmemberships.
type UpdateGroupMembershipInput struct {
	Role           *enums.Role
	ClearEvents    bool
	AddEventIDs    []string
	RemoveEventIDs []string
}

// Mutate applies the UpdateGroupMembershipInput on the GroupMembershipMutation builder.
func (i *UpdateGroupMembershipInput) Mutate(m *GroupMembershipMutation) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateGroupMembershipInput on the GroupMembershipUpdate builder.
func (c *GroupMembershipUpdate) SetInput(i UpdateGroupMembershipInput) *GroupMembershipUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateGroupMembershipInput on the GroupMembershipUpdateOne builder.
func (c *GroupMembershipUpdateOne) SetInput(i UpdateGroupMembershipInput) *GroupMembershipUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateGroupSettingInput represents a mutation input for creating groupsettings.
type CreateGroupSettingInput struct {
	Tags         []string
	Visibility   *enums.Visibility
	JoinPolicy   *enums.JoinPolicy
	SyncToSlack  *bool
	SyncToGithub *bool
	GroupID      *string
}

// Mutate applies the CreateGroupSettingInput on the GroupSettingMutation builder.
func (i *CreateGroupSettingInput) Mutate(m *GroupSettingMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.Visibility; v != nil {
		m.SetVisibility(*v)
	}
	if v := i.JoinPolicy; v != nil {
		m.SetJoinPolicy(*v)
	}
	if v := i.SyncToSlack; v != nil {
		m.SetSyncToSlack(*v)
	}
	if v := i.SyncToGithub; v != nil {
		m.SetSyncToGithub(*v)
	}
	if v := i.GroupID; v != nil {
		m.SetGroupID(*v)
	}
}

// SetInput applies the change-set in the CreateGroupSettingInput on the GroupSettingCreate builder.
func (c *GroupSettingCreate) SetInput(i CreateGroupSettingInput) *GroupSettingCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateGroupSettingInput represents a mutation input for updating groupsettings.
type UpdateGroupSettingInput struct {
	ClearTags         bool
	Tags              []string
	AppendTags        []string
	Visibility        *enums.Visibility
	JoinPolicy        *enums.JoinPolicy
	ClearSyncToSlack  bool
	SyncToSlack       *bool
	ClearSyncToGithub bool
	SyncToGithub      *bool
	ClearGroup        bool
	GroupID           *string
}

// Mutate applies the UpdateGroupSettingInput on the GroupSettingMutation builder.
func (i *UpdateGroupSettingInput) Mutate(m *GroupSettingMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Visibility; v != nil {
		m.SetVisibility(*v)
	}
	if v := i.JoinPolicy; v != nil {
		m.SetJoinPolicy(*v)
	}
	if i.ClearSyncToSlack {
		m.ClearSyncToSlack()
	}
	if v := i.SyncToSlack; v != nil {
		m.SetSyncToSlack(*v)
	}
	if i.ClearSyncToGithub {
		m.ClearSyncToGithub()
	}
	if v := i.SyncToGithub; v != nil {
		m.SetSyncToGithub(*v)
	}
	if i.ClearGroup {
		m.ClearGroup()
	}
	if v := i.GroupID; v != nil {
		m.SetGroupID(*v)
	}
}

// SetInput applies the change-set in the UpdateGroupSettingInput on the GroupSettingUpdate builder.
func (c *GroupSettingUpdate) SetInput(i UpdateGroupSettingInput) *GroupSettingUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateGroupSettingInput on the GroupSettingUpdateOne builder.
func (c *GroupSettingUpdateOne) SetInput(i UpdateGroupSettingInput) *GroupSettingUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateHushInput represents a mutation input for creating hushes.
type CreateHushInput struct {
	Name            string
	Description     *string
	Kind            *string
	SecretName      *string
	SecretValue     *string
	IntegrationIDs  []string
	OrganizationIDs []string
	EventIDs        []string
}

// Mutate applies the CreateHushInput on the HushMutation builder.
func (i *CreateHushInput) Mutate(m *HushMutation) {
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Kind; v != nil {
		m.SetKind(*v)
	}
	if v := i.SecretName; v != nil {
		m.SetSecretName(*v)
	}
	if v := i.SecretValue; v != nil {
		m.SetSecretValue(*v)
	}
	if v := i.IntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.OrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
}

// SetInput applies the change-set in the CreateHushInput on the HushCreate builder.
func (c *HushCreate) SetInput(i CreateHushInput) *HushCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateHushInput represents a mutation input for updating hushes.
type UpdateHushInput struct {
	Name                  *string
	ClearDescription      bool
	Description           *string
	ClearKind             bool
	Kind                  *string
	ClearIntegrations     bool
	AddIntegrationIDs     []string
	RemoveIntegrationIDs  []string
	ClearOrganization     bool
	AddOrganizationIDs    []string
	RemoveOrganizationIDs []string
	ClearEvents           bool
	AddEventIDs           []string
	RemoveEventIDs        []string
}

// Mutate applies the UpdateHushInput on the HushMutation builder.
func (i *UpdateHushInput) Mutate(m *HushMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearKind {
		m.ClearKind()
	}
	if v := i.Kind; v != nil {
		m.SetKind(*v)
	}
	if i.ClearIntegrations {
		m.ClearIntegrations()
	}
	if v := i.AddIntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.RemoveIntegrationIDs; len(v) > 0 {
		m.RemoveIntegrationIDs(v...)
	}
	if i.ClearOrganization {
		m.ClearOrganization()
	}
	if v := i.AddOrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.RemoveOrganizationIDs; len(v) > 0 {
		m.RemoveOrganizationIDs(v...)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateHushInput on the HushUpdate builder.
func (c *HushUpdate) SetInput(i UpdateHushInput) *HushUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateHushInput on the HushUpdateOne builder.
func (c *HushUpdateOne) SetInput(i UpdateHushInput) *HushUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateIntegrationInput represents a mutation input for creating integrations.
type CreateIntegrationInput struct {
	Tags           []string
	Name           string
	Description    *string
	Kind           *string
	OwnerID        *string
	SecretIDs      []string
	Oauth2tokenIDs []string
	EventIDs       []string
	WebhookIDs     []string
}

// Mutate applies the CreateIntegrationInput on the IntegrationMutation builder.
func (i *CreateIntegrationInput) Mutate(m *IntegrationMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Kind; v != nil {
		m.SetKind(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.SecretIDs; len(v) > 0 {
		m.AddSecretIDs(v...)
	}
	if v := i.Oauth2tokenIDs; len(v) > 0 {
		m.AddOauth2tokenIDs(v...)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.WebhookIDs; len(v) > 0 {
		m.AddWebhookIDs(v...)
	}
}

// SetInput applies the change-set in the CreateIntegrationInput on the IntegrationCreate builder.
func (c *IntegrationCreate) SetInput(i CreateIntegrationInput) *IntegrationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateIntegrationInput represents a mutation input for updating integrations.
type UpdateIntegrationInput struct {
	ClearTags            bool
	Tags                 []string
	AppendTags           []string
	Name                 *string
	ClearDescription     bool
	Description          *string
	ClearKind            bool
	Kind                 *string
	ClearOwner           bool
	OwnerID              *string
	ClearSecrets         bool
	AddSecretIDs         []string
	RemoveSecretIDs      []string
	ClearOauth2tokens    bool
	AddOauth2tokenIDs    []string
	RemoveOauth2tokenIDs []string
	ClearEvents          bool
	AddEventIDs          []string
	RemoveEventIDs       []string
	ClearWebhooks        bool
	AddWebhookIDs        []string
	RemoveWebhookIDs     []string
}

// Mutate applies the UpdateIntegrationInput on the IntegrationMutation builder.
func (i *UpdateIntegrationInput) Mutate(m *IntegrationMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearKind {
		m.ClearKind()
	}
	if v := i.Kind; v != nil {
		m.SetKind(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearSecrets {
		m.ClearSecrets()
	}
	if v := i.AddSecretIDs; len(v) > 0 {
		m.AddSecretIDs(v...)
	}
	if v := i.RemoveSecretIDs; len(v) > 0 {
		m.RemoveSecretIDs(v...)
	}
	if i.ClearOauth2tokens {
		m.ClearOauth2tokens()
	}
	if v := i.AddOauth2tokenIDs; len(v) > 0 {
		m.AddOauth2tokenIDs(v...)
	}
	if v := i.RemoveOauth2tokenIDs; len(v) > 0 {
		m.RemoveOauth2tokenIDs(v...)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
	if i.ClearWebhooks {
		m.ClearWebhooks()
	}
	if v := i.AddWebhookIDs; len(v) > 0 {
		m.AddWebhookIDs(v...)
	}
	if v := i.RemoveWebhookIDs; len(v) > 0 {
		m.RemoveWebhookIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateIntegrationInput on the IntegrationUpdate builder.
func (c *IntegrationUpdate) SetInput(i UpdateIntegrationInput) *IntegrationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateIntegrationInput on the IntegrationUpdateOne builder.
func (c *IntegrationUpdateOne) SetInput(i UpdateIntegrationInput) *IntegrationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateInternalPolicyInput represents a mutation input for creating internalpolicies.
type CreateInternalPolicyInput struct {
	Tags                []string
	Name                string
	Description         string
	Status              *string
	PolicyType          *string
	Version             *string
	PurposeAndScope     *string
	Background          *string
	Details             map[string]interface{}
	ControlobjectiveIDs []string
	ControlIDs          []string
	ProcedureIDs        []string
	NarrativeIDs        []string
	TaskIDs             []string
	ProgramIDs          []string
}

// Mutate applies the CreateInternalPolicyInput on the InternalPolicyMutation builder.
func (i *CreateInternalPolicyInput) Mutate(m *InternalPolicyMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PolicyType; v != nil {
		m.SetPolicyType(*v)
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if v := i.PurposeAndScope; v != nil {
		m.SetPurposeAndScope(*v)
	}
	if v := i.Background; v != nil {
		m.SetBackground(*v)
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if v := i.ControlobjectiveIDs; len(v) > 0 {
		m.AddControlobjectiveIDs(v...)
	}
	if v := i.ControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.ProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.NarrativeIDs; len(v) > 0 {
		m.AddNarrativeIDs(v...)
	}
	if v := i.TaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateInternalPolicyInput on the InternalPolicyCreate builder.
func (c *InternalPolicyCreate) SetInput(i CreateInternalPolicyInput) *InternalPolicyCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateInternalPolicyInput represents a mutation input for updating internalpolicies.
type UpdateInternalPolicyInput struct {
	ClearTags                 bool
	Tags                      []string
	AppendTags                []string
	Name                      *string
	Description               *string
	ClearStatus               bool
	Status                    *string
	ClearPolicyType           bool
	PolicyType                *string
	ClearVersion              bool
	Version                   *string
	ClearPurposeAndScope      bool
	PurposeAndScope           *string
	ClearBackground           bool
	Background                *string
	ClearDetails              bool
	Details                   map[string]interface{}
	ClearControlobjectives    bool
	AddControlobjectiveIDs    []string
	RemoveControlobjectiveIDs []string
	ClearControls             bool
	AddControlIDs             []string
	RemoveControlIDs          []string
	ClearProcedures           bool
	AddProcedureIDs           []string
	RemoveProcedureIDs        []string
	ClearNarratives           bool
	AddNarrativeIDs           []string
	RemoveNarrativeIDs        []string
	ClearTasks                bool
	AddTaskIDs                []string
	RemoveTaskIDs             []string
	ClearPrograms             bool
	AddProgramIDs             []string
	RemoveProgramIDs          []string
}

// Mutate applies the UpdateInternalPolicyInput on the InternalPolicyMutation builder.
func (i *UpdateInternalPolicyInput) Mutate(m *InternalPolicyMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearPolicyType {
		m.ClearPolicyType()
	}
	if v := i.PolicyType; v != nil {
		m.SetPolicyType(*v)
	}
	if i.ClearVersion {
		m.ClearVersion()
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if i.ClearPurposeAndScope {
		m.ClearPurposeAndScope()
	}
	if v := i.PurposeAndScope; v != nil {
		m.SetPurposeAndScope(*v)
	}
	if i.ClearBackground {
		m.ClearBackground()
	}
	if v := i.Background; v != nil {
		m.SetBackground(*v)
	}
	if i.ClearDetails {
		m.ClearDetails()
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if i.ClearControlobjectives {
		m.ClearControlobjectives()
	}
	if v := i.AddControlobjectiveIDs; len(v) > 0 {
		m.AddControlobjectiveIDs(v...)
	}
	if v := i.RemoveControlobjectiveIDs; len(v) > 0 {
		m.RemoveControlobjectiveIDs(v...)
	}
	if i.ClearControls {
		m.ClearControls()
	}
	if v := i.AddControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.RemoveControlIDs; len(v) > 0 {
		m.RemoveControlIDs(v...)
	}
	if i.ClearProcedures {
		m.ClearProcedures()
	}
	if v := i.AddProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.RemoveProcedureIDs; len(v) > 0 {
		m.RemoveProcedureIDs(v...)
	}
	if i.ClearNarratives {
		m.ClearNarratives()
	}
	if v := i.AddNarrativeIDs; len(v) > 0 {
		m.AddNarrativeIDs(v...)
	}
	if v := i.RemoveNarrativeIDs; len(v) > 0 {
		m.RemoveNarrativeIDs(v...)
	}
	if i.ClearTasks {
		m.ClearTasks()
	}
	if v := i.AddTaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.RemoveTaskIDs; len(v) > 0 {
		m.RemoveTaskIDs(v...)
	}
	if i.ClearPrograms {
		m.ClearPrograms()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateInternalPolicyInput on the InternalPolicyUpdate builder.
func (c *InternalPolicyUpdate) SetInput(i UpdateInternalPolicyInput) *InternalPolicyUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateInternalPolicyInput on the InternalPolicyUpdateOne builder.
func (c *InternalPolicyUpdateOne) SetInput(i UpdateInternalPolicyInput) *InternalPolicyUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateInviteInput represents a mutation input for creating invites.
type CreateInviteInput struct {
	Expires      *time.Time
	Recipient    string
	Status       *enums.InviteStatus
	Role         *enums.Role
	SendAttempts *int
	RequestorID  *string
	OwnerID      *string
	EventIDs     []string
}

// Mutate applies the CreateInviteInput on the InviteMutation builder.
func (i *CreateInviteInput) Mutate(m *InviteMutation) {
	if v := i.Expires; v != nil {
		m.SetExpires(*v)
	}
	m.SetRecipient(i.Recipient)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.SendAttempts; v != nil {
		m.SetSendAttempts(*v)
	}
	if v := i.RequestorID; v != nil {
		m.SetRequestorID(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
}

// SetInput applies the change-set in the CreateInviteInput on the InviteCreate builder.
func (c *InviteCreate) SetInput(i CreateInviteInput) *InviteCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateInviteInput represents a mutation input for updating invites.
type UpdateInviteInput struct {
	ClearExpires   bool
	Expires        *time.Time
	Status         *enums.InviteStatus
	Role           *enums.Role
	SendAttempts   *int
	ClearOwner     bool
	OwnerID        *string
	ClearEvents    bool
	AddEventIDs    []string
	RemoveEventIDs []string
}

// Mutate applies the UpdateInviteInput on the InviteMutation builder.
func (i *UpdateInviteInput) Mutate(m *InviteMutation) {
	if i.ClearExpires {
		m.ClearExpires()
	}
	if v := i.Expires; v != nil {
		m.SetExpires(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.SendAttempts; v != nil {
		m.SetSendAttempts(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateInviteInput on the InviteUpdate builder.
func (c *InviteUpdate) SetInput(i UpdateInviteInput) *InviteUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateInviteInput on the InviteUpdateOne builder.
func (c *InviteUpdateOne) SetInput(i UpdateInviteInput) *InviteUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateNarrativeInput represents a mutation input for creating narratives.
type CreateNarrativeInput struct {
	Tags                []string
	Name                string
	Description         *string
	Satisfies           *string
	Details             map[string]interface{}
	PolicyIDs           []string
	ControlIDs          []string
	ProcedureIDs        []string
	ControlobjectiveIDs []string
	ProgramIDs          []string
}

// Mutate applies the CreateNarrativeInput on the NarrativeMutation builder.
func (i *CreateNarrativeInput) Mutate(m *NarrativeMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Satisfies; v != nil {
		m.SetSatisfies(*v)
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if v := i.PolicyIDs; len(v) > 0 {
		m.AddPolicyIDs(v...)
	}
	if v := i.ControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.ProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.ControlobjectiveIDs; len(v) > 0 {
		m.AddControlobjectiveIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateNarrativeInput on the NarrativeCreate builder.
func (c *NarrativeCreate) SetInput(i CreateNarrativeInput) *NarrativeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateNarrativeInput represents a mutation input for updating narratives.
type UpdateNarrativeInput struct {
	ClearTags                 bool
	Tags                      []string
	AppendTags                []string
	Name                      *string
	ClearDescription          bool
	Description               *string
	ClearSatisfies            bool
	Satisfies                 *string
	ClearDetails              bool
	Details                   map[string]interface{}
	ClearPolicy               bool
	AddPolicyIDs              []string
	RemovePolicyIDs           []string
	ClearControl              bool
	AddControlIDs             []string
	RemoveControlIDs          []string
	ClearProcedure            bool
	AddProcedureIDs           []string
	RemoveProcedureIDs        []string
	ClearControlobjective     bool
	AddControlobjectiveIDs    []string
	RemoveControlobjectiveIDs []string
	ClearProgram              bool
	AddProgramIDs             []string
	RemoveProgramIDs          []string
}

// Mutate applies the UpdateNarrativeInput on the NarrativeMutation builder.
func (i *UpdateNarrativeInput) Mutate(m *NarrativeMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearSatisfies {
		m.ClearSatisfies()
	}
	if v := i.Satisfies; v != nil {
		m.SetSatisfies(*v)
	}
	if i.ClearDetails {
		m.ClearDetails()
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if i.ClearPolicy {
		m.ClearPolicy()
	}
	if v := i.AddPolicyIDs; len(v) > 0 {
		m.AddPolicyIDs(v...)
	}
	if v := i.RemovePolicyIDs; len(v) > 0 {
		m.RemovePolicyIDs(v...)
	}
	if i.ClearControl {
		m.ClearControl()
	}
	if v := i.AddControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.RemoveControlIDs; len(v) > 0 {
		m.RemoveControlIDs(v...)
	}
	if i.ClearProcedure {
		m.ClearProcedure()
	}
	if v := i.AddProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.RemoveProcedureIDs; len(v) > 0 {
		m.RemoveProcedureIDs(v...)
	}
	if i.ClearControlobjective {
		m.ClearControlobjective()
	}
	if v := i.AddControlobjectiveIDs; len(v) > 0 {
		m.AddControlobjectiveIDs(v...)
	}
	if v := i.RemoveControlobjectiveIDs; len(v) > 0 {
		m.RemoveControlobjectiveIDs(v...)
	}
	if i.ClearProgram {
		m.ClearProgram()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateNarrativeInput on the NarrativeUpdate builder.
func (c *NarrativeUpdate) SetInput(i UpdateNarrativeInput) *NarrativeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateNarrativeInput on the NarrativeUpdateOne builder.
func (c *NarrativeUpdateOne) SetInput(i UpdateNarrativeInput) *NarrativeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateNoteInput represents a mutation input for creating notes.
type CreateNoteInput struct {
	Tags          []string
	Text          string
	OwnerID       *string
	EntityID      *string
	SubcontrolIDs []string
	ProgramIDs    []string
}

// Mutate applies the CreateNoteInput on the NoteMutation builder.
func (i *CreateNoteInput) Mutate(m *NoteMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetText(i.Text)
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.EntityID; v != nil {
		m.SetEntityID(*v)
	}
	if v := i.SubcontrolIDs; len(v) > 0 {
		m.AddSubcontrolIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateNoteInput on the NoteCreate builder.
func (c *NoteCreate) SetInput(i CreateNoteInput) *NoteCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateNoteInput represents a mutation input for updating notes.
type UpdateNoteInput struct {
	ClearTags           bool
	Tags                []string
	AppendTags          []string
	Text                *string
	ClearOwner          bool
	OwnerID             *string
	ClearEntity         bool
	EntityID            *string
	ClearSubcontrols    bool
	AddSubcontrolIDs    []string
	RemoveSubcontrolIDs []string
	ClearProgram        bool
	AddProgramIDs       []string
	RemoveProgramIDs    []string
}

// Mutate applies the UpdateNoteInput on the NoteMutation builder.
func (i *UpdateNoteInput) Mutate(m *NoteMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Text; v != nil {
		m.SetText(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearEntity {
		m.ClearEntity()
	}
	if v := i.EntityID; v != nil {
		m.SetEntityID(*v)
	}
	if i.ClearSubcontrols {
		m.ClearSubcontrols()
	}
	if v := i.AddSubcontrolIDs; len(v) > 0 {
		m.AddSubcontrolIDs(v...)
	}
	if v := i.RemoveSubcontrolIDs; len(v) > 0 {
		m.RemoveSubcontrolIDs(v...)
	}
	if i.ClearProgram {
		m.ClearProgram()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateNoteInput on the NoteUpdate builder.
func (c *NoteUpdate) SetInput(i UpdateNoteInput) *NoteUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateNoteInput on the NoteUpdateOne builder.
func (c *NoteUpdateOne) SetInput(i UpdateNoteInput) *NoteUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOauthProviderInput represents a mutation input for creating oauthproviders.
type CreateOauthProviderInput struct {
	Tags         []string
	Name         string
	ClientID     string
	ClientSecret string
	RedirectURL  string
	Scopes       string
	AuthURL      string
	TokenURL     string
	AuthStyle    customtypes.Uint8
	InfoURL      string
	OwnerID      *string
}

// Mutate applies the CreateOauthProviderInput on the OauthProviderMutation builder.
func (i *CreateOauthProviderInput) Mutate(m *OauthProviderMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	m.SetClientID(i.ClientID)
	m.SetClientSecret(i.ClientSecret)
	m.SetRedirectURL(i.RedirectURL)
	m.SetScopes(i.Scopes)
	m.SetAuthURL(i.AuthURL)
	m.SetTokenURL(i.TokenURL)
	m.SetAuthStyle(i.AuthStyle)
	m.SetInfoURL(i.InfoURL)
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateOauthProviderInput on the OauthProviderCreate builder.
func (c *OauthProviderCreate) SetInput(i CreateOauthProviderInput) *OauthProviderCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOauthProviderInput represents a mutation input for updating oauthproviders.
type UpdateOauthProviderInput struct {
	ClearTags    bool
	Tags         []string
	AppendTags   []string
	Name         *string
	ClientID     *string
	ClientSecret *string
	RedirectURL  *string
	Scopes       *string
	AuthURL      *string
	TokenURL     *string
	AuthStyle    *customtypes.Uint8
	InfoURL      *string
	ClearOwner   bool
	OwnerID      *string
}

// Mutate applies the UpdateOauthProviderInput on the OauthProviderMutation builder.
func (i *UpdateOauthProviderInput) Mutate(m *OauthProviderMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.ClientID; v != nil {
		m.SetClientID(*v)
	}
	if v := i.ClientSecret; v != nil {
		m.SetClientSecret(*v)
	}
	if v := i.RedirectURL; v != nil {
		m.SetRedirectURL(*v)
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(*v)
	}
	if v := i.AuthURL; v != nil {
		m.SetAuthURL(*v)
	}
	if v := i.TokenURL; v != nil {
		m.SetTokenURL(*v)
	}
	if v := i.AuthStyle; v != nil {
		m.SetAuthStyle(*v)
	}
	if v := i.InfoURL; v != nil {
		m.SetInfoURL(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateOauthProviderInput on the OauthProviderUpdate builder.
func (c *OauthProviderUpdate) SetInput(i UpdateOauthProviderInput) *OauthProviderUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOauthProviderInput on the OauthProviderUpdateOne builder.
func (c *OauthProviderUpdateOne) SetInput(i UpdateOauthProviderInput) *OauthProviderUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOhAuthTooTokenInput represents a mutation input for creating ohauthtootokens.
type CreateOhAuthTooTokenInput struct {
	Tags                    []string
	ClientID                string
	Scopes                  []string
	Nonce                   string
	ClaimsUserID            string
	ClaimsUsername          string
	ClaimsEmail             string
	ClaimsEmailVerified     bool
	ClaimsGroups            []string
	ClaimsPreferredUsername string
	ConnectorID             string
	ConnectorData           []string
	LastUsed                *time.Time
	IntegrationIDs          []string
	EventIDs                []string
}

// Mutate applies the CreateOhAuthTooTokenInput on the OhAuthTooTokenMutation builder.
func (i *CreateOhAuthTooTokenInput) Mutate(m *OhAuthTooTokenMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetClientID(i.ClientID)
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	m.SetNonce(i.Nonce)
	m.SetClaimsUserID(i.ClaimsUserID)
	m.SetClaimsUsername(i.ClaimsUsername)
	m.SetClaimsEmail(i.ClaimsEmail)
	m.SetClaimsEmailVerified(i.ClaimsEmailVerified)
	if v := i.ClaimsGroups; v != nil {
		m.SetClaimsGroups(v)
	}
	m.SetClaimsPreferredUsername(i.ClaimsPreferredUsername)
	m.SetConnectorID(i.ConnectorID)
	if v := i.ConnectorData; v != nil {
		m.SetConnectorData(v)
	}
	if v := i.LastUsed; v != nil {
		m.SetLastUsed(*v)
	}
	if v := i.IntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
}

// SetInput applies the change-set in the CreateOhAuthTooTokenInput on the OhAuthTooTokenCreate builder.
func (c *OhAuthTooTokenCreate) SetInput(i CreateOhAuthTooTokenInput) *OhAuthTooTokenCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOhAuthTooTokenInput represents a mutation input for updating ohauthtootokens.
type UpdateOhAuthTooTokenInput struct {
	ClearTags               bool
	Tags                    []string
	AppendTags              []string
	ClientID                *string
	ClearScopes             bool
	Scopes                  []string
	AppendScopes            []string
	Nonce                   *string
	ClaimsUserID            *string
	ClaimsUsername          *string
	ClaimsEmail             *string
	ClaimsEmailVerified     *bool
	ClearClaimsGroups       bool
	ClaimsGroups            []string
	AppendClaimsGroups      []string
	ClaimsPreferredUsername *string
	ConnectorID             *string
	ClearConnectorData      bool
	ConnectorData           []string
	AppendConnectorData     []string
	LastUsed                *time.Time
	ClearIntegration        bool
	AddIntegrationIDs       []string
	RemoveIntegrationIDs    []string
	ClearEvents             bool
	AddEventIDs             []string
	RemoveEventIDs          []string
}

// Mutate applies the UpdateOhAuthTooTokenInput on the OhAuthTooTokenMutation builder.
func (i *UpdateOhAuthTooTokenInput) Mutate(m *OhAuthTooTokenMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.ClientID; v != nil {
		m.SetClientID(*v)
	}
	if i.ClearScopes {
		m.ClearScopes()
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	if i.AppendScopes != nil {
		m.AppendScopes(i.Scopes)
	}
	if v := i.Nonce; v != nil {
		m.SetNonce(*v)
	}
	if v := i.ClaimsUserID; v != nil {
		m.SetClaimsUserID(*v)
	}
	if v := i.ClaimsUsername; v != nil {
		m.SetClaimsUsername(*v)
	}
	if v := i.ClaimsEmail; v != nil {
		m.SetClaimsEmail(*v)
	}
	if v := i.ClaimsEmailVerified; v != nil {
		m.SetClaimsEmailVerified(*v)
	}
	if i.ClearClaimsGroups {
		m.ClearClaimsGroups()
	}
	if v := i.ClaimsGroups; v != nil {
		m.SetClaimsGroups(v)
	}
	if i.AppendClaimsGroups != nil {
		m.AppendClaimsGroups(i.ClaimsGroups)
	}
	if v := i.ClaimsPreferredUsername; v != nil {
		m.SetClaimsPreferredUsername(*v)
	}
	if v := i.ConnectorID; v != nil {
		m.SetConnectorID(*v)
	}
	if i.ClearConnectorData {
		m.ClearConnectorData()
	}
	if v := i.ConnectorData; v != nil {
		m.SetConnectorData(v)
	}
	if i.AppendConnectorData != nil {
		m.AppendConnectorData(i.ConnectorData)
	}
	if v := i.LastUsed; v != nil {
		m.SetLastUsed(*v)
	}
	if i.ClearIntegration {
		m.ClearIntegration()
	}
	if v := i.AddIntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.RemoveIntegrationIDs; len(v) > 0 {
		m.RemoveIntegrationIDs(v...)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateOhAuthTooTokenInput on the OhAuthTooTokenUpdate builder.
func (c *OhAuthTooTokenUpdate) SetInput(i UpdateOhAuthTooTokenInput) *OhAuthTooTokenUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOhAuthTooTokenInput on the OhAuthTooTokenUpdateOne builder.
func (c *OhAuthTooTokenUpdateOne) SetInput(i UpdateOhAuthTooTokenInput) *OhAuthTooTokenUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrgMembershipInput represents a mutation input for creating orgmemberships.
type CreateOrgMembershipInput struct {
	Role           *enums.Role
	OrganizationID string
	UserID         string
	EventIDs       []string
}

// Mutate applies the CreateOrgMembershipInput on the OrgMembershipMutation builder.
func (i *CreateOrgMembershipInput) Mutate(m *OrgMembershipMutation) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	m.SetOrganizationID(i.OrganizationID)
	m.SetUserID(i.UserID)
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
}

// SetInput applies the change-set in the CreateOrgMembershipInput on the OrgMembershipCreate builder.
func (c *OrgMembershipCreate) SetInput(i CreateOrgMembershipInput) *OrgMembershipCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrgMembershipInput represents a mutation input for updating orgmemberships.
type UpdateOrgMembershipInput struct {
	Role           *enums.Role
	ClearEvents    bool
	AddEventIDs    []string
	RemoveEventIDs []string
}

// Mutate applies the UpdateOrgMembershipInput on the OrgMembershipMutation builder.
func (i *UpdateOrgMembershipInput) Mutate(m *OrgMembershipMutation) {
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateOrgMembershipInput on the OrgMembershipUpdate builder.
func (c *OrgMembershipUpdate) SetInput(i UpdateOrgMembershipInput) *OrgMembershipUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrgMembershipInput on the OrgMembershipUpdateOne builder.
func (c *OrgMembershipUpdateOne) SetInput(i UpdateOrgMembershipInput) *OrgMembershipUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrganizationInput represents a mutation input for creating organizations.
type CreateOrganizationInput struct {
	Tags                       []string
	Name                       string
	DisplayName                *string
	Description                *string
	PersonalOrg                *bool
	AvatarRemoteURL            *string
	DedicatedDb                *bool
	ParentID                   *string
	GroupIDs                   []string
	TemplateIDs                []string
	IntegrationIDs             []string
	SettingID                  *string
	DocumentdatumIDs           []string
	EntitlementIDs             []string
	OrganizationEntitlementIDs []string
	PersonalAccessTokenIDs     []string
	APITokenIDs                []string
	OauthproviderIDs           []string
	UserIDs                    []string
	InviteIDs                  []string
	SubscriberIDs              []string
	WebhookIDs                 []string
	EventIDs                   []string
	SecretIDs                  []string
	FeatureIDs                 []string
	FileIDs                    []string
	EntitlementplanIDs         []string
	EntityIDs                  []string
	EntitytypeIDs              []string
	ContactIDs                 []string
	NoteIDs                    []string
	TaskIDs                    []string
	ProgramIDs                 []string
}

// Mutate applies the CreateOrganizationInput on the OrganizationMutation builder.
func (i *CreateOrganizationInput) Mutate(m *OrganizationMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.PersonalOrg; v != nil {
		m.SetPersonalOrg(*v)
	}
	if v := i.AvatarRemoteURL; v != nil {
		m.SetAvatarRemoteURL(*v)
	}
	if v := i.DedicatedDb; v != nil {
		m.SetDedicatedDb(*v)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
	if v := i.GroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.TemplateIDs; len(v) > 0 {
		m.AddTemplateIDs(v...)
	}
	if v := i.IntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.SettingID; v != nil {
		m.SetSettingID(*v)
	}
	if v := i.DocumentdatumIDs; len(v) > 0 {
		m.AddDocumentdatumIDs(v...)
	}
	if v := i.EntitlementIDs; len(v) > 0 {
		m.AddEntitlementIDs(v...)
	}
	if v := i.OrganizationEntitlementIDs; len(v) > 0 {
		m.AddOrganizationEntitlementIDs(v...)
	}
	if v := i.PersonalAccessTokenIDs; len(v) > 0 {
		m.AddPersonalAccessTokenIDs(v...)
	}
	if v := i.APITokenIDs; len(v) > 0 {
		m.AddAPITokenIDs(v...)
	}
	if v := i.OauthproviderIDs; len(v) > 0 {
		m.AddOauthproviderIDs(v...)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.InviteIDs; len(v) > 0 {
		m.AddInviteIDs(v...)
	}
	if v := i.SubscriberIDs; len(v) > 0 {
		m.AddSubscriberIDs(v...)
	}
	if v := i.WebhookIDs; len(v) > 0 {
		m.AddWebhookIDs(v...)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.SecretIDs; len(v) > 0 {
		m.AddSecretIDs(v...)
	}
	if v := i.FeatureIDs; len(v) > 0 {
		m.AddFeatureIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.EntitlementplanIDs; len(v) > 0 {
		m.AddEntitlementplanIDs(v...)
	}
	if v := i.EntityIDs; len(v) > 0 {
		m.AddEntityIDs(v...)
	}
	if v := i.EntitytypeIDs; len(v) > 0 {
		m.AddEntitytypeIDs(v...)
	}
	if v := i.ContactIDs; len(v) > 0 {
		m.AddContactIDs(v...)
	}
	if v := i.NoteIDs; len(v) > 0 {
		m.AddNoteIDs(v...)
	}
	if v := i.TaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateOrganizationInput on the OrganizationCreate builder.
func (c *OrganizationCreate) SetInput(i CreateOrganizationInput) *OrganizationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrganizationInput represents a mutation input for updating organizations.
type UpdateOrganizationInput struct {
	ClearTags                        bool
	Tags                             []string
	AppendTags                       []string
	Name                             *string
	DisplayName                      *string
	ClearDescription                 bool
	Description                      *string
	ClearAvatarRemoteURL             bool
	AvatarRemoteURL                  *string
	ClearGroups                      bool
	AddGroupIDs                      []string
	RemoveGroupIDs                   []string
	ClearTemplates                   bool
	AddTemplateIDs                   []string
	RemoveTemplateIDs                []string
	ClearIntegrations                bool
	AddIntegrationIDs                []string
	RemoveIntegrationIDs             []string
	ClearSetting                     bool
	SettingID                        *string
	ClearDocumentdata                bool
	AddDocumentdatumIDs              []string
	RemoveDocumentdatumIDs           []string
	ClearEntitlements                bool
	AddEntitlementIDs                []string
	RemoveEntitlementIDs             []string
	ClearOrganizationEntitlement     bool
	AddOrganizationEntitlementIDs    []string
	RemoveOrganizationEntitlementIDs []string
	ClearPersonalAccessTokens        bool
	AddPersonalAccessTokenIDs        []string
	RemovePersonalAccessTokenIDs     []string
	ClearAPITokens                   bool
	AddAPITokenIDs                   []string
	RemoveAPITokenIDs                []string
	ClearOauthprovider               bool
	AddOauthproviderIDs              []string
	RemoveOauthproviderIDs           []string
	ClearUsers                       bool
	AddUserIDs                       []string
	RemoveUserIDs                    []string
	ClearInvites                     bool
	AddInviteIDs                     []string
	RemoveInviteIDs                  []string
	ClearSubscribers                 bool
	AddSubscriberIDs                 []string
	RemoveSubscriberIDs              []string
	ClearWebhooks                    bool
	AddWebhookIDs                    []string
	RemoveWebhookIDs                 []string
	ClearEvents                      bool
	AddEventIDs                      []string
	RemoveEventIDs                   []string
	ClearSecrets                     bool
	AddSecretIDs                     []string
	RemoveSecretIDs                  []string
	ClearFeatures                    bool
	AddFeatureIDs                    []string
	RemoveFeatureIDs                 []string
	ClearFiles                       bool
	AddFileIDs                       []string
	RemoveFileIDs                    []string
	ClearEntitlementplans            bool
	AddEntitlementplanIDs            []string
	RemoveEntitlementplanIDs         []string
	ClearEntities                    bool
	AddEntityIDs                     []string
	RemoveEntityIDs                  []string
	ClearEntitytypes                 bool
	AddEntitytypeIDs                 []string
	RemoveEntitytypeIDs              []string
	ClearContacts                    bool
	AddContactIDs                    []string
	RemoveContactIDs                 []string
	ClearNotes                       bool
	AddNoteIDs                       []string
	RemoveNoteIDs                    []string
	ClearTasks                       bool
	AddTaskIDs                       []string
	RemoveTaskIDs                    []string
	ClearPrograms                    bool
	AddProgramIDs                    []string
	RemoveProgramIDs                 []string
}

// Mutate applies the UpdateOrganizationInput on the OrganizationMutation builder.
func (i *UpdateOrganizationInput) Mutate(m *OrganizationMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearAvatarRemoteURL {
		m.ClearAvatarRemoteURL()
	}
	if v := i.AvatarRemoteURL; v != nil {
		m.SetAvatarRemoteURL(*v)
	}
	if i.ClearGroups {
		m.ClearGroups()
	}
	if v := i.AddGroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.RemoveGroupIDs; len(v) > 0 {
		m.RemoveGroupIDs(v...)
	}
	if i.ClearTemplates {
		m.ClearTemplates()
	}
	if v := i.AddTemplateIDs; len(v) > 0 {
		m.AddTemplateIDs(v...)
	}
	if v := i.RemoveTemplateIDs; len(v) > 0 {
		m.RemoveTemplateIDs(v...)
	}
	if i.ClearIntegrations {
		m.ClearIntegrations()
	}
	if v := i.AddIntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.RemoveIntegrationIDs; len(v) > 0 {
		m.RemoveIntegrationIDs(v...)
	}
	if i.ClearSetting {
		m.ClearSetting()
	}
	if v := i.SettingID; v != nil {
		m.SetSettingID(*v)
	}
	if i.ClearDocumentdata {
		m.ClearDocumentdata()
	}
	if v := i.AddDocumentdatumIDs; len(v) > 0 {
		m.AddDocumentdatumIDs(v...)
	}
	if v := i.RemoveDocumentdatumIDs; len(v) > 0 {
		m.RemoveDocumentdatumIDs(v...)
	}
	if i.ClearEntitlements {
		m.ClearEntitlements()
	}
	if v := i.AddEntitlementIDs; len(v) > 0 {
		m.AddEntitlementIDs(v...)
	}
	if v := i.RemoveEntitlementIDs; len(v) > 0 {
		m.RemoveEntitlementIDs(v...)
	}
	if i.ClearOrganizationEntitlement {
		m.ClearOrganizationEntitlement()
	}
	if v := i.AddOrganizationEntitlementIDs; len(v) > 0 {
		m.AddOrganizationEntitlementIDs(v...)
	}
	if v := i.RemoveOrganizationEntitlementIDs; len(v) > 0 {
		m.RemoveOrganizationEntitlementIDs(v...)
	}
	if i.ClearPersonalAccessTokens {
		m.ClearPersonalAccessTokens()
	}
	if v := i.AddPersonalAccessTokenIDs; len(v) > 0 {
		m.AddPersonalAccessTokenIDs(v...)
	}
	if v := i.RemovePersonalAccessTokenIDs; len(v) > 0 {
		m.RemovePersonalAccessTokenIDs(v...)
	}
	if i.ClearAPITokens {
		m.ClearAPITokens()
	}
	if v := i.AddAPITokenIDs; len(v) > 0 {
		m.AddAPITokenIDs(v...)
	}
	if v := i.RemoveAPITokenIDs; len(v) > 0 {
		m.RemoveAPITokenIDs(v...)
	}
	if i.ClearOauthprovider {
		m.ClearOauthprovider()
	}
	if v := i.AddOauthproviderIDs; len(v) > 0 {
		m.AddOauthproviderIDs(v...)
	}
	if v := i.RemoveOauthproviderIDs; len(v) > 0 {
		m.RemoveOauthproviderIDs(v...)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearInvites {
		m.ClearInvites()
	}
	if v := i.AddInviteIDs; len(v) > 0 {
		m.AddInviteIDs(v...)
	}
	if v := i.RemoveInviteIDs; len(v) > 0 {
		m.RemoveInviteIDs(v...)
	}
	if i.ClearSubscribers {
		m.ClearSubscribers()
	}
	if v := i.AddSubscriberIDs; len(v) > 0 {
		m.AddSubscriberIDs(v...)
	}
	if v := i.RemoveSubscriberIDs; len(v) > 0 {
		m.RemoveSubscriberIDs(v...)
	}
	if i.ClearWebhooks {
		m.ClearWebhooks()
	}
	if v := i.AddWebhookIDs; len(v) > 0 {
		m.AddWebhookIDs(v...)
	}
	if v := i.RemoveWebhookIDs; len(v) > 0 {
		m.RemoveWebhookIDs(v...)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
	if i.ClearSecrets {
		m.ClearSecrets()
	}
	if v := i.AddSecretIDs; len(v) > 0 {
		m.AddSecretIDs(v...)
	}
	if v := i.RemoveSecretIDs; len(v) > 0 {
		m.RemoveSecretIDs(v...)
	}
	if i.ClearFeatures {
		m.ClearFeatures()
	}
	if v := i.AddFeatureIDs; len(v) > 0 {
		m.AddFeatureIDs(v...)
	}
	if v := i.RemoveFeatureIDs; len(v) > 0 {
		m.RemoveFeatureIDs(v...)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
	if i.ClearEntitlementplans {
		m.ClearEntitlementplans()
	}
	if v := i.AddEntitlementplanIDs; len(v) > 0 {
		m.AddEntitlementplanIDs(v...)
	}
	if v := i.RemoveEntitlementplanIDs; len(v) > 0 {
		m.RemoveEntitlementplanIDs(v...)
	}
	if i.ClearEntities {
		m.ClearEntities()
	}
	if v := i.AddEntityIDs; len(v) > 0 {
		m.AddEntityIDs(v...)
	}
	if v := i.RemoveEntityIDs; len(v) > 0 {
		m.RemoveEntityIDs(v...)
	}
	if i.ClearEntitytypes {
		m.ClearEntitytypes()
	}
	if v := i.AddEntitytypeIDs; len(v) > 0 {
		m.AddEntitytypeIDs(v...)
	}
	if v := i.RemoveEntitytypeIDs; len(v) > 0 {
		m.RemoveEntitytypeIDs(v...)
	}
	if i.ClearContacts {
		m.ClearContacts()
	}
	if v := i.AddContactIDs; len(v) > 0 {
		m.AddContactIDs(v...)
	}
	if v := i.RemoveContactIDs; len(v) > 0 {
		m.RemoveContactIDs(v...)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.AddNoteIDs; len(v) > 0 {
		m.AddNoteIDs(v...)
	}
	if v := i.RemoveNoteIDs; len(v) > 0 {
		m.RemoveNoteIDs(v...)
	}
	if i.ClearTasks {
		m.ClearTasks()
	}
	if v := i.AddTaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.RemoveTaskIDs; len(v) > 0 {
		m.RemoveTaskIDs(v...)
	}
	if i.ClearPrograms {
		m.ClearPrograms()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdate builder.
func (c *OrganizationUpdate) SetInput(i UpdateOrganizationInput) *OrganizationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdateOne builder.
func (c *OrganizationUpdateOne) SetInput(i UpdateOrganizationInput) *OrganizationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrganizationSettingInput represents a mutation input for creating organizationsettings.
type CreateOrganizationSettingInput struct {
	Tags           []string
	Domains        []string
	BillingContact *string
	BillingEmail   *string
	BillingPhone   *string
	BillingAddress *string
	TaxIdentifier  *string
	GeoLocation    *enums.Region
	OrganizationID *string
	FileIDs        []string
}

// Mutate applies the CreateOrganizationSettingInput on the OrganizationSettingMutation builder.
func (i *CreateOrganizationSettingInput) Mutate(m *OrganizationSettingMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.Domains; v != nil {
		m.SetDomains(v)
	}
	if v := i.BillingContact; v != nil {
		m.SetBillingContact(*v)
	}
	if v := i.BillingEmail; v != nil {
		m.SetBillingEmail(*v)
	}
	if v := i.BillingPhone; v != nil {
		m.SetBillingPhone(*v)
	}
	if v := i.BillingAddress; v != nil {
		m.SetBillingAddress(*v)
	}
	if v := i.TaxIdentifier; v != nil {
		m.SetTaxIdentifier(*v)
	}
	if v := i.GeoLocation; v != nil {
		m.SetGeoLocation(*v)
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
}

// SetInput applies the change-set in the CreateOrganizationSettingInput on the OrganizationSettingCreate builder.
func (c *OrganizationSettingCreate) SetInput(i CreateOrganizationSettingInput) *OrganizationSettingCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrganizationSettingInput represents a mutation input for updating organizationsettings.
type UpdateOrganizationSettingInput struct {
	ClearTags           bool
	Tags                []string
	AppendTags          []string
	ClearDomains        bool
	Domains             []string
	AppendDomains       []string
	ClearBillingContact bool
	BillingContact      *string
	ClearBillingEmail   bool
	BillingEmail        *string
	ClearBillingPhone   bool
	BillingPhone        *string
	ClearBillingAddress bool
	BillingAddress      *string
	ClearTaxIdentifier  bool
	TaxIdentifier       *string
	ClearGeoLocation    bool
	GeoLocation         *enums.Region
	ClearOrganization   bool
	OrganizationID      *string
	ClearFiles          bool
	AddFileIDs          []string
	RemoveFileIDs       []string
}

// Mutate applies the UpdateOrganizationSettingInput on the OrganizationSettingMutation builder.
func (i *UpdateOrganizationSettingInput) Mutate(m *OrganizationSettingMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if i.ClearDomains {
		m.ClearDomains()
	}
	if v := i.Domains; v != nil {
		m.SetDomains(v)
	}
	if i.AppendDomains != nil {
		m.AppendDomains(i.Domains)
	}
	if i.ClearBillingContact {
		m.ClearBillingContact()
	}
	if v := i.BillingContact; v != nil {
		m.SetBillingContact(*v)
	}
	if i.ClearBillingEmail {
		m.ClearBillingEmail()
	}
	if v := i.BillingEmail; v != nil {
		m.SetBillingEmail(*v)
	}
	if i.ClearBillingPhone {
		m.ClearBillingPhone()
	}
	if v := i.BillingPhone; v != nil {
		m.SetBillingPhone(*v)
	}
	if i.ClearBillingAddress {
		m.ClearBillingAddress()
	}
	if v := i.BillingAddress; v != nil {
		m.SetBillingAddress(*v)
	}
	if i.ClearTaxIdentifier {
		m.ClearTaxIdentifier()
	}
	if v := i.TaxIdentifier; v != nil {
		m.SetTaxIdentifier(*v)
	}
	if i.ClearGeoLocation {
		m.ClearGeoLocation()
	}
	if v := i.GeoLocation; v != nil {
		m.SetGeoLocation(*v)
	}
	if i.ClearOrganization {
		m.ClearOrganization()
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateOrganizationSettingInput on the OrganizationSettingUpdate builder.
func (c *OrganizationSettingUpdate) SetInput(i UpdateOrganizationSettingInput) *OrganizationSettingUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrganizationSettingInput on the OrganizationSettingUpdateOne builder.
func (c *OrganizationSettingUpdateOne) SetInput(i UpdateOrganizationSettingInput) *OrganizationSettingUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePersonalAccessTokenInput represents a mutation input for creating personalaccesstokens.
type CreatePersonalAccessTokenInput struct {
	Tags            []string
	Name            string
	ExpiresAt       *time.Time
	Description     *string
	Scopes          []string
	LastUsedAt      *time.Time
	OwnerID         string
	OrganizationIDs []string
	EventIDs        []string
}

// Mutate applies the CreatePersonalAccessTokenInput on the PersonalAccessTokenMutation builder.
func (i *CreatePersonalAccessTokenInput) Mutate(m *PersonalAccessTokenMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.ExpiresAt; v != nil {
		m.SetExpiresAt(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	if v := i.LastUsedAt; v != nil {
		m.SetLastUsedAt(*v)
	}
	m.SetOwnerID(i.OwnerID)
	if v := i.OrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePersonalAccessTokenInput on the PersonalAccessTokenCreate builder.
func (c *PersonalAccessTokenCreate) SetInput(i CreatePersonalAccessTokenInput) *PersonalAccessTokenCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePersonalAccessTokenInput represents a mutation input for updating personalaccesstokens.
type UpdatePersonalAccessTokenInput struct {
	ClearTags             bool
	Tags                  []string
	AppendTags            []string
	Name                  *string
	ClearDescription      bool
	Description           *string
	ClearScopes           bool
	Scopes                []string
	AppendScopes          []string
	ClearLastUsedAt       bool
	LastUsedAt            *time.Time
	ClearOrganizations    bool
	AddOrganizationIDs    []string
	RemoveOrganizationIDs []string
	ClearEvents           bool
	AddEventIDs           []string
	RemoveEventIDs        []string
}

// Mutate applies the UpdatePersonalAccessTokenInput on the PersonalAccessTokenMutation builder.
func (i *UpdatePersonalAccessTokenInput) Mutate(m *PersonalAccessTokenMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearScopes {
		m.ClearScopes()
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(v)
	}
	if i.AppendScopes != nil {
		m.AppendScopes(i.Scopes)
	}
	if i.ClearLastUsedAt {
		m.ClearLastUsedAt()
	}
	if v := i.LastUsedAt; v != nil {
		m.SetLastUsedAt(*v)
	}
	if i.ClearOrganizations {
		m.ClearOrganizations()
	}
	if v := i.AddOrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.RemoveOrganizationIDs; len(v) > 0 {
		m.RemoveOrganizationIDs(v...)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePersonalAccessTokenInput on the PersonalAccessTokenUpdate builder.
func (c *PersonalAccessTokenUpdate) SetInput(i UpdatePersonalAccessTokenInput) *PersonalAccessTokenUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePersonalAccessTokenInput on the PersonalAccessTokenUpdateOne builder.
func (c *PersonalAccessTokenUpdateOne) SetInput(i UpdatePersonalAccessTokenInput) *PersonalAccessTokenUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProcedureInput represents a mutation input for creating procedures.
type CreateProcedureInput struct {
	Tags              []string
	Name              string
	Description       *string
	Status            *string
	ProcedureType     *string
	Version           *string
	PurposeAndScope   *string
	Background        *string
	Satisfies         *string
	Details           map[string]interface{}
	ControlIDs        []string
	InternalpolicyIDs []string
	NarrativeIDs      []string
	RiskIDs           []string
	TaskIDs           []string
	ProgramIDs        []string
}

// Mutate applies the CreateProcedureInput on the ProcedureMutation builder.
func (i *CreateProcedureInput) Mutate(m *ProcedureMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.ProcedureType; v != nil {
		m.SetProcedureType(*v)
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if v := i.PurposeAndScope; v != nil {
		m.SetPurposeAndScope(*v)
	}
	if v := i.Background; v != nil {
		m.SetBackground(*v)
	}
	if v := i.Satisfies; v != nil {
		m.SetSatisfies(*v)
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if v := i.ControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.InternalpolicyIDs; len(v) > 0 {
		m.AddInternalpolicyIDs(v...)
	}
	if v := i.NarrativeIDs; len(v) > 0 {
		m.AddNarrativeIDs(v...)
	}
	if v := i.RiskIDs; len(v) > 0 {
		m.AddRiskIDs(v...)
	}
	if v := i.TaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProcedureInput on the ProcedureCreate builder.
func (c *ProcedureCreate) SetInput(i CreateProcedureInput) *ProcedureCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProcedureInput represents a mutation input for updating procedures.
type UpdateProcedureInput struct {
	ClearTags               bool
	Tags                    []string
	AppendTags              []string
	Name                    *string
	ClearDescription        bool
	Description             *string
	ClearStatus             bool
	Status                  *string
	ClearProcedureType      bool
	ProcedureType           *string
	ClearVersion            bool
	Version                 *string
	ClearPurposeAndScope    bool
	PurposeAndScope         *string
	ClearBackground         bool
	Background              *string
	ClearSatisfies          bool
	Satisfies               *string
	ClearDetails            bool
	Details                 map[string]interface{}
	ClearControl            bool
	AddControlIDs           []string
	RemoveControlIDs        []string
	ClearInternalpolicy     bool
	AddInternalpolicyIDs    []string
	RemoveInternalpolicyIDs []string
	ClearNarratives         bool
	AddNarrativeIDs         []string
	RemoveNarrativeIDs      []string
	ClearRisks              bool
	AddRiskIDs              []string
	RemoveRiskIDs           []string
	ClearTasks              bool
	AddTaskIDs              []string
	RemoveTaskIDs           []string
	ClearPrograms           bool
	AddProgramIDs           []string
	RemoveProgramIDs        []string
}

// Mutate applies the UpdateProcedureInput on the ProcedureMutation builder.
func (i *UpdateProcedureInput) Mutate(m *ProcedureMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearProcedureType {
		m.ClearProcedureType()
	}
	if v := i.ProcedureType; v != nil {
		m.SetProcedureType(*v)
	}
	if i.ClearVersion {
		m.ClearVersion()
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if i.ClearPurposeAndScope {
		m.ClearPurposeAndScope()
	}
	if v := i.PurposeAndScope; v != nil {
		m.SetPurposeAndScope(*v)
	}
	if i.ClearBackground {
		m.ClearBackground()
	}
	if v := i.Background; v != nil {
		m.SetBackground(*v)
	}
	if i.ClearSatisfies {
		m.ClearSatisfies()
	}
	if v := i.Satisfies; v != nil {
		m.SetSatisfies(*v)
	}
	if i.ClearDetails {
		m.ClearDetails()
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if i.ClearControl {
		m.ClearControl()
	}
	if v := i.AddControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.RemoveControlIDs; len(v) > 0 {
		m.RemoveControlIDs(v...)
	}
	if i.ClearInternalpolicy {
		m.ClearInternalpolicy()
	}
	if v := i.AddInternalpolicyIDs; len(v) > 0 {
		m.AddInternalpolicyIDs(v...)
	}
	if v := i.RemoveInternalpolicyIDs; len(v) > 0 {
		m.RemoveInternalpolicyIDs(v...)
	}
	if i.ClearNarratives {
		m.ClearNarratives()
	}
	if v := i.AddNarrativeIDs; len(v) > 0 {
		m.AddNarrativeIDs(v...)
	}
	if v := i.RemoveNarrativeIDs; len(v) > 0 {
		m.RemoveNarrativeIDs(v...)
	}
	if i.ClearRisks {
		m.ClearRisks()
	}
	if v := i.AddRiskIDs; len(v) > 0 {
		m.AddRiskIDs(v...)
	}
	if v := i.RemoveRiskIDs; len(v) > 0 {
		m.RemoveRiskIDs(v...)
	}
	if i.ClearTasks {
		m.ClearTasks()
	}
	if v := i.AddTaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.RemoveTaskIDs; len(v) > 0 {
		m.RemoveTaskIDs(v...)
	}
	if i.ClearPrograms {
		m.ClearPrograms()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProcedureInput on the ProcedureUpdate builder.
func (c *ProcedureUpdate) SetInput(i UpdateProcedureInput) *ProcedureUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProcedureInput on the ProcedureUpdateOne builder.
func (c *ProcedureUpdateOne) SetInput(i UpdateProcedureInput) *ProcedureUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateProgramInput represents a mutation input for creating programs.
type CreateProgramInput struct {
	Tags                 []string
	Name                 string
	Description          *string
	Status               *enums.ProgramStatus
	StartDate            *time.Time
	EndDate              *time.Time
	AuditorReady         *bool
	AuditorWriteComments *bool
	AuditorReadComments  *bool
	OrganizationID       string
	ControlIDs           []string
	SubcontrolIDs        []string
	ControlobjectiveIDs  []string
	PolicyIDs            []string
	ProcedureIDs         []string
	RiskIDs              []string
	TaskIDs              []string
	NoteIDs              []string
	FileIDs              []string
	NarrativeIDs         []string
	ActionplanIDs        []string
	StandardIDs          []string
	UserIDs              []string
}

// Mutate applies the CreateProgramInput on the ProgramMutation builder.
func (i *CreateProgramInput) Mutate(m *ProgramMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.StartDate; v != nil {
		m.SetStartDate(*v)
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if v := i.AuditorReady; v != nil {
		m.SetAuditorReady(*v)
	}
	if v := i.AuditorWriteComments; v != nil {
		m.SetAuditorWriteComments(*v)
	}
	if v := i.AuditorReadComments; v != nil {
		m.SetAuditorReadComments(*v)
	}
	m.SetOrganizationID(i.OrganizationID)
	if v := i.ControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.SubcontrolIDs; len(v) > 0 {
		m.AddSubcontrolIDs(v...)
	}
	if v := i.ControlobjectiveIDs; len(v) > 0 {
		m.AddControlobjectiveIDs(v...)
	}
	if v := i.PolicyIDs; len(v) > 0 {
		m.AddPolicyIDs(v...)
	}
	if v := i.ProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.RiskIDs; len(v) > 0 {
		m.AddRiskIDs(v...)
	}
	if v := i.TaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.NoteIDs; len(v) > 0 {
		m.AddNoteIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.NarrativeIDs; len(v) > 0 {
		m.AddNarrativeIDs(v...)
	}
	if v := i.ActionplanIDs; len(v) > 0 {
		m.AddActionplanIDs(v...)
	}
	if v := i.StandardIDs; len(v) > 0 {
		m.AddStandardIDs(v...)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
}

// SetInput applies the change-set in the CreateProgramInput on the ProgramCreate builder.
func (c *ProgramCreate) SetInput(i CreateProgramInput) *ProgramCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateProgramInput represents a mutation input for updating programs.
type UpdateProgramInput struct {
	ClearTags                 bool
	Tags                      []string
	AppendTags                []string
	Name                      *string
	ClearDescription          bool
	Description               *string
	Status                    *enums.ProgramStatus
	ClearStartDate            bool
	StartDate                 *time.Time
	ClearEndDate              bool
	EndDate                   *time.Time
	AuditorReady              *bool
	AuditorWriteComments      *bool
	AuditorReadComments       *bool
	OrganizationID            *string
	ClearControls             bool
	AddControlIDs             []string
	RemoveControlIDs          []string
	ClearSubcontrols          bool
	AddSubcontrolIDs          []string
	RemoveSubcontrolIDs       []string
	ClearControlobjectives    bool
	AddControlobjectiveIDs    []string
	RemoveControlobjectiveIDs []string
	ClearPolicies             bool
	AddPolicyIDs              []string
	RemovePolicyIDs           []string
	ClearProcedures           bool
	AddProcedureIDs           []string
	RemoveProcedureIDs        []string
	ClearRisks                bool
	AddRiskIDs                []string
	RemoveRiskIDs             []string
	ClearTasks                bool
	AddTaskIDs                []string
	RemoveTaskIDs             []string
	ClearNotes                bool
	AddNoteIDs                []string
	RemoveNoteIDs             []string
	ClearFiles                bool
	AddFileIDs                []string
	RemoveFileIDs             []string
	ClearNarratives           bool
	AddNarrativeIDs           []string
	RemoveNarrativeIDs        []string
	ClearActionplans          bool
	AddActionplanIDs          []string
	RemoveActionplanIDs       []string
	ClearStandards            bool
	AddStandardIDs            []string
	RemoveStandardIDs         []string
	ClearUsers                bool
	AddUserIDs                []string
	RemoveUserIDs             []string
}

// Mutate applies the UpdateProgramInput on the ProgramMutation builder.
func (i *UpdateProgramInput) Mutate(m *ProgramMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearStartDate {
		m.ClearStartDate()
	}
	if v := i.StartDate; v != nil {
		m.SetStartDate(*v)
	}
	if i.ClearEndDate {
		m.ClearEndDate()
	}
	if v := i.EndDate; v != nil {
		m.SetEndDate(*v)
	}
	if v := i.AuditorReady; v != nil {
		m.SetAuditorReady(*v)
	}
	if v := i.AuditorWriteComments; v != nil {
		m.SetAuditorWriteComments(*v)
	}
	if v := i.AuditorReadComments; v != nil {
		m.SetAuditorReadComments(*v)
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
	if i.ClearControls {
		m.ClearControls()
	}
	if v := i.AddControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.RemoveControlIDs; len(v) > 0 {
		m.RemoveControlIDs(v...)
	}
	if i.ClearSubcontrols {
		m.ClearSubcontrols()
	}
	if v := i.AddSubcontrolIDs; len(v) > 0 {
		m.AddSubcontrolIDs(v...)
	}
	if v := i.RemoveSubcontrolIDs; len(v) > 0 {
		m.RemoveSubcontrolIDs(v...)
	}
	if i.ClearControlobjectives {
		m.ClearControlobjectives()
	}
	if v := i.AddControlobjectiveIDs; len(v) > 0 {
		m.AddControlobjectiveIDs(v...)
	}
	if v := i.RemoveControlobjectiveIDs; len(v) > 0 {
		m.RemoveControlobjectiveIDs(v...)
	}
	if i.ClearPolicies {
		m.ClearPolicies()
	}
	if v := i.AddPolicyIDs; len(v) > 0 {
		m.AddPolicyIDs(v...)
	}
	if v := i.RemovePolicyIDs; len(v) > 0 {
		m.RemovePolicyIDs(v...)
	}
	if i.ClearProcedures {
		m.ClearProcedures()
	}
	if v := i.AddProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.RemoveProcedureIDs; len(v) > 0 {
		m.RemoveProcedureIDs(v...)
	}
	if i.ClearRisks {
		m.ClearRisks()
	}
	if v := i.AddRiskIDs; len(v) > 0 {
		m.AddRiskIDs(v...)
	}
	if v := i.RemoveRiskIDs; len(v) > 0 {
		m.RemoveRiskIDs(v...)
	}
	if i.ClearTasks {
		m.ClearTasks()
	}
	if v := i.AddTaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.RemoveTaskIDs; len(v) > 0 {
		m.RemoveTaskIDs(v...)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.AddNoteIDs; len(v) > 0 {
		m.AddNoteIDs(v...)
	}
	if v := i.RemoveNoteIDs; len(v) > 0 {
		m.RemoveNoteIDs(v...)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
	if i.ClearNarratives {
		m.ClearNarratives()
	}
	if v := i.AddNarrativeIDs; len(v) > 0 {
		m.AddNarrativeIDs(v...)
	}
	if v := i.RemoveNarrativeIDs; len(v) > 0 {
		m.RemoveNarrativeIDs(v...)
	}
	if i.ClearActionplans {
		m.ClearActionplans()
	}
	if v := i.AddActionplanIDs; len(v) > 0 {
		m.AddActionplanIDs(v...)
	}
	if v := i.RemoveActionplanIDs; len(v) > 0 {
		m.RemoveActionplanIDs(v...)
	}
	if i.ClearStandards {
		m.ClearStandards()
	}
	if v := i.AddStandardIDs; len(v) > 0 {
		m.AddStandardIDs(v...)
	}
	if v := i.RemoveStandardIDs; len(v) > 0 {
		m.RemoveStandardIDs(v...)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateProgramInput on the ProgramUpdate builder.
func (c *ProgramUpdate) SetInput(i UpdateProgramInput) *ProgramUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateProgramInput on the ProgramUpdateOne builder.
func (c *ProgramUpdateOne) SetInput(i UpdateProgramInput) *ProgramUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateRiskInput represents a mutation input for creating risks.
type CreateRiskInput struct {
	Tags          []string
	Name          string
	Description   *string
	Status        *string
	RiskType      *string
	BusinessCosts *string
	Impact        *enums.RiskImpact
	Likelihood    *enums.RiskLikelihood
	Mitigation    *string
	Satisfies     *string
	Details       map[string]interface{}
	ControlIDs    []string
	ProcedureIDs  []string
	ActionplanIDs []string
	ProgramIDs    []string
}

// Mutate applies the CreateRiskInput on the RiskMutation builder.
func (i *CreateRiskInput) Mutate(m *RiskMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.RiskType; v != nil {
		m.SetRiskType(*v)
	}
	if v := i.BusinessCosts; v != nil {
		m.SetBusinessCosts(*v)
	}
	if v := i.Impact; v != nil {
		m.SetImpact(*v)
	}
	if v := i.Likelihood; v != nil {
		m.SetLikelihood(*v)
	}
	if v := i.Mitigation; v != nil {
		m.SetMitigation(*v)
	}
	if v := i.Satisfies; v != nil {
		m.SetSatisfies(*v)
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if v := i.ControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.ProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.ActionplanIDs; len(v) > 0 {
		m.AddActionplanIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRiskInput on the RiskCreate builder.
func (c *RiskCreate) SetInput(i CreateRiskInput) *RiskCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateRiskInput represents a mutation input for updating risks.
type UpdateRiskInput struct {
	ClearTags           bool
	Tags                []string
	AppendTags          []string
	Name                *string
	ClearDescription    bool
	Description         *string
	ClearStatus         bool
	Status              *string
	ClearRiskType       bool
	RiskType            *string
	ClearBusinessCosts  bool
	BusinessCosts       *string
	ClearImpact         bool
	Impact              *enums.RiskImpact
	ClearLikelihood     bool
	Likelihood          *enums.RiskLikelihood
	ClearMitigation     bool
	Mitigation          *string
	ClearSatisfies      bool
	Satisfies           *string
	ClearDetails        bool
	Details             map[string]interface{}
	ClearControl        bool
	AddControlIDs       []string
	RemoveControlIDs    []string
	ClearProcedure      bool
	AddProcedureIDs     []string
	RemoveProcedureIDs  []string
	ClearActionplans    bool
	AddActionplanIDs    []string
	RemoveActionplanIDs []string
	ClearProgram        bool
	AddProgramIDs       []string
	RemoveProgramIDs    []string
}

// Mutate applies the UpdateRiskInput on the RiskMutation builder.
func (i *UpdateRiskInput) Mutate(m *RiskMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearRiskType {
		m.ClearRiskType()
	}
	if v := i.RiskType; v != nil {
		m.SetRiskType(*v)
	}
	if i.ClearBusinessCosts {
		m.ClearBusinessCosts()
	}
	if v := i.BusinessCosts; v != nil {
		m.SetBusinessCosts(*v)
	}
	if i.ClearImpact {
		m.ClearImpact()
	}
	if v := i.Impact; v != nil {
		m.SetImpact(*v)
	}
	if i.ClearLikelihood {
		m.ClearLikelihood()
	}
	if v := i.Likelihood; v != nil {
		m.SetLikelihood(*v)
	}
	if i.ClearMitigation {
		m.ClearMitigation()
	}
	if v := i.Mitigation; v != nil {
		m.SetMitigation(*v)
	}
	if i.ClearSatisfies {
		m.ClearSatisfies()
	}
	if v := i.Satisfies; v != nil {
		m.SetSatisfies(*v)
	}
	if i.ClearDetails {
		m.ClearDetails()
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if i.ClearControl {
		m.ClearControl()
	}
	if v := i.AddControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.RemoveControlIDs; len(v) > 0 {
		m.RemoveControlIDs(v...)
	}
	if i.ClearProcedure {
		m.ClearProcedure()
	}
	if v := i.AddProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.RemoveProcedureIDs; len(v) > 0 {
		m.RemoveProcedureIDs(v...)
	}
	if i.ClearActionplans {
		m.ClearActionplans()
	}
	if v := i.AddActionplanIDs; len(v) > 0 {
		m.AddActionplanIDs(v...)
	}
	if v := i.RemoveActionplanIDs; len(v) > 0 {
		m.RemoveActionplanIDs(v...)
	}
	if i.ClearProgram {
		m.ClearProgram()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateRiskInput on the RiskUpdate builder.
func (c *RiskUpdate) SetInput(i UpdateRiskInput) *RiskUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateRiskInput on the RiskUpdateOne builder.
func (c *RiskUpdateOne) SetInput(i UpdateRiskInput) *RiskUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateStandardInput represents a mutation input for creating standards.
type CreateStandardInput struct {
	Tags                []string
	Name                string
	Description         *string
	Family              *string
	Status              *string
	StandardType        *string
	Version             *string
	PurposeAndScope     *string
	Background          *string
	Satisfies           *string
	Details             map[string]interface{}
	ControlobjectiveIDs []string
	ControlIDs          []string
	ProcedureIDs        []string
	ActionplanIDs       []string
	ProgramIDs          []string
}

// Mutate applies the CreateStandardInput on the StandardMutation builder.
func (i *CreateStandardInput) Mutate(m *StandardMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Family; v != nil {
		m.SetFamily(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.StandardType; v != nil {
		m.SetStandardType(*v)
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if v := i.PurposeAndScope; v != nil {
		m.SetPurposeAndScope(*v)
	}
	if v := i.Background; v != nil {
		m.SetBackground(*v)
	}
	if v := i.Satisfies; v != nil {
		m.SetSatisfies(*v)
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if v := i.ControlobjectiveIDs; len(v) > 0 {
		m.AddControlobjectiveIDs(v...)
	}
	if v := i.ControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.ProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.ActionplanIDs; len(v) > 0 {
		m.AddActionplanIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateStandardInput on the StandardCreate builder.
func (c *StandardCreate) SetInput(i CreateStandardInput) *StandardCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateStandardInput represents a mutation input for updating standards.
type UpdateStandardInput struct {
	ClearTags                 bool
	Tags                      []string
	AppendTags                []string
	Name                      *string
	ClearDescription          bool
	Description               *string
	ClearFamily               bool
	Family                    *string
	ClearStatus               bool
	Status                    *string
	ClearStandardType         bool
	StandardType              *string
	ClearVersion              bool
	Version                   *string
	ClearPurposeAndScope      bool
	PurposeAndScope           *string
	ClearBackground           bool
	Background                *string
	ClearSatisfies            bool
	Satisfies                 *string
	ClearDetails              bool
	Details                   map[string]interface{}
	ClearControlobjectives    bool
	AddControlobjectiveIDs    []string
	RemoveControlobjectiveIDs []string
	ClearControls             bool
	AddControlIDs             []string
	RemoveControlIDs          []string
	ClearProcedures           bool
	AddProcedureIDs           []string
	RemoveProcedureIDs        []string
	ClearActionplans          bool
	AddActionplanIDs          []string
	RemoveActionplanIDs       []string
	ClearPrograms             bool
	AddProgramIDs             []string
	RemoveProgramIDs          []string
}

// Mutate applies the UpdateStandardInput on the StandardMutation builder.
func (i *UpdateStandardInput) Mutate(m *StandardMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearFamily {
		m.ClearFamily()
	}
	if v := i.Family; v != nil {
		m.SetFamily(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearStandardType {
		m.ClearStandardType()
	}
	if v := i.StandardType; v != nil {
		m.SetStandardType(*v)
	}
	if i.ClearVersion {
		m.ClearVersion()
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if i.ClearPurposeAndScope {
		m.ClearPurposeAndScope()
	}
	if v := i.PurposeAndScope; v != nil {
		m.SetPurposeAndScope(*v)
	}
	if i.ClearBackground {
		m.ClearBackground()
	}
	if v := i.Background; v != nil {
		m.SetBackground(*v)
	}
	if i.ClearSatisfies {
		m.ClearSatisfies()
	}
	if v := i.Satisfies; v != nil {
		m.SetSatisfies(*v)
	}
	if i.ClearDetails {
		m.ClearDetails()
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if i.ClearControlobjectives {
		m.ClearControlobjectives()
	}
	if v := i.AddControlobjectiveIDs; len(v) > 0 {
		m.AddControlobjectiveIDs(v...)
	}
	if v := i.RemoveControlobjectiveIDs; len(v) > 0 {
		m.RemoveControlobjectiveIDs(v...)
	}
	if i.ClearControls {
		m.ClearControls()
	}
	if v := i.AddControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.RemoveControlIDs; len(v) > 0 {
		m.RemoveControlIDs(v...)
	}
	if i.ClearProcedures {
		m.ClearProcedures()
	}
	if v := i.AddProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.RemoveProcedureIDs; len(v) > 0 {
		m.RemoveProcedureIDs(v...)
	}
	if i.ClearActionplans {
		m.ClearActionplans()
	}
	if v := i.AddActionplanIDs; len(v) > 0 {
		m.AddActionplanIDs(v...)
	}
	if v := i.RemoveActionplanIDs; len(v) > 0 {
		m.RemoveActionplanIDs(v...)
	}
	if i.ClearPrograms {
		m.ClearPrograms()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateStandardInput on the StandardUpdate builder.
func (c *StandardUpdate) SetInput(i UpdateStandardInput) *StandardUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateStandardInput on the StandardUpdateOne builder.
func (c *StandardUpdateOne) SetInput(i UpdateStandardInput) *StandardUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSubcontrolInput represents a mutation input for creating subcontrols.
type CreateSubcontrolInput struct {
	Tags                           []string
	Name                           string
	Description                    *string
	Status                         *string
	SubcontrolType                 *string
	Version                        *string
	SubcontrolNumber               *string
	Family                         *string
	Class                          *string
	Source                         *string
	MappedFrameworks               *string
	ImplementationEvidence         *string
	ImplementationStatus           *string
	ImplementationDate             *time.Time
	ImplementationVerification     *string
	ImplementationVerificationDate *time.Time
	Details                        map[string]interface{}
	ControlIDs                     []string
	UserIDs                        []string
	TaskIDs                        []string
	NotesID                        *string
	ProgramIDs                     []string
}

// Mutate applies the CreateSubcontrolInput on the SubcontrolMutation builder.
func (i *CreateSubcontrolInput) Mutate(m *SubcontrolMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.SubcontrolType; v != nil {
		m.SetSubcontrolType(*v)
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if v := i.SubcontrolNumber; v != nil {
		m.SetSubcontrolNumber(*v)
	}
	if v := i.Family; v != nil {
		m.SetFamily(*v)
	}
	if v := i.Class; v != nil {
		m.SetClass(*v)
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	if v := i.MappedFrameworks; v != nil {
		m.SetMappedFrameworks(*v)
	}
	if v := i.ImplementationEvidence; v != nil {
		m.SetImplementationEvidence(*v)
	}
	if v := i.ImplementationStatus; v != nil {
		m.SetImplementationStatus(*v)
	}
	if v := i.ImplementationDate; v != nil {
		m.SetImplementationDate(*v)
	}
	if v := i.ImplementationVerification; v != nil {
		m.SetImplementationVerification(*v)
	}
	if v := i.ImplementationVerificationDate; v != nil {
		m.SetImplementationVerificationDate(*v)
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if v := i.ControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.TaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.NotesID; v != nil {
		m.SetNotesID(*v)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateSubcontrolInput on the SubcontrolCreate builder.
func (c *SubcontrolCreate) SetInput(i CreateSubcontrolInput) *SubcontrolCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSubcontrolInput represents a mutation input for updating subcontrols.
type UpdateSubcontrolInput struct {
	ClearTags                           bool
	Tags                                []string
	AppendTags                          []string
	Name                                *string
	ClearDescription                    bool
	Description                         *string
	ClearStatus                         bool
	Status                              *string
	ClearSubcontrolType                 bool
	SubcontrolType                      *string
	ClearVersion                        bool
	Version                             *string
	ClearSubcontrolNumber               bool
	SubcontrolNumber                    *string
	ClearFamily                         bool
	Family                              *string
	ClearClass                          bool
	Class                               *string
	ClearSource                         bool
	Source                              *string
	ClearMappedFrameworks               bool
	MappedFrameworks                    *string
	ClearImplementationEvidence         bool
	ImplementationEvidence              *string
	ClearImplementationStatus           bool
	ImplementationStatus                *string
	ClearImplementationDate             bool
	ImplementationDate                  *time.Time
	ClearImplementationVerification     bool
	ImplementationVerification          *string
	ClearImplementationVerificationDate bool
	ImplementationVerificationDate      *time.Time
	ClearDetails                        bool
	Details                             map[string]interface{}
	ClearControl                        bool
	AddControlIDs                       []string
	RemoveControlIDs                    []string
	ClearUser                           bool
	AddUserIDs                          []string
	RemoveUserIDs                       []string
	ClearTasks                          bool
	AddTaskIDs                          []string
	RemoveTaskIDs                       []string
	ClearNotes                          bool
	NotesID                             *string
	ClearPrograms                       bool
	AddProgramIDs                       []string
	RemoveProgramIDs                    []string
}

// Mutate applies the UpdateSubcontrolInput on the SubcontrolMutation builder.
func (i *UpdateSubcontrolInput) Mutate(m *SubcontrolMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearSubcontrolType {
		m.ClearSubcontrolType()
	}
	if v := i.SubcontrolType; v != nil {
		m.SetSubcontrolType(*v)
	}
	if i.ClearVersion {
		m.ClearVersion()
	}
	if v := i.Version; v != nil {
		m.SetVersion(*v)
	}
	if i.ClearSubcontrolNumber {
		m.ClearSubcontrolNumber()
	}
	if v := i.SubcontrolNumber; v != nil {
		m.SetSubcontrolNumber(*v)
	}
	if i.ClearFamily {
		m.ClearFamily()
	}
	if v := i.Family; v != nil {
		m.SetFamily(*v)
	}
	if i.ClearClass {
		m.ClearClass()
	}
	if v := i.Class; v != nil {
		m.SetClass(*v)
	}
	if i.ClearSource {
		m.ClearSource()
	}
	if v := i.Source; v != nil {
		m.SetSource(*v)
	}
	if i.ClearMappedFrameworks {
		m.ClearMappedFrameworks()
	}
	if v := i.MappedFrameworks; v != nil {
		m.SetMappedFrameworks(*v)
	}
	if i.ClearImplementationEvidence {
		m.ClearImplementationEvidence()
	}
	if v := i.ImplementationEvidence; v != nil {
		m.SetImplementationEvidence(*v)
	}
	if i.ClearImplementationStatus {
		m.ClearImplementationStatus()
	}
	if v := i.ImplementationStatus; v != nil {
		m.SetImplementationStatus(*v)
	}
	if i.ClearImplementationDate {
		m.ClearImplementationDate()
	}
	if v := i.ImplementationDate; v != nil {
		m.SetImplementationDate(*v)
	}
	if i.ClearImplementationVerification {
		m.ClearImplementationVerification()
	}
	if v := i.ImplementationVerification; v != nil {
		m.SetImplementationVerification(*v)
	}
	if i.ClearImplementationVerificationDate {
		m.ClearImplementationVerificationDate()
	}
	if v := i.ImplementationVerificationDate; v != nil {
		m.SetImplementationVerificationDate(*v)
	}
	if i.ClearDetails {
		m.ClearDetails()
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if i.ClearControl {
		m.ClearControl()
	}
	if v := i.AddControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.RemoveControlIDs; len(v) > 0 {
		m.RemoveControlIDs(v...)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearTasks {
		m.ClearTasks()
	}
	if v := i.AddTaskIDs; len(v) > 0 {
		m.AddTaskIDs(v...)
	}
	if v := i.RemoveTaskIDs; len(v) > 0 {
		m.RemoveTaskIDs(v...)
	}
	if i.ClearNotes {
		m.ClearNotes()
	}
	if v := i.NotesID; v != nil {
		m.SetNotesID(*v)
	}
	if i.ClearPrograms {
		m.ClearPrograms()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSubcontrolInput on the SubcontrolUpdate builder.
func (c *SubcontrolUpdate) SetInput(i UpdateSubcontrolInput) *SubcontrolUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSubcontrolInput on the SubcontrolUpdateOne builder.
func (c *SubcontrolUpdateOne) SetInput(i UpdateSubcontrolInput) *SubcontrolUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateSubscriberInput represents a mutation input for creating subscribers.
type CreateSubscriberInput struct {
	Tags        []string
	Email       string
	PhoneNumber *string
	OwnerID     *string
	EventIDs    []string
}

// Mutate applies the CreateSubscriberInput on the SubscriberMutation builder.
func (i *CreateSubscriberInput) Mutate(m *SubscriberMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetEmail(i.Email)
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
}

// SetInput applies the change-set in the CreateSubscriberInput on the SubscriberCreate builder.
func (c *SubscriberCreate) SetInput(i CreateSubscriberInput) *SubscriberCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateSubscriberInput represents a mutation input for updating subscribers.
type UpdateSubscriberInput struct {
	ClearTags        bool
	Tags             []string
	AppendTags       []string
	Email            *string
	ClearPhoneNumber bool
	PhoneNumber      *string
	ClearOwner       bool
	OwnerID          *string
	ClearEvents      bool
	AddEventIDs      []string
	RemoveEventIDs   []string
}

// Mutate applies the UpdateSubscriberInput on the SubscriberMutation builder.
func (i *UpdateSubscriberInput) Mutate(m *SubscriberMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearPhoneNumber {
		m.ClearPhoneNumber()
	}
	if v := i.PhoneNumber; v != nil {
		m.SetPhoneNumber(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateSubscriberInput on the SubscriberUpdate builder.
func (c *SubscriberUpdate) SetInput(i UpdateSubscriberInput) *SubscriberUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateSubscriberInput on the SubscriberUpdateOne builder.
func (c *SubscriberUpdateOne) SetInput(i UpdateSubscriberInput) *SubscriberUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTFASettingInput represents a mutation input for creating tfasettings.
type CreateTFASettingInput struct {
	Tags        []string
	TotpAllowed *bool
	OwnerID     *string
}

// Mutate applies the CreateTFASettingInput on the TFASettingMutation builder.
func (i *CreateTFASettingInput) Mutate(m *TFASettingMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.TotpAllowed; v != nil {
		m.SetTotpAllowed(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateTFASettingInput on the TFASettingCreate builder.
func (c *TFASettingCreate) SetInput(i CreateTFASettingInput) *TFASettingCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTFASettingInput represents a mutation input for updating tfasettings.
type UpdateTFASettingInput struct {
	ClearTags        bool
	Tags             []string
	AppendTags       []string
	Verified         *bool
	ClearTotpAllowed bool
	TotpAllowed      *bool
}

// Mutate applies the UpdateTFASettingInput on the TFASettingMutation builder.
func (i *UpdateTFASettingInput) Mutate(m *TFASettingMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Verified; v != nil {
		m.SetVerified(*v)
	}
	if i.ClearTotpAllowed {
		m.ClearTotpAllowed()
	}
	if v := i.TotpAllowed; v != nil {
		m.SetTotpAllowed(*v)
	}
}

// SetInput applies the change-set in the UpdateTFASettingInput on the TFASettingUpdate builder.
func (c *TFASettingUpdate) SetInput(i UpdateTFASettingInput) *TFASettingUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTFASettingInput on the TFASettingUpdateOne builder.
func (c *TFASettingUpdateOne) SetInput(i UpdateTFASettingInput) *TFASettingUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTaskInput represents a mutation input for creating tasks.
type CreateTaskInput struct {
	Tags                []string
	Title               string
	Description         *string
	Details             map[string]interface{}
	Status              *enums.TaskStatus
	Due                 *time.Time
	Completed           *time.Time
	AssignerID          string
	AssigneeID          *string
	OrganizationIDs     []string
	GroupIDs            []string
	PolicyIDs           []string
	ProcedureIDs        []string
	ControlIDs          []string
	ControlObjectiveIDs []string
	SubcontrolIDs       []string
	ProgramIDs          []string
}

// Mutate applies the CreateTaskInput on the TaskMutation builder.
func (i *CreateTaskInput) Mutate(m *TaskMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetTitle(i.Title)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Due; v != nil {
		m.SetDue(*v)
	}
	if v := i.Completed; v != nil {
		m.SetCompleted(*v)
	}
	m.SetAssignerID(i.AssignerID)
	if v := i.AssigneeID; v != nil {
		m.SetAssigneeID(*v)
	}
	if v := i.OrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.GroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.PolicyIDs; len(v) > 0 {
		m.AddPolicyIDs(v...)
	}
	if v := i.ProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.ControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.ControlObjectiveIDs; len(v) > 0 {
		m.AddControlObjectiveIDs(v...)
	}
	if v := i.SubcontrolIDs; len(v) > 0 {
		m.AddSubcontrolIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTaskInput on the TaskCreate builder.
func (c *TaskCreate) SetInput(i CreateTaskInput) *TaskCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTaskInput represents a mutation input for updating tasks.
type UpdateTaskInput struct {
	ClearTags                 bool
	Tags                      []string
	AppendTags                []string
	Title                     *string
	ClearDescription          bool
	Description               *string
	ClearDetails              bool
	Details                   map[string]interface{}
	Status                    *enums.TaskStatus
	ClearDue                  bool
	Due                       *time.Time
	ClearCompleted            bool
	Completed                 *time.Time
	AssignerID                *string
	ClearAssignee             bool
	AssigneeID                *string
	ClearOrganization         bool
	AddOrganizationIDs        []string
	RemoveOrganizationIDs     []string
	ClearGroup                bool
	AddGroupIDs               []string
	RemoveGroupIDs            []string
	ClearPolicy               bool
	AddPolicyIDs              []string
	RemovePolicyIDs           []string
	ClearProcedure            bool
	AddProcedureIDs           []string
	RemoveProcedureIDs        []string
	ClearControl              bool
	AddControlIDs             []string
	RemoveControlIDs          []string
	ClearControlObjective     bool
	AddControlObjectiveIDs    []string
	RemoveControlObjectiveIDs []string
	ClearSubcontrol           bool
	AddSubcontrolIDs          []string
	RemoveSubcontrolIDs       []string
	ClearProgram              bool
	AddProgramIDs             []string
	RemoveProgramIDs          []string
}

// Mutate applies the UpdateTaskInput on the TaskMutation builder.
func (i *UpdateTaskInput) Mutate(m *TaskMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearDetails {
		m.ClearDetails()
	}
	if v := i.Details; v != nil {
		m.SetDetails(v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearDue {
		m.ClearDue()
	}
	if v := i.Due; v != nil {
		m.SetDue(*v)
	}
	if i.ClearCompleted {
		m.ClearCompleted()
	}
	if v := i.Completed; v != nil {
		m.SetCompleted(*v)
	}
	if v := i.AssignerID; v != nil {
		m.SetAssignerID(*v)
	}
	if i.ClearAssignee {
		m.ClearAssignee()
	}
	if v := i.AssigneeID; v != nil {
		m.SetAssigneeID(*v)
	}
	if i.ClearOrganization {
		m.ClearOrganization()
	}
	if v := i.AddOrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.RemoveOrganizationIDs; len(v) > 0 {
		m.RemoveOrganizationIDs(v...)
	}
	if i.ClearGroup {
		m.ClearGroup()
	}
	if v := i.AddGroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.RemoveGroupIDs; len(v) > 0 {
		m.RemoveGroupIDs(v...)
	}
	if i.ClearPolicy {
		m.ClearPolicy()
	}
	if v := i.AddPolicyIDs; len(v) > 0 {
		m.AddPolicyIDs(v...)
	}
	if v := i.RemovePolicyIDs; len(v) > 0 {
		m.RemovePolicyIDs(v...)
	}
	if i.ClearProcedure {
		m.ClearProcedure()
	}
	if v := i.AddProcedureIDs; len(v) > 0 {
		m.AddProcedureIDs(v...)
	}
	if v := i.RemoveProcedureIDs; len(v) > 0 {
		m.RemoveProcedureIDs(v...)
	}
	if i.ClearControl {
		m.ClearControl()
	}
	if v := i.AddControlIDs; len(v) > 0 {
		m.AddControlIDs(v...)
	}
	if v := i.RemoveControlIDs; len(v) > 0 {
		m.RemoveControlIDs(v...)
	}
	if i.ClearControlObjective {
		m.ClearControlObjective()
	}
	if v := i.AddControlObjectiveIDs; len(v) > 0 {
		m.AddControlObjectiveIDs(v...)
	}
	if v := i.RemoveControlObjectiveIDs; len(v) > 0 {
		m.RemoveControlObjectiveIDs(v...)
	}
	if i.ClearSubcontrol {
		m.ClearSubcontrol()
	}
	if v := i.AddSubcontrolIDs; len(v) > 0 {
		m.AddSubcontrolIDs(v...)
	}
	if v := i.RemoveSubcontrolIDs; len(v) > 0 {
		m.RemoveSubcontrolIDs(v...)
	}
	if i.ClearProgram {
		m.ClearProgram()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTaskInput on the TaskUpdate builder.
func (c *TaskUpdate) SetInput(i UpdateTaskInput) *TaskUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTaskInput on the TaskUpdateOne builder.
func (c *TaskUpdateOne) SetInput(i UpdateTaskInput) *TaskUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTemplateInput represents a mutation input for creating templates.
type CreateTemplateInput struct {
	Tags         []string
	Name         string
	TemplateType *enums.DocumentType
	Description  *string
	Jsonconfig   customtypes.JSONObject
	Uischema     customtypes.JSONObject
	OwnerID      *string
	DocumentIDs  []string
	FileIDs      []string
}

// Mutate applies the CreateTemplateInput on the TemplateMutation builder.
func (i *CreateTemplateInput) Mutate(m *TemplateMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.TemplateType; v != nil {
		m.SetTemplateType(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Jsonconfig; v != nil {
		m.SetJsonconfig(v)
	}
	if v := i.Uischema; v != nil {
		m.SetUischema(v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.DocumentIDs; len(v) > 0 {
		m.AddDocumentIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTemplateInput on the TemplateCreate builder.
func (c *TemplateCreate) SetInput(i CreateTemplateInput) *TemplateCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTemplateInput represents a mutation input for updating templates.
type UpdateTemplateInput struct {
	ClearTags         bool
	Tags              []string
	AppendTags        []string
	Name              *string
	TemplateType      *enums.DocumentType
	ClearDescription  bool
	Description       *string
	Jsonconfig        customtypes.JSONObject
	ClearUischema     bool
	Uischema          customtypes.JSONObject
	ClearOwner        bool
	OwnerID           *string
	ClearDocuments    bool
	AddDocumentIDs    []string
	RemoveDocumentIDs []string
	ClearFiles        bool
	AddFileIDs        []string
	RemoveFileIDs     []string
}

// Mutate applies the UpdateTemplateInput on the TemplateMutation builder.
func (i *UpdateTemplateInput) Mutate(m *TemplateMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.TemplateType; v != nil {
		m.SetTemplateType(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Jsonconfig; v != nil {
		m.SetJsonconfig(v)
	}
	if i.ClearUischema {
		m.ClearUischema()
	}
	if v := i.Uischema; v != nil {
		m.SetUischema(v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearDocuments {
		m.ClearDocuments()
	}
	if v := i.AddDocumentIDs; len(v) > 0 {
		m.AddDocumentIDs(v...)
	}
	if v := i.RemoveDocumentIDs; len(v) > 0 {
		m.RemoveDocumentIDs(v...)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateTemplateInput on the TemplateUpdate builder.
func (c *TemplateUpdate) SetInput(i UpdateTemplateInput) *TemplateUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTemplateInput on the TemplateUpdateOne builder.
func (c *TemplateUpdateOne) SetInput(i UpdateTemplateInput) *TemplateUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Tags                      []string
	Email                     string
	FirstName                 *string
	LastName                  *string
	DisplayName               string
	AvatarRemoteURL           *string
	AvatarLocalFile           *string
	AvatarUpdatedAt           *time.Time
	LastSeen                  *time.Time
	Password                  *string
	Sub                       *string
	AuthProvider              *enums.AuthProvider
	Role                      *enums.Role
	PersonalAccessTokenIDs    []string
	TfaSettingIDs             []string
	SettingID                 string
	EmailVerificationTokenIDs []string
	PasswordResetTokenIDs     []string
	GroupIDs                  []string
	OrganizationIDs           []string
	WebauthnIDs               []string
	FileIDs                   []string
	FileID                    *string
	EventIDs                  []string
	ActionplanIDs             []string
	SubcontrolIDs             []string
	AssignerTaskIDs           []string
	AssigneeTaskIDs           []string
	ProgramIDs                []string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetEmail(i.Email)
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	m.SetDisplayName(i.DisplayName)
	if v := i.AvatarRemoteURL; v != nil {
		m.SetAvatarRemoteURL(*v)
	}
	if v := i.AvatarLocalFile; v != nil {
		m.SetAvatarLocalFile(*v)
	}
	if v := i.AvatarUpdatedAt; v != nil {
		m.SetAvatarUpdatedAt(*v)
	}
	if v := i.LastSeen; v != nil {
		m.SetLastSeen(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Sub; v != nil {
		m.SetSub(*v)
	}
	if v := i.AuthProvider; v != nil {
		m.SetAuthProvider(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.PersonalAccessTokenIDs; len(v) > 0 {
		m.AddPersonalAccessTokenIDs(v...)
	}
	if v := i.TfaSettingIDs; len(v) > 0 {
		m.AddTfaSettingIDs(v...)
	}
	m.SetSettingID(i.SettingID)
	if v := i.EmailVerificationTokenIDs; len(v) > 0 {
		m.AddEmailVerificationTokenIDs(v...)
	}
	if v := i.PasswordResetTokenIDs; len(v) > 0 {
		m.AddPasswordResetTokenIDs(v...)
	}
	if v := i.GroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.OrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.WebauthnIDs; len(v) > 0 {
		m.AddWebauthnIDs(v...)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.FileID; v != nil {
		m.SetFileID(*v)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.ActionplanIDs; len(v) > 0 {
		m.AddActionplanIDs(v...)
	}
	if v := i.SubcontrolIDs; len(v) > 0 {
		m.AddSubcontrolIDs(v...)
	}
	if v := i.AssignerTaskIDs; len(v) > 0 {
		m.AddAssignerTaskIDs(v...)
	}
	if v := i.AssigneeTaskIDs; len(v) > 0 {
		m.AddAssigneeTaskIDs(v...)
	}
	if v := i.ProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	ClearTags                       bool
	Tags                            []string
	AppendTags                      []string
	Email                           *string
	ClearFirstName                  bool
	FirstName                       *string
	ClearLastName                   bool
	LastName                        *string
	DisplayName                     *string
	ClearAvatarRemoteURL            bool
	AvatarRemoteURL                 *string
	ClearAvatarLocalFile            bool
	AvatarLocalFile                 *string
	ClearAvatarUpdatedAt            bool
	AvatarUpdatedAt                 *time.Time
	ClearLastSeen                   bool
	LastSeen                        *time.Time
	ClearPassword                   bool
	Password                        *string
	ClearSub                        bool
	Sub                             *string
	AuthProvider                    *enums.AuthProvider
	ClearRole                       bool
	Role                            *enums.Role
	ClearPersonalAccessTokens       bool
	AddPersonalAccessTokenIDs       []string
	RemovePersonalAccessTokenIDs    []string
	ClearTfaSettings                bool
	AddTfaSettingIDs                []string
	RemoveTfaSettingIDs             []string
	SettingID                       *string
	ClearEmailVerificationTokens    bool
	AddEmailVerificationTokenIDs    []string
	RemoveEmailVerificationTokenIDs []string
	ClearPasswordResetTokens        bool
	AddPasswordResetTokenIDs        []string
	RemovePasswordResetTokenIDs     []string
	ClearGroups                     bool
	AddGroupIDs                     []string
	RemoveGroupIDs                  []string
	ClearOrganizations              bool
	AddOrganizationIDs              []string
	RemoveOrganizationIDs           []string
	ClearWebauthn                   bool
	AddWebauthnIDs                  []string
	RemoveWebauthnIDs               []string
	ClearFiles                      bool
	AddFileIDs                      []string
	RemoveFileIDs                   []string
	ClearFile                       bool
	FileID                          *string
	ClearEvents                     bool
	AddEventIDs                     []string
	RemoveEventIDs                  []string
	ClearActionplans                bool
	AddActionplanIDs                []string
	RemoveActionplanIDs             []string
	ClearSubcontrols                bool
	AddSubcontrolIDs                []string
	RemoveSubcontrolIDs             []string
	ClearAssignerTasks              bool
	AddAssignerTaskIDs              []string
	RemoveAssignerTaskIDs           []string
	ClearAssigneeTasks              bool
	AddAssigneeTaskIDs              []string
	RemoveAssigneeTaskIDs           []string
	ClearPrograms                   bool
	AddProgramIDs                   []string
	RemoveProgramIDs                []string
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearFirstName {
		m.ClearFirstName()
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearLastName {
		m.ClearLastName()
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.DisplayName; v != nil {
		m.SetDisplayName(*v)
	}
	if i.ClearAvatarRemoteURL {
		m.ClearAvatarRemoteURL()
	}
	if v := i.AvatarRemoteURL; v != nil {
		m.SetAvatarRemoteURL(*v)
	}
	if i.ClearAvatarLocalFile {
		m.ClearAvatarLocalFile()
	}
	if v := i.AvatarLocalFile; v != nil {
		m.SetAvatarLocalFile(*v)
	}
	if i.ClearAvatarUpdatedAt {
		m.ClearAvatarUpdatedAt()
	}
	if v := i.AvatarUpdatedAt; v != nil {
		m.SetAvatarUpdatedAt(*v)
	}
	if i.ClearLastSeen {
		m.ClearLastSeen()
	}
	if v := i.LastSeen; v != nil {
		m.SetLastSeen(*v)
	}
	if i.ClearPassword {
		m.ClearPassword()
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if i.ClearSub {
		m.ClearSub()
	}
	if v := i.Sub; v != nil {
		m.SetSub(*v)
	}
	if v := i.AuthProvider; v != nil {
		m.SetAuthProvider(*v)
	}
	if i.ClearRole {
		m.ClearRole()
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if i.ClearPersonalAccessTokens {
		m.ClearPersonalAccessTokens()
	}
	if v := i.AddPersonalAccessTokenIDs; len(v) > 0 {
		m.AddPersonalAccessTokenIDs(v...)
	}
	if v := i.RemovePersonalAccessTokenIDs; len(v) > 0 {
		m.RemovePersonalAccessTokenIDs(v...)
	}
	if i.ClearTfaSettings {
		m.ClearTfaSettings()
	}
	if v := i.AddTfaSettingIDs; len(v) > 0 {
		m.AddTfaSettingIDs(v...)
	}
	if v := i.RemoveTfaSettingIDs; len(v) > 0 {
		m.RemoveTfaSettingIDs(v...)
	}
	if v := i.SettingID; v != nil {
		m.SetSettingID(*v)
	}
	if i.ClearEmailVerificationTokens {
		m.ClearEmailVerificationTokens()
	}
	if v := i.AddEmailVerificationTokenIDs; len(v) > 0 {
		m.AddEmailVerificationTokenIDs(v...)
	}
	if v := i.RemoveEmailVerificationTokenIDs; len(v) > 0 {
		m.RemoveEmailVerificationTokenIDs(v...)
	}
	if i.ClearPasswordResetTokens {
		m.ClearPasswordResetTokens()
	}
	if v := i.AddPasswordResetTokenIDs; len(v) > 0 {
		m.AddPasswordResetTokenIDs(v...)
	}
	if v := i.RemovePasswordResetTokenIDs; len(v) > 0 {
		m.RemovePasswordResetTokenIDs(v...)
	}
	if i.ClearGroups {
		m.ClearGroups()
	}
	if v := i.AddGroupIDs; len(v) > 0 {
		m.AddGroupIDs(v...)
	}
	if v := i.RemoveGroupIDs; len(v) > 0 {
		m.RemoveGroupIDs(v...)
	}
	if i.ClearOrganizations {
		m.ClearOrganizations()
	}
	if v := i.AddOrganizationIDs; len(v) > 0 {
		m.AddOrganizationIDs(v...)
	}
	if v := i.RemoveOrganizationIDs; len(v) > 0 {
		m.RemoveOrganizationIDs(v...)
	}
	if i.ClearWebauthn {
		m.ClearWebauthn()
	}
	if v := i.AddWebauthnIDs; len(v) > 0 {
		m.AddWebauthnIDs(v...)
	}
	if v := i.RemoveWebauthnIDs; len(v) > 0 {
		m.RemoveWebauthnIDs(v...)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
	if i.ClearFile {
		m.ClearFile()
	}
	if v := i.FileID; v != nil {
		m.SetFileID(*v)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
	if i.ClearActionplans {
		m.ClearActionplans()
	}
	if v := i.AddActionplanIDs; len(v) > 0 {
		m.AddActionplanIDs(v...)
	}
	if v := i.RemoveActionplanIDs; len(v) > 0 {
		m.RemoveActionplanIDs(v...)
	}
	if i.ClearSubcontrols {
		m.ClearSubcontrols()
	}
	if v := i.AddSubcontrolIDs; len(v) > 0 {
		m.AddSubcontrolIDs(v...)
	}
	if v := i.RemoveSubcontrolIDs; len(v) > 0 {
		m.RemoveSubcontrolIDs(v...)
	}
	if i.ClearAssignerTasks {
		m.ClearAssignerTasks()
	}
	if v := i.AddAssignerTaskIDs; len(v) > 0 {
		m.AddAssignerTaskIDs(v...)
	}
	if v := i.RemoveAssignerTaskIDs; len(v) > 0 {
		m.RemoveAssignerTaskIDs(v...)
	}
	if i.ClearAssigneeTasks {
		m.ClearAssigneeTasks()
	}
	if v := i.AddAssigneeTaskIDs; len(v) > 0 {
		m.AddAssigneeTaskIDs(v...)
	}
	if v := i.RemoveAssigneeTaskIDs; len(v) > 0 {
		m.RemoveAssigneeTaskIDs(v...)
	}
	if i.ClearPrograms {
		m.ClearPrograms()
	}
	if v := i.AddProgramIDs; len(v) > 0 {
		m.AddProgramIDs(v...)
	}
	if v := i.RemoveProgramIDs; len(v) > 0 {
		m.RemoveProgramIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserSettingInput represents a mutation input for creating usersettings.
type CreateUserSettingInput struct {
	Tags              []string
	Locked            *bool
	SilencedAt        *time.Time
	SuspendedAt       *time.Time
	Status            *enums.UserStatus
	EmailConfirmed    *bool
	IsWebauthnAllowed *bool
	IsTfaEnabled      *bool
	UserID            *string
	DefaultOrgID      *string
	FileIDs           []string
}

// Mutate applies the CreateUserSettingInput on the UserSettingMutation builder.
func (i *CreateUserSettingInput) Mutate(m *UserSettingMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if v := i.Locked; v != nil {
		m.SetLocked(*v)
	}
	if v := i.SilencedAt; v != nil {
		m.SetSilencedAt(*v)
	}
	if v := i.SuspendedAt; v != nil {
		m.SetSuspendedAt(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.EmailConfirmed; v != nil {
		m.SetEmailConfirmed(*v)
	}
	if v := i.IsWebauthnAllowed; v != nil {
		m.SetIsWebauthnAllowed(*v)
	}
	if v := i.IsTfaEnabled; v != nil {
		m.SetIsTfaEnabled(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.DefaultOrgID; v != nil {
		m.SetDefaultOrgID(*v)
	}
	if v := i.FileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserSettingInput on the UserSettingCreate builder.
func (c *UserSettingCreate) SetInput(i CreateUserSettingInput) *UserSettingCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserSettingInput represents a mutation input for updating usersettings.
type UpdateUserSettingInput struct {
	ClearTags              bool
	Tags                   []string
	AppendTags             []string
	Locked                 *bool
	ClearSilencedAt        bool
	SilencedAt             *time.Time
	ClearSuspendedAt       bool
	SuspendedAt            *time.Time
	Status                 *enums.UserStatus
	EmailConfirmed         *bool
	ClearIsWebauthnAllowed bool
	IsWebauthnAllowed      *bool
	ClearIsTfaEnabled      bool
	IsTfaEnabled           *bool
	ClearUser              bool
	UserID                 *string
	ClearDefaultOrg        bool
	DefaultOrgID           *string
	ClearFiles             bool
	AddFileIDs             []string
	RemoveFileIDs          []string
}

// Mutate applies the UpdateUserSettingInput on the UserSettingMutation builder.
func (i *UpdateUserSettingInput) Mutate(m *UserSettingMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Locked; v != nil {
		m.SetLocked(*v)
	}
	if i.ClearSilencedAt {
		m.ClearSilencedAt()
	}
	if v := i.SilencedAt; v != nil {
		m.SetSilencedAt(*v)
	}
	if i.ClearSuspendedAt {
		m.ClearSuspendedAt()
	}
	if v := i.SuspendedAt; v != nil {
		m.SetSuspendedAt(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.EmailConfirmed; v != nil {
		m.SetEmailConfirmed(*v)
	}
	if i.ClearIsWebauthnAllowed {
		m.ClearIsWebauthnAllowed()
	}
	if v := i.IsWebauthnAllowed; v != nil {
		m.SetIsWebauthnAllowed(*v)
	}
	if i.ClearIsTfaEnabled {
		m.ClearIsTfaEnabled()
	}
	if v := i.IsTfaEnabled; v != nil {
		m.SetIsTfaEnabled(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if i.ClearDefaultOrg {
		m.ClearDefaultOrg()
	}
	if v := i.DefaultOrgID; v != nil {
		m.SetDefaultOrgID(*v)
	}
	if i.ClearFiles {
		m.ClearFiles()
	}
	if v := i.AddFileIDs; len(v) > 0 {
		m.AddFileIDs(v...)
	}
	if v := i.RemoveFileIDs; len(v) > 0 {
		m.RemoveFileIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserSettingInput on the UserSettingUpdate builder.
func (c *UserSettingUpdate) SetInput(i UpdateUserSettingInput) *UserSettingUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserSettingInput on the UserSettingUpdateOne builder.
func (c *UserSettingUpdateOne) SetInput(i UpdateUserSettingInput) *UserSettingUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWebhookInput represents a mutation input for creating webhooks.
type CreateWebhookInput struct {
	Tags           []string
	Name           string
	Description    *string
	DestinationURL string
	Enabled        *bool
	Failures       *int
	LastError      *string
	LastResponse   *string
	OwnerID        *string
	EventIDs       []string
	IntegrationIDs []string
}

// Mutate applies the CreateWebhookInput on the WebhookMutation builder.
func (i *CreateWebhookInput) Mutate(m *WebhookMutation) {
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	m.SetDestinationURL(i.DestinationURL)
	if v := i.Enabled; v != nil {
		m.SetEnabled(*v)
	}
	if v := i.Failures; v != nil {
		m.SetFailures(*v)
	}
	if v := i.LastError; v != nil {
		m.SetLastError(*v)
	}
	if v := i.LastResponse; v != nil {
		m.SetLastResponse(*v)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if v := i.EventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.IntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateWebhookInput on the WebhookCreate builder.
func (c *WebhookCreate) SetInput(i CreateWebhookInput) *WebhookCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWebhookInput represents a mutation input for updating webhooks.
type UpdateWebhookInput struct {
	ClearTags            bool
	Tags                 []string
	AppendTags           []string
	Name                 *string
	ClearDescription     bool
	Description          *string
	DestinationURL       *string
	Enabled              *bool
	ClearFailures        bool
	Failures             *int
	ClearLastError       bool
	LastError            *string
	ClearLastResponse    bool
	LastResponse         *string
	ClearOwner           bool
	OwnerID              *string
	ClearEvents          bool
	AddEventIDs          []string
	RemoveEventIDs       []string
	ClearIntegrations    bool
	AddIntegrationIDs    []string
	RemoveIntegrationIDs []string
}

// Mutate applies the UpdateWebhookInput on the WebhookMutation builder.
func (i *UpdateWebhookInput) Mutate(m *WebhookMutation) {
	if i.ClearTags {
		m.ClearTags()
	}
	if v := i.Tags; v != nil {
		m.SetTags(v)
	}
	if i.AppendTags != nil {
		m.AppendTags(i.Tags)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.DestinationURL; v != nil {
		m.SetDestinationURL(*v)
	}
	if v := i.Enabled; v != nil {
		m.SetEnabled(*v)
	}
	if i.ClearFailures {
		m.ClearFailures()
	}
	if v := i.Failures; v != nil {
		m.SetFailures(*v)
	}
	if i.ClearLastError {
		m.ClearLastError()
	}
	if v := i.LastError; v != nil {
		m.SetLastError(*v)
	}
	if i.ClearLastResponse {
		m.ClearLastResponse()
	}
	if v := i.LastResponse; v != nil {
		m.SetLastResponse(*v)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
	if i.ClearEvents {
		m.ClearEvents()
	}
	if v := i.AddEventIDs; len(v) > 0 {
		m.AddEventIDs(v...)
	}
	if v := i.RemoveEventIDs; len(v) > 0 {
		m.RemoveEventIDs(v...)
	}
	if i.ClearIntegrations {
		m.ClearIntegrations()
	}
	if v := i.AddIntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.RemoveIntegrationIDs; len(v) > 0 {
		m.RemoveIntegrationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateWebhookInput on the WebhookUpdate builder.
func (c *WebhookUpdate) SetInput(i UpdateWebhookInput) *WebhookUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWebhookInput on the WebhookUpdateOne builder.
func (c *WebhookUpdateOne) SetInput(i UpdateWebhookInput) *WebhookUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
