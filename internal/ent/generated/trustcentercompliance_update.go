// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentercompliance"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterComplianceUpdate is the builder for updating TrustCenterCompliance entities.
type TrustCenterComplianceUpdate struct {
	config
	hooks     []Hook
	mutation  *TrustCenterComplianceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrustCenterComplianceUpdate builder.
func (_u *TrustCenterComplianceUpdate) Where(ps ...predicate.TrustCenterCompliance) *TrustCenterComplianceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterComplianceUpdate) SetUpdatedAt(v time.Time) *TrustCenterComplianceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterComplianceUpdate) ClearUpdatedAt() *TrustCenterComplianceUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterComplianceUpdate) SetUpdatedBy(v string) *TrustCenterComplianceUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterComplianceUpdate) SetNillableUpdatedBy(v *string) *TrustCenterComplianceUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterComplianceUpdate) ClearUpdatedBy() *TrustCenterComplianceUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterComplianceUpdate) SetDeletedAt(v time.Time) *TrustCenterComplianceUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterComplianceUpdate) SetNillableDeletedAt(v *time.Time) *TrustCenterComplianceUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterComplianceUpdate) ClearDeletedAt() *TrustCenterComplianceUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterComplianceUpdate) SetDeletedBy(v string) *TrustCenterComplianceUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterComplianceUpdate) SetNillableDeletedBy(v *string) *TrustCenterComplianceUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterComplianceUpdate) ClearDeletedBy() *TrustCenterComplianceUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TrustCenterComplianceUpdate) SetTags(v []string) *TrustCenterComplianceUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TrustCenterComplianceUpdate) AppendTags(v []string) *TrustCenterComplianceUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TrustCenterComplianceUpdate) ClearTags() *TrustCenterComplianceUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetStandardID sets the "standard_id" field.
func (_u *TrustCenterComplianceUpdate) SetStandardID(v string) *TrustCenterComplianceUpdate {
	_u.mutation.SetStandardID(v)
	return _u
}

// SetNillableStandardID sets the "standard_id" field if the given value is not nil.
func (_u *TrustCenterComplianceUpdate) SetNillableStandardID(v *string) *TrustCenterComplianceUpdate {
	if v != nil {
		_u.SetStandardID(*v)
	}
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterComplianceUpdate) SetTrustCenterID(v string) *TrustCenterComplianceUpdate {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterComplianceUpdate) SetNillableTrustCenterID(v *string) *TrustCenterComplianceUpdate {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterComplianceUpdate) ClearTrustCenterID() *TrustCenterComplianceUpdate {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetTrustCenter sets the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterComplianceUpdate) SetTrustCenter(v *TrustCenter) *TrustCenterComplianceUpdate {
	return _u.SetTrustCenterID(v.ID)
}

// SetStandard sets the "standard" edge to the Standard entity.
func (_u *TrustCenterComplianceUpdate) SetStandard(v *Standard) *TrustCenterComplianceUpdate {
	return _u.SetStandardID(v.ID)
}

// Mutation returns the TrustCenterComplianceMutation object of the builder.
func (_u *TrustCenterComplianceUpdate) Mutation() *TrustCenterComplianceMutation {
	return _u.mutation
}

// ClearTrustCenter clears the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterComplianceUpdate) ClearTrustCenter() *TrustCenterComplianceUpdate {
	_u.mutation.ClearTrustCenter()
	return _u
}

// ClearStandard clears the "standard" edge to the Standard entity.
func (_u *TrustCenterComplianceUpdate) ClearStandard() *TrustCenterComplianceUpdate {
	_u.mutation.ClearStandard()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TrustCenterComplianceUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterComplianceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TrustCenterComplianceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterComplianceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterComplianceUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcentercompliance.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentercompliance.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentercompliance.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterComplianceUpdate) check() error {
	if v, ok := _u.mutation.StandardID(); ok {
		if err := trustcentercompliance.StandardIDValidator(v); err != nil {
			return &ValidationError{Name: "standard_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterCompliance.standard_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TrustCenterID(); ok {
		if err := trustcentercompliance.TrustCenterIDValidator(v); err != nil {
			return &ValidationError{Name: "trust_center_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterCompliance.trust_center_id": %w`, err)}
		}
	}
	if _u.mutation.StandardCleared() && len(_u.mutation.StandardIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "TrustCenterCompliance.standard"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterComplianceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterComplianceUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterComplianceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcentercompliance.Table, trustcentercompliance.Columns, sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentercompliance.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentercompliance.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentercompliance.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentercompliance.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentercompliance.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentercompliance.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentercompliance.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentercompliance.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentercompliance.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentercompliance.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(trustcentercompliance.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcentercompliance.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(trustcentercompliance.FieldTags, field.TypeJSON)
	}
	if _u.mutation.TrustCenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercompliance.TrustCenterTable,
			Columns: []string{trustcentercompliance.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercompliance.TrustCenterTable,
			Columns: []string{trustcentercompliance.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercompliance.StandardTable,
			Columns: []string{trustcentercompliance.StandardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StandardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercompliance.StandardTable,
			Columns: []string{trustcentercompliance.StandardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterCompliance
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentercompliance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TrustCenterComplianceUpdateOne is the builder for updating a single TrustCenterCompliance entity.
type TrustCenterComplianceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrustCenterComplianceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterComplianceUpdateOne) SetUpdatedAt(v time.Time) *TrustCenterComplianceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterComplianceUpdateOne) ClearUpdatedAt() *TrustCenterComplianceUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterComplianceUpdateOne) SetUpdatedBy(v string) *TrustCenterComplianceUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterComplianceUpdateOne) SetNillableUpdatedBy(v *string) *TrustCenterComplianceUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterComplianceUpdateOne) ClearUpdatedBy() *TrustCenterComplianceUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterComplianceUpdateOne) SetDeletedAt(v time.Time) *TrustCenterComplianceUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterComplianceUpdateOne) SetNillableDeletedAt(v *time.Time) *TrustCenterComplianceUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterComplianceUpdateOne) ClearDeletedAt() *TrustCenterComplianceUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterComplianceUpdateOne) SetDeletedBy(v string) *TrustCenterComplianceUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterComplianceUpdateOne) SetNillableDeletedBy(v *string) *TrustCenterComplianceUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterComplianceUpdateOne) ClearDeletedBy() *TrustCenterComplianceUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *TrustCenterComplianceUpdateOne) SetTags(v []string) *TrustCenterComplianceUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *TrustCenterComplianceUpdateOne) AppendTags(v []string) *TrustCenterComplianceUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *TrustCenterComplianceUpdateOne) ClearTags() *TrustCenterComplianceUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetStandardID sets the "standard_id" field.
func (_u *TrustCenterComplianceUpdateOne) SetStandardID(v string) *TrustCenterComplianceUpdateOne {
	_u.mutation.SetStandardID(v)
	return _u
}

// SetNillableStandardID sets the "standard_id" field if the given value is not nil.
func (_u *TrustCenterComplianceUpdateOne) SetNillableStandardID(v *string) *TrustCenterComplianceUpdateOne {
	if v != nil {
		_u.SetStandardID(*v)
	}
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterComplianceUpdateOne) SetTrustCenterID(v string) *TrustCenterComplianceUpdateOne {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterComplianceUpdateOne) SetNillableTrustCenterID(v *string) *TrustCenterComplianceUpdateOne {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterComplianceUpdateOne) ClearTrustCenterID() *TrustCenterComplianceUpdateOne {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetTrustCenter sets the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterComplianceUpdateOne) SetTrustCenter(v *TrustCenter) *TrustCenterComplianceUpdateOne {
	return _u.SetTrustCenterID(v.ID)
}

// SetStandard sets the "standard" edge to the Standard entity.
func (_u *TrustCenterComplianceUpdateOne) SetStandard(v *Standard) *TrustCenterComplianceUpdateOne {
	return _u.SetStandardID(v.ID)
}

// Mutation returns the TrustCenterComplianceMutation object of the builder.
func (_u *TrustCenterComplianceUpdateOne) Mutation() *TrustCenterComplianceMutation {
	return _u.mutation
}

// ClearTrustCenter clears the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterComplianceUpdateOne) ClearTrustCenter() *TrustCenterComplianceUpdateOne {
	_u.mutation.ClearTrustCenter()
	return _u
}

// ClearStandard clears the "standard" edge to the Standard entity.
func (_u *TrustCenterComplianceUpdateOne) ClearStandard() *TrustCenterComplianceUpdateOne {
	_u.mutation.ClearStandard()
	return _u
}

// Where appends a list predicates to the TrustCenterComplianceUpdate builder.
func (_u *TrustCenterComplianceUpdateOne) Where(ps ...predicate.TrustCenterCompliance) *TrustCenterComplianceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TrustCenterComplianceUpdateOne) Select(field string, fields ...string) *TrustCenterComplianceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TrustCenterCompliance entity.
func (_u *TrustCenterComplianceUpdateOne) Save(ctx context.Context) (*TrustCenterCompliance, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterComplianceUpdateOne) SaveX(ctx context.Context) *TrustCenterCompliance {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TrustCenterComplianceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterComplianceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterComplianceUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcentercompliance.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentercompliance.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentercompliance.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterComplianceUpdateOne) check() error {
	if v, ok := _u.mutation.StandardID(); ok {
		if err := trustcentercompliance.StandardIDValidator(v); err != nil {
			return &ValidationError{Name: "standard_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterCompliance.standard_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TrustCenterID(); ok {
		if err := trustcentercompliance.TrustCenterIDValidator(v); err != nil {
			return &ValidationError{Name: "trust_center_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterCompliance.trust_center_id": %w`, err)}
		}
	}
	if _u.mutation.StandardCleared() && len(_u.mutation.StandardIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "TrustCenterCompliance.standard"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterComplianceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterComplianceUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterComplianceUpdateOne) sqlSave(ctx context.Context) (_node *TrustCenterCompliance, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcentercompliance.Table, trustcentercompliance.Columns, sqlgraph.NewFieldSpec(trustcentercompliance.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TrustCenterCompliance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcentercompliance.FieldID)
		for _, f := range fields {
			if !trustcentercompliance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != trustcentercompliance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentercompliance.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentercompliance.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentercompliance.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentercompliance.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentercompliance.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentercompliance.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentercompliance.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentercompliance.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentercompliance.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentercompliance.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(trustcentercompliance.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcentercompliance.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(trustcentercompliance.FieldTags, field.TypeJSON)
	}
	if _u.mutation.TrustCenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercompliance.TrustCenterTable,
			Columns: []string{trustcentercompliance.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercompliance.TrustCenterTable,
			Columns: []string{trustcentercompliance.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.StandardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercompliance.StandardTable,
			Columns: []string{trustcentercompliance.StandardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StandardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentercompliance.StandardTable,
			Columns: []string{trustcentercompliance.StandardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterCompliance
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterCompliance
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TrustCenterCompliance{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentercompliance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
