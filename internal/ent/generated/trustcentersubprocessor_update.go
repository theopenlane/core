// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentersubprocessor"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// TrustCenterSubprocessorUpdate is the builder for updating TrustCenterSubprocessor entities.
type TrustCenterSubprocessorUpdate struct {
	config
	hooks     []Hook
	mutation  *TrustCenterSubprocessorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TrustCenterSubprocessorUpdate builder.
func (_u *TrustCenterSubprocessorUpdate) Where(ps ...predicate.TrustCenterSubprocessor) *TrustCenterSubprocessorUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterSubprocessorUpdate) SetUpdatedAt(v time.Time) *TrustCenterSubprocessorUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterSubprocessorUpdate) ClearUpdatedAt() *TrustCenterSubprocessorUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterSubprocessorUpdate) SetUpdatedBy(v string) *TrustCenterSubprocessorUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterSubprocessorUpdate) SetNillableUpdatedBy(v *string) *TrustCenterSubprocessorUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterSubprocessorUpdate) ClearUpdatedBy() *TrustCenterSubprocessorUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterSubprocessorUpdate) SetDeletedAt(v time.Time) *TrustCenterSubprocessorUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterSubprocessorUpdate) SetNillableDeletedAt(v *time.Time) *TrustCenterSubprocessorUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterSubprocessorUpdate) ClearDeletedAt() *TrustCenterSubprocessorUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterSubprocessorUpdate) SetDeletedBy(v string) *TrustCenterSubprocessorUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterSubprocessorUpdate) SetNillableDeletedBy(v *string) *TrustCenterSubprocessorUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterSubprocessorUpdate) ClearDeletedBy() *TrustCenterSubprocessorUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetSubprocessorID sets the "subprocessor_id" field.
func (_u *TrustCenterSubprocessorUpdate) SetSubprocessorID(v string) *TrustCenterSubprocessorUpdate {
	_u.mutation.SetSubprocessorID(v)
	return _u
}

// SetNillableSubprocessorID sets the "subprocessor_id" field if the given value is not nil.
func (_u *TrustCenterSubprocessorUpdate) SetNillableSubprocessorID(v *string) *TrustCenterSubprocessorUpdate {
	if v != nil {
		_u.SetSubprocessorID(*v)
	}
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterSubprocessorUpdate) SetTrustCenterID(v string) *TrustCenterSubprocessorUpdate {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterSubprocessorUpdate) SetNillableTrustCenterID(v *string) *TrustCenterSubprocessorUpdate {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterSubprocessorUpdate) ClearTrustCenterID() *TrustCenterSubprocessorUpdate {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetCountries sets the "countries" field.
func (_u *TrustCenterSubprocessorUpdate) SetCountries(v []string) *TrustCenterSubprocessorUpdate {
	_u.mutation.SetCountries(v)
	return _u
}

// AppendCountries appends value to the "countries" field.
func (_u *TrustCenterSubprocessorUpdate) AppendCountries(v []string) *TrustCenterSubprocessorUpdate {
	_u.mutation.AppendCountries(v)
	return _u
}

// ClearCountries clears the value of the "countries" field.
func (_u *TrustCenterSubprocessorUpdate) ClearCountries() *TrustCenterSubprocessorUpdate {
	_u.mutation.ClearCountries()
	return _u
}

// SetCategory sets the "category" field.
func (_u *TrustCenterSubprocessorUpdate) SetCategory(v string) *TrustCenterSubprocessorUpdate {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *TrustCenterSubprocessorUpdate) SetNillableCategory(v *string) *TrustCenterSubprocessorUpdate {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetTrustCenter sets the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterSubprocessorUpdate) SetTrustCenter(v *TrustCenter) *TrustCenterSubprocessorUpdate {
	return _u.SetTrustCenterID(v.ID)
}

// SetSubprocessor sets the "subprocessor" edge to the Subprocessor entity.
func (_u *TrustCenterSubprocessorUpdate) SetSubprocessor(v *Subprocessor) *TrustCenterSubprocessorUpdate {
	return _u.SetSubprocessorID(v.ID)
}

// Mutation returns the TrustCenterSubprocessorMutation object of the builder.
func (_u *TrustCenterSubprocessorUpdate) Mutation() *TrustCenterSubprocessorMutation {
	return _u.mutation
}

// ClearTrustCenter clears the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterSubprocessorUpdate) ClearTrustCenter() *TrustCenterSubprocessorUpdate {
	_u.mutation.ClearTrustCenter()
	return _u
}

// ClearSubprocessor clears the "subprocessor" edge to the Subprocessor entity.
func (_u *TrustCenterSubprocessorUpdate) ClearSubprocessor() *TrustCenterSubprocessorUpdate {
	_u.mutation.ClearSubprocessor()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TrustCenterSubprocessorUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterSubprocessorUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TrustCenterSubprocessorUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterSubprocessorUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterSubprocessorUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcentersubprocessor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersubprocessor.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersubprocessor.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterSubprocessorUpdate) check() error {
	if v, ok := _u.mutation.SubprocessorID(); ok {
		if err := trustcentersubprocessor.SubprocessorIDValidator(v); err != nil {
			return &ValidationError{Name: "subprocessor_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSubprocessor.subprocessor_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TrustCenterID(); ok {
		if err := trustcentersubprocessor.TrustCenterIDValidator(v); err != nil {
			return &ValidationError{Name: "trust_center_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSubprocessor.trust_center_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := trustcentersubprocessor.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSubprocessor.category": %w`, err)}
		}
	}
	if _u.mutation.SubprocessorCleared() && len(_u.mutation.SubprocessorIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "TrustCenterSubprocessor.subprocessor"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterSubprocessorUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterSubprocessorUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterSubprocessorUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcentersubprocessor.Table, trustcentersubprocessor.Columns, sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersubprocessor.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersubprocessor.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersubprocessor.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersubprocessor.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Countries(); ok {
		_spec.SetField(trustcentersubprocessor.FieldCountries, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedCountries(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcentersubprocessor.FieldCountries, value)
		})
	}
	if _u.mutation.CountriesCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldCountries, field.TypeJSON)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(trustcentersubprocessor.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.TrustCenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentersubprocessor.TrustCenterTable,
			Columns: []string{trustcentersubprocessor.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentersubprocessor.TrustCenterTable,
			Columns: []string{trustcentersubprocessor.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubprocessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentersubprocessor.SubprocessorTable,
			Columns: []string{trustcentersubprocessor.SubprocessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubprocessorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentersubprocessor.SubprocessorTable,
			Columns: []string{trustcentersubprocessor.SubprocessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterSubprocessor
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentersubprocessor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TrustCenterSubprocessorUpdateOne is the builder for updating a single TrustCenterSubprocessor entity.
type TrustCenterSubprocessorUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TrustCenterSubprocessorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TrustCenterSubprocessorUpdateOne) SetUpdatedAt(v time.Time) *TrustCenterSubprocessorUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TrustCenterSubprocessorUpdateOne) ClearUpdatedAt() *TrustCenterSubprocessorUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *TrustCenterSubprocessorUpdateOne) SetUpdatedBy(v string) *TrustCenterSubprocessorUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *TrustCenterSubprocessorUpdateOne) SetNillableUpdatedBy(v *string) *TrustCenterSubprocessorUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *TrustCenterSubprocessorUpdateOne) ClearUpdatedBy() *TrustCenterSubprocessorUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *TrustCenterSubprocessorUpdateOne) SetDeletedAt(v time.Time) *TrustCenterSubprocessorUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *TrustCenterSubprocessorUpdateOne) SetNillableDeletedAt(v *time.Time) *TrustCenterSubprocessorUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *TrustCenterSubprocessorUpdateOne) ClearDeletedAt() *TrustCenterSubprocessorUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *TrustCenterSubprocessorUpdateOne) SetDeletedBy(v string) *TrustCenterSubprocessorUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *TrustCenterSubprocessorUpdateOne) SetNillableDeletedBy(v *string) *TrustCenterSubprocessorUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *TrustCenterSubprocessorUpdateOne) ClearDeletedBy() *TrustCenterSubprocessorUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetSubprocessorID sets the "subprocessor_id" field.
func (_u *TrustCenterSubprocessorUpdateOne) SetSubprocessorID(v string) *TrustCenterSubprocessorUpdateOne {
	_u.mutation.SetSubprocessorID(v)
	return _u
}

// SetNillableSubprocessorID sets the "subprocessor_id" field if the given value is not nil.
func (_u *TrustCenterSubprocessorUpdateOne) SetNillableSubprocessorID(v *string) *TrustCenterSubprocessorUpdateOne {
	if v != nil {
		_u.SetSubprocessorID(*v)
	}
	return _u
}

// SetTrustCenterID sets the "trust_center_id" field.
func (_u *TrustCenterSubprocessorUpdateOne) SetTrustCenterID(v string) *TrustCenterSubprocessorUpdateOne {
	_u.mutation.SetTrustCenterID(v)
	return _u
}

// SetNillableTrustCenterID sets the "trust_center_id" field if the given value is not nil.
func (_u *TrustCenterSubprocessorUpdateOne) SetNillableTrustCenterID(v *string) *TrustCenterSubprocessorUpdateOne {
	if v != nil {
		_u.SetTrustCenterID(*v)
	}
	return _u
}

// ClearTrustCenterID clears the value of the "trust_center_id" field.
func (_u *TrustCenterSubprocessorUpdateOne) ClearTrustCenterID() *TrustCenterSubprocessorUpdateOne {
	_u.mutation.ClearTrustCenterID()
	return _u
}

// SetCountries sets the "countries" field.
func (_u *TrustCenterSubprocessorUpdateOne) SetCountries(v []string) *TrustCenterSubprocessorUpdateOne {
	_u.mutation.SetCountries(v)
	return _u
}

// AppendCountries appends value to the "countries" field.
func (_u *TrustCenterSubprocessorUpdateOne) AppendCountries(v []string) *TrustCenterSubprocessorUpdateOne {
	_u.mutation.AppendCountries(v)
	return _u
}

// ClearCountries clears the value of the "countries" field.
func (_u *TrustCenterSubprocessorUpdateOne) ClearCountries() *TrustCenterSubprocessorUpdateOne {
	_u.mutation.ClearCountries()
	return _u
}

// SetCategory sets the "category" field.
func (_u *TrustCenterSubprocessorUpdateOne) SetCategory(v string) *TrustCenterSubprocessorUpdateOne {
	_u.mutation.SetCategory(v)
	return _u
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (_u *TrustCenterSubprocessorUpdateOne) SetNillableCategory(v *string) *TrustCenterSubprocessorUpdateOne {
	if v != nil {
		_u.SetCategory(*v)
	}
	return _u
}

// SetTrustCenter sets the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterSubprocessorUpdateOne) SetTrustCenter(v *TrustCenter) *TrustCenterSubprocessorUpdateOne {
	return _u.SetTrustCenterID(v.ID)
}

// SetSubprocessor sets the "subprocessor" edge to the Subprocessor entity.
func (_u *TrustCenterSubprocessorUpdateOne) SetSubprocessor(v *Subprocessor) *TrustCenterSubprocessorUpdateOne {
	return _u.SetSubprocessorID(v.ID)
}

// Mutation returns the TrustCenterSubprocessorMutation object of the builder.
func (_u *TrustCenterSubprocessorUpdateOne) Mutation() *TrustCenterSubprocessorMutation {
	return _u.mutation
}

// ClearTrustCenter clears the "trust_center" edge to the TrustCenter entity.
func (_u *TrustCenterSubprocessorUpdateOne) ClearTrustCenter() *TrustCenterSubprocessorUpdateOne {
	_u.mutation.ClearTrustCenter()
	return _u
}

// ClearSubprocessor clears the "subprocessor" edge to the Subprocessor entity.
func (_u *TrustCenterSubprocessorUpdateOne) ClearSubprocessor() *TrustCenterSubprocessorUpdateOne {
	_u.mutation.ClearSubprocessor()
	return _u
}

// Where appends a list predicates to the TrustCenterSubprocessorUpdate builder.
func (_u *TrustCenterSubprocessorUpdateOne) Where(ps ...predicate.TrustCenterSubprocessor) *TrustCenterSubprocessorUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TrustCenterSubprocessorUpdateOne) Select(field string, fields ...string) *TrustCenterSubprocessorUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TrustCenterSubprocessor entity.
func (_u *TrustCenterSubprocessorUpdateOne) Save(ctx context.Context) (*TrustCenterSubprocessor, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TrustCenterSubprocessorUpdateOne) SaveX(ctx context.Context) *TrustCenterSubprocessor {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TrustCenterSubprocessorUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TrustCenterSubprocessorUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TrustCenterSubprocessorUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if trustcentersubprocessor.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized trustcentersubprocessor.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := trustcentersubprocessor.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *TrustCenterSubprocessorUpdateOne) check() error {
	if v, ok := _u.mutation.SubprocessorID(); ok {
		if err := trustcentersubprocessor.SubprocessorIDValidator(v); err != nil {
			return &ValidationError{Name: "subprocessor_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSubprocessor.subprocessor_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TrustCenterID(); ok {
		if err := trustcentersubprocessor.TrustCenterIDValidator(v); err != nil {
			return &ValidationError{Name: "trust_center_id", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSubprocessor.trust_center_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Category(); ok {
		if err := trustcentersubprocessor.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`generated: validator failed for field "TrustCenterSubprocessor.category": %w`, err)}
		}
	}
	if _u.mutation.SubprocessorCleared() && len(_u.mutation.SubprocessorIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "TrustCenterSubprocessor.subprocessor"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *TrustCenterSubprocessorUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TrustCenterSubprocessorUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *TrustCenterSubprocessorUpdateOne) sqlSave(ctx context.Context) (_node *TrustCenterSubprocessor, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(trustcentersubprocessor.Table, trustcentersubprocessor.Columns, sqlgraph.NewFieldSpec(trustcentersubprocessor.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TrustCenterSubprocessor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, trustcentersubprocessor.FieldID)
		for _, f := range fields {
			if !trustcentersubprocessor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != trustcentersubprocessor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(trustcentersubprocessor.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(trustcentersubprocessor.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(trustcentersubprocessor.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(trustcentersubprocessor.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Countries(); ok {
		_spec.SetField(trustcentersubprocessor.FieldCountries, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedCountries(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, trustcentersubprocessor.FieldCountries, value)
		})
	}
	if _u.mutation.CountriesCleared() {
		_spec.ClearField(trustcentersubprocessor.FieldCountries, field.TypeJSON)
	}
	if value, ok := _u.mutation.Category(); ok {
		_spec.SetField(trustcentersubprocessor.FieldCategory, field.TypeString, value)
	}
	if _u.mutation.TrustCenterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentersubprocessor.TrustCenterTable,
			Columns: []string{trustcentersubprocessor.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TrustCenterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentersubprocessor.TrustCenterTable,
			Columns: []string{trustcentersubprocessor.TrustCenterColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubprocessorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentersubprocessor.SubprocessorTable,
			Columns: []string{trustcentersubprocessor.SubprocessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubprocessorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   trustcentersubprocessor.SubprocessorTable,
			Columns: []string{trustcentersubprocessor.SubprocessorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.TrustCenterSubprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.TrustCenterSubprocessor
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &TrustCenterSubprocessor{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{trustcentersubprocessor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
