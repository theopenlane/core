// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/pkg/enums"
)

// MappedControlCreate is the builder for creating a MappedControl entity.
type MappedControlCreate struct {
	config
	mutation *MappedControlMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *MappedControlCreate) SetCreatedAt(v time.Time) *MappedControlCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableCreatedAt(v *time.Time) *MappedControlCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *MappedControlCreate) SetUpdatedAt(v time.Time) *MappedControlCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableUpdatedAt(v *time.Time) *MappedControlCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *MappedControlCreate) SetCreatedBy(v string) *MappedControlCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableCreatedBy(v *string) *MappedControlCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *MappedControlCreate) SetUpdatedBy(v string) *MappedControlCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableUpdatedBy(v *string) *MappedControlCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *MappedControlCreate) SetDeletedAt(v time.Time) *MappedControlCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableDeletedAt(v *time.Time) *MappedControlCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *MappedControlCreate) SetDeletedBy(v string) *MappedControlCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableDeletedBy(v *string) *MappedControlCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *MappedControlCreate) SetTags(v []string) *MappedControlCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetSystemOwned sets the "system_owned" field.
func (_c *MappedControlCreate) SetSystemOwned(v bool) *MappedControlCreate {
	_c.mutation.SetSystemOwned(v)
	return _c
}

// SetNillableSystemOwned sets the "system_owned" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableSystemOwned(v *bool) *MappedControlCreate {
	if v != nil {
		_c.SetSystemOwned(*v)
	}
	return _c
}

// SetInternalNotes sets the "internal_notes" field.
func (_c *MappedControlCreate) SetInternalNotes(v string) *MappedControlCreate {
	_c.mutation.SetInternalNotes(v)
	return _c
}

// SetNillableInternalNotes sets the "internal_notes" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableInternalNotes(v *string) *MappedControlCreate {
	if v != nil {
		_c.SetInternalNotes(*v)
	}
	return _c
}

// SetSystemInternalID sets the "system_internal_id" field.
func (_c *MappedControlCreate) SetSystemInternalID(v string) *MappedControlCreate {
	_c.mutation.SetSystemInternalID(v)
	return _c
}

// SetNillableSystemInternalID sets the "system_internal_id" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableSystemInternalID(v *string) *MappedControlCreate {
	if v != nil {
		_c.SetSystemInternalID(*v)
	}
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *MappedControlCreate) SetOwnerID(v string) *MappedControlCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableOwnerID(v *string) *MappedControlCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetMappingType sets the "mapping_type" field.
func (_c *MappedControlCreate) SetMappingType(v enums.MappingType) *MappedControlCreate {
	_c.mutation.SetMappingType(v)
	return _c
}

// SetNillableMappingType sets the "mapping_type" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableMappingType(v *enums.MappingType) *MappedControlCreate {
	if v != nil {
		_c.SetMappingType(*v)
	}
	return _c
}

// SetRelation sets the "relation" field.
func (_c *MappedControlCreate) SetRelation(v string) *MappedControlCreate {
	_c.mutation.SetRelation(v)
	return _c
}

// SetNillableRelation sets the "relation" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableRelation(v *string) *MappedControlCreate {
	if v != nil {
		_c.SetRelation(*v)
	}
	return _c
}

// SetConfidence sets the "confidence" field.
func (_c *MappedControlCreate) SetConfidence(v int) *MappedControlCreate {
	_c.mutation.SetConfidence(v)
	return _c
}

// SetNillableConfidence sets the "confidence" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableConfidence(v *int) *MappedControlCreate {
	if v != nil {
		_c.SetConfidence(*v)
	}
	return _c
}

// SetSource sets the "source" field.
func (_c *MappedControlCreate) SetSource(v enums.MappingSource) *MappedControlCreate {
	_c.mutation.SetSource(v)
	return _c
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableSource(v *enums.MappingSource) *MappedControlCreate {
	if v != nil {
		_c.SetSource(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *MappedControlCreate) SetID(v string) *MappedControlCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *MappedControlCreate) SetNillableID(v *string) *MappedControlCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *MappedControlCreate) SetOwner(v *Organization) *MappedControlCreate {
	return _c.SetOwnerID(v.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (_c *MappedControlCreate) AddBlockedGroupIDs(ids ...string) *MappedControlCreate {
	_c.mutation.AddBlockedGroupIDs(ids...)
	return _c
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (_c *MappedControlCreate) AddBlockedGroups(v ...*Group) *MappedControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (_c *MappedControlCreate) AddEditorIDs(ids ...string) *MappedControlCreate {
	_c.mutation.AddEditorIDs(ids...)
	return _c
}

// AddEditors adds the "editors" edges to the Group entity.
func (_c *MappedControlCreate) AddEditors(v ...*Group) *MappedControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEditorIDs(ids...)
}

// AddFromControlIDs adds the "from_controls" edge to the Control entity by IDs.
func (_c *MappedControlCreate) AddFromControlIDs(ids ...string) *MappedControlCreate {
	_c.mutation.AddFromControlIDs(ids...)
	return _c
}

// AddFromControls adds the "from_controls" edges to the Control entity.
func (_c *MappedControlCreate) AddFromControls(v ...*Control) *MappedControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFromControlIDs(ids...)
}

// AddToControlIDs adds the "to_controls" edge to the Control entity by IDs.
func (_c *MappedControlCreate) AddToControlIDs(ids ...string) *MappedControlCreate {
	_c.mutation.AddToControlIDs(ids...)
	return _c
}

// AddToControls adds the "to_controls" edges to the Control entity.
func (_c *MappedControlCreate) AddToControls(v ...*Control) *MappedControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddToControlIDs(ids...)
}

// AddFromSubcontrolIDs adds the "from_subcontrols" edge to the Subcontrol entity by IDs.
func (_c *MappedControlCreate) AddFromSubcontrolIDs(ids ...string) *MappedControlCreate {
	_c.mutation.AddFromSubcontrolIDs(ids...)
	return _c
}

// AddFromSubcontrols adds the "from_subcontrols" edges to the Subcontrol entity.
func (_c *MappedControlCreate) AddFromSubcontrols(v ...*Subcontrol) *MappedControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFromSubcontrolIDs(ids...)
}

// AddToSubcontrolIDs adds the "to_subcontrols" edge to the Subcontrol entity by IDs.
func (_c *MappedControlCreate) AddToSubcontrolIDs(ids ...string) *MappedControlCreate {
	_c.mutation.AddToSubcontrolIDs(ids...)
	return _c
}

// AddToSubcontrols adds the "to_subcontrols" edges to the Subcontrol entity.
func (_c *MappedControlCreate) AddToSubcontrols(v ...*Subcontrol) *MappedControlCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddToSubcontrolIDs(ids...)
}

// Mutation returns the MappedControlMutation object of the builder.
func (_c *MappedControlCreate) Mutation() *MappedControlMutation {
	return _c.mutation
}

// Save creates the MappedControl in the database.
func (_c *MappedControlCreate) Save(ctx context.Context) (*MappedControl, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MappedControlCreate) SaveX(ctx context.Context) *MappedControl {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MappedControlCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MappedControlCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MappedControlCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if mappedcontrol.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized mappedcontrol.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := mappedcontrol.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if mappedcontrol.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized mappedcontrol.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := mappedcontrol.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := mappedcontrol.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.SystemOwned(); !ok {
		v := mappedcontrol.DefaultSystemOwned
		_c.mutation.SetSystemOwned(v)
	}
	if _, ok := _c.mutation.MappingType(); !ok {
		v := mappedcontrol.DefaultMappingType
		_c.mutation.SetMappingType(v)
	}
	if _, ok := _c.mutation.Source(); !ok {
		v := mappedcontrol.DefaultSource
		_c.mutation.SetSource(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if mappedcontrol.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized mappedcontrol.DefaultID (forgotten import generated/runtime?)")
		}
		v := mappedcontrol.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *MappedControlCreate) check() error {
	if _, ok := _c.mutation.MappingType(); !ok {
		return &ValidationError{Name: "mapping_type", err: errors.New(`generated: missing required field "MappedControl.mapping_type"`)}
	}
	if v, ok := _c.mutation.MappingType(); ok {
		if err := mappedcontrol.MappingTypeValidator(v); err != nil {
			return &ValidationError{Name: "mapping_type", err: fmt.Errorf(`generated: validator failed for field "MappedControl.mapping_type": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Confidence(); ok {
		if err := mappedcontrol.ConfidenceValidator(v); err != nil {
			return &ValidationError{Name: "confidence", err: fmt.Errorf(`generated: validator failed for field "MappedControl.confidence": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Source(); ok {
		if err := mappedcontrol.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`generated: validator failed for field "MappedControl.source": %w`, err)}
		}
	}
	return nil
}

func (_c *MappedControlCreate) sqlSave(ctx context.Context) (*MappedControl, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected MappedControl.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MappedControlCreate) createSpec() (*MappedControl, *sqlgraph.CreateSpec) {
	var (
		_node = &MappedControl{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(mappedcontrol.Table, sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.MappedControl
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(mappedcontrol.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(mappedcontrol.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(mappedcontrol.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(mappedcontrol.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(mappedcontrol.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(mappedcontrol.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(mappedcontrol.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.SystemOwned(); ok {
		_spec.SetField(mappedcontrol.FieldSystemOwned, field.TypeBool, value)
		_node.SystemOwned = value
	}
	if value, ok := _c.mutation.InternalNotes(); ok {
		_spec.SetField(mappedcontrol.FieldInternalNotes, field.TypeString, value)
		_node.InternalNotes = &value
	}
	if value, ok := _c.mutation.SystemInternalID(); ok {
		_spec.SetField(mappedcontrol.FieldSystemInternalID, field.TypeString, value)
		_node.SystemInternalID = &value
	}
	if value, ok := _c.mutation.MappingType(); ok {
		_spec.SetField(mappedcontrol.FieldMappingType, field.TypeEnum, value)
		_node.MappingType = value
	}
	if value, ok := _c.mutation.Relation(); ok {
		_spec.SetField(mappedcontrol.FieldRelation, field.TypeString, value)
		_node.Relation = value
	}
	if value, ok := _c.mutation.Confidence(); ok {
		_spec.SetField(mappedcontrol.FieldConfidence, field.TypeInt, value)
		_node.Confidence = &value
	}
	if value, ok := _c.mutation.Source(); ok {
		_spec.SetField(mappedcontrol.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   mappedcontrol.OwnerTable,
			Columns: []string{mappedcontrol.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.MappedControl
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.BlockedGroupsTable,
			Columns: mappedcontrol.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.MappedControlBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.EditorsTable,
			Columns: mappedcontrol.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.MappedControlEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FromControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromControlsTable,
			Columns: mappedcontrol.FromControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.MappedControlFromControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ToControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToControlsTable,
			Columns: mappedcontrol.ToControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.MappedControlToControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FromSubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.FromSubcontrolsTable,
			Columns: mappedcontrol.FromSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.MappedControlFromSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ToSubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   mappedcontrol.ToSubcontrolsTable,
			Columns: mappedcontrol.ToSubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.MappedControlToSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MappedControlCreateBulk is the builder for creating many MappedControl entities in bulk.
type MappedControlCreateBulk struct {
	config
	err      error
	builders []*MappedControlCreate
}

// Save creates the MappedControl entities in the database.
func (_c *MappedControlCreateBulk) Save(ctx context.Context) ([]*MappedControl, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*MappedControl, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MappedControlMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MappedControlCreateBulk) SaveX(ctx context.Context) []*MappedControl {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MappedControlCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MappedControlCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
