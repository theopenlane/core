// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeaturehistory"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// EntitlementPlanFeatureHistoryUpdate is the builder for updating EntitlementPlanFeatureHistory entities.
type EntitlementPlanFeatureHistoryUpdate struct {
	config
	hooks     []Hook
	mutation  *EntitlementPlanFeatureHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the EntitlementPlanFeatureHistoryUpdate builder.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) Where(ps ...predicate.EntitlementPlanFeatureHistory) *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.Where(ps...)
	return epfhu
}

// SetUpdatedAt sets the "updated_at" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) SetUpdatedAt(t time.Time) *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.SetUpdatedAt(t)
	return epfhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) ClearUpdatedAt() *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.ClearUpdatedAt()
	return epfhu
}

// SetUpdatedBy sets the "updated_by" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) SetUpdatedBy(s string) *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.SetUpdatedBy(s)
	return epfhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) SetNillableUpdatedBy(s *string) *EntitlementPlanFeatureHistoryUpdate {
	if s != nil {
		epfhu.SetUpdatedBy(*s)
	}
	return epfhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) ClearUpdatedBy() *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.ClearUpdatedBy()
	return epfhu
}

// SetDeletedAt sets the "deleted_at" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) SetDeletedAt(t time.Time) *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.SetDeletedAt(t)
	return epfhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) SetNillableDeletedAt(t *time.Time) *EntitlementPlanFeatureHistoryUpdate {
	if t != nil {
		epfhu.SetDeletedAt(*t)
	}
	return epfhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) ClearDeletedAt() *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.ClearDeletedAt()
	return epfhu
}

// SetDeletedBy sets the "deleted_by" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) SetDeletedBy(s string) *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.SetDeletedBy(s)
	return epfhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) SetNillableDeletedBy(s *string) *EntitlementPlanFeatureHistoryUpdate {
	if s != nil {
		epfhu.SetDeletedBy(*s)
	}
	return epfhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) ClearDeletedBy() *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.ClearDeletedBy()
	return epfhu
}

// SetTags sets the "tags" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) SetTags(s []string) *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.SetTags(s)
	return epfhu
}

// AppendTags appends s to the "tags" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) AppendTags(s []string) *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.AppendTags(s)
	return epfhu
}

// ClearTags clears the value of the "tags" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) ClearTags() *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.ClearTags()
	return epfhu
}

// SetOwnerID sets the "owner_id" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) SetOwnerID(s string) *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.SetOwnerID(s)
	return epfhu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) SetNillableOwnerID(s *string) *EntitlementPlanFeatureHistoryUpdate {
	if s != nil {
		epfhu.SetOwnerID(*s)
	}
	return epfhu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) ClearOwnerID() *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.ClearOwnerID()
	return epfhu
}

// SetMetadata sets the "metadata" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) SetMetadata(m map[string]interface{}) *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.SetMetadata(m)
	return epfhu
}

// ClearMetadata clears the value of the "metadata" field.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) ClearMetadata() *EntitlementPlanFeatureHistoryUpdate {
	epfhu.mutation.ClearMetadata()
	return epfhu
}

// Mutation returns the EntitlementPlanFeatureHistoryMutation object of the builder.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) Mutation() *EntitlementPlanFeatureHistoryMutation {
	return epfhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) Save(ctx context.Context) (int, error) {
	if err := epfhu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, epfhu.sqlSave, epfhu.mutation, epfhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := epfhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) Exec(ctx context.Context) error {
	_, err := epfhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) ExecX(ctx context.Context) {
	if err := epfhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) defaults() error {
	if _, ok := epfhu.mutation.UpdatedAt(); !ok && !epfhu.mutation.UpdatedAtCleared() {
		if entitlementplanfeaturehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeaturehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeaturehistory.UpdateDefaultUpdatedAt()
		epfhu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (epfhu *EntitlementPlanFeatureHistoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntitlementPlanFeatureHistoryUpdate {
	epfhu.modifiers = append(epfhu.modifiers, modifiers...)
	return epfhu
}

func (epfhu *EntitlementPlanFeatureHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entitlementplanfeaturehistory.Table, entitlementplanfeaturehistory.Columns, sqlgraph.NewFieldSpec(entitlementplanfeaturehistory.FieldID, field.TypeString))
	if ps := epfhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if epfhu.mutation.RefCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldRef, field.TypeString)
	}
	if epfhu.mutation.CreatedAtCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := epfhu.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if epfhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldUpdatedAt, field.TypeTime)
	}
	if epfhu.mutation.CreatedByCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := epfhu.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if epfhu.mutation.UpdatedByCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := epfhu.mutation.DeletedAt(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if epfhu.mutation.DeletedAtCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := epfhu.mutation.DeletedBy(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldDeletedBy, field.TypeString, value)
	}
	if epfhu.mutation.DeletedByCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := epfhu.mutation.Tags(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := epfhu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitlementplanfeaturehistory.FieldTags, value)
		})
	}
	if epfhu.mutation.TagsCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := epfhu.mutation.OwnerID(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldOwnerID, field.TypeString, value)
	}
	if epfhu.mutation.OwnerIDCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := epfhu.mutation.Metadata(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldMetadata, field.TypeJSON, value)
	}
	if epfhu.mutation.MetadataCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldMetadata, field.TypeJSON)
	}
	_spec.Node.Schema = epfhu.schemaConfig.EntitlementPlanFeatureHistory
	ctx = internal.NewSchemaConfigContext(ctx, epfhu.schemaConfig)
	_spec.AddModifiers(epfhu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, epfhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlementplanfeaturehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	epfhu.mutation.done = true
	return n, nil
}

// EntitlementPlanFeatureHistoryUpdateOne is the builder for updating a single EntitlementPlanFeatureHistory entity.
type EntitlementPlanFeatureHistoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *EntitlementPlanFeatureHistoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) SetUpdatedAt(t time.Time) *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.SetUpdatedAt(t)
	return epfhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) ClearUpdatedAt() *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.ClearUpdatedAt()
	return epfhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) SetUpdatedBy(s string) *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.SetUpdatedBy(s)
	return epfhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) SetNillableUpdatedBy(s *string) *EntitlementPlanFeatureHistoryUpdateOne {
	if s != nil {
		epfhuo.SetUpdatedBy(*s)
	}
	return epfhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) ClearUpdatedBy() *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.ClearUpdatedBy()
	return epfhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) SetDeletedAt(t time.Time) *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.SetDeletedAt(t)
	return epfhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *EntitlementPlanFeatureHistoryUpdateOne {
	if t != nil {
		epfhuo.SetDeletedAt(*t)
	}
	return epfhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) ClearDeletedAt() *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.ClearDeletedAt()
	return epfhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) SetDeletedBy(s string) *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.SetDeletedBy(s)
	return epfhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) SetNillableDeletedBy(s *string) *EntitlementPlanFeatureHistoryUpdateOne {
	if s != nil {
		epfhuo.SetDeletedBy(*s)
	}
	return epfhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) ClearDeletedBy() *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.ClearDeletedBy()
	return epfhuo
}

// SetTags sets the "tags" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) SetTags(s []string) *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.SetTags(s)
	return epfhuo
}

// AppendTags appends s to the "tags" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) AppendTags(s []string) *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.AppendTags(s)
	return epfhuo
}

// ClearTags clears the value of the "tags" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) ClearTags() *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.ClearTags()
	return epfhuo
}

// SetOwnerID sets the "owner_id" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) SetOwnerID(s string) *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.SetOwnerID(s)
	return epfhuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) SetNillableOwnerID(s *string) *EntitlementPlanFeatureHistoryUpdateOne {
	if s != nil {
		epfhuo.SetOwnerID(*s)
	}
	return epfhuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) ClearOwnerID() *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.ClearOwnerID()
	return epfhuo
}

// SetMetadata sets the "metadata" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) SetMetadata(m map[string]interface{}) *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.SetMetadata(m)
	return epfhuo
}

// ClearMetadata clears the value of the "metadata" field.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) ClearMetadata() *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.ClearMetadata()
	return epfhuo
}

// Mutation returns the EntitlementPlanFeatureHistoryMutation object of the builder.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) Mutation() *EntitlementPlanFeatureHistoryMutation {
	return epfhuo.mutation
}

// Where appends a list predicates to the EntitlementPlanFeatureHistoryUpdate builder.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) Where(ps ...predicate.EntitlementPlanFeatureHistory) *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.mutation.Where(ps...)
	return epfhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) Select(field string, fields ...string) *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.fields = append([]string{field}, fields...)
	return epfhuo
}

// Save executes the query and returns the updated EntitlementPlanFeatureHistory entity.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) Save(ctx context.Context) (*EntitlementPlanFeatureHistory, error) {
	if err := epfhuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, epfhuo.sqlSave, epfhuo.mutation, epfhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) SaveX(ctx context.Context) *EntitlementPlanFeatureHistory {
	node, err := epfhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := epfhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := epfhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) defaults() error {
	if _, ok := epfhuo.mutation.UpdatedAt(); !ok && !epfhuo.mutation.UpdatedAtCleared() {
		if entitlementplanfeaturehistory.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized entitlementplanfeaturehistory.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := entitlementplanfeaturehistory.UpdateDefaultUpdatedAt()
		epfhuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *EntitlementPlanFeatureHistoryUpdateOne {
	epfhuo.modifiers = append(epfhuo.modifiers, modifiers...)
	return epfhuo
}

func (epfhuo *EntitlementPlanFeatureHistoryUpdateOne) sqlSave(ctx context.Context) (_node *EntitlementPlanFeatureHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(entitlementplanfeaturehistory.Table, entitlementplanfeaturehistory.Columns, sqlgraph.NewFieldSpec(entitlementplanfeaturehistory.FieldID, field.TypeString))
	id, ok := epfhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "EntitlementPlanFeatureHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := epfhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entitlementplanfeaturehistory.FieldID)
		for _, f := range fields {
			if !entitlementplanfeaturehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != entitlementplanfeaturehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := epfhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if epfhuo.mutation.RefCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldRef, field.TypeString)
	}
	if epfhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := epfhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if epfhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldUpdatedAt, field.TypeTime)
	}
	if epfhuo.mutation.CreatedByCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := epfhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if epfhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := epfhuo.mutation.DeletedAt(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if epfhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := epfhuo.mutation.DeletedBy(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldDeletedBy, field.TypeString, value)
	}
	if epfhuo.mutation.DeletedByCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := epfhuo.mutation.Tags(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldTags, field.TypeJSON, value)
	}
	if value, ok := epfhuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entitlementplanfeaturehistory.FieldTags, value)
		})
	}
	if epfhuo.mutation.TagsCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldTags, field.TypeJSON)
	}
	if value, ok := epfhuo.mutation.OwnerID(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldOwnerID, field.TypeString, value)
	}
	if epfhuo.mutation.OwnerIDCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldOwnerID, field.TypeString)
	}
	if value, ok := epfhuo.mutation.Metadata(); ok {
		_spec.SetField(entitlementplanfeaturehistory.FieldMetadata, field.TypeJSON, value)
	}
	if epfhuo.mutation.MetadataCleared() {
		_spec.ClearField(entitlementplanfeaturehistory.FieldMetadata, field.TypeJSON)
	}
	_spec.Node.Schema = epfhuo.schemaConfig.EntitlementPlanFeatureHistory
	ctx = internal.NewSchemaConfigContext(ctx, epfhuo.schemaConfig)
	_spec.AddModifiers(epfhuo.modifiers...)
	_node = &EntitlementPlanFeatureHistory{config: epfhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, epfhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entitlementplanfeaturehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	epfhuo.mutation.done = true
	return _node, nil
}
