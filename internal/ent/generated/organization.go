// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
)

// Organization is the model entity for the Organization schema.
type Organization struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the name of the organization
	Name string `json:"name,omitempty"`
	// The organization's displayed 'friendly' name
	DisplayName string `json:"display_name,omitempty"`
	// An optional description of the organization
	Description string `json:"description,omitempty"`
	// The ID of the parent organization for the organization.
	ParentOrganizationID string `json:"parent_organization_id,omitempty"`
	// orgs directly associated with a user
	PersonalOrg bool `json:"personal_org,omitempty"`
	// URL of the user's remote avatar
	AvatarRemoteURL *string `json:"avatar_remote_url,omitempty"`
	// Whether the organization has a dedicated database
	DedicatedDb bool `json:"dedicated_db,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationQuery when eager-loading is set.
	Edges        OrganizationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrganizationEdges holds the relations/edges for other nodes in the graph.
type OrganizationEdges struct {
	// Parent holds the value of the parent edge.
	Parent *Organization `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Organization `json:"children,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// Templates holds the value of the templates edge.
	Templates []*Template `json:"templates,omitempty"`
	// Integrations holds the value of the integrations edge.
	Integrations []*Integration `json:"integrations,omitempty"`
	// Setting holds the value of the setting edge.
	Setting *OrganizationSetting `json:"setting,omitempty"`
	// Documentdata holds the value of the documentdata edge.
	Documentdata []*DocumentData `json:"documentdata,omitempty"`
	// Entitlements holds the value of the entitlements edge.
	Entitlements []*Entitlement `json:"entitlements,omitempty"`
	// OrganizationEntitlement holds the value of the organization_entitlement edge.
	OrganizationEntitlement []*Entitlement `json:"organization_entitlement,omitempty"`
	// PersonalAccessTokens holds the value of the personal_access_tokens edge.
	PersonalAccessTokens []*PersonalAccessToken `json:"personal_access_tokens,omitempty"`
	// APITokens holds the value of the api_tokens edge.
	APITokens []*APIToken `json:"api_tokens,omitempty"`
	// Oauthprovider holds the value of the oauthprovider edge.
	Oauthprovider []*OauthProvider `json:"oauthprovider,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Invites holds the value of the invites edge.
	Invites []*Invite `json:"invites,omitempty"`
	// Subscribers holds the value of the subscribers edge.
	Subscribers []*Subscriber `json:"subscribers,omitempty"`
	// Webhooks holds the value of the webhooks edge.
	Webhooks []*Webhook `json:"webhooks,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Secrets holds the value of the secrets edge.
	Secrets []*Hush `json:"secrets,omitempty"`
	// Features holds the value of the features edge.
	Features []*Feature `json:"features,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// Entitlementplans holds the value of the entitlementplans edge.
	Entitlementplans []*EntitlementPlan `json:"entitlementplans,omitempty"`
	// Entitlementplanfeatures holds the value of the entitlementplanfeatures edge.
	Entitlementplanfeatures []*EntitlementPlanFeature `json:"entitlementplanfeatures,omitempty"`
	// Entities holds the value of the entities edge.
	Entities []*Entity `json:"entities,omitempty"`
	// Entitytypes holds the value of the entitytypes edge.
	Entitytypes []*EntityType `json:"entitytypes,omitempty"`
	// Contacts holds the value of the contacts edge.
	Contacts []*Contact `json:"contacts,omitempty"`
	// Notes holds the value of the notes edge.
	Notes []*Note `json:"notes,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Members holds the value of the members edge.
	Members []*OrgMembership `json:"members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [28]bool
	// totalCount holds the count of the edges above.
	totalCount [28]map[string]int

	namedChildren                map[string][]*Organization
	namedGroups                  map[string][]*Group
	namedTemplates               map[string][]*Template
	namedIntegrations            map[string][]*Integration
	namedDocumentdata            map[string][]*DocumentData
	namedEntitlements            map[string][]*Entitlement
	namedOrganizationEntitlement map[string][]*Entitlement
	namedPersonalAccessTokens    map[string][]*PersonalAccessToken
	namedAPITokens               map[string][]*APIToken
	namedOauthprovider           map[string][]*OauthProvider
	namedUsers                   map[string][]*User
	namedInvites                 map[string][]*Invite
	namedSubscribers             map[string][]*Subscriber
	namedWebhooks                map[string][]*Webhook
	namedEvents                  map[string][]*Event
	namedSecrets                 map[string][]*Hush
	namedFeatures                map[string][]*Feature
	namedFiles                   map[string][]*File
	namedEntitlementplans        map[string][]*EntitlementPlan
	namedEntitlementplanfeatures map[string][]*EntitlementPlanFeature
	namedEntities                map[string][]*Entity
	namedEntitytypes             map[string][]*EntityType
	namedContacts                map[string][]*Contact
	namedNotes                   map[string][]*Note
	namedTasks                   map[string][]*Task
	namedMembers                 map[string][]*OrgMembership
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationEdges) ParentOrErr() (*Organization, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ChildrenOrErr() ([]*Organization, error) {
	if e.loadedTypes[1] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// TemplatesOrErr returns the Templates value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) TemplatesOrErr() ([]*Template, error) {
	if e.loadedTypes[3] {
		return e.Templates, nil
	}
	return nil, &NotLoadedError{edge: "templates"}
}

// IntegrationsOrErr returns the Integrations value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) IntegrationsOrErr() ([]*Integration, error) {
	if e.loadedTypes[4] {
		return e.Integrations, nil
	}
	return nil, &NotLoadedError{edge: "integrations"}
}

// SettingOrErr returns the Setting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationEdges) SettingOrErr() (*OrganizationSetting, error) {
	if e.Setting != nil {
		return e.Setting, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: organizationsetting.Label}
	}
	return nil, &NotLoadedError{edge: "setting"}
}

// DocumentdataOrErr returns the Documentdata value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) DocumentdataOrErr() ([]*DocumentData, error) {
	if e.loadedTypes[6] {
		return e.Documentdata, nil
	}
	return nil, &NotLoadedError{edge: "documentdata"}
}

// EntitlementsOrErr returns the Entitlements value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) EntitlementsOrErr() ([]*Entitlement, error) {
	if e.loadedTypes[7] {
		return e.Entitlements, nil
	}
	return nil, &NotLoadedError{edge: "entitlements"}
}

// OrganizationEntitlementOrErr returns the OrganizationEntitlement value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) OrganizationEntitlementOrErr() ([]*Entitlement, error) {
	if e.loadedTypes[8] {
		return e.OrganizationEntitlement, nil
	}
	return nil, &NotLoadedError{edge: "organization_entitlement"}
}

// PersonalAccessTokensOrErr returns the PersonalAccessTokens value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) PersonalAccessTokensOrErr() ([]*PersonalAccessToken, error) {
	if e.loadedTypes[9] {
		return e.PersonalAccessTokens, nil
	}
	return nil, &NotLoadedError{edge: "personal_access_tokens"}
}

// APITokensOrErr returns the APITokens value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) APITokensOrErr() ([]*APIToken, error) {
	if e.loadedTypes[10] {
		return e.APITokens, nil
	}
	return nil, &NotLoadedError{edge: "api_tokens"}
}

// OauthproviderOrErr returns the Oauthprovider value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) OauthproviderOrErr() ([]*OauthProvider, error) {
	if e.loadedTypes[11] {
		return e.Oauthprovider, nil
	}
	return nil, &NotLoadedError{edge: "oauthprovider"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[12] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// InvitesOrErr returns the Invites value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) InvitesOrErr() ([]*Invite, error) {
	if e.loadedTypes[13] {
		return e.Invites, nil
	}
	return nil, &NotLoadedError{edge: "invites"}
}

// SubscribersOrErr returns the Subscribers value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) SubscribersOrErr() ([]*Subscriber, error) {
	if e.loadedTypes[14] {
		return e.Subscribers, nil
	}
	return nil, &NotLoadedError{edge: "subscribers"}
}

// WebhooksOrErr returns the Webhooks value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) WebhooksOrErr() ([]*Webhook, error) {
	if e.loadedTypes[15] {
		return e.Webhooks, nil
	}
	return nil, &NotLoadedError{edge: "webhooks"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[16] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// SecretsOrErr returns the Secrets value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) SecretsOrErr() ([]*Hush, error) {
	if e.loadedTypes[17] {
		return e.Secrets, nil
	}
	return nil, &NotLoadedError{edge: "secrets"}
}

// FeaturesOrErr returns the Features value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) FeaturesOrErr() ([]*Feature, error) {
	if e.loadedTypes[18] {
		return e.Features, nil
	}
	return nil, &NotLoadedError{edge: "features"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[19] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// EntitlementplansOrErr returns the Entitlementplans value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) EntitlementplansOrErr() ([]*EntitlementPlan, error) {
	if e.loadedTypes[20] {
		return e.Entitlementplans, nil
	}
	return nil, &NotLoadedError{edge: "entitlementplans"}
}

// EntitlementplanfeaturesOrErr returns the Entitlementplanfeatures value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) EntitlementplanfeaturesOrErr() ([]*EntitlementPlanFeature, error) {
	if e.loadedTypes[21] {
		return e.Entitlementplanfeatures, nil
	}
	return nil, &NotLoadedError{edge: "entitlementplanfeatures"}
}

// EntitiesOrErr returns the Entities value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) EntitiesOrErr() ([]*Entity, error) {
	if e.loadedTypes[22] {
		return e.Entities, nil
	}
	return nil, &NotLoadedError{edge: "entities"}
}

// EntitytypesOrErr returns the Entitytypes value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) EntitytypesOrErr() ([]*EntityType, error) {
	if e.loadedTypes[23] {
		return e.Entitytypes, nil
	}
	return nil, &NotLoadedError{edge: "entitytypes"}
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[24] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// NotesOrErr returns the Notes value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) NotesOrErr() ([]*Note, error) {
	if e.loadedTypes[25] {
		return e.Notes, nil
	}
	return nil, &NotLoadedError{edge: "notes"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[26] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) MembersOrErr() ([]*OrgMembership, error) {
	if e.loadedTypes[27] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Organization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organization.FieldTags:
			values[i] = new([]byte)
		case organization.FieldPersonalOrg, organization.FieldDedicatedDb:
			values[i] = new(sql.NullBool)
		case organization.FieldID, organization.FieldCreatedBy, organization.FieldUpdatedBy, organization.FieldMappingID, organization.FieldDeletedBy, organization.FieldName, organization.FieldDisplayName, organization.FieldDescription, organization.FieldParentOrganizationID, organization.FieldAvatarRemoteURL:
			values[i] = new(sql.NullString)
		case organization.FieldCreatedAt, organization.FieldUpdatedAt, organization.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Organization fields.
func (o *Organization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organization.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				o.ID = value.String
			}
		case organization.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case organization.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case organization.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				o.CreatedBy = value.String
			}
		case organization.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				o.UpdatedBy = value.String
			}
		case organization.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				o.MappingID = value.String
			}
		case organization.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case organization.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				o.DeletedAt = value.Time
			}
		case organization.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				o.DeletedBy = value.String
			}
		case organization.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case organization.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				o.DisplayName = value.String
			}
		case organization.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				o.Description = value.String
			}
		case organization.FieldParentOrganizationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_organization_id", values[i])
			} else if value.Valid {
				o.ParentOrganizationID = value.String
			}
		case organization.FieldPersonalOrg:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field personal_org", values[i])
			} else if value.Valid {
				o.PersonalOrg = value.Bool
			}
		case organization.FieldAvatarRemoteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_remote_url", values[i])
			} else if value.Valid {
				o.AvatarRemoteURL = new(string)
				*o.AvatarRemoteURL = value.String
			}
		case organization.FieldDedicatedDb:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field dedicated_db", values[i])
			} else if value.Valid {
				o.DedicatedDb = value.Bool
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Organization.
// This includes values selected through modifiers, order, etc.
func (o *Organization) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryParent queries the "parent" edge of the Organization entity.
func (o *Organization) QueryParent() *OrganizationQuery {
	return NewOrganizationClient(o.config).QueryParent(o)
}

// QueryChildren queries the "children" edge of the Organization entity.
func (o *Organization) QueryChildren() *OrganizationQuery {
	return NewOrganizationClient(o.config).QueryChildren(o)
}

// QueryGroups queries the "groups" edge of the Organization entity.
func (o *Organization) QueryGroups() *GroupQuery {
	return NewOrganizationClient(o.config).QueryGroups(o)
}

// QueryTemplates queries the "templates" edge of the Organization entity.
func (o *Organization) QueryTemplates() *TemplateQuery {
	return NewOrganizationClient(o.config).QueryTemplates(o)
}

// QueryIntegrations queries the "integrations" edge of the Organization entity.
func (o *Organization) QueryIntegrations() *IntegrationQuery {
	return NewOrganizationClient(o.config).QueryIntegrations(o)
}

// QuerySetting queries the "setting" edge of the Organization entity.
func (o *Organization) QuerySetting() *OrganizationSettingQuery {
	return NewOrganizationClient(o.config).QuerySetting(o)
}

// QueryDocumentdata queries the "documentdata" edge of the Organization entity.
func (o *Organization) QueryDocumentdata() *DocumentDataQuery {
	return NewOrganizationClient(o.config).QueryDocumentdata(o)
}

// QueryEntitlements queries the "entitlements" edge of the Organization entity.
func (o *Organization) QueryEntitlements() *EntitlementQuery {
	return NewOrganizationClient(o.config).QueryEntitlements(o)
}

// QueryOrganizationEntitlement queries the "organization_entitlement" edge of the Organization entity.
func (o *Organization) QueryOrganizationEntitlement() *EntitlementQuery {
	return NewOrganizationClient(o.config).QueryOrganizationEntitlement(o)
}

// QueryPersonalAccessTokens queries the "personal_access_tokens" edge of the Organization entity.
func (o *Organization) QueryPersonalAccessTokens() *PersonalAccessTokenQuery {
	return NewOrganizationClient(o.config).QueryPersonalAccessTokens(o)
}

// QueryAPITokens queries the "api_tokens" edge of the Organization entity.
func (o *Organization) QueryAPITokens() *APITokenQuery {
	return NewOrganizationClient(o.config).QueryAPITokens(o)
}

// QueryOauthprovider queries the "oauthprovider" edge of the Organization entity.
func (o *Organization) QueryOauthprovider() *OauthProviderQuery {
	return NewOrganizationClient(o.config).QueryOauthprovider(o)
}

// QueryUsers queries the "users" edge of the Organization entity.
func (o *Organization) QueryUsers() *UserQuery {
	return NewOrganizationClient(o.config).QueryUsers(o)
}

// QueryInvites queries the "invites" edge of the Organization entity.
func (o *Organization) QueryInvites() *InviteQuery {
	return NewOrganizationClient(o.config).QueryInvites(o)
}

// QuerySubscribers queries the "subscribers" edge of the Organization entity.
func (o *Organization) QuerySubscribers() *SubscriberQuery {
	return NewOrganizationClient(o.config).QuerySubscribers(o)
}

// QueryWebhooks queries the "webhooks" edge of the Organization entity.
func (o *Organization) QueryWebhooks() *WebhookQuery {
	return NewOrganizationClient(o.config).QueryWebhooks(o)
}

// QueryEvents queries the "events" edge of the Organization entity.
func (o *Organization) QueryEvents() *EventQuery {
	return NewOrganizationClient(o.config).QueryEvents(o)
}

// QuerySecrets queries the "secrets" edge of the Organization entity.
func (o *Organization) QuerySecrets() *HushQuery {
	return NewOrganizationClient(o.config).QuerySecrets(o)
}

// QueryFeatures queries the "features" edge of the Organization entity.
func (o *Organization) QueryFeatures() *FeatureQuery {
	return NewOrganizationClient(o.config).QueryFeatures(o)
}

// QueryFiles queries the "files" edge of the Organization entity.
func (o *Organization) QueryFiles() *FileQuery {
	return NewOrganizationClient(o.config).QueryFiles(o)
}

// QueryEntitlementplans queries the "entitlementplans" edge of the Organization entity.
func (o *Organization) QueryEntitlementplans() *EntitlementPlanQuery {
	return NewOrganizationClient(o.config).QueryEntitlementplans(o)
}

// QueryEntitlementplanfeatures queries the "entitlementplanfeatures" edge of the Organization entity.
func (o *Organization) QueryEntitlementplanfeatures() *EntitlementPlanFeatureQuery {
	return NewOrganizationClient(o.config).QueryEntitlementplanfeatures(o)
}

// QueryEntities queries the "entities" edge of the Organization entity.
func (o *Organization) QueryEntities() *EntityQuery {
	return NewOrganizationClient(o.config).QueryEntities(o)
}

// QueryEntitytypes queries the "entitytypes" edge of the Organization entity.
func (o *Organization) QueryEntitytypes() *EntityTypeQuery {
	return NewOrganizationClient(o.config).QueryEntitytypes(o)
}

// QueryContacts queries the "contacts" edge of the Organization entity.
func (o *Organization) QueryContacts() *ContactQuery {
	return NewOrganizationClient(o.config).QueryContacts(o)
}

// QueryNotes queries the "notes" edge of the Organization entity.
func (o *Organization) QueryNotes() *NoteQuery {
	return NewOrganizationClient(o.config).QueryNotes(o)
}

// QueryTasks queries the "tasks" edge of the Organization entity.
func (o *Organization) QueryTasks() *TaskQuery {
	return NewOrganizationClient(o.config).QueryTasks(o)
}

// QueryMembers queries the "members" edge of the Organization entity.
func (o *Organization) QueryMembers() *OrgMembershipQuery {
	return NewOrganizationClient(o.config).QueryMembers(o)
}

// Update returns a builder for updating this Organization.
// Note that you need to call Organization.Unwrap() before calling this method if this Organization
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Organization) Update() *OrganizationUpdateOne {
	return NewOrganizationClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Organization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Organization) Unwrap() *Organization {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("generated: Organization is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Organization) String() string {
	var builder strings.Builder
	builder.WriteString("Organization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(o.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(o.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(o.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", o.Tags))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(o.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(o.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(o.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(o.Description)
	builder.WriteString(", ")
	builder.WriteString("parent_organization_id=")
	builder.WriteString(o.ParentOrganizationID)
	builder.WriteString(", ")
	builder.WriteString("personal_org=")
	builder.WriteString(fmt.Sprintf("%v", o.PersonalOrg))
	builder.WriteString(", ")
	if v := o.AvatarRemoteURL; v != nil {
		builder.WriteString("avatar_remote_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("dedicated_db=")
	builder.WriteString(fmt.Sprintf("%v", o.DedicatedDb))
	builder.WriteByte(')')
	return builder.String()
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedChildren(name string) ([]*Organization, error) {
	if o.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedChildren(name string, edges ...*Organization) {
	if o.Edges.namedChildren == nil {
		o.Edges.namedChildren = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		o.Edges.namedChildren[name] = []*Organization{}
	} else {
		o.Edges.namedChildren[name] = append(o.Edges.namedChildren[name], edges...)
	}
}

// NamedGroups returns the Groups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedGroups(name string) ([]*Group, error) {
	if o.Edges.namedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedGroups(name string, edges ...*Group) {
	if o.Edges.namedGroups == nil {
		o.Edges.namedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		o.Edges.namedGroups[name] = []*Group{}
	} else {
		o.Edges.namedGroups[name] = append(o.Edges.namedGroups[name], edges...)
	}
}

// NamedTemplates returns the Templates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedTemplates(name string) ([]*Template, error) {
	if o.Edges.namedTemplates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedTemplates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedTemplates(name string, edges ...*Template) {
	if o.Edges.namedTemplates == nil {
		o.Edges.namedTemplates = make(map[string][]*Template)
	}
	if len(edges) == 0 {
		o.Edges.namedTemplates[name] = []*Template{}
	} else {
		o.Edges.namedTemplates[name] = append(o.Edges.namedTemplates[name], edges...)
	}
}

// NamedIntegrations returns the Integrations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedIntegrations(name string) ([]*Integration, error) {
	if o.Edges.namedIntegrations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedIntegrations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedIntegrations(name string, edges ...*Integration) {
	if o.Edges.namedIntegrations == nil {
		o.Edges.namedIntegrations = make(map[string][]*Integration)
	}
	if len(edges) == 0 {
		o.Edges.namedIntegrations[name] = []*Integration{}
	} else {
		o.Edges.namedIntegrations[name] = append(o.Edges.namedIntegrations[name], edges...)
	}
}

// NamedDocumentdata returns the Documentdata named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedDocumentdata(name string) ([]*DocumentData, error) {
	if o.Edges.namedDocumentdata == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedDocumentdata[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedDocumentdata(name string, edges ...*DocumentData) {
	if o.Edges.namedDocumentdata == nil {
		o.Edges.namedDocumentdata = make(map[string][]*DocumentData)
	}
	if len(edges) == 0 {
		o.Edges.namedDocumentdata[name] = []*DocumentData{}
	} else {
		o.Edges.namedDocumentdata[name] = append(o.Edges.namedDocumentdata[name], edges...)
	}
}

// NamedEntitlements returns the Entitlements named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedEntitlements(name string) ([]*Entitlement, error) {
	if o.Edges.namedEntitlements == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedEntitlements[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedEntitlements(name string, edges ...*Entitlement) {
	if o.Edges.namedEntitlements == nil {
		o.Edges.namedEntitlements = make(map[string][]*Entitlement)
	}
	if len(edges) == 0 {
		o.Edges.namedEntitlements[name] = []*Entitlement{}
	} else {
		o.Edges.namedEntitlements[name] = append(o.Edges.namedEntitlements[name], edges...)
	}
}

// NamedOrganizationEntitlement returns the OrganizationEntitlement named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedOrganizationEntitlement(name string) ([]*Entitlement, error) {
	if o.Edges.namedOrganizationEntitlement == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedOrganizationEntitlement[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedOrganizationEntitlement(name string, edges ...*Entitlement) {
	if o.Edges.namedOrganizationEntitlement == nil {
		o.Edges.namedOrganizationEntitlement = make(map[string][]*Entitlement)
	}
	if len(edges) == 0 {
		o.Edges.namedOrganizationEntitlement[name] = []*Entitlement{}
	} else {
		o.Edges.namedOrganizationEntitlement[name] = append(o.Edges.namedOrganizationEntitlement[name], edges...)
	}
}

// NamedPersonalAccessTokens returns the PersonalAccessTokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedPersonalAccessTokens(name string) ([]*PersonalAccessToken, error) {
	if o.Edges.namedPersonalAccessTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedPersonalAccessTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedPersonalAccessTokens(name string, edges ...*PersonalAccessToken) {
	if o.Edges.namedPersonalAccessTokens == nil {
		o.Edges.namedPersonalAccessTokens = make(map[string][]*PersonalAccessToken)
	}
	if len(edges) == 0 {
		o.Edges.namedPersonalAccessTokens[name] = []*PersonalAccessToken{}
	} else {
		o.Edges.namedPersonalAccessTokens[name] = append(o.Edges.namedPersonalAccessTokens[name], edges...)
	}
}

// NamedAPITokens returns the APITokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedAPITokens(name string) ([]*APIToken, error) {
	if o.Edges.namedAPITokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedAPITokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedAPITokens(name string, edges ...*APIToken) {
	if o.Edges.namedAPITokens == nil {
		o.Edges.namedAPITokens = make(map[string][]*APIToken)
	}
	if len(edges) == 0 {
		o.Edges.namedAPITokens[name] = []*APIToken{}
	} else {
		o.Edges.namedAPITokens[name] = append(o.Edges.namedAPITokens[name], edges...)
	}
}

// NamedOauthprovider returns the Oauthprovider named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedOauthprovider(name string) ([]*OauthProvider, error) {
	if o.Edges.namedOauthprovider == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedOauthprovider[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedOauthprovider(name string, edges ...*OauthProvider) {
	if o.Edges.namedOauthprovider == nil {
		o.Edges.namedOauthprovider = make(map[string][]*OauthProvider)
	}
	if len(edges) == 0 {
		o.Edges.namedOauthprovider[name] = []*OauthProvider{}
	} else {
		o.Edges.namedOauthprovider[name] = append(o.Edges.namedOauthprovider[name], edges...)
	}
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedUsers(name string) ([]*User, error) {
	if o.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedUsers(name string, edges ...*User) {
	if o.Edges.namedUsers == nil {
		o.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		o.Edges.namedUsers[name] = []*User{}
	} else {
		o.Edges.namedUsers[name] = append(o.Edges.namedUsers[name], edges...)
	}
}

// NamedInvites returns the Invites named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedInvites(name string) ([]*Invite, error) {
	if o.Edges.namedInvites == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedInvites[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedInvites(name string, edges ...*Invite) {
	if o.Edges.namedInvites == nil {
		o.Edges.namedInvites = make(map[string][]*Invite)
	}
	if len(edges) == 0 {
		o.Edges.namedInvites[name] = []*Invite{}
	} else {
		o.Edges.namedInvites[name] = append(o.Edges.namedInvites[name], edges...)
	}
}

// NamedSubscribers returns the Subscribers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedSubscribers(name string) ([]*Subscriber, error) {
	if o.Edges.namedSubscribers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedSubscribers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedSubscribers(name string, edges ...*Subscriber) {
	if o.Edges.namedSubscribers == nil {
		o.Edges.namedSubscribers = make(map[string][]*Subscriber)
	}
	if len(edges) == 0 {
		o.Edges.namedSubscribers[name] = []*Subscriber{}
	} else {
		o.Edges.namedSubscribers[name] = append(o.Edges.namedSubscribers[name], edges...)
	}
}

// NamedWebhooks returns the Webhooks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedWebhooks(name string) ([]*Webhook, error) {
	if o.Edges.namedWebhooks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedWebhooks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedWebhooks(name string, edges ...*Webhook) {
	if o.Edges.namedWebhooks == nil {
		o.Edges.namedWebhooks = make(map[string][]*Webhook)
	}
	if len(edges) == 0 {
		o.Edges.namedWebhooks[name] = []*Webhook{}
	} else {
		o.Edges.namedWebhooks[name] = append(o.Edges.namedWebhooks[name], edges...)
	}
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedEvents(name string) ([]*Event, error) {
	if o.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedEvents(name string, edges ...*Event) {
	if o.Edges.namedEvents == nil {
		o.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		o.Edges.namedEvents[name] = []*Event{}
	} else {
		o.Edges.namedEvents[name] = append(o.Edges.namedEvents[name], edges...)
	}
}

// NamedSecrets returns the Secrets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedSecrets(name string) ([]*Hush, error) {
	if o.Edges.namedSecrets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedSecrets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedSecrets(name string, edges ...*Hush) {
	if o.Edges.namedSecrets == nil {
		o.Edges.namedSecrets = make(map[string][]*Hush)
	}
	if len(edges) == 0 {
		o.Edges.namedSecrets[name] = []*Hush{}
	} else {
		o.Edges.namedSecrets[name] = append(o.Edges.namedSecrets[name], edges...)
	}
}

// NamedFeatures returns the Features named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedFeatures(name string) ([]*Feature, error) {
	if o.Edges.namedFeatures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedFeatures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedFeatures(name string, edges ...*Feature) {
	if o.Edges.namedFeatures == nil {
		o.Edges.namedFeatures = make(map[string][]*Feature)
	}
	if len(edges) == 0 {
		o.Edges.namedFeatures[name] = []*Feature{}
	} else {
		o.Edges.namedFeatures[name] = append(o.Edges.namedFeatures[name], edges...)
	}
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedFiles(name string) ([]*File, error) {
	if o.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedFiles(name string, edges ...*File) {
	if o.Edges.namedFiles == nil {
		o.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		o.Edges.namedFiles[name] = []*File{}
	} else {
		o.Edges.namedFiles[name] = append(o.Edges.namedFiles[name], edges...)
	}
}

// NamedEntitlementplans returns the Entitlementplans named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedEntitlementplans(name string) ([]*EntitlementPlan, error) {
	if o.Edges.namedEntitlementplans == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedEntitlementplans[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedEntitlementplans(name string, edges ...*EntitlementPlan) {
	if o.Edges.namedEntitlementplans == nil {
		o.Edges.namedEntitlementplans = make(map[string][]*EntitlementPlan)
	}
	if len(edges) == 0 {
		o.Edges.namedEntitlementplans[name] = []*EntitlementPlan{}
	} else {
		o.Edges.namedEntitlementplans[name] = append(o.Edges.namedEntitlementplans[name], edges...)
	}
}

// NamedEntitlementplanfeatures returns the Entitlementplanfeatures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedEntitlementplanfeatures(name string) ([]*EntitlementPlanFeature, error) {
	if o.Edges.namedEntitlementplanfeatures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedEntitlementplanfeatures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedEntitlementplanfeatures(name string, edges ...*EntitlementPlanFeature) {
	if o.Edges.namedEntitlementplanfeatures == nil {
		o.Edges.namedEntitlementplanfeatures = make(map[string][]*EntitlementPlanFeature)
	}
	if len(edges) == 0 {
		o.Edges.namedEntitlementplanfeatures[name] = []*EntitlementPlanFeature{}
	} else {
		o.Edges.namedEntitlementplanfeatures[name] = append(o.Edges.namedEntitlementplanfeatures[name], edges...)
	}
}

// NamedEntities returns the Entities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedEntities(name string) ([]*Entity, error) {
	if o.Edges.namedEntities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedEntities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedEntities(name string, edges ...*Entity) {
	if o.Edges.namedEntities == nil {
		o.Edges.namedEntities = make(map[string][]*Entity)
	}
	if len(edges) == 0 {
		o.Edges.namedEntities[name] = []*Entity{}
	} else {
		o.Edges.namedEntities[name] = append(o.Edges.namedEntities[name], edges...)
	}
}

// NamedEntitytypes returns the Entitytypes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedEntitytypes(name string) ([]*EntityType, error) {
	if o.Edges.namedEntitytypes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedEntitytypes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedEntitytypes(name string, edges ...*EntityType) {
	if o.Edges.namedEntitytypes == nil {
		o.Edges.namedEntitytypes = make(map[string][]*EntityType)
	}
	if len(edges) == 0 {
		o.Edges.namedEntitytypes[name] = []*EntityType{}
	} else {
		o.Edges.namedEntitytypes[name] = append(o.Edges.namedEntitytypes[name], edges...)
	}
}

// NamedContacts returns the Contacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedContacts(name string) ([]*Contact, error) {
	if o.Edges.namedContacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedContacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedContacts(name string, edges ...*Contact) {
	if o.Edges.namedContacts == nil {
		o.Edges.namedContacts = make(map[string][]*Contact)
	}
	if len(edges) == 0 {
		o.Edges.namedContacts[name] = []*Contact{}
	} else {
		o.Edges.namedContacts[name] = append(o.Edges.namedContacts[name], edges...)
	}
}

// NamedNotes returns the Notes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedNotes(name string) ([]*Note, error) {
	if o.Edges.namedNotes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedNotes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedNotes(name string, edges ...*Note) {
	if o.Edges.namedNotes == nil {
		o.Edges.namedNotes = make(map[string][]*Note)
	}
	if len(edges) == 0 {
		o.Edges.namedNotes[name] = []*Note{}
	} else {
		o.Edges.namedNotes[name] = append(o.Edges.namedNotes[name], edges...)
	}
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedTasks(name string) ([]*Task, error) {
	if o.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedTasks(name string, edges ...*Task) {
	if o.Edges.namedTasks == nil {
		o.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		o.Edges.namedTasks[name] = []*Task{}
	} else {
		o.Edges.namedTasks[name] = append(o.Edges.namedTasks[name], edges...)
	}
}

// NamedMembers returns the Members named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedMembers(name string) ([]*OrgMembership, error) {
	if o.Edges.namedMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedMembers(name string, edges ...*OrgMembership) {
	if o.Edges.namedMembers == nil {
		o.Edges.namedMembers = make(map[string][]*OrgMembership)
	}
	if len(edges) == 0 {
		o.Edges.namedMembers[name] = []*OrgMembership{}
	} else {
		o.Edges.namedMembers[name] = append(o.Edges.namedMembers[name], edges...)
	}
}

// Organizations is a parsable slice of Organization.
type Organizations []*Organization
