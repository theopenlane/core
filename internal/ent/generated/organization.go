// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
)

// Organization is the model entity for the Organization schema.
type Organization struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// MappingID holds the value of the "mapping_id" field.
	MappingID string `json:"mapping_id,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the name of the organization
	Name string `json:"name,omitempty"`
	// The organization's displayed 'friendly' name
	DisplayName string `json:"display_name,omitempty"`
	// An optional description of the organization
	Description string `json:"description,omitempty"`
	// The ID of the parent organization for the organization.
	ParentOrganizationID string `json:"parent_organization_id,omitempty"`
	// orgs directly associated with a user
	PersonalOrg bool `json:"personal_org,omitempty"`
	// URL of the user's remote avatar
	AvatarRemoteURL *string `json:"avatar_remote_url,omitempty"`
	// The organizations's local avatar file id, takes precedence over the avatar remote URL
	AvatarLocalFileID *string `json:"avatar_local_file_id,omitempty"`
	// The time the user's (local) avatar was last updated
	AvatarUpdatedAt *time.Time `json:"avatar_updated_at,omitempty"`
	// Whether the organization has a dedicated database
	DedicatedDb bool `json:"dedicated_db,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OrganizationQuery when eager-loading is set.
	Edges        OrganizationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OrganizationEdges holds the relations/edges for other nodes in the graph.
type OrganizationEdges struct {
	// groups that are allowed to create controls
	ControlCreators []*Group `json:"control_creators,omitempty"`
	// groups that are allowed to create control_objectives
	ControlObjectiveCreators []*Group `json:"control_objective_creators,omitempty"`
	// groups that are allowed to create groups
	GroupCreators []*Group `json:"group_creators,omitempty"`
	// groups that are allowed to create internal_policys
	InternalPolicyCreators []*Group `json:"internal_policy_creators,omitempty"`
	// groups that are allowed to create narratives
	NarrativeCreators []*Group `json:"narrative_creators,omitempty"`
	// groups that are allowed to create procedures
	ProcedureCreators []*Group `json:"procedure_creators,omitempty"`
	// groups that are allowed to create programs
	ProgramCreators []*Group `json:"program_creators,omitempty"`
	// groups that are allowed to create risks
	RiskCreators []*Group `json:"risk_creators,omitempty"`
	// groups that are allowed to create templates
	TemplateCreators []*Group `json:"template_creators,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Organization `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Organization `json:"children,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// Templates holds the value of the templates edge.
	Templates []*Template `json:"templates,omitempty"`
	// Integrations holds the value of the integrations edge.
	Integrations []*Integration `json:"integrations,omitempty"`
	// Setting holds the value of the setting edge.
	Setting *OrganizationSetting `json:"setting,omitempty"`
	// DocumentData holds the value of the document_data edge.
	DocumentData []*DocumentData `json:"document_data,omitempty"`
	// OrgSubscriptions holds the value of the org_subscriptions edge.
	OrgSubscriptions []*OrgSubscription `json:"org_subscriptions,omitempty"`
	// PersonalAccessTokens holds the value of the personal_access_tokens edge.
	PersonalAccessTokens []*PersonalAccessToken `json:"personal_access_tokens,omitempty"`
	// APITokens holds the value of the api_tokens edge.
	APITokens []*APIToken `json:"api_tokens,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// Invites holds the value of the invites edge.
	Invites []*Invite `json:"invites,omitempty"`
	// Subscribers holds the value of the subscribers edge.
	Subscribers []*Subscriber `json:"subscribers,omitempty"`
	// Events holds the value of the events edge.
	Events []*Event `json:"events,omitempty"`
	// Secrets holds the value of the secrets edge.
	Secrets []*Hush `json:"secrets,omitempty"`
	// Files holds the value of the files edge.
	Files []*File `json:"files,omitempty"`
	// AvatarFile holds the value of the avatar_file edge.
	AvatarFile *File `json:"avatar_file,omitempty"`
	// Entities holds the value of the entities edge.
	Entities []*Entity `json:"entities,omitempty"`
	// EntityTypes holds the value of the entity_types edge.
	EntityTypes []*EntityType `json:"entity_types,omitempty"`
	// Contacts holds the value of the contacts edge.
	Contacts []*Contact `json:"contacts,omitempty"`
	// Notes holds the value of the notes edge.
	Notes []*Note `json:"notes,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Programs holds the value of the programs edge.
	Programs []*Program `json:"programs,omitempty"`
	// Procedures holds the value of the procedures edge.
	Procedures []*Procedure `json:"procedures,omitempty"`
	// InternalPolicies holds the value of the internal_policies edge.
	InternalPolicies []*InternalPolicy `json:"internal_policies,omitempty"`
	// Risks holds the value of the risks edge.
	Risks []*Risk `json:"risks,omitempty"`
	// ControlObjectives holds the value of the control_objectives edge.
	ControlObjectives []*ControlObjective `json:"control_objectives,omitempty"`
	// Narratives holds the value of the narratives edge.
	Narratives []*Narrative `json:"narratives,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*Control `json:"controls,omitempty"`
	// Subcontrols holds the value of the subcontrols edge.
	Subcontrols []*Subcontrol `json:"subcontrols,omitempty"`
	// Members holds the value of the members edge.
	Members []*OrgMembership `json:"members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [40]bool
	// totalCount holds the count of the edges above.
	totalCount [40]map[string]int

	namedControlCreators          map[string][]*Group
	namedControlObjectiveCreators map[string][]*Group
	namedGroupCreators            map[string][]*Group
	namedInternalPolicyCreators   map[string][]*Group
	namedNarrativeCreators        map[string][]*Group
	namedProcedureCreators        map[string][]*Group
	namedProgramCreators          map[string][]*Group
	namedRiskCreators             map[string][]*Group
	namedTemplateCreators         map[string][]*Group
	namedChildren                 map[string][]*Organization
	namedGroups                   map[string][]*Group
	namedTemplates                map[string][]*Template
	namedIntegrations             map[string][]*Integration
	namedDocumentData             map[string][]*DocumentData
	namedOrgSubscriptions         map[string][]*OrgSubscription
	namedPersonalAccessTokens     map[string][]*PersonalAccessToken
	namedAPITokens                map[string][]*APIToken
	namedUsers                    map[string][]*User
	namedInvites                  map[string][]*Invite
	namedSubscribers              map[string][]*Subscriber
	namedEvents                   map[string][]*Event
	namedSecrets                  map[string][]*Hush
	namedFiles                    map[string][]*File
	namedEntities                 map[string][]*Entity
	namedEntityTypes              map[string][]*EntityType
	namedContacts                 map[string][]*Contact
	namedNotes                    map[string][]*Note
	namedTasks                    map[string][]*Task
	namedPrograms                 map[string][]*Program
	namedProcedures               map[string][]*Procedure
	namedInternalPolicies         map[string][]*InternalPolicy
	namedRisks                    map[string][]*Risk
	namedControlObjectives        map[string][]*ControlObjective
	namedNarratives               map[string][]*Narrative
	namedControls                 map[string][]*Control
	namedSubcontrols              map[string][]*Subcontrol
	namedMembers                  map[string][]*OrgMembership
}

// ControlCreatorsOrErr returns the ControlCreators value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ControlCreatorsOrErr() ([]*Group, error) {
	if e.loadedTypes[0] {
		return e.ControlCreators, nil
	}
	return nil, &NotLoadedError{edge: "control_creators"}
}

// ControlObjectiveCreatorsOrErr returns the ControlObjectiveCreators value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ControlObjectiveCreatorsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.ControlObjectiveCreators, nil
	}
	return nil, &NotLoadedError{edge: "control_objective_creators"}
}

// GroupCreatorsOrErr returns the GroupCreators value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) GroupCreatorsOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.GroupCreators, nil
	}
	return nil, &NotLoadedError{edge: "group_creators"}
}

// InternalPolicyCreatorsOrErr returns the InternalPolicyCreators value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) InternalPolicyCreatorsOrErr() ([]*Group, error) {
	if e.loadedTypes[3] {
		return e.InternalPolicyCreators, nil
	}
	return nil, &NotLoadedError{edge: "internal_policy_creators"}
}

// NarrativeCreatorsOrErr returns the NarrativeCreators value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) NarrativeCreatorsOrErr() ([]*Group, error) {
	if e.loadedTypes[4] {
		return e.NarrativeCreators, nil
	}
	return nil, &NotLoadedError{edge: "narrative_creators"}
}

// ProcedureCreatorsOrErr returns the ProcedureCreators value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ProcedureCreatorsOrErr() ([]*Group, error) {
	if e.loadedTypes[5] {
		return e.ProcedureCreators, nil
	}
	return nil, &NotLoadedError{edge: "procedure_creators"}
}

// ProgramCreatorsOrErr returns the ProgramCreators value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ProgramCreatorsOrErr() ([]*Group, error) {
	if e.loadedTypes[6] {
		return e.ProgramCreators, nil
	}
	return nil, &NotLoadedError{edge: "program_creators"}
}

// RiskCreatorsOrErr returns the RiskCreators value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) RiskCreatorsOrErr() ([]*Group, error) {
	if e.loadedTypes[7] {
		return e.RiskCreators, nil
	}
	return nil, &NotLoadedError{edge: "risk_creators"}
}

// TemplateCreatorsOrErr returns the TemplateCreators value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) TemplateCreatorsOrErr() ([]*Group, error) {
	if e.loadedTypes[8] {
		return e.TemplateCreators, nil
	}
	return nil, &NotLoadedError{edge: "template_creators"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationEdges) ParentOrErr() (*Organization, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[9] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ChildrenOrErr() ([]*Organization, error) {
	if e.loadedTypes[10] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[11] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// TemplatesOrErr returns the Templates value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) TemplatesOrErr() ([]*Template, error) {
	if e.loadedTypes[12] {
		return e.Templates, nil
	}
	return nil, &NotLoadedError{edge: "templates"}
}

// IntegrationsOrErr returns the Integrations value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) IntegrationsOrErr() ([]*Integration, error) {
	if e.loadedTypes[13] {
		return e.Integrations, nil
	}
	return nil, &NotLoadedError{edge: "integrations"}
}

// SettingOrErr returns the Setting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationEdges) SettingOrErr() (*OrganizationSetting, error) {
	if e.Setting != nil {
		return e.Setting, nil
	} else if e.loadedTypes[14] {
		return nil, &NotFoundError{label: organizationsetting.Label}
	}
	return nil, &NotLoadedError{edge: "setting"}
}

// DocumentDataOrErr returns the DocumentData value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) DocumentDataOrErr() ([]*DocumentData, error) {
	if e.loadedTypes[15] {
		return e.DocumentData, nil
	}
	return nil, &NotLoadedError{edge: "document_data"}
}

// OrgSubscriptionsOrErr returns the OrgSubscriptions value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) OrgSubscriptionsOrErr() ([]*OrgSubscription, error) {
	if e.loadedTypes[16] {
		return e.OrgSubscriptions, nil
	}
	return nil, &NotLoadedError{edge: "org_subscriptions"}
}

// PersonalAccessTokensOrErr returns the PersonalAccessTokens value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) PersonalAccessTokensOrErr() ([]*PersonalAccessToken, error) {
	if e.loadedTypes[17] {
		return e.PersonalAccessTokens, nil
	}
	return nil, &NotLoadedError{edge: "personal_access_tokens"}
}

// APITokensOrErr returns the APITokens value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) APITokensOrErr() ([]*APIToken, error) {
	if e.loadedTypes[18] {
		return e.APITokens, nil
	}
	return nil, &NotLoadedError{edge: "api_tokens"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[19] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// InvitesOrErr returns the Invites value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) InvitesOrErr() ([]*Invite, error) {
	if e.loadedTypes[20] {
		return e.Invites, nil
	}
	return nil, &NotLoadedError{edge: "invites"}
}

// SubscribersOrErr returns the Subscribers value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) SubscribersOrErr() ([]*Subscriber, error) {
	if e.loadedTypes[21] {
		return e.Subscribers, nil
	}
	return nil, &NotLoadedError{edge: "subscribers"}
}

// EventsOrErr returns the Events value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) EventsOrErr() ([]*Event, error) {
	if e.loadedTypes[22] {
		return e.Events, nil
	}
	return nil, &NotLoadedError{edge: "events"}
}

// SecretsOrErr returns the Secrets value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) SecretsOrErr() ([]*Hush, error) {
	if e.loadedTypes[23] {
		return e.Secrets, nil
	}
	return nil, &NotLoadedError{edge: "secrets"}
}

// FilesOrErr returns the Files value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) FilesOrErr() ([]*File, error) {
	if e.loadedTypes[24] {
		return e.Files, nil
	}
	return nil, &NotLoadedError{edge: "files"}
}

// AvatarFileOrErr returns the AvatarFile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OrganizationEdges) AvatarFileOrErr() (*File, error) {
	if e.AvatarFile != nil {
		return e.AvatarFile, nil
	} else if e.loadedTypes[25] {
		return nil, &NotFoundError{label: file.Label}
	}
	return nil, &NotLoadedError{edge: "avatar_file"}
}

// EntitiesOrErr returns the Entities value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) EntitiesOrErr() ([]*Entity, error) {
	if e.loadedTypes[26] {
		return e.Entities, nil
	}
	return nil, &NotLoadedError{edge: "entities"}
}

// EntityTypesOrErr returns the EntityTypes value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) EntityTypesOrErr() ([]*EntityType, error) {
	if e.loadedTypes[27] {
		return e.EntityTypes, nil
	}
	return nil, &NotLoadedError{edge: "entity_types"}
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[28] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// NotesOrErr returns the Notes value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) NotesOrErr() ([]*Note, error) {
	if e.loadedTypes[29] {
		return e.Notes, nil
	}
	return nil, &NotLoadedError{edge: "notes"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[30] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// ProgramsOrErr returns the Programs value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ProgramsOrErr() ([]*Program, error) {
	if e.loadedTypes[31] {
		return e.Programs, nil
	}
	return nil, &NotLoadedError{edge: "programs"}
}

// ProceduresOrErr returns the Procedures value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ProceduresOrErr() ([]*Procedure, error) {
	if e.loadedTypes[32] {
		return e.Procedures, nil
	}
	return nil, &NotLoadedError{edge: "procedures"}
}

// InternalPoliciesOrErr returns the InternalPolicies value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) InternalPoliciesOrErr() ([]*InternalPolicy, error) {
	if e.loadedTypes[33] {
		return e.InternalPolicies, nil
	}
	return nil, &NotLoadedError{edge: "internal_policies"}
}

// RisksOrErr returns the Risks value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) RisksOrErr() ([]*Risk, error) {
	if e.loadedTypes[34] {
		return e.Risks, nil
	}
	return nil, &NotLoadedError{edge: "risks"}
}

// ControlObjectivesOrErr returns the ControlObjectives value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ControlObjectivesOrErr() ([]*ControlObjective, error) {
	if e.loadedTypes[35] {
		return e.ControlObjectives, nil
	}
	return nil, &NotLoadedError{edge: "control_objectives"}
}

// NarrativesOrErr returns the Narratives value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) NarrativesOrErr() ([]*Narrative, error) {
	if e.loadedTypes[36] {
		return e.Narratives, nil
	}
	return nil, &NotLoadedError{edge: "narratives"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) ControlsOrErr() ([]*Control, error) {
	if e.loadedTypes[37] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// SubcontrolsOrErr returns the Subcontrols value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) SubcontrolsOrErr() ([]*Subcontrol, error) {
	if e.loadedTypes[38] {
		return e.Subcontrols, nil
	}
	return nil, &NotLoadedError{edge: "subcontrols"}
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e OrganizationEdges) MembersOrErr() ([]*OrgMembership, error) {
	if e.loadedTypes[39] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Organization) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organization.FieldTags:
			values[i] = new([]byte)
		case organization.FieldPersonalOrg, organization.FieldDedicatedDb:
			values[i] = new(sql.NullBool)
		case organization.FieldID, organization.FieldCreatedBy, organization.FieldUpdatedBy, organization.FieldMappingID, organization.FieldDeletedBy, organization.FieldName, organization.FieldDisplayName, organization.FieldDescription, organization.FieldParentOrganizationID, organization.FieldAvatarRemoteURL, organization.FieldAvatarLocalFileID:
			values[i] = new(sql.NullString)
		case organization.FieldCreatedAt, organization.FieldUpdatedAt, organization.FieldDeletedAt, organization.FieldAvatarUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Organization fields.
func (o *Organization) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organization.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				o.ID = value.String
			}
		case organization.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Time
			}
		case organization.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Time
			}
		case organization.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				o.CreatedBy = value.String
			}
		case organization.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				o.UpdatedBy = value.String
			}
		case organization.FieldMappingID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mapping_id", values[i])
			} else if value.Valid {
				o.MappingID = value.String
			}
		case organization.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &o.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case organization.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				o.DeletedAt = value.Time
			}
		case organization.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				o.DeletedBy = value.String
			}
		case organization.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case organization.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				o.DisplayName = value.String
			}
		case organization.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				o.Description = value.String
			}
		case organization.FieldParentOrganizationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field parent_organization_id", values[i])
			} else if value.Valid {
				o.ParentOrganizationID = value.String
			}
		case organization.FieldPersonalOrg:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field personal_org", values[i])
			} else if value.Valid {
				o.PersonalOrg = value.Bool
			}
		case organization.FieldAvatarRemoteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_remote_url", values[i])
			} else if value.Valid {
				o.AvatarRemoteURL = new(string)
				*o.AvatarRemoteURL = value.String
			}
		case organization.FieldAvatarLocalFileID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_local_file_id", values[i])
			} else if value.Valid {
				o.AvatarLocalFileID = new(string)
				*o.AvatarLocalFileID = value.String
			}
		case organization.FieldAvatarUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_updated_at", values[i])
			} else if value.Valid {
				o.AvatarUpdatedAt = new(time.Time)
				*o.AvatarUpdatedAt = value.Time
			}
		case organization.FieldDedicatedDb:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field dedicated_db", values[i])
			} else if value.Valid {
				o.DedicatedDb = value.Bool
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Organization.
// This includes values selected through modifiers, order, etc.
func (o *Organization) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryControlCreators queries the "control_creators" edge of the Organization entity.
func (o *Organization) QueryControlCreators() *GroupQuery {
	return NewOrganizationClient(o.config).QueryControlCreators(o)
}

// QueryControlObjectiveCreators queries the "control_objective_creators" edge of the Organization entity.
func (o *Organization) QueryControlObjectiveCreators() *GroupQuery {
	return NewOrganizationClient(o.config).QueryControlObjectiveCreators(o)
}

// QueryGroupCreators queries the "group_creators" edge of the Organization entity.
func (o *Organization) QueryGroupCreators() *GroupQuery {
	return NewOrganizationClient(o.config).QueryGroupCreators(o)
}

// QueryInternalPolicyCreators queries the "internal_policy_creators" edge of the Organization entity.
func (o *Organization) QueryInternalPolicyCreators() *GroupQuery {
	return NewOrganizationClient(o.config).QueryInternalPolicyCreators(o)
}

// QueryNarrativeCreators queries the "narrative_creators" edge of the Organization entity.
func (o *Organization) QueryNarrativeCreators() *GroupQuery {
	return NewOrganizationClient(o.config).QueryNarrativeCreators(o)
}

// QueryProcedureCreators queries the "procedure_creators" edge of the Organization entity.
func (o *Organization) QueryProcedureCreators() *GroupQuery {
	return NewOrganizationClient(o.config).QueryProcedureCreators(o)
}

// QueryProgramCreators queries the "program_creators" edge of the Organization entity.
func (o *Organization) QueryProgramCreators() *GroupQuery {
	return NewOrganizationClient(o.config).QueryProgramCreators(o)
}

// QueryRiskCreators queries the "risk_creators" edge of the Organization entity.
func (o *Organization) QueryRiskCreators() *GroupQuery {
	return NewOrganizationClient(o.config).QueryRiskCreators(o)
}

// QueryTemplateCreators queries the "template_creators" edge of the Organization entity.
func (o *Organization) QueryTemplateCreators() *GroupQuery {
	return NewOrganizationClient(o.config).QueryTemplateCreators(o)
}

// QueryParent queries the "parent" edge of the Organization entity.
func (o *Organization) QueryParent() *OrganizationQuery {
	return NewOrganizationClient(o.config).QueryParent(o)
}

// QueryChildren queries the "children" edge of the Organization entity.
func (o *Organization) QueryChildren() *OrganizationQuery {
	return NewOrganizationClient(o.config).QueryChildren(o)
}

// QueryGroups queries the "groups" edge of the Organization entity.
func (o *Organization) QueryGroups() *GroupQuery {
	return NewOrganizationClient(o.config).QueryGroups(o)
}

// QueryTemplates queries the "templates" edge of the Organization entity.
func (o *Organization) QueryTemplates() *TemplateQuery {
	return NewOrganizationClient(o.config).QueryTemplates(o)
}

// QueryIntegrations queries the "integrations" edge of the Organization entity.
func (o *Organization) QueryIntegrations() *IntegrationQuery {
	return NewOrganizationClient(o.config).QueryIntegrations(o)
}

// QuerySetting queries the "setting" edge of the Organization entity.
func (o *Organization) QuerySetting() *OrganizationSettingQuery {
	return NewOrganizationClient(o.config).QuerySetting(o)
}

// QueryDocumentData queries the "document_data" edge of the Organization entity.
func (o *Organization) QueryDocumentData() *DocumentDataQuery {
	return NewOrganizationClient(o.config).QueryDocumentData(o)
}

// QueryOrgSubscriptions queries the "org_subscriptions" edge of the Organization entity.
func (o *Organization) QueryOrgSubscriptions() *OrgSubscriptionQuery {
	return NewOrganizationClient(o.config).QueryOrgSubscriptions(o)
}

// QueryPersonalAccessTokens queries the "personal_access_tokens" edge of the Organization entity.
func (o *Organization) QueryPersonalAccessTokens() *PersonalAccessTokenQuery {
	return NewOrganizationClient(o.config).QueryPersonalAccessTokens(o)
}

// QueryAPITokens queries the "api_tokens" edge of the Organization entity.
func (o *Organization) QueryAPITokens() *APITokenQuery {
	return NewOrganizationClient(o.config).QueryAPITokens(o)
}

// QueryUsers queries the "users" edge of the Organization entity.
func (o *Organization) QueryUsers() *UserQuery {
	return NewOrganizationClient(o.config).QueryUsers(o)
}

// QueryInvites queries the "invites" edge of the Organization entity.
func (o *Organization) QueryInvites() *InviteQuery {
	return NewOrganizationClient(o.config).QueryInvites(o)
}

// QuerySubscribers queries the "subscribers" edge of the Organization entity.
func (o *Organization) QuerySubscribers() *SubscriberQuery {
	return NewOrganizationClient(o.config).QuerySubscribers(o)
}

// QueryEvents queries the "events" edge of the Organization entity.
func (o *Organization) QueryEvents() *EventQuery {
	return NewOrganizationClient(o.config).QueryEvents(o)
}

// QuerySecrets queries the "secrets" edge of the Organization entity.
func (o *Organization) QuerySecrets() *HushQuery {
	return NewOrganizationClient(o.config).QuerySecrets(o)
}

// QueryFiles queries the "files" edge of the Organization entity.
func (o *Organization) QueryFiles() *FileQuery {
	return NewOrganizationClient(o.config).QueryFiles(o)
}

// QueryAvatarFile queries the "avatar_file" edge of the Organization entity.
func (o *Organization) QueryAvatarFile() *FileQuery {
	return NewOrganizationClient(o.config).QueryAvatarFile(o)
}

// QueryEntities queries the "entities" edge of the Organization entity.
func (o *Organization) QueryEntities() *EntityQuery {
	return NewOrganizationClient(o.config).QueryEntities(o)
}

// QueryEntityTypes queries the "entity_types" edge of the Organization entity.
func (o *Organization) QueryEntityTypes() *EntityTypeQuery {
	return NewOrganizationClient(o.config).QueryEntityTypes(o)
}

// QueryContacts queries the "contacts" edge of the Organization entity.
func (o *Organization) QueryContacts() *ContactQuery {
	return NewOrganizationClient(o.config).QueryContacts(o)
}

// QueryNotes queries the "notes" edge of the Organization entity.
func (o *Organization) QueryNotes() *NoteQuery {
	return NewOrganizationClient(o.config).QueryNotes(o)
}

// QueryTasks queries the "tasks" edge of the Organization entity.
func (o *Organization) QueryTasks() *TaskQuery {
	return NewOrganizationClient(o.config).QueryTasks(o)
}

// QueryPrograms queries the "programs" edge of the Organization entity.
func (o *Organization) QueryPrograms() *ProgramQuery {
	return NewOrganizationClient(o.config).QueryPrograms(o)
}

// QueryProcedures queries the "procedures" edge of the Organization entity.
func (o *Organization) QueryProcedures() *ProcedureQuery {
	return NewOrganizationClient(o.config).QueryProcedures(o)
}

// QueryInternalPolicies queries the "internal_policies" edge of the Organization entity.
func (o *Organization) QueryInternalPolicies() *InternalPolicyQuery {
	return NewOrganizationClient(o.config).QueryInternalPolicies(o)
}

// QueryRisks queries the "risks" edge of the Organization entity.
func (o *Organization) QueryRisks() *RiskQuery {
	return NewOrganizationClient(o.config).QueryRisks(o)
}

// QueryControlObjectives queries the "control_objectives" edge of the Organization entity.
func (o *Organization) QueryControlObjectives() *ControlObjectiveQuery {
	return NewOrganizationClient(o.config).QueryControlObjectives(o)
}

// QueryNarratives queries the "narratives" edge of the Organization entity.
func (o *Organization) QueryNarratives() *NarrativeQuery {
	return NewOrganizationClient(o.config).QueryNarratives(o)
}

// QueryControls queries the "controls" edge of the Organization entity.
func (o *Organization) QueryControls() *ControlQuery {
	return NewOrganizationClient(o.config).QueryControls(o)
}

// QuerySubcontrols queries the "subcontrols" edge of the Organization entity.
func (o *Organization) QuerySubcontrols() *SubcontrolQuery {
	return NewOrganizationClient(o.config).QuerySubcontrols(o)
}

// QueryMembers queries the "members" edge of the Organization entity.
func (o *Organization) QueryMembers() *OrgMembershipQuery {
	return NewOrganizationClient(o.config).QueryMembers(o)
}

// Update returns a builder for updating this Organization.
// Note that you need to call Organization.Unwrap() before calling this method if this Organization
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Organization) Update() *OrganizationUpdateOne {
	return NewOrganizationClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Organization entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Organization) Unwrap() *Organization {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("generated: Organization is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Organization) String() string {
	var builder strings.Builder
	builder.WriteString("Organization(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(o.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(o.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("mapping_id=")
	builder.WriteString(o.MappingID)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", o.Tags))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(o.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(o.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(o.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(o.Description)
	builder.WriteString(", ")
	builder.WriteString("parent_organization_id=")
	builder.WriteString(o.ParentOrganizationID)
	builder.WriteString(", ")
	builder.WriteString("personal_org=")
	builder.WriteString(fmt.Sprintf("%v", o.PersonalOrg))
	builder.WriteString(", ")
	if v := o.AvatarRemoteURL; v != nil {
		builder.WriteString("avatar_remote_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := o.AvatarLocalFileID; v != nil {
		builder.WriteString("avatar_local_file_id=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := o.AvatarUpdatedAt; v != nil {
		builder.WriteString("avatar_updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("dedicated_db=")
	builder.WriteString(fmt.Sprintf("%v", o.DedicatedDb))
	builder.WriteByte(')')
	return builder.String()
}

// NamedControlCreators returns the ControlCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedControlCreators(name string) ([]*Group, error) {
	if o.Edges.namedControlCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedControlCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedControlCreators(name string, edges ...*Group) {
	if o.Edges.namedControlCreators == nil {
		o.Edges.namedControlCreators = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		o.Edges.namedControlCreators[name] = []*Group{}
	} else {
		o.Edges.namedControlCreators[name] = append(o.Edges.namedControlCreators[name], edges...)
	}
}

// NamedControlObjectiveCreators returns the ControlObjectiveCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedControlObjectiveCreators(name string) ([]*Group, error) {
	if o.Edges.namedControlObjectiveCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedControlObjectiveCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedControlObjectiveCreators(name string, edges ...*Group) {
	if o.Edges.namedControlObjectiveCreators == nil {
		o.Edges.namedControlObjectiveCreators = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		o.Edges.namedControlObjectiveCreators[name] = []*Group{}
	} else {
		o.Edges.namedControlObjectiveCreators[name] = append(o.Edges.namedControlObjectiveCreators[name], edges...)
	}
}

// NamedGroupCreators returns the GroupCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedGroupCreators(name string) ([]*Group, error) {
	if o.Edges.namedGroupCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedGroupCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedGroupCreators(name string, edges ...*Group) {
	if o.Edges.namedGroupCreators == nil {
		o.Edges.namedGroupCreators = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		o.Edges.namedGroupCreators[name] = []*Group{}
	} else {
		o.Edges.namedGroupCreators[name] = append(o.Edges.namedGroupCreators[name], edges...)
	}
}

// NamedInternalPolicyCreators returns the InternalPolicyCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedInternalPolicyCreators(name string) ([]*Group, error) {
	if o.Edges.namedInternalPolicyCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedInternalPolicyCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedInternalPolicyCreators(name string, edges ...*Group) {
	if o.Edges.namedInternalPolicyCreators == nil {
		o.Edges.namedInternalPolicyCreators = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		o.Edges.namedInternalPolicyCreators[name] = []*Group{}
	} else {
		o.Edges.namedInternalPolicyCreators[name] = append(o.Edges.namedInternalPolicyCreators[name], edges...)
	}
}

// NamedNarrativeCreators returns the NarrativeCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedNarrativeCreators(name string) ([]*Group, error) {
	if o.Edges.namedNarrativeCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedNarrativeCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedNarrativeCreators(name string, edges ...*Group) {
	if o.Edges.namedNarrativeCreators == nil {
		o.Edges.namedNarrativeCreators = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		o.Edges.namedNarrativeCreators[name] = []*Group{}
	} else {
		o.Edges.namedNarrativeCreators[name] = append(o.Edges.namedNarrativeCreators[name], edges...)
	}
}

// NamedProcedureCreators returns the ProcedureCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedProcedureCreators(name string) ([]*Group, error) {
	if o.Edges.namedProcedureCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedProcedureCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedProcedureCreators(name string, edges ...*Group) {
	if o.Edges.namedProcedureCreators == nil {
		o.Edges.namedProcedureCreators = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		o.Edges.namedProcedureCreators[name] = []*Group{}
	} else {
		o.Edges.namedProcedureCreators[name] = append(o.Edges.namedProcedureCreators[name], edges...)
	}
}

// NamedProgramCreators returns the ProgramCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedProgramCreators(name string) ([]*Group, error) {
	if o.Edges.namedProgramCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedProgramCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedProgramCreators(name string, edges ...*Group) {
	if o.Edges.namedProgramCreators == nil {
		o.Edges.namedProgramCreators = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		o.Edges.namedProgramCreators[name] = []*Group{}
	} else {
		o.Edges.namedProgramCreators[name] = append(o.Edges.namedProgramCreators[name], edges...)
	}
}

// NamedRiskCreators returns the RiskCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedRiskCreators(name string) ([]*Group, error) {
	if o.Edges.namedRiskCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedRiskCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedRiskCreators(name string, edges ...*Group) {
	if o.Edges.namedRiskCreators == nil {
		o.Edges.namedRiskCreators = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		o.Edges.namedRiskCreators[name] = []*Group{}
	} else {
		o.Edges.namedRiskCreators[name] = append(o.Edges.namedRiskCreators[name], edges...)
	}
}

// NamedTemplateCreators returns the TemplateCreators named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedTemplateCreators(name string) ([]*Group, error) {
	if o.Edges.namedTemplateCreators == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedTemplateCreators[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedTemplateCreators(name string, edges ...*Group) {
	if o.Edges.namedTemplateCreators == nil {
		o.Edges.namedTemplateCreators = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		o.Edges.namedTemplateCreators[name] = []*Group{}
	} else {
		o.Edges.namedTemplateCreators[name] = append(o.Edges.namedTemplateCreators[name], edges...)
	}
}

// NamedChildren returns the Children named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedChildren(name string) ([]*Organization, error) {
	if o.Edges.namedChildren == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedChildren[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedChildren(name string, edges ...*Organization) {
	if o.Edges.namedChildren == nil {
		o.Edges.namedChildren = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		o.Edges.namedChildren[name] = []*Organization{}
	} else {
		o.Edges.namedChildren[name] = append(o.Edges.namedChildren[name], edges...)
	}
}

// NamedGroups returns the Groups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedGroups(name string) ([]*Group, error) {
	if o.Edges.namedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedGroups(name string, edges ...*Group) {
	if o.Edges.namedGroups == nil {
		o.Edges.namedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		o.Edges.namedGroups[name] = []*Group{}
	} else {
		o.Edges.namedGroups[name] = append(o.Edges.namedGroups[name], edges...)
	}
}

// NamedTemplates returns the Templates named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedTemplates(name string) ([]*Template, error) {
	if o.Edges.namedTemplates == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedTemplates[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedTemplates(name string, edges ...*Template) {
	if o.Edges.namedTemplates == nil {
		o.Edges.namedTemplates = make(map[string][]*Template)
	}
	if len(edges) == 0 {
		o.Edges.namedTemplates[name] = []*Template{}
	} else {
		o.Edges.namedTemplates[name] = append(o.Edges.namedTemplates[name], edges...)
	}
}

// NamedIntegrations returns the Integrations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedIntegrations(name string) ([]*Integration, error) {
	if o.Edges.namedIntegrations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedIntegrations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedIntegrations(name string, edges ...*Integration) {
	if o.Edges.namedIntegrations == nil {
		o.Edges.namedIntegrations = make(map[string][]*Integration)
	}
	if len(edges) == 0 {
		o.Edges.namedIntegrations[name] = []*Integration{}
	} else {
		o.Edges.namedIntegrations[name] = append(o.Edges.namedIntegrations[name], edges...)
	}
}

// NamedDocumentData returns the DocumentData named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedDocumentData(name string) ([]*DocumentData, error) {
	if o.Edges.namedDocumentData == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedDocumentData[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedDocumentData(name string, edges ...*DocumentData) {
	if o.Edges.namedDocumentData == nil {
		o.Edges.namedDocumentData = make(map[string][]*DocumentData)
	}
	if len(edges) == 0 {
		o.Edges.namedDocumentData[name] = []*DocumentData{}
	} else {
		o.Edges.namedDocumentData[name] = append(o.Edges.namedDocumentData[name], edges...)
	}
}

// NamedOrgSubscriptions returns the OrgSubscriptions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedOrgSubscriptions(name string) ([]*OrgSubscription, error) {
	if o.Edges.namedOrgSubscriptions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedOrgSubscriptions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedOrgSubscriptions(name string, edges ...*OrgSubscription) {
	if o.Edges.namedOrgSubscriptions == nil {
		o.Edges.namedOrgSubscriptions = make(map[string][]*OrgSubscription)
	}
	if len(edges) == 0 {
		o.Edges.namedOrgSubscriptions[name] = []*OrgSubscription{}
	} else {
		o.Edges.namedOrgSubscriptions[name] = append(o.Edges.namedOrgSubscriptions[name], edges...)
	}
}

// NamedPersonalAccessTokens returns the PersonalAccessTokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedPersonalAccessTokens(name string) ([]*PersonalAccessToken, error) {
	if o.Edges.namedPersonalAccessTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedPersonalAccessTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedPersonalAccessTokens(name string, edges ...*PersonalAccessToken) {
	if o.Edges.namedPersonalAccessTokens == nil {
		o.Edges.namedPersonalAccessTokens = make(map[string][]*PersonalAccessToken)
	}
	if len(edges) == 0 {
		o.Edges.namedPersonalAccessTokens[name] = []*PersonalAccessToken{}
	} else {
		o.Edges.namedPersonalAccessTokens[name] = append(o.Edges.namedPersonalAccessTokens[name], edges...)
	}
}

// NamedAPITokens returns the APITokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedAPITokens(name string) ([]*APIToken, error) {
	if o.Edges.namedAPITokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedAPITokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedAPITokens(name string, edges ...*APIToken) {
	if o.Edges.namedAPITokens == nil {
		o.Edges.namedAPITokens = make(map[string][]*APIToken)
	}
	if len(edges) == 0 {
		o.Edges.namedAPITokens[name] = []*APIToken{}
	} else {
		o.Edges.namedAPITokens[name] = append(o.Edges.namedAPITokens[name], edges...)
	}
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedUsers(name string) ([]*User, error) {
	if o.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedUsers(name string, edges ...*User) {
	if o.Edges.namedUsers == nil {
		o.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		o.Edges.namedUsers[name] = []*User{}
	} else {
		o.Edges.namedUsers[name] = append(o.Edges.namedUsers[name], edges...)
	}
}

// NamedInvites returns the Invites named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedInvites(name string) ([]*Invite, error) {
	if o.Edges.namedInvites == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedInvites[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedInvites(name string, edges ...*Invite) {
	if o.Edges.namedInvites == nil {
		o.Edges.namedInvites = make(map[string][]*Invite)
	}
	if len(edges) == 0 {
		o.Edges.namedInvites[name] = []*Invite{}
	} else {
		o.Edges.namedInvites[name] = append(o.Edges.namedInvites[name], edges...)
	}
}

// NamedSubscribers returns the Subscribers named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedSubscribers(name string) ([]*Subscriber, error) {
	if o.Edges.namedSubscribers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedSubscribers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedSubscribers(name string, edges ...*Subscriber) {
	if o.Edges.namedSubscribers == nil {
		o.Edges.namedSubscribers = make(map[string][]*Subscriber)
	}
	if len(edges) == 0 {
		o.Edges.namedSubscribers[name] = []*Subscriber{}
	} else {
		o.Edges.namedSubscribers[name] = append(o.Edges.namedSubscribers[name], edges...)
	}
}

// NamedEvents returns the Events named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedEvents(name string) ([]*Event, error) {
	if o.Edges.namedEvents == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedEvents[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedEvents(name string, edges ...*Event) {
	if o.Edges.namedEvents == nil {
		o.Edges.namedEvents = make(map[string][]*Event)
	}
	if len(edges) == 0 {
		o.Edges.namedEvents[name] = []*Event{}
	} else {
		o.Edges.namedEvents[name] = append(o.Edges.namedEvents[name], edges...)
	}
}

// NamedSecrets returns the Secrets named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedSecrets(name string) ([]*Hush, error) {
	if o.Edges.namedSecrets == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedSecrets[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedSecrets(name string, edges ...*Hush) {
	if o.Edges.namedSecrets == nil {
		o.Edges.namedSecrets = make(map[string][]*Hush)
	}
	if len(edges) == 0 {
		o.Edges.namedSecrets[name] = []*Hush{}
	} else {
		o.Edges.namedSecrets[name] = append(o.Edges.namedSecrets[name], edges...)
	}
}

// NamedFiles returns the Files named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedFiles(name string) ([]*File, error) {
	if o.Edges.namedFiles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedFiles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedFiles(name string, edges ...*File) {
	if o.Edges.namedFiles == nil {
		o.Edges.namedFiles = make(map[string][]*File)
	}
	if len(edges) == 0 {
		o.Edges.namedFiles[name] = []*File{}
	} else {
		o.Edges.namedFiles[name] = append(o.Edges.namedFiles[name], edges...)
	}
}

// NamedEntities returns the Entities named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedEntities(name string) ([]*Entity, error) {
	if o.Edges.namedEntities == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedEntities[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedEntities(name string, edges ...*Entity) {
	if o.Edges.namedEntities == nil {
		o.Edges.namedEntities = make(map[string][]*Entity)
	}
	if len(edges) == 0 {
		o.Edges.namedEntities[name] = []*Entity{}
	} else {
		o.Edges.namedEntities[name] = append(o.Edges.namedEntities[name], edges...)
	}
}

// NamedEntityTypes returns the EntityTypes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedEntityTypes(name string) ([]*EntityType, error) {
	if o.Edges.namedEntityTypes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedEntityTypes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedEntityTypes(name string, edges ...*EntityType) {
	if o.Edges.namedEntityTypes == nil {
		o.Edges.namedEntityTypes = make(map[string][]*EntityType)
	}
	if len(edges) == 0 {
		o.Edges.namedEntityTypes[name] = []*EntityType{}
	} else {
		o.Edges.namedEntityTypes[name] = append(o.Edges.namedEntityTypes[name], edges...)
	}
}

// NamedContacts returns the Contacts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedContacts(name string) ([]*Contact, error) {
	if o.Edges.namedContacts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedContacts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedContacts(name string, edges ...*Contact) {
	if o.Edges.namedContacts == nil {
		o.Edges.namedContacts = make(map[string][]*Contact)
	}
	if len(edges) == 0 {
		o.Edges.namedContacts[name] = []*Contact{}
	} else {
		o.Edges.namedContacts[name] = append(o.Edges.namedContacts[name], edges...)
	}
}

// NamedNotes returns the Notes named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedNotes(name string) ([]*Note, error) {
	if o.Edges.namedNotes == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedNotes[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedNotes(name string, edges ...*Note) {
	if o.Edges.namedNotes == nil {
		o.Edges.namedNotes = make(map[string][]*Note)
	}
	if len(edges) == 0 {
		o.Edges.namedNotes[name] = []*Note{}
	} else {
		o.Edges.namedNotes[name] = append(o.Edges.namedNotes[name], edges...)
	}
}

// NamedTasks returns the Tasks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedTasks(name string) ([]*Task, error) {
	if o.Edges.namedTasks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedTasks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedTasks(name string, edges ...*Task) {
	if o.Edges.namedTasks == nil {
		o.Edges.namedTasks = make(map[string][]*Task)
	}
	if len(edges) == 0 {
		o.Edges.namedTasks[name] = []*Task{}
	} else {
		o.Edges.namedTasks[name] = append(o.Edges.namedTasks[name], edges...)
	}
}

// NamedPrograms returns the Programs named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedPrograms(name string) ([]*Program, error) {
	if o.Edges.namedPrograms == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedPrograms[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedPrograms(name string, edges ...*Program) {
	if o.Edges.namedPrograms == nil {
		o.Edges.namedPrograms = make(map[string][]*Program)
	}
	if len(edges) == 0 {
		o.Edges.namedPrograms[name] = []*Program{}
	} else {
		o.Edges.namedPrograms[name] = append(o.Edges.namedPrograms[name], edges...)
	}
}

// NamedProcedures returns the Procedures named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedProcedures(name string) ([]*Procedure, error) {
	if o.Edges.namedProcedures == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedProcedures[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedProcedures(name string, edges ...*Procedure) {
	if o.Edges.namedProcedures == nil {
		o.Edges.namedProcedures = make(map[string][]*Procedure)
	}
	if len(edges) == 0 {
		o.Edges.namedProcedures[name] = []*Procedure{}
	} else {
		o.Edges.namedProcedures[name] = append(o.Edges.namedProcedures[name], edges...)
	}
}

// NamedInternalPolicies returns the InternalPolicies named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedInternalPolicies(name string) ([]*InternalPolicy, error) {
	if o.Edges.namedInternalPolicies == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedInternalPolicies[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedInternalPolicies(name string, edges ...*InternalPolicy) {
	if o.Edges.namedInternalPolicies == nil {
		o.Edges.namedInternalPolicies = make(map[string][]*InternalPolicy)
	}
	if len(edges) == 0 {
		o.Edges.namedInternalPolicies[name] = []*InternalPolicy{}
	} else {
		o.Edges.namedInternalPolicies[name] = append(o.Edges.namedInternalPolicies[name], edges...)
	}
}

// NamedRisks returns the Risks named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedRisks(name string) ([]*Risk, error) {
	if o.Edges.namedRisks == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedRisks[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedRisks(name string, edges ...*Risk) {
	if o.Edges.namedRisks == nil {
		o.Edges.namedRisks = make(map[string][]*Risk)
	}
	if len(edges) == 0 {
		o.Edges.namedRisks[name] = []*Risk{}
	} else {
		o.Edges.namedRisks[name] = append(o.Edges.namedRisks[name], edges...)
	}
}

// NamedControlObjectives returns the ControlObjectives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedControlObjectives(name string) ([]*ControlObjective, error) {
	if o.Edges.namedControlObjectives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedControlObjectives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedControlObjectives(name string, edges ...*ControlObjective) {
	if o.Edges.namedControlObjectives == nil {
		o.Edges.namedControlObjectives = make(map[string][]*ControlObjective)
	}
	if len(edges) == 0 {
		o.Edges.namedControlObjectives[name] = []*ControlObjective{}
	} else {
		o.Edges.namedControlObjectives[name] = append(o.Edges.namedControlObjectives[name], edges...)
	}
}

// NamedNarratives returns the Narratives named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedNarratives(name string) ([]*Narrative, error) {
	if o.Edges.namedNarratives == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedNarratives[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedNarratives(name string, edges ...*Narrative) {
	if o.Edges.namedNarratives == nil {
		o.Edges.namedNarratives = make(map[string][]*Narrative)
	}
	if len(edges) == 0 {
		o.Edges.namedNarratives[name] = []*Narrative{}
	} else {
		o.Edges.namedNarratives[name] = append(o.Edges.namedNarratives[name], edges...)
	}
}

// NamedControls returns the Controls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedControls(name string) ([]*Control, error) {
	if o.Edges.namedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedControls(name string, edges ...*Control) {
	if o.Edges.namedControls == nil {
		o.Edges.namedControls = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		o.Edges.namedControls[name] = []*Control{}
	} else {
		o.Edges.namedControls[name] = append(o.Edges.namedControls[name], edges...)
	}
}

// NamedSubcontrols returns the Subcontrols named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedSubcontrols(name string) ([]*Subcontrol, error) {
	if o.Edges.namedSubcontrols == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedSubcontrols[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedSubcontrols(name string, edges ...*Subcontrol) {
	if o.Edges.namedSubcontrols == nil {
		o.Edges.namedSubcontrols = make(map[string][]*Subcontrol)
	}
	if len(edges) == 0 {
		o.Edges.namedSubcontrols[name] = []*Subcontrol{}
	} else {
		o.Edges.namedSubcontrols[name] = append(o.Edges.namedSubcontrols[name], edges...)
	}
}

// NamedMembers returns the Members named value or an error if the edge was not
// loaded in eager-loading with this name.
func (o *Organization) NamedMembers(name string) ([]*OrgMembership, error) {
	if o.Edges.namedMembers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := o.Edges.namedMembers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (o *Organization) appendNamedMembers(name string, edges ...*OrgMembership) {
	if o.Edges.namedMembers == nil {
		o.Edges.namedMembers = make(map[string][]*OrgMembership)
	}
	if len(edges) == 0 {
		o.Edges.namedMembers[name] = []*OrgMembership{}
	} else {
		o.Edges.namedMembers[name] = append(o.Edges.namedMembers[name], edges...)
	}
}

// Organizations is a parsable slice of Organization.
type Organizations []*Organization
