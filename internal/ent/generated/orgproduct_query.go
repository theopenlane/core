// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgproduct"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// OrgProductQuery is the builder for querying OrgProduct entities.
type OrgProductQuery struct {
	config
	ctx                 *QueryContext
	order               []orgproduct.OrderOption
	inters              []Interceptor
	predicates          []predicate.OrgProduct
	withOwner           *OrganizationQuery
	withOrgSubscription *OrgSubscriptionQuery
	withPrices          *OrgPriceQuery
	loadTotal           []func(context.Context, []*OrgProduct) error
	modifiers           []func(*sql.Selector)
	withNamedPrices     map[string]*OrgPriceQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrgProductQuery builder.
func (opq *OrgProductQuery) Where(ps ...predicate.OrgProduct) *OrgProductQuery {
	opq.predicates = append(opq.predicates, ps...)
	return opq
}

// Limit the number of records to be returned by this query.
func (opq *OrgProductQuery) Limit(limit int) *OrgProductQuery {
	opq.ctx.Limit = &limit
	return opq
}

// Offset to start from.
func (opq *OrgProductQuery) Offset(offset int) *OrgProductQuery {
	opq.ctx.Offset = &offset
	return opq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (opq *OrgProductQuery) Unique(unique bool) *OrgProductQuery {
	opq.ctx.Unique = &unique
	return opq
}

// Order specifies how the records should be ordered.
func (opq *OrgProductQuery) Order(o ...orgproduct.OrderOption) *OrgProductQuery {
	opq.order = append(opq.order, o...)
	return opq
}

// QueryOwner chains the current query on the "owner" edge.
func (opq *OrgProductQuery) QueryOwner() *OrganizationQuery {
	query := (&OrganizationClient{config: opq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := opq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := opq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgproduct.Table, orgproduct.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orgproduct.OwnerTable, orgproduct.OwnerColumn),
		)
		schemaConfig := opq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrgProduct
		fromU = sqlgraph.SetNeighbors(opq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrgSubscription chains the current query on the "org_subscription" edge.
func (opq *OrgProductQuery) QueryOrgSubscription() *OrgSubscriptionQuery {
	query := (&OrgSubscriptionClient{config: opq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := opq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := opq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgproduct.Table, orgproduct.FieldID, selector),
			sqlgraph.To(orgsubscription.Table, orgsubscription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, orgproduct.OrgSubscriptionTable, orgproduct.OrgSubscriptionColumn),
		)
		schemaConfig := opq.schemaConfig
		step.To.Schema = schemaConfig.OrgSubscription
		step.Edge.Schema = schemaConfig.OrgProduct
		fromU = sqlgraph.SetNeighbors(opq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPrices chains the current query on the "prices" edge.
func (opq *OrgProductQuery) QueryPrices() *OrgPriceQuery {
	query := (&OrgPriceClient{config: opq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := opq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := opq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(orgproduct.Table, orgproduct.FieldID, selector),
			sqlgraph.To(orgprice.Table, orgprice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, orgproduct.PricesTable, orgproduct.PricesColumn),
		)
		schemaConfig := opq.schemaConfig
		step.To.Schema = schemaConfig.OrgPrice
		step.Edge.Schema = schemaConfig.OrgPrice
		fromU = sqlgraph.SetNeighbors(opq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OrgProduct entity from the query.
// Returns a *NotFoundError when no OrgProduct was found.
func (opq *OrgProductQuery) First(ctx context.Context) (*OrgProduct, error) {
	nodes, err := opq.Limit(1).All(setContextOp(ctx, opq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{orgproduct.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (opq *OrgProductQuery) FirstX(ctx context.Context) *OrgProduct {
	node, err := opq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OrgProduct ID from the query.
// Returns a *NotFoundError when no OrgProduct ID was found.
func (opq *OrgProductQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = opq.Limit(1).IDs(setContextOp(ctx, opq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{orgproduct.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (opq *OrgProductQuery) FirstIDX(ctx context.Context) string {
	id, err := opq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OrgProduct entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OrgProduct entity is found.
// Returns a *NotFoundError when no OrgProduct entities are found.
func (opq *OrgProductQuery) Only(ctx context.Context) (*OrgProduct, error) {
	nodes, err := opq.Limit(2).All(setContextOp(ctx, opq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{orgproduct.Label}
	default:
		return nil, &NotSingularError{orgproduct.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (opq *OrgProductQuery) OnlyX(ctx context.Context) *OrgProduct {
	node, err := opq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OrgProduct ID in the query.
// Returns a *NotSingularError when more than one OrgProduct ID is found.
// Returns a *NotFoundError when no entities are found.
func (opq *OrgProductQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = opq.Limit(2).IDs(setContextOp(ctx, opq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{orgproduct.Label}
	default:
		err = &NotSingularError{orgproduct.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (opq *OrgProductQuery) OnlyIDX(ctx context.Context) string {
	id, err := opq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OrgProducts.
func (opq *OrgProductQuery) All(ctx context.Context) ([]*OrgProduct, error) {
	ctx = setContextOp(ctx, opq.ctx, ent.OpQueryAll)
	if err := opq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OrgProduct, *OrgProductQuery]()
	return withInterceptors[[]*OrgProduct](ctx, opq, qr, opq.inters)
}

// AllX is like All, but panics if an error occurs.
func (opq *OrgProductQuery) AllX(ctx context.Context) []*OrgProduct {
	nodes, err := opq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OrgProduct IDs.
func (opq *OrgProductQuery) IDs(ctx context.Context) (ids []string, err error) {
	if opq.ctx.Unique == nil && opq.path != nil {
		opq.Unique(true)
	}
	ctx = setContextOp(ctx, opq.ctx, ent.OpQueryIDs)
	if err = opq.Select(orgproduct.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (opq *OrgProductQuery) IDsX(ctx context.Context) []string {
	ids, err := opq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (opq *OrgProductQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, opq.ctx, ent.OpQueryCount)
	if err := opq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, opq, querierCount[*OrgProductQuery](), opq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (opq *OrgProductQuery) CountX(ctx context.Context) int {
	count, err := opq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (opq *OrgProductQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, opq.ctx, ent.OpQueryExist)
	switch _, err := opq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (opq *OrgProductQuery) ExistX(ctx context.Context) bool {
	exist, err := opq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrgProductQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (opq *OrgProductQuery) Clone() *OrgProductQuery {
	if opq == nil {
		return nil
	}
	return &OrgProductQuery{
		config:              opq.config,
		ctx:                 opq.ctx.Clone(),
		order:               append([]orgproduct.OrderOption{}, opq.order...),
		inters:              append([]Interceptor{}, opq.inters...),
		predicates:          append([]predicate.OrgProduct{}, opq.predicates...),
		withOwner:           opq.withOwner.Clone(),
		withOrgSubscription: opq.withOrgSubscription.Clone(),
		withPrices:          opq.withPrices.Clone(),
		// clone intermediate query.
		sql:       opq.sql.Clone(),
		path:      opq.path,
		modifiers: append([]func(*sql.Selector){}, opq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (opq *OrgProductQuery) WithOwner(opts ...func(*OrganizationQuery)) *OrgProductQuery {
	query := (&OrganizationClient{config: opq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	opq.withOwner = query
	return opq
}

// WithOrgSubscription tells the query-builder to eager-load the nodes that are connected to
// the "org_subscription" edge. The optional arguments are used to configure the query builder of the edge.
func (opq *OrgProductQuery) WithOrgSubscription(opts ...func(*OrgSubscriptionQuery)) *OrgProductQuery {
	query := (&OrgSubscriptionClient{config: opq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	opq.withOrgSubscription = query
	return opq
}

// WithPrices tells the query-builder to eager-load the nodes that are connected to
// the "prices" edge. The optional arguments are used to configure the query builder of the edge.
func (opq *OrgProductQuery) WithPrices(opts ...func(*OrgPriceQuery)) *OrgProductQuery {
	query := (&OrgPriceClient{config: opq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	opq.withPrices = query
	return opq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OrgProduct.Query().
//		GroupBy(orgproduct.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (opq *OrgProductQuery) GroupBy(field string, fields ...string) *OrgProductGroupBy {
	opq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrgProductGroupBy{build: opq}
	grbuild.flds = &opq.ctx.Fields
	grbuild.label = orgproduct.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.OrgProduct.Query().
//		Select(orgproduct.FieldCreatedAt).
//		Scan(ctx, &v)
func (opq *OrgProductQuery) Select(fields ...string) *OrgProductSelect {
	opq.ctx.Fields = append(opq.ctx.Fields, fields...)
	sbuild := &OrgProductSelect{OrgProductQuery: opq}
	sbuild.label = orgproduct.Label
	sbuild.flds, sbuild.scan = &opq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrgProductSelect configured with the given aggregations.
func (opq *OrgProductQuery) Aggregate(fns ...AggregateFunc) *OrgProductSelect {
	return opq.Select().Aggregate(fns...)
}

func (opq *OrgProductQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range opq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, opq); err != nil {
				return err
			}
		}
	}
	for _, f := range opq.ctx.Fields {
		if !orgproduct.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if opq.path != nil {
		prev, err := opq.path(ctx)
		if err != nil {
			return err
		}
		opq.sql = prev
	}
	return nil
}

func (opq *OrgProductQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OrgProduct, error) {
	var (
		nodes       = []*OrgProduct{}
		_spec       = opq.querySpec()
		loadedTypes = [3]bool{
			opq.withOwner != nil,
			opq.withOrgSubscription != nil,
			opq.withPrices != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OrgProduct).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OrgProduct{config: opq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = opq.schemaConfig.OrgProduct
	ctx = internal.NewSchemaConfigContext(ctx, opq.schemaConfig)
	if len(opq.modifiers) > 0 {
		_spec.Modifiers = opq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, opq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := opq.withOwner; query != nil {
		if err := opq.loadOwner(ctx, query, nodes, nil,
			func(n *OrgProduct, e *Organization) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	if query := opq.withOrgSubscription; query != nil {
		if err := opq.loadOrgSubscription(ctx, query, nodes, nil,
			func(n *OrgProduct, e *OrgSubscription) { n.Edges.OrgSubscription = e }); err != nil {
			return nil, err
		}
	}
	if query := opq.withPrices; query != nil {
		if err := opq.loadPrices(ctx, query, nodes,
			func(n *OrgProduct) { n.Edges.Prices = []*OrgPrice{} },
			func(n *OrgProduct, e *OrgPrice) { n.Edges.Prices = append(n.Edges.Prices, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range opq.withNamedPrices {
		if err := opq.loadPrices(ctx, query, nodes,
			func(n *OrgProduct) { n.appendNamedPrices(name) },
			func(n *OrgProduct, e *OrgPrice) { n.appendNamedPrices(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range opq.loadTotal {
		if err := opq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (opq *OrgProductQuery) loadOwner(ctx context.Context, query *OrganizationQuery, nodes []*OrgProduct, init func(*OrgProduct), assign func(*OrgProduct, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*OrgProduct)
	for i := range nodes {
		fk := nodes[i].OwnerID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "owner_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (opq *OrgProductQuery) loadOrgSubscription(ctx context.Context, query *OrgSubscriptionQuery, nodes []*OrgProduct, init func(*OrgProduct), assign func(*OrgProduct, *OrgSubscription)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*OrgProduct)
	for i := range nodes {
		fk := nodes[i].SubscriptionID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(orgsubscription.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subscription_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (opq *OrgProductQuery) loadPrices(ctx context.Context, query *OrgPriceQuery, nodes []*OrgProduct, init func(*OrgProduct), assign func(*OrgProduct, *OrgPrice)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*OrgProduct)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgprice.FieldProductID)
	}
	query.Where(predicate.OrgPrice(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(orgproduct.PricesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ProductID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "product_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (opq *OrgProductQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := opq.querySpec()
	_spec.Node.Schema = opq.schemaConfig.OrgProduct
	ctx = internal.NewSchemaConfigContext(ctx, opq.schemaConfig)
	if len(opq.modifiers) > 0 {
		_spec.Modifiers = opq.modifiers
	}
	_spec.Node.Columns = opq.ctx.Fields
	if len(opq.ctx.Fields) > 0 {
		_spec.Unique = opq.ctx.Unique != nil && *opq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, opq.driver, _spec)
}

func (opq *OrgProductQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(orgproduct.Table, orgproduct.Columns, sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString))
	_spec.From = opq.sql
	if unique := opq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if opq.path != nil {
		_spec.Unique = true
	}
	if fields := opq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, orgproduct.FieldID)
		for i := range fields {
			if fields[i] != orgproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if opq.withOwner != nil {
			_spec.Node.AddColumnOnce(orgproduct.FieldOwnerID)
		}
		if opq.withOrgSubscription != nil {
			_spec.Node.AddColumnOnce(orgproduct.FieldSubscriptionID)
		}
	}
	if ps := opq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := opq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := opq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := opq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (opq *OrgProductQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(opq.driver.Dialect())
	t1 := builder.Table(orgproduct.Table)
	columns := opq.ctx.Fields
	if len(columns) == 0 {
		columns = orgproduct.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if opq.sql != nil {
		selector = opq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if opq.ctx.Unique != nil && *opq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(opq.schemaConfig.OrgProduct)
	ctx = internal.NewSchemaConfigContext(ctx, opq.schemaConfig)
	selector.WithContext(ctx)
	for _, m := range opq.modifiers {
		m(selector)
	}
	for _, p := range opq.predicates {
		p(selector)
	}
	for _, p := range opq.order {
		p(selector)
	}
	if offset := opq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := opq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (opq *OrgProductQuery) Modify(modifiers ...func(s *sql.Selector)) *OrgProductSelect {
	opq.modifiers = append(opq.modifiers, modifiers...)
	return opq.Select()
}

// WithNamedPrices tells the query-builder to eager-load the nodes that are connected to the "prices"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (opq *OrgProductQuery) WithNamedPrices(name string, opts ...func(*OrgPriceQuery)) *OrgProductQuery {
	query := (&OrgPriceClient{config: opq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if opq.withNamedPrices == nil {
		opq.withNamedPrices = make(map[string]*OrgPriceQuery)
	}
	opq.withNamedPrices[name] = query
	return opq
}

// CountIDs returns the count of ids and allows for filtering of the query post retrieval by IDs
func (opq *OrgProductQuery) CountIDs(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, opq.ctx, ent.OpQueryIDs)
	if err := opq.prepareQuery(ctx); err != nil {
		return 0, err
	}

	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return opq.IDs(ctx)
	})

	ids, err := withInterceptors[[]string](ctx, opq, qr, opq.inters)
	if err != nil {
		return 0, err
	}

	return len(ids), nil
}

// OrgProductGroupBy is the group-by builder for OrgProduct entities.
type OrgProductGroupBy struct {
	selector
	build *OrgProductQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (opgb *OrgProductGroupBy) Aggregate(fns ...AggregateFunc) *OrgProductGroupBy {
	opgb.fns = append(opgb.fns, fns...)
	return opgb
}

// Scan applies the selector query and scans the result into the given value.
func (opgb *OrgProductGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, opgb.build.ctx, ent.OpQueryGroupBy)
	if err := opgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrgProductQuery, *OrgProductGroupBy](ctx, opgb.build, opgb, opgb.build.inters, v)
}

func (opgb *OrgProductGroupBy) sqlScan(ctx context.Context, root *OrgProductQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(opgb.fns))
	for _, fn := range opgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*opgb.flds)+len(opgb.fns))
		for _, f := range *opgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*opgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := opgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrgProductSelect is the builder for selecting fields of OrgProduct entities.
type OrgProductSelect struct {
	*OrgProductQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ops *OrgProductSelect) Aggregate(fns ...AggregateFunc) *OrgProductSelect {
	ops.fns = append(ops.fns, fns...)
	return ops
}

// Scan applies the selector query and scans the result into the given value.
func (ops *OrgProductSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ops.ctx, ent.OpQuerySelect)
	if err := ops.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrgProductQuery, *OrgProductSelect](ctx, ops.OrgProductQuery, ops, ops.inters, v)
}

func (ops *OrgProductSelect) sqlScan(ctx context.Context, root *OrgProductQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ops.fns))
	for _, fn := range ops.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ops.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ops.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ops *OrgProductSelect) Modify(modifiers ...func(s *sql.Selector)) *OrgProductSelect {
	ops.modifiers = append(ops.modifiers, modifiers...)
	return ops
}
