// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/evidencehistory"
	"github.com/theopenlane/entx/history"
)

// EvidenceHistory is the model entity for the EvidenceHistory schema.
type EvidenceHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation history.OpType `json:"operation,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// a shortened prefixed id field to use as a human readable identifier
	DisplayID string `json:"display_id,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// the ID of the organization owner of the object
	OwnerID string `json:"owner_id,omitempty"`
	// the name of the evidence
	Name string `json:"name,omitempty"`
	// the description of the evidence, what is contained in the uploaded file(s) or url(s)
	Description string `json:"description,omitempty"`
	// description of how the evidence was collected
	CollectionProcedure string `json:"collection_procedure,omitempty"`
	// the date the evidence was retrieved
	CreationDate time.Time `json:"creation_date,omitempty"`
	// the date the evidence should be renewed, defaults to a year from entry date
	RenewalDate time.Time `json:"renewal_date,omitempty"`
	// the source of the evidence, e.g. system the evidence was retrieved from (splunk, github, etc)
	Source string `json:"source,omitempty"`
	// whether the evidence was automatically generated
	IsAutomated bool `json:"is_automated,omitempty"`
	// the url of the evidence if not uploaded directly to the system
	URL          string `json:"url,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EvidenceHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case evidencehistory.FieldTags:
			values[i] = new([]byte)
		case evidencehistory.FieldOperation:
			values[i] = new(history.OpType)
		case evidencehistory.FieldIsAutomated:
			values[i] = new(sql.NullBool)
		case evidencehistory.FieldID, evidencehistory.FieldRef, evidencehistory.FieldCreatedBy, evidencehistory.FieldUpdatedBy, evidencehistory.FieldDisplayID, evidencehistory.FieldDeletedBy, evidencehistory.FieldOwnerID, evidencehistory.FieldName, evidencehistory.FieldDescription, evidencehistory.FieldCollectionProcedure, evidencehistory.FieldSource, evidencehistory.FieldURL:
			values[i] = new(sql.NullString)
		case evidencehistory.FieldHistoryTime, evidencehistory.FieldCreatedAt, evidencehistory.FieldUpdatedAt, evidencehistory.FieldDeletedAt, evidencehistory.FieldCreationDate, evidencehistory.FieldRenewalDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EvidenceHistory fields.
func (eh *EvidenceHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case evidencehistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				eh.ID = value.String
			}
		case evidencehistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				eh.HistoryTime = value.Time
			}
		case evidencehistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				eh.Ref = value.String
			}
		case evidencehistory.FieldOperation:
			if value, ok := values[i].(*history.OpType); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value != nil {
				eh.Operation = *value
			}
		case evidencehistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				eh.CreatedAt = value.Time
			}
		case evidencehistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				eh.UpdatedAt = value.Time
			}
		case evidencehistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				eh.CreatedBy = value.String
			}
		case evidencehistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				eh.UpdatedBy = value.String
			}
		case evidencehistory.FieldDisplayID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_id", values[i])
			} else if value.Valid {
				eh.DisplayID = value.String
			}
		case evidencehistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				eh.DeletedAt = value.Time
			}
		case evidencehistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				eh.DeletedBy = value.String
			}
		case evidencehistory.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &eh.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case evidencehistory.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				eh.OwnerID = value.String
			}
		case evidencehistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				eh.Name = value.String
			}
		case evidencehistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				eh.Description = value.String
			}
		case evidencehistory.FieldCollectionProcedure:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field collection_procedure", values[i])
			} else if value.Valid {
				eh.CollectionProcedure = value.String
			}
		case evidencehistory.FieldCreationDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field creation_date", values[i])
			} else if value.Valid {
				eh.CreationDate = value.Time
			}
		case evidencehistory.FieldRenewalDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field renewal_date", values[i])
			} else if value.Valid {
				eh.RenewalDate = value.Time
			}
		case evidencehistory.FieldSource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field source", values[i])
			} else if value.Valid {
				eh.Source = value.String
			}
		case evidencehistory.FieldIsAutomated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_automated", values[i])
			} else if value.Valid {
				eh.IsAutomated = value.Bool
			}
		case evidencehistory.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				eh.URL = value.String
			}
		default:
			eh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EvidenceHistory.
// This includes values selected through modifiers, order, etc.
func (eh *EvidenceHistory) Value(name string) (ent.Value, error) {
	return eh.selectValues.Get(name)
}

// Update returns a builder for updating this EvidenceHistory.
// Note that you need to call EvidenceHistory.Unwrap() before calling this method if this EvidenceHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (eh *EvidenceHistory) Update() *EvidenceHistoryUpdateOne {
	return NewEvidenceHistoryClient(eh.config).UpdateOne(eh)
}

// Unwrap unwraps the EvidenceHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (eh *EvidenceHistory) Unwrap() *EvidenceHistory {
	_tx, ok := eh.config.driver.(*txDriver)
	if !ok {
		panic("generated: EvidenceHistory is not a transactional entity")
	}
	eh.config.driver = _tx.drv
	return eh
}

// String implements the fmt.Stringer.
func (eh *EvidenceHistory) String() string {
	var builder strings.Builder
	builder.WriteString("EvidenceHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", eh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(eh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(eh.Ref)
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", eh.Operation))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(eh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(eh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(eh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(eh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("display_id=")
	builder.WriteString(eh.DisplayID)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(eh.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(eh.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", eh.Tags))
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(eh.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(eh.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(eh.Description)
	builder.WriteString(", ")
	builder.WriteString("collection_procedure=")
	builder.WriteString(eh.CollectionProcedure)
	builder.WriteString(", ")
	builder.WriteString("creation_date=")
	builder.WriteString(eh.CreationDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("renewal_date=")
	builder.WriteString(eh.RenewalDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("source=")
	builder.WriteString(eh.Source)
	builder.WriteString(", ")
	builder.WriteString("is_automated=")
	builder.WriteString(fmt.Sprintf("%v", eh.IsAutomated))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(eh.URL)
	builder.WriteByte(')')
	return builder.String()
}

// EvidenceHistories is a parsable slice of EvidenceHistory.
type EvidenceHistories []*EvidenceHistory
