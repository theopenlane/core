// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplate"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/pkg/models"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ScheduledJobUpdate is the builder for updating ScheduledJob entities.
type ScheduledJobUpdate struct {
	config
	hooks     []Hook
	mutation  *ScheduledJobMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScheduledJobUpdate builder.
func (sju *ScheduledJobUpdate) Where(ps ...predicate.ScheduledJob) *ScheduledJobUpdate {
	sju.mutation.Where(ps...)
	return sju
}

// SetUpdatedAt sets the "updated_at" field.
func (sju *ScheduledJobUpdate) SetUpdatedAt(t time.Time) *ScheduledJobUpdate {
	sju.mutation.SetUpdatedAt(t)
	return sju
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sju *ScheduledJobUpdate) ClearUpdatedAt() *ScheduledJobUpdate {
	sju.mutation.ClearUpdatedAt()
	return sju
}

// SetUpdatedBy sets the "updated_by" field.
func (sju *ScheduledJobUpdate) SetUpdatedBy(s string) *ScheduledJobUpdate {
	sju.mutation.SetUpdatedBy(s)
	return sju
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableUpdatedBy(s *string) *ScheduledJobUpdate {
	if s != nil {
		sju.SetUpdatedBy(*s)
	}
	return sju
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sju *ScheduledJobUpdate) ClearUpdatedBy() *ScheduledJobUpdate {
	sju.mutation.ClearUpdatedBy()
	return sju
}

// SetDeletedAt sets the "deleted_at" field.
func (sju *ScheduledJobUpdate) SetDeletedAt(t time.Time) *ScheduledJobUpdate {
	sju.mutation.SetDeletedAt(t)
	return sju
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableDeletedAt(t *time.Time) *ScheduledJobUpdate {
	if t != nil {
		sju.SetDeletedAt(*t)
	}
	return sju
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sju *ScheduledJobUpdate) ClearDeletedAt() *ScheduledJobUpdate {
	sju.mutation.ClearDeletedAt()
	return sju
}

// SetDeletedBy sets the "deleted_by" field.
func (sju *ScheduledJobUpdate) SetDeletedBy(s string) *ScheduledJobUpdate {
	sju.mutation.SetDeletedBy(s)
	return sju
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableDeletedBy(s *string) *ScheduledJobUpdate {
	if s != nil {
		sju.SetDeletedBy(*s)
	}
	return sju
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (sju *ScheduledJobUpdate) ClearDeletedBy() *ScheduledJobUpdate {
	sju.mutation.ClearDeletedBy()
	return sju
}

// SetJobID sets the "job_id" field.
func (sju *ScheduledJobUpdate) SetJobID(s string) *ScheduledJobUpdate {
	sju.mutation.SetJobID(s)
	return sju
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableJobID(s *string) *ScheduledJobUpdate {
	if s != nil {
		sju.SetJobID(*s)
	}
	return sju
}

// SetActive sets the "active" field.
func (sju *ScheduledJobUpdate) SetActive(b bool) *ScheduledJobUpdate {
	sju.mutation.SetActive(b)
	return sju
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableActive(b *bool) *ScheduledJobUpdate {
	if b != nil {
		sju.SetActive(*b)
	}
	return sju
}

// SetConfiguration sets the "configuration" field.
func (sju *ScheduledJobUpdate) SetConfiguration(mc models.JobConfiguration) *ScheduledJobUpdate {
	sju.mutation.SetConfiguration(mc)
	return sju
}

// AppendConfiguration appends mc to the "configuration" field.
func (sju *ScheduledJobUpdate) AppendConfiguration(mc models.JobConfiguration) *ScheduledJobUpdate {
	sju.mutation.AppendConfiguration(mc)
	return sju
}

// ClearConfiguration clears the value of the "configuration" field.
func (sju *ScheduledJobUpdate) ClearConfiguration() *ScheduledJobUpdate {
	sju.mutation.ClearConfiguration()
	return sju
}

// SetCron sets the "cron" field.
func (sju *ScheduledJobUpdate) SetCron(m models.Cron) *ScheduledJobUpdate {
	sju.mutation.SetCron(m)
	return sju
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableCron(m *models.Cron) *ScheduledJobUpdate {
	if m != nil {
		sju.SetCron(*m)
	}
	return sju
}

// ClearCron clears the value of the "cron" field.
func (sju *ScheduledJobUpdate) ClearCron() *ScheduledJobUpdate {
	sju.mutation.ClearCron()
	return sju
}

// SetJobRunnerID sets the "job_runner_id" field.
func (sju *ScheduledJobUpdate) SetJobRunnerID(s string) *ScheduledJobUpdate {
	sju.mutation.SetJobRunnerID(s)
	return sju
}

// SetNillableJobRunnerID sets the "job_runner_id" field if the given value is not nil.
func (sju *ScheduledJobUpdate) SetNillableJobRunnerID(s *string) *ScheduledJobUpdate {
	if s != nil {
		sju.SetJobRunnerID(*s)
	}
	return sju
}

// ClearJobRunnerID clears the value of the "job_runner_id" field.
func (sju *ScheduledJobUpdate) ClearJobRunnerID() *ScheduledJobUpdate {
	sju.mutation.ClearJobRunnerID()
	return sju
}

// SetJobTemplateID sets the "job_template" edge to the JobTemplate entity by ID.
func (sju *ScheduledJobUpdate) SetJobTemplateID(id string) *ScheduledJobUpdate {
	sju.mutation.SetJobTemplateID(id)
	return sju
}

// SetJobTemplate sets the "job_template" edge to the JobTemplate entity.
func (sju *ScheduledJobUpdate) SetJobTemplate(j *JobTemplate) *ScheduledJobUpdate {
	return sju.SetJobTemplateID(j.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (sju *ScheduledJobUpdate) AddControlIDs(ids ...string) *ScheduledJobUpdate {
	sju.mutation.AddControlIDs(ids...)
	return sju
}

// AddControls adds the "controls" edges to the Control entity.
func (sju *ScheduledJobUpdate) AddControls(c ...*Control) *ScheduledJobUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sju.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (sju *ScheduledJobUpdate) AddSubcontrolIDs(ids ...string) *ScheduledJobUpdate {
	sju.mutation.AddSubcontrolIDs(ids...)
	return sju
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (sju *ScheduledJobUpdate) AddSubcontrols(s ...*Subcontrol) *ScheduledJobUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sju.AddSubcontrolIDs(ids...)
}

// SetJobRunner sets the "job_runner" edge to the JobRunner entity.
func (sju *ScheduledJobUpdate) SetJobRunner(j *JobRunner) *ScheduledJobUpdate {
	return sju.SetJobRunnerID(j.ID)
}

// Mutation returns the ScheduledJobMutation object of the builder.
func (sju *ScheduledJobUpdate) Mutation() *ScheduledJobMutation {
	return sju.mutation
}

// ClearJobTemplate clears the "job_template" edge to the JobTemplate entity.
func (sju *ScheduledJobUpdate) ClearJobTemplate() *ScheduledJobUpdate {
	sju.mutation.ClearJobTemplate()
	return sju
}

// ClearControls clears all "controls" edges to the Control entity.
func (sju *ScheduledJobUpdate) ClearControls() *ScheduledJobUpdate {
	sju.mutation.ClearControls()
	return sju
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (sju *ScheduledJobUpdate) RemoveControlIDs(ids ...string) *ScheduledJobUpdate {
	sju.mutation.RemoveControlIDs(ids...)
	return sju
}

// RemoveControls removes "controls" edges to Control entities.
func (sju *ScheduledJobUpdate) RemoveControls(c ...*Control) *ScheduledJobUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sju.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (sju *ScheduledJobUpdate) ClearSubcontrols() *ScheduledJobUpdate {
	sju.mutation.ClearSubcontrols()
	return sju
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (sju *ScheduledJobUpdate) RemoveSubcontrolIDs(ids ...string) *ScheduledJobUpdate {
	sju.mutation.RemoveSubcontrolIDs(ids...)
	return sju
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (sju *ScheduledJobUpdate) RemoveSubcontrols(s ...*Subcontrol) *ScheduledJobUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sju.RemoveSubcontrolIDs(ids...)
}

// ClearJobRunner clears the "job_runner" edge to the JobRunner entity.
func (sju *ScheduledJobUpdate) ClearJobRunner() *ScheduledJobUpdate {
	sju.mutation.ClearJobRunner()
	return sju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sju *ScheduledJobUpdate) Save(ctx context.Context) (int, error) {
	if err := sju.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, sju.sqlSave, sju.mutation, sju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sju *ScheduledJobUpdate) SaveX(ctx context.Context) int {
	affected, err := sju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sju *ScheduledJobUpdate) Exec(ctx context.Context) error {
	_, err := sju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sju *ScheduledJobUpdate) ExecX(ctx context.Context) {
	if err := sju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sju *ScheduledJobUpdate) defaults() error {
	if _, ok := sju.mutation.UpdatedAt(); !ok && !sju.mutation.UpdatedAtCleared() {
		if scheduledjob.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scheduledjob.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scheduledjob.UpdateDefaultUpdatedAt()
		sju.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sju *ScheduledJobUpdate) check() error {
	if v, ok := sju.mutation.JobID(); ok {
		if err := scheduledjob.JobIDValidator(v); err != nil {
			return &ValidationError{Name: "job_id", err: fmt.Errorf(`generated: validator failed for field "ScheduledJob.job_id": %w`, err)}
		}
	}
	if v, ok := sju.mutation.Cron(); ok {
		if err := scheduledjob.CronValidator(string(v)); err != nil {
			return &ValidationError{Name: "cron", err: fmt.Errorf(`generated: validator failed for field "ScheduledJob.cron": %w`, err)}
		}
	}
	if sju.mutation.JobTemplateCleared() && len(sju.mutation.JobTemplateIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ScheduledJob.job_template"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sju *ScheduledJobUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScheduledJobUpdate {
	sju.modifiers = append(sju.modifiers, modifiers...)
	return sju
}

func (sju *ScheduledJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scheduledjob.Table, scheduledjob.Columns, sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString))
	if ps := sju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sju.mutation.CreatedAtCleared() {
		_spec.ClearField(scheduledjob.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sju.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if sju.mutation.UpdatedAtCleared() {
		_spec.ClearField(scheduledjob.FieldUpdatedAt, field.TypeTime)
	}
	if sju.mutation.CreatedByCleared() {
		_spec.ClearField(scheduledjob.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sju.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledjob.FieldUpdatedBy, field.TypeString, value)
	}
	if sju.mutation.UpdatedByCleared() {
		_spec.ClearField(scheduledjob.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := sju.mutation.DeletedAt(); ok {
		_spec.SetField(scheduledjob.FieldDeletedAt, field.TypeTime, value)
	}
	if sju.mutation.DeletedAtCleared() {
		_spec.ClearField(scheduledjob.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sju.mutation.DeletedBy(); ok {
		_spec.SetField(scheduledjob.FieldDeletedBy, field.TypeString, value)
	}
	if sju.mutation.DeletedByCleared() {
		_spec.ClearField(scheduledjob.FieldDeletedBy, field.TypeString)
	}
	if value, ok := sju.mutation.Active(); ok {
		_spec.SetField(scheduledjob.FieldActive, field.TypeBool, value)
	}
	if value, ok := sju.mutation.Configuration(); ok {
		_spec.SetField(scheduledjob.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := sju.mutation.AppendedConfiguration(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scheduledjob.FieldConfiguration, value)
		})
	}
	if sju.mutation.ConfigurationCleared() {
		_spec.ClearField(scheduledjob.FieldConfiguration, field.TypeJSON)
	}
	if value, ok := sju.mutation.Cron(); ok {
		_spec.SetField(scheduledjob.FieldCron, field.TypeString, value)
	}
	if sju.mutation.CronCleared() {
		_spec.ClearField(scheduledjob.FieldCron, field.TypeString)
	}
	if sju.mutation.JobTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjob.JobTemplateTable,
			Columns: []string{scheduledjob.JobTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString),
			},
		}
		edge.Schema = sju.schemaConfig.ScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.JobTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjob.JobTemplateTable,
			Columns: []string{scheduledjob.JobTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString),
			},
		}
		edge.Schema = sju.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sju.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.ControlsTable,
			Columns: scheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = sju.schemaConfig.ScheduledJobControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.RemovedControlsIDs(); len(nodes) > 0 && !sju.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.ControlsTable,
			Columns: scheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = sju.schemaConfig.ScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.ControlsTable,
			Columns: scheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = sju.schemaConfig.ScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sju.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.SubcontrolsTable,
			Columns: scheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = sju.schemaConfig.ScheduledJobSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !sju.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.SubcontrolsTable,
			Columns: scheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = sju.schemaConfig.ScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.SubcontrolsTable,
			Columns: scheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = sju.schemaConfig.ScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sju.mutation.JobRunnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scheduledjob.JobRunnerTable,
			Columns: []string{scheduledjob.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = sju.schemaConfig.ScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.JobRunnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scheduledjob.JobRunnerTable,
			Columns: []string{scheduledjob.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = sju.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = sju.schemaConfig.ScheduledJob
	ctx = internal.NewSchemaConfigContext(ctx, sju.schemaConfig)
	_spec.AddModifiers(sju.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, sju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduledjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sju.mutation.done = true
	return n, nil
}

// ScheduledJobUpdateOne is the builder for updating a single ScheduledJob entity.
type ScheduledJobUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScheduledJobMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (sjuo *ScheduledJobUpdateOne) SetUpdatedAt(t time.Time) *ScheduledJobUpdateOne {
	sjuo.mutation.SetUpdatedAt(t)
	return sjuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (sjuo *ScheduledJobUpdateOne) ClearUpdatedAt() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearUpdatedAt()
	return sjuo
}

// SetUpdatedBy sets the "updated_by" field.
func (sjuo *ScheduledJobUpdateOne) SetUpdatedBy(s string) *ScheduledJobUpdateOne {
	sjuo.mutation.SetUpdatedBy(s)
	return sjuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableUpdatedBy(s *string) *ScheduledJobUpdateOne {
	if s != nil {
		sjuo.SetUpdatedBy(*s)
	}
	return sjuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (sjuo *ScheduledJobUpdateOne) ClearUpdatedBy() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearUpdatedBy()
	return sjuo
}

// SetDeletedAt sets the "deleted_at" field.
func (sjuo *ScheduledJobUpdateOne) SetDeletedAt(t time.Time) *ScheduledJobUpdateOne {
	sjuo.mutation.SetDeletedAt(t)
	return sjuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableDeletedAt(t *time.Time) *ScheduledJobUpdateOne {
	if t != nil {
		sjuo.SetDeletedAt(*t)
	}
	return sjuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (sjuo *ScheduledJobUpdateOne) ClearDeletedAt() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearDeletedAt()
	return sjuo
}

// SetDeletedBy sets the "deleted_by" field.
func (sjuo *ScheduledJobUpdateOne) SetDeletedBy(s string) *ScheduledJobUpdateOne {
	sjuo.mutation.SetDeletedBy(s)
	return sjuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableDeletedBy(s *string) *ScheduledJobUpdateOne {
	if s != nil {
		sjuo.SetDeletedBy(*s)
	}
	return sjuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (sjuo *ScheduledJobUpdateOne) ClearDeletedBy() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearDeletedBy()
	return sjuo
}

// SetJobID sets the "job_id" field.
func (sjuo *ScheduledJobUpdateOne) SetJobID(s string) *ScheduledJobUpdateOne {
	sjuo.mutation.SetJobID(s)
	return sjuo
}

// SetNillableJobID sets the "job_id" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableJobID(s *string) *ScheduledJobUpdateOne {
	if s != nil {
		sjuo.SetJobID(*s)
	}
	return sjuo
}

// SetActive sets the "active" field.
func (sjuo *ScheduledJobUpdateOne) SetActive(b bool) *ScheduledJobUpdateOne {
	sjuo.mutation.SetActive(b)
	return sjuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableActive(b *bool) *ScheduledJobUpdateOne {
	if b != nil {
		sjuo.SetActive(*b)
	}
	return sjuo
}

// SetConfiguration sets the "configuration" field.
func (sjuo *ScheduledJobUpdateOne) SetConfiguration(mc models.JobConfiguration) *ScheduledJobUpdateOne {
	sjuo.mutation.SetConfiguration(mc)
	return sjuo
}

// AppendConfiguration appends mc to the "configuration" field.
func (sjuo *ScheduledJobUpdateOne) AppendConfiguration(mc models.JobConfiguration) *ScheduledJobUpdateOne {
	sjuo.mutation.AppendConfiguration(mc)
	return sjuo
}

// ClearConfiguration clears the value of the "configuration" field.
func (sjuo *ScheduledJobUpdateOne) ClearConfiguration() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearConfiguration()
	return sjuo
}

// SetCron sets the "cron" field.
func (sjuo *ScheduledJobUpdateOne) SetCron(m models.Cron) *ScheduledJobUpdateOne {
	sjuo.mutation.SetCron(m)
	return sjuo
}

// SetNillableCron sets the "cron" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableCron(m *models.Cron) *ScheduledJobUpdateOne {
	if m != nil {
		sjuo.SetCron(*m)
	}
	return sjuo
}

// ClearCron clears the value of the "cron" field.
func (sjuo *ScheduledJobUpdateOne) ClearCron() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearCron()
	return sjuo
}

// SetJobRunnerID sets the "job_runner_id" field.
func (sjuo *ScheduledJobUpdateOne) SetJobRunnerID(s string) *ScheduledJobUpdateOne {
	sjuo.mutation.SetJobRunnerID(s)
	return sjuo
}

// SetNillableJobRunnerID sets the "job_runner_id" field if the given value is not nil.
func (sjuo *ScheduledJobUpdateOne) SetNillableJobRunnerID(s *string) *ScheduledJobUpdateOne {
	if s != nil {
		sjuo.SetJobRunnerID(*s)
	}
	return sjuo
}

// ClearJobRunnerID clears the value of the "job_runner_id" field.
func (sjuo *ScheduledJobUpdateOne) ClearJobRunnerID() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearJobRunnerID()
	return sjuo
}

// SetJobTemplateID sets the "job_template" edge to the JobTemplate entity by ID.
func (sjuo *ScheduledJobUpdateOne) SetJobTemplateID(id string) *ScheduledJobUpdateOne {
	sjuo.mutation.SetJobTemplateID(id)
	return sjuo
}

// SetJobTemplate sets the "job_template" edge to the JobTemplate entity.
func (sjuo *ScheduledJobUpdateOne) SetJobTemplate(j *JobTemplate) *ScheduledJobUpdateOne {
	return sjuo.SetJobTemplateID(j.ID)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (sjuo *ScheduledJobUpdateOne) AddControlIDs(ids ...string) *ScheduledJobUpdateOne {
	sjuo.mutation.AddControlIDs(ids...)
	return sjuo
}

// AddControls adds the "controls" edges to the Control entity.
func (sjuo *ScheduledJobUpdateOne) AddControls(c ...*Control) *ScheduledJobUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sjuo.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (sjuo *ScheduledJobUpdateOne) AddSubcontrolIDs(ids ...string) *ScheduledJobUpdateOne {
	sjuo.mutation.AddSubcontrolIDs(ids...)
	return sjuo
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (sjuo *ScheduledJobUpdateOne) AddSubcontrols(s ...*Subcontrol) *ScheduledJobUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sjuo.AddSubcontrolIDs(ids...)
}

// SetJobRunner sets the "job_runner" edge to the JobRunner entity.
func (sjuo *ScheduledJobUpdateOne) SetJobRunner(j *JobRunner) *ScheduledJobUpdateOne {
	return sjuo.SetJobRunnerID(j.ID)
}

// Mutation returns the ScheduledJobMutation object of the builder.
func (sjuo *ScheduledJobUpdateOne) Mutation() *ScheduledJobMutation {
	return sjuo.mutation
}

// ClearJobTemplate clears the "job_template" edge to the JobTemplate entity.
func (sjuo *ScheduledJobUpdateOne) ClearJobTemplate() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearJobTemplate()
	return sjuo
}

// ClearControls clears all "controls" edges to the Control entity.
func (sjuo *ScheduledJobUpdateOne) ClearControls() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearControls()
	return sjuo
}

// RemoveControlIDs removes the "controls" edge to Control entities by IDs.
func (sjuo *ScheduledJobUpdateOne) RemoveControlIDs(ids ...string) *ScheduledJobUpdateOne {
	sjuo.mutation.RemoveControlIDs(ids...)
	return sjuo
}

// RemoveControls removes "controls" edges to Control entities.
func (sjuo *ScheduledJobUpdateOne) RemoveControls(c ...*Control) *ScheduledJobUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sjuo.RemoveControlIDs(ids...)
}

// ClearSubcontrols clears all "subcontrols" edges to the Subcontrol entity.
func (sjuo *ScheduledJobUpdateOne) ClearSubcontrols() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearSubcontrols()
	return sjuo
}

// RemoveSubcontrolIDs removes the "subcontrols" edge to Subcontrol entities by IDs.
func (sjuo *ScheduledJobUpdateOne) RemoveSubcontrolIDs(ids ...string) *ScheduledJobUpdateOne {
	sjuo.mutation.RemoveSubcontrolIDs(ids...)
	return sjuo
}

// RemoveSubcontrols removes "subcontrols" edges to Subcontrol entities.
func (sjuo *ScheduledJobUpdateOne) RemoveSubcontrols(s ...*Subcontrol) *ScheduledJobUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sjuo.RemoveSubcontrolIDs(ids...)
}

// ClearJobRunner clears the "job_runner" edge to the JobRunner entity.
func (sjuo *ScheduledJobUpdateOne) ClearJobRunner() *ScheduledJobUpdateOne {
	sjuo.mutation.ClearJobRunner()
	return sjuo
}

// Where appends a list predicates to the ScheduledJobUpdate builder.
func (sjuo *ScheduledJobUpdateOne) Where(ps ...predicate.ScheduledJob) *ScheduledJobUpdateOne {
	sjuo.mutation.Where(ps...)
	return sjuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sjuo *ScheduledJobUpdateOne) Select(field string, fields ...string) *ScheduledJobUpdateOne {
	sjuo.fields = append([]string{field}, fields...)
	return sjuo
}

// Save executes the query and returns the updated ScheduledJob entity.
func (sjuo *ScheduledJobUpdateOne) Save(ctx context.Context) (*ScheduledJob, error) {
	if err := sjuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sjuo.sqlSave, sjuo.mutation, sjuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sjuo *ScheduledJobUpdateOne) SaveX(ctx context.Context) *ScheduledJob {
	node, err := sjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sjuo *ScheduledJobUpdateOne) Exec(ctx context.Context) error {
	_, err := sjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjuo *ScheduledJobUpdateOne) ExecX(ctx context.Context) {
	if err := sjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjuo *ScheduledJobUpdateOne) defaults() error {
	if _, ok := sjuo.mutation.UpdatedAt(); !ok && !sjuo.mutation.UpdatedAtCleared() {
		if scheduledjob.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized scheduledjob.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := scheduledjob.UpdateDefaultUpdatedAt()
		sjuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sjuo *ScheduledJobUpdateOne) check() error {
	if v, ok := sjuo.mutation.JobID(); ok {
		if err := scheduledjob.JobIDValidator(v); err != nil {
			return &ValidationError{Name: "job_id", err: fmt.Errorf(`generated: validator failed for field "ScheduledJob.job_id": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.Cron(); ok {
		if err := scheduledjob.CronValidator(string(v)); err != nil {
			return &ValidationError{Name: "cron", err: fmt.Errorf(`generated: validator failed for field "ScheduledJob.cron": %w`, err)}
		}
	}
	if sjuo.mutation.JobTemplateCleared() && len(sjuo.mutation.JobTemplateIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "ScheduledJob.job_template"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (sjuo *ScheduledJobUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScheduledJobUpdateOne {
	sjuo.modifiers = append(sjuo.modifiers, modifiers...)
	return sjuo
}

func (sjuo *ScheduledJobUpdateOne) sqlSave(ctx context.Context) (_node *ScheduledJob, err error) {
	if err := sjuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scheduledjob.Table, scheduledjob.Columns, sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString))
	id, ok := sjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "ScheduledJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scheduledjob.FieldID)
		for _, f := range fields {
			if !scheduledjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != scheduledjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if sjuo.mutation.CreatedAtCleared() {
		_spec.ClearField(scheduledjob.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := sjuo.mutation.UpdatedAt(); ok {
		_spec.SetField(scheduledjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if sjuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(scheduledjob.FieldUpdatedAt, field.TypeTime)
	}
	if sjuo.mutation.CreatedByCleared() {
		_spec.ClearField(scheduledjob.FieldCreatedBy, field.TypeString)
	}
	if value, ok := sjuo.mutation.UpdatedBy(); ok {
		_spec.SetField(scheduledjob.FieldUpdatedBy, field.TypeString, value)
	}
	if sjuo.mutation.UpdatedByCleared() {
		_spec.ClearField(scheduledjob.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := sjuo.mutation.DeletedAt(); ok {
		_spec.SetField(scheduledjob.FieldDeletedAt, field.TypeTime, value)
	}
	if sjuo.mutation.DeletedAtCleared() {
		_spec.ClearField(scheduledjob.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := sjuo.mutation.DeletedBy(); ok {
		_spec.SetField(scheduledjob.FieldDeletedBy, field.TypeString, value)
	}
	if sjuo.mutation.DeletedByCleared() {
		_spec.ClearField(scheduledjob.FieldDeletedBy, field.TypeString)
	}
	if value, ok := sjuo.mutation.Active(); ok {
		_spec.SetField(scheduledjob.FieldActive, field.TypeBool, value)
	}
	if value, ok := sjuo.mutation.Configuration(); ok {
		_spec.SetField(scheduledjob.FieldConfiguration, field.TypeJSON, value)
	}
	if value, ok := sjuo.mutation.AppendedConfiguration(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, scheduledjob.FieldConfiguration, value)
		})
	}
	if sjuo.mutation.ConfigurationCleared() {
		_spec.ClearField(scheduledjob.FieldConfiguration, field.TypeJSON)
	}
	if value, ok := sjuo.mutation.Cron(); ok {
		_spec.SetField(scheduledjob.FieldCron, field.TypeString, value)
	}
	if sjuo.mutation.CronCleared() {
		_spec.ClearField(scheduledjob.FieldCron, field.TypeString)
	}
	if sjuo.mutation.JobTemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjob.JobTemplateTable,
			Columns: []string{scheduledjob.JobTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjuo.schemaConfig.ScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.JobTemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scheduledjob.JobTemplateTable,
			Columns: []string{scheduledjob.JobTemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjuo.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sjuo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.ControlsTable,
			Columns: scheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjuo.schemaConfig.ScheduledJobControls
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.RemovedControlsIDs(); len(nodes) > 0 && !sjuo.mutation.ControlsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.ControlsTable,
			Columns: scheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjuo.schemaConfig.ScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.ControlsTable,
			Columns: scheduledjob.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjuo.schemaConfig.ScheduledJobControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sjuo.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.SubcontrolsTable,
			Columns: scheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjuo.schemaConfig.ScheduledJobSubcontrols
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.RemovedSubcontrolsIDs(); len(nodes) > 0 && !sjuo.mutation.SubcontrolsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.SubcontrolsTable,
			Columns: scheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjuo.schemaConfig.ScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   scheduledjob.SubcontrolsTable,
			Columns: scheduledjob.SubcontrolsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjuo.schemaConfig.ScheduledJobSubcontrols
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sjuo.mutation.JobRunnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scheduledjob.JobRunnerTable,
			Columns: []string{scheduledjob.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjuo.schemaConfig.ScheduledJob
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.JobRunnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scheduledjob.JobRunnerTable,
			Columns: []string{scheduledjob.JobRunnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = sjuo.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = sjuo.schemaConfig.ScheduledJob
	ctx = internal.NewSchemaConfigContext(ctx, sjuo.schemaConfig)
	_spec.AddModifiers(sjuo.modifiers...)
	_node = &ScheduledJob{config: sjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scheduledjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sjuo.mutation.done = true
	return _node, nil
}
