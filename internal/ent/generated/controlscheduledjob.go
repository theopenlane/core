// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/controlscheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/pkg/models"
)

// ControlScheduledJob is the model entity for the ControlScheduledJob schema.
type ControlScheduledJob struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the organization id that owns the object
	OwnerID string `json:"owner_id,omitempty"`
	// the scheduled_job id to take the script to run from
	JobID string `json:"job_id,omitempty"`
	// the configuration to run this job
	Configuration models.JobConfiguration `json:"configuration,omitempty"`
	// the schedule to run this job. If not provided, it would inherit the cadence of the parent job
	Cadence models.JobCadence `json:"cadence,omitempty"`
	// cron syntax. If not provided, it would inherit the cron of the parent job
	Cron *string `json:"cron,omitempty"`
	// the runner that this job will run on. If not set, it will scheduled on a general runner instead
	JobRunnerID string `json:"job_runner_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ControlScheduledJobQuery when eager-loading is set.
	Edges        ControlScheduledJobEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ControlScheduledJobEdges holds the relations/edges for other nodes in the graph.
type ControlScheduledJobEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Organization `json:"owner,omitempty"`
	// Job holds the value of the job edge.
	Job *ScheduledJob `json:"job,omitempty"`
	// Controls holds the value of the controls edge.
	Controls []*Control `json:"controls,omitempty"`
	// Subcontrols holds the value of the subcontrols edge.
	Subcontrols []*Subcontrol `json:"subcontrols,omitempty"`
	// JobRunner holds the value of the job_runner edge.
	JobRunner *JobRunner `json:"job_runner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
	// totalCount holds the count of the edges above.
	totalCount [5]map[string]int

	namedControls    map[string][]*Control
	namedSubcontrols map[string][]*Subcontrol
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ControlScheduledJobEdges) OwnerOrErr() (*Organization, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ControlScheduledJobEdges) JobOrErr() (*ScheduledJob, error) {
	if e.Job != nil {
		return e.Job, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: scheduledjob.Label}
	}
	return nil, &NotLoadedError{edge: "job"}
}

// ControlsOrErr returns the Controls value or an error if the edge
// was not loaded in eager-loading.
func (e ControlScheduledJobEdges) ControlsOrErr() ([]*Control, error) {
	if e.loadedTypes[2] {
		return e.Controls, nil
	}
	return nil, &NotLoadedError{edge: "controls"}
}

// SubcontrolsOrErr returns the Subcontrols value or an error if the edge
// was not loaded in eager-loading.
func (e ControlScheduledJobEdges) SubcontrolsOrErr() ([]*Subcontrol, error) {
	if e.loadedTypes[3] {
		return e.Subcontrols, nil
	}
	return nil, &NotLoadedError{edge: "subcontrols"}
}

// JobRunnerOrErr returns the JobRunner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ControlScheduledJobEdges) JobRunnerOrErr() (*JobRunner, error) {
	if e.JobRunner != nil {
		return e.JobRunner, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: jobrunner.Label}
	}
	return nil, &NotLoadedError{edge: "job_runner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ControlScheduledJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case controlscheduledjob.FieldConfiguration, controlscheduledjob.FieldCadence:
			values[i] = new([]byte)
		case controlscheduledjob.FieldID, controlscheduledjob.FieldCreatedBy, controlscheduledjob.FieldUpdatedBy, controlscheduledjob.FieldDeletedBy, controlscheduledjob.FieldOwnerID, controlscheduledjob.FieldJobID, controlscheduledjob.FieldCron, controlscheduledjob.FieldJobRunnerID:
			values[i] = new(sql.NullString)
		case controlscheduledjob.FieldCreatedAt, controlscheduledjob.FieldUpdatedAt, controlscheduledjob.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ControlScheduledJob fields.
func (csj *ControlScheduledJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case controlscheduledjob.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				csj.ID = value.String
			}
		case controlscheduledjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				csj.CreatedAt = value.Time
			}
		case controlscheduledjob.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				csj.UpdatedAt = value.Time
			}
		case controlscheduledjob.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				csj.CreatedBy = value.String
			}
		case controlscheduledjob.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				csj.UpdatedBy = value.String
			}
		case controlscheduledjob.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				csj.DeletedAt = value.Time
			}
		case controlscheduledjob.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				csj.DeletedBy = value.String
			}
		case controlscheduledjob.FieldOwnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				csj.OwnerID = value.String
			}
		case controlscheduledjob.FieldJobID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_id", values[i])
			} else if value.Valid {
				csj.JobID = value.String
			}
		case controlscheduledjob.FieldConfiguration:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field configuration", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &csj.Configuration); err != nil {
					return fmt.Errorf("unmarshal field configuration: %w", err)
				}
			}
		case controlscheduledjob.FieldCadence:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field cadence", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &csj.Cadence); err != nil {
					return fmt.Errorf("unmarshal field cadence: %w", err)
				}
			}
		case controlscheduledjob.FieldCron:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cron", values[i])
			} else if value.Valid {
				csj.Cron = new(string)
				*csj.Cron = value.String
			}
		case controlscheduledjob.FieldJobRunnerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_runner_id", values[i])
			} else if value.Valid {
				csj.JobRunnerID = value.String
			}
		default:
			csj.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ControlScheduledJob.
// This includes values selected through modifiers, order, etc.
func (csj *ControlScheduledJob) Value(name string) (ent.Value, error) {
	return csj.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the ControlScheduledJob entity.
func (csj *ControlScheduledJob) QueryOwner() *OrganizationQuery {
	return NewControlScheduledJobClient(csj.config).QueryOwner(csj)
}

// QueryJob queries the "job" edge of the ControlScheduledJob entity.
func (csj *ControlScheduledJob) QueryJob() *ScheduledJobQuery {
	return NewControlScheduledJobClient(csj.config).QueryJob(csj)
}

// QueryControls queries the "controls" edge of the ControlScheduledJob entity.
func (csj *ControlScheduledJob) QueryControls() *ControlQuery {
	return NewControlScheduledJobClient(csj.config).QueryControls(csj)
}

// QuerySubcontrols queries the "subcontrols" edge of the ControlScheduledJob entity.
func (csj *ControlScheduledJob) QuerySubcontrols() *SubcontrolQuery {
	return NewControlScheduledJobClient(csj.config).QuerySubcontrols(csj)
}

// QueryJobRunner queries the "job_runner" edge of the ControlScheduledJob entity.
func (csj *ControlScheduledJob) QueryJobRunner() *JobRunnerQuery {
	return NewControlScheduledJobClient(csj.config).QueryJobRunner(csj)
}

// Update returns a builder for updating this ControlScheduledJob.
// Note that you need to call ControlScheduledJob.Unwrap() before calling this method if this ControlScheduledJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (csj *ControlScheduledJob) Update() *ControlScheduledJobUpdateOne {
	return NewControlScheduledJobClient(csj.config).UpdateOne(csj)
}

// Unwrap unwraps the ControlScheduledJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (csj *ControlScheduledJob) Unwrap() *ControlScheduledJob {
	_tx, ok := csj.config.driver.(*txDriver)
	if !ok {
		panic("generated: ControlScheduledJob is not a transactional entity")
	}
	csj.config.driver = _tx.drv
	return csj
}

// String implements the fmt.Stringer.
func (csj *ControlScheduledJob) String() string {
	var builder strings.Builder
	builder.WriteString("ControlScheduledJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", csj.ID))
	builder.WriteString("created_at=")
	builder.WriteString(csj.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(csj.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(csj.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(csj.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(csj.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(csj.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(csj.OwnerID)
	builder.WriteString(", ")
	builder.WriteString("job_id=")
	builder.WriteString(csj.JobID)
	builder.WriteString(", ")
	builder.WriteString("configuration=")
	builder.WriteString(fmt.Sprintf("%v", csj.Configuration))
	builder.WriteString(", ")
	builder.WriteString("cadence=")
	builder.WriteString(fmt.Sprintf("%v", csj.Cadence))
	builder.WriteString(", ")
	if v := csj.Cron; v != nil {
		builder.WriteString("cron=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("job_runner_id=")
	builder.WriteString(csj.JobRunnerID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedControls returns the Controls named value or an error if the edge was not
// loaded in eager-loading with this name.
func (csj *ControlScheduledJob) NamedControls(name string) ([]*Control, error) {
	if csj.Edges.namedControls == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := csj.Edges.namedControls[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (csj *ControlScheduledJob) appendNamedControls(name string, edges ...*Control) {
	if csj.Edges.namedControls == nil {
		csj.Edges.namedControls = make(map[string][]*Control)
	}
	if len(edges) == 0 {
		csj.Edges.namedControls[name] = []*Control{}
	} else {
		csj.Edges.namedControls[name] = append(csj.Edges.namedControls[name], edges...)
	}
}

// NamedSubcontrols returns the Subcontrols named value or an error if the edge was not
// loaded in eager-loading with this name.
func (csj *ControlScheduledJob) NamedSubcontrols(name string) ([]*Subcontrol, error) {
	if csj.Edges.namedSubcontrols == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := csj.Edges.namedSubcontrols[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (csj *ControlScheduledJob) appendNamedSubcontrols(name string, edges ...*Subcontrol) {
	if csj.Edges.namedSubcontrols == nil {
		csj.Edges.namedSubcontrols = make(map[string][]*Subcontrol)
	}
	if len(edges) == 0 {
		csj.Edges.namedSubcontrols[name] = []*Subcontrol{}
	} else {
		csj.Edges.namedSubcontrols[name] = append(csj.Edges.namedSubcontrols[name], edges...)
	}
}

// ControlScheduledJobs is a parsable slice of ControlScheduledJob.
type ControlScheduledJobs []*ControlScheduledJob
