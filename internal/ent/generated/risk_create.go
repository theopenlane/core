// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/pkg/enums"
)

// RiskCreate is the builder for creating a Risk entity.
type RiskCreate struct {
	config
	mutation *RiskMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RiskCreate) SetCreatedAt(t time.Time) *RiskCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RiskCreate) SetNillableCreatedAt(t *time.Time) *RiskCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RiskCreate) SetUpdatedAt(t time.Time) *RiskCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RiskCreate) SetNillableUpdatedAt(t *time.Time) *RiskCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetCreatedBy sets the "created_by" field.
func (rc *RiskCreate) SetCreatedBy(s string) *RiskCreate {
	rc.mutation.SetCreatedBy(s)
	return rc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rc *RiskCreate) SetNillableCreatedBy(s *string) *RiskCreate {
	if s != nil {
		rc.SetCreatedBy(*s)
	}
	return rc
}

// SetUpdatedBy sets the "updated_by" field.
func (rc *RiskCreate) SetUpdatedBy(s string) *RiskCreate {
	rc.mutation.SetUpdatedBy(s)
	return rc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rc *RiskCreate) SetNillableUpdatedBy(s *string) *RiskCreate {
	if s != nil {
		rc.SetUpdatedBy(*s)
	}
	return rc
}

// SetDeletedAt sets the "deleted_at" field.
func (rc *RiskCreate) SetDeletedAt(t time.Time) *RiskCreate {
	rc.mutation.SetDeletedAt(t)
	return rc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rc *RiskCreate) SetNillableDeletedAt(t *time.Time) *RiskCreate {
	if t != nil {
		rc.SetDeletedAt(*t)
	}
	return rc
}

// SetDeletedBy sets the "deleted_by" field.
func (rc *RiskCreate) SetDeletedBy(s string) *RiskCreate {
	rc.mutation.SetDeletedBy(s)
	return rc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (rc *RiskCreate) SetNillableDeletedBy(s *string) *RiskCreate {
	if s != nil {
		rc.SetDeletedBy(*s)
	}
	return rc
}

// SetDisplayID sets the "display_id" field.
func (rc *RiskCreate) SetDisplayID(s string) *RiskCreate {
	rc.mutation.SetDisplayID(s)
	return rc
}

// SetTags sets the "tags" field.
func (rc *RiskCreate) SetTags(s []string) *RiskCreate {
	rc.mutation.SetTags(s)
	return rc
}

// SetOwnerID sets the "owner_id" field.
func (rc *RiskCreate) SetOwnerID(s string) *RiskCreate {
	rc.mutation.SetOwnerID(s)
	return rc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (rc *RiskCreate) SetNillableOwnerID(s *string) *RiskCreate {
	if s != nil {
		rc.SetOwnerID(*s)
	}
	return rc
}

// SetName sets the "name" field.
func (rc *RiskCreate) SetName(s string) *RiskCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetStatus sets the "status" field.
func (rc *RiskCreate) SetStatus(es enums.RiskStatus) *RiskCreate {
	rc.mutation.SetStatus(es)
	return rc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (rc *RiskCreate) SetNillableStatus(es *enums.RiskStatus) *RiskCreate {
	if es != nil {
		rc.SetStatus(*es)
	}
	return rc
}

// SetRiskType sets the "risk_type" field.
func (rc *RiskCreate) SetRiskType(s string) *RiskCreate {
	rc.mutation.SetRiskType(s)
	return rc
}

// SetNillableRiskType sets the "risk_type" field if the given value is not nil.
func (rc *RiskCreate) SetNillableRiskType(s *string) *RiskCreate {
	if s != nil {
		rc.SetRiskType(*s)
	}
	return rc
}

// SetCategory sets the "category" field.
func (rc *RiskCreate) SetCategory(s string) *RiskCreate {
	rc.mutation.SetCategory(s)
	return rc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (rc *RiskCreate) SetNillableCategory(s *string) *RiskCreate {
	if s != nil {
		rc.SetCategory(*s)
	}
	return rc
}

// SetImpact sets the "impact" field.
func (rc *RiskCreate) SetImpact(ei enums.RiskImpact) *RiskCreate {
	rc.mutation.SetImpact(ei)
	return rc
}

// SetNillableImpact sets the "impact" field if the given value is not nil.
func (rc *RiskCreate) SetNillableImpact(ei *enums.RiskImpact) *RiskCreate {
	if ei != nil {
		rc.SetImpact(*ei)
	}
	return rc
}

// SetLikelihood sets the "likelihood" field.
func (rc *RiskCreate) SetLikelihood(el enums.RiskLikelihood) *RiskCreate {
	rc.mutation.SetLikelihood(el)
	return rc
}

// SetNillableLikelihood sets the "likelihood" field if the given value is not nil.
func (rc *RiskCreate) SetNillableLikelihood(el *enums.RiskLikelihood) *RiskCreate {
	if el != nil {
		rc.SetLikelihood(*el)
	}
	return rc
}

// SetScore sets the "score" field.
func (rc *RiskCreate) SetScore(i int) *RiskCreate {
	rc.mutation.SetScore(i)
	return rc
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (rc *RiskCreate) SetNillableScore(i *int) *RiskCreate {
	if i != nil {
		rc.SetScore(*i)
	}
	return rc
}

// SetMitigation sets the "mitigation" field.
func (rc *RiskCreate) SetMitigation(s string) *RiskCreate {
	rc.mutation.SetMitigation(s)
	return rc
}

// SetNillableMitigation sets the "mitigation" field if the given value is not nil.
func (rc *RiskCreate) SetNillableMitigation(s *string) *RiskCreate {
	if s != nil {
		rc.SetMitigation(*s)
	}
	return rc
}

// SetDetails sets the "details" field.
func (rc *RiskCreate) SetDetails(s string) *RiskCreate {
	rc.mutation.SetDetails(s)
	return rc
}

// SetNillableDetails sets the "details" field if the given value is not nil.
func (rc *RiskCreate) SetNillableDetails(s *string) *RiskCreate {
	if s != nil {
		rc.SetDetails(*s)
	}
	return rc
}

// SetBusinessCosts sets the "business_costs" field.
func (rc *RiskCreate) SetBusinessCosts(s string) *RiskCreate {
	rc.mutation.SetBusinessCosts(s)
	return rc
}

// SetNillableBusinessCosts sets the "business_costs" field if the given value is not nil.
func (rc *RiskCreate) SetNillableBusinessCosts(s *string) *RiskCreate {
	if s != nil {
		rc.SetBusinessCosts(*s)
	}
	return rc
}

// SetStakeholderID sets the "stakeholder_id" field.
func (rc *RiskCreate) SetStakeholderID(s string) *RiskCreate {
	rc.mutation.SetStakeholderID(s)
	return rc
}

// SetNillableStakeholderID sets the "stakeholder_id" field if the given value is not nil.
func (rc *RiskCreate) SetNillableStakeholderID(s *string) *RiskCreate {
	if s != nil {
		rc.SetStakeholderID(*s)
	}
	return rc
}

// SetDelegateID sets the "delegate_id" field.
func (rc *RiskCreate) SetDelegateID(s string) *RiskCreate {
	rc.mutation.SetDelegateID(s)
	return rc
}

// SetNillableDelegateID sets the "delegate_id" field if the given value is not nil.
func (rc *RiskCreate) SetNillableDelegateID(s *string) *RiskCreate {
	if s != nil {
		rc.SetDelegateID(*s)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RiskCreate) SetID(s string) *RiskCreate {
	rc.mutation.SetID(s)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RiskCreate) SetNillableID(s *string) *RiskCreate {
	if s != nil {
		rc.SetID(*s)
	}
	return rc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (rc *RiskCreate) SetOwner(o *Organization) *RiskCreate {
	return rc.SetOwnerID(o.ID)
}

// AddBlockedGroupIDs adds the "blocked_groups" edge to the Group entity by IDs.
func (rc *RiskCreate) AddBlockedGroupIDs(ids ...string) *RiskCreate {
	rc.mutation.AddBlockedGroupIDs(ids...)
	return rc
}

// AddBlockedGroups adds the "blocked_groups" edges to the Group entity.
func (rc *RiskCreate) AddBlockedGroups(g ...*Group) *RiskCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return rc.AddBlockedGroupIDs(ids...)
}

// AddEditorIDs adds the "editors" edge to the Group entity by IDs.
func (rc *RiskCreate) AddEditorIDs(ids ...string) *RiskCreate {
	rc.mutation.AddEditorIDs(ids...)
	return rc
}

// AddEditors adds the "editors" edges to the Group entity.
func (rc *RiskCreate) AddEditors(g ...*Group) *RiskCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return rc.AddEditorIDs(ids...)
}

// AddViewerIDs adds the "viewers" edge to the Group entity by IDs.
func (rc *RiskCreate) AddViewerIDs(ids ...string) *RiskCreate {
	rc.mutation.AddViewerIDs(ids...)
	return rc
}

// AddViewers adds the "viewers" edges to the Group entity.
func (rc *RiskCreate) AddViewers(g ...*Group) *RiskCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return rc.AddViewerIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (rc *RiskCreate) AddControlIDs(ids ...string) *RiskCreate {
	rc.mutation.AddControlIDs(ids...)
	return rc
}

// AddControls adds the "controls" edges to the Control entity.
func (rc *RiskCreate) AddControls(c ...*Control) *RiskCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return rc.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (rc *RiskCreate) AddProcedureIDs(ids ...string) *RiskCreate {
	rc.mutation.AddProcedureIDs(ids...)
	return rc
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (rc *RiskCreate) AddProcedures(p ...*Procedure) *RiskCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddProcedureIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (rc *RiskCreate) AddProgramIDs(ids ...string) *RiskCreate {
	rc.mutation.AddProgramIDs(ids...)
	return rc
}

// AddPrograms adds the "programs" edges to the Program entity.
func (rc *RiskCreate) AddPrograms(p ...*Program) *RiskCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddProgramIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (rc *RiskCreate) AddActionPlanIDs(ids ...string) *RiskCreate {
	rc.mutation.AddActionPlanIDs(ids...)
	return rc
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (rc *RiskCreate) AddActionPlans(a ...*ActionPlan) *RiskCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rc.AddActionPlanIDs(ids...)
}

// SetStakeholder sets the "stakeholder" edge to the Group entity.
func (rc *RiskCreate) SetStakeholder(g *Group) *RiskCreate {
	return rc.SetStakeholderID(g.ID)
}

// SetDelegate sets the "delegate" edge to the Group entity.
func (rc *RiskCreate) SetDelegate(g *Group) *RiskCreate {
	return rc.SetDelegateID(g.ID)
}

// Mutation returns the RiskMutation object of the builder.
func (rc *RiskCreate) Mutation() *RiskMutation {
	return rc.mutation
}

// Save creates the Risk in the database.
func (rc *RiskCreate) Save(ctx context.Context) (*Risk, error) {
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RiskCreate) SaveX(ctx context.Context) *Risk {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RiskCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RiskCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RiskCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if risk.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized risk.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := risk.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if risk.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized risk.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := risk.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.Tags(); !ok {
		v := risk.DefaultTags
		rc.mutation.SetTags(v)
	}
	if _, ok := rc.mutation.Status(); !ok {
		v := risk.DefaultStatus
		rc.mutation.SetStatus(v)
	}
	if _, ok := rc.mutation.Impact(); !ok {
		v := risk.DefaultImpact
		rc.mutation.SetImpact(v)
	}
	if _, ok := rc.mutation.Likelihood(); !ok {
		v := risk.DefaultLikelihood
		rc.mutation.SetLikelihood(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		if risk.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized risk.DefaultID (forgotten import generated/runtime?)")
		}
		v := risk.DefaultID()
		rc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *RiskCreate) check() error {
	if _, ok := rc.mutation.DisplayID(); !ok {
		return &ValidationError{Name: "display_id", err: errors.New(`generated: missing required field "Risk.display_id"`)}
	}
	if v, ok := rc.mutation.DisplayID(); ok {
		if err := risk.DisplayIDValidator(v); err != nil {
			return &ValidationError{Name: "display_id", err: fmt.Errorf(`generated: validator failed for field "Risk.display_id": %w`, err)}
		}
	}
	if v, ok := rc.mutation.OwnerID(); ok {
		if err := risk.OwnerIDValidator(v); err != nil {
			return &ValidationError{Name: "owner_id", err: fmt.Errorf(`generated: validator failed for field "Risk.owner_id": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Risk.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := risk.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Risk.name": %w`, err)}
		}
	}
	if v, ok := rc.mutation.Status(); ok {
		if err := risk.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Risk.status": %w`, err)}
		}
	}
	if v, ok := rc.mutation.Impact(); ok {
		if err := risk.ImpactValidator(v); err != nil {
			return &ValidationError{Name: "impact", err: fmt.Errorf(`generated: validator failed for field "Risk.impact": %w`, err)}
		}
	}
	if v, ok := rc.mutation.Likelihood(); ok {
		if err := risk.LikelihoodValidator(v); err != nil {
			return &ValidationError{Name: "likelihood", err: fmt.Errorf(`generated: validator failed for field "Risk.likelihood": %w`, err)}
		}
	}
	return nil
}

func (rc *RiskCreate) sqlSave(ctx context.Context) (*Risk, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Risk.ID type: %T", _spec.ID.Value)
		}
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RiskCreate) createSpec() (*Risk, *sqlgraph.CreateSpec) {
	var (
		_node = &Risk{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(risk.Table, sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString))
	)
	_spec.Schema = rc.schemaConfig.Risk
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(risk.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(risk.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.CreatedBy(); ok {
		_spec.SetField(risk.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := rc.mutation.UpdatedBy(); ok {
		_spec.SetField(risk.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := rc.mutation.DeletedAt(); ok {
		_spec.SetField(risk.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := rc.mutation.DeletedBy(); ok {
		_spec.SetField(risk.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := rc.mutation.DisplayID(); ok {
		_spec.SetField(risk.FieldDisplayID, field.TypeString, value)
		_node.DisplayID = value
	}
	if value, ok := rc.mutation.Tags(); ok {
		_spec.SetField(risk.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(risk.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Status(); ok {
		_spec.SetField(risk.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := rc.mutation.RiskType(); ok {
		_spec.SetField(risk.FieldRiskType, field.TypeString, value)
		_node.RiskType = value
	}
	if value, ok := rc.mutation.Category(); ok {
		_spec.SetField(risk.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := rc.mutation.Impact(); ok {
		_spec.SetField(risk.FieldImpact, field.TypeEnum, value)
		_node.Impact = value
	}
	if value, ok := rc.mutation.Likelihood(); ok {
		_spec.SetField(risk.FieldLikelihood, field.TypeEnum, value)
		_node.Likelihood = value
	}
	if value, ok := rc.mutation.Score(); ok {
		_spec.SetField(risk.FieldScore, field.TypeInt, value)
		_node.Score = value
	}
	if value, ok := rc.mutation.Mitigation(); ok {
		_spec.SetField(risk.FieldMitigation, field.TypeString, value)
		_node.Mitigation = value
	}
	if value, ok := rc.mutation.Details(); ok {
		_spec.SetField(risk.FieldDetails, field.TypeString, value)
		_node.Details = value
	}
	if value, ok := rc.mutation.BusinessCosts(); ok {
		_spec.SetField(risk.FieldBusinessCosts, field.TypeString, value)
		_node.BusinessCosts = value
	}
	if nodes := rc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   risk.OwnerTable,
			Columns: []string{risk.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.BlockedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.BlockedGroupsTable,
			Columns: risk.BlockedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.RiskBlockedGroups
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.EditorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.EditorsTable,
			Columns: risk.EditorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.RiskEditors
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ViewersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ViewersTable,
			Columns: risk.ViewersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.RiskViewers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ControlsTable,
			Columns: risk.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.ControlRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProceduresTable,
			Columns: risk.ProceduresPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.ProcedureRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   risk.ProgramsTable,
			Columns: risk.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.ProgramRisks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   risk.ActionPlansTable,
			Columns: risk.ActionPlansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.RiskActionPlans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.StakeholderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.StakeholderTable,
			Columns: []string{risk.StakeholderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StakeholderID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.DelegateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   risk.DelegateTable,
			Columns: []string{risk.DelegateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = rc.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DelegateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RiskCreateBulk is the builder for creating many Risk entities in bulk.
type RiskCreateBulk struct {
	config
	err      error
	builders []*RiskCreate
}

// Save creates the Risk entities in the database.
func (rcb *RiskCreateBulk) Save(ctx context.Context) ([]*Risk, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Risk, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RiskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RiskCreateBulk) SaveX(ctx context.Context) []*Risk {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RiskCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RiskCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
