// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/asset"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlimplementation"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/customdomain"
	"github.com/theopenlane/core/internal/ent/generated/dnsverification"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/evidence"
	"github.com/theopenlane/core/internal/ent/generated/export"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/internalpolicy"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/jobresult"
	"github.com/theopenlane/core/internal/ent/generated/jobrunner"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnerregistrationtoken"
	"github.com/theopenlane/core/internal/ent/generated/jobrunnertoken"
	"github.com/theopenlane/core/internal/ent/generated/jobtemplate"
	"github.com/theopenlane/core/internal/ent/generated/mappedcontrol"
	"github.com/theopenlane/core/internal/ent/generated/narrative"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/orgmodule"
	"github.com/theopenlane/core/internal/ent/generated/orgprice"
	"github.com/theopenlane/core/internal/ent/generated/orgproduct"
	"github.com/theopenlane/core/internal/ent/generated/orgsubscription"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/risk"
	"github.com/theopenlane/core/internal/ent/generated/scan"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjob"
	"github.com/theopenlane/core/internal/ent/generated/scheduledjobrun"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/subcontrol"
	"github.com/theopenlane/core/internal/ent/generated/subprocessor"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcenterdoc"
	"github.com/theopenlane/core/internal/ent/generated/user"
)

// OrganizationCreate is the builder for creating a Organization entity.
type OrganizationCreate struct {
	config
	mutation *OrganizationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *OrganizationCreate) SetCreatedAt(v time.Time) *OrganizationCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableCreatedAt(v *time.Time) *OrganizationCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OrganizationCreate) SetUpdatedAt(v time.Time) *OrganizationCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableUpdatedAt(v *time.Time) *OrganizationCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *OrganizationCreate) SetCreatedBy(v string) *OrganizationCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableCreatedBy(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *OrganizationCreate) SetUpdatedBy(v string) *OrganizationCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableUpdatedBy(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *OrganizationCreate) SetDeletedAt(v time.Time) *OrganizationCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableDeletedAt(v *time.Time) *OrganizationCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *OrganizationCreate) SetDeletedBy(v string) *OrganizationCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableDeletedBy(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetTags sets the "tags" field.
func (_c *OrganizationCreate) SetTags(v []string) *OrganizationCreate {
	_c.mutation.SetTags(v)
	return _c
}

// SetName sets the "name" field.
func (_c *OrganizationCreate) SetName(v string) *OrganizationCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDisplayName sets the "display_name" field.
func (_c *OrganizationCreate) SetDisplayName(v string) *OrganizationCreate {
	_c.mutation.SetDisplayName(v)
	return _c
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableDisplayName(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetDisplayName(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *OrganizationCreate) SetDescription(v string) *OrganizationCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableDescription(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetParentOrganizationID sets the "parent_organization_id" field.
func (_c *OrganizationCreate) SetParentOrganizationID(v string) *OrganizationCreate {
	_c.mutation.SetParentOrganizationID(v)
	return _c
}

// SetNillableParentOrganizationID sets the "parent_organization_id" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableParentOrganizationID(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetParentOrganizationID(*v)
	}
	return _c
}

// SetPersonalOrg sets the "personal_org" field.
func (_c *OrganizationCreate) SetPersonalOrg(v bool) *OrganizationCreate {
	_c.mutation.SetPersonalOrg(v)
	return _c
}

// SetNillablePersonalOrg sets the "personal_org" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillablePersonalOrg(v *bool) *OrganizationCreate {
	if v != nil {
		_c.SetPersonalOrg(*v)
	}
	return _c
}

// SetAvatarRemoteURL sets the "avatar_remote_url" field.
func (_c *OrganizationCreate) SetAvatarRemoteURL(v string) *OrganizationCreate {
	_c.mutation.SetAvatarRemoteURL(v)
	return _c
}

// SetNillableAvatarRemoteURL sets the "avatar_remote_url" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableAvatarRemoteURL(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetAvatarRemoteURL(*v)
	}
	return _c
}

// SetAvatarLocalFileID sets the "avatar_local_file_id" field.
func (_c *OrganizationCreate) SetAvatarLocalFileID(v string) *OrganizationCreate {
	_c.mutation.SetAvatarLocalFileID(v)
	return _c
}

// SetNillableAvatarLocalFileID sets the "avatar_local_file_id" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableAvatarLocalFileID(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetAvatarLocalFileID(*v)
	}
	return _c
}

// SetAvatarUpdatedAt sets the "avatar_updated_at" field.
func (_c *OrganizationCreate) SetAvatarUpdatedAt(v time.Time) *OrganizationCreate {
	_c.mutation.SetAvatarUpdatedAt(v)
	return _c
}

// SetNillableAvatarUpdatedAt sets the "avatar_updated_at" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableAvatarUpdatedAt(v *time.Time) *OrganizationCreate {
	if v != nil {
		_c.SetAvatarUpdatedAt(*v)
	}
	return _c
}

// SetDedicatedDb sets the "dedicated_db" field.
func (_c *OrganizationCreate) SetDedicatedDb(v bool) *OrganizationCreate {
	_c.mutation.SetDedicatedDb(v)
	return _c
}

// SetNillableDedicatedDb sets the "dedicated_db" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableDedicatedDb(v *bool) *OrganizationCreate {
	if v != nil {
		_c.SetDedicatedDb(*v)
	}
	return _c
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (_c *OrganizationCreate) SetStripeCustomerID(v string) *OrganizationCreate {
	_c.mutation.SetStripeCustomerID(v)
	return _c
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableStripeCustomerID(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetStripeCustomerID(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *OrganizationCreate) SetID(v string) *OrganizationCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *OrganizationCreate) SetNillableID(v *string) *OrganizationCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddControlCreatorIDs adds the "control_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddControlCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddControlCreatorIDs(ids...)
	return _c
}

// AddControlCreators adds the "control_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddControlCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlCreatorIDs(ids...)
}

// AddControlImplementationCreatorIDs adds the "control_implementation_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddControlImplementationCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddControlImplementationCreatorIDs(ids...)
	return _c
}

// AddControlImplementationCreators adds the "control_implementation_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddControlImplementationCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlImplementationCreatorIDs(ids...)
}

// AddControlObjectiveCreatorIDs adds the "control_objective_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddControlObjectiveCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddControlObjectiveCreatorIDs(ids...)
	return _c
}

// AddControlObjectiveCreators adds the "control_objective_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddControlObjectiveCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlObjectiveCreatorIDs(ids...)
}

// AddEvidenceCreatorIDs adds the "evidence_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddEvidenceCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddEvidenceCreatorIDs(ids...)
	return _c
}

// AddEvidenceCreators adds the "evidence_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddEvidenceCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEvidenceCreatorIDs(ids...)
}

// AddGroupCreatorIDs adds the "group_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddGroupCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddGroupCreatorIDs(ids...)
	return _c
}

// AddGroupCreators adds the "group_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddGroupCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGroupCreatorIDs(ids...)
}

// AddInternalPolicyCreatorIDs adds the "internal_policy_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddInternalPolicyCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddInternalPolicyCreatorIDs(ids...)
	return _c
}

// AddInternalPolicyCreators adds the "internal_policy_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddInternalPolicyCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInternalPolicyCreatorIDs(ids...)
}

// AddMappedControlCreatorIDs adds the "mapped_control_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddMappedControlCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddMappedControlCreatorIDs(ids...)
	return _c
}

// AddMappedControlCreators adds the "mapped_control_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddMappedControlCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMappedControlCreatorIDs(ids...)
}

// AddNarrativeCreatorIDs adds the "narrative_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddNarrativeCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddNarrativeCreatorIDs(ids...)
	return _c
}

// AddNarrativeCreators adds the "narrative_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddNarrativeCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNarrativeCreatorIDs(ids...)
}

// AddProcedureCreatorIDs adds the "procedure_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddProcedureCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddProcedureCreatorIDs(ids...)
	return _c
}

// AddProcedureCreators adds the "procedure_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddProcedureCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProcedureCreatorIDs(ids...)
}

// AddProgramCreatorIDs adds the "program_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddProgramCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddProgramCreatorIDs(ids...)
	return _c
}

// AddProgramCreators adds the "program_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddProgramCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramCreatorIDs(ids...)
}

// AddRiskCreatorIDs adds the "risk_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddRiskCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddRiskCreatorIDs(ids...)
	return _c
}

// AddRiskCreators adds the "risk_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddRiskCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRiskCreatorIDs(ids...)
}

// AddScheduledJobCreatorIDs adds the "scheduled_job_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddScheduledJobCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddScheduledJobCreatorIDs(ids...)
	return _c
}

// AddScheduledJobCreators adds the "scheduled_job_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddScheduledJobCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddScheduledJobCreatorIDs(ids...)
}

// AddStandardCreatorIDs adds the "standard_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddStandardCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddStandardCreatorIDs(ids...)
	return _c
}

// AddStandardCreators adds the "standard_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddStandardCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddStandardCreatorIDs(ids...)
}

// AddTemplateCreatorIDs adds the "template_creators" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddTemplateCreatorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddTemplateCreatorIDs(ids...)
	return _c
}

// AddTemplateCreators adds the "template_creators" edges to the Group entity.
func (_c *OrganizationCreate) AddTemplateCreators(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTemplateCreatorIDs(ids...)
}

// SetParentID sets the "parent" edge to the Organization entity by ID.
func (_c *OrganizationCreate) SetParentID(id string) *OrganizationCreate {
	_c.mutation.SetParentID(id)
	return _c
}

// SetNillableParentID sets the "parent" edge to the Organization entity by ID if the given value is not nil.
func (_c *OrganizationCreate) SetNillableParentID(id *string) *OrganizationCreate {
	if id != nil {
		_c = _c.SetParentID(*id)
	}
	return _c
}

// SetParent sets the "parent" edge to the Organization entity.
func (_c *OrganizationCreate) SetParent(v *Organization) *OrganizationCreate {
	return _c.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Organization entity by IDs.
func (_c *OrganizationCreate) AddChildIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddChildIDs(ids...)
	return _c
}

// AddChildren adds the "children" edges to the Organization entity.
func (_c *OrganizationCreate) AddChildren(v ...*Organization) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildIDs(ids...)
}

// SetSettingID sets the "setting" edge to the OrganizationSetting entity by ID.
func (_c *OrganizationCreate) SetSettingID(id string) *OrganizationCreate {
	_c.mutation.SetSettingID(id)
	return _c
}

// SetNillableSettingID sets the "setting" edge to the OrganizationSetting entity by ID if the given value is not nil.
func (_c *OrganizationCreate) SetNillableSettingID(id *string) *OrganizationCreate {
	if id != nil {
		_c = _c.SetSettingID(*id)
	}
	return _c
}

// SetSetting sets the "setting" edge to the OrganizationSetting entity.
func (_c *OrganizationCreate) SetSetting(v *OrganizationSetting) *OrganizationCreate {
	return _c.SetSettingID(v.ID)
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (_c *OrganizationCreate) AddPersonalAccessTokenIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddPersonalAccessTokenIDs(ids...)
	return _c
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (_c *OrganizationCreate) AddPersonalAccessTokens(v ...*PersonalAccessToken) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddPersonalAccessTokenIDs(ids...)
}

// AddAPITokenIDs adds the "api_tokens" edge to the APIToken entity by IDs.
func (_c *OrganizationCreate) AddAPITokenIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddAPITokenIDs(ids...)
	return _c
}

// AddAPITokens adds the "api_tokens" edges to the APIToken entity.
func (_c *OrganizationCreate) AddAPITokens(v ...*APIToken) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAPITokenIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (_c *OrganizationCreate) AddUserIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddUserIDs(ids...)
	return _c
}

// AddUsers adds the "users" edges to the User entity.
func (_c *OrganizationCreate) AddUsers(v ...*User) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddUserIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_c *OrganizationCreate) AddFileIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddFileIDs(ids...)
	return _c
}

// AddFiles adds the "files" edges to the File entity.
func (_c *OrganizationCreate) AddFiles(v ...*File) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFileIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_c *OrganizationCreate) AddEventIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddEventIDs(ids...)
	return _c
}

// AddEvents adds the "events" edges to the Event entity.
func (_c *OrganizationCreate) AddEvents(v ...*Event) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEventIDs(ids...)
}

// AddSecretIDs adds the "secrets" edge to the Hush entity by IDs.
func (_c *OrganizationCreate) AddSecretIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddSecretIDs(ids...)
	return _c
}

// AddSecrets adds the "secrets" edges to the Hush entity.
func (_c *OrganizationCreate) AddSecrets(v ...*Hush) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSecretIDs(ids...)
}

// SetAvatarFileID sets the "avatar_file" edge to the File entity by ID.
func (_c *OrganizationCreate) SetAvatarFileID(id string) *OrganizationCreate {
	_c.mutation.SetAvatarFileID(id)
	return _c
}

// SetNillableAvatarFileID sets the "avatar_file" edge to the File entity by ID if the given value is not nil.
func (_c *OrganizationCreate) SetNillableAvatarFileID(id *string) *OrganizationCreate {
	if id != nil {
		_c = _c.SetAvatarFileID(*id)
	}
	return _c
}

// SetAvatarFile sets the "avatar_file" edge to the File entity.
func (_c *OrganizationCreate) SetAvatarFile(v *File) *OrganizationCreate {
	return _c.SetAvatarFileID(v.ID)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (_c *OrganizationCreate) AddGroupIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddGroupIDs(ids...)
	return _c
}

// AddGroups adds the "groups" edges to the Group entity.
func (_c *OrganizationCreate) AddGroups(v ...*Group) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGroupIDs(ids...)
}

// AddTemplateIDs adds the "templates" edge to the Template entity by IDs.
func (_c *OrganizationCreate) AddTemplateIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddTemplateIDs(ids...)
	return _c
}

// AddTemplates adds the "templates" edges to the Template entity.
func (_c *OrganizationCreate) AddTemplates(v ...*Template) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTemplateIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (_c *OrganizationCreate) AddIntegrationIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddIntegrationIDs(ids...)
	return _c
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (_c *OrganizationCreate) AddIntegrations(v ...*Integration) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddIntegrationIDs(ids...)
}

// AddDocumentIDs adds the "documents" edge to the DocumentData entity by IDs.
func (_c *OrganizationCreate) AddDocumentIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddDocumentIDs(ids...)
	return _c
}

// AddDocuments adds the "documents" edges to the DocumentData entity.
func (_c *OrganizationCreate) AddDocuments(v ...*DocumentData) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDocumentIDs(ids...)
}

// AddOrgSubscriptionIDs adds the "org_subscriptions" edge to the OrgSubscription entity by IDs.
func (_c *OrganizationCreate) AddOrgSubscriptionIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddOrgSubscriptionIDs(ids...)
	return _c
}

// AddOrgSubscriptions adds the "org_subscriptions" edges to the OrgSubscription entity.
func (_c *OrganizationCreate) AddOrgSubscriptions(v ...*OrgSubscription) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOrgSubscriptionIDs(ids...)
}

// AddOrgProductIDs adds the "org_products" edge to the OrgProduct entity by IDs.
func (_c *OrganizationCreate) AddOrgProductIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddOrgProductIDs(ids...)
	return _c
}

// AddOrgProducts adds the "org_products" edges to the OrgProduct entity.
func (_c *OrganizationCreate) AddOrgProducts(v ...*OrgProduct) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOrgProductIDs(ids...)
}

// AddOrgPriceIDs adds the "org_prices" edge to the OrgPrice entity by IDs.
func (_c *OrganizationCreate) AddOrgPriceIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddOrgPriceIDs(ids...)
	return _c
}

// AddOrgPrices adds the "org_prices" edges to the OrgPrice entity.
func (_c *OrganizationCreate) AddOrgPrices(v ...*OrgPrice) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOrgPriceIDs(ids...)
}

// AddOrgModuleIDs adds the "org_modules" edge to the OrgModule entity by IDs.
func (_c *OrganizationCreate) AddOrgModuleIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddOrgModuleIDs(ids...)
	return _c
}

// AddOrgModules adds the "org_modules" edges to the OrgModule entity.
func (_c *OrganizationCreate) AddOrgModules(v ...*OrgModule) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddOrgModuleIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (_c *OrganizationCreate) AddInviteIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddInviteIDs(ids...)
	return _c
}

// AddInvites adds the "invites" edges to the Invite entity.
func (_c *OrganizationCreate) AddInvites(v ...*Invite) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInviteIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the Subscriber entity by IDs.
func (_c *OrganizationCreate) AddSubscriberIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddSubscriberIDs(ids...)
	return _c
}

// AddSubscribers adds the "subscribers" edges to the Subscriber entity.
func (_c *OrganizationCreate) AddSubscribers(v ...*Subscriber) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubscriberIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (_c *OrganizationCreate) AddEntityIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddEntityIDs(ids...)
	return _c
}

// AddEntities adds the "entities" edges to the Entity entity.
func (_c *OrganizationCreate) AddEntities(v ...*Entity) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEntityIDs(ids...)
}

// AddEntityTypeIDs adds the "entity_types" edge to the EntityType entity by IDs.
func (_c *OrganizationCreate) AddEntityTypeIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddEntityTypeIDs(ids...)
	return _c
}

// AddEntityTypes adds the "entity_types" edges to the EntityType entity.
func (_c *OrganizationCreate) AddEntityTypes(v ...*EntityType) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEntityTypeIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (_c *OrganizationCreate) AddContactIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddContactIDs(ids...)
	return _c
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (_c *OrganizationCreate) AddContacts(v ...*Contact) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddContactIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (_c *OrganizationCreate) AddNoteIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddNoteIDs(ids...)
	return _c
}

// AddNotes adds the "notes" edges to the Note entity.
func (_c *OrganizationCreate) AddNotes(v ...*Note) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNoteIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_c *OrganizationCreate) AddTaskIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddTaskIDs(ids...)
	return _c
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_c *OrganizationCreate) AddTasks(v ...*Task) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTaskIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (_c *OrganizationCreate) AddProgramIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddProgramIDs(ids...)
	return _c
}

// AddPrograms adds the "programs" edges to the Program entity.
func (_c *OrganizationCreate) AddPrograms(v ...*Program) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProgramIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (_c *OrganizationCreate) AddProcedureIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddProcedureIDs(ids...)
	return _c
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (_c *OrganizationCreate) AddProcedures(v ...*Procedure) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddProcedureIDs(ids...)
}

// AddInternalPolicyIDs adds the "internal_policies" edge to the InternalPolicy entity by IDs.
func (_c *OrganizationCreate) AddInternalPolicyIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddInternalPolicyIDs(ids...)
	return _c
}

// AddInternalPolicies adds the "internal_policies" edges to the InternalPolicy entity.
func (_c *OrganizationCreate) AddInternalPolicies(v ...*InternalPolicy) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddInternalPolicyIDs(ids...)
}

// AddRiskIDs adds the "risks" edge to the Risk entity by IDs.
func (_c *OrganizationCreate) AddRiskIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddRiskIDs(ids...)
	return _c
}

// AddRisks adds the "risks" edges to the Risk entity.
func (_c *OrganizationCreate) AddRisks(v ...*Risk) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddRiskIDs(ids...)
}

// AddControlObjectiveIDs adds the "control_objectives" edge to the ControlObjective entity by IDs.
func (_c *OrganizationCreate) AddControlObjectiveIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddControlObjectiveIDs(ids...)
	return _c
}

// AddControlObjectives adds the "control_objectives" edges to the ControlObjective entity.
func (_c *OrganizationCreate) AddControlObjectives(v ...*ControlObjective) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlObjectiveIDs(ids...)
}

// AddNarrativeIDs adds the "narratives" edge to the Narrative entity by IDs.
func (_c *OrganizationCreate) AddNarrativeIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddNarrativeIDs(ids...)
	return _c
}

// AddNarratives adds the "narratives" edges to the Narrative entity.
func (_c *OrganizationCreate) AddNarratives(v ...*Narrative) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddNarrativeIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (_c *OrganizationCreate) AddControlIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddControlIDs(ids...)
	return _c
}

// AddControls adds the "controls" edges to the Control entity.
func (_c *OrganizationCreate) AddControls(v ...*Control) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlIDs(ids...)
}

// AddSubcontrolIDs adds the "subcontrols" edge to the Subcontrol entity by IDs.
func (_c *OrganizationCreate) AddSubcontrolIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddSubcontrolIDs(ids...)
	return _c
}

// AddSubcontrols adds the "subcontrols" edges to the Subcontrol entity.
func (_c *OrganizationCreate) AddSubcontrols(v ...*Subcontrol) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubcontrolIDs(ids...)
}

// AddControlImplementationIDs adds the "control_implementations" edge to the ControlImplementation entity by IDs.
func (_c *OrganizationCreate) AddControlImplementationIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddControlImplementationIDs(ids...)
	return _c
}

// AddControlImplementations adds the "control_implementations" edges to the ControlImplementation entity.
func (_c *OrganizationCreate) AddControlImplementations(v ...*ControlImplementation) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddControlImplementationIDs(ids...)
}

// AddMappedControlIDs adds the "mapped_controls" edge to the MappedControl entity by IDs.
func (_c *OrganizationCreate) AddMappedControlIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddMappedControlIDs(ids...)
	return _c
}

// AddMappedControls adds the "mapped_controls" edges to the MappedControl entity.
func (_c *OrganizationCreate) AddMappedControls(v ...*MappedControl) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMappedControlIDs(ids...)
}

// AddEvidenceIDs adds the "evidence" edge to the Evidence entity by IDs.
func (_c *OrganizationCreate) AddEvidenceIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddEvidenceIDs(ids...)
	return _c
}

// AddEvidence adds the "evidence" edges to the Evidence entity.
func (_c *OrganizationCreate) AddEvidence(v ...*Evidence) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEvidenceIDs(ids...)
}

// AddStandardIDs adds the "standards" edge to the Standard entity by IDs.
func (_c *OrganizationCreate) AddStandardIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddStandardIDs(ids...)
	return _c
}

// AddStandards adds the "standards" edges to the Standard entity.
func (_c *OrganizationCreate) AddStandards(v ...*Standard) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddStandardIDs(ids...)
}

// AddActionPlanIDs adds the "action_plans" edge to the ActionPlan entity by IDs.
func (_c *OrganizationCreate) AddActionPlanIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddActionPlanIDs(ids...)
	return _c
}

// AddActionPlans adds the "action_plans" edges to the ActionPlan entity.
func (_c *OrganizationCreate) AddActionPlans(v ...*ActionPlan) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddActionPlanIDs(ids...)
}

// AddCustomDomainIDs adds the "custom_domains" edge to the CustomDomain entity by IDs.
func (_c *OrganizationCreate) AddCustomDomainIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddCustomDomainIDs(ids...)
	return _c
}

// AddCustomDomains adds the "custom_domains" edges to the CustomDomain entity.
func (_c *OrganizationCreate) AddCustomDomains(v ...*CustomDomain) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCustomDomainIDs(ids...)
}

// AddJobRunnerIDs adds the "job_runners" edge to the JobRunner entity by IDs.
func (_c *OrganizationCreate) AddJobRunnerIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddJobRunnerIDs(ids...)
	return _c
}

// AddJobRunners adds the "job_runners" edges to the JobRunner entity.
func (_c *OrganizationCreate) AddJobRunners(v ...*JobRunner) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddJobRunnerIDs(ids...)
}

// AddJobRunnerTokenIDs adds the "job_runner_tokens" edge to the JobRunnerToken entity by IDs.
func (_c *OrganizationCreate) AddJobRunnerTokenIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddJobRunnerTokenIDs(ids...)
	return _c
}

// AddJobRunnerTokens adds the "job_runner_tokens" edges to the JobRunnerToken entity.
func (_c *OrganizationCreate) AddJobRunnerTokens(v ...*JobRunnerToken) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddJobRunnerTokenIDs(ids...)
}

// AddJobRunnerRegistrationTokenIDs adds the "job_runner_registration_tokens" edge to the JobRunnerRegistrationToken entity by IDs.
func (_c *OrganizationCreate) AddJobRunnerRegistrationTokenIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddJobRunnerRegistrationTokenIDs(ids...)
	return _c
}

// AddJobRunnerRegistrationTokens adds the "job_runner_registration_tokens" edges to the JobRunnerRegistrationToken entity.
func (_c *OrganizationCreate) AddJobRunnerRegistrationTokens(v ...*JobRunnerRegistrationToken) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddJobRunnerRegistrationTokenIDs(ids...)
}

// AddDNSVerificationIDs adds the "dns_verifications" edge to the DNSVerification entity by IDs.
func (_c *OrganizationCreate) AddDNSVerificationIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddDNSVerificationIDs(ids...)
	return _c
}

// AddDNSVerifications adds the "dns_verifications" edges to the DNSVerification entity.
func (_c *OrganizationCreate) AddDNSVerifications(v ...*DNSVerification) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDNSVerificationIDs(ids...)
}

// AddJobTemplateIDs adds the "job_templates" edge to the JobTemplate entity by IDs.
func (_c *OrganizationCreate) AddJobTemplateIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddJobTemplateIDs(ids...)
	return _c
}

// AddJobTemplates adds the "job_templates" edges to the JobTemplate entity.
func (_c *OrganizationCreate) AddJobTemplates(v ...*JobTemplate) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddJobTemplateIDs(ids...)
}

// AddScheduledJobIDs adds the "scheduled_jobs" edge to the ScheduledJob entity by IDs.
func (_c *OrganizationCreate) AddScheduledJobIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddScheduledJobIDs(ids...)
	return _c
}

// AddScheduledJobs adds the "scheduled_jobs" edges to the ScheduledJob entity.
func (_c *OrganizationCreate) AddScheduledJobs(v ...*ScheduledJob) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddScheduledJobIDs(ids...)
}

// AddJobResultIDs adds the "job_results" edge to the JobResult entity by IDs.
func (_c *OrganizationCreate) AddJobResultIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddJobResultIDs(ids...)
	return _c
}

// AddJobResults adds the "job_results" edges to the JobResult entity.
func (_c *OrganizationCreate) AddJobResults(v ...*JobResult) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddJobResultIDs(ids...)
}

// AddScheduledJobRunIDs adds the "scheduled_job_runs" edge to the ScheduledJobRun entity by IDs.
func (_c *OrganizationCreate) AddScheduledJobRunIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddScheduledJobRunIDs(ids...)
	return _c
}

// AddScheduledJobRuns adds the "scheduled_job_runs" edges to the ScheduledJobRun entity.
func (_c *OrganizationCreate) AddScheduledJobRuns(v ...*ScheduledJobRun) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddScheduledJobRunIDs(ids...)
}

// AddTrustCenterIDs adds the "trust_centers" edge to the TrustCenter entity by IDs.
func (_c *OrganizationCreate) AddTrustCenterIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddTrustCenterIDs(ids...)
	return _c
}

// AddTrustCenters adds the "trust_centers" edges to the TrustCenter entity.
func (_c *OrganizationCreate) AddTrustCenters(v ...*TrustCenter) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTrustCenterIDs(ids...)
}

// AddAssetIDs adds the "assets" edge to the Asset entity by IDs.
func (_c *OrganizationCreate) AddAssetIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddAssetIDs(ids...)
	return _c
}

// AddAssets adds the "assets" edges to the Asset entity.
func (_c *OrganizationCreate) AddAssets(v ...*Asset) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddAssetIDs(ids...)
}

// AddScanIDs adds the "scans" edge to the Scan entity by IDs.
func (_c *OrganizationCreate) AddScanIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddScanIDs(ids...)
	return _c
}

// AddScans adds the "scans" edges to the Scan entity.
func (_c *OrganizationCreate) AddScans(v ...*Scan) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddScanIDs(ids...)
}

// AddSubprocessorIDs adds the "subprocessors" edge to the Subprocessor entity by IDs.
func (_c *OrganizationCreate) AddSubprocessorIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddSubprocessorIDs(ids...)
	return _c
}

// AddSubprocessors adds the "subprocessors" edges to the Subprocessor entity.
func (_c *OrganizationCreate) AddSubprocessors(v ...*Subprocessor) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddSubprocessorIDs(ids...)
}

// AddExportIDs adds the "exports" edge to the Export entity by IDs.
func (_c *OrganizationCreate) AddExportIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddExportIDs(ids...)
	return _c
}

// AddExports adds the "exports" edges to the Export entity.
func (_c *OrganizationCreate) AddExports(v ...*Export) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddExportIDs(ids...)
}

// AddTrustCenterDocIDs adds the "trust_center_docs" edge to the TrustCenterDoc entity by IDs.
func (_c *OrganizationCreate) AddTrustCenterDocIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddTrustCenterDocIDs(ids...)
	return _c
}

// AddTrustCenterDocs adds the "trust_center_docs" edges to the TrustCenterDoc entity.
func (_c *OrganizationCreate) AddTrustCenterDocs(v ...*TrustCenterDoc) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTrustCenterDocIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the OrgMembership entity by IDs.
func (_c *OrganizationCreate) AddMemberIDs(ids ...string) *OrganizationCreate {
	_c.mutation.AddMemberIDs(ids...)
	return _c
}

// AddMembers adds the "members" edges to the OrgMembership entity.
func (_c *OrganizationCreate) AddMembers(v ...*OrgMembership) *OrganizationCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddMemberIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (_c *OrganizationCreate) Mutation() *OrganizationMutation {
	return _c.mutation
}

// Save creates the Organization in the database.
func (_c *OrganizationCreate) Save(ctx context.Context) (*Organization, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OrganizationCreate) SaveX(ctx context.Context) *Organization {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrganizationCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrganizationCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *OrganizationCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if organization.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized organization.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := organization.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if organization.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organization.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organization.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Tags(); !ok {
		v := organization.DefaultTags
		_c.mutation.SetTags(v)
	}
	if _, ok := _c.mutation.DisplayName(); !ok {
		v := organization.DefaultDisplayName
		_c.mutation.SetDisplayName(v)
	}
	if _, ok := _c.mutation.PersonalOrg(); !ok {
		v := organization.DefaultPersonalOrg
		_c.mutation.SetPersonalOrg(v)
	}
	if _, ok := _c.mutation.AvatarUpdatedAt(); !ok {
		if organization.DefaultAvatarUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organization.DefaultAvatarUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organization.DefaultAvatarUpdatedAt()
		_c.mutation.SetAvatarUpdatedAt(v)
	}
	if _, ok := _c.mutation.DedicatedDb(); !ok {
		v := organization.DefaultDedicatedDb
		_c.mutation.SetDedicatedDb(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if organization.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized organization.DefaultID (forgotten import generated/runtime?)")
		}
		v := organization.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *OrganizationCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Organization.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`generated: missing required field "Organization.display_name"`)}
	}
	if v, ok := _c.mutation.DisplayName(); ok {
		if err := organization.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Organization.display_name": %w`, err)}
		}
	}
	if v, ok := _c.mutation.AvatarRemoteURL(); ok {
		if err := organization.AvatarRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_remote_url", err: fmt.Errorf(`generated: validator failed for field "Organization.avatar_remote_url": %w`, err)}
		}
	}
	if _, ok := _c.mutation.DedicatedDb(); !ok {
		return &ValidationError{Name: "dedicated_db", err: errors.New(`generated: missing required field "Organization.dedicated_db"`)}
	}
	return nil
}

func (_c *OrganizationCreate) sqlSave(ctx context.Context) (*Organization, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Organization.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OrganizationCreate) createSpec() (*Organization, *sqlgraph.CreateSpec) {
	var (
		_node = &Organization{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(organization.Table, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.Organization
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(organization.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(organization.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(organization.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(organization.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.Tags(); ok {
		_spec.SetField(organization.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.DisplayName(); ok {
		_spec.SetField(organization.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.PersonalOrg(); ok {
		_spec.SetField(organization.FieldPersonalOrg, field.TypeBool, value)
		_node.PersonalOrg = value
	}
	if value, ok := _c.mutation.AvatarRemoteURL(); ok {
		_spec.SetField(organization.FieldAvatarRemoteURL, field.TypeString, value)
		_node.AvatarRemoteURL = &value
	}
	if value, ok := _c.mutation.AvatarUpdatedAt(); ok {
		_spec.SetField(organization.FieldAvatarUpdatedAt, field.TypeTime, value)
		_node.AvatarUpdatedAt = &value
	}
	if value, ok := _c.mutation.DedicatedDb(); ok {
		_spec.SetField(organization.FieldDedicatedDb, field.TypeBool, value)
		_node.DedicatedDb = value
	}
	if value, ok := _c.mutation.StripeCustomerID(); ok {
		_spec.SetField(organization.FieldStripeCustomerID, field.TypeString, value)
		_node.StripeCustomerID = &value
	}
	if nodes := _c.mutation.ControlCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlCreatorsTable,
			Columns: []string{organization.ControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlImplementationCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationCreatorsTable,
			Columns: []string{organization.ControlImplementationCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlObjectiveCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectiveCreatorsTable,
			Columns: []string{organization.ControlObjectiveCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EvidenceCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceCreatorsTable,
			Columns: []string{organization.EvidenceCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GroupCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupCreatorsTable,
			Columns: []string{organization.GroupCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InternalPolicyCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPolicyCreatorsTable,
			Columns: []string{organization.InternalPolicyCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MappedControlCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlCreatorsTable,
			Columns: []string{organization.MappedControlCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NarrativeCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativeCreatorsTable,
			Columns: []string{organization.NarrativeCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProcedureCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProcedureCreatorsTable,
			Columns: []string{organization.ProcedureCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramCreatorsTable,
			Columns: []string{organization.ProgramCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RiskCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RiskCreatorsTable,
			Columns: []string{organization.RiskCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ScheduledJobCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobCreatorsTable,
			Columns: []string{organization.ScheduledJobCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.StandardCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardCreatorsTable,
			Columns: []string{organization.StandardCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TemplateCreatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplateCreatorsTable,
			Columns: []string{organization.TemplateCreatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentOrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrganizationSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrganizationPersonalAccessTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.APIToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: _c.config, mutation: newOrgMembershipMutation(_c.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: []string{organization.SecretsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Hush
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AvatarFileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   organization.AvatarFileTable,
			Columns: []string{organization.AvatarFileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AvatarLocalFileID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Template
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentsTable,
			Columns: []string{organization.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.DocumentData
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrgSubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgSubscriptionsTable,
			Columns: []string{organization.OrgSubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgsubscription.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrgSubscription
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrgProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgProductsTable,
			Columns: []string{organization.OrgProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgproduct.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrgProduct
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrgPricesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgPricesTable,
			Columns: []string{organization.OrgPricesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgprice.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrgPrice
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OrgModulesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrgModulesTable,
			Columns: []string{organization.OrgModulesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmodule.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrgModule
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Invite
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Subscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EntityTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntityTypesTable,
			Columns: []string{organization.EntityTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: []string{organization.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Task
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProgramsTable,
			Columns: []string{organization.ProgramsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Program
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ProceduresTable,
			Columns: []string{organization.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.InternalPoliciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InternalPoliciesTable,
			Columns: []string{organization.InternalPoliciesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(internalpolicy.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.InternalPolicy
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.RisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.RisksTable,
			Columns: []string{organization.RisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(risk.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Risk
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlObjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlObjectivesTable,
			Columns: []string{organization.ControlObjectivesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlObjective
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.NarrativesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NarrativesTable,
			Columns: []string{organization.NarrativesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(narrative.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Narrative
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlsTable,
			Columns: []string{organization.ControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Control
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubcontrolsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubcontrolsTable,
			Columns: []string{organization.SubcontrolsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Subcontrol
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ControlImplementationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ControlImplementationsTable,
			Columns: []string{organization.ControlImplementationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlimplementation.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ControlImplementation
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MappedControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.MappedControlsTable,
			Columns: []string{organization.MappedControlsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mappedcontrol.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.MappedControl
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EvidenceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EvidenceTable,
			Columns: []string{organization.EvidenceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(evidence.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Evidence
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.StandardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.StandardsTable,
			Columns: []string{organization.StandardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Standard
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ActionPlansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ActionPlansTable,
			Columns: []string{organization.ActionPlansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ActionPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CustomDomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.CustomDomainsTable,
			Columns: []string{organization.CustomDomainsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customdomain.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.CustomDomain
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.JobRunnersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnersTable,
			Columns: []string{organization.JobRunnersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunner.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.JobRunner
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.JobRunnerTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerTokensTable,
			Columns: []string{organization.JobRunnerTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnertoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.JobRunnerToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.JobRunnerRegistrationTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobRunnerRegistrationTokensTable,
			Columns: []string{organization.JobRunnerRegistrationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobrunnerregistrationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.JobRunnerRegistrationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DNSVerificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DNSVerificationsTable,
			Columns: []string{organization.DNSVerificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dnsverification.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.DNSVerification
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.JobTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobTemplatesTable,
			Columns: []string{organization.JobTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobtemplate.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.JobTemplate
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ScheduledJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobsTable,
			Columns: []string{organization.ScheduledJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjob.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ScheduledJob
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.JobResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.JobResultsTable,
			Columns: []string{organization.JobResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobresult.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.JobResult
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ScheduledJobRunsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScheduledJobRunsTable,
			Columns: []string{organization.ScheduledJobRunsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scheduledjobrun.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.ScheduledJobRun
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TrustCentersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TrustCentersTable,
			Columns: []string{organization.TrustCentersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenter.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.TrustCenter
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.AssetsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.AssetsTable,
			Columns: []string{organization.AssetsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(asset.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Asset
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ScansTable,
			Columns: []string{organization.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scan.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Scan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.SubprocessorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubprocessorsTable,
			Columns: []string{organization.SubprocessorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subprocessor.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Subprocessor
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ExportsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ExportsTable,
			Columns: []string{organization.ExportsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(export.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Export
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TrustCenterDocsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TrustCenterDocsTable,
			Columns: []string{organization.TrustCenterDocsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(trustcenterdoc.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.TrustCenterDoc
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrganizationCreateBulk is the builder for creating many Organization entities in bulk.
type OrganizationCreateBulk struct {
	config
	err      error
	builders []*OrganizationCreate
}

// Save creates the Organization entities in the database.
func (_c *OrganizationCreateBulk) Save(ctx context.Context) ([]*Organization, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Organization, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OrganizationCreateBulk) SaveX(ctx context.Context) []*Organization {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OrganizationCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OrganizationCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
