// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/apitoken"
	"github.com/theopenlane/core/internal/ent/generated/contact"
	"github.com/theopenlane/core/internal/ent/generated/documentdata"
	"github.com/theopenlane/core/internal/ent/generated/entitlement"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplan"
	"github.com/theopenlane/core/internal/ent/generated/entitlementplanfeature"
	"github.com/theopenlane/core/internal/ent/generated/entity"
	"github.com/theopenlane/core/internal/ent/generated/entitytype"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/feature"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/group"
	"github.com/theopenlane/core/internal/ent/generated/hush"
	"github.com/theopenlane/core/internal/ent/generated/integration"
	"github.com/theopenlane/core/internal/ent/generated/invite"
	"github.com/theopenlane/core/internal/ent/generated/note"
	"github.com/theopenlane/core/internal/ent/generated/oauthprovider"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/organizationsetting"
	"github.com/theopenlane/core/internal/ent/generated/orgmembership"
	"github.com/theopenlane/core/internal/ent/generated/personalaccesstoken"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"
	"github.com/theopenlane/core/internal/ent/generated/task"
	"github.com/theopenlane/core/internal/ent/generated/template"
	"github.com/theopenlane/core/internal/ent/generated/user"
	"github.com/theopenlane/core/internal/ent/generated/webhook"
)

// OrganizationCreate is the builder for creating a Organization entity.
type OrganizationCreate struct {
	config
	mutation *OrganizationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrganizationCreate) SetCreatedAt(t time.Time) *OrganizationCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableCreatedAt(t *time.Time) *OrganizationCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *OrganizationCreate) SetUpdatedAt(t time.Time) *OrganizationCreate {
	oc.mutation.SetUpdatedAt(t)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableUpdatedAt(t *time.Time) *OrganizationCreate {
	if t != nil {
		oc.SetUpdatedAt(*t)
	}
	return oc
}

// SetCreatedBy sets the "created_by" field.
func (oc *OrganizationCreate) SetCreatedBy(s string) *OrganizationCreate {
	oc.mutation.SetCreatedBy(s)
	return oc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableCreatedBy(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetCreatedBy(*s)
	}
	return oc
}

// SetUpdatedBy sets the "updated_by" field.
func (oc *OrganizationCreate) SetUpdatedBy(s string) *OrganizationCreate {
	oc.mutation.SetUpdatedBy(s)
	return oc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableUpdatedBy(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetUpdatedBy(*s)
	}
	return oc
}

// SetMappingID sets the "mapping_id" field.
func (oc *OrganizationCreate) SetMappingID(s string) *OrganizationCreate {
	oc.mutation.SetMappingID(s)
	return oc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableMappingID(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetMappingID(*s)
	}
	return oc
}

// SetTags sets the "tags" field.
func (oc *OrganizationCreate) SetTags(s []string) *OrganizationCreate {
	oc.mutation.SetTags(s)
	return oc
}

// SetDeletedAt sets the "deleted_at" field.
func (oc *OrganizationCreate) SetDeletedAt(t time.Time) *OrganizationCreate {
	oc.mutation.SetDeletedAt(t)
	return oc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableDeletedAt(t *time.Time) *OrganizationCreate {
	if t != nil {
		oc.SetDeletedAt(*t)
	}
	return oc
}

// SetDeletedBy sets the "deleted_by" field.
func (oc *OrganizationCreate) SetDeletedBy(s string) *OrganizationCreate {
	oc.mutation.SetDeletedBy(s)
	return oc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableDeletedBy(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetDeletedBy(*s)
	}
	return oc
}

// SetName sets the "name" field.
func (oc *OrganizationCreate) SetName(s string) *OrganizationCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetDisplayName sets the "display_name" field.
func (oc *OrganizationCreate) SetDisplayName(s string) *OrganizationCreate {
	oc.mutation.SetDisplayName(s)
	return oc
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableDisplayName(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetDisplayName(*s)
	}
	return oc
}

// SetDescription sets the "description" field.
func (oc *OrganizationCreate) SetDescription(s string) *OrganizationCreate {
	oc.mutation.SetDescription(s)
	return oc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableDescription(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetDescription(*s)
	}
	return oc
}

// SetParentOrganizationID sets the "parent_organization_id" field.
func (oc *OrganizationCreate) SetParentOrganizationID(s string) *OrganizationCreate {
	oc.mutation.SetParentOrganizationID(s)
	return oc
}

// SetNillableParentOrganizationID sets the "parent_organization_id" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableParentOrganizationID(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetParentOrganizationID(*s)
	}
	return oc
}

// SetPersonalOrg sets the "personal_org" field.
func (oc *OrganizationCreate) SetPersonalOrg(b bool) *OrganizationCreate {
	oc.mutation.SetPersonalOrg(b)
	return oc
}

// SetNillablePersonalOrg sets the "personal_org" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillablePersonalOrg(b *bool) *OrganizationCreate {
	if b != nil {
		oc.SetPersonalOrg(*b)
	}
	return oc
}

// SetAvatarRemoteURL sets the "avatar_remote_url" field.
func (oc *OrganizationCreate) SetAvatarRemoteURL(s string) *OrganizationCreate {
	oc.mutation.SetAvatarRemoteURL(s)
	return oc
}

// SetNillableAvatarRemoteURL sets the "avatar_remote_url" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableAvatarRemoteURL(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetAvatarRemoteURL(*s)
	}
	return oc
}

// SetDedicatedDb sets the "dedicated_db" field.
func (oc *OrganizationCreate) SetDedicatedDb(b bool) *OrganizationCreate {
	oc.mutation.SetDedicatedDb(b)
	return oc
}

// SetNillableDedicatedDb sets the "dedicated_db" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableDedicatedDb(b *bool) *OrganizationCreate {
	if b != nil {
		oc.SetDedicatedDb(*b)
	}
	return oc
}

// SetID sets the "id" field.
func (oc *OrganizationCreate) SetID(s string) *OrganizationCreate {
	oc.mutation.SetID(s)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *OrganizationCreate) SetNillableID(s *string) *OrganizationCreate {
	if s != nil {
		oc.SetID(*s)
	}
	return oc
}

// SetParentID sets the "parent" edge to the Organization entity by ID.
func (oc *OrganizationCreate) SetParentID(id string) *OrganizationCreate {
	oc.mutation.SetParentID(id)
	return oc
}

// SetNillableParentID sets the "parent" edge to the Organization entity by ID if the given value is not nil.
func (oc *OrganizationCreate) SetNillableParentID(id *string) *OrganizationCreate {
	if id != nil {
		oc = oc.SetParentID(*id)
	}
	return oc
}

// SetParent sets the "parent" edge to the Organization entity.
func (oc *OrganizationCreate) SetParent(o *Organization) *OrganizationCreate {
	return oc.SetParentID(o.ID)
}

// AddChildIDs adds the "children" edge to the Organization entity by IDs.
func (oc *OrganizationCreate) AddChildIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddChildIDs(ids...)
	return oc
}

// AddChildren adds the "children" edges to the Organization entity.
func (oc *OrganizationCreate) AddChildren(o ...*Organization) *OrganizationCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddChildIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (oc *OrganizationCreate) AddGroupIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddGroupIDs(ids...)
	return oc
}

// AddGroups adds the "groups" edges to the Group entity.
func (oc *OrganizationCreate) AddGroups(g ...*Group) *OrganizationCreate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return oc.AddGroupIDs(ids...)
}

// AddTemplateIDs adds the "templates" edge to the Template entity by IDs.
func (oc *OrganizationCreate) AddTemplateIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddTemplateIDs(ids...)
	return oc
}

// AddTemplates adds the "templates" edges to the Template entity.
func (oc *OrganizationCreate) AddTemplates(t ...*Template) *OrganizationCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oc.AddTemplateIDs(ids...)
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by IDs.
func (oc *OrganizationCreate) AddIntegrationIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddIntegrationIDs(ids...)
	return oc
}

// AddIntegrations adds the "integrations" edges to the Integration entity.
func (oc *OrganizationCreate) AddIntegrations(i ...*Integration) *OrganizationCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oc.AddIntegrationIDs(ids...)
}

// SetSettingID sets the "setting" edge to the OrganizationSetting entity by ID.
func (oc *OrganizationCreate) SetSettingID(id string) *OrganizationCreate {
	oc.mutation.SetSettingID(id)
	return oc
}

// SetNillableSettingID sets the "setting" edge to the OrganizationSetting entity by ID if the given value is not nil.
func (oc *OrganizationCreate) SetNillableSettingID(id *string) *OrganizationCreate {
	if id != nil {
		oc = oc.SetSettingID(*id)
	}
	return oc
}

// SetSetting sets the "setting" edge to the OrganizationSetting entity.
func (oc *OrganizationCreate) SetSetting(o *OrganizationSetting) *OrganizationCreate {
	return oc.SetSettingID(o.ID)
}

// AddDocumentdatumIDs adds the "documentdata" edge to the DocumentData entity by IDs.
func (oc *OrganizationCreate) AddDocumentdatumIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddDocumentdatumIDs(ids...)
	return oc
}

// AddDocumentdata adds the "documentdata" edges to the DocumentData entity.
func (oc *OrganizationCreate) AddDocumentdata(d ...*DocumentData) *OrganizationCreate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return oc.AddDocumentdatumIDs(ids...)
}

// AddEntitlementIDs adds the "entitlements" edge to the Entitlement entity by IDs.
func (oc *OrganizationCreate) AddEntitlementIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddEntitlementIDs(ids...)
	return oc
}

// AddEntitlements adds the "entitlements" edges to the Entitlement entity.
func (oc *OrganizationCreate) AddEntitlements(e ...*Entitlement) *OrganizationCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oc.AddEntitlementIDs(ids...)
}

// AddOrganizationEntitlementIDs adds the "organization_entitlement" edge to the Entitlement entity by IDs.
func (oc *OrganizationCreate) AddOrganizationEntitlementIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddOrganizationEntitlementIDs(ids...)
	return oc
}

// AddOrganizationEntitlement adds the "organization_entitlement" edges to the Entitlement entity.
func (oc *OrganizationCreate) AddOrganizationEntitlement(e ...*Entitlement) *OrganizationCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oc.AddOrganizationEntitlementIDs(ids...)
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (oc *OrganizationCreate) AddPersonalAccessTokenIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddPersonalAccessTokenIDs(ids...)
	return oc
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (oc *OrganizationCreate) AddPersonalAccessTokens(p ...*PersonalAccessToken) *OrganizationCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return oc.AddPersonalAccessTokenIDs(ids...)
}

// AddAPITokenIDs adds the "api_tokens" edge to the APIToken entity by IDs.
func (oc *OrganizationCreate) AddAPITokenIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddAPITokenIDs(ids...)
	return oc
}

// AddAPITokens adds the "api_tokens" edges to the APIToken entity.
func (oc *OrganizationCreate) AddAPITokens(a ...*APIToken) *OrganizationCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return oc.AddAPITokenIDs(ids...)
}

// AddOauthproviderIDs adds the "oauthprovider" edge to the OauthProvider entity by IDs.
func (oc *OrganizationCreate) AddOauthproviderIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddOauthproviderIDs(ids...)
	return oc
}

// AddOauthprovider adds the "oauthprovider" edges to the OauthProvider entity.
func (oc *OrganizationCreate) AddOauthprovider(o ...*OauthProvider) *OrganizationCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddOauthproviderIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (oc *OrganizationCreate) AddUserIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddUserIDs(ids...)
	return oc
}

// AddUsers adds the "users" edges to the User entity.
func (oc *OrganizationCreate) AddUsers(u ...*User) *OrganizationCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return oc.AddUserIDs(ids...)
}

// AddInviteIDs adds the "invites" edge to the Invite entity by IDs.
func (oc *OrganizationCreate) AddInviteIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddInviteIDs(ids...)
	return oc
}

// AddInvites adds the "invites" edges to the Invite entity.
func (oc *OrganizationCreate) AddInvites(i ...*Invite) *OrganizationCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oc.AddInviteIDs(ids...)
}

// AddSubscriberIDs adds the "subscribers" edge to the Subscriber entity by IDs.
func (oc *OrganizationCreate) AddSubscriberIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddSubscriberIDs(ids...)
	return oc
}

// AddSubscribers adds the "subscribers" edges to the Subscriber entity.
func (oc *OrganizationCreate) AddSubscribers(s ...*Subscriber) *OrganizationCreate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return oc.AddSubscriberIDs(ids...)
}

// AddWebhookIDs adds the "webhooks" edge to the Webhook entity by IDs.
func (oc *OrganizationCreate) AddWebhookIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddWebhookIDs(ids...)
	return oc
}

// AddWebhooks adds the "webhooks" edges to the Webhook entity.
func (oc *OrganizationCreate) AddWebhooks(w ...*Webhook) *OrganizationCreate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return oc.AddWebhookIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (oc *OrganizationCreate) AddEventIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddEventIDs(ids...)
	return oc
}

// AddEvents adds the "events" edges to the Event entity.
func (oc *OrganizationCreate) AddEvents(e ...*Event) *OrganizationCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oc.AddEventIDs(ids...)
}

// AddSecretIDs adds the "secrets" edge to the Hush entity by IDs.
func (oc *OrganizationCreate) AddSecretIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddSecretIDs(ids...)
	return oc
}

// AddSecrets adds the "secrets" edges to the Hush entity.
func (oc *OrganizationCreate) AddSecrets(h ...*Hush) *OrganizationCreate {
	ids := make([]string, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return oc.AddSecretIDs(ids...)
}

// AddFeatureIDs adds the "features" edge to the Feature entity by IDs.
func (oc *OrganizationCreate) AddFeatureIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddFeatureIDs(ids...)
	return oc
}

// AddFeatures adds the "features" edges to the Feature entity.
func (oc *OrganizationCreate) AddFeatures(f ...*Feature) *OrganizationCreate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return oc.AddFeatureIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (oc *OrganizationCreate) AddFileIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddFileIDs(ids...)
	return oc
}

// AddFiles adds the "files" edges to the File entity.
func (oc *OrganizationCreate) AddFiles(f ...*File) *OrganizationCreate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return oc.AddFileIDs(ids...)
}

// AddEntitlementplanIDs adds the "entitlementplans" edge to the EntitlementPlan entity by IDs.
func (oc *OrganizationCreate) AddEntitlementplanIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddEntitlementplanIDs(ids...)
	return oc
}

// AddEntitlementplans adds the "entitlementplans" edges to the EntitlementPlan entity.
func (oc *OrganizationCreate) AddEntitlementplans(e ...*EntitlementPlan) *OrganizationCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oc.AddEntitlementplanIDs(ids...)
}

// AddEntitlementplanfeatureIDs adds the "entitlementplanfeatures" edge to the EntitlementPlanFeature entity by IDs.
func (oc *OrganizationCreate) AddEntitlementplanfeatureIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddEntitlementplanfeatureIDs(ids...)
	return oc
}

// AddEntitlementplanfeatures adds the "entitlementplanfeatures" edges to the EntitlementPlanFeature entity.
func (oc *OrganizationCreate) AddEntitlementplanfeatures(e ...*EntitlementPlanFeature) *OrganizationCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oc.AddEntitlementplanfeatureIDs(ids...)
}

// AddEntityIDs adds the "entities" edge to the Entity entity by IDs.
func (oc *OrganizationCreate) AddEntityIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddEntityIDs(ids...)
	return oc
}

// AddEntities adds the "entities" edges to the Entity entity.
func (oc *OrganizationCreate) AddEntities(e ...*Entity) *OrganizationCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oc.AddEntityIDs(ids...)
}

// AddEntitytypeIDs adds the "entitytypes" edge to the EntityType entity by IDs.
func (oc *OrganizationCreate) AddEntitytypeIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddEntitytypeIDs(ids...)
	return oc
}

// AddEntitytypes adds the "entitytypes" edges to the EntityType entity.
func (oc *OrganizationCreate) AddEntitytypes(e ...*EntityType) *OrganizationCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oc.AddEntitytypeIDs(ids...)
}

// AddContactIDs adds the "contacts" edge to the Contact entity by IDs.
func (oc *OrganizationCreate) AddContactIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddContactIDs(ids...)
	return oc
}

// AddContacts adds the "contacts" edges to the Contact entity.
func (oc *OrganizationCreate) AddContacts(c ...*Contact) *OrganizationCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return oc.AddContactIDs(ids...)
}

// AddNoteIDs adds the "notes" edge to the Note entity by IDs.
func (oc *OrganizationCreate) AddNoteIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddNoteIDs(ids...)
	return oc
}

// AddNotes adds the "notes" edges to the Note entity.
func (oc *OrganizationCreate) AddNotes(n ...*Note) *OrganizationCreate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return oc.AddNoteIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (oc *OrganizationCreate) AddTaskIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddTaskIDs(ids...)
	return oc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (oc *OrganizationCreate) AddTasks(t ...*Task) *OrganizationCreate {
	ids := make([]string, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return oc.AddTaskIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the OrgMembership entity by IDs.
func (oc *OrganizationCreate) AddMemberIDs(ids ...string) *OrganizationCreate {
	oc.mutation.AddMemberIDs(ids...)
	return oc
}

// AddMembers adds the "members" edges to the OrgMembership entity.
func (oc *OrganizationCreate) AddMembers(o ...*OrgMembership) *OrganizationCreate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return oc.AddMemberIDs(ids...)
}

// Mutation returns the OrganizationMutation object of the builder.
func (oc *OrganizationCreate) Mutation() *OrganizationMutation {
	return oc.mutation
}

// Save creates the Organization in the database.
func (oc *OrganizationCreate) Save(ctx context.Context) (*Organization, error) {
	if err := oc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrganizationCreate) SaveX(ctx context.Context) *Organization {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrganizationCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrganizationCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrganizationCreate) defaults() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		if organization.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized organization.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := organization.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		if organization.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organization.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organization.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.MappingID(); !ok {
		if organization.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized organization.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := organization.DefaultMappingID()
		oc.mutation.SetMappingID(v)
	}
	if _, ok := oc.mutation.Tags(); !ok {
		v := organization.DefaultTags
		oc.mutation.SetTags(v)
	}
	if _, ok := oc.mutation.DisplayName(); !ok {
		v := organization.DefaultDisplayName
		oc.mutation.SetDisplayName(v)
	}
	if _, ok := oc.mutation.PersonalOrg(); !ok {
		v := organization.DefaultPersonalOrg
		oc.mutation.SetPersonalOrg(v)
	}
	if _, ok := oc.mutation.DedicatedDb(); !ok {
		v := organization.DefaultDedicatedDb
		oc.mutation.SetDedicatedDb(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		if organization.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized organization.DefaultID (forgotten import generated/runtime?)")
		}
		v := organization.DefaultID()
		oc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrganizationCreate) check() error {
	if _, ok := oc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "Organization.mapping_id"`)}
	}
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Organization.name"`)}
	}
	if v, ok := oc.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if _, ok := oc.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`generated: missing required field "Organization.display_name"`)}
	}
	if v, ok := oc.mutation.DisplayName(); ok {
		if err := organization.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "Organization.display_name": %w`, err)}
		}
	}
	if v, ok := oc.mutation.AvatarRemoteURL(); ok {
		if err := organization.AvatarRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_remote_url", err: fmt.Errorf(`generated: validator failed for field "Organization.avatar_remote_url": %w`, err)}
		}
	}
	if _, ok := oc.mutation.DedicatedDb(); !ok {
		return &ValidationError{Name: "dedicated_db", err: errors.New(`generated: missing required field "Organization.dedicated_db"`)}
	}
	return nil
}

func (oc *OrganizationCreate) sqlSave(ctx context.Context) (*Organization, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Organization.ID type: %T", _spec.ID.Value)
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrganizationCreate) createSpec() (*Organization, *sqlgraph.CreateSpec) {
	var (
		_node = &Organization{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(organization.Table, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	)
	_spec.Schema = oc.schemaConfig.Organization
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(organization.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.CreatedBy(); ok {
		_spec.SetField(organization.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := oc.mutation.UpdatedBy(); ok {
		_spec.SetField(organization.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := oc.mutation.MappingID(); ok {
		_spec.SetField(organization.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := oc.mutation.Tags(); ok {
		_spec.SetField(organization.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := oc.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := oc.mutation.DeletedBy(); ok {
		_spec.SetField(organization.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := oc.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oc.mutation.DisplayName(); ok {
		_spec.SetField(organization.FieldDisplayName, field.TypeString, value)
		_node.DisplayName = value
	}
	if value, ok := oc.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := oc.mutation.PersonalOrg(); ok {
		_spec.SetField(organization.FieldPersonalOrg, field.TypeBool, value)
		_node.PersonalOrg = value
	}
	if value, ok := oc.mutation.AvatarRemoteURL(); ok {
		_spec.SetField(organization.FieldAvatarRemoteURL, field.TypeString, value)
		_node.AvatarRemoteURL = &value
	}
	if value, ok := oc.mutation.DedicatedDb(); ok {
		_spec.SetField(organization.FieldDedicatedDb, field.TypeBool, value)
		_node.DedicatedDb = value
	}
	if nodes := oc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentOrganizationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Organization
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Group
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.TemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.TemplatesTable,
			Columns: []string{organization.TemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(template.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Template
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Integration
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.OrganizationSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.DocumentdataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.DocumentdataTable,
			Columns: []string{organization.DocumentdataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(documentdata.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.DocumentData
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.EntitlementsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementsTable,
			Columns: []string{organization.EntitlementsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrganizationEntitlementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OrganizationEntitlementTable,
			Columns: []string{organization.OrganizationEntitlementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlement.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Entitlement
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.OrganizationPersonalAccessTokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.APITokensTable,
			Columns: []string{organization.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(apitoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.APIToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OauthproviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthproviderTable,
			Columns: []string{organization.OauthproviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(oauthprovider.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.OauthProvider
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: oc.config, mutation: newOrgMembershipMutation(oc.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.InvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invite.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Invite
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.SubscribersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.SubscribersTable,
			Columns: []string{organization.SubscribersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Subscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.WebhooksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.WebhooksTable,
			Columns: []string{organization.WebhooksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webhook.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Webhook
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.EventsTable,
			Columns: organization.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.OrganizationEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.SecretsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.SecretsTable,
			Columns: organization.SecretsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hush.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.OrganizationSecrets
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.FeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.FeaturesTable,
			Columns: []string{organization.FeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Feature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.FilesTable,
			Columns: organization.FilesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.OrganizationFiles
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.EntitlementplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplansTable,
			Columns: []string{organization.EntitlementplansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.EntitlementPlan
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.EntitlementplanfeaturesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementplanfeaturesTable,
			Columns: []string{organization.EntitlementplanfeaturesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitlementplanfeature.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.EntitlementPlanFeature
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.EntitiesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitiesTable,
			Columns: []string{organization.EntitiesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entity.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Entity
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.EntitytypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitytypesTable,
			Columns: []string{organization.EntitytypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entitytype.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.EntityType
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ContactsTable,
			Columns: []string{organization.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Contact
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.NotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.NotesTable,
			Columns: []string{organization.NotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(note.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.Note
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.TasksTable,
			Columns: organization.TasksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.OrganizationTasks
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = oc.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrganizationCreateBulk is the builder for creating many Organization entities in bulk.
type OrganizationCreateBulk struct {
	config
	err      error
	builders []*OrganizationCreate
}

// Save creates the Organization entities in the database.
func (ocb *OrganizationCreateBulk) Save(ctx context.Context) ([]*Organization, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Organization, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrganizationCreateBulk) SaveX(ctx context.Context) []*Organization {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrganizationCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrganizationCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
