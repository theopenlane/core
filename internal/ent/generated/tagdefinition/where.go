// Code generated by ent, DO NOT EDIT.

package tagdefinition

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/theopenlane/core/internal/ent/generated/predicate"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldUpdatedBy, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldDeletedBy, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldOwnerID, v))
}

// SystemOwned applies equality check predicate on the "system_owned" field. It's identical to SystemOwnedEQ.
func SystemOwned(v bool) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldSystemOwned, v))
}

// InternalNotes applies equality check predicate on the "internal_notes" field. It's identical to InternalNotesEQ.
func InternalNotes(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldInternalNotes, v))
}

// SystemInternalID applies equality check predicate on the "system_internal_id" field. It's identical to SystemInternalIDEQ.
func SystemInternalID(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldSystemInternalID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldName, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldSlug, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldDescription, v))
}

// Color applies equality check predicate on the "color" field. It's identical to ColorEQ.
func Color(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldColor, v))
}

// SystemGenerated applies equality check predicate on the "system_generated" field. It's identical to SystemGeneratedEQ.
func SystemGenerated(v bool) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldSystemGenerated, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContainsFold(FieldDeletedBy, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldTags))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContainsFold(FieldOwnerID, v))
}

// SystemOwnedEQ applies the EQ predicate on the "system_owned" field.
func SystemOwnedEQ(v bool) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldSystemOwned, v))
}

// SystemOwnedNEQ applies the NEQ predicate on the "system_owned" field.
func SystemOwnedNEQ(v bool) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldSystemOwned, v))
}

// SystemOwnedIsNil applies the IsNil predicate on the "system_owned" field.
func SystemOwnedIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldSystemOwned))
}

// SystemOwnedNotNil applies the NotNil predicate on the "system_owned" field.
func SystemOwnedNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldSystemOwned))
}

// InternalNotesEQ applies the EQ predicate on the "internal_notes" field.
func InternalNotesEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldInternalNotes, v))
}

// InternalNotesNEQ applies the NEQ predicate on the "internal_notes" field.
func InternalNotesNEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldInternalNotes, v))
}

// InternalNotesIn applies the In predicate on the "internal_notes" field.
func InternalNotesIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldInternalNotes, vs...))
}

// InternalNotesNotIn applies the NotIn predicate on the "internal_notes" field.
func InternalNotesNotIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldInternalNotes, vs...))
}

// InternalNotesGT applies the GT predicate on the "internal_notes" field.
func InternalNotesGT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldInternalNotes, v))
}

// InternalNotesGTE applies the GTE predicate on the "internal_notes" field.
func InternalNotesGTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldInternalNotes, v))
}

// InternalNotesLT applies the LT predicate on the "internal_notes" field.
func InternalNotesLT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldInternalNotes, v))
}

// InternalNotesLTE applies the LTE predicate on the "internal_notes" field.
func InternalNotesLTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldInternalNotes, v))
}

// InternalNotesContains applies the Contains predicate on the "internal_notes" field.
func InternalNotesContains(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContains(FieldInternalNotes, v))
}

// InternalNotesHasPrefix applies the HasPrefix predicate on the "internal_notes" field.
func InternalNotesHasPrefix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasPrefix(FieldInternalNotes, v))
}

// InternalNotesHasSuffix applies the HasSuffix predicate on the "internal_notes" field.
func InternalNotesHasSuffix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasSuffix(FieldInternalNotes, v))
}

// InternalNotesIsNil applies the IsNil predicate on the "internal_notes" field.
func InternalNotesIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldInternalNotes))
}

// InternalNotesNotNil applies the NotNil predicate on the "internal_notes" field.
func InternalNotesNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldInternalNotes))
}

// InternalNotesEqualFold applies the EqualFold predicate on the "internal_notes" field.
func InternalNotesEqualFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEqualFold(FieldInternalNotes, v))
}

// InternalNotesContainsFold applies the ContainsFold predicate on the "internal_notes" field.
func InternalNotesContainsFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContainsFold(FieldInternalNotes, v))
}

// SystemInternalIDEQ applies the EQ predicate on the "system_internal_id" field.
func SystemInternalIDEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldSystemInternalID, v))
}

// SystemInternalIDNEQ applies the NEQ predicate on the "system_internal_id" field.
func SystemInternalIDNEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldSystemInternalID, v))
}

// SystemInternalIDIn applies the In predicate on the "system_internal_id" field.
func SystemInternalIDIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldSystemInternalID, vs...))
}

// SystemInternalIDNotIn applies the NotIn predicate on the "system_internal_id" field.
func SystemInternalIDNotIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldSystemInternalID, vs...))
}

// SystemInternalIDGT applies the GT predicate on the "system_internal_id" field.
func SystemInternalIDGT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldSystemInternalID, v))
}

// SystemInternalIDGTE applies the GTE predicate on the "system_internal_id" field.
func SystemInternalIDGTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldSystemInternalID, v))
}

// SystemInternalIDLT applies the LT predicate on the "system_internal_id" field.
func SystemInternalIDLT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldSystemInternalID, v))
}

// SystemInternalIDLTE applies the LTE predicate on the "system_internal_id" field.
func SystemInternalIDLTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldSystemInternalID, v))
}

// SystemInternalIDContains applies the Contains predicate on the "system_internal_id" field.
func SystemInternalIDContains(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContains(FieldSystemInternalID, v))
}

// SystemInternalIDHasPrefix applies the HasPrefix predicate on the "system_internal_id" field.
func SystemInternalIDHasPrefix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasPrefix(FieldSystemInternalID, v))
}

// SystemInternalIDHasSuffix applies the HasSuffix predicate on the "system_internal_id" field.
func SystemInternalIDHasSuffix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasSuffix(FieldSystemInternalID, v))
}

// SystemInternalIDIsNil applies the IsNil predicate on the "system_internal_id" field.
func SystemInternalIDIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldSystemInternalID))
}

// SystemInternalIDNotNil applies the NotNil predicate on the "system_internal_id" field.
func SystemInternalIDNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldSystemInternalID))
}

// SystemInternalIDEqualFold applies the EqualFold predicate on the "system_internal_id" field.
func SystemInternalIDEqualFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEqualFold(FieldSystemInternalID, v))
}

// SystemInternalIDContainsFold applies the ContainsFold predicate on the "system_internal_id" field.
func SystemInternalIDContainsFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContainsFold(FieldSystemInternalID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContainsFold(FieldName, v))
}

// AliasesIsNil applies the IsNil predicate on the "aliases" field.
func AliasesIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldAliases))
}

// AliasesNotNil applies the NotNil predicate on the "aliases" field.
func AliasesNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldAliases))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugIsNil applies the IsNil predicate on the "slug" field.
func SlugIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldSlug))
}

// SlugNotNil applies the NotNil predicate on the "slug" field.
func SlugNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldSlug))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContainsFold(FieldSlug, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContainsFold(FieldDescription, v))
}

// ColorEQ applies the EQ predicate on the "color" field.
func ColorEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldColor, v))
}

// ColorNEQ applies the NEQ predicate on the "color" field.
func ColorNEQ(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldColor, v))
}

// ColorIn applies the In predicate on the "color" field.
func ColorIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIn(FieldColor, vs...))
}

// ColorNotIn applies the NotIn predicate on the "color" field.
func ColorNotIn(vs ...string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotIn(FieldColor, vs...))
}

// ColorGT applies the GT predicate on the "color" field.
func ColorGT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGT(FieldColor, v))
}

// ColorGTE applies the GTE predicate on the "color" field.
func ColorGTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldGTE(FieldColor, v))
}

// ColorLT applies the LT predicate on the "color" field.
func ColorLT(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLT(FieldColor, v))
}

// ColorLTE applies the LTE predicate on the "color" field.
func ColorLTE(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldLTE(FieldColor, v))
}

// ColorContains applies the Contains predicate on the "color" field.
func ColorContains(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContains(FieldColor, v))
}

// ColorHasPrefix applies the HasPrefix predicate on the "color" field.
func ColorHasPrefix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasPrefix(FieldColor, v))
}

// ColorHasSuffix applies the HasSuffix predicate on the "color" field.
func ColorHasSuffix(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldHasSuffix(FieldColor, v))
}

// ColorIsNil applies the IsNil predicate on the "color" field.
func ColorIsNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldIsNull(FieldColor))
}

// ColorNotNil applies the NotNil predicate on the "color" field.
func ColorNotNil() predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNotNull(FieldColor))
}

// ColorEqualFold applies the EqualFold predicate on the "color" field.
func ColorEqualFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEqualFold(FieldColor, v))
}

// ColorContainsFold applies the ContainsFold predicate on the "color" field.
func ColorContainsFold(v string) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldContainsFold(FieldColor, v))
}

// SystemGeneratedEQ applies the EQ predicate on the "system_generated" field.
func SystemGeneratedEQ(v bool) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldEQ(FieldSystemGenerated, v))
}

// SystemGeneratedNEQ applies the NEQ predicate on the "system_generated" field.
func SystemGeneratedNEQ(v bool) predicate.TagDefinition {
	return predicate.TagDefinition(sql.FieldNEQ(FieldSystemGenerated, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.TagDefinition {
	return predicate.TagDefinition(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.TagDefinition
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Organization) predicate.TagDefinition {
	return predicate.TagDefinition(func(s *sql.Selector) {
		step := newOwnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.TagDefinition
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TagDefinition) predicate.TagDefinition {
	return predicate.TagDefinition(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TagDefinition) predicate.TagDefinition {
	return predicate.TagDefinition(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TagDefinition) predicate.TagDefinition {
	return predicate.TagDefinition(sql.NotPredicates(p))
}
