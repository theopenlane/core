// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/theopenlane/core/internal/ent/generated/standard"
	"github.com/theopenlane/core/internal/ent/generated/trustcenter"
	"github.com/theopenlane/core/internal/ent/generated/trustcentercompliance"
)

// TrustCenterCompliance is the model entity for the TrustCenterCompliance schema.
type TrustCenterCompliance struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// tags associated with the object
	Tags []string `json:"tags,omitempty"`
	// ID of the standard
	StandardID string `json:"standard_id,omitempty"`
	// ID of the trust center
	TrustCenterID string `json:"trust_center_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TrustCenterComplianceQuery when eager-loading is set.
	Edges        TrustCenterComplianceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TrustCenterComplianceEdges holds the relations/edges for other nodes in the graph.
type TrustCenterComplianceEdges struct {
	// TrustCenter holds the value of the trust_center edge.
	TrustCenter *TrustCenter `json:"trust_center,omitempty"`
	// Standard holds the value of the standard edge.
	Standard *Standard `json:"standard,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// TrustCenterOrErr returns the TrustCenter value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterComplianceEdges) TrustCenterOrErr() (*TrustCenter, error) {
	if e.TrustCenter != nil {
		return e.TrustCenter, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: trustcenter.Label}
	}
	return nil, &NotLoadedError{edge: "trust_center"}
}

// StandardOrErr returns the Standard value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TrustCenterComplianceEdges) StandardOrErr() (*Standard, error) {
	if e.Standard != nil {
		return e.Standard, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: standard.Label}
	}
	return nil, &NotLoadedError{edge: "standard"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TrustCenterCompliance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case trustcentercompliance.FieldTags:
			values[i] = new([]byte)
		case trustcentercompliance.FieldID, trustcentercompliance.FieldCreatedBy, trustcentercompliance.FieldUpdatedBy, trustcentercompliance.FieldDeletedBy, trustcentercompliance.FieldStandardID, trustcentercompliance.FieldTrustCenterID:
			values[i] = new(sql.NullString)
		case trustcentercompliance.FieldCreatedAt, trustcentercompliance.FieldUpdatedAt, trustcentercompliance.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TrustCenterCompliance fields.
func (_m *TrustCenterCompliance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case trustcentercompliance.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case trustcentercompliance.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case trustcentercompliance.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case trustcentercompliance.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case trustcentercompliance.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		case trustcentercompliance.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				_m.DeletedAt = value.Time
			}
		case trustcentercompliance.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				_m.DeletedBy = value.String
			}
		case trustcentercompliance.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case trustcentercompliance.FieldStandardID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field standard_id", values[i])
			} else if value.Valid {
				_m.StandardID = value.String
			}
		case trustcentercompliance.FieldTrustCenterID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trust_center_id", values[i])
			} else if value.Valid {
				_m.TrustCenterID = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TrustCenterCompliance.
// This includes values selected through modifiers, order, etc.
func (_m *TrustCenterCompliance) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTrustCenter queries the "trust_center" edge of the TrustCenterCompliance entity.
func (_m *TrustCenterCompliance) QueryTrustCenter() *TrustCenterQuery {
	return NewTrustCenterComplianceClient(_m.config).QueryTrustCenter(_m)
}

// QueryStandard queries the "standard" edge of the TrustCenterCompliance entity.
func (_m *TrustCenterCompliance) QueryStandard() *StandardQuery {
	return NewTrustCenterComplianceClient(_m.config).QueryStandard(_m)
}

// Update returns a builder for updating this TrustCenterCompliance.
// Note that you need to call TrustCenterCompliance.Unwrap() before calling this method if this TrustCenterCompliance
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TrustCenterCompliance) Update() *TrustCenterComplianceUpdateOne {
	return NewTrustCenterComplianceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TrustCenterCompliance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TrustCenterCompliance) Unwrap() *TrustCenterCompliance {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("generated: TrustCenterCompliance is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TrustCenterCompliance) String() string {
	var builder strings.Builder
	builder.WriteString("TrustCenterCompliance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(_m.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(_m.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", _m.Tags))
	builder.WriteString(", ")
	builder.WriteString("standard_id=")
	builder.WriteString(_m.StandardID)
	builder.WriteString(", ")
	builder.WriteString("trust_center_id=")
	builder.WriteString(_m.TrustCenterID)
	builder.WriteByte(')')
	return builder.String()
}

// TrustCenterCompliances is a parsable slice of TrustCenterCompliance.
type TrustCenterCompliances []*TrustCenterCompliance
