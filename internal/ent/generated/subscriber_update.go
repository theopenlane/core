// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/internal/ent/generated/predicate"
	"github.com/theopenlane/core/internal/ent/generated/subscriber"

	"github.com/theopenlane/core/internal/ent/generated/internal"
)

// SubscriberUpdate is the builder for updating Subscriber entities.
type SubscriberUpdate struct {
	config
	hooks     []Hook
	mutation  *SubscriberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SubscriberUpdate builder.
func (_u *SubscriberUpdate) Where(ps ...predicate.Subscriber) *SubscriberUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubscriberUpdate) SetUpdatedAt(v time.Time) *SubscriberUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SubscriberUpdate) ClearUpdatedAt() *SubscriberUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *SubscriberUpdate) SetUpdatedBy(v string) *SubscriberUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillableUpdatedBy(v *string) *SubscriberUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *SubscriberUpdate) ClearUpdatedBy() *SubscriberUpdate {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubscriberUpdate) SetDeletedAt(v time.Time) *SubscriberUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillableDeletedAt(v *time.Time) *SubscriberUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubscriberUpdate) ClearDeletedAt() *SubscriberUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *SubscriberUpdate) SetDeletedBy(v string) *SubscriberUpdate {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillableDeletedBy(v *string) *SubscriberUpdate {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *SubscriberUpdate) ClearDeletedBy() *SubscriberUpdate {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *SubscriberUpdate) SetTags(v []string) *SubscriberUpdate {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *SubscriberUpdate) AppendTags(v []string) *SubscriberUpdate {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *SubscriberUpdate) ClearTags() *SubscriberUpdate {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *SubscriberUpdate) SetOwnerID(v string) *SubscriberUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillableOwnerID(v *string) *SubscriberUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *SubscriberUpdate) ClearOwnerID() *SubscriberUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetEmail sets the "email" field.
func (_u *SubscriberUpdate) SetEmail(v string) *SubscriberUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillableEmail(v *string) *SubscriberUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *SubscriberUpdate) SetPhoneNumber(v string) *SubscriberUpdate {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillablePhoneNumber(v *string) *SubscriberUpdate {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (_u *SubscriberUpdate) ClearPhoneNumber() *SubscriberUpdate {
	_u.mutation.ClearPhoneNumber()
	return _u
}

// SetVerifiedEmail sets the "verified_email" field.
func (_u *SubscriberUpdate) SetVerifiedEmail(v bool) *SubscriberUpdate {
	_u.mutation.SetVerifiedEmail(v)
	return _u
}

// SetNillableVerifiedEmail sets the "verified_email" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillableVerifiedEmail(v *bool) *SubscriberUpdate {
	if v != nil {
		_u.SetVerifiedEmail(*v)
	}
	return _u
}

// SetVerifiedPhone sets the "verified_phone" field.
func (_u *SubscriberUpdate) SetVerifiedPhone(v bool) *SubscriberUpdate {
	_u.mutation.SetVerifiedPhone(v)
	return _u
}

// SetNillableVerifiedPhone sets the "verified_phone" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillableVerifiedPhone(v *bool) *SubscriberUpdate {
	if v != nil {
		_u.SetVerifiedPhone(*v)
	}
	return _u
}

// SetActive sets the "active" field.
func (_u *SubscriberUpdate) SetActive(v bool) *SubscriberUpdate {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillableActive(v *bool) *SubscriberUpdate {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *SubscriberUpdate) SetToken(v string) *SubscriberUpdate {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillableToken(v *string) *SubscriberUpdate {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetTTL sets the "ttl" field.
func (_u *SubscriberUpdate) SetTTL(v time.Time) *SubscriberUpdate {
	_u.mutation.SetTTL(v)
	return _u
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillableTTL(v *time.Time) *SubscriberUpdate {
	if v != nil {
		_u.SetTTL(*v)
	}
	return _u
}

// SetSecret sets the "secret" field.
func (_u *SubscriberUpdate) SetSecret(v []byte) *SubscriberUpdate {
	_u.mutation.SetSecret(v)
	return _u
}

// SetUnsubscribed sets the "unsubscribed" field.
func (_u *SubscriberUpdate) SetUnsubscribed(v bool) *SubscriberUpdate {
	_u.mutation.SetUnsubscribed(v)
	return _u
}

// SetNillableUnsubscribed sets the "unsubscribed" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillableUnsubscribed(v *bool) *SubscriberUpdate {
	if v != nil {
		_u.SetUnsubscribed(*v)
	}
	return _u
}

// SetSendAttempts sets the "send_attempts" field.
func (_u *SubscriberUpdate) SetSendAttempts(v int) *SubscriberUpdate {
	_u.mutation.ResetSendAttempts()
	_u.mutation.SetSendAttempts(v)
	return _u
}

// SetNillableSendAttempts sets the "send_attempts" field if the given value is not nil.
func (_u *SubscriberUpdate) SetNillableSendAttempts(v *int) *SubscriberUpdate {
	if v != nil {
		_u.SetSendAttempts(*v)
	}
	return _u
}

// AddSendAttempts adds value to the "send_attempts" field.
func (_u *SubscriberUpdate) AddSendAttempts(v int) *SubscriberUpdate {
	_u.mutation.AddSendAttempts(v)
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *SubscriberUpdate) SetOwner(v *Organization) *SubscriberUpdate {
	return _u.SetOwnerID(v.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *SubscriberUpdate) AddEventIDs(ids ...string) *SubscriberUpdate {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *SubscriberUpdate) AddEvents(v ...*Event) *SubscriberUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// Mutation returns the SubscriberMutation object of the builder.
func (_u *SubscriberUpdate) Mutation() *SubscriberMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *SubscriberUpdate) ClearOwner() *SubscriberUpdate {
	_u.mutation.ClearOwner()
	return _u
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *SubscriberUpdate) ClearEvents() *SubscriberUpdate {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *SubscriberUpdate) RemoveEventIDs(ids ...string) *SubscriberUpdate {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *SubscriberUpdate) RemoveEvents(v ...*Event) *SubscriberUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SubscriberUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubscriberUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SubscriberUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubscriberUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubscriberUpdate) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if subscriber.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subscriber.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subscriber.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubscriberUpdate) check() error {
	if v, ok := _u.mutation.Email(); ok {
		if err := subscriber.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "Subscriber.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PhoneNumber(); ok {
		if err := subscriber.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`generated: validator failed for field "Subscriber.phone_number": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Token(); ok {
		if err := subscriber.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "Subscriber.token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Secret(); ok {
		if err := subscriber.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "Subscriber.secret": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *SubscriberUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriberUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *SubscriberUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriber.Table, subscriber.Columns, sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(subscriber.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriber.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(subscriber.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(subscriber.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriber.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriber.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subscriber.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriber.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(subscriber.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(subscriber.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(subscriber.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subscriber.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(subscriber.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(subscriber.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(subscriber.FieldPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.PhoneNumberCleared() {
		_spec.ClearField(subscriber.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := _u.mutation.VerifiedEmail(); ok {
		_spec.SetField(subscriber.FieldVerifiedEmail, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VerifiedPhone(); ok {
		_spec.SetField(subscriber.FieldVerifiedPhone, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Active(); ok {
		_spec.SetField(subscriber.FieldActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(subscriber.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.TTL(); ok {
		_spec.SetField(subscriber.FieldTTL, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Secret(); ok {
		_spec.SetField(subscriber.FieldSecret, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.Unsubscribed(); ok {
		_spec.SetField(subscriber.FieldUnsubscribed, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SendAttempts(); ok {
		_spec.SetField(subscriber.FieldSendAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSendAttempts(); ok {
		_spec.AddField(subscriber.FieldSendAttempts, field.TypeInt, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriber.OwnerTable,
			Columns: []string{subscriber.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subscriber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriber.OwnerTable,
			Columns: []string{subscriber.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscriber.EventsTable,
			Columns: subscriber.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubscriberEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscriber.EventsTable,
			Columns: subscriber.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscriber.EventsTable,
			Columns: subscriber.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Subscriber
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriber.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SubscriberUpdateOne is the builder for updating a single Subscriber entity.
type SubscriberUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SubscriberMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SubscriberUpdateOne) SetUpdatedAt(v time.Time) *SubscriberUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *SubscriberUpdateOne) ClearUpdatedAt() *SubscriberUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *SubscriberUpdateOne) SetUpdatedBy(v string) *SubscriberUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillableUpdatedBy(v *string) *SubscriberUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (_u *SubscriberUpdateOne) ClearUpdatedBy() *SubscriberUpdateOne {
	_u.mutation.ClearUpdatedBy()
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *SubscriberUpdateOne) SetDeletedAt(v time.Time) *SubscriberUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillableDeletedAt(v *time.Time) *SubscriberUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *SubscriberUpdateOne) ClearDeletedAt() *SubscriberUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDeletedBy sets the "deleted_by" field.
func (_u *SubscriberUpdateOne) SetDeletedBy(v string) *SubscriberUpdateOne {
	_u.mutation.SetDeletedBy(v)
	return _u
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillableDeletedBy(v *string) *SubscriberUpdateOne {
	if v != nil {
		_u.SetDeletedBy(*v)
	}
	return _u
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (_u *SubscriberUpdateOne) ClearDeletedBy() *SubscriberUpdateOne {
	_u.mutation.ClearDeletedBy()
	return _u
}

// SetTags sets the "tags" field.
func (_u *SubscriberUpdateOne) SetTags(v []string) *SubscriberUpdateOne {
	_u.mutation.SetTags(v)
	return _u
}

// AppendTags appends value to the "tags" field.
func (_u *SubscriberUpdateOne) AppendTags(v []string) *SubscriberUpdateOne {
	_u.mutation.AppendTags(v)
	return _u
}

// ClearTags clears the value of the "tags" field.
func (_u *SubscriberUpdateOne) ClearTags() *SubscriberUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *SubscriberUpdateOne) SetOwnerID(v string) *SubscriberUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillableOwnerID(v *string) *SubscriberUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *SubscriberUpdateOne) ClearOwnerID() *SubscriberUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetEmail sets the "email" field.
func (_u *SubscriberUpdateOne) SetEmail(v string) *SubscriberUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillableEmail(v *string) *SubscriberUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *SubscriberUpdateOne) SetPhoneNumber(v string) *SubscriberUpdateOne {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillablePhoneNumber(v *string) *SubscriberUpdateOne {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (_u *SubscriberUpdateOne) ClearPhoneNumber() *SubscriberUpdateOne {
	_u.mutation.ClearPhoneNumber()
	return _u
}

// SetVerifiedEmail sets the "verified_email" field.
func (_u *SubscriberUpdateOne) SetVerifiedEmail(v bool) *SubscriberUpdateOne {
	_u.mutation.SetVerifiedEmail(v)
	return _u
}

// SetNillableVerifiedEmail sets the "verified_email" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillableVerifiedEmail(v *bool) *SubscriberUpdateOne {
	if v != nil {
		_u.SetVerifiedEmail(*v)
	}
	return _u
}

// SetVerifiedPhone sets the "verified_phone" field.
func (_u *SubscriberUpdateOne) SetVerifiedPhone(v bool) *SubscriberUpdateOne {
	_u.mutation.SetVerifiedPhone(v)
	return _u
}

// SetNillableVerifiedPhone sets the "verified_phone" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillableVerifiedPhone(v *bool) *SubscriberUpdateOne {
	if v != nil {
		_u.SetVerifiedPhone(*v)
	}
	return _u
}

// SetActive sets the "active" field.
func (_u *SubscriberUpdateOne) SetActive(v bool) *SubscriberUpdateOne {
	_u.mutation.SetActive(v)
	return _u
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillableActive(v *bool) *SubscriberUpdateOne {
	if v != nil {
		_u.SetActive(*v)
	}
	return _u
}

// SetToken sets the "token" field.
func (_u *SubscriberUpdateOne) SetToken(v string) *SubscriberUpdateOne {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillableToken(v *string) *SubscriberUpdateOne {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetTTL sets the "ttl" field.
func (_u *SubscriberUpdateOne) SetTTL(v time.Time) *SubscriberUpdateOne {
	_u.mutation.SetTTL(v)
	return _u
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillableTTL(v *time.Time) *SubscriberUpdateOne {
	if v != nil {
		_u.SetTTL(*v)
	}
	return _u
}

// SetSecret sets the "secret" field.
func (_u *SubscriberUpdateOne) SetSecret(v []byte) *SubscriberUpdateOne {
	_u.mutation.SetSecret(v)
	return _u
}

// SetUnsubscribed sets the "unsubscribed" field.
func (_u *SubscriberUpdateOne) SetUnsubscribed(v bool) *SubscriberUpdateOne {
	_u.mutation.SetUnsubscribed(v)
	return _u
}

// SetNillableUnsubscribed sets the "unsubscribed" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillableUnsubscribed(v *bool) *SubscriberUpdateOne {
	if v != nil {
		_u.SetUnsubscribed(*v)
	}
	return _u
}

// SetSendAttempts sets the "send_attempts" field.
func (_u *SubscriberUpdateOne) SetSendAttempts(v int) *SubscriberUpdateOne {
	_u.mutation.ResetSendAttempts()
	_u.mutation.SetSendAttempts(v)
	return _u
}

// SetNillableSendAttempts sets the "send_attempts" field if the given value is not nil.
func (_u *SubscriberUpdateOne) SetNillableSendAttempts(v *int) *SubscriberUpdateOne {
	if v != nil {
		_u.SetSendAttempts(*v)
	}
	return _u
}

// AddSendAttempts adds value to the "send_attempts" field.
func (_u *SubscriberUpdateOne) AddSendAttempts(v int) *SubscriberUpdateOne {
	_u.mutation.AddSendAttempts(v)
	return _u
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_u *SubscriberUpdateOne) SetOwner(v *Organization) *SubscriberUpdateOne {
	return _u.SetOwnerID(v.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_u *SubscriberUpdateOne) AddEventIDs(ids ...string) *SubscriberUpdateOne {
	_u.mutation.AddEventIDs(ids...)
	return _u
}

// AddEvents adds the "events" edges to the Event entity.
func (_u *SubscriberUpdateOne) AddEvents(v ...*Event) *SubscriberUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddEventIDs(ids...)
}

// Mutation returns the SubscriberMutation object of the builder.
func (_u *SubscriberUpdateOne) Mutation() *SubscriberMutation {
	return _u.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (_u *SubscriberUpdateOne) ClearOwner() *SubscriberUpdateOne {
	_u.mutation.ClearOwner()
	return _u
}

// ClearEvents clears all "events" edges to the Event entity.
func (_u *SubscriberUpdateOne) ClearEvents() *SubscriberUpdateOne {
	_u.mutation.ClearEvents()
	return _u
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (_u *SubscriberUpdateOne) RemoveEventIDs(ids ...string) *SubscriberUpdateOne {
	_u.mutation.RemoveEventIDs(ids...)
	return _u
}

// RemoveEvents removes "events" edges to Event entities.
func (_u *SubscriberUpdateOne) RemoveEvents(v ...*Event) *SubscriberUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveEventIDs(ids...)
}

// Where appends a list predicates to the SubscriberUpdate builder.
func (_u *SubscriberUpdateOne) Where(ps ...predicate.Subscriber) *SubscriberUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SubscriberUpdateOne) Select(field string, fields ...string) *SubscriberUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Subscriber entity.
func (_u *SubscriberUpdateOne) Save(ctx context.Context) (*Subscriber, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubscriberUpdateOne) SaveX(ctx context.Context) *Subscriber {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SubscriberUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubscriberUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SubscriberUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdatedAt(); !ok && !_u.mutation.UpdatedAtCleared() {
		if subscriber.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subscriber.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subscriber.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubscriberUpdateOne) check() error {
	if v, ok := _u.mutation.Email(); ok {
		if err := subscriber.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "Subscriber.email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PhoneNumber(); ok {
		if err := subscriber.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`generated: validator failed for field "Subscriber.phone_number": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Token(); ok {
		if err := subscriber.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "Subscriber.token": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Secret(); ok {
		if err := subscriber.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "Subscriber.secret": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *SubscriberUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SubscriberUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *SubscriberUpdateOne) sqlSave(ctx context.Context) (_node *Subscriber, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscriber.Table, subscriber.Columns, sqlgraph.NewFieldSpec(subscriber.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Subscriber.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriber.FieldID)
		for _, f := range fields {
			if !subscriber.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subscriber.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(subscriber.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(subscriber.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(subscriber.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.CreatedByCleared() {
		_spec.ClearField(subscriber.FieldCreatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(subscriber.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.UpdatedByCleared() {
		_spec.ClearField(subscriber.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subscriber.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subscriber.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DeletedBy(); ok {
		_spec.SetField(subscriber.FieldDeletedBy, field.TypeString, value)
	}
	if _u.mutation.DeletedByCleared() {
		_spec.ClearField(subscriber.FieldDeletedBy, field.TypeString)
	}
	if value, ok := _u.mutation.Tags(); ok {
		_spec.SetField(subscriber.FieldTags, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subscriber.FieldTags, value)
		})
	}
	if _u.mutation.TagsCleared() {
		_spec.ClearField(subscriber.FieldTags, field.TypeJSON)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(subscriber.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(subscriber.FieldPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.PhoneNumberCleared() {
		_spec.ClearField(subscriber.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := _u.mutation.VerifiedEmail(); ok {
		_spec.SetField(subscriber.FieldVerifiedEmail, field.TypeBool, value)
	}
	if value, ok := _u.mutation.VerifiedPhone(); ok {
		_spec.SetField(subscriber.FieldVerifiedPhone, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Active(); ok {
		_spec.SetField(subscriber.FieldActive, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(subscriber.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.TTL(); ok {
		_spec.SetField(subscriber.FieldTTL, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Secret(); ok {
		_spec.SetField(subscriber.FieldSecret, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.Unsubscribed(); ok {
		_spec.SetField(subscriber.FieldUnsubscribed, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SendAttempts(); ok {
		_spec.SetField(subscriber.FieldSendAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSendAttempts(); ok {
		_spec.AddField(subscriber.FieldSendAttempts, field.TypeInt, value)
	}
	if _u.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriber.OwnerTable,
			Columns: []string{subscriber.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subscriber
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscriber.OwnerTable,
			Columns: []string{subscriber.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.Subscriber
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscriber.EventsTable,
			Columns: subscriber.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubscriberEvents
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedEventsIDs(); len(nodes) > 0 && !_u.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscriber.EventsTable,
			Columns: subscriber.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subscriber.EventsTable,
			Columns: subscriber.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _u.schemaConfig.SubscriberEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = _u.schemaConfig.Subscriber
	ctx = internal.NewSchemaConfigContext(ctx, _u.schemaConfig)
	_spec.AddModifiers(_u.modifiers...)
	_node = &Subscriber{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriber.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
