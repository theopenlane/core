// Code generated by ent, DO NOT EDIT.

package changeactor

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the changeactor type in the database.
	Label = "change_actor"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldActorType holds the string denoting the actor_type field in the database.
	FieldActorType = "actor_type"
	// Table holds the table name of the changeactor in the database.
	Table = "change_actors"
)

// Columns holds all SQL columns for changeactor fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldActorType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// ActorType defines the type for the "actor_type" enum field.
type ActorType string

// ActorType values.
const (
	ActorTypeUser    ActorType = "user"
	ActorTypeService ActorType = "service"
)

func (at ActorType) String() string {
	return string(at)
}

// ActorTypeValidator is a validator for the "actor_type" field enum values. It is called by the builders before save.
func ActorTypeValidator(at ActorType) error {
	switch at {
	case ActorTypeUser, ActorTypeService:
		return nil
	default:
		return fmt.Errorf("changeactor: invalid enum value for actor_type field: %q", at)
	}
}

// OrderOption defines the ordering options for the ChangeActor queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByActorType orders the results by the actor_type field.
func ByActorType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldActorType, opts...).ToFunc()
}

// MarshalGQL implements graphql.Marshaler interface.
func (e ActorType) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *ActorType) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = ActorType(str)
	if err := ActorTypeValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid ActorType", str)
	}
	return nil
}
