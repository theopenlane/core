// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/actionplan"
	"github.com/theopenlane/core/internal/ent/generated/control"
	"github.com/theopenlane/core/internal/ent/generated/controlobjective"
	"github.com/theopenlane/core/internal/ent/generated/procedure"
	"github.com/theopenlane/core/internal/ent/generated/program"
	"github.com/theopenlane/core/internal/ent/generated/standard"
)

// StandardCreate is the builder for creating a Standard entity.
type StandardCreate struct {
	config
	mutation *StandardMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *StandardCreate) SetCreatedAt(t time.Time) *StandardCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *StandardCreate) SetNillableCreatedAt(t *time.Time) *StandardCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StandardCreate) SetUpdatedAt(t time.Time) *StandardCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StandardCreate) SetNillableUpdatedAt(t *time.Time) *StandardCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetCreatedBy sets the "created_by" field.
func (sc *StandardCreate) SetCreatedBy(s string) *StandardCreate {
	sc.mutation.SetCreatedBy(s)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *StandardCreate) SetNillableCreatedBy(s *string) *StandardCreate {
	if s != nil {
		sc.SetCreatedBy(*s)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *StandardCreate) SetUpdatedBy(s string) *StandardCreate {
	sc.mutation.SetUpdatedBy(s)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *StandardCreate) SetNillableUpdatedBy(s *string) *StandardCreate {
	if s != nil {
		sc.SetUpdatedBy(*s)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *StandardCreate) SetDeletedAt(t time.Time) *StandardCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *StandardCreate) SetNillableDeletedAt(t *time.Time) *StandardCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetDeletedBy sets the "deleted_by" field.
func (sc *StandardCreate) SetDeletedBy(s string) *StandardCreate {
	sc.mutation.SetDeletedBy(s)
	return sc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sc *StandardCreate) SetNillableDeletedBy(s *string) *StandardCreate {
	if s != nil {
		sc.SetDeletedBy(*s)
	}
	return sc
}

// SetMappingID sets the "mapping_id" field.
func (sc *StandardCreate) SetMappingID(s string) *StandardCreate {
	sc.mutation.SetMappingID(s)
	return sc
}

// SetNillableMappingID sets the "mapping_id" field if the given value is not nil.
func (sc *StandardCreate) SetNillableMappingID(s *string) *StandardCreate {
	if s != nil {
		sc.SetMappingID(*s)
	}
	return sc
}

// SetTags sets the "tags" field.
func (sc *StandardCreate) SetTags(s []string) *StandardCreate {
	sc.mutation.SetTags(s)
	return sc
}

// SetName sets the "name" field.
func (sc *StandardCreate) SetName(s string) *StandardCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetDescription sets the "description" field.
func (sc *StandardCreate) SetDescription(s string) *StandardCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sc *StandardCreate) SetNillableDescription(s *string) *StandardCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetFamily sets the "family" field.
func (sc *StandardCreate) SetFamily(s string) *StandardCreate {
	sc.mutation.SetFamily(s)
	return sc
}

// SetNillableFamily sets the "family" field if the given value is not nil.
func (sc *StandardCreate) SetNillableFamily(s *string) *StandardCreate {
	if s != nil {
		sc.SetFamily(*s)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *StandardCreate) SetStatus(s string) *StandardCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *StandardCreate) SetNillableStatus(s *string) *StandardCreate {
	if s != nil {
		sc.SetStatus(*s)
	}
	return sc
}

// SetStandardType sets the "standard_type" field.
func (sc *StandardCreate) SetStandardType(s string) *StandardCreate {
	sc.mutation.SetStandardType(s)
	return sc
}

// SetNillableStandardType sets the "standard_type" field if the given value is not nil.
func (sc *StandardCreate) SetNillableStandardType(s *string) *StandardCreate {
	if s != nil {
		sc.SetStandardType(*s)
	}
	return sc
}

// SetVersion sets the "version" field.
func (sc *StandardCreate) SetVersion(s string) *StandardCreate {
	sc.mutation.SetVersion(s)
	return sc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (sc *StandardCreate) SetNillableVersion(s *string) *StandardCreate {
	if s != nil {
		sc.SetVersion(*s)
	}
	return sc
}

// SetPurposeAndScope sets the "purpose_and_scope" field.
func (sc *StandardCreate) SetPurposeAndScope(s string) *StandardCreate {
	sc.mutation.SetPurposeAndScope(s)
	return sc
}

// SetNillablePurposeAndScope sets the "purpose_and_scope" field if the given value is not nil.
func (sc *StandardCreate) SetNillablePurposeAndScope(s *string) *StandardCreate {
	if s != nil {
		sc.SetPurposeAndScope(*s)
	}
	return sc
}

// SetBackground sets the "background" field.
func (sc *StandardCreate) SetBackground(s string) *StandardCreate {
	sc.mutation.SetBackground(s)
	return sc
}

// SetNillableBackground sets the "background" field if the given value is not nil.
func (sc *StandardCreate) SetNillableBackground(s *string) *StandardCreate {
	if s != nil {
		sc.SetBackground(*s)
	}
	return sc
}

// SetSatisfies sets the "satisfies" field.
func (sc *StandardCreate) SetSatisfies(s string) *StandardCreate {
	sc.mutation.SetSatisfies(s)
	return sc
}

// SetNillableSatisfies sets the "satisfies" field if the given value is not nil.
func (sc *StandardCreate) SetNillableSatisfies(s *string) *StandardCreate {
	if s != nil {
		sc.SetSatisfies(*s)
	}
	return sc
}

// SetDetails sets the "details" field.
func (sc *StandardCreate) SetDetails(m map[string]interface{}) *StandardCreate {
	sc.mutation.SetDetails(m)
	return sc
}

// SetID sets the "id" field.
func (sc *StandardCreate) SetID(s string) *StandardCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *StandardCreate) SetNillableID(s *string) *StandardCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// AddControlobjectiveIDs adds the "controlobjectives" edge to the ControlObjective entity by IDs.
func (sc *StandardCreate) AddControlobjectiveIDs(ids ...string) *StandardCreate {
	sc.mutation.AddControlobjectiveIDs(ids...)
	return sc
}

// AddControlobjectives adds the "controlobjectives" edges to the ControlObjective entity.
func (sc *StandardCreate) AddControlobjectives(c ...*ControlObjective) *StandardCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddControlobjectiveIDs(ids...)
}

// AddControlIDs adds the "controls" edge to the Control entity by IDs.
func (sc *StandardCreate) AddControlIDs(ids ...string) *StandardCreate {
	sc.mutation.AddControlIDs(ids...)
	return sc
}

// AddControls adds the "controls" edges to the Control entity.
func (sc *StandardCreate) AddControls(c ...*Control) *StandardCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddControlIDs(ids...)
}

// AddProcedureIDs adds the "procedures" edge to the Procedure entity by IDs.
func (sc *StandardCreate) AddProcedureIDs(ids ...string) *StandardCreate {
	sc.mutation.AddProcedureIDs(ids...)
	return sc
}

// AddProcedures adds the "procedures" edges to the Procedure entity.
func (sc *StandardCreate) AddProcedures(p ...*Procedure) *StandardCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddProcedureIDs(ids...)
}

// AddActionplanIDs adds the "actionplans" edge to the ActionPlan entity by IDs.
func (sc *StandardCreate) AddActionplanIDs(ids ...string) *StandardCreate {
	sc.mutation.AddActionplanIDs(ids...)
	return sc
}

// AddActionplans adds the "actionplans" edges to the ActionPlan entity.
func (sc *StandardCreate) AddActionplans(a ...*ActionPlan) *StandardCreate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sc.AddActionplanIDs(ids...)
}

// AddProgramIDs adds the "programs" edge to the Program entity by IDs.
func (sc *StandardCreate) AddProgramIDs(ids ...string) *StandardCreate {
	sc.mutation.AddProgramIDs(ids...)
	return sc
}

// AddPrograms adds the "programs" edges to the Program entity.
func (sc *StandardCreate) AddPrograms(p ...*Program) *StandardCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return sc.AddProgramIDs(ids...)
}

// Mutation returns the StandardMutation object of the builder.
func (sc *StandardCreate) Mutation() *StandardMutation {
	return sc.mutation
}

// Save creates the Standard in the database.
func (sc *StandardCreate) Save(ctx context.Context) (*Standard, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StandardCreate) SaveX(ctx context.Context) *Standard {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StandardCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StandardCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StandardCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if standard.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized standard.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := standard.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if standard.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized standard.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := standard.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.MappingID(); !ok {
		if standard.DefaultMappingID == nil {
			return fmt.Errorf("generated: uninitialized standard.DefaultMappingID (forgotten import generated/runtime?)")
		}
		v := standard.DefaultMappingID()
		sc.mutation.SetMappingID(v)
	}
	if _, ok := sc.mutation.Tags(); !ok {
		v := standard.DefaultTags
		sc.mutation.SetTags(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if standard.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized standard.DefaultID (forgotten import generated/runtime?)")
		}
		v := standard.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *StandardCreate) check() error {
	if _, ok := sc.mutation.MappingID(); !ok {
		return &ValidationError{Name: "mapping_id", err: errors.New(`generated: missing required field "Standard.mapping_id"`)}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Standard.name"`)}
	}
	return nil
}

func (sc *StandardCreate) sqlSave(ctx context.Context) (*Standard, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Standard.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StandardCreate) createSpec() (*Standard, *sqlgraph.CreateSpec) {
	var (
		_node = &Standard{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(standard.Table, sqlgraph.NewFieldSpec(standard.FieldID, field.TypeString))
	)
	_spec.Schema = sc.schemaConfig.Standard
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(standard.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(standard.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(standard.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(standard.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(standard.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.DeletedBy(); ok {
		_spec.SetField(standard.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := sc.mutation.MappingID(); ok {
		_spec.SetField(standard.FieldMappingID, field.TypeString, value)
		_node.MappingID = value
	}
	if value, ok := sc.mutation.Tags(); ok {
		_spec.SetField(standard.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(standard.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.SetField(standard.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sc.mutation.Family(); ok {
		_spec.SetField(standard.FieldFamily, field.TypeString, value)
		_node.Family = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(standard.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.StandardType(); ok {
		_spec.SetField(standard.FieldStandardType, field.TypeString, value)
		_node.StandardType = value
	}
	if value, ok := sc.mutation.Version(); ok {
		_spec.SetField(standard.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := sc.mutation.PurposeAndScope(); ok {
		_spec.SetField(standard.FieldPurposeAndScope, field.TypeString, value)
		_node.PurposeAndScope = value
	}
	if value, ok := sc.mutation.Background(); ok {
		_spec.SetField(standard.FieldBackground, field.TypeString, value)
		_node.Background = value
	}
	if value, ok := sc.mutation.Satisfies(); ok {
		_spec.SetField(standard.FieldSatisfies, field.TypeString, value)
		_node.Satisfies = value
	}
	if value, ok := sc.mutation.Details(); ok {
		_spec.SetField(standard.FieldDetails, field.TypeJSON, value)
		_node.Details = value
	}
	if nodes := sc.mutation.ControlobjectivesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlobjectivesTable,
			Columns: standard.ControlobjectivesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(controlobjective.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.StandardControlobjectives
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ControlsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ControlsTable,
			Columns: standard.ControlsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(control.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.StandardControls
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ProceduresIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   standard.ProceduresTable,
			Columns: []string{standard.ProceduresColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(procedure.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Procedure
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ActionplansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ActionplansTable,
			Columns: standard.ActionplansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(actionplan.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.StandardActionplans
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ProgramsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   standard.ProgramsTable,
			Columns: standard.ProgramsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(program.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.StandardPrograms
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StandardCreateBulk is the builder for creating many Standard entities in bulk.
type StandardCreateBulk struct {
	config
	err      error
	builders []*StandardCreate
}

// Save creates the Standard entities in the database.
func (scb *StandardCreateBulk) Save(ctx context.Context) ([]*Standard, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Standard, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StandardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StandardCreateBulk) SaveX(ctx context.Context) []*Standard {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StandardCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StandardCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
