// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/core/internal/ent/generated/event"
	"github.com/theopenlane/core/internal/ent/generated/export"
	"github.com/theopenlane/core/internal/ent/generated/file"
	"github.com/theopenlane/core/internal/ent/generated/organization"
	"github.com/theopenlane/core/pkg/enums"
)

// ExportCreate is the builder for creating a Export entity.
type ExportCreate struct {
	config
	mutation *ExportMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (_c *ExportCreate) SetCreatedAt(v time.Time) *ExportCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *ExportCreate) SetNillableCreatedAt(v *time.Time) *ExportCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ExportCreate) SetUpdatedAt(v time.Time) *ExportCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ExportCreate) SetNillableUpdatedAt(v *time.Time) *ExportCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *ExportCreate) SetCreatedBy(v string) *ExportCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (_c *ExportCreate) SetNillableCreatedBy(v *string) *ExportCreate {
	if v != nil {
		_c.SetCreatedBy(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *ExportCreate) SetUpdatedBy(v string) *ExportCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_c *ExportCreate) SetNillableUpdatedBy(v *string) *ExportCreate {
	if v != nil {
		_c.SetUpdatedBy(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *ExportCreate) SetDeletedAt(v time.Time) *ExportCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *ExportCreate) SetNillableDeletedAt(v *time.Time) *ExportCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDeletedBy sets the "deleted_by" field.
func (_c *ExportCreate) SetDeletedBy(v string) *ExportCreate {
	_c.mutation.SetDeletedBy(v)
	return _c
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (_c *ExportCreate) SetNillableDeletedBy(v *string) *ExportCreate {
	if v != nil {
		_c.SetDeletedBy(*v)
	}
	return _c
}

// SetOwnerID sets the "owner_id" field.
func (_c *ExportCreate) SetOwnerID(v string) *ExportCreate {
	_c.mutation.SetOwnerID(v)
	return _c
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_c *ExportCreate) SetNillableOwnerID(v *string) *ExportCreate {
	if v != nil {
		_c.SetOwnerID(*v)
	}
	return _c
}

// SetExportType sets the "export_type" field.
func (_c *ExportCreate) SetExportType(v enums.ExportType) *ExportCreate {
	_c.mutation.SetExportType(v)
	return _c
}

// SetFormat sets the "format" field.
func (_c *ExportCreate) SetFormat(v enums.ExportFormat) *ExportCreate {
	_c.mutation.SetFormat(v)
	return _c
}

// SetStatus sets the "status" field.
func (_c *ExportCreate) SetStatus(v enums.ExportStatus) *ExportCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *ExportCreate) SetNillableStatus(v *enums.ExportStatus) *ExportCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetRequestorID sets the "requestor_id" field.
func (_c *ExportCreate) SetRequestorID(v string) *ExportCreate {
	_c.mutation.SetRequestorID(v)
	return _c
}

// SetNillableRequestorID sets the "requestor_id" field if the given value is not nil.
func (_c *ExportCreate) SetNillableRequestorID(v *string) *ExportCreate {
	if v != nil {
		_c.SetRequestorID(*v)
	}
	return _c
}

// SetFields sets the "fields" field.
func (_c *ExportCreate) SetFields(v []string) *ExportCreate {
	_c.mutation.SetFields(v)
	return _c
}

// SetFilters sets the "filters" field.
func (_c *ExportCreate) SetFilters(v string) *ExportCreate {
	_c.mutation.SetFilters(v)
	return _c
}

// SetNillableFilters sets the "filters" field if the given value is not nil.
func (_c *ExportCreate) SetNillableFilters(v *string) *ExportCreate {
	if v != nil {
		_c.SetFilters(*v)
	}
	return _c
}

// SetErrorMessage sets the "error_message" field.
func (_c *ExportCreate) SetErrorMessage(v string) *ExportCreate {
	_c.mutation.SetErrorMessage(v)
	return _c
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (_c *ExportCreate) SetNillableErrorMessage(v *string) *ExportCreate {
	if v != nil {
		_c.SetErrorMessage(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *ExportCreate) SetID(v string) *ExportCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *ExportCreate) SetNillableID(v *string) *ExportCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetOwner sets the "owner" edge to the Organization entity.
func (_c *ExportCreate) SetOwner(v *Organization) *ExportCreate {
	return _c.SetOwnerID(v.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (_c *ExportCreate) AddEventIDs(ids ...string) *ExportCreate {
	_c.mutation.AddEventIDs(ids...)
	return _c
}

// AddEvents adds the "events" edges to the Event entity.
func (_c *ExportCreate) AddEvents(v ...*Event) *ExportCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddEventIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (_c *ExportCreate) AddFileIDs(ids ...string) *ExportCreate {
	_c.mutation.AddFileIDs(ids...)
	return _c
}

// AddFiles adds the "files" edges to the File entity.
func (_c *ExportCreate) AddFiles(v ...*File) *ExportCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddFileIDs(ids...)
}

// Mutation returns the ExportMutation object of the builder.
func (_c *ExportCreate) Mutation() *ExportMutation {
	return _c.mutation
}

// Save creates the Export in the database.
func (_c *ExportCreate) Save(ctx context.Context) (*Export, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ExportCreate) SaveX(ctx context.Context) *Export {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ExportCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ExportCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ExportCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if export.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized export.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := export.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		if export.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized export.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := export.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := export.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.GetFields(); !ok {
		v := export.DefaultFields
		_c.mutation.SetFields(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if export.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized export.DefaultID (forgotten import generated/runtime?)")
		}
		v := export.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *ExportCreate) check() error {
	if _, ok := _c.mutation.ExportType(); !ok {
		return &ValidationError{Name: "export_type", err: errors.New(`generated: missing required field "Export.export_type"`)}
	}
	if v, ok := _c.mutation.ExportType(); ok {
		if err := export.ExportTypeValidator(v); err != nil {
			return &ValidationError{Name: "export_type", err: fmt.Errorf(`generated: validator failed for field "Export.export_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Format(); !ok {
		return &ValidationError{Name: "format", err: errors.New(`generated: missing required field "Export.format"`)}
	}
	if v, ok := _c.mutation.Format(); ok {
		if err := export.FormatValidator(v); err != nil {
			return &ValidationError{Name: "format", err: fmt.Errorf(`generated: validator failed for field "Export.format": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`generated: missing required field "Export.status"`)}
	}
	if v, ok := _c.mutation.Status(); ok {
		if err := export.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Export.status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.RequestorID(); ok {
		if err := export.RequestorIDValidator(v); err != nil {
			return &ValidationError{Name: "requestor_id", err: fmt.Errorf(`generated: validator failed for field "Export.requestor_id": %w`, err)}
		}
	}
	return nil
}

func (_c *ExportCreate) sqlSave(ctx context.Context) (*Export, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Export.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ExportCreate) createSpec() (*Export, *sqlgraph.CreateSpec) {
	var (
		_node = &Export{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(export.Table, sqlgraph.NewFieldSpec(export.FieldID, field.TypeString))
	)
	_spec.Schema = _c.schemaConfig.Export
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(export.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(export.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(export.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(export.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(export.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DeletedBy(); ok {
		_spec.SetField(export.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := _c.mutation.ExportType(); ok {
		_spec.SetField(export.FieldExportType, field.TypeEnum, value)
		_node.ExportType = value
	}
	if value, ok := _c.mutation.Format(); ok {
		_spec.SetField(export.FieldFormat, field.TypeEnum, value)
		_node.Format = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(export.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.RequestorID(); ok {
		_spec.SetField(export.FieldRequestorID, field.TypeString, value)
		_node.RequestorID = value
	}
	if value, ok := _c.mutation.GetFields(); ok {
		_spec.SetField(export.FieldFields, field.TypeJSON, value)
		_node.Fields = value
	}
	if value, ok := _c.mutation.Filters(); ok {
		_spec.SetField(export.FieldFilters, field.TypeString, value)
		_node.Filters = value
	}
	if value, ok := _c.mutation.ErrorMessage(); ok {
		_spec.SetField(export.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if nodes := _c.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   export.OwnerTable,
			Columns: []string{export.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Export
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   export.EventsTable,
			Columns: []string{export.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.Event
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   export.FilesTable,
			Columns: []string{export.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeString),
			},
		}
		edge.Schema = _c.schemaConfig.File
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExportCreateBulk is the builder for creating many Export entities in bulk.
type ExportCreateBulk struct {
	config
	err      error
	builders []*ExportCreate
}

// Save creates the Export entities in the database.
func (_c *ExportCreateBulk) Save(ctx context.Context) ([]*Export, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Export, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExportMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ExportCreateBulk) SaveX(ctx context.Context) []*Export {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ExportCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ExportCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
