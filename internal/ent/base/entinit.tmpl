package schema

import (
	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/schema"

    "github.com/theopenlane/core/internal/ent/mixin"
)

// {{ . }} holds the schema definition for the {{ . }} entity
type {{ . }} struct {
    ent.Schema
}

// Fields of the {{ . }}
func ({{ . }}) Fields() []ent.Field {
    return []ent.Field{
        // Fields go here
    }
}

// Mixin of the {{ . }}
func ({{ . }}) Mixin() []ent.Mixin {
    return []ent.Mixin{
		NewAuditMixin(),
		emixin.IDMixin{},
		mixin.SoftDeleteMixin{},
		emixin.TagMixin{},
    }
}

// Edges of the {{ . }}
func ({{ . }}) Edges() []ent.Edge {
	return []ent.Edge{
		// Edges go here
	}
}

// Indexes of the {{ . }}
func ({{ . }}) Indexes() []ent.Index {
	return []ent.Index{}
}

// Annotations of the {{ . }}
func ({{ . }}) Annotations() []schema.Annotation {
	return []schema.Annotation{
		entgql.QueryField(),
		entgql.RelayConnection(),
		entgql.Mutations(entgql.MutationCreate(), entgql.MutationUpdate()),

        // the above annotations create all the graphQL goodness; if you need the schema only and not the endpoints, use the below annotation instead
        // if you do not need the graphql bits
		// entgql.Skip(entgql.SkipAll),
		// entx.SchemaGenSkip(true),
		// entx.QueryGenSkip(true)

		// the below annotation adds the entfga policy that will check access to the entity
		// remove this annotation (or replace with another policy) if you want checks to be defined
		// by another object
		entfga.SelfAccessChecks(),
	}
}

// Hooks of the {{ . }}
func ({{ . }}) Hooks() []ent.Hook {
	return []ent.Hook{}
}

// Interceptors of the {{ . }}
func ({{ . }}) Interceptors() []ent.Interceptor {
	return []ent.Interceptor{}
}

// Policy of the {{ . }}
func ({{ . }}) Policy() ent.Policy {
	// add the new policy here, the default post-policy is to deny all
	// so you need to ensure there are rules in place to allow the actions you want
	return policy.NewPolicy(
		policy.WithQueryRules(
			// add query rules here, the below is the recommended default
			entfga.CheckReadAccess[*generated.{{ . }}Query](),
		),
		policy.WithMutationRules(
			// add mutation rules here, the below is the recommended default
			policy.CheckCreateAccess(),
			entfga.CheckEditAccess[*generated.{{ . }}Mutation](),
		),
	)
}