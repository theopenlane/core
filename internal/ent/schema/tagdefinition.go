package schema

import (
	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/field"
	"entgo.io/ent/schema/index"
	"github.com/brianvoe/gofakeit/v7"
	"github.com/gertd/go-pluralize"

	"github.com/theopenlane/core/internal/ent/mixin"
	"github.com/theopenlane/core/internal/ent/privacy/policy"
	"github.com/theopenlane/core/internal/ent/validator"
	"github.com/theopenlane/core/internal/graphapi/directives"
	"github.com/theopenlane/core/pkg/models"
	"github.com/theopenlane/entx"
	"github.com/theopenlane/entx/history"
)

// TagDefinition holds the schema definition for the TagDefinition entity
type TagDefinition struct {
	SchemaFuncs

	ent.Schema
}

// SchemaTagDefinitionis the name of the schema in snake case
const SchemaTagDefinition = "tag_definition"

// Name is the name of the schema in snake case
func (TagDefinition) Name() string {
	return SchemaTagDefinition
}

// GetType returns the type of the schema
func (TagDefinition) GetType() any {
	return TagDefinition.Type
}

// PluralName returns the plural name of the schema
func (TagDefinition) PluralName() string {
	return pluralize.NewClient().Plural(SchemaTagDefinition)
}

// Fields of the TagDefinition
func (TagDefinition) Fields() []ent.Field {
	return []ent.Field{
		field.String("name").
			Comment("The name of the tag definition").
			Annotations(entx.FieldSearchable()).
			SchemaType(map[string]string{
				dialect.Postgres: "citext",
			}).
			NotEmpty(),
		field.Strings("aliases").
			Comment("common aliases or misspellings for the tag definition").
			Optional(),
		field.String("slug").
			Comment("The slug of the tag definition, derived from the name, unique per organization").
			NotEmpty().
			SchemaType(map[string]string{
				dialect.Postgres: "citext",
			}).
			Annotations(
				entgql.Skip(entgql.SkipMutationCreateInput, entgql.SkipMutationUpdateInput),
			).
			Optional(),
		field.String("description").
			Comment("The description of the tag definition").
			Optional(),
		field.String("color").
			Comment("The color of the tag definition in hex format").
			Validate(validator.HexColorValidator).
			DefaultFunc(
				func() string {
					defaultTagColors := []string{
						"#2CCBAB", // teal
						"#0EA5E9", // blue
						"#10B981", // green
						"#F59E0B", // amber
						"#EF4444", // red
						"#8B5CF6", // violet
						"#EC4899", // pink
						"#14B8A6", // cyan
						"#6366F1", // indigo
						"#84CC16", // lime
						"#F97316", // orange
						"#64748B", // slate
					}
					randomIndex := gofakeit.Number(0, len(defaultTagColors)-1)

					return defaultTagColors[randomIndex]
				},
			).
			Optional(),
		field.Bool("system_generated").
			Comment("indicates if the task was generated by the system").
			Annotations(
				directives.ExternalSourceDirectiveAnnotation,
			).
			Default(false),
	}
}

// Mixin of the TagDefinition
func (t TagDefinition) Mixin() []ent.Mixin {
	return mixinConfig{
		additionalMixins: []ent.Mixin{
			newOrgOwnedMixin(t),
			mixin.NewSystemOwnedMixin(),
		},
	}.getMixins(t)
}

// Edges of the TagDefinition
func (t TagDefinition) Edges() []ent.Edge {
	return []ent.Edge{
		// Edges go here
		// see defaultEdgeToWithPagination(t, Meow{}) and similar functions
		// in default.go for helper functions
	}
}

// Indexes of the TagDefinition
func (TagDefinition) Indexes() []ent.Index {
	return []ent.Index{
		index.Fields("slug", ownerFieldName).
			Unique().
			Annotations(entsql.IndexWhere("deleted_at is NULL")),
		index.Fields("name", ownerFieldName).
			Unique().Annotations(entsql.IndexWhere("deleted_at is NULL")),
	}
}

// Annotations of the TagDefinition
func (TagDefinition) Annotations() []schema.Annotation {
	return []schema.Annotation{
		history.Annotations{
			Exclude: true,
		},
	}
}

// Hooks of the TagDefinition
func (TagDefinition) Hooks() []ent.Hook {
	return []ent.Hook{}
}

// Interceptors of the TagDefinition
func (TagDefinition) Interceptors() []ent.Interceptor {
	return []ent.Interceptor{}
}

// Modules this schema has access to
func (TagDefinition) Modules() []models.OrgModule {
	return []models.OrgModule{
		models.CatalogBaseModule,
	}
}

// Policy of the TagDefinition
func (TagDefinition) Policy() ent.Policy {
	// add the new policy here, the default post-policy is to deny all
	// so you need to ensure there are rules in place to allow the actions you want
	return policy.NewPolicy(
		policy.WithMutationRules(
			policy.CheckOrgWriteAccess(),
		),
	)
}
