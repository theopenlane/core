{{ define "gql_pagination/helper/paginate" }}
	{{- $node := $.Scope.Node }}
	{{- $r := $.Scope.Query }}
	{{- $names := nodePaginationNames $node }}
	{{- $name := $names.Node }}
	{{- $order := $names.Order }}
	{{- $edge := $names.Edge }}
	{{- $conn := $names.Connection }}
	{{- $newPager := print "new" $name "Pager" -}}

	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := {{ $newPager }}(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if {{ $r }}, err = pager.applyFilter({{ $r }}); err != nil {
		return nil, err
	}
	{{- /* Ensure the "edges" field is marshaled as "[]" in case it is empty. */}}
	conn := &{{ $conn }}{Edges: []*{{ $edge }}{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := {{ $r }}.Clone()
			{{- /* Clear the selection fields before counting to avoid generating invalid queries. */}}
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.CountIDs(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
		{{- /* TotalCount will be settled by conn.build() */}}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if {{ $r }}, err = pager.applyCursors({{ $r }}, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		{{ $r }}.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := {{ $r }}.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	{{ $r }} = pager.applyOrder({{ $r }})
	nodes, err := {{ $r }}.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
{{ end }}